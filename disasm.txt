
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f4 7a 00 00       	call   c0007b14 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 84 43 02 c0       	mov    eax,0xc0024384
c0000025:	3d 84 43 02 c0       	cmp    eax,0xc0024384
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 84 43 02 c0       	push   0xc0024384
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 84 43 02 c0       	mov    eax,0xc0024384
c0000051:	2d 84 43 02 c0       	sub    eax,0xc0024384
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 84 43 02 c0       	push   0xc0024384
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb ec 04 02 c0       	mov    ebx,0xc00204ec
c0000097:	81 eb e8 04 02 c0    	sub    ebx,0xc00204e8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be e8 04 02 c0       	mov    esi,0xc00204e8
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 84 43 02 c0       	push   0xc0024384
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 84 43 02 c0       	push   0xc0024384
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 2f 57 01 00       	call   c00159dc <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 0c a4 00 00       	call   c000a6d1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 0d 57 01 00       	call   c00159dc <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 1a 5c 01 00       	call   c0015f08 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 d9 62 01 00       	call   c00165d0 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 2f 13 01 00       	jmp    c00116ae <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 00 05 02 c0 02 	test   BYTE PTR [edx-0x3ffdfb00],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 00 05 02 c0 01 	test   BYTE PTR [edx-0x3ffdfb00],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 00 05 02 c0 08 	test   BYTE PTR [edx-0x3ffdfb00],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 00 05 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfb00],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 00 05 02 c0 01 	test   BYTE PTR [edx-0x3ffdfb00],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000df7:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b4 6a 00 00       	call   c000798c <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f9 69 00 00       	call   c000798c <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 e3 69 00 00       	call   c000798c <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bf 69 00 00       	call   c000798c <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c0001176:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011b2:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011b7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011c5:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c0001216:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c0001231:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c00012eb:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c00012f1:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c00012f8:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013be:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013c4:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c00013cb:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 04 06 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf9fc]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 d6 7d 01 00       	jmp    c0019b78 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 00 7e 01 00       	jmp    c0019bb8 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 21 7e 01 00       	jmp    c0019bf8 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 60 07 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf8a0]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 60 07 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf8a0]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 98 2f 02 c0       	mov    edx,0xc0022f98
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 1c 06 02 c0       	mov    edx,0xc002061c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 22 06 02 c0       	mov    eax,0xc0020622
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf e0 06 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf920]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 2b 06 02 c0       	mov    eax,0xc002062b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 60 07 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf8a0]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 b0 06 02 c0       	mov    eax,0xc00206b0
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb a0 06 02 c0       	mov    ebx,0xc00206a0
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 80 06 02 c0       	mov    eax,0xc0020680
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 90 06 02 c0       	mov    eax,0xc0020690
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 32 06 02 c0       	mov    edx,0xc0020632
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 3e 06 02 c0       	mov    edx,0xc002063e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba 52 06 02 c0       	mov    edx,0xc0020652
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 8b 1e 00 00       	call   c0007aba <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 83 1e 00 00       	call   c0007aca <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c 80 0a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020a80
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 80 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020a80
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 80 08 02 c0       	mov    eax,0xc0020880
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 c0 07 02 c0       	mov    eax,0xc00207c0
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 80 07 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf880]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 80 0b 02 c0       	push   0xc0020b80
c000611b:	e8 f4 43 01 00       	call   c001a514 <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 8e 0b 02 c0       	push   0xc0020b8e
c0006153:	e8 bc 43 01 00       	call   c001a514 <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 25 43 01 00       	call   c001a4b8 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 60 02 c0       	mov    eax,0xc0026020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 6e 02 c0    	mov    ebp,DWORD PTR ds:0xc0026eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 9d 0b 02 c0       	push   0xc0020b9d
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000655e:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c0006564:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c0006580:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00065f9:	8b 8d 4c 65 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd9ab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00066f1:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000672f:	05 40 65 02 c0       	add    eax,0xc0026540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00067ee:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 a0 0b 02 c0       	push   0xc0020ba0
c0006812:	e8 fd 3c 01 00       	call   c001a514 <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 11 3d 01 00       	call   c001a530 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 a5 0b 02 c0 	mov    DWORD PTR [esp],0xc0020ba5
c000682c:	e8 e3 3c 01 00       	call   c001a514 <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006838:	e8 f3 3c 01 00       	call   c001a530 <iso_kprintfd>
c000683d:	c7 04 24 ab 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bab
c0006844:	e8 cb 3c 01 00       	call   c001a514 <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006850:	e8 db 3c 01 00       	call   c001a530 <iso_kprintfd>
c0006855:	c7 04 24 b1 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bb1
c000685c:	e8 b3 3c 01 00       	call   c001a514 <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006868:	e8 c3 3c 01 00       	call   c001a530 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068ce:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 65 02 c0    	lea    ebp,[eax-0x3ffd9aa8]
c000692a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 65 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd9aa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 9d 0b 02 c0       	push   0xc0020b9d
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a06:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a0c:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 65 02 c0       	add    eax,0xc0026550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 ba 0b 02 c0       	push   0xc0020bba
c0006a31:	e8 de 3a 01 00       	call   c001a514 <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a66:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 c5 0b 02 c0       	push   0xc0020bc5
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 cc 0b 02 c0       	push   0xc0020bcc
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b27:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 d3 0b 02 c0       	push   0xc0020bd3
c0006b48:	e8 c7 39 01 00       	call   c001a514 <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 de 0b 02 c0       	push   0xc0020bde
c0006b63:	e8 ac 39 01 00       	call   c001a514 <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 65 02 c0       	push   0xc0026540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006b8d:	e8 28 0f 00 00       	call   c0007aba <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006b9e:	e8 17 0f 00 00       	call   c0007aba <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 02 0f 00 00       	call   c0007aba <malloc>
c0006bb8:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e9 0e 00 00       	call   c0007aba <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006bfe:	e8 c7 0e 00 00       	call   c0007aca <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b9 0e 00 00       	call   c0007aca <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9f 0e 00 00       	call   c0007aca <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 8a 0e 00 00       	call   c0007aca <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c4d:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	53                   	push   ebx
c0006c5f:	83 ec 08             	sub    esp,0x8
c0006c62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c66:	e8 79 a2 00 00       	call   c0010ee4 <KeExecuteAtexit()>
c0006c6b:	83 ec 0c             	sub    esp,0xc
c0006c6e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c74:	50                   	push   eax
c0006c75:	e8 b8 5f 00 00       	call   c000cc32 <Device::closeAll()>
c0006c7a:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c80:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006c84:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c86:	51                   	push   ecx
c0006c87:	68 0f 27 00 00       	push   0x270f
c0006c8c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0006c90:	53                   	push   ebx
c0006c91:	50                   	push   eax
c0006c92:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006c95:	83 c4 14             	add    esp,0x14
c0006c98:	68 ef 0b 02 c0       	push   0xc0020bef
c0006c9d:	e8 21 aa 00 00       	call   c00116c3 <KePanic(char const*)>
c0006ca2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006ca7:	83 c4 18             	add    esp,0x18
c0006caa:	5b                   	pop    ebx
c0006cab:	c3                   	ret    

c0006cac <Krnl::firstTask()>:
c0006cac:	53                   	push   ebx
c0006cad:	83 ec 14             	sub    esp,0x14
c0006cb0:	fb                   	sti    
c0006cb1:	68 05 0c 02 c0       	push   0xc0020c05
c0006cb6:	e8 08 a3 00 00       	call   c0010fc3 <KeSetBootMessage(char const*)>
c0006cbb:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cc2:	e8 f3 0d 00 00       	call   c0007aba <malloc>
c0006cc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cce:	89 c3                	mov    ebx,eax
c0006cd0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006cd5:	50                   	push   eax
c0006cd6:	68 1e 0c 02 c0       	push   0xc0020c1e
c0006cdb:	6a 01                	push   0x1
c0006cdd:	53                   	push   ebx
c0006cde:	e8 51 f0 00 00       	call   c0015d34 <Process::Process(bool, char const*, Process*, char**)>
c0006ce3:	83 c4 20             	add    esp,0x20
c0006ce6:	68 ff 00 00 00       	push   0xff
c0006ceb:	6a 00                	push   0x0
c0006ced:	68 01 75 00 c0       	push   0xc0007501
c0006cf2:	53                   	push   ebx
c0006cf3:	e8 60 f2 00 00       	call   c0015f58 <Process::createThread(void (*)(void*), void*, int)>
c0006cf8:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006cfe:	6a 7a                	push   0x7a
c0006d00:	6a 00                	push   0x0
c0006d02:	68 40 6a 01 c0       	push   0xc0016a40
c0006d07:	52                   	push   edx
c0006d08:	e8 4b f2 00 00       	call   c0015f58 <Process::createThread(void (*)(void*), void*, int)>
c0006d0d:	83 c4 14             	add    esp,0x14
c0006d10:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d15:	68 1c 0d 02 c0       	push   0xc0020d1c
c0006d1a:	e8 a4 a2 00 00       	call   c0010fc3 <KeSetBootMessage(char const*)>
c0006d1f:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d26:	e8 51 ab 00 00       	call   c001187c <KeInitRand()>
c0006d2b:	e8 33 01 01 00       	call   c0016e63 <Vm::initialise8086()>
c0006d30:	e8 f9 4a 00 00       	call   c000b82e <Fs::initVFS()>
c0006d35:	c7 04 24 2b 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c2b
c0006d3c:	e8 82 a2 00 00       	call   c0010fc3 <KeSetBootMessage(char const*)>
c0006d41:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d46:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d4c:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4e:	6a 00                	push   0x0
c0006d50:	6a 00                	push   0x0
c0006d52:	6a 00                	push   0x0
c0006d54:	50                   	push   eax
c0006d55:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d58:	83 c4 14             	add    esp,0x14
c0006d5b:	68 1c 0d 02 c0       	push   0xc0020d1c
c0006d60:	e8 5e a2 00 00       	call   c0010fc3 <KeSetBootMessage(char const*)>
c0006d65:	e8 5e 42 00 00       	call   c000afc8 <KeInitialiseSymlinks()>
c0006d6a:	e8 b7 a7 00 00       	call   c0011526 <KeLoadSystemEnv()>
c0006d6f:	e8 14 aa 00 00       	call   c0011788 <KeSetupPowerManager()>
c0006d74:	83 c4 0c             	add    esp,0xc
c0006d77:	6a 3a                	push   0x3a
c0006d79:	68 45 0c 02 c0       	push   0xc0020c45
c0006d7e:	68 4e 0c 02 c0       	push   0xc0020c4e
c0006d83:	e8 84 d1 00 00       	call   c0013f0c <Reg::readIntWithDefault(char*, char*, int)>
c0006d88:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d8b:	e8 b8 56 00 00       	call   c000c448 <User::loadClockSettings(int)>
c0006d90:	c7 04 24 40 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d40
c0006d97:	e8 27 a2 00 00       	call   c0010fc3 <KeSetBootMessage(char const*)>
c0006d9c:	59                   	pop    ecx
c0006d9d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006da2:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da8:	53                   	push   ebx
c0006da9:	e8 38 5d 00 00       	call   c000cae6 <Device::loadDriversForAll()>
c0006dae:	c7 04 24 56 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c56
c0006db5:	e8 09 a2 00 00       	call   c0010fc3 <KeSetBootMessage(char const*)>
c0006dba:	58                   	pop    eax
c0006dbb:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006dc1:	5a                   	pop    edx
c0006dc2:	6a 01                	push   0x1
c0006dc4:	68 67 0c 02 c0       	push   0xc0020c67
c0006dc9:	e8 7b e9 00 00       	call   c0015749 <Thr::loadDLL(char const*, bool)>
c0006dce:	59                   	pop    ecx
c0006dcf:	5a                   	pop    edx
c0006dd0:	53                   	push   ebx
c0006dd1:	50                   	push   eax
c0006dd2:	e8 a3 eb 00 00       	call   c001597a <Thr::executeDLL(unsigned long, void*)>
c0006dd7:	83 c4 10             	add    esp,0x10
c0006dda:	83 ec 0c             	sub    esp,0xc
c0006ddd:	6a 02                	push   0x2
c0006ddf:	e8 d8 f5 00 00       	call   c00163bc <blockTask(TaskState)>
c0006de4:	83 c4 10             	add    esp,0x10
c0006de7:	eb f1                	jmp    c0006dda <Krnl::firstTask()+0x12e>
c0006de9:	90                   	nop

c0006dea <Computer::Computer()>:
c0006dea:	83 ec 0c             	sub    esp,0xc
c0006ded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df1:	83 ec 08             	sub    esp,0x8
c0006df4:	68 83 0c 02 c0       	push   0xc0020c83
c0006df9:	50                   	push   eax
c0006dfa:	e8 2d 5d 00 00       	call   c000cb2c <Device::Device(char const*)>
c0006dff:	83 c4 10             	add    esp,0x10
c0006e02:	ba 8c 0d 02 c0       	mov    edx,0xc0020d8c
c0006e07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0b:	89 10                	mov    DWORD PTR [eax],edx
c0006e0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e11:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e33:	83 ca 04             	or     edx,0x4
c0006e36:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e40:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e46:	0f b6 d0             	movzx  edx,al
c0006e49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e58:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5e:	0f b6 d0             	movzx  edx,al
c0006e61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e65:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e74:	8d 50 01             	lea    edx,[eax+0x1]
c0006e77:	88 d1                	mov    cl,dl
c0006e79:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e7d:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e83:	0f b6 d0             	movzx  edx,al
c0006e86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8e:	83 e1 3f             	and    ecx,0x3f
c0006e91:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e95:	90                   	nop
c0006e96:	83 c4 0c             	add    esp,0xc
c0006e99:	c3                   	ret    

c0006e9a <Computer::setBootMessage(char const*)>:
c0006e9a:	c3                   	ret    
c0006e9b:	90                   	nop

c0006e9c <Computer::detectFeatures()>:
c0006e9c:	55                   	push   ebp
c0006e9d:	57                   	push   edi
c0006e9e:	56                   	push   esi
c0006e9f:	53                   	push   ebx
c0006ea0:	83 ec 1c             	sub    esp,0x1c
c0006ea3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ead:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eb3:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb9:	e8 3b 93 ff ff       	call   c00001f9 <detectCPUID>
c0006ebe:	31 d2                	xor    edx,edx
c0006ec0:	85 c0                	test   eax,eax
c0006ec2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec8:	0f 95 c2             	setne  dl
c0006ecb:	83 e0 fd             	and    eax,0xfffffffd
c0006ece:	d1 e2                	shl    edx,1
c0006ed0:	09 d0                	or     eax,edx
c0006ed2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed8:	a8 02                	test   al,0x2
c0006eda:	75 51                	jne    c0006f2d <Computer::detectFeatures()+0x91>
c0006edc:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006ee3:	74 0f                	je     c0006ef4 <Computer::detectFeatures()+0x58>
c0006ee5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006eeb:	83 e0 fb             	and    eax,0xfffffffb
c0006eee:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef4:	e8 ed 85 01 00       	call   c001f4e6 <x87Detect>
c0006ef9:	83 e0 01             	and    eax,0x1
c0006efc:	c1 e0 04             	shl    eax,0x4
c0006eff:	89 c2                	mov    edx,eax
c0006f01:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f07:	83 e0 ef             	and    eax,0xffffffef
c0006f0a:	09 d0                	or     eax,edx
c0006f0c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f12:	88 c2                	mov    dl,al
c0006f14:	a8 10                	test   al,0x10
c0006f16:	0f 85 33 01 00 00    	jne    c000704f <Computer::detectFeatures()+0x1b3>
c0006f1c:	80 e2 80             	and    dl,0x80
c0006f1f:	0f 85 4c 01 00 00    	jne    c0007071 <Computer::detectFeatures()+0x1d5>
c0006f25:	83 c4 1c             	add    esp,0x1c
c0006f28:	5b                   	pop    ebx
c0006f29:	5e                   	pop    esi
c0006f2a:	5f                   	pop    edi
c0006f2b:	5d                   	pop    ebp
c0006f2c:	c3                   	ret    
c0006f2d:	83 ec 0c             	sub    esp,0xc
c0006f30:	6a 20                	push   0x20
c0006f32:	e8 c5 94 00 00       	call   c00103fc <CPU::cpuidCheckEDX(unsigned int)>
c0006f37:	83 e0 01             	and    eax,0x1
c0006f3a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f41:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f47:	83 e0 f7             	and    eax,0xfffffff7
c0006f4a:	09 d0                	or     eax,edx
c0006f4c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f52:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f59:	e8 9e 94 00 00       	call   c00103fc <CPU::cpuidCheckEDX(unsigned int)>
c0006f5e:	89 c2                	mov    edx,eax
c0006f60:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f66:	83 e2 01             	and    edx,0x1
c0006f69:	83 e0 fe             	and    eax,0xfffffffe
c0006f6c:	09 d0                	or     eax,edx
c0006f6e:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f74:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f7b:	e8 7c 94 00 00       	call   c00103fc <CPU::cpuidCheckEDX(unsigned int)>
c0006f80:	89 c2                	mov    edx,eax
c0006f82:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f88:	c1 e2 07             	shl    edx,0x7
c0006f8b:	83 e0 7f             	and    eax,0x7f
c0006f8e:	09 d0                	or     eax,edx
c0006f90:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f96:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f9d:	e8 5a 94 00 00       	call   c00103fc <CPU::cpuidCheckEDX(unsigned int)>
c0006fa2:	83 c4 10             	add    esp,0x10
c0006fa5:	83 e0 01             	and    eax,0x1
c0006fa8:	c1 e0 05             	shl    eax,0x5
c0006fab:	89 c2                	mov    edx,eax
c0006fad:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fb3:	83 e0 df             	and    eax,0xffffffdf
c0006fb6:	09 d0                	or     eax,edx
c0006fb8:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006fc2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc8:	0f 84 c9 00 00 00    	je     c0007097 <Computer::detectFeatures()+0x1fb>
c0006fce:	83 e0 fe             	and    eax,0xfffffffe
c0006fd1:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fdd:	89 c2                	mov    edx,eax
c0006fdf:	83 e2 09             	and    edx,0x9
c0006fe2:	83 fa 01             	cmp    edx,0x1
c0006fe5:	75 09                	jne    c0006ff0 <Computer::detectFeatures()+0x154>
c0006fe7:	83 e0 fe             	and    eax,0xfffffffe
c0006fea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff0:	83 ec 0c             	sub    esp,0xc
c0006ff3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff7:	50                   	push   eax
c0006ff8:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ffc:	55                   	push   ebp
c0006ffd:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007001:	57                   	push   edi
c0007002:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007006:	56                   	push   esi
c0007007:	68 00 00 00 80       	push   0x80000000
c000700c:	e8 67 93 00 00       	call   c0010378 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007011:	83 c4 20             	add    esp,0x20
c0007014:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000701b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701f:	0f 86 b7 fe ff ff    	jbe    c0006edc <Computer::detectFeatures()+0x40>
c0007025:	83 ec 0c             	sub    esp,0xc
c0007028:	50                   	push   eax
c0007029:	55                   	push   ebp
c000702a:	57                   	push   edi
c000702b:	56                   	push   esi
c000702c:	68 01 00 00 80       	push   0x80000001
c0007031:	e8 42 93 00 00       	call   c0010378 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007036:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000703c:	83 c4 20             	add    esp,0x20
c000703f:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007044:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000704a:	e9 8d fe ff ff       	jmp    c0006edc <Computer::detectFeatures()+0x40>
c000704f:	e8 4c 84 01 00       	call   c001f4a0 <absolutelyNoChanceInHell>
c0007054:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c000705a:	c1 e0 07             	shl    eax,0x7
c000705d:	83 e2 7f             	and    edx,0x7f
c0007060:	09 c2                	or     edx,eax
c0007062:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007068:	80 e2 80             	and    dl,0x80
c000706b:	0f 84 b4 fe ff ff    	je     c0006f25 <Computer::detectFeatures()+0x89>
c0007071:	e8 9a 80 01 00       	call   c001f110 <avxDetect>
c0007076:	83 e0 01             	and    eax,0x1
c0007079:	c1 e0 05             	shl    eax,0x5
c000707c:	89 c2                	mov    edx,eax
c000707e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007084:	83 e0 df             	and    eax,0xffffffdf
c0007087:	09 d0                	or     eax,edx
c0007089:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708f:	83 c4 1c             	add    esp,0x1c
c0007092:	5b                   	pop    ebx
c0007093:	5e                   	pop    esi
c0007094:	5f                   	pop    edi
c0007095:	5d                   	pop    ebp
c0007096:	c3                   	ret    
c0007097:	83 ec 0c             	sub    esp,0xc
c000709a:	68 00 02 00 00       	push   0x200
c000709f:	e8 58 93 00 00       	call   c00103fc <CPU::cpuidCheckEDX(unsigned int)>
c00070a4:	83 c4 10             	add    esp,0x10
c00070a7:	89 c2                	mov    edx,eax
c00070a9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070af:	83 e2 01             	and    edx,0x1
c00070b2:	83 e0 fe             	and    eax,0xfffffffe
c00070b5:	09 d0                	or     eax,edx
c00070b7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070bd:	e9 15 ff ff ff       	jmp    c0006fd7 <Computer::detectFeatures()+0x13b>

c00070c2 <Computer::displayFeatures()>:
c00070c2:	c3                   	ret    
c00070c3:	90                   	nop

c00070c4 <Computer::rdmsr(unsigned int)>:
c00070c4:	83 ec 0c             	sub    esp,0xc
c00070c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070cb:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070d2:	74 0a                	je     c00070de <Computer::rdmsr(unsigned int)+0x1a>
c00070d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d8:	0f 32                	rdmsr  
c00070da:	83 c4 0c             	add    esp,0xc
c00070dd:	c3                   	ret    
c00070de:	83 ec 0c             	sub    esp,0xc
c00070e1:	68 8c 0c 02 c0       	push   0xc0020c8c
c00070e6:	e8 d8 a5 00 00       	call   c00116c3 <KePanic(char const*)>
c00070eb:	83 c4 10             	add    esp,0x10
c00070ee:	eb e4                	jmp    c00070d4 <Computer::rdmsr(unsigned int)+0x10>

c00070f0 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070f0:	57                   	push   edi
c00070f1:	56                   	push   esi
c00070f2:	83 ec 04             	sub    esp,0x4
c00070f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070fd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007101:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007108:	74 10                	je     c000711a <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c000710a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710e:	89 f0                	mov    eax,esi
c0007110:	89 fa                	mov    edx,edi
c0007112:	0f 30                	wrmsr  
c0007114:	83 c4 04             	add    esp,0x4
c0007117:	5e                   	pop    esi
c0007118:	5f                   	pop    edi
c0007119:	c3                   	ret    
c000711a:	83 ec 0c             	sub    esp,0xc
c000711d:	68 92 0c 02 c0       	push   0xc0020c92
c0007122:	e8 9c a5 00 00       	call   c00116c3 <KePanic(char const*)>
c0007127:	83 c4 10             	add    esp,0x10
c000712a:	eb de                	jmp    c000710a <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000712c <Computer::shutdown()>:
c000712c:	83 ec 0c             	sub    esp,0xc
c000712f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007133:	8b 10                	mov    edx,DWORD PTR [eax]
c0007135:	6a 00                	push   0x0
c0007137:	6a 00                	push   0x0
c0007139:	6a 00                	push   0x0
c000713b:	50                   	push   eax
c000713c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713f:	83 c4 1c             	add    esp,0x1c
c0007142:	c3                   	ret    
c0007143:	90                   	nop

c0007144 <Computer::restart()>:
c0007144:	83 ec 0c             	sub    esp,0xc
c0007147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000714b:	8b 10                	mov    edx,DWORD PTR [eax]
c000714d:	6a 00                	push   0x0
c000714f:	6a 00                	push   0x0
c0007151:	6a 01                	push   0x1
c0007153:	50                   	push   eax
c0007154:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007157:	83 c4 1c             	add    esp,0x1c
c000715a:	c3                   	ret    
c000715b:	90                   	nop

c000715c <Computer::sleep()>:
c000715c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007160:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007166:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000716a:	e9 a5 8c 00 00       	jmp    c000fe14 <ACPI::sleep()>
c000716f:	90                   	nop

c0007170 <Computer::nmiEnabled()>:
c0007170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007174:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000717a:	c3                   	ret    
c000717b:	90                   	nop

c000717c <Computer::readCMOS(unsigned char)>:
c000717c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007180:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007184:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c000718b:	75 09                	jne    c0007196 <Computer::readCMOS(unsigned char)+0x1a>
c000718d:	b2 80                	mov    dl,0x80
c000718f:	09 d0                	or     eax,edx
c0007191:	e6 70                	out    0x70,al
c0007193:	e4 71                	in     al,0x71
c0007195:	c3                   	ret    
c0007196:	31 d2                	xor    edx,edx
c0007198:	eb f5                	jmp    c000718f <Computer::readCMOS(unsigned char)+0x13>

c000719a <Computer::enableNMI(bool)>:
c000719a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071a2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071b0:	eb ca                	jmp    c000717c <Computer::readCMOS(unsigned char)>

c00071b2 <Computer::open(int, int, void*)>:
c00071b2:	56                   	push   esi
c00071b3:	53                   	push   ebx
c00071b4:	83 ec 10             	sub    esp,0x10
c00071b7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071bb:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071c2:	68 98 0c 02 c0       	push   0xc0020c98
c00071c7:	0f 94 05 e0 37 02 c0 	sete   BYTE PTR ds:0xc00237e0
c00071ce:	e8 f0 9d 00 00       	call   c0010fc3 <KeSetBootMessage(char const*)>
c00071d3:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071da:	e8 db 08 00 00       	call   c0007aba <malloc>
c00071df:	89 04 24             	mov    DWORD PTR [esp],eax
c00071e2:	89 c6                	mov    esi,eax
c00071e4:	e8 9f 87 00 00       	call   c000f988 <ACPI::ACPI()>
c00071e9:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071ef:	58                   	pop    eax
c00071f0:	5a                   	pop    edx
c00071f1:	56                   	push   esi
c00071f2:	53                   	push   ebx
c00071f3:	e8 d2 57 00 00       	call   c000c9ca <Device::addChild(Device*)>
c00071f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071fb:	e8 9c fc ff ff       	call   c0006e9c <Computer::detectFeatures()>
c0007200:	59                   	pop    ecx
c0007201:	5e                   	pop    esi
c0007202:	6a 01                	push   0x1
c0007204:	53                   	push   ebx
c0007205:	e8 90 ff ff ff       	call   c000719a <Computer::enableNMI(bool)>
c000720a:	c7 04 24 b0 0c 02 c0 	mov    DWORD PTR [esp],0xc0020cb0
c0007211:	e8 ad 9d 00 00       	call   c0010fc3 <KeSetBootMessage(char const*)>
c0007216:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c000721d:	e8 98 08 00 00       	call   c0007aba <malloc>
c0007222:	89 04 24             	mov    DWORD PTR [esp],eax
c0007225:	89 c6                	mov    esi,eax
c0007227:	e8 88 92 00 00       	call   c00104b4 <CPU::CPU()>
c000722c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007232:	58                   	pop    eax
c0007233:	5a                   	pop    edx
c0007234:	56                   	push   esi
c0007235:	53                   	push   ebx
c0007236:	e8 8f 57 00 00       	call   c000c9ca <Device::addChild(Device*)>
c000723b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007241:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007245:	8b 10                	mov    edx,DWORD PTR [eax]
c0007247:	51                   	push   ecx
c0007248:	6a 00                	push   0x0
c000724a:	6a 00                	push   0x0
c000724c:	50                   	push   eax
c000724d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007250:	83 c4 14             	add    esp,0x14
c0007253:	68 60 0d 02 c0       	push   0xc0020d60
c0007258:	e8 66 9d 00 00       	call   c0010fc3 <KeSetBootMessage(char const*)>
c000725d:	e8 3e 0e 01 00       	call   c00180a0 <HalInitialiseCoprocessor()>
c0007262:	c7 04 24 ca 0c 02 c0 	mov    DWORD PTR [esp],0xc0020cca
c0007269:	e8 55 9d 00 00       	call   c0010fc3 <KeSetBootMessage(char const*)>
c000726e:	c7 04 24 ac 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cac
c0007275:	e8 0a ee 00 00       	call   c0016084 <setupMultitasking(void (*)())>
c000727a:	83 c4 14             	add    esp,0x14
c000727d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007282:	5b                   	pop    ebx
c0007283:	5e                   	pop    esi
c0007284:	c3                   	ret    
c0007285:	90                   	nop

c0007286 <Computer::disableNMI()>:
c0007286:	6a 00                	push   0x0
c0007288:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728c:	50                   	push   eax
c000728d:	e8 08 ff ff ff       	call   c000719a <Computer::enableNMI(bool)>
c0007292:	5a                   	pop    edx
c0007293:	59                   	pop    ecx
c0007294:	c3                   	ret    
c0007295:	90                   	nop

c0007296 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007296:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000729a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00072a2:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a9:	75 0b                	jne    c00072b6 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072ab:	b1 80                	mov    cl,0x80
c00072ad:	09 c8                	or     eax,ecx
c00072af:	e6 70                	out    0x70,al
c00072b1:	88 d0                	mov    al,dl
c00072b3:	e6 71                	out    0x71,al
c00072b5:	c3                   	ret    
c00072b6:	31 c9                	xor    ecx,ecx
c00072b8:	eb f3                	jmp    c00072ad <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072ba <Computer::handleNMI()>:
c00072ba:	56                   	push   esi
c00072bb:	53                   	push   ebx
c00072bc:	83 ec 10             	sub    esp,0x10
c00072bf:	e4 92                	in     al,0x92
c00072c1:	89 c6                	mov    esi,eax
c00072c3:	e4 61                	in     al,0x61
c00072c5:	68 e5 0c 02 c0       	push   0xc0020ce5
c00072ca:	88 c3                	mov    bl,al
c00072cc:	e8 78 36 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00072d1:	83 c4 10             	add    esp,0x10
c00072d4:	83 e6 10             	and    esi,0x10
c00072d7:	75 10                	jne    c00072e9 <Computer::handleNMI()+0x2f>
c00072d9:	f6 c3 40             	test   bl,0x40
c00072dc:	75 20                	jne    c00072fe <Computer::handleNMI()+0x44>
c00072de:	80 e3 80             	and    bl,0x80
c00072e1:	75 30                	jne    c0007313 <Computer::handleNMI()+0x59>
c00072e3:	83 c4 04             	add    esp,0x4
c00072e6:	5b                   	pop    ebx
c00072e7:	5e                   	pop    esi
c00072e8:	c3                   	ret    
c00072e9:	83 ec 0c             	sub    esp,0xc
c00072ec:	68 f6 0c 02 c0       	push   0xc0020cf6
c00072f1:	e8 cd a3 00 00       	call   c00116c3 <KePanic(char const*)>
c00072f6:	83 c4 10             	add    esp,0x10
c00072f9:	f6 c3 40             	test   bl,0x40
c00072fc:	74 e0                	je     c00072de <Computer::handleNMI()+0x24>
c00072fe:	83 ec 0c             	sub    esp,0xc
c0007301:	68 03 0d 02 c0       	push   0xc0020d03
c0007306:	e8 b8 a3 00 00       	call   c00116c3 <KePanic(char const*)>
c000730b:	83 c4 10             	add    esp,0x10
c000730e:	80 e3 80             	and    bl,0x80
c0007311:	74 d0                	je     c00072e3 <Computer::handleNMI()+0x29>
c0007313:	c7 44 24 10 0d 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020d0d
c000731b:	83 c4 04             	add    esp,0x4
c000731e:	5b                   	pop    ebx
c000731f:	5e                   	pop    esi
c0007320:	e9 9e a3 00 00       	jmp    c00116c3 <KePanic(char const*)>
c0007325:	90                   	nop

c0007326 <GDTEntry::setBase(unsigned int)>:
c0007326:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000732a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732e:	89 c1                	mov    ecx,eax
c0007330:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007334:	c1 e9 10             	shr    ecx,0x10
c0007337:	c1 e8 18             	shr    eax,0x18
c000733a:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000733d:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007340:	c3                   	ret    
c0007341:	90                   	nop

c0007342 <GDTEntry::setLimit(unsigned int)>:
c0007342:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007346:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000734a:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000734d:	66 89 01             	mov    WORD PTR [ecx],ax
c0007350:	83 e2 f0             	and    edx,0xfffffff0
c0007353:	c1 e8 10             	shr    eax,0x10
c0007356:	83 e0 0f             	and    eax,0xf
c0007359:	09 d0                	or     eax,edx
c000735b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735e:	c3                   	ret    
c000735f:	90                   	nop

c0007360 <GDT::GDT()>:
c0007360:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007364:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000736a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007374:	90                   	nop
c0007375:	c3                   	ret    

c0007376 <GDT::addEntry(GDTEntry)>:
c0007376:	53                   	push   ebx
c0007377:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000737b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737f:	8b 02                	mov    eax,DWORD PTR [edx]
c0007381:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007385:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007389:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000738d:	8d 48 01             	lea    ecx,[eax+0x1]
c0007390:	c1 e0 03             	shl    eax,0x3
c0007393:	89 0a                	mov    DWORD PTR [edx],ecx
c0007395:	5b                   	pop    ebx
c0007396:	c3                   	ret    
c0007397:	90                   	nop

c0007398 <GDT::getNumberOfEntries()>:
c0007398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000739c:	8b 00                	mov    eax,DWORD PTR [eax]
c000739e:	c3                   	ret    
c000739f:	90                   	nop

c00073a0 <GDT::flush()>:
c00073a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a4:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a6:	83 c0 04             	add    eax,0x4
c00073a9:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073b0:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073b5:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073bc:	e9 99 8f ff ff       	jmp    c000035a <loadGDT>
c00073c1:	90                   	nop

c00073c2 <GDT::setup()>:
c00073c2:	57                   	push   edi
c00073c3:	56                   	push   esi
c00073c4:	53                   	push   ebx
c00073c5:	83 ec 30             	sub    esp,0x30
c00073c8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073cc:	6a 00                	push   0x0
c00073ce:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073d2:	56                   	push   esi
c00073d3:	e8 4e ff ff ff       	call   c0007326 <GDTEntry::setBase(unsigned int)>
c00073d8:	6a 00                	push   0x0
c00073da:	56                   	push   esi
c00073db:	e8 62 ff ff ff       	call   c0007342 <GDTEntry::setLimit(unsigned int)>
c00073e0:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e8:	6a 00                	push   0x0
c00073ea:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ee:	56                   	push   esi
c00073ef:	e8 32 ff ff ff       	call   c0007326 <GDTEntry::setBase(unsigned int)>
c00073f4:	68 ff ff ff 00       	push   0xffffff
c00073f9:	56                   	push   esi
c00073fa:	e8 43 ff ff ff       	call   c0007342 <GDTEntry::setLimit(unsigned int)>
c00073ff:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007403:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007407:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000740b:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740f:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007414:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007419:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000741d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007421:	89 f8                	mov    eax,edi
c0007423:	89 fa                	mov    edx,edi
c0007425:	80 e4 f7             	and    ah,0xf7
c0007428:	80 ce 60             	or     dh,0x60
c000742b:	89 c7                	mov    edi,eax
c000742d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007431:	80 cc 60             	or     ah,0x60
c0007434:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007438:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000743c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007440:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007444:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007448:	83 c4 20             	add    esp,0x20
c000744b:	6a 00                	push   0x0
c000744d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007451:	50                   	push   eax
c0007452:	e8 cf fe ff ff       	call   c0007326 <GDTEntry::setBase(unsigned int)>
c0007457:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000745b:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745f:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007463:	83 e0 3f             	and    eax,0x3f
c0007466:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000746a:	6a 00                	push   0x0
c000746c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007470:	50                   	push   eax
c0007471:	e8 b0 fe ff ff       	call   c0007326 <GDTEntry::setBase(unsigned int)>
c0007476:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000747a:	83 e0 3f             	and    eax,0x3f
c000747d:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0007481:	83 c4 0c             	add    esp,0xc
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748c:	53                   	push   ebx
c000748d:	e8 e4 fe ff ff       	call   c0007376 <GDT::addEntry(GDTEntry)>
c0007492:	83 c4 0c             	add    esp,0xc
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000749d:	53                   	push   ebx
c000749e:	e8 d3 fe ff ff       	call   c0007376 <GDT::addEntry(GDTEntry)>
c00074a3:	83 c4 0c             	add    esp,0xc
c00074a6:	57                   	push   edi
c00074a7:	56                   	push   esi
c00074a8:	53                   	push   ebx
c00074a9:	e8 c8 fe ff ff       	call   c0007376 <GDT::addEntry(GDTEntry)>
c00074ae:	83 c4 0c             	add    esp,0xc
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b9:	53                   	push   ebx
c00074ba:	e8 b7 fe ff ff       	call   c0007376 <GDT::addEntry(GDTEntry)>
c00074bf:	83 c4 0c             	add    esp,0xc
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074ca:	53                   	push   ebx
c00074cb:	e8 a6 fe ff ff       	call   c0007376 <GDT::addEntry(GDTEntry)>
c00074d0:	83 c4 0c             	add    esp,0xc
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074db:	53                   	push   ebx
c00074dc:	e8 95 fe ff ff       	call   c0007376 <GDT::addEntry(GDTEntry)>
c00074e1:	83 c4 0c             	add    esp,0xc
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074ec:	53                   	push   ebx
c00074ed:	e8 84 fe ff ff       	call   c0007376 <GDT::addEntry(GDTEntry)>
c00074f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f5:	e8 a6 fe ff ff       	call   c00073a0 <GDT::flush()>
c00074fa:	83 c4 40             	add    esp,0x40
c00074fd:	5b                   	pop    ebx
c00074fe:	5e                   	pop    esi
c00074ff:	5f                   	pop    edi
c0007500:	c3                   	ret    

c0007501 <idleFunction(void*)>:
c0007501:	83 ec 0c             	sub    esp,0xc
c0007504:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007509:	48                   	dec    eax
c000750a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000750f:	75 01                	jne    c0007512 <idleFunction(void*)+0x11>
c0007511:	fb                   	sti    
c0007512:	e8 55 08 01 00       	call   c0017d6c <HalSystemIdle()>
c0007517:	e8 86 85 01 00       	call   c001faa2 <idleCommon()>
c000751c:	eb f4                	jmp    c0007512 <idleFunction(void*)+0x11>
c000751e:	66 90                	xchg   ax,ax

c0007520 <IDTEntry::IDTEntry(bool)>:
c0007520:	53                   	push   ebx
c0007521:	83 ec 04             	sub    esp,0x4
c0007524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007528:	88 04 24             	mov    BYTE PTR [esp],al
c000752b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752f:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007535:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007539:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000753d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007541:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007544:	83 e2 f0             	and    edx,0xfffffff0
c0007547:	83 ca 0e             	or     edx,0xe
c000754a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000754d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007551:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007554:	83 e2 ef             	and    edx,0xffffffef
c0007557:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000755a:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755e:	85 c0                	test   eax,eax
c0007560:	74 06                	je     c0007568 <IDTEntry::IDTEntry(bool)+0x48>
c0007562:	b2 03                	mov    dl,0x3
c0007564:	eb 06                	jmp    c000756c <IDTEntry::IDTEntry(bool)+0x4c>
c0007566:	66 90                	xchg   ax,ax
c0007568:	b2 00                	mov    dl,0x0
c000756a:	66 90                	xchg   ax,ax
c000756c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007570:	83 e2 03             	and    edx,0x3
c0007573:	89 d3                	mov    ebx,edx
c0007575:	c1 e3 05             	shl    ebx,0x5
c0007578:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000757b:	83 e2 9f             	and    edx,0xffffff9f
c000757e:	88 d1                	mov    cl,dl
c0007580:	88 da                	mov    dl,bl
c0007582:	09 ca                	or     edx,ecx
c0007584:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007587:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758e:	83 ca 80             	or     edx,0xffffff80
c0007591:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007594:	90                   	nop
c0007595:	83 c4 04             	add    esp,0x4
c0007598:	5b                   	pop    ebx
c0007599:	c3                   	ret    

c000759a <IDTEntry::setOffset(unsigned int)>:
c000759a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075a2:	66 89 02             	mov    WORD PTR [edx],ax
c00075a5:	c1 e8 10             	shr    eax,0x10
c00075a8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075ac:	c3                   	ret    
c00075ad:	90                   	nop
c00075ae:	66 90                	xchg   ax,ax

c00075b0 <IDT::IDT()>:
c00075b0:	90                   	nop
c00075b1:	c3                   	ret    

c00075b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b6:	83 c0 30             	add    eax,0x30
c00075b9:	c3                   	ret    

c00075ba <IDT::addEntry(IDTEntry, int)>:
c00075ba:	53                   	push   ebx
c00075bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075cb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ce:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075d2:	5b                   	pop    ebx
c00075d3:	c3                   	ret    

c00075d4 <IDT::addEntry(int, void (*)(), bool)>:
c00075d4:	53                   	push   ebx
c00075d5:	83 ec 10             	sub    esp,0x10
c00075d8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075dd:	50                   	push   eax
c00075de:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075e2:	53                   	push   ebx
c00075e3:	e8 38 ff ff ff       	call   c0007520 <IDTEntry::IDTEntry(bool)>
c00075e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075ec:	53                   	push   ebx
c00075ed:	e8 a8 ff ff ff       	call   c000759a <IDTEntry::setOffset(unsigned int)>
c00075f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007602:	e8 b3 ff ff ff       	call   c00075ba <IDT::addEntry(IDTEntry, int)>
c0007607:	83 c4 30             	add    esp,0x30
c000760a:	5b                   	pop    ebx
c000760b:	c3                   	ret    

c000760c <IDT::flush()>:
c000760c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007610:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007619:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000761e:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007625:	c3                   	ret    

c0007626 <IDT::setup()>:
c0007626:	57                   	push   edi
c0007627:	56                   	push   esi
c0007628:	53                   	push   ebx
c0007629:	83 ec 10             	sub    esp,0x10
c000762c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007630:	6a 00                	push   0x0
c0007632:	68 a0 f1 01 c0       	push   0xc001f1a0
c0007637:	6a 00                	push   0x0
c0007639:	53                   	push   ebx
c000763a:	e8 95 ff ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c000763f:	6a 00                	push   0x0
c0007641:	68 b0 f1 01 c0       	push   0xc001f1b0
c0007646:	6a 01                	push   0x1
c0007648:	53                   	push   ebx
c0007649:	e8 86 ff ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c000764e:	83 c4 20             	add    esp,0x20
c0007651:	6a 00                	push   0x0
c0007653:	68 ba f1 01 c0       	push   0xc001f1ba
c0007658:	6a 02                	push   0x2
c000765a:	53                   	push   ebx
c000765b:	e8 74 ff ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007660:	6a 00                	push   0x0
c0007662:	68 c4 f1 01 c0       	push   0xc001f1c4
c0007667:	6a 03                	push   0x3
c0007669:	53                   	push   ebx
c000766a:	e8 65 ff ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c000766f:	83 c4 20             	add    esp,0x20
c0007672:	6a 00                	push   0x0
c0007674:	68 ce f1 01 c0       	push   0xc001f1ce
c0007679:	6a 04                	push   0x4
c000767b:	53                   	push   ebx
c000767c:	e8 53 ff ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007681:	6a 00                	push   0x0
c0007683:	68 d8 f1 01 c0       	push   0xc001f1d8
c0007688:	6a 05                	push   0x5
c000768a:	53                   	push   ebx
c000768b:	e8 44 ff ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007690:	83 c4 20             	add    esp,0x20
c0007693:	6a 00                	push   0x0
c0007695:	68 e2 f1 01 c0       	push   0xc001f1e2
c000769a:	6a 06                	push   0x6
c000769c:	53                   	push   ebx
c000769d:	e8 32 ff ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00076a2:	6a 00                	push   0x0
c00076a4:	68 ec f1 01 c0       	push   0xc001f1ec
c00076a9:	6a 07                	push   0x7
c00076ab:	53                   	push   ebx
c00076ac:	e8 23 ff ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00076b1:	83 c4 20             	add    esp,0x20
c00076b4:	6a 00                	push   0x0
c00076b6:	68 f6 f1 01 c0       	push   0xc001f1f6
c00076bb:	6a 08                	push   0x8
c00076bd:	53                   	push   ebx
c00076be:	e8 11 ff ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00076c3:	6a 00                	push   0x0
c00076c5:	68 fe f1 01 c0       	push   0xc001f1fe
c00076ca:	6a 09                	push   0x9
c00076cc:	53                   	push   ebx
c00076cd:	e8 02 ff ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00076d2:	83 c4 20             	add    esp,0x20
c00076d5:	6a 00                	push   0x0
c00076d7:	68 08 f2 01 c0       	push   0xc001f208
c00076dc:	6a 0a                	push   0xa
c00076de:	53                   	push   ebx
c00076df:	e8 f0 fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00076e4:	6a 00                	push   0x0
c00076e6:	68 10 f2 01 c0       	push   0xc001f210
c00076eb:	6a 0b                	push   0xb
c00076ed:	53                   	push   ebx
c00076ee:	e8 e1 fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00076f3:	83 c4 20             	add    esp,0x20
c00076f6:	6a 00                	push   0x0
c00076f8:	68 18 f2 01 c0       	push   0xc001f218
c00076fd:	6a 0c                	push   0xc
c00076ff:	53                   	push   ebx
c0007700:	e8 cf fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007705:	6a 00                	push   0x0
c0007707:	68 20 f2 01 c0       	push   0xc001f220
c000770c:	6a 0d                	push   0xd
c000770e:	53                   	push   ebx
c000770f:	e8 c0 fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007714:	83 c4 20             	add    esp,0x20
c0007717:	6a 00                	push   0x0
c0007719:	68 3a f2 01 c0       	push   0xc001f23a
c000771e:	6a 0e                	push   0xe
c0007720:	53                   	push   ebx
c0007721:	e8 ae fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007726:	6a 00                	push   0x0
c0007728:	68 42 f2 01 c0       	push   0xc001f242
c000772d:	6a 0f                	push   0xf
c000772f:	53                   	push   ebx
c0007730:	e8 9f fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007735:	83 c4 20             	add    esp,0x20
c0007738:	6a 00                	push   0x0
c000773a:	68 4c f2 01 c0       	push   0xc001f24c
c000773f:	6a 10                	push   0x10
c0007741:	53                   	push   ebx
c0007742:	e8 8d fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007747:	6a 00                	push   0x0
c0007749:	68 56 f2 01 c0       	push   0xc001f256
c000774e:	6a 11                	push   0x11
c0007750:	53                   	push   ebx
c0007751:	e8 7e fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007756:	83 c4 20             	add    esp,0x20
c0007759:	6a 00                	push   0x0
c000775b:	68 60 f2 01 c0       	push   0xc001f260
c0007760:	6a 12                	push   0x12
c0007762:	53                   	push   ebx
c0007763:	e8 6c fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007768:	6a 01                	push   0x1
c000776a:	68 fa f2 01 c0       	push   0xc001f2fa
c000776f:	6a 60                	push   0x60
c0007771:	53                   	push   ebx
c0007772:	e8 5d fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007777:	83 c4 20             	add    esp,0x20
c000777a:	6a 00                	push   0x0
c000777c:	68 01 f3 01 c0       	push   0xc001f301
c0007781:	6a 20                	push   0x20
c0007783:	53                   	push   ebx
c0007784:	e8 4b fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007789:	6a 00                	push   0x0
c000778b:	68 ec f2 01 c0       	push   0xc001f2ec
c0007790:	6a 21                	push   0x21
c0007792:	53                   	push   ebx
c0007793:	e8 3c fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007798:	83 c4 20             	add    esp,0x20
c000779b:	6a 00                	push   0x0
c000779d:	68 f3 f2 01 c0       	push   0xc001f2f3
c00077a2:	6a 22                	push   0x22
c00077a4:	53                   	push   ebx
c00077a5:	e8 2a fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00077aa:	6a 00                	push   0x0
c00077ac:	68 6a f2 01 c0       	push   0xc001f26a
c00077b1:	6a 23                	push   0x23
c00077b3:	53                   	push   ebx
c00077b4:	e8 1b fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00077b9:	83 c4 20             	add    esp,0x20
c00077bc:	6a 00                	push   0x0
c00077be:	68 74 f2 01 c0       	push   0xc001f274
c00077c3:	6a 24                	push   0x24
c00077c5:	53                   	push   ebx
c00077c6:	e8 09 fe ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00077cb:	6a 00                	push   0x0
c00077cd:	68 7e f2 01 c0       	push   0xc001f27e
c00077d2:	6a 25                	push   0x25
c00077d4:	53                   	push   ebx
c00077d5:	e8 fa fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00077da:	83 c4 20             	add    esp,0x20
c00077dd:	6a 00                	push   0x0
c00077df:	68 88 f2 01 c0       	push   0xc001f288
c00077e4:	6a 26                	push   0x26
c00077e6:	53                   	push   ebx
c00077e7:	e8 e8 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00077ec:	6a 00                	push   0x0
c00077ee:	68 92 f2 01 c0       	push   0xc001f292
c00077f3:	6a 27                	push   0x27
c00077f5:	53                   	push   ebx
c00077f6:	e8 d9 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00077fb:	83 c4 20             	add    esp,0x20
c00077fe:	6a 00                	push   0x0
c0007800:	68 9c f2 01 c0       	push   0xc001f29c
c0007805:	6a 28                	push   0x28
c0007807:	53                   	push   ebx
c0007808:	e8 c7 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c000780d:	6a 00                	push   0x0
c000780f:	68 a6 f2 01 c0       	push   0xc001f2a6
c0007814:	6a 29                	push   0x29
c0007816:	53                   	push   ebx
c0007817:	e8 b8 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c000781c:	83 c4 20             	add    esp,0x20
c000781f:	6a 00                	push   0x0
c0007821:	68 b0 f2 01 c0       	push   0xc001f2b0
c0007826:	6a 2a                	push   0x2a
c0007828:	53                   	push   ebx
c0007829:	e8 a6 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c000782e:	6a 00                	push   0x0
c0007830:	68 ba f2 01 c0       	push   0xc001f2ba
c0007835:	6a 2b                	push   0x2b
c0007837:	53                   	push   ebx
c0007838:	e8 97 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c000783d:	83 c4 20             	add    esp,0x20
c0007840:	6a 00                	push   0x0
c0007842:	68 c4 f2 01 c0       	push   0xc001f2c4
c0007847:	6a 2c                	push   0x2c
c0007849:	53                   	push   ebx
c000784a:	e8 85 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c000784f:	6a 00                	push   0x0
c0007851:	68 ce f2 01 c0       	push   0xc001f2ce
c0007856:	6a 2d                	push   0x2d
c0007858:	53                   	push   ebx
c0007859:	e8 76 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c000785e:	83 c4 20             	add    esp,0x20
c0007861:	6a 00                	push   0x0
c0007863:	68 d8 f2 01 c0       	push   0xc001f2d8
c0007868:	6a 2e                	push   0x2e
c000786a:	53                   	push   ebx
c000786b:	e8 64 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007870:	6a 00                	push   0x0
c0007872:	68 e2 f2 01 c0       	push   0xc001f2e2
c0007877:	6a 2f                	push   0x2f
c0007879:	53                   	push   ebx
c000787a:	e8 55 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c000787f:	83 c4 20             	add    esp,0x20
c0007882:	6a 00                	push   0x0
c0007884:	68 3c f4 01 c0       	push   0xc001f43c
c0007889:	6a 30                	push   0x30
c000788b:	53                   	push   ebx
c000788c:	e8 43 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007891:	6a 00                	push   0x0
c0007893:	68 46 f4 01 c0       	push   0xc001f446
c0007898:	6a 31                	push   0x31
c000789a:	53                   	push   ebx
c000789b:	e8 34 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00078a0:	83 c4 20             	add    esp,0x20
c00078a3:	6a 00                	push   0x0
c00078a5:	68 50 f4 01 c0       	push   0xc001f450
c00078aa:	6a 32                	push   0x32
c00078ac:	53                   	push   ebx
c00078ad:	e8 22 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00078b2:	6a 00                	push   0x0
c00078b4:	68 5a f4 01 c0       	push   0xc001f45a
c00078b9:	6a 33                	push   0x33
c00078bb:	53                   	push   ebx
c00078bc:	e8 13 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00078c1:	83 c4 20             	add    esp,0x20
c00078c4:	6a 00                	push   0x0
c00078c6:	68 64 f4 01 c0       	push   0xc001f464
c00078cb:	6a 34                	push   0x34
c00078cd:	53                   	push   ebx
c00078ce:	e8 01 fd ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00078d3:	6a 00                	push   0x0
c00078d5:	68 6e f4 01 c0       	push   0xc001f46e
c00078da:	6a 35                	push   0x35
c00078dc:	53                   	push   ebx
c00078dd:	e8 f2 fc ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00078e2:	83 c4 20             	add    esp,0x20
c00078e5:	6a 00                	push   0x0
c00078e7:	68 78 f4 01 c0       	push   0xc001f478
c00078ec:	6a 36                	push   0x36
c00078ee:	53                   	push   ebx
c00078ef:	e8 e0 fc ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c00078f4:	6a 00                	push   0x0
c00078f6:	68 82 f4 01 c0       	push   0xc001f482
c00078fb:	6a 37                	push   0x37
c00078fd:	53                   	push   ebx
c00078fe:	e8 d1 fc ff ff       	call   c00075d4 <IDT::addEntry(int, void (*)(), bool)>
c0007903:	83 c4 1c             	add    esp,0x1c
c0007906:	6a 03                	push   0x3
c0007908:	6a 02                	push   0x2
c000790a:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007910:	e8 13 25 00 00       	call   c0009e28 <VAS::allocatePages(int, int)>
c0007915:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000791c:	89 c6                	mov    esi,eax
c000791e:	e8 97 01 00 00       	call   c0007aba <malloc>
c0007923:	81 c6 00 20 00 00    	add    esi,0x2000
c0007929:	89 04 24             	mov    DWORD PTR [esp],eax
c000792c:	89 c7                	mov    edi,eax
c000792e:	e8 15 16 00 00       	call   c0008f48 <TSS::TSS()>
c0007933:	83 c4 0c             	add    esp,0xc
c0007936:	68 f6 f1 01 c0       	push   0xc001f1f6
c000793b:	56                   	push   esi
c000793c:	57                   	push   edi
c000793d:	e8 4a 16 00 00       	call   c0008f8c <TSS::setup(unsigned long, unsigned long)>
c0007942:	89 c6                	mov    esi,eax
c0007944:	58                   	pop    eax
c0007945:	5a                   	pop    edx
c0007946:	6a 00                	push   0x0
c0007948:	8d 44 24 14          	lea    eax,[esp+0x14]
c000794c:	50                   	push   eax
c000794d:	e8 ce fb ff ff       	call   c0007520 <IDTEntry::IDTEntry(bool)>
c0007952:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007956:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000795b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007962:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007968:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000796c:	80 ce 05             	or     dh,0x5
c000796f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007972:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007976:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000797a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000797d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007980:	e8 87 fc ff ff       	call   c000760c <IDT::flush()>
c0007985:	83 c4 20             	add    esp,0x20
c0007988:	5b                   	pop    ebx
c0007989:	5e                   	pop    esi
c000798a:	5f                   	pop    edi
c000798b:	c3                   	ret    

c000798c <sbrk>:
c000798c:	55                   	push   ebp
c000798d:	57                   	push   edi
c000798e:	56                   	push   esi
c000798f:	53                   	push   ebx
c0007990:	83 ec 1c             	sub    esp,0x1c
c0007993:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007997:	85 c0                	test   eax,eax
c0007999:	74 61                	je     c00079fc <sbrk+0x70>
c000799b:	78 66                	js     c0007a03 <sbrk+0x77>
c000799d:	8b 15 c8 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237c8
c00079a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a7:	05 ff 0f 00 00       	add    eax,0xfff
c00079ac:	89 c5                	mov    ebp,eax
c00079ae:	78 6b                	js     c0007a1b <sbrk+0x8f>
c00079b0:	c1 fd 0c             	sar    ebp,0xc
c00079b3:	bb 00 00 00 00       	mov    ebx,0x0
c00079b8:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079be:	8b 3d c8 37 02 c0    	mov    edi,DWORD PTR ds:0xc00237c8
c00079c4:	e8 fa 03 00 00       	call   c0007dc3 <Phys::allocatePage()>
c00079c9:	68 01 04 00 00       	push   0x401
c00079ce:	57                   	push   edi
c00079cf:	50                   	push   eax
c00079d0:	56                   	push   esi
c00079d1:	e8 4e 23 00 00       	call   c0009d24 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d6:	81 05 c8 37 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00237c8,0x1000
c00079e0:	83 c3 01             	add    ebx,0x1
c00079e3:	83 c4 10             	add    esp,0x10
c00079e6:	39 dd                	cmp    ebp,ebx
c00079e8:	75 ce                	jne    c00079b8 <sbrk+0x2c>
c00079ea:	0f 20 d8             	mov    eax,cr3
c00079ed:	0f 22 d8             	mov    cr3,eax
c00079f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f4:	83 c4 1c             	add    esp,0x1c
c00079f7:	5b                   	pop    ebx
c00079f8:	5e                   	pop    esi
c00079f9:	5f                   	pop    edi
c00079fa:	5d                   	pop    ebp
c00079fb:	c3                   	ret    
c00079fc:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c0007a01:	eb f1                	jmp    c00079f4 <sbrk+0x68>
c0007a03:	83 ec 08             	sub    esp,0x8
c0007a06:	50                   	push   eax
c0007a07:	68 b0 0d 02 c0       	push   0xc0020db0
c0007a0c:	e8 38 2f 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0007a11:	83 c4 10             	add    esp,0x10
c0007a14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a19:	eb d9                	jmp    c00079f4 <sbrk+0x68>
c0007a1b:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a21:	eb 8d                	jmp    c00079b0 <sbrk+0x24>

c0007a23 <mmap>:
c0007a23:	83 ec 18             	sub    esp,0x18
c0007a26:	68 e0 0d 02 c0       	push   0xc0020de0
c0007a2b:	e8 93 9c 00 00       	call   c00116c3 <KePanic(char const*)>
c0007a30:	b8 00 00 00 00       	mov    eax,0x0
c0007a35:	83 c4 1c             	add    esp,0x1c
c0007a38:	c3                   	ret    

c0007a39 <munmap>:
c0007a39:	83 ec 18             	sub    esp,0x18
c0007a3c:	68 e5 0d 02 c0       	push   0xc0020de5
c0007a41:	e8 7d 9c 00 00       	call   c00116c3 <KePanic(char const*)>
c0007a46:	b8 00 00 00 00       	mov    eax,0x0
c0007a4b:	83 c4 1c             	add    esp,0x1c
c0007a4e:	c3                   	ret    

c0007a4f <liballoc_lock()>:
c0007a4f:	fa                   	cli    
c0007a50:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a57:	b8 00 00 00 00       	mov    eax,0x0
c0007a5c:	c3                   	ret    

c0007a5d <liballoc_unlock()>:
c0007a5d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a62:	83 e8 01             	sub    eax,0x1
c0007a65:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a6a:	75 01                	jne    c0007a6d <liballoc_unlock()+0x10>
c0007a6c:	fb                   	sti    
c0007a6d:	b8 00 00 00 00       	mov    eax,0x0
c0007a72:	c3                   	ret    

c0007a73 <liballoc_alloc(int)>:
c0007a73:	83 ec 10             	sub    esp,0x10
c0007a76:	6a 01                	push   0x1
c0007a78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a7c:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a82:	e8 a1 23 00 00       	call   c0009e28 <VAS::allocatePages(int, int)>
c0007a87:	83 c4 1c             	add    esp,0x1c
c0007a8a:	c3                   	ret    

c0007a8b <liballoc_free(void*, int)>:
c0007a8b:	83 ec 14             	sub    esp,0x14
c0007a8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a92:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a98:	e8 cf 1f 00 00       	call   c0009a6c <VAS::freeAllocatedPages(unsigned long)>
c0007a9d:	b8 00 00 00 00       	mov    eax,0x0
c0007aa2:	83 c4 1c             	add    esp,0x1c
c0007aa5:	c3                   	ret    

c0007aa6 <realloc>:
c0007aa6:	83 ec 14             	sub    esp,0x14
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ab1:	e8 32 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab6:	83 c4 1c             	add    esp,0x1c
c0007ab9:	c3                   	ret    

c0007aba <malloc>:
c0007aba:	83 ec 18             	sub    esp,0x18
c0007abd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac1:	e8 e5 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac6:	83 c4 1c             	add    esp,0x1c
c0007ac9:	c3                   	ret    

c0007aca <free>:
c0007aca:	83 ec 18             	sub    esp,0x18
c0007acd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ad1:	e8 7d 92 ff ff       	call   c0000d53 <dlfree>
c0007ad6:	83 c4 1c             	add    esp,0x1c
c0007ad9:	c3                   	ret    

c0007ada <rfree>:
c0007ada:	83 ec 18             	sub    esp,0x18
c0007add:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ae1:	e8 6d 92 ff ff       	call   c0000d53 <dlfree>
c0007ae6:	83 c4 1c             	add    esp,0x1c
c0007ae9:	c3                   	ret    

c0007aea <calloc>:
c0007aea:	56                   	push   esi
c0007aeb:	53                   	push   ebx
c0007aec:	83 ec 10             	sub    esp,0x10
c0007aef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007af3:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af8:	53                   	push   ebx
c0007af9:	e8 bc ff ff ff       	call   c0007aba <malloc>
c0007afe:	89 c6                	mov    esi,eax
c0007b00:	83 c4 0c             	add    esp,0xc
c0007b03:	53                   	push   ebx
c0007b04:	6a 00                	push   0x0
c0007b06:	50                   	push   eax
c0007b07:	e8 e4 89 ff ff       	call   c00004f0 <memset>
c0007b0c:	89 f0                	mov    eax,esi
c0007b0e:	83 c4 14             	add    esp,0x14
c0007b11:	5b                   	pop    ebx
c0007b12:	5e                   	pop    esi
c0007b13:	c3                   	ret    

c0007b14 <KeEntryPoint>:
c0007b14:	57                   	push   edi
c0007b15:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b1a:	56                   	push   esi
c0007b1b:	89 fa                	mov    edx,edi
c0007b1d:	53                   	push   ebx
c0007b1e:	31 f6                	xor    esi,esi
c0007b20:	83 ec 2c             	sub    esp,0x2c
c0007b23:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b28:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b2d:	89 f0                	mov    eax,esi
c0007b2f:	ee                   	out    dx,al
c0007b30:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b35:	b0 80                	mov    al,0x80
c0007b37:	89 da                	mov    edx,ebx
c0007b39:	ee                   	out    dx,al
c0007b3a:	b1 03                	mov    cl,0x3
c0007b3c:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b41:	88 c8                	mov    al,cl
c0007b43:	ee                   	out    dx,al
c0007b44:	89 f0                	mov    eax,esi
c0007b46:	89 fa                	mov    edx,edi
c0007b48:	ee                   	out    dx,al
c0007b49:	88 c8                	mov    al,cl
c0007b4b:	89 da                	mov    edx,ebx
c0007b4d:	ee                   	out    dx,al
c0007b4e:	b0 c7                	mov    al,0xc7
c0007b50:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b55:	ee                   	out    dx,al
c0007b56:	b0 0b                	mov    al,0xb
c0007b58:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b5d:	ee                   	out    dx,al
c0007b5e:	68 ec 0d 02 c0       	push   0xc0020dec
c0007b63:	e8 e1 2d 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0007b68:	e8 da 93 00 00       	call   c0010f47 <KeDisplaySplashScreen()>
c0007b6d:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b72:	05 ff 0f 00 00       	add    eax,0xfff
c0007b77:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b7c:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7f:	e8 ad 03 00 00       	call   c0007f31 <Phys::physicalMemorySetup(unsigned int)>
c0007b84:	e8 66 1c 00 00       	call   c00097ef <Virt::virtualMemorySetup()>
c0007b89:	e8 03 93 00 00       	call   c0010e91 <KeInitialiseAtexit()>
c0007b8e:	58                   	pop    eax
c0007b8f:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b93:	53                   	push   ebx
c0007b94:	e8 53 1f 00 00       	call   c0009aec <VAS::VAS()>
c0007b99:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007b9f:	e8 96 7e 01 00       	call   c001fa3a <_init>
c0007ba4:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bab:	e8 0a ff ff ff       	call   c0007aba <malloc>
c0007bb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bb3:	89 c6                	mov    esi,eax
c0007bb5:	e8 30 f2 ff ff       	call   c0006dea <Computer::Computer()>
c0007bba:	53                   	push   ebx
c0007bbb:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bc1:	6a 00                	push   0x0
c0007bc3:	6a 00                	push   0x0
c0007bc5:	56                   	push   esi
c0007bc6:	e8 e7 f5 ff ff       	call   c00071b2 <Computer::open(int, int, void*)>
c0007bcb:	83 c4 14             	add    esp,0x14
c0007bce:	53                   	push   ebx
c0007bcf:	e8 e2 1f 00 00       	call   c0009bb6 <VAS::~VAS()>
c0007bd4:	83 c4 30             	add    esp,0x30
c0007bd7:	5b                   	pop    ebx
c0007bd8:	5e                   	pop    esi
c0007bd9:	5f                   	pop    edi
c0007bda:	c3                   	ret    

c0007bdb <Phys::allocateDMA(unsigned long)>:
c0007bdb:	55                   	push   ebp
c0007bdc:	31 ed                	xor    ebp,ebp
c0007bde:	57                   	push   edi
c0007bdf:	56                   	push   esi
c0007be0:	53                   	push   ebx
c0007be1:	31 db                	xor    ebx,ebx
c0007be3:	83 ec 1c             	sub    esp,0x1c
c0007be6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007bea:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bf2:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf8:	31 c0                	xor    eax,eax
c0007bfa:	c1 ef 0c             	shr    edi,0xc
c0007bfd:	eb 1b                	jmp    c0007c1a <Phys::allocateDMA(unsigned long)+0x3f>
c0007bff:	85 c0                	test   eax,eax
c0007c01:	75 06                	jne    c0007c09 <Phys::allocateDMA(unsigned long)+0x2e>
c0007c03:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c07:	89 dd                	mov    ebp,ebx
c0007c09:	8d 70 01             	lea    esi,[eax+0x1]
c0007c0c:	39 f7                	cmp    edi,esi
c0007c0e:	74 37                	je     c0007c47 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c10:	89 f0                	mov    eax,esi
c0007c12:	83 c3 01             	add    ebx,0x1
c0007c15:	83 fb 0f             	cmp    ebx,0xf
c0007c18:	7f 13                	jg     c0007c2d <Phys::allocateDMA(unsigned long)+0x52>
c0007c1a:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c21:	74 dc                	je     c0007bff <Phys::allocateDMA(unsigned long)+0x24>
c0007c23:	31 c0                	xor    eax,eax
c0007c25:	83 c3 01             	add    ebx,0x1
c0007c28:	83 fb 0f             	cmp    ebx,0xf
c0007c2b:	7e ed                	jle    c0007c1a <Phys::allocateDMA(unsigned long)+0x3f>
c0007c2d:	83 ec 0c             	sub    esp,0xc
c0007c30:	68 04 0e 02 c0       	push   0xc0020e04
c0007c35:	e8 89 9a 00 00       	call   c00116c3 <KePanic(char const*)>
c0007c3a:	83 c4 10             	add    esp,0x10
c0007c3d:	31 c0                	xor    eax,eax
c0007c3f:	83 c4 1c             	add    esp,0x1c
c0007c42:	5b                   	pop    ebx
c0007c43:	5e                   	pop    esi
c0007c44:	5f                   	pop    edi
c0007c45:	5d                   	pop    ebp
c0007c46:	c3                   	ret    
c0007c47:	89 e9                	mov    ecx,ebp
c0007c49:	c1 f9 04             	sar    ecx,0x4
c0007c4c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c50:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c54:	89 ca                	mov    edx,ecx
c0007c56:	83 ea 01             	sub    edx,0x1
c0007c59:	79 03                	jns    c0007c5e <Phys::allocateDMA(unsigned long)+0x83>
c0007c5b:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5e:	c1 fa 04             	sar    edx,0x4
c0007c61:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c65:	74 08                	je     c0007c6f <Phys::allocateDMA(unsigned long)+0x94>
c0007c67:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c6b:	31 c0                	xor    eax,eax
c0007c6d:	eb b6                	jmp    c0007c25 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6f:	85 f6                	test   esi,esi
c0007c71:	74 17                	je     c0007c8a <Phys::allocateDMA(unsigned long)+0xaf>
c0007c73:	8d 95 ec 6e 02 c0    	lea    edx,[ebp-0x3ffd9114]
c0007c79:	8d 84 05 ed 6e 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9113]
c0007c80:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c83:	83 c2 01             	add    edx,0x1
c0007c86:	39 d0                	cmp    eax,edx
c0007c88:	75 f6                	jne    c0007c80 <Phys::allocateDMA(unsigned long)+0xa5>
c0007c8a:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007c8f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c93:	01 f8                	add    eax,edi
c0007c95:	85 d2                	test   edx,edx
c0007c97:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007c9c:	74 17                	je     c0007cb5 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9e:	83 ec 0c             	sub    esp,0xc
c0007ca1:	68 04 0e 02 c0       	push   0xc0020e04
c0007ca6:	e8 18 9a 00 00       	call   c00116c3 <KePanic(char const*)>
c0007cab:	83 c4 10             	add    esp,0x10
c0007cae:	89 f0                	mov    eax,esi
c0007cb0:	e9 5d ff ff ff       	jmp    c0007c12 <Phys::allocateDMA(unsigned long)+0x37>
c0007cb5:	c1 e5 0c             	shl    ebp,0xc
c0007cb8:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cbe:	e9 7c ff ff ff       	jmp    c0007c3f <Phys::allocateDMA(unsigned long)+0x64>

c0007cc3 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cc3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc7:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007ccd:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cd2:	c1 ea 0c             	shr    edx,0xc
c0007cd5:	29 d0                	sub    eax,edx
c0007cd7:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ce0:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce5:	c1 e8 0c             	shr    eax,0xc
c0007ce8:	85 d2                	test   edx,edx
c0007cea:	74 11                	je     c0007cfd <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007cec:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007cf1:	01 c2                	add    edx,eax
c0007cf3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf6:	83 c0 01             	add    eax,0x1
c0007cf9:	39 d0                	cmp    eax,edx
c0007cfb:	75 f6                	jne    c0007cf3 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cfd:	c3                   	ret    

c0007cfe <Phys::setPageState(unsigned long, bool)>:
c0007cfe:	57                   	push   edi
c0007cff:	56                   	push   esi
c0007d00:	8b 35 cc 37 02 c0    	mov    esi,DWORD PTR ds:0xc00237cc
c0007d06:	53                   	push   ebx
c0007d07:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d10:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d14:	0f b6 c0             	movzx  eax,al
c0007d17:	89 ca                	mov    edx,ecx
c0007d19:	83 e1 07             	and    ecx,0x7
c0007d1c:	c1 ea 03             	shr    edx,0x3
c0007d1f:	d3 c3                	rol    ebx,cl
c0007d21:	01 d6                	add    esi,edx
c0007d23:	d3 e0                	shl    eax,cl
c0007d25:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d28:	21 fb                	and    ebx,edi
c0007d2a:	88 1e                	mov    BYTE PTR [esi],bl
c0007d2c:	8b 1d cc 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237cc
c0007d32:	01 da                	add    edx,ebx
c0007d34:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d36:	09 c8                	or     eax,ecx
c0007d38:	88 02                	mov    BYTE PTR [edx],al
c0007d3a:	5b                   	pop    ebx
c0007d3b:	5e                   	pop    esi
c0007d3c:	5f                   	pop    edi
c0007d3d:	c3                   	ret    

c0007d3e <Phys::getPageState(unsigned long)>:
c0007d3e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d42:	8b 15 cc 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237cc
c0007d48:	89 c8                	mov    eax,ecx
c0007d4a:	83 e1 07             	and    ecx,0x7
c0007d4d:	c1 e8 03             	shr    eax,0x3
c0007d50:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d54:	d3 f8                	sar    eax,cl
c0007d56:	83 e0 01             	and    eax,0x1
c0007d59:	c3                   	ret    

c0007d5a <Phys::freePage(unsigned long)>:
c0007d5a:	53                   	push   ebx
c0007d5b:	83 ec 08             	sub    esp,0x8
c0007d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d62:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d68:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6e:	76 41                	jbe    c0007db1 <Phys::freePage(unsigned long)+0x57>
c0007d70:	c1 e8 0c             	shr    eax,0xc
c0007d73:	50                   	push   eax
c0007d74:	89 c3                	mov    ebx,eax
c0007d76:	e8 c3 ff ff ff       	call   c0007d3e <Phys::getPageState(unsigned long)>
c0007d7b:	5a                   	pop    edx
c0007d7c:	84 c0                	test   al,al
c0007d7e:	74 20                	je     c0007da0 <Phys::freePage(unsigned long)+0x46>
c0007d80:	83 ec 08             	sub    esp,0x8
c0007d83:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007d88:	6a 00                	push   0x0
c0007d8a:	83 e8 01             	sub    eax,0x1
c0007d8d:	53                   	push   ebx
c0007d8e:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007d93:	e8 66 ff ff ff       	call   c0007cfe <Phys::setPageState(unsigned long, bool)>
c0007d98:	83 c4 10             	add    esp,0x10
c0007d9b:	83 c4 08             	add    esp,0x8
c0007d9e:	5b                   	pop    ebx
c0007d9f:	c3                   	ret    
c0007da0:	c7 44 24 10 a9 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020ea9
c0007da8:	83 c4 08             	add    esp,0x8
c0007dab:	5b                   	pop    ebx
c0007dac:	e9 12 99 00 00       	jmp    c00116c3 <KePanic(char const*)>
c0007db1:	68 00 10 00 00       	push   0x1000
c0007db6:	50                   	push   eax
c0007db7:	e8 07 ff ff ff       	call   c0007cc3 <Phys::freeDMA(unsigned long, unsigned long)>
c0007dbc:	59                   	pop    ecx
c0007dbd:	5b                   	pop    ebx
c0007dbe:	83 c4 08             	add    esp,0x8
c0007dc1:	5b                   	pop    ebx
c0007dc2:	c3                   	ret    

c0007dc3 <Phys::allocatePage()>:
c0007dc3:	56                   	push   esi
c0007dc4:	53                   	push   ebx
c0007dc5:	83 ec 14             	sub    esp,0x14
c0007dc8:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007dce:	89 f3                	mov    ebx,esi
c0007dd0:	eb 0a                	jmp    c0007ddc <Phys::allocatePage()+0x19>
c0007dd2:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007dd8:	39 de                	cmp    esi,ebx
c0007dda:	74 26                	je     c0007e02 <Phys::allocatePage()+0x3f>
c0007ddc:	53                   	push   ebx
c0007ddd:	e8 5c ff ff ff       	call   c0007d3e <Phys::getPageState(unsigned long)>
c0007de2:	5a                   	pop    edx
c0007de3:	84 c0                	test   al,al
c0007de5:	74 67                	je     c0007e4e <Phys::allocatePage()+0x8b>
c0007de7:	83 c3 01             	add    ebx,0x1
c0007dea:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007df0:	75 e0                	jne    c0007dd2 <Phys::allocatePage()+0xf>
c0007df2:	31 db                	xor    ebx,ebx
c0007df4:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007dfe:	39 de                	cmp    esi,ebx
c0007e00:	75 da                	jne    c0007ddc <Phys::allocatePage()+0x19>
c0007e02:	83 ec 0c             	sub    esp,0xc
c0007e05:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e0a:	83 f0 01             	xor    eax,0x1
c0007e0d:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e17:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e1a:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e20:	50                   	push   eax
c0007e21:	e8 a8 27 00 00       	call   c000a5ce <VAS::scanForEviction()>
c0007e26:	83 c4 10             	add    esp,0x10
c0007e29:	85 c0                	test   eax,eax
c0007e2b:	75 48                	jne    c0007e75 <Phys::allocatePage()+0xb2>
c0007e2d:	83 ec 0c             	sub    esp,0xc
c0007e30:	68 2c 0e 02 c0       	push   0xc0020e2c
c0007e35:	e8 89 98 00 00       	call   c00116c3 <KePanic(char const*)>
c0007e3a:	83 c4 10             	add    esp,0x10
c0007e3d:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e43:	53                   	push   ebx
c0007e44:	e8 f5 fe ff ff       	call   c0007d3e <Phys::getPageState(unsigned long)>
c0007e49:	5a                   	pop    edx
c0007e4a:	84 c0                	test   al,al
c0007e4c:	75 99                	jne    c0007de7 <Phys::allocatePage()+0x24>
c0007e4e:	6a 01                	push   0x1
c0007e50:	53                   	push   ebx
c0007e51:	e8 a8 fe ff ff       	call   c0007cfe <Phys::setPageState(unsigned long, bool)>
c0007e56:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e5c:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e61:	83 c2 01             	add    edx,0x1
c0007e64:	59                   	pop    ecx
c0007e65:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e6b:	c1 e0 0c             	shl    eax,0xc
c0007e6e:	5b                   	pop    ebx
c0007e6f:	83 c4 14             	add    esp,0x14
c0007e72:	5b                   	pop    ebx
c0007e73:	5e                   	pop    esi
c0007e74:	c3                   	ret    
c0007e75:	83 ec 08             	sub    esp,0x8
c0007e78:	89 c2                	mov    edx,eax
c0007e7a:	6a 01                	push   0x1
c0007e7c:	c1 ea 0c             	shr    edx,0xc
c0007e7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e83:	52                   	push   edx
c0007e84:	e8 75 fe ff ff       	call   c0007cfe <Phys::setPageState(unsigned long, bool)>
c0007e89:	83 c4 10             	add    esp,0x10
c0007e8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e90:	eb dd                	jmp    c0007e6f <Phys::allocatePage()+0xac>

c0007e92 <Phys::allocateContiguousPages(int)>:
c0007e92:	57                   	push   edi
c0007e93:	56                   	push   esi
c0007e94:	53                   	push   ebx
c0007e95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e99:	fa                   	cli    
c0007e9a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007e9f:	31 db                	xor    ebx,ebx
c0007ea1:	83 c0 01             	add    eax,0x1
c0007ea4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ea9:	85 db                	test   ebx,ebx
c0007eab:	75 11                	jne    c0007ebe <Phys::allocateContiguousPages(int)+0x2c>
c0007ead:	e8 11 ff ff ff       	call   c0007dc3 <Phys::allocatePage()>
c0007eb2:	83 fe 01             	cmp    esi,0x1
c0007eb5:	89 c7                	mov    edi,eax
c0007eb7:	74 21                	je     c0007eda <Phys::allocateContiguousPages(int)+0x48>
c0007eb9:	bb 01 00 00 00       	mov    ebx,0x1
c0007ebe:	e8 00 ff ff ff       	call   c0007dc3 <Phys::allocatePage()>
c0007ec3:	89 da                	mov    edx,ebx
c0007ec5:	c1 e2 0c             	shl    edx,0xc
c0007ec8:	01 fa                	add    edx,edi
c0007eca:	39 c2                	cmp    edx,eax
c0007ecc:	74 22                	je     c0007ef0 <Phys::allocateContiguousPages(int)+0x5e>
c0007ece:	bb 01 00 00 00       	mov    ebx,0x1
c0007ed3:	89 c7                	mov    edi,eax
c0007ed5:	83 fe 01             	cmp    esi,0x1
c0007ed8:	75 e4                	jne    c0007ebe <Phys::allocateContiguousPages(int)+0x2c>
c0007eda:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007edf:	83 e8 01             	sub    eax,0x1
c0007ee2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ee7:	75 01                	jne    c0007eea <Phys::allocateContiguousPages(int)+0x58>
c0007ee9:	fb                   	sti    
c0007eea:	89 f8                	mov    eax,edi
c0007eec:	5b                   	pop    ebx
c0007eed:	5e                   	pop    esi
c0007eee:	5f                   	pop    edi
c0007eef:	c3                   	ret    
c0007ef0:	83 c3 01             	add    ebx,0x1
c0007ef3:	39 f3                	cmp    ebx,esi
c0007ef5:	75 b2                	jne    c0007ea9 <Phys::allocateContiguousPages(int)+0x17>
c0007ef7:	eb e1                	jmp    c0007eda <Phys::allocateContiguousPages(int)+0x48>

c0007ef9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef9:	56                   	push   esi
c0007efa:	53                   	push   ebx
c0007efb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007eff:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f05:	73 06                	jae    c0007f0d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f07:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f11:	c1 eb 0c             	shr    ebx,0xc
c0007f14:	c1 e8 0c             	shr    eax,0xc
c0007f17:	39 d8                	cmp    eax,ebx
c0007f19:	73 13                	jae    c0007f2e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f1b:	6a 00                	push   0x0
c0007f1d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f20:	50                   	push   eax
c0007f21:	e8 d8 fd ff ff       	call   c0007cfe <Phys::setPageState(unsigned long, bool)>
c0007f26:	5a                   	pop    edx
c0007f27:	89 f0                	mov    eax,esi
c0007f29:	59                   	pop    ecx
c0007f2a:	39 f3                	cmp    ebx,esi
c0007f2c:	75 ed                	jne    c0007f1b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2e:	5b                   	pop    ebx
c0007f2f:	5e                   	pop    esi
c0007f30:	c3                   	ret    

c0007f31 <Phys::physicalMemorySetup(unsigned int)>:
c0007f31:	55                   	push   ebp
c0007f32:	57                   	push   edi
c0007f33:	56                   	push   esi
c0007f34:	53                   	push   ebx
c0007f35:	83 ec 40             	sub    esp,0x40
c0007f38:	6a 10                	push   0x10
c0007f3a:	6a 00                	push   0x0
c0007f3c:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f41:	e8 aa 85 ff ff       	call   c00004f0 <memset>
c0007f46:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f4a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4f:	05 00 10 00 00       	add    eax,0x1000
c0007f54:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f58:	5b                   	pop    ebx
c0007f59:	31 db                	xor    ebx,ebx
c0007f5b:	5e                   	pop    esi
c0007f5c:	50                   	push   eax
c0007f5d:	68 bf 0e 02 c0       	push   0xc0020ebf
c0007f62:	e8 e2 29 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0007f67:	83 c4 10             	add    esp,0x10
c0007f6a:	83 ec 08             	sub    esp,0x8
c0007f6d:	6a 01                	push   0x1
c0007f6f:	53                   	push   ebx
c0007f70:	83 c3 01             	add    ebx,0x1
c0007f73:	e8 86 fd ff ff       	call   c0007cfe <Phys::setPageState(unsigned long, bool)>
c0007f78:	83 c4 10             	add    esp,0x10
c0007f7b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f81:	75 e7                	jne    c0007f6a <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f83:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f8a:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f91:	c1 e0 08             	shl    eax,0x8
c0007f94:	09 c2                	or     edx,eax
c0007f96:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f9a:	0f 84 98 01 00 00    	je     c0008138 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007fa0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fac:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fb1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fbd:	eb 1c                	jmp    c0007fdb <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fc3:	83 c3 18             	add    ebx,0x18
c0007fc6:	83 c6 01             	add    esi,0x1
c0007fc9:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fcd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fd1:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd5:	0f 84 6d 01 00 00    	je     c0008148 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fdb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fde:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fe1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fec:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fee:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007ff1:	01 f0                	add    eax,esi
c0007ff3:	55                   	push   ebp
c0007ff4:	11 fa                	adc    edx,edi
c0007ff6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ffa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008002:	51                   	push   ecx
c0008003:	56                   	push   esi
c0008004:	68 5c 0e 02 c0       	push   0xc0020e5c
c0008009:	e8 3b 29 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000800e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008012:	83 c4 10             	add    esp,0x10
c0008015:	09 f8                	or     eax,edi
c0008017:	0f 85 2b 01 00 00    	jne    c0008148 <Phys::physicalMemorySetup(unsigned int)+0x217>
c000801d:	83 fd 01             	cmp    ebp,0x1
c0008020:	75 9d                	jne    c0007fbf <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008022:	ba 00 00 08 00       	mov    edx,0x80000
c0008027:	89 c1                	mov    ecx,eax
c0008029:	39 f2                	cmp    edx,esi
c000802b:	19 f9                	sbb    ecx,edi
c000802d:	0f 82 ab 00 00 00    	jb     c00080de <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0008033:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008037:	89 c1                	mov    ecx,eax
c0008039:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000803d:	0f 83 9b 00 00 00    	jae    c00080de <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0008043:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008048:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000804c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008050:	39 fa                	cmp    edx,edi
c0008052:	19 e8                	sbb    eax,ebp
c0008054:	0f 82 b0 01 00 00    	jb     c000820a <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c000805a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008062:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008068:	ba ff 1f 00 00       	mov    edx,0x1fff
c000806d:	83 d5 ff             	adc    ebp,0xffffffff
c0008070:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008074:	31 c0                	xor    eax,eax
c0008076:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000807a:	39 fa                	cmp    edx,edi
c000807c:	89 c1                	mov    ecx,eax
c000807e:	19 e9                	sbb    ecx,ebp
c0008080:	0f 83 39 ff ff ff    	jae    c0007fbf <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008086:	be 00 00 08 00       	mov    esi,0x80000
c000808b:	83 ec 04             	sub    esp,0x4
c000808e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008092:	57                   	push   edi
c0008093:	56                   	push   esi
c0008094:	68 80 0e 02 c0       	push   0xc0020e80
c0008099:	e8 ab 28 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000809e:	5d                   	pop    ebp
c000809f:	58                   	pop    eax
c00080a0:	57                   	push   edi
c00080a1:	56                   	push   esi
c00080a2:	e8 52 fe ff ff       	call   c0007ef9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080af:	83 c4 0c             	add    esp,0xc
c00080b2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b6:	8b 15 e8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee8
c00080bc:	01 d0                	add    eax,edx
c00080be:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c5:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00080ca:	52                   	push   edx
c00080cb:	50                   	push   eax
c00080cc:	68 e5 0e 02 c0       	push   0xc0020ee5
c00080d1:	e8 73 28 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00080d6:	83 c4 10             	add    esp,0x10
c00080d9:	e9 e1 fe ff ff       	jmp    c0007fbf <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080de:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080ea:	39 ea                	cmp    edx,ebp
c00080ec:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080f0:	0f 82 c9 fe ff ff    	jb     c0007fbf <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f6:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080fb:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080ff:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0008103:	0f 83 b6 fe ff ff    	jae    c0007fbf <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008109:	39 ee                	cmp    esi,ebp
c000810b:	89 f8                	mov    eax,edi
c000810d:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0008111:	0f 83 74 ff ff ff    	jae    c000808b <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008117:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000811b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0008123:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008127:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000812b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008133:	e9 53 ff ff ff       	jmp    c000808b <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008138:	83 ec 0c             	sub    esp,0xc
c000813b:	68 d7 0e 02 c0       	push   0xc0020ed7
c0008140:	e8 7e 95 00 00       	call   c00116c3 <KePanic(char const*)>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	83 ec 08             	sub    esp,0x8
c000814b:	bb 60 00 00 00       	mov    ebx,0x60
c0008150:	6a 00                	push   0x0
c0008152:	6a 06                	push   0x6
c0008154:	e8 a5 fb ff ff       	call   c0007cfe <Phys::setPageState(unsigned long, bool)>
c0008159:	58                   	pop    eax
c000815a:	5a                   	pop    edx
c000815b:	6a 00                	push   0x0
c000815d:	6a 07                	push   0x7
c000815f:	e8 9a fb ff ff       	call   c0007cfe <Phys::setPageState(unsigned long, bool)>
c0008164:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c000816a:	83 c4 10             	add    esp,0x10
c000816d:	83 c1 02             	add    ecx,0x2
c0008170:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008176:	83 ec 08             	sub    esp,0x8
c0008179:	6a 00                	push   0x0
c000817b:	53                   	push   ebx
c000817c:	83 c3 01             	add    ebx,0x1
c000817f:	e8 7a fb ff ff       	call   c0007cfe <Phys::setPageState(unsigned long, bool)>
c0008184:	83 c4 10             	add    esp,0x10
c0008187:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000818d:	75 e7                	jne    c0008176 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818f:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008194:	bb 40 01 00 00       	mov    ebx,0x140
c0008199:	83 c0 20             	add    eax,0x20
c000819c:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081a1:	eb 26                	jmp    c00081c9 <Phys::physicalMemorySetup(unsigned int)+0x298>
c00081a3:	83 ec 08             	sub    esp,0x8
c00081a6:	6a 00                	push   0x0
c00081a8:	53                   	push   ebx
c00081a9:	83 c3 01             	add    ebx,0x1
c00081ac:	e8 4d fb ff ff       	call   c0007cfe <Phys::setPageState(unsigned long, bool)>
c00081b1:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081b6:	83 c4 10             	add    esp,0x10
c00081b9:	83 c0 01             	add    eax,0x1
c00081bc:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081c2:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081c7:	74 07                	je     c00081d0 <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c9:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ce:	7e d3                	jle    c00081a3 <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081d0:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d5:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081da:	7f 26                	jg     c0008202 <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081dc:	83 ec 08             	sub    esp,0x8
c00081df:	6a 00                	push   0x0
c00081e1:	53                   	push   ebx
c00081e2:	83 c3 01             	add    ebx,0x1
c00081e5:	e8 14 fb ff ff       	call   c0007cfe <Phys::setPageState(unsigned long, bool)>
c00081ea:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081ef:	83 c4 10             	add    esp,0x10
c00081f2:	83 c0 01             	add    eax,0x1
c00081f5:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081fb:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c0008200:	75 d3                	jne    c00081d5 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c0008202:	83 c4 3c             	add    esp,0x3c
c0008205:	5b                   	pop    ebx
c0008206:	5e                   	pop    esi
c0008207:	5f                   	pop    edi
c0008208:	5d                   	pop    ebp
c0008209:	c3                   	ret    
c000820a:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0008212:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000821a:	e9 3b fe ff ff       	jmp    c000805a <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821f:	90                   	nop

c0008220 <Pipe::isAtty()>:
c0008220:	31 c0                	xor    eax,eax
c0008222:	c3                   	ret    
c0008223:	90                   	nop

c0008224 <Pipe::~Pipe()>:
c0008224:	83 ec 0c             	sub    esp,0xc
c0008227:	ba 44 0f 02 c0       	mov    edx,0xc0020f44
c000822c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008230:	89 10                	mov    DWORD PTR [eax],edx
c0008232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008236:	83 ec 0c             	sub    esp,0xc
c0008239:	50                   	push   eax
c000823a:	e8 69 11 00 00       	call   c00093a8 <UnixFile::~UnixFile()>
c000823f:	83 c4 10             	add    esp,0x10
c0008242:	90                   	nop
c0008243:	83 c4 0c             	add    esp,0xc
c0008246:	c3                   	ret    
c0008247:	90                   	nop

c0008248 <Pipe::~Pipe()>:
c0008248:	83 ec 0c             	sub    esp,0xc
c000824b:	83 ec 0c             	sub    esp,0xc
c000824e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008252:	e8 cd ff ff ff       	call   c0008224 <Pipe::~Pipe()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	83 ec 08             	sub    esp,0x8
c000825d:	6a 20                	push   0x20
c000825f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008263:	e8 b4 25 00 00       	call   c000a81c <operator delete(void*, unsigned long)>
c0008268:	83 c4 10             	add    esp,0x10
c000826b:	83 c4 0c             	add    esp,0xc
c000826e:	c3                   	ret    
c000826f:	90                   	nop

c0008270 <Pipe::write(unsigned long long, void*, int*)>:
c0008270:	55                   	push   ebp
c0008271:	57                   	push   edi
c0008272:	56                   	push   esi
c0008273:	53                   	push   ebx
c0008274:	83 ec 1c             	sub    esp,0x1c
c0008277:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000827b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008282:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008286:	89 04 24             	mov    DWORD PTR [esp],eax
c0008289:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000828d:	89 d8                	mov    eax,ebx
c000828f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0008292:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008296:	89 d6                	mov    esi,edx
c0008298:	89 d7                	mov    edi,edx
c000829a:	c1 ff 1f             	sar    edi,0x1f
c000829d:	03 34 24             	add    esi,DWORD PTR [esp]
c00082a0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a4:	c1 f8 1f             	sar    eax,0x1f
c00082a7:	39 f3                	cmp    ebx,esi
c00082a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082b1:	19 f8                	sbb    eax,edi
c00082b3:	b8 01 00 00 00       	mov    eax,0x1
c00082b8:	72 6e                	jb     c0008328 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082ba:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082bd:	01 d0                	add    eax,edx
c00082bf:	99                   	cdq    
c00082c0:	f7 fb                	idiv   ebx
c00082c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c6:	29 d3                	sub    ebx,edx
c00082c8:	89 d7                	mov    edi,edx
c00082ca:	89 de                	mov    esi,ebx
c00082cc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cf:	c1 fb 1f             	sar    ebx,0x1f
c00082d2:	39 f2                	cmp    edx,esi
c00082d4:	19 d8                	sbb    eax,ebx
c00082d6:	b8 00 00 00 00       	mov    eax,0x0
c00082db:	72 04                	jb     c00082e1 <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082dd:	89 d0                	mov    eax,edx
c00082df:	29 f0                	sub    eax,esi
c00082e1:	89 d3                	mov    ebx,edx
c00082e3:	29 c3                	sub    ebx,eax
c00082e5:	74 0b                	je     c00082f2 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e7:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082ea:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ee:	89 d9                	mov    ecx,ebx
c00082f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082f2:	85 c0                	test   eax,eax
c00082f4:	74 0d                	je     c0008303 <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f6:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082fa:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082fd:	89 de                	mov    esi,ebx
c00082ff:	89 c1                	mov    ecx,eax
c0008301:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008303:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008306:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000830b:	75 10                	jne    c000831d <Pipe::write(unsigned long long, void*, int*)+0xad>
c000830d:	83 ec 0c             	sub    esp,0xc
c0008310:	68 01 0f 02 c0       	push   0xc0020f01
c0008315:	e8 a9 93 00 00       	call   c00116c3 <KePanic(char const*)>
c000831a:	83 c4 10             	add    esp,0x10
c000831d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008321:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008324:	89 08                	mov    DWORD PTR [eax],ecx
c0008326:	31 c0                	xor    eax,eax
c0008328:	83 c4 1c             	add    esp,0x1c
c000832b:	5b                   	pop    ebx
c000832c:	5e                   	pop    esi
c000832d:	5f                   	pop    edi
c000832e:	5d                   	pop    ebp
c000832f:	c3                   	ret    

c0008330 <Pipe::read(unsigned long long, void*, int*)>:
c0008330:	55                   	push   ebp
c0008331:	57                   	push   edi
c0008332:	56                   	push   esi
c0008333:	53                   	push   ebx
c0008334:	83 ec 1c             	sub    esp,0x1c
c0008337:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000833b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008343:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008346:	89 c8                	mov    eax,ecx
c0008348:	99                   	cdq    
c0008349:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000834d:	74 24                	je     c0008373 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834f:	39 f9                	cmp    ecx,edi
c0008351:	89 d1                	mov    ecx,edx
c0008353:	19 f1                	sbb    ecx,esi
c0008355:	73 1c                	jae    c0008373 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008357:	fa                   	cli    
c0008358:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000835e:	e8 45 de 00 00       	call   c00161a8 <schedule()>
c0008363:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008368:	48                   	dec    eax
c0008369:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000836e:	75 d3                	jne    c0008343 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008370:	fb                   	sti    
c0008371:	eb d0                	jmp    c0008343 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008373:	39 f8                	cmp    eax,edi
c0008375:	89 d1                	mov    ecx,edx
c0008377:	89 3c 24             	mov    DWORD PTR [esp],edi
c000837a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837e:	19 f1                	sbb    ecx,esi
c0008380:	73 07                	jae    c0008389 <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008382:	89 04 24             	mov    DWORD PTR [esp],eax
c0008385:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008389:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000838c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838f:	29 f7                	sub    edi,esi
c0008391:	89 f8                	mov    eax,edi
c0008393:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008397:	99                   	cdq    
c0008398:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000839b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839f:	19 d0                	sbb    eax,edx
c00083a1:	73 07                	jae    c00083aa <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00083a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083aa:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083ad:	89 ea                	mov    edx,ebp
c00083af:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083b3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b8:	74 0d                	je     c00083c7 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083ba:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083bd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c7:	85 d2                	test   edx,edx
c00083c9:	74 11                	je     c00083dc <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cf:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083d2:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d6:	89 d1                	mov    ecx,edx
c00083d8:	89 c7                	mov    edi,eax
c00083da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083dc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083df:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083e2:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e5:	99                   	cdq    
c00083e6:	89 f7                	mov    edi,esi
c00083e8:	03 04 24             	add    eax,DWORD PTR [esp]
c00083eb:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083ef:	c1 ff 1f             	sar    edi,0x1f
c00083f2:	57                   	push   edi
c00083f3:	56                   	push   esi
c00083f4:	52                   	push   edx
c00083f5:	50                   	push   eax
c00083f6:	e8 25 75 01 00       	call   c001f920 <__umoddi3>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008401:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008406:	75 10                	jne    c0008418 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008408:	83 ec 0c             	sub    esp,0xc
c000840b:	68 1e 0f 02 c0       	push   0xc0020f1e
c0008410:	e8 ae 92 00 00       	call   c00116c3 <KePanic(char const*)>
c0008415:	83 c4 10             	add    esp,0x10
c0008418:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000841c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841f:	89 10                	mov    DWORD PTR [eax],edx
c0008421:	83 c4 1c             	add    esp,0x1c
c0008424:	31 c0                	xor    eax,eax
c0008426:	5b                   	pop    ebx
c0008427:	5e                   	pop    esi
c0008428:	5f                   	pop    edi
c0008429:	5d                   	pop    ebp
c000842a:	c3                   	ret    
c000842b:	90                   	nop

c000842c <Pipe::Pipe(int)>:
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008433:	83 ec 08             	sub    esp,0x8
c0008436:	6a 00                	push   0x0
c0008438:	50                   	push   eax
c0008439:	e8 84 0d 00 00       	call   c00091c2 <UnixFile::UnixFile(int)>
c000843e:	83 c4 10             	add    esp,0x10
c0008441:	ba 44 0f 02 c0       	mov    edx,0xc0020f44
c0008446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844a:	89 10                	mov    DWORD PTR [eax],edx
c000844c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008450:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008454:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008466:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000846d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008471:	83 ec 0c             	sub    esp,0xc
c0008474:	50                   	push   eax
c0008475:	e8 40 f6 ff ff       	call   c0007aba <malloc>
c000847a:	83 c4 10             	add    esp,0x10
c000847d:	89 c2                	mov    edx,eax
c000847f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008483:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000848a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848e:	90                   	nop
c000848f:	83 c4 0c             	add    esp,0xc
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::isAtty()>:
c0008494:	b0 01                	mov    al,0x1
c0008496:	c3                   	ret    
c0008497:	90                   	nop

c0008498 <VgaText::~VgaText()>:
c0008498:	83 ec 0c             	sub    esp,0xc
c000849b:	ba 8c 0f 02 c0       	mov    edx,0xc0020f8c
c00084a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a4:	89 10                	mov    DWORD PTR [eax],edx
c00084a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	50                   	push   eax
c00084ae:	e8 f5 0e 00 00       	call   c00093a8 <UnixFile::~UnixFile()>
c00084b3:	83 c4 10             	add    esp,0x10
c00084b6:	90                   	nop
c00084b7:	83 c4 0c             	add    esp,0xc
c00084ba:	c3                   	ret    
c00084bb:	90                   	nop

c00084bc <VgaText::~VgaText()>:
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	83 ec 0c             	sub    esp,0xc
c00084c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c6:	e8 cd ff ff ff       	call   c0008498 <VgaText::~VgaText()>
c00084cb:	83 c4 10             	add    esp,0x10
c00084ce:	83 ec 08             	sub    esp,0x8
c00084d1:	68 84 01 00 00       	push   0x184
c00084d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084da:	e8 3d 23 00 00       	call   c000a81c <operator delete(void*, unsigned long)>
c00084df:	83 c4 10             	add    esp,0x10
c00084e2:	83 c4 0c             	add    esp,0xc
c00084e5:	c3                   	ret    

c00084e6 <VgaText::read(unsigned long long, void*, int*)>:
c00084e6:	83 ec 10             	sub    esp,0x10
c00084e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f5:	e8 c2 53 00 00       	call   c000d8bc <readKeyboard(VgaText*, char*, unsigned long)>
c00084fa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fe:	89 02                	mov    DWORD PTR [edx],eax
c0008500:	31 c0                	xor    eax,eax
c0008502:	83 c4 1c             	add    esp,0x1c
c0008505:	c3                   	ret    

c0008506 <setTerminalScrollLock(bool)>:
c0008506:	c3                   	ret    

c0008507 <doTerminalCycle()>:
c0008507:	c3                   	ret    

c0008508 <addToTerminalCycle(VgaText*)>:
c0008508:	c3                   	ret    

c0008509 <scrollTerminalScrollLock(int)>:
c0008509:	c3                   	ret    

c000850a <VgaText::updateTitle()>:
c000850a:	c3                   	ret    
c000850b:	90                   	nop

c000850c <VgaText::load()>:
c000850c:	c3                   	ret    
c000850d:	90                   	nop

c000850e <VgaText::updateCursor()>:
c000850e:	83 ec 14             	sub    esp,0x14
c0008511:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008515:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008518:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000851b:	e8 40 0a 01 00       	call   c0018f60 <HalConsoleCursorUpdate(int, int)>
c0008520:	83 c4 1c             	add    esp,0x1c
c0008523:	c3                   	ret    

c0008524 <VgaText::doANSI_SGR(int)>:
c0008524:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008528:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000852c:	85 d2                	test   edx,edx
c000852e:	75 0b                	jne    c000853b <VgaText::doANSI_SGR(int)+0x17>
c0008530:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008533:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008536:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008539:	eb 59                	jmp    c0008594 <VgaText::doANSI_SGR(int)+0x70>
c000853b:	83 fa 07             	cmp    edx,0x7
c000853e:	75 0b                	jne    c000854b <VgaText::doANSI_SGR(int)+0x27>
c0008540:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008543:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008546:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008549:	eb 49                	jmp    c0008594 <VgaText::doANSI_SGR(int)+0x70>
c000854b:	83 fa 1b             	cmp    edx,0x1b
c000854e:	74 e0                	je     c0008530 <VgaText::doANSI_SGR(int)+0xc>
c0008550:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008553:	83 f9 07             	cmp    ecx,0x7
c0008556:	77 09                	ja     c0008561 <VgaText::doANSI_SGR(int)+0x3d>
c0008558:	8b 14 8d 00 38 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc800]
c000855f:	eb 20                	jmp    c0008581 <VgaText::doANSI_SGR(int)+0x5d>
c0008561:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008564:	83 f9 07             	cmp    ecx,0x7
c0008567:	77 09                	ja     c0008572 <VgaText::doANSI_SGR(int)+0x4e>
c0008569:	8b 14 8d 00 38 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc800]
c0008570:	eb 22                	jmp    c0008594 <VgaText::doANSI_SGR(int)+0x70>
c0008572:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008575:	83 f9 07             	cmp    ecx,0x7
c0008578:	77 0b                	ja     c0008585 <VgaText::doANSI_SGR(int)+0x61>
c000857a:	8b 14 95 b8 36 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc948]
c0008581:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008584:	c3                   	ret    
c0008585:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008588:	83 f9 07             	cmp    ecx,0x7
c000858b:	77 0a                	ja     c0008597 <VgaText::doANSI_SGR(int)+0x73>
c000858d:	8b 14 95 90 36 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc970]
c0008594:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008597:	c3                   	ret    

c0008598 <VgaText::setDefaultBgColour(VgaColour)>:
c0008598:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000859c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085a0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085a3:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a6:	c3                   	ret    
c00085a7:	90                   	nop

c00085a8 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085b3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b6:	c3                   	ret    
c00085b7:	90                   	nop

c00085b8 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b8:	53                   	push   ebx
c00085b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085bd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c5:	51                   	push   ecx
c00085c6:	e8 cd ff ff ff       	call   c0008598 <VgaText::setDefaultBgColour(VgaColour)>
c00085cb:	58                   	pop    eax
c00085cc:	5a                   	pop    edx
c00085cd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085d1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d5:	5b                   	pop    ebx
c00085d6:	eb d0                	jmp    c00085a8 <VgaText::setDefaultFgColour(VgaColour)>

c00085d8 <VgaText::setTitleTextColour(VgaColour)>:
c00085d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e0:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085e3:	c3                   	ret    

c00085e4 <VgaText::setTitleColour(VgaColour)>:
c00085e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085ef:	c3                   	ret    

c00085f0 <VgaText::setTitle(char*)>:
c00085f0:	c3                   	ret    
c00085f1:	90                   	nop

c00085f2 <VgaText::combineColours(unsigned char, unsigned char)>:
c00085f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085fb:	83 e0 0f             	and    eax,0xf
c00085fe:	c1 e2 04             	shl    edx,0x4
c0008601:	09 d0                	or     eax,edx
c0008603:	c3                   	ret    

c0008604 <VgaText::scrollScreen()>:
c0008604:	55                   	push   ebp
c0008605:	57                   	push   edi
c0008606:	56                   	push   esi
c0008607:	be 01 00 00 00       	mov    esi,0x1
c000860c:	53                   	push   ebx
c000860d:	83 ec 0c             	sub    esp,0xc
c0008610:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008614:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008617:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000861d:	31 ff                	xor    edi,edi
c000861f:	01 e9                	add    ecx,ebp
c0008621:	8a 01                	mov    al,BYTE PTR [ecx]
c0008623:	83 fe 18             	cmp    esi,0x18
c0008626:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000862c:	75 20                	jne    c000864e <VgaText::scrollScreen()+0x4a>
c000862e:	f7 c7 01 00 00 00    	test   edi,0x1
c0008634:	74 15                	je     c000864b <VgaText::scrollScreen()+0x47>
c0008636:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000863a:	50                   	push   eax
c000863b:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863f:	50                   	push   eax
c0008640:	e8 ad ff ff ff       	call   c00085f2 <VgaText::combineColours(unsigned char, unsigned char)>
c0008645:	5a                   	pop    edx
c0008646:	5a                   	pop    edx
c0008647:	88 01                	mov    BYTE PTR [ecx],al
c0008649:	eb 03                	jmp    c000864e <VgaText::scrollScreen()+0x4a>
c000864b:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864e:	47                   	inc    edi
c000864f:	41                   	inc    ecx
c0008650:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008656:	75 c9                	jne    c0008621 <VgaText::scrollScreen()+0x1d>
c0008658:	46                   	inc    esi
c0008659:	83 fe 19             	cmp    esi,0x19
c000865c:	75 b9                	jne    c0008617 <VgaText::scrollScreen()+0x13>
c000865e:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008664:	75 1f                	jne    c0008685 <VgaText::scrollScreen()+0x81>
c0008666:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000866a:	74 05                	je     c0008671 <VgaText::scrollScreen()+0x6d>
c000866c:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866f:	eb 14                	jmp    c0008685 <VgaText::scrollScreen()+0x81>
c0008671:	50                   	push   eax
c0008672:	50                   	push   eax
c0008673:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008677:	50                   	push   eax
c0008678:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000867c:	50                   	push   eax
c000867d:	e8 72 07 01 00       	call   c0018df4 <HalConsoleScroll(int, int)>
c0008682:	83 c4 10             	add    esp,0x10
c0008685:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008689:	83 c4 0c             	add    esp,0xc
c000868c:	5b                   	pop    ebx
c000868d:	5e                   	pop    esi
c000868e:	5f                   	pop    edi
c000868f:	5d                   	pop    ebp
c0008690:	e9 79 fe ff ff       	jmp    c000850e <VgaText::updateCursor()>
c0008695:	90                   	nop

c0008696 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008696:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000869b:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086a0:	c1 e0 08             	shl    eax,0x8
c00086a3:	09 d0                	or     eax,edx
c00086a5:	c3                   	ret    

c00086a6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a6:	55                   	push   ebp
c00086a7:	57                   	push   edi
c00086a8:	56                   	push   esi
c00086a9:	53                   	push   ebx
c00086aa:	83 ec 1c             	sub    esp,0x1c
c00086ad:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086b1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086bd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086c1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c5:	0f b6 c3             	movzx  eax,bl
c00086c8:	50                   	push   eax
c00086c9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ce:	50                   	push   eax
c00086cf:	e8 1e ff ff ff       	call   c00085f2 <VgaText::combineColours(unsigned char, unsigned char)>
c00086d4:	5a                   	pop    edx
c00086d5:	0f b6 c0             	movzx  eax,al
c00086d8:	59                   	pop    ecx
c00086d9:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086de:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086e2:	50                   	push   eax
c00086e3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e7:	e8 aa ff ff ff       	call   c0008696 <VgaText::combineCharAndColour(char, unsigned char)>
c00086ec:	5a                   	pop    edx
c00086ed:	6b d7 50             	imul   edx,edi,0x50
c00086f0:	59                   	pop    ecx
c00086f1:	01 f2                	add    edx,esi
c00086f3:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f6:	0f b7 d2             	movzx  edx,dx
c00086f9:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086fd:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008703:	75 28                	jne    c000872d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008705:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008709:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000870d:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008711:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008715:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008719:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000871d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008721:	83 c4 1c             	add    esp,0x1c
c0008724:	5b                   	pop    ebx
c0008725:	5e                   	pop    esi
c0008726:	5f                   	pop    edi
c0008727:	5d                   	pop    ebp
c0008728:	e9 cf 07 01 00       	jmp    c0018efc <HalConsoleWriteCharacter(char, int, int, int, int)>
c000872d:	83 c4 1c             	add    esp,0x1c
c0008730:	5b                   	pop    ebx
c0008731:	5e                   	pop    esi
c0008732:	5f                   	pop    edi
c0008733:	5d                   	pop    ebp
c0008734:	c3                   	ret    
c0008735:	90                   	nop

c0008736 <VgaText::getCursorX()>:
c0008736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000873d:	c3                   	ret    

c000873e <VgaText::getCursorY()>:
c000873e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008742:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008745:	c3                   	ret    

c0008746 <VgaText::setCursor(int, int)>:
c0008746:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008751:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008758:	e9 b1 fd ff ff       	jmp    c000850e <VgaText::updateCursor()>

c000875d <setActiveTerminal(VgaText*)>:
c000875d:	53                   	push   ebx
c000875e:	83 ec 08             	sub    esp,0x8
c0008761:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008765:	85 db                	test   ebx,ebx
c0008767:	75 11                	jne    c000877a <setActiveTerminal(VgaText*)+0x1d>
c0008769:	c7 44 24 10 58 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020f58
c0008771:	83 c4 08             	add    esp,0x8
c0008774:	5b                   	pop    ebx
c0008775:	e9 49 8f 00 00       	jmp    c00116c3 <KePanic(char const*)>
c000877a:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000877f:	85 c0                	test   eax,eax
c0008781:	74 0c                	je     c000878f <setActiveTerminal(VgaText*)+0x32>
c0008783:	83 ec 0c             	sub    esp,0xc
c0008786:	50                   	push   eax
c0008787:	e8 82 fd ff ff       	call   c000850e <VgaText::updateCursor()>
c000878c:	83 c4 10             	add    esp,0x10
c000878f:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c0008795:	50                   	push   eax
c0008796:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008799:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000879c:	53                   	push   ebx
c000879d:	e8 a4 ff ff ff       	call   c0008746 <VgaText::setCursor(int, int)>
c00087a2:	83 c4 18             	add    esp,0x18
c00087a5:	5b                   	pop    ebx
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::clearScreen()>:
c00087a8:	57                   	push   edi
c00087a9:	56                   	push   esi
c00087aa:	31 f6                	xor    esi,esi
c00087ac:	53                   	push   ebx
c00087ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087b1:	52                   	push   edx
c00087b2:	6a 00                	push   0x0
c00087b4:	6a 00                	push   0x0
c00087b6:	53                   	push   ebx
c00087b7:	e8 8a ff ff ff       	call   c0008746 <VgaText::setCursor(int, int)>
c00087bc:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087c3:	83 c4 10             	add    esp,0x10
c00087c6:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c9:	7e 20                	jle    c00087eb <VgaText::clearScreen()+0x43>
c00087cb:	31 ff                	xor    edi,edi
c00087cd:	50                   	push   eax
c00087ce:	50                   	push   eax
c00087cf:	56                   	push   esi
c00087d0:	57                   	push   edi
c00087d1:	47                   	inc    edi
c00087d2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d8:	6a 20                	push   0x20
c00087da:	53                   	push   ebx
c00087db:	e8 c6 fe ff ff       	call   c00086a6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087e0:	83 c4 20             	add    esp,0x20
c00087e3:	83 ff 50             	cmp    edi,0x50
c00087e6:	75 e5                	jne    c00087cd <VgaText::clearScreen()+0x25>
c00087e8:	46                   	inc    esi
c00087e9:	eb db                	jmp    c00087c6 <VgaText::clearScreen()+0x1e>
c00087eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087f2:	5b                   	pop    ebx
c00087f3:	5e                   	pop    esi
c00087f4:	5f                   	pop    edi
c00087f5:	c3                   	ret    

c00087f6 <VgaText::setCursorX(int)>:
c00087f6:	83 ec 10             	sub    esp,0x10
c00087f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087fd:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008804:	50                   	push   eax
c0008805:	e8 3c ff ff ff       	call   c0008746 <VgaText::setCursor(int, int)>
c000880a:	83 c4 1c             	add    esp,0x1c
c000880d:	c3                   	ret    

c000880e <VgaText::setCursorY(int)>:
c000880e:	83 ec 10             	sub    esp,0x10
c0008811:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008815:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008819:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000881c:	50                   	push   eax
c000881d:	e8 24 ff ff ff       	call   c0008746 <VgaText::setCursor(int, int)>
c0008822:	83 c4 1c             	add    esp,0x1c
c0008825:	c3                   	ret    

c0008826 <VgaText::incrementCursor(bool)>:
c0008826:	56                   	push   esi
c0008827:	53                   	push   ebx
c0008828:	51                   	push   ecx
c0008829:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000882d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008831:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008834:	40                   	inc    eax
c0008835:	83 f8 50             	cmp    eax,0x50
c0008838:	74 05                	je     c000883f <VgaText::incrementCursor(bool)+0x19>
c000883a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000883d:	eb 24                	jmp    c0008863 <VgaText::incrementCursor(bool)+0x3d>
c000883f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008842:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008849:	8d 50 01             	lea    edx,[eax+0x1]
c000884c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008852:	75 0f                	jne    c0008863 <VgaText::incrementCursor(bool)+0x3d>
c0008854:	83 ec 0c             	sub    esp,0xc
c0008857:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000885a:	53                   	push   ebx
c000885b:	e8 a4 fd ff ff       	call   c0008604 <VgaText::scrollScreen()>
c0008860:	83 c4 10             	add    esp,0x10
c0008863:	89 f0                	mov    eax,esi
c0008865:	84 c0                	test   al,al
c0008867:	74 0c                	je     c0008875 <VgaText::incrementCursor(bool)+0x4f>
c0008869:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000886d:	5a                   	pop    edx
c000886e:	5b                   	pop    ebx
c000886f:	5e                   	pop    esi
c0008870:	e9 99 fc ff ff       	jmp    c000850e <VgaText::updateCursor()>
c0008875:	58                   	pop    eax
c0008876:	5b                   	pop    ebx
c0008877:	5e                   	pop    esi
c0008878:	c3                   	ret    
c0008879:	90                   	nop

c000887a <VgaText::decrementCursor(bool)>:
c000887a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008882:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008885:	85 c0                	test   eax,eax
c0008887:	74 04                	je     c000888d <VgaText::decrementCursor(bool)+0x13>
c0008889:	48                   	dec    eax
c000888a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000888d:	84 c9                	test   cl,cl
c000888f:	74 09                	je     c000889a <VgaText::decrementCursor(bool)+0x20>
c0008891:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008895:	e9 74 fc ff ff       	jmp    c000850e <VgaText::updateCursor()>
c000889a:	c3                   	ret    
c000889b:	90                   	nop

c000889c <VgaText::putchar(char, VgaColour, VgaColour)>:
c000889c:	53                   	push   ebx
c000889d:	83 ec 08             	sub    esp,0x8
c00088a0:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088ad:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088b1:	83 f8 07             	cmp    eax,0x7
c00088b4:	75 21                	jne    c00088d7 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088be:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c6:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ce:	83 c4 08             	add    esp,0x8
c00088d1:	5b                   	pop    ebx
c00088d2:	e9 18 3b 00 00       	jmp    c000c3ef <Krnl::beep(int, int, bool)>
c00088d7:	83 f8 0d             	cmp    eax,0xd
c00088da:	75 09                	jne    c00088e5 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088e3:	eb 2d                	jmp    c0008912 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e5:	83 f8 0a             	cmp    eax,0xa
c00088e8:	75 31                	jne    c000891b <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088ea:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f4:	8d 50 01             	lea    edx,[eax+0x1]
c00088f7:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088fa:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088fd:	75 0f                	jne    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088ff:	83 ec 0c             	sub    esp,0xc
c0008902:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008905:	53                   	push   ebx
c0008906:	e8 f9 fc ff ff       	call   c0008604 <VgaText::scrollScreen()>
c000890b:	83 c4 10             	add    esp,0x10
c000890e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008912:	83 c4 08             	add    esp,0x8
c0008915:	5b                   	pop    ebx
c0008916:	e9 f3 fb ff ff       	jmp    c000850e <VgaText::updateCursor()>
c000891b:	83 f8 08             	cmp    eax,0x8
c000891e:	75 25                	jne    c0008945 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008920:	50                   	push   eax
c0008921:	50                   	push   eax
c0008922:	6a 01                	push   0x1
c0008924:	53                   	push   ebx
c0008925:	e8 50 ff ff ff       	call   c000887a <VgaText::decrementCursor(bool)>
c000892a:	5a                   	pop    edx
c000892b:	59                   	pop    ecx
c000892c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008932:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008935:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008938:	6a 20                	push   0x20
c000893a:	53                   	push   ebx
c000893b:	e8 66 fd ff ff       	call   c00086a6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008940:	83 c4 28             	add    esp,0x28
c0008943:	5b                   	pop    ebx
c0008944:	c3                   	ret    
c0008945:	83 ec 08             	sub    esp,0x8
c0008948:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000894b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894e:	51                   	push   ecx
c000894f:	52                   	push   edx
c0008950:	50                   	push   eax
c0008951:	53                   	push   ebx
c0008952:	e8 4f fd ff ff       	call   c00086a6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008957:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000895b:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008963:	83 c4 28             	add    esp,0x28
c0008966:	5b                   	pop    ebx
c0008967:	e9 ba fe ff ff       	jmp    c0008826 <VgaText::incrementCursor(bool)>

c000896c <VgaText::putchar(char)>:
c000896c:	57                   	push   edi
c000896d:	56                   	push   esi
c000896e:	53                   	push   ebx
c000896f:	83 ec 10             	sub    esp,0x10
c0008972:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008976:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000897a:	89 f8                	mov    eax,edi
c000897c:	0f be c0             	movsx  eax,al
c000897f:	83 f8 5b             	cmp    eax,0x5b
c0008982:	75 18                	jne    c000899c <VgaText::putchar(char)+0x30>
c0008984:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008988:	74 20                	je     c00089aa <VgaText::putchar(char)+0x3e>
c000898a:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008990:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008997:	e9 c1 00 00 00       	jmp    c0008a5d <VgaText::putchar(char)+0xf1>
c000899c:	83 f8 1b             	cmp    eax,0x1b
c000899f:	75 09                	jne    c00089aa <VgaText::putchar(char)+0x3e>
c00089a1:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a5:	e9 b3 00 00 00       	jmp    c0008a5d <VgaText::putchar(char)+0xf1>
c00089aa:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089ad:	84 c9                	test   cl,cl
c00089af:	0f 84 98 00 00 00    	je     c0008a4d <VgaText::putchar(char)+0xe1>
c00089b5:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b8:	89 f2                	mov    edx,esi
c00089ba:	80 fa 3e             	cmp    dl,0x3e
c00089bd:	77 78                	ja     c0008a37 <VgaText::putchar(char)+0xcb>
c00089bf:	83 f8 6d             	cmp    eax,0x6d
c00089c2:	75 47                	jne    c0008a0b <VgaText::putchar(char)+0x9f>
c00089c4:	31 f6                	xor    esi,esi
c00089c6:	31 d2                	xor    edx,edx
c00089c8:	31 c0                	xor    eax,eax
c00089ca:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089cd:	7e 2d                	jle    c00089fc <VgaText::putchar(char)+0x90>
c00089cf:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d4:	83 fa 3b             	cmp    edx,0x3b
c00089d7:	75 17                	jne    c00089f0 <VgaText::putchar(char)+0x84>
c00089d9:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089dd:	50                   	push   eax
c00089de:	53                   	push   ebx
c00089df:	e8 40 fb ff ff       	call   c0008524 <VgaText::doANSI_SGR(int)>
c00089e4:	59                   	pop    ecx
c00089e5:	31 d2                	xor    edx,edx
c00089e7:	5f                   	pop    edi
c00089e8:	31 c0                	xor    eax,eax
c00089ea:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ee:	eb 09                	jmp    c00089f9 <VgaText::putchar(char)+0x8d>
c00089f0:	6b c0 0a             	imul   eax,eax,0xa
c00089f3:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f7:	88 ca                	mov    dl,cl
c00089f9:	46                   	inc    esi
c00089fa:	eb ce                	jmp    c00089ca <VgaText::putchar(char)+0x5e>
c00089fc:	84 d2                	test   dl,dl
c00089fe:	74 2f                	je     c0008a2f <VgaText::putchar(char)+0xc3>
c0008a00:	50                   	push   eax
c0008a01:	53                   	push   ebx
c0008a02:	e8 1d fb ff ff       	call   c0008524 <VgaText::doANSI_SGR(int)>
c0008a07:	58                   	pop    eax
c0008a08:	5a                   	pop    edx
c0008a09:	eb 24                	jmp    c0008a2f <VgaText::putchar(char)+0xc3>
c0008a0b:	83 f8 4a             	cmp    eax,0x4a
c0008a0e:	75 1f                	jne    c0008a2f <VgaText::putchar(char)+0xc3>
c0008a10:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a14:	75 19                	jne    c0008a2f <VgaText::putchar(char)+0xc3>
c0008a16:	83 ec 0c             	sub    esp,0xc
c0008a19:	53                   	push   ebx
c0008a1a:	e8 89 fd ff ff       	call   c00087a8 <VgaText::clearScreen()>
c0008a1f:	83 c4 0c             	add    esp,0xc
c0008a22:	6a 00                	push   0x0
c0008a24:	6a 00                	push   0x0
c0008a26:	53                   	push   ebx
c0008a27:	e8 1a fd ff ff       	call   c0008746 <VgaText::setCursor(int, int)>
c0008a2c:	83 c4 10             	add    esp,0x10
c0008a2f:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a35:	eb 26                	jmp    c0008a5d <VgaText::putchar(char)+0xf1>
c0008a37:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a3a:	83 f8 0e             	cmp    eax,0xe
c0008a3d:	7f 1e                	jg     c0008a5d <VgaText::putchar(char)+0xf1>
c0008a3f:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a42:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a45:	89 f9                	mov    ecx,edi
c0008a47:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a4b:	eb 10                	jmp    c0008a5d <VgaText::putchar(char)+0xf1>
c0008a4d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a50:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a53:	50                   	push   eax
c0008a54:	53                   	push   ebx
c0008a55:	e8 42 fe ff ff       	call   c000889c <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a5a:	83 c4 10             	add    esp,0x10
c0008a5d:	83 c4 10             	add    esp,0x10
c0008a60:	5b                   	pop    ebx
c0008a61:	5e                   	pop    esi
c0008a62:	5f                   	pop    edi
c0008a63:	c3                   	ret    

c0008a64 <VgaText::putx(unsigned int)>:
c0008a64:	57                   	push   edi
c0008a65:	b9 11 00 00 00       	mov    ecx,0x11
c0008a6a:	56                   	push   esi
c0008a6b:	be 66 0f 02 c0       	mov    esi,0xc0020f66
c0008a70:	53                   	push   ebx
c0008a71:	83 ec 20             	sub    esp,0x20
c0008a74:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a78:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a7c:	fc                   	cld    
c0008a7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7f:	be 08 00 00 00       	mov    esi,0x8
c0008a84:	50                   	push   eax
c0008a85:	50                   	push   eax
c0008a86:	89 d8                	mov    eax,ebx
c0008a88:	c1 e3 04             	shl    ebx,0x4
c0008a8b:	c1 e8 1c             	shr    eax,0x1c
c0008a8e:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a93:	50                   	push   eax
c0008a94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a98:	e8 cf fe ff ff       	call   c000896c <VgaText::putchar(char)>
c0008a9d:	83 c4 10             	add    esp,0x10
c0008aa0:	4e                   	dec    esi
c0008aa1:	75 e1                	jne    c0008a84 <VgaText::putx(unsigned int)+0x20>
c0008aa3:	83 c4 20             	add    esp,0x20
c0008aa6:	5b                   	pop    ebx
c0008aa7:	5e                   	pop    esi
c0008aa8:	5f                   	pop    edi
c0008aa9:	c3                   	ret    

c0008aaa <VgaText::puts(char const*)>:
c0008aaa:	53                   	push   ebx
c0008aab:	83 ec 08             	sub    esp,0x8
c0008aae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab5:	85 c0                	test   eax,eax
c0008ab7:	74 12                	je     c0008acb <VgaText::puts(char const*)+0x21>
c0008ab9:	43                   	inc    ebx
c0008aba:	51                   	push   ecx
c0008abb:	51                   	push   ecx
c0008abc:	50                   	push   eax
c0008abd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac1:	e8 a6 fe ff ff       	call   c000896c <VgaText::putchar(char)>
c0008ac6:	83 c4 10             	add    esp,0x10
c0008ac9:	eb e7                	jmp    c0008ab2 <VgaText::puts(char const*)+0x8>
c0008acb:	83 c4 08             	add    esp,0x8
c0008ace:	5b                   	pop    ebx
c0008acf:	c3                   	ret    

c0008ad0 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad0:	55                   	push   ebp
c0008ad1:	57                   	push   edi
c0008ad2:	56                   	push   esi
c0008ad3:	53                   	push   ebx
c0008ad4:	83 ec 0c             	sub    esp,0xc
c0008ad7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008adb:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae3:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008aea:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008aed:	39 eb                	cmp    ebx,ebp
c0008aef:	74 13                	je     c0008b04 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af1:	43                   	inc    ebx
c0008af2:	50                   	push   eax
c0008af3:	50                   	push   eax
c0008af4:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af8:	50                   	push   eax
c0008af9:	56                   	push   esi
c0008afa:	e8 6d fe ff ff       	call   c000896c <VgaText::putchar(char)>
c0008aff:	83 c4 10             	add    esp,0x10
c0008b02:	eb e9                	jmp    c0008aed <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b04:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0f:	89 38                	mov    DWORD PTR [eax],edi
c0008b11:	83 c4 0c             	add    esp,0xc
c0008b14:	31 c0                	xor    eax,eax
c0008b16:	5b                   	pop    ebx
c0008b17:	5e                   	pop    esi
c0008b18:	5f                   	pop    edi
c0008b19:	5d                   	pop    ebp
c0008b1a:	c3                   	ret    
c0008b1b:	90                   	nop

c0008b1c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b1c:	55                   	push   ebp
c0008b1d:	57                   	push   edi
c0008b1e:	56                   	push   esi
c0008b1f:	53                   	push   ebx
c0008b20:	83 ec 0c             	sub    esp,0xc
c0008b23:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b27:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2c:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b33:	50                   	push   eax
c0008b34:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b39:	50                   	push   eax
c0008b3a:	e8 b3 fa ff ff       	call   c00085f2 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3f:	5a                   	pop    edx
c0008b40:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b44:	59                   	pop    ecx
c0008b45:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b48:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b4c:	0f b7 f6             	movzx  esi,si
c0008b4f:	0f b6 e8             	movzx  ebp,al
c0008b52:	01 f6                	add    esi,esi
c0008b54:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b57:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b5a:	85 c0                	test   eax,eax
c0008b5c:	0f 84 ef 00 00 00    	je     c0008c51 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b62:	83 f8 0d             	cmp    eax,0xd
c0008b65:	75 0c                	jne    c0008b73 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b67:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6e:	e9 d8 00 00 00       	jmp    c0008c4b <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b73:	83 f8 0a             	cmp    eax,0xa
c0008b76:	75 44                	jne    c0008bbc <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b78:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b7b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b82:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b85:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b88:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b8b:	75 0f                	jne    c0008b9c <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b8d:	83 ec 0c             	sub    esp,0xc
c0008b90:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b93:	53                   	push   ebx
c0008b94:	e8 6b fa ff ff       	call   c0008604 <VgaText::scrollScreen()>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	83 ec 0c             	sub    esp,0xc
c0008b9f:	53                   	push   ebx
c0008ba0:	e8 69 f9 ff ff       	call   c000850e <VgaText::updateCursor()>
c0008ba5:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba9:	83 c4 10             	add    esp,0x10
c0008bac:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008baf:	0f b7 f6             	movzx  esi,si
c0008bb2:	01 f6                	add    esi,esi
c0008bb4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb7:	e9 8f 00 00 00       	jmp    c0008c4b <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bbc:	83 f8 08             	cmp    eax,0x8
c0008bbf:	75 34                	jne    c0008bf5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc1:	51                   	push   ecx
c0008bc2:	51                   	push   ecx
c0008bc3:	6a 01                	push   0x1
c0008bc5:	53                   	push   ebx
c0008bc6:	e8 af fc ff ff       	call   c000887a <VgaText::decrementCursor(bool)>
c0008bcb:	5e                   	pop    esi
c0008bcc:	58                   	pop    eax
c0008bcd:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bd0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bd3:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd9:	6a 20                	push   0x20
c0008bdb:	53                   	push   ebx
c0008bdc:	e8 c5 fa ff ff       	call   c00086a6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be5:	83 c4 20             	add    esp,0x20
c0008be8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008beb:	0f b7 f6             	movzx  esi,si
c0008bee:	01 f6                	add    esi,esi
c0008bf0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bf3:	eb 56                	jmp    c0008c4b <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf5:	52                   	push   edx
c0008bf6:	52                   	push   edx
c0008bf7:	55                   	push   ebp
c0008bf8:	50                   	push   eax
c0008bf9:	e8 98 fa ff ff       	call   c0008696 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfe:	83 c4 10             	add    esp,0x10
c0008c01:	66 89 06             	mov    WORD PTR [esi],ax
c0008c04:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008c0a:	75 1d                	jne    c0008c29 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c0c:	83 ec 0c             	sub    esp,0xc
c0008c0f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c12:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c20:	50                   	push   eax
c0008c21:	e8 d6 02 01 00       	call   c0018efc <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c26:	83 c4 20             	add    esp,0x20
c0008c29:	83 c6 02             	add    esi,0x2
c0008c2c:	50                   	push   eax
c0008c2d:	50                   	push   eax
c0008c2e:	6a 00                	push   0x0
c0008c30:	53                   	push   ebx
c0008c31:	e8 f0 fb ff ff       	call   c0008826 <VgaText::incrementCursor(bool)>
c0008c36:	83 c4 10             	add    esp,0x10
c0008c39:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c3d:	75 0c                	jne    c0008c4b <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3f:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c43:	0f b7 f6             	movzx  esi,si
c0008c46:	01 f6                	add    esi,esi
c0008c48:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c4b:	47                   	inc    edi
c0008c4c:	e9 06 ff ff ff       	jmp    c0008b57 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c51:	83 ec 0c             	sub    esp,0xc
c0008c54:	53                   	push   ebx
c0008c55:	e8 b4 f8 ff ff       	call   c000850e <VgaText::updateCursor()>
c0008c5a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c61:	83 c4 1c             	add    esp,0x1c
c0008c64:	5b                   	pop    ebx
c0008c65:	5e                   	pop    esi
c0008c66:	5f                   	pop    edi
c0008c67:	5d                   	pop    ebp
c0008c68:	c3                   	ret    
c0008c69:	90                   	nop

c0008c6a <VgaText::VgaText(char const*)>:
c0008c6a:	56                   	push   esi
c0008c6b:	53                   	push   ebx
c0008c6c:	83 ec 04             	sub    esp,0x4
c0008c6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c73:	83 ec 08             	sub    esp,0x8
c0008c76:	6a 00                	push   0x0
c0008c78:	50                   	push   eax
c0008c79:	e8 44 05 00 00       	call   c00091c2 <UnixFile::UnixFile(int)>
c0008c7e:	83 c4 10             	add    esp,0x10
c0008c81:	ba 8c 0f 02 c0       	mov    edx,0xc0020f8c
c0008c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8a:	89 10                	mov    DWORD PTR [eax],edx
c0008c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c90:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca6:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008caa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cae:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb6:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc1:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ccc:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd7:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce2:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce9:	83 ec 0c             	sub    esp,0xc
c0008cec:	6a 01                	push   0x1
c0008cee:	e8 1e 09 00 00       	call   c0009611 <Virt::allocateKernelVirtualPages(int)>
c0008cf3:	83 c4 10             	add    esp,0x10
c0008cf6:	89 c2                	mov    edx,eax
c0008cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cff:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d09:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d0c:	89 c6                	mov    esi,eax
c0008d0e:	e8 b0 f0 ff ff       	call   c0007dc3 <Phys::allocatePage()>
c0008d13:	68 05 0c 00 00       	push   0xc05
c0008d18:	56                   	push   esi
c0008d19:	50                   	push   eax
c0008d1a:	53                   	push   ebx
c0008d1b:	e8 04 10 00 00       	call   c0009d24 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d20:	83 c4 10             	add    esp,0x10
c0008d23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d27:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2a:	83 ec 04             	sub    esp,0x4
c0008d2d:	68 a0 0f 00 00       	push   0xfa0
c0008d32:	6a 00                	push   0x0
c0008d34:	50                   	push   eax
c0008d35:	e8 b6 77 ff ff       	call   c00004f0 <memset>
c0008d3a:	83 c4 10             	add    esp,0x10
c0008d3d:	83 ec 04             	sub    esp,0x4
c0008d40:	6a 00                	push   0x0
c0008d42:	6a 07                	push   0x7
c0008d44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d48:	e8 6b f8 ff ff       	call   c00085b8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d4d:	83 c4 10             	add    esp,0x10
c0008d50:	83 ec 04             	sub    esp,0x4
c0008d53:	6a 00                	push   0x0
c0008d55:	6a 00                	push   0x0
c0008d57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5b:	e8 e6 f9 ff ff       	call   c0008746 <VgaText::setCursor(int, int)>
c0008d60:	83 c4 10             	add    esp,0x10
c0008d63:	83 ec 0c             	sub    esp,0xc
c0008d66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6a:	e8 39 fa ff ff       	call   c00087a8 <VgaText::clearScreen()>
c0008d6f:	83 c4 10             	add    esp,0x10
c0008d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d76:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7e:	05 82 00 00 00       	add    eax,0x82
c0008d83:	83 ec 04             	sub    esp,0x4
c0008d86:	68 80 00 00 00       	push   0x80
c0008d8b:	6a 00                	push   0x0
c0008d8d:	50                   	push   eax
c0008d8e:	e8 5d 77 ff ff       	call   c00004f0 <memset>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9a:	05 02 01 00 00       	add    eax,0x102
c0008d9f:	83 ec 04             	sub    esp,0x4
c0008da2:	68 80 00 00 00       	push   0x80
c0008da7:	6a 00                	push   0x0
c0008da9:	50                   	push   eax
c0008daa:	e8 41 77 ff ff       	call   c00004f0 <memset>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	90                   	nop
c0008db3:	83 c4 04             	add    esp,0x4
c0008db6:	5b                   	pop    ebx
c0008db7:	5e                   	pop    esi
c0008db8:	c3                   	ret    
c0008db9:	90                   	nop

c0008dba <VgaText::receiveKey(unsigned char)>:
c0008dba:	55                   	push   ebp
c0008dbb:	57                   	push   edi
c0008dbc:	56                   	push   esi
c0008dbd:	53                   	push   ebx
c0008dbe:	83 ec 2c             	sub    esp,0x2c
c0008dc1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc9:	89 ef                	mov    edi,ebp
c0008dcb:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dd1:	0f 84 66 01 00 00    	je     c0008f3d <VgaText::receiveKey(unsigned char)+0x183>
c0008dd7:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008ddd:	83 ff 08             	cmp    edi,0x8
c0008de0:	75 73                	jne    c0008e55 <VgaText::receiveKey(unsigned char)+0x9b>
c0008de2:	83 ec 0c             	sub    esp,0xc
c0008de5:	56                   	push   esi
c0008de6:	e8 85 77 ff ff       	call   c0000570 <strlen>
c0008deb:	83 c4 10             	add    esp,0x10
c0008dee:	85 c0                	test   eax,eax
c0008df0:	0f 84 02 01 00 00    	je     c0008ef8 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df6:	50                   	push   eax
c0008df7:	50                   	push   eax
c0008df8:	6a 08                	push   0x8
c0008dfa:	53                   	push   ebx
c0008dfb:	e8 6c fb ff ff       	call   c000896c <VgaText::putchar(char)>
c0008e00:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e03:	e8 68 77 ff ff       	call   c0000570 <strlen>
c0008e08:	83 c4 10             	add    esp,0x10
c0008e0b:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e13:	83 fa 0d             	cmp    edx,0xd
c0008e16:	89 d0                	mov    eax,edx
c0008e18:	0f 95 c1             	setne  cl
c0008e1b:	83 fa 1f             	cmp    edx,0x1f
c0008e1e:	0f 9e c2             	setle  dl
c0008e21:	0f b6 d2             	movzx  edx,dl
c0008e24:	85 ca                	test   edx,ecx
c0008e26:	74 17                	je     c0008e3f <VgaText::receiveKey(unsigned char)+0x85>
c0008e28:	83 e8 08             	sub    eax,0x8
c0008e2b:	3c 02                	cmp    al,0x2
c0008e2d:	76 10                	jbe    c0008e3f <VgaText::receiveKey(unsigned char)+0x85>
c0008e2f:	55                   	push   ebp
c0008e30:	55                   	push   ebp
c0008e31:	68 77 0f 02 c0       	push   0xc0020f77
c0008e36:	53                   	push   ebx
c0008e37:	e8 6e fc ff ff       	call   c0008aaa <VgaText::puts(char const*)>
c0008e3c:	83 c4 10             	add    esp,0x10
c0008e3f:	83 ec 0c             	sub    esp,0xc
c0008e42:	56                   	push   esi
c0008e43:	e8 28 77 ff ff       	call   c0000570 <strlen>
c0008e48:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e50:	e9 a0 00 00 00       	jmp    c0008ef5 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e55:	83 ec 0c             	sub    esp,0xc
c0008e58:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5e:	50                   	push   eax
c0008e5f:	e8 0c 77 ff ff       	call   c0000570 <strlen>
c0008e64:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e67:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e6b:	e8 00 77 ff ff       	call   c0000570 <strlen>
c0008e70:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e7b:	3d 80 00 00 00       	cmp    eax,0x80
c0008e80:	0f 87 b7 00 00 00    	ja     c0008f3d <VgaText::receiveKey(unsigned char)+0x183>
c0008e86:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e89:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e8c:	3c 1e                	cmp    al,0x1e
c0008e8e:	0f 96 c0             	setbe  al
c0008e91:	80 fa 01             	cmp    dl,0x1
c0008e94:	0f 97 c2             	seta   dl
c0008e97:	0f b6 d2             	movzx  edx,dl
c0008e9a:	85 c2                	test   edx,eax
c0008e9c:	74 2e                	je     c0008ecc <VgaText::receiveKey(unsigned char)+0x112>
c0008e9e:	83 ff 0d             	cmp    edi,0xd
c0008ea1:	74 29                	je     c0008ecc <VgaText::receiveKey(unsigned char)+0x112>
c0008ea3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea9:	68 7d 0f 02 c0       	push   0xc0020f7d
c0008eae:	53                   	push   ebx
c0008eaf:	e8 68 fc ff ff       	call   c0008b1c <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb7:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eba:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ebd:	0f b6 c0             	movzx  eax,al
c0008ec0:	50                   	push   eax
c0008ec1:	53                   	push   ebx
c0008ec2:	e8 d5 f9 ff ff       	call   c000889c <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec7:	83 c4 20             	add    esp,0x20
c0008eca:	eb 11                	jmp    c0008edd <VgaText::receiveKey(unsigned char)+0x123>
c0008ecc:	89 e8                	mov    eax,ebp
c0008ece:	51                   	push   ecx
c0008ecf:	0f be c0             	movsx  eax,al
c0008ed2:	51                   	push   ecx
c0008ed3:	50                   	push   eax
c0008ed4:	53                   	push   ebx
c0008ed5:	e8 92 fa ff ff       	call   c000896c <VgaText::putchar(char)>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ee2:	89 e8                	mov    eax,ebp
c0008ee4:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee8:	52                   	push   edx
c0008ee9:	52                   	push   edx
c0008eea:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eee:	50                   	push   eax
c0008eef:	56                   	push   esi
c0008ef0:	e8 4b 79 ff ff       	call   c0000840 <strcat>
c0008ef5:	83 c4 10             	add    esp,0x10
c0008ef8:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efe:	b0 01                	mov    al,0x1
c0008f00:	83 ff 1c             	cmp    edi,0x1c
c0008f03:	77 0e                	ja     c0008f13 <VgaText::receiveKey(unsigned char)+0x159>
c0008f05:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f0a:	89 f9                	mov    ecx,edi
c0008f0c:	d3 e8                	shr    eax,cl
c0008f0e:	f7 d0                	not    eax
c0008f10:	83 e0 01             	and    eax,0x1
c0008f13:	84 c0                	test   al,al
c0008f15:	74 04                	je     c0008f1b <VgaText::receiveKey(unsigned char)+0x161>
c0008f17:	84 d2                	test   dl,dl
c0008f19:	74 22                	je     c0008f3d <VgaText::receiveKey(unsigned char)+0x183>
c0008f1b:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f21:	50                   	push   eax
c0008f22:	50                   	push   eax
c0008f23:	56                   	push   esi
c0008f24:	53                   	push   ebx
c0008f25:	e8 16 79 ff ff       	call   c0000840 <strcat>
c0008f2a:	83 c4 0c             	add    esp,0xc
c0008f2d:	68 80 00 00 00       	push   0x80
c0008f32:	6a 00                	push   0x0
c0008f34:	56                   	push   esi
c0008f35:	e8 b6 75 ff ff       	call   c00004f0 <memset>
c0008f3a:	83 c4 10             	add    esp,0x10
c0008f3d:	83 c4 2c             	add    esp,0x2c
c0008f40:	5b                   	pop    ebx
c0008f41:	5e                   	pop    esi
c0008f42:	5f                   	pop    edi
c0008f43:	5d                   	pop    ebp
c0008f44:	c3                   	ret    
c0008f45:	90                   	nop

c0008f46 <VgaText::doUpdate()>:
c0008f46:	c3                   	ret    
c0008f47:	90                   	nop

c0008f48 <TSS::TSS()>:
c0008f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f53:	90                   	nop
c0008f54:	c3                   	ret    
c0008f55:	90                   	nop
c0008f56:	66 90                	xchg   ax,ax

c0008f58 <TSS::setESP(unsigned long)>:
c0008f58:	55                   	push   ebp
c0008f59:	89 e5                	mov    ebp,esp
c0008f5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f61:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f64:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f67:	90                   	nop
c0008f68:	5d                   	pop    ebp
c0008f69:	c3                   	ret    
c0008f6a:	66 90                	xchg   ax,ax

c0008f6c <TSS::flush()>:
c0008f6c:	55                   	push   ebp
c0008f6d:	89 e5                	mov    ebp,esp
c0008f6f:	83 ec 10             	sub    esp,0x10
c0008f72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f75:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f77:	83 c8 03             	or     eax,0x3
c0008f7a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f82:	66 89 d0             	mov    ax,dx
c0008f85:	0f 00 d8             	ltr    ax
c0008f88:	90                   	nop
c0008f89:	c9                   	leave  
c0008f8a:	c3                   	ret    
c0008f8b:	90                   	nop

c0008f8c <TSS::setup(unsigned long, unsigned long)>:
c0008f8c:	55                   	push   ebp
c0008f8d:	89 e5                	mov    ebp,esp
c0008f8f:	83 ec 18             	sub    esp,0x18
c0008f92:	83 ec 0c             	sub    esp,0xc
c0008f95:	6a 68                	push   0x68
c0008f97:	e8 1e eb ff ff       	call   c0007aba <malloc>
c0008f9c:	83 c4 10             	add    esp,0x10
c0008f9f:	89 c2                	mov    edx,eax
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008faa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fad:	83 ec 04             	sub    esp,0x4
c0008fb0:	6a 68                	push   0x68
c0008fb2:	6a 00                	push   0x0
c0008fb4:	50                   	push   eax
c0008fb5:	e8 36 75 ff ff       	call   c00004f0 <memset>
c0008fba:	83 c4 10             	add    esp,0x10
c0008fbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fc3:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcf:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fdb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fde:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe7:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ff3:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ffc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fff:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000900b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0009011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009017:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000901d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009023:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000902c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009032:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000903b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009044:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009047:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009051:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009054:	0f 20 da             	mov    edx,cr3
c0009057:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000905a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000905d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009060:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009063:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009066:	83 ec 08             	sub    esp,0x8
c0009069:	50                   	push   eax
c000906a:	8d 45 ec             	lea    eax,[ebp-0x14]
c000906d:	50                   	push   eax
c000906e:	e8 b3 e2 ff ff       	call   c0007326 <GDTEntry::setBase(unsigned int)>
c0009073:	83 c4 10             	add    esp,0x10
c0009076:	83 ec 08             	sub    esp,0x8
c0009079:	6a 68                	push   0x68
c000907b:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907e:	50                   	push   eax
c000907f:	e8 be e2 ff ff       	call   c0007342 <GDTEntry::setLimit(unsigned int)>
c0009084:	83 c4 10             	add    esp,0x10
c0009087:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000908b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908e:	83 e0 0f             	and    eax,0xf
c0009091:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009094:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009097:	83 c8 40             	or     eax,0x40
c000909a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000909d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a8:	05 78 01 00 00       	add    eax,0x178
c00090ad:	83 ec 04             	sub    esp,0x4
c00090b0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090b3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b6:	50                   	push   eax
c00090b7:	e8 ba e2 ff ff       	call   c0007376 <GDT::addEntry(GDTEntry)>
c00090bc:	83 c4 10             	add    esp,0x10
c00090bf:	89 c2                	mov    edx,eax
c00090c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c4:	89 10                	mov    DWORD PTR [eax],edx
c00090c6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090cb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090d1:	05 78 01 00 00       	add    eax,0x178
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	50                   	push   eax
c00090da:	e8 c1 e2 ff ff       	call   c00073a0 <GDT::flush()>
c00090df:	83 c4 10             	add    esp,0x10
c00090e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e7:	c9                   	leave  
c00090e8:	c3                   	ret    
c00090e9:	90                   	nop

c00090ea <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090fa:	75 08                	jne    c0009104 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090fc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009102:	eb 38                	jmp    c000913c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009104:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009109:	75 17                	jne    c0009122 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000910b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009110:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009113:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009119:	8b 10                	mov    edx,DWORD PTR [eax]
c000911b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009122:	89 c1                	mov    ecx,eax
c0009124:	83 e1 fd             	and    ecx,0xfffffffd
c0009127:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000912d:	74 cd                	je     c00090fc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009134:	83 e0 ef             	and    eax,0xffffffef
c0009137:	83 f8 08             	cmp    eax,0x8
c000913a:	76 c0                	jbe    c00090fc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000913c:	31 c0                	xor    eax,eax
c000913e:	c3                   	ret    
c000913f:	90                   	nop

c0009140 <ReservedFilename::isAtty()>:
c0009140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009144:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009147:	31 c0                	xor    eax,eax
c0009149:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914f:	74 09                	je     c000915a <ReservedFilename::isAtty()+0x1a>
c0009151:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009157:	0f 94 c0             	sete   al
c000915a:	c3                   	ret    
c000915b:	90                   	nop

c000915c <ReservedFilename::write(unsigned long long, void*, int*)>:
c000915c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009160:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009164:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009167:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000916b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009170:	75 08                	jne    c000917a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009172:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009178:	eb 3d                	jmp    c00091b7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000917a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917f:	75 17                	jne    c0009198 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009181:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009186:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009189:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009191:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009195:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009198:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000919d:	75 04                	jne    c00091a3 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919f:	89 0a                	mov    DWORD PTR [edx],ecx
c00091a1:	eb 14                	jmp    c00091b7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091a3:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a8:	74 c8                	je     c0009172 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091aa:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091af:	83 e0 ef             	and    eax,0xffffffef
c00091b2:	83 f8 08             	cmp    eax,0x8
c00091b5:	76 bb                	jbe    c0009172 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b7:	31 c0                	xor    eax,eax
c00091b9:	c3                   	ret    

c00091ba <UnixFile::getFileDescriptor()>:
c00091ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091c1:	c3                   	ret    

c00091c2 <UnixFile::UnixFile(int)>:
c00091c2:	53                   	push   ebx
c00091c3:	83 ec 28             	sub    esp,0x28
c00091c6:	ba 54 10 02 c0       	mov    edx,0xc0021054
c00091cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cf:	89 10                	mov    DWORD PTR [eax],edx
c00091d1:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d9:	0f 8f 90 01 00 00    	jg     c000936f <UnixFile::UnixFile(int)+0x1ad>
c00091df:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c00091e4:	8d 50 01             	lea    edx,[eax+0x1]
c00091e7:	89 15 40 38 02 c0    	mov    DWORD PTR ds:0xc0023840,edx
c00091ed:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091f1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f4:	83 ec 08             	sub    esp,0x8
c00091f7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091fb:	68 98 6f 02 c0       	push   0xc0026f98
c0009200:	e8 03 69 01 00       	call   c001fb08 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009205:	83 c4 10             	add    esp,0x10
c0009208:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c000920d:	83 f0 01             	xor    eax,0x1
c0009210:	0f b6 c0             	movzx  eax,al
c0009213:	85 c0                	test   eax,eax
c0009215:	0f 84 55 01 00 00    	je     c0009370 <UnixFile::UnixFile(int)+0x1ae>
c000921b:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c0009222:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000922a:	83 ec 0c             	sub    esp,0xc
c000922d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009231:	e8 84 e8 ff ff       	call   c0007aba <malloc>
c0009236:	83 c4 10             	add    esp,0x10
c0009239:	89 c3                	mov    ebx,eax
c000923b:	83 ec 08             	sub    esp,0x8
c000923e:	68 03 ff ff 0f       	push   0xfffff03
c0009243:	53                   	push   ebx
c0009244:	e8 2d 01 00 00       	call   c0009376 <ReservedFilename::ReservedFilename(int)>
c0009249:	83 c4 10             	add    esp,0x10
c000924c:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c0009252:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000925a:	83 ec 0c             	sub    esp,0xc
c000925d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009261:	e8 54 e8 ff ff       	call   c0007aba <malloc>
c0009266:	83 c4 10             	add    esp,0x10
c0009269:	89 c3                	mov    ebx,eax
c000926b:	83 ec 08             	sub    esp,0x8
c000926e:	68 01 ff ff 0f       	push   0xfffff01
c0009273:	53                   	push   ebx
c0009274:	e8 fd 00 00 00       	call   c0009376 <ReservedFilename::ReservedFilename(int)>
c0009279:	83 c4 10             	add    esp,0x10
c000927c:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c0009282:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000928a:	83 ec 0c             	sub    esp,0xc
c000928d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009291:	e8 24 e8 ff ff       	call   c0007aba <malloc>
c0009296:	83 c4 10             	add    esp,0x10
c0009299:	89 c3                	mov    ebx,eax
c000929b:	83 ec 08             	sub    esp,0x8
c000929e:	68 00 ff ff 0f       	push   0xfffff00
c00092a3:	53                   	push   ebx
c00092a4:	e8 cd 00 00 00       	call   c0009376 <ReservedFilename::ReservedFilename(int)>
c00092a9:	83 c4 10             	add    esp,0x10
c00092ac:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c00092b2:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092ba:	83 ec 0c             	sub    esp,0xc
c00092bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c1:	e8 f4 e7 ff ff       	call   c0007aba <malloc>
c00092c6:	83 c4 10             	add    esp,0x10
c00092c9:	89 c3                	mov    ebx,eax
c00092cb:	83 ec 08             	sub    esp,0x8
c00092ce:	68 02 ff ff 0f       	push   0xfffff02
c00092d3:	53                   	push   ebx
c00092d4:	e8 9d 00 00 00       	call   c0009376 <ReservedFilename::ReservedFilename(int)>
c00092d9:	83 c4 10             	add    esp,0x10
c00092dc:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092e2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ea:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092ef:	7f 7f                	jg     c0009370 <UnixFile::UnixFile(int)+0x1ae>
c00092f1:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f9:	83 ec 0c             	sub    esp,0xc
c00092fc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009300:	e8 b5 e7 ff ff       	call   c0007aba <malloc>
c0009305:	83 c4 10             	add    esp,0x10
c0009308:	89 c3                	mov    ebx,eax
c000930a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930e:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009313:	83 ec 08             	sub    esp,0x8
c0009316:	50                   	push   eax
c0009317:	53                   	push   ebx
c0009318:	e8 59 00 00 00       	call   c0009376 <ReservedFilename::ReservedFilename(int)>
c000931d:	83 c4 10             	add    esp,0x10
c0009320:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009324:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c000932b:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009333:	83 ec 0c             	sub    esp,0xc
c0009336:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000933a:	e8 7b e7 ff ff       	call   c0007aba <malloc>
c000933f:	83 c4 10             	add    esp,0x10
c0009342:	89 c3                	mov    ebx,eax
c0009344:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009348:	05 20 ff ff 0f       	add    eax,0xfffff20
c000934d:	83 ec 08             	sub    esp,0x8
c0009350:	50                   	push   eax
c0009351:	53                   	push   ebx
c0009352:	e8 1f 00 00 00       	call   c0009376 <ReservedFilename::ReservedFilename(int)>
c0009357:	83 c4 10             	add    esp,0x10
c000935a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935e:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009365:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000936a:	e9 7b ff ff ff       	jmp    c00092ea <UnixFile::UnixFile(int)+0x128>
c000936f:	90                   	nop
c0009370:	83 c4 28             	add    esp,0x28
c0009373:	5b                   	pop    ebx
c0009374:	c3                   	ret    
c0009375:	90                   	nop

c0009376 <ReservedFilename::ReservedFilename(int)>:
c0009376:	83 ec 0c             	sub    esp,0xc
c0009379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937d:	83 ec 08             	sub    esp,0x8
c0009380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009384:	50                   	push   eax
c0009385:	e8 38 fe ff ff       	call   c00091c2 <UnixFile::UnixFile(int)>
c000938a:	83 c4 10             	add    esp,0x10
c000938d:	ba 70 10 02 c0       	mov    edx,0xc0021070
c0009392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009396:	89 10                	mov    DWORD PTR [eax],edx
c0009398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000939c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00093a0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00093a3:	90                   	nop
c00093a4:	83 c4 0c             	add    esp,0xc
c00093a7:	c3                   	ret    

c00093a8 <UnixFile::~UnixFile()>:
c00093a8:	83 ec 1c             	sub    esp,0x1c
c00093ab:	ba 54 10 02 c0       	mov    edx,0xc0021054
c00093b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b4:	89 10                	mov    DWORD PTR [eax],edx
c00093b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093bd:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093c2:	7f 76                	jg     c000943a <UnixFile::~UnixFile()+0x92>
c00093c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093cc:	83 ec 0c             	sub    esp,0xc
c00093cf:	68 98 6f 02 c0       	push   0xc0026f98
c00093d4:	e8 03 68 01 00       	call   c001fbdc <LinkedList<UnixFile>::getFirstElement()>
c00093d9:	83 c4 10             	add    esp,0x10
c00093dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093e0:	83 ec 0c             	sub    esp,0xc
c00093e3:	68 98 6f 02 c0       	push   0xc0026f98
c00093e8:	e8 f7 67 01 00       	call   c001fbe4 <LinkedList<UnixFile>::removeFirst()>
c00093ed:	83 c4 10             	add    esp,0x10
c00093f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f8:	74 43                	je     c000943d <UnixFile::~UnixFile()+0x95>
c00093fa:	83 ec 08             	sub    esp,0x8
c00093fd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009401:	68 98 6f 02 c0       	push   0xc0026f98
c0009406:	e8 fd 66 01 00       	call   c001fb08 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000940b:	83 c4 10             	add    esp,0x10
c000940e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009412:	8d 50 01             	lea    edx,[eax+0x1]
c0009415:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009419:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941e:	0f 94 c0             	sete   al
c0009421:	0f b6 c0             	movzx  eax,al
c0009424:	85 c0                	test   eax,eax
c0009426:	74 a4                	je     c00093cc <UnixFile::~UnixFile()+0x24>
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	68 2c 10 02 c0       	push   0xc002102c
c0009430:	e8 8e 82 00 00       	call   c00116c3 <KePanic(char const*)>
c0009435:	83 c4 10             	add    esp,0x10
c0009438:	eb 92                	jmp    c00093cc <UnixFile::~UnixFile()+0x24>
c000943a:	90                   	nop
c000943b:	eb 01                	jmp    c000943e <UnixFile::~UnixFile()+0x96>
c000943d:	90                   	nop
c000943e:	90                   	nop
c000943f:	83 c4 1c             	add    esp,0x1c
c0009442:	c3                   	ret    
c0009443:	90                   	nop

c0009444 <UnixFile::~UnixFile()>:
c0009444:	83 ec 0c             	sub    esp,0xc
c0009447:	83 ec 0c             	sub    esp,0xc
c000944a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944e:	e8 55 ff ff ff       	call   c00093a8 <UnixFile::~UnixFile()>
c0009453:	83 c4 10             	add    esp,0x10
c0009456:	83 ec 08             	sub    esp,0x8
c0009459:	6a 0c                	push   0xc
c000945b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945f:	e8 b8 13 00 00       	call   c000a81c <operator delete(void*, unsigned long)>
c0009464:	83 c4 10             	add    esp,0x10
c0009467:	83 c4 0c             	add    esp,0xc
c000946a:	c3                   	ret    
c000946b:	90                   	nop

c000946c <ReservedFilename::~ReservedFilename()>:
c000946c:	83 ec 0c             	sub    esp,0xc
c000946f:	ba 70 10 02 c0       	mov    edx,0xc0021070
c0009474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009478:	89 10                	mov    DWORD PTR [eax],edx
c000947a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947e:	83 ec 0c             	sub    esp,0xc
c0009481:	50                   	push   eax
c0009482:	e8 21 ff ff ff       	call   c00093a8 <UnixFile::~UnixFile()>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	90                   	nop
c000948b:	83 c4 0c             	add    esp,0xc
c000948e:	c3                   	ret    
c000948f:	90                   	nop

c0009490 <ReservedFilename::~ReservedFilename()>:
c0009490:	83 ec 0c             	sub    esp,0xc
c0009493:	83 ec 0c             	sub    esp,0xc
c0009496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000949a:	e8 cd ff ff ff       	call   c000946c <ReservedFilename::~ReservedFilename()>
c000949f:	83 c4 10             	add    esp,0x10
c00094a2:	83 ec 08             	sub    esp,0x8
c00094a5:	6a 0c                	push   0xc
c00094a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094ab:	e8 6c 13 00 00       	call   c000a81c <operator delete(void*, unsigned long)>
c00094b0:	83 c4 10             	add    esp,0x10
c00094b3:	83 c4 0c             	add    esp,0xc
c00094b6:	c3                   	ret    

c00094b7 <KeGetFileFromDescriptor(int)>:
c00094b7:	53                   	push   ebx
c00094b8:	83 ec 08             	sub    esp,0x8
c00094bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bf:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c5:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094cb:	7f 2c                	jg     c00094f9 <KeGetFileFromDescriptor(int)+0x42>
c00094cd:	83 ec 0c             	sub    esp,0xc
c00094d0:	68 98 6f 02 c0       	push   0xc0026f98
c00094d5:	e8 02 67 01 00       	call   c001fbdc <LinkedList<UnixFile>::getFirstElement()>
c00094da:	83 c4 10             	add    esp,0x10
c00094dd:	85 c0                	test   eax,eax
c00094df:	75 04                	jne    c00094e5 <KeGetFileFromDescriptor(int)+0x2e>
c00094e1:	31 c0                	xor    eax,eax
c00094e3:	eb 6e                	jmp    c0009553 <KeGetFileFromDescriptor(int)+0x9c>
c00094e5:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e8:	74 69                	je     c0009553 <KeGetFileFromDescriptor(int)+0x9c>
c00094ea:	52                   	push   edx
c00094eb:	52                   	push   edx
c00094ec:	50                   	push   eax
c00094ed:	68 98 6f 02 c0       	push   0xc0026f98
c00094f2:	e8 8f 67 01 00       	call   c001fc86 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f7:	eb e1                	jmp    c00094da <KeGetFileFromDescriptor(int)+0x23>
c00094f9:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c00094fe:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009504:	74 4d                	je     c0009553 <KeGetFileFromDescriptor(int)+0x9c>
c0009506:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c000950b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009511:	74 40                	je     c0009553 <KeGetFileFromDescriptor(int)+0x9c>
c0009513:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009518:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951e:	74 33                	je     c0009553 <KeGetFileFromDescriptor(int)+0x9c>
c0009520:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c0009525:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000952b:	74 26                	je     c0009553 <KeGetFileFromDescriptor(int)+0x9c>
c000952d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009533:	83 f8 08             	cmp    eax,0x8
c0009536:	77 09                	ja     c0009541 <KeGetFileFromDescriptor(int)+0x8a>
c0009538:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c000953f:	eb 12                	jmp    c0009553 <KeGetFileFromDescriptor(int)+0x9c>
c0009541:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009547:	83 fb 08             	cmp    ebx,0x8
c000954a:	77 95                	ja     c00094e1 <KeGetFileFromDescriptor(int)+0x2a>
c000954c:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c0009553:	83 c4 08             	add    esp,0x8
c0009556:	5b                   	pop    ebx
c0009557:	c3                   	ret    

c0009558 <__static_initialization_and_destruction_0(int, int)>:
c0009558:	83 ec 0c             	sub    esp,0xc
c000955b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009560:	75 34                	jne    c0009596 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009562:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000956a:	75 2a                	jne    c0009596 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000956c:	83 ec 0c             	sub    esp,0xc
c000956f:	68 98 6f 02 c0       	push   0xc0026f98
c0009574:	e8 4d 65 01 00       	call   c001fac6 <LinkedList<UnixFile>::LinkedList()>
c0009579:	83 c4 10             	add    esp,0x10
c000957c:	83 ec 04             	sub    esp,0x4
c000957f:	68 c4 37 02 c0       	push   0xc00237c4
c0009584:	68 98 6f 02 c0       	push   0xc0026f98
c0009589:	68 c4 fa 01 c0       	push   0xc001fac4
c000958e:	e8 39 12 00 00       	call   c000a7cc <__cxa_atexit>
c0009593:	83 c4 10             	add    esp,0x10
c0009596:	90                   	nop
c0009597:	83 c4 0c             	add    esp,0xc
c000959a:	c3                   	ret    

c000959b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000959b:	83 ec 0c             	sub    esp,0xc
c000959e:	83 ec 08             	sub    esp,0x8
c00095a1:	68 ff ff 00 00       	push   0xffff
c00095a6:	6a 01                	push   0x1
c00095a8:	e8 ab ff ff ff       	call   c0009558 <__static_initialization_and_destruction_0(int, int)>
c00095ad:	83 c4 10             	add    esp,0x10
c00095b0:	83 c4 0c             	add    esp,0xc
c00095b3:	c3                   	ret    

c00095b4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b4:	53                   	push   ebx
c00095b5:	8b 15 48 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023848
c00095bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095c3:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c9:	89 d8                	mov    eax,ebx
c00095cb:	d1 e8                	shr    eax,1
c00095cd:	01 d0                	add    eax,edx
c00095cf:	80 e3 01             	and    bl,0x1
c00095d2:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d4:	75 09                	jne    c00095df <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d6:	83 e2 f0             	and    edx,0xfffffff0
c00095d9:	09 ca                	or     edx,ecx
c00095db:	88 10                	mov    BYTE PTR [eax],dl
c00095dd:	5b                   	pop    ebx
c00095de:	c3                   	ret    
c00095df:	83 e2 0f             	and    edx,0xf
c00095e2:	0f b6 c9             	movzx  ecx,cl
c00095e5:	c1 e1 04             	shl    ecx,0x4
c00095e8:	09 ca                	or     edx,ecx
c00095ea:	88 10                	mov    BYTE PTR [eax],dl
c00095ec:	5b                   	pop    ebx
c00095ed:	c3                   	ret    

c00095ee <Virt::getPageState(unsigned long)>:
c00095ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095f2:	8b 0d 48 38 02 c0    	mov    ecx,DWORD PTR ds:0xc0023848
c00095f8:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fe:	89 d0                	mov    eax,edx
c0009600:	d1 e8                	shr    eax,1
c0009602:	80 e2 01             	and    dl,0x1
c0009605:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009608:	74 03                	je     c000960d <Virt::getPageState(unsigned long)+0x1f>
c000960a:	c1 e8 04             	shr    eax,0x4
c000960d:	83 e0 0f             	and    eax,0xf
c0009610:	c3                   	ret    

c0009611 <Virt::allocateKernelVirtualPages(int)>:
c0009611:	55                   	push   ebp
c0009612:	31 ed                	xor    ebp,ebp
c0009614:	57                   	push   edi
c0009615:	31 ff                	xor    edi,edi
c0009617:	56                   	push   esi
c0009618:	53                   	push   ebx
c0009619:	31 db                	xor    ebx,ebx
c000961b:	83 ec 0c             	sub    esp,0xc
c000961e:	8b 35 44 38 02 c0    	mov    esi,DWORD PTR ds:0xc0023844
c0009624:	56                   	push   esi
c0009625:	e8 c4 ff ff ff       	call   c00095ee <Virt::getPageState(unsigned long)>
c000962a:	5a                   	pop    edx
c000962b:	84 c0                	test   al,al
c000962d:	75 41                	jne    c0009670 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962f:	85 db                	test   ebx,ebx
c0009631:	75 02                	jne    c0009635 <Virt::allocateKernelVirtualPages(int)+0x24>
c0009633:	89 f5                	mov    ebp,esi
c0009635:	83 c3 01             	add    ebx,0x1
c0009638:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000963c:	74 5f                	je     c000969d <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963e:	83 c6 01             	add    esi,0x1
c0009641:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009647:	76 34                	jbe    c000967d <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009649:	c7 05 44 38 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023844,0xc8000
c0009653:	f7 c7 01 00 00 00    	test   edi,0x1
c0009659:	75 2a                	jne    c0009685 <Virt::allocateKernelVirtualPages(int)+0x74>
c000965b:	be 00 80 0c 00       	mov    esi,0xc8000
c0009660:	bf 01 00 00 00       	mov    edi,0x1
c0009665:	56                   	push   esi
c0009666:	e8 83 ff ff ff       	call   c00095ee <Virt::getPageState(unsigned long)>
c000966b:	5a                   	pop    edx
c000966c:	84 c0                	test   al,al
c000966e:	74 bf                	je     c000962f <Virt::allocateKernelVirtualPages(int)+0x1e>
c0009670:	31 db                	xor    ebx,ebx
c0009672:	83 c6 01             	add    esi,0x1
c0009675:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c000967b:	77 cc                	ja     c0009649 <Virt::allocateKernelVirtualPages(int)+0x38>
c000967d:	89 35 44 38 02 c0    	mov    DWORD PTR ds:0xc0023844,esi
c0009683:	eb 9f                	jmp    c0009624 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009685:	83 ec 0c             	sub    esp,0xc
c0009688:	68 84 10 02 c0       	push   0xc0021084
c000968d:	e8 31 80 00 00       	call   c00116c3 <KePanic(char const*)>
c0009692:	8b 35 44 38 02 c0    	mov    esi,DWORD PTR ds:0xc0023844
c0009698:	83 c4 10             	add    esp,0x10
c000969b:	eb 87                	jmp    c0009624 <Virt::allocateKernelVirtualPages(int)+0x13>
c000969d:	89 2d 44 38 02 c0    	mov    DWORD PTR ds:0xc0023844,ebp
c00096a3:	83 fb 01             	cmp    ebx,0x1
c00096a6:	74 6f                	je     c0009717 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096ac:	85 c9                	test   ecx,ecx
c00096ae:	74 49                	je     c00096f9 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096b0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b4:	89 e8                	mov    eax,ebp
c00096b6:	31 db                	xor    ebx,ebx
c00096b8:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096bb:	eb 18                	jmp    c00096d5 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096bd:	6a 01                	push   0x1
c00096bf:	83 c3 01             	add    ebx,0x1
c00096c2:	50                   	push   eax
c00096c3:	e8 ec fe ff ff       	call   c00095b4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c8:	58                   	pop    eax
c00096c9:	5a                   	pop    edx
c00096ca:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ce:	74 29                	je     c00096f9 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096d0:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c00096d5:	8d 50 01             	lea    edx,[eax+0x1]
c00096d8:	85 db                	test   ebx,ebx
c00096da:	89 15 44 38 02 c0    	mov    DWORD PTR ds:0xc0023844,edx
c00096e0:	74 24                	je     c0009706 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096e2:	39 df                	cmp    edi,ebx
c00096e4:	75 d7                	jne    c00096bd <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e6:	6a 03                	push   0x3
c00096e8:	83 c3 01             	add    ebx,0x1
c00096eb:	50                   	push   eax
c00096ec:	e8 c3 fe ff ff       	call   c00095b4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096f1:	59                   	pop    ecx
c00096f2:	5e                   	pop    esi
c00096f3:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f7:	75 d7                	jne    c00096d0 <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f9:	83 c4 0c             	add    esp,0xc
c00096fc:	89 e8                	mov    eax,ebp
c00096fe:	5b                   	pop    ebx
c00096ff:	c1 e0 0c             	shl    eax,0xc
c0009702:	5e                   	pop    esi
c0009703:	5f                   	pop    edi
c0009704:	5d                   	pop    ebp
c0009705:	c3                   	ret    
c0009706:	6a 02                	push   0x2
c0009708:	bb 01 00 00 00       	mov    ebx,0x1
c000970d:	50                   	push   eax
c000970e:	e8 a1 fe ff ff       	call   c00095b4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009713:	58                   	pop    eax
c0009714:	5a                   	pop    edx
c0009715:	eb b9                	jmp    c00096d0 <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009717:	6a 04                	push   0x4
c0009719:	8d 45 01             	lea    eax,[ebp+0x1]
c000971c:	55                   	push   ebp
c000971d:	a3 44 38 02 c0       	mov    ds:0xc0023844,eax
c0009722:	e8 8d fe ff ff       	call   c00095b4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009727:	5b                   	pop    ebx
c0009728:	89 e8                	mov    eax,ebp
c000972a:	5e                   	pop    esi
c000972b:	c1 e0 0c             	shl    eax,0xc
c000972e:	83 c4 0c             	add    esp,0xc
c0009731:	5b                   	pop    ebx
c0009732:	5e                   	pop    esi
c0009733:	5f                   	pop    edi
c0009734:	5d                   	pop    ebp
c0009735:	c3                   	ret    

c0009736 <Virt::freeSwapfilePage(unsigned long)>:
c0009736:	53                   	push   ebx
c0009737:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c000973d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009741:	b8 01 00 00 00       	mov    eax,0x1
c0009746:	89 cb                	mov    ebx,ecx
c0009748:	d3 e0                	shl    eax,cl
c000974a:	c1 eb 05             	shr    ebx,0x5
c000974d:	f7 d0                	not    eax
c000974f:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0009752:	21 c1                	and    ecx,eax
c0009754:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009757:	5b                   	pop    ebx
c0009758:	c3                   	ret    

c0009759 <Virt::swapIDToSector(unsigned long)>:
c0009759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000975d:	8b 15 4c 38 02 c0    	mov    edx,DWORD PTR ds:0xc002384c
c0009763:	8b 0d 54 38 02 c0    	mov    ecx,DWORD PTR ds:0xc0023854
c0009769:	0f af c2             	imul   eax,edx
c000976c:	01 c8                	add    eax,ecx
c000976e:	c3                   	ret    

c000976f <Virt::allocateSwapfilePage()>:
c000976f:	55                   	push   ebp
c0009770:	31 d2                	xor    edx,edx
c0009772:	57                   	push   edi
c0009773:	56                   	push   esi
c0009774:	53                   	push   ebx
c0009775:	83 ec 0c             	sub    esp,0xc
c0009778:	8b 0d 4c 38 02 c0    	mov    ecx,DWORD PTR ds:0xc002384c
c000977e:	a1 50 38 02 c0       	mov    eax,ds:0xc0023850
c0009783:	f7 f1                	div    ecx
c0009785:	39 0d 50 38 02 c0    	cmp    DWORD PTR ds:0xc0023850,ecx
c000978b:	72 2f                	jb     c00097bc <Virt::allocateSwapfilePage()+0x4d>
c000978d:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c0009793:	8b 16                	mov    edx,DWORD PTR [esi]
c0009795:	f6 c2 01             	test   dl,0x1
c0009798:	74 3e                	je     c00097d8 <Virt::allocateSwapfilePage()+0x69>
c000979a:	31 c9                	xor    ecx,ecx
c000979c:	bf 01 00 00 00       	mov    edi,0x1
c00097a1:	eb 12                	jmp    c00097b5 <Virt::allocateSwapfilePage()+0x46>
c00097a3:	89 fd                	mov    ebp,edi
c00097a5:	89 ca                	mov    edx,ecx
c00097a7:	d3 e5                	shl    ebp,cl
c00097a9:	c1 ea 05             	shr    edx,0x5
c00097ac:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097af:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097b1:	85 ea                	test   edx,ebp
c00097b3:	74 2c                	je     c00097e1 <Virt::allocateSwapfilePage()+0x72>
c00097b5:	83 c1 01             	add    ecx,0x1
c00097b8:	39 c8                	cmp    eax,ecx
c00097ba:	77 e7                	ja     c00097a3 <Virt::allocateSwapfilePage()+0x34>
c00097bc:	83 ec 0c             	sub    esp,0xc
c00097bf:	68 18 13 02 c0       	push   0xc0021318
c00097c4:	e8 fa 7e 00 00       	call   c00116c3 <KePanic(char const*)>
c00097c9:	83 c4 10             	add    esp,0x10
c00097cc:	31 c9                	xor    ecx,ecx
c00097ce:	83 c4 0c             	add    esp,0xc
c00097d1:	89 c8                	mov    eax,ecx
c00097d3:	5b                   	pop    ebx
c00097d4:	5e                   	pop    esi
c00097d5:	5f                   	pop    edi
c00097d6:	5d                   	pop    ebp
c00097d7:	c3                   	ret    
c00097d8:	89 f3                	mov    ebx,esi
c00097da:	bd 01 00 00 00       	mov    ebp,0x1
c00097df:	31 c9                	xor    ecx,ecx
c00097e1:	09 ea                	or     edx,ebp
c00097e3:	89 c8                	mov    eax,ecx
c00097e5:	89 13                	mov    DWORD PTR [ebx],edx
c00097e7:	83 c4 0c             	add    esp,0xc
c00097ea:	5b                   	pop    ebx
c00097eb:	5e                   	pop    esi
c00097ec:	5f                   	pop    edi
c00097ed:	5d                   	pop    ebp
c00097ee:	c3                   	ret    

c00097ef <Virt::virtualMemorySetup()>:
c00097ef:	53                   	push   ebx
c00097f0:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f5:	6a 0f                	push   0xf
c00097f7:	53                   	push   ebx
c00097f8:	83 c3 01             	add    ebx,0x1
c00097fb:	e8 b4 fd ff ff       	call   c00095b4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009800:	58                   	pop    eax
c0009801:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009807:	5a                   	pop    edx
c0009808:	75 eb                	jne    c00097f5 <Virt::virtualMemorySetup()+0x6>
c000980a:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980f:	6a 00                	push   0x0
c0009811:	53                   	push   ebx
c0009812:	83 c3 01             	add    ebx,0x1
c0009815:	e8 9a fd ff ff       	call   c00095b4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000981a:	59                   	pop    ecx
c000981b:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009821:	58                   	pop    eax
c0009822:	75 eb                	jne    c000980f <Virt::virtualMemorySetup()+0x20>
c0009824:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009829:	6a 0f                	push   0xf
c000982b:	53                   	push   ebx
c000982c:	83 c3 01             	add    ebx,0x1
c000982f:	e8 80 fd ff ff       	call   c00095b4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009834:	58                   	pop    eax
c0009835:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000983b:	5a                   	pop    edx
c000983c:	75 eb                	jne    c0009829 <Virt::virtualMemorySetup()+0x3a>
c000983e:	5b                   	pop    ebx
c000983f:	c3                   	ret    

c0009840 <Virt::setupPageSwapping(int)>:
c0009840:	53                   	push   ebx
c0009841:	83 ec 0c             	sub    esp,0xc
c0009844:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009848:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c000984d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0009853:	8b 10                	mov    edx,DWORD PTR [eax]
c0009855:	53                   	push   ebx
c0009856:	c1 e3 0b             	shl    ebx,0xb
c0009859:	68 2f 13 02 c0       	push   0xc002132f
c000985e:	50                   	push   eax
c000985f:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009862:	89 1d 50 38 02 c0    	mov    DWORD PTR ds:0xc0023850,ebx
c0009868:	c6 05 58 38 02 c0 43 	mov    BYTE PTR ds:0xc0023858,0x43
c000986f:	c1 eb 08             	shr    ebx,0x8
c0009872:	a3 54 38 02 c0       	mov    ds:0xc0023854,eax
c0009877:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000987a:	c7 05 4c 38 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002384c,0x8
c0009884:	e8 31 e2 ff ff       	call   c0007aba <malloc>
c0009889:	83 c4 0c             	add    esp,0xc
c000988c:	89 c1                	mov    ecx,eax
c000988e:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c0009893:	31 d2                	xor    edx,edx
c0009895:	a1 50 38 02 c0       	mov    eax,ds:0xc0023850
c000989a:	f7 35 4c 38 02 c0    	div    DWORD PTR ds:0xc002384c
c00098a0:	c1 e8 05             	shr    eax,0x5
c00098a3:	50                   	push   eax
c00098a4:	6a 00                	push   0x0
c00098a6:	51                   	push   ecx
c00098a7:	e8 44 6c ff ff       	call   c00004f0 <memset>
c00098ac:	83 c4 18             	add    esp,0x18
c00098af:	5b                   	pop    ebx
c00098b0:	c3                   	ret    
c00098b1:	90                   	nop

c00098b2 <VAS::setCPUSpecific(unsigned long)>:
c00098b2:	c3                   	ret    
c00098b3:	90                   	nop

c00098b4 <VAS::VAS(VAS*)>:
c00098b4:	83 ec 0c             	sub    esp,0xc
c00098b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098bb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098cd:	83 ec 0c             	sub    esp,0xc
c00098d0:	68 a4 10 02 c0       	push   0xc00210a4
c00098d5:	e8 e9 7d 00 00       	call   c00116c3 <KePanic(char const*)>
c00098da:	83 c4 10             	add    esp,0x10
c00098dd:	90                   	nop
c00098de:	83 c4 0c             	add    esp,0xc
c00098e1:	c3                   	ret    

c00098e2 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e6:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098eb:	89 c2                	mov    edx,eax
c00098ed:	c1 e8 0a             	shr    eax,0xa
c00098f0:	c1 ea 16             	shr    edx,0x16
c00098f3:	83 f9 01             	cmp    ecx,0x1
c00098f6:	19 c9                	sbb    ecx,ecx
c00098f8:	c1 e2 0c             	shl    edx,0xc
c00098fb:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009901:	25 fc 0f 00 00       	and    eax,0xffc
c0009906:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000990d:	01 d0                	add    eax,edx
c000990f:	c3                   	ret    

c0009910 <VAS::getPageTableEntry(unsigned long)>:
c0009910:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009914:	89 ca                	mov    edx,ecx
c0009916:	c1 e9 0a             	shr    ecx,0xa
c0009919:	c1 ea 16             	shr    edx,0x16
c000991c:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009922:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009928:	c1 e0 0c             	shl    eax,0xc
c000992b:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992e:	c3                   	ret    

c000992f <Virt::freeKernelVirtualPages(unsigned long)>:
c000992f:	55                   	push   ebp
c0009930:	57                   	push   edi
c0009931:	bf 01 00 00 00       	mov    edi,0x1
c0009936:	56                   	push   esi
c0009937:	53                   	push   ebx
c0009938:	83 ec 1c             	sub    esp,0x1c
c000993b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993f:	c1 ee 0c             	shr    esi,0xc
c0009942:	eb 48                	jmp    c000998c <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009944:	83 ec 08             	sub    esp,0x8
c0009947:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000994c:	55                   	push   ebp
c000994d:	50                   	push   eax
c000994e:	e8 bd ff ff ff       	call   c0009910 <VAS::getPageTableEntry(unsigned long)>
c0009953:	83 c4 10             	add    esp,0x10
c0009956:	8b 10                	mov    edx,DWORD PTR [eax]
c0009958:	f6 c6 04             	test   dh,0x4
c000995b:	75 70                	jne    c00099cd <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000995d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009963:	83 fb 04             	cmp    ebx,0x4
c0009966:	0f 84 8a 00 00 00    	je     c00099f6 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000996c:	83 fb 02             	cmp    ebx,0x2
c000996f:	0f 84 9a 00 00 00    	je     c0009a0f <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009975:	83 fb 03             	cmp    ebx,0x3
c0009978:	0f 84 be 00 00 00    	je     c0009a3c <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997e:	83 fb 01             	cmp    ebx,0x1
c0009981:	0f 84 a2 00 00 00    	je     c0009a29 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009987:	83 c6 01             	add    esi,0x1
c000998a:	31 ff                	xor    edi,edi
c000998c:	56                   	push   esi
c000998d:	89 f5                	mov    ebp,esi
c000998f:	e8 5a fc ff ff       	call   c00095ee <Virt::getPageState(unsigned long)>
c0009994:	c1 e5 0c             	shl    ebp,0xc
c0009997:	0f b6 d8             	movzx  ebx,al
c000999a:	5a                   	pop    edx
c000999b:	85 db                	test   ebx,ebx
c000999d:	75 a5                	jne    c0009944 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999f:	83 ec 0c             	sub    esp,0xc
c00099a2:	68 46 13 02 c0       	push   0xc0021346
c00099a7:	e8 17 7d 00 00       	call   c00116c3 <KePanic(char const*)>
c00099ac:	5a                   	pop    edx
c00099ad:	59                   	pop    ecx
c00099ae:	55                   	push   ebp
c00099af:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c00099b5:	55                   	push   ebp
c00099b6:	e8 55 ff ff ff       	call   c0009910 <VAS::getPageTableEntry(unsigned long)>
c00099bb:	83 c4 10             	add    esp,0x10
c00099be:	8b 10                	mov    edx,DWORD PTR [eax]
c00099c0:	f6 c6 04             	test   dh,0x4
c00099c3:	75 08                	jne    c00099cd <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099cb:	eb ba                	jmp    c0009987 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099d1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d7:	83 ec 0c             	sub    esp,0xc
c00099da:	52                   	push   edx
c00099db:	e8 7a e3 ff ff       	call   c0007d5a <Phys::freePage(unsigned long)>
c00099e0:	83 c4 10             	add    esp,0x10
c00099e3:	83 fb 04             	cmp    ebx,0x4
c00099e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099f0:	0f 85 76 ff ff ff    	jne    c000996c <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f6:	83 e7 01             	and    edi,0x1
c00099f9:	75 46                	jne    c0009a41 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099fb:	c7 44 24 30 c8 10 02 c0 	mov    DWORD PTR [esp+0x30],0xc00210c8
c0009a03:	83 c4 1c             	add    esp,0x1c
c0009a06:	5b                   	pop    ebx
c0009a07:	5e                   	pop    esi
c0009a08:	5f                   	pop    edi
c0009a09:	5d                   	pop    ebp
c0009a0a:	e9 b4 7c 00 00       	jmp    c00116c3 <KePanic(char const*)>
c0009a0f:	83 e7 01             	and    edi,0x1
c0009a12:	75 15                	jne    c0009a29 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a14:	83 ec 0c             	sub    esp,0xc
c0009a17:	68 62 13 02 c0       	push   0xc0021362
c0009a1c:	e8 a2 7c 00 00       	call   c00116c3 <KePanic(char const*)>
c0009a21:	83 c4 10             	add    esp,0x10
c0009a24:	e9 5e ff ff ff       	jmp    c0009987 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a29:	83 ec 08             	sub    esp,0x8
c0009a2c:	6a 00                	push   0x0
c0009a2e:	56                   	push   esi
c0009a2f:	e8 80 fb ff ff       	call   c00095b4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a34:	83 c4 10             	add    esp,0x10
c0009a37:	e9 4b ff ff ff       	jmp    c0009987 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a3c:	83 e7 01             	and    edi,0x1
c0009a3f:	75 16                	jne    c0009a57 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a41:	83 ec 08             	sub    esp,0x8
c0009a44:	6a 00                	push   0x0
c0009a46:	56                   	push   esi
c0009a47:	e8 68 fb ff ff       	call   c00095b4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a4c:	83 c4 10             	add    esp,0x10
c0009a4f:	83 c4 1c             	add    esp,0x1c
c0009a52:	5b                   	pop    ebx
c0009a53:	5e                   	pop    esi
c0009a54:	5f                   	pop    edi
c0009a55:	5d                   	pop    ebp
c0009a56:	c3                   	ret    
c0009a57:	c7 44 24 30 7e 13 02 c0 	mov    DWORD PTR [esp+0x30],0xc002137e
c0009a5f:	83 c4 1c             	add    esp,0x1c
c0009a62:	5b                   	pop    ebx
c0009a63:	5e                   	pop    esi
c0009a64:	5f                   	pop    edi
c0009a65:	5d                   	pop    ebp
c0009a66:	e9 58 7c 00 00       	jmp    c00116c3 <KePanic(char const*)>
c0009a6b:	90                   	nop

c0009a6c <VAS::freeAllocatedPages(unsigned long)>:
c0009a6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a74:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a78:	74 09                	je     c0009a83 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a7a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7e:	e9 ac fe ff ff       	jmp    c000992f <Virt::freeKernelVirtualPages(unsigned long)>
c0009a83:	c7 44 24 04 ec 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc00210ec
c0009a8b:	e9 b9 0e 00 00       	jmp    c000a949 <Dbg::kprintf(char const*, ...)>

c0009a90 <VAS::virtualToPhysical(unsigned long)>:
c0009a90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a94:	50                   	push   eax
c0009a95:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a99:	52                   	push   edx
c0009a9a:	e8 71 fe ff ff       	call   c0009910 <VAS::getPageTableEntry(unsigned long)>
c0009a9f:	59                   	pop    ecx
c0009aa0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009aa2:	5a                   	pop    edx
c0009aa3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa8:	c3                   	ret    
c0009aa9:	90                   	nop

c0009aaa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aaa:	55                   	push   ebp
c0009aab:	57                   	push   edi
c0009aac:	56                   	push   esi
c0009aad:	53                   	push   ebx
c0009aae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ab2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009aba:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009abe:	85 db                	test   ebx,ebx
c0009ac0:	7e 24                	jle    c0009ae6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009ac2:	c1 e3 0c             	shl    ebx,0xc
c0009ac5:	01 f3                	add    ebx,esi
c0009ac7:	56                   	push   esi
c0009ac8:	81 c6 00 10 00 00    	add    esi,0x1000
c0009ace:	55                   	push   ebp
c0009acf:	e8 3c fe ff ff       	call   c0009910 <VAS::getPageTableEntry(unsigned long)>
c0009ad4:	5a                   	pop    edx
c0009ad5:	59                   	pop    ecx
c0009ad6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009adc:	21 f9                	and    ecx,edi
c0009ade:	09 d1                	or     ecx,edx
c0009ae0:	39 f3                	cmp    ebx,esi
c0009ae2:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae4:	75 e1                	jne    c0009ac7 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae6:	5b                   	pop    ebx
c0009ae7:	5e                   	pop    esi
c0009ae8:	5f                   	pop    edi
c0009ae9:	5d                   	pop    ebp
c0009aea:	c3                   	ret    
c0009aeb:	90                   	nop

c0009aec <VAS::VAS()>:
c0009aec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009afb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009b02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b06:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009b0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b17:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b25:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b2a:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b2f:	29 c2                	sub    edx,eax
c0009b31:	89 d0                	mov    eax,edx
c0009b33:	05 ff 0f 00 00       	add    eax,0xfff
c0009b38:	c1 e8 0c             	shr    eax,0xc
c0009b3b:	89 c2                	mov    edx,eax
c0009b3d:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b42:	6a 04                	push   0x4
c0009b44:	6a ff                	push   0xffffffff
c0009b46:	52                   	push   edx
c0009b47:	50                   	push   eax
c0009b48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b4c:	e8 59 ff ff ff       	call   c0009aaa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b51:	83 c4 14             	add    esp,0x14
c0009b54:	90                   	nop
c0009b55:	c3                   	ret    

c0009b56 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b56:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b5b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b61:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b68:	75 01                	jne    c0009b6b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b6a:	c3                   	ret    
c0009b6b:	68 80 00 00 00       	push   0x80
c0009b70:	6a ff                	push   0xffffffff
c0009b72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b76:	50                   	push   eax
c0009b77:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b7b:	52                   	push   edx
c0009b7c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b80:	51                   	push   ecx
c0009b81:	e8 24 ff ff ff       	call   c0009aaa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b86:	83 c4 14             	add    esp,0x14
c0009b89:	c3                   	ret    

c0009b8a <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b95:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b98:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b9d:	83 f8 01             	cmp    eax,0x1
c0009ba0:	19 c0                	sbb    eax,eax
c0009ba2:	83 ca 03             	or     edx,0x3
c0009ba5:	83 e0 fc             	and    eax,0xfffffffc
c0009ba8:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009baf:	0f 20 d8             	mov    eax,cr3
c0009bb2:	0f 22 d8             	mov    cr3,eax
c0009bb5:	c3                   	ret    

c0009bb6 <VAS::~VAS()>:
c0009bb6:	83 ec 2c             	sub    esp,0x2c
c0009bb9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bc1:	fa                   	cli    
c0009bc2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009bc7:	83 c0 01             	add    eax,0x1
c0009bca:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009bcf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009be3:	6a 01                	push   0x1
c0009be5:	50                   	push   eax
c0009be6:	e8 9f ff ff ff       	call   c0009b8a <VAS::mapOtherVASIn(bool, VAS*)>
c0009beb:	83 c4 0c             	add    esp,0xc
c0009bee:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfe:	0f 8f d8 00 00 00    	jg     c0009cdc <VAS::~VAS()+0x126>
c0009c04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0f:	c1 e2 02             	shl    edx,0x2
c0009c12:	01 d0                	add    eax,edx
c0009c14:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c16:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1e:	83 e0 01             	and    eax,0x1
c0009c21:	0f 84 ab 00 00 00    	je     c0009cd2 <VAS::~VAS()+0x11c>
c0009c27:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c37:	7f 74                	jg     c0009cad <VAS::~VAS()+0xf7>
c0009c39:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c3d:	c1 e0 0a             	shl    eax,0xa
c0009c40:	89 c2                	mov    edx,eax
c0009c42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c46:	01 d0                	add    eax,edx
c0009c48:	c1 e0 0c             	shl    eax,0xc
c0009c4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c54:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c56:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c59:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c63:	6a 01                	push   0x1
c0009c65:	50                   	push   eax
c0009c66:	e8 77 fc ff ff       	call   c00098e2 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c6b:	83 c4 0c             	add    esp,0xc
c0009c6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c76:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c80:	25 01 04 00 00       	and    eax,0x401
c0009c85:	3d 01 04 00 00       	cmp    eax,0x401
c0009c8a:	75 1a                	jne    c0009ca6 <VAS::~VAS()+0xf0>
c0009c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c95:	83 ec 0c             	sub    esp,0xc
c0009c98:	50                   	push   eax
c0009c99:	e8 bc e0 ff ff       	call   c0007d5a <Phys::freePage(unsigned long)>
c0009c9e:	83 c4 10             	add    esp,0x10
c0009ca1:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca6:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009cab:	eb 82                	jmp    c0009c2f <VAS::~VAS()+0x79>
c0009cad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb1:	25 00 04 00 00       	and    eax,0x400
c0009cb6:	74 1a                	je     c0009cd2 <VAS::~VAS()+0x11c>
c0009cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cbc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cc1:	83 ec 0c             	sub    esp,0xc
c0009cc4:	50                   	push   eax
c0009cc5:	e8 90 e0 ff ff       	call   c0007d5a <Phys::freePage(unsigned long)>
c0009cca:	83 c4 10             	add    esp,0x10
c0009ccd:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cd2:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd7:	e9 1a ff ff ff       	jmp    c0009bf6 <VAS::~VAS()+0x40>
c0009cdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ce0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ce3:	83 ec 0c             	sub    esp,0xc
c0009ce6:	50                   	push   eax
c0009ce7:	e8 43 fc ff ff       	call   c000992f <Virt::freeKernelVirtualPages(unsigned long)>
c0009cec:	83 c4 10             	add    esp,0x10
c0009cef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cf3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf6:	83 ec 0c             	sub    esp,0xc
c0009cf9:	50                   	push   eax
c0009cfa:	e8 5b e0 ff ff       	call   c0007d5a <Phys::freePage(unsigned long)>
c0009cff:	83 c4 10             	add    esp,0x10
c0009d02:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d07:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d0c:	83 e8 01             	sub    eax,0x1
c0009d0f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009d14:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d19:	85 c0                	test   eax,eax
c0009d1b:	75 01                	jne    c0009d1e <VAS::~VAS()+0x168>
c0009d1d:	fb                   	sti    
c0009d1e:	90                   	nop
c0009d1f:	83 c4 2c             	add    esp,0x2c
c0009d22:	c3                   	ret    
c0009d23:	90                   	nop

c0009d24 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d24:	55                   	push   ebp
c0009d25:	57                   	push   edi
c0009d26:	56                   	push   esi
c0009d27:	53                   	push   ebx
c0009d28:	83 ec 1c             	sub    esp,0x1c
c0009d2b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d33:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d39:	77 08                	ja     c0009d43 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d3b:	0f 20 d8             	mov    eax,cr3
c0009d3e:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d41:	75 49                	jne    c0009d8c <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d43:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d47:	09 d8                	or     eax,ebx
c0009d49:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4e:	75 59                	jne    c0009da9 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d50:	89 de                	mov    esi,ebx
c0009d52:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d55:	c1 ee 16             	shr    esi,0x16
c0009d58:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d63:	74 56                	je     c0009dbb <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d65:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d69:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d6d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d73:	c1 eb 0a             	shr    ebx,0xa
c0009d76:	c1 e6 0c             	shl    esi,0xc
c0009d79:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7f:	09 d0                	or     eax,edx
c0009d81:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d84:	83 c4 1c             	add    esp,0x1c
c0009d87:	5b                   	pop    ebx
c0009d88:	5e                   	pop    esi
c0009d89:	5f                   	pop    edi
c0009d8a:	5d                   	pop    ebp
c0009d8b:	c3                   	ret    
c0009d8c:	83 ec 0c             	sub    esp,0xc
c0009d8f:	68 10 11 02 c0       	push   0xc0021110
c0009d94:	e8 b0 0b 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009da0:	09 d8                	or     eax,ebx
c0009da2:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da7:	74 a7                	je     c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da9:	83 ec 0c             	sub    esp,0xc
c0009dac:	68 78 11 02 c0       	push   0xc0021178
c0009db1:	e8 0d 79 00 00       	call   c00116c3 <KePanic(char const*)>
c0009db6:	83 c4 10             	add    esp,0x10
c0009db9:	eb 95                	jmp    c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009dbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbf:	e8 ff df ff ff       	call   c0007dc3 <Phys::allocatePage()>
c0009dc4:	83 ec 0c             	sub    esp,0xc
c0009dc7:	89 c5                	mov    ebp,eax
c0009dc9:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009dcf:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dd3:	6a 01                	push   0x1
c0009dd5:	e8 37 f8 ff ff       	call   c0009611 <Virt::allocateKernelVirtualPages(int)>
c0009dda:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009de1:	6a 01                	push   0x1
c0009de3:	50                   	push   eax
c0009de4:	55                   	push   ebp
c0009de5:	81 cd 07 04 00 00    	or     ebp,0x407
c0009deb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009def:	51                   	push   ecx
c0009df0:	e8 29 01 00 00       	call   c0009f1e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df5:	83 c4 1c             	add    esp,0x1c
c0009df8:	68 00 10 00 00       	push   0x1000
c0009dfd:	6a 00                	push   0x0
c0009dff:	50                   	push   eax
c0009e00:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e04:	e8 e7 66 ff ff       	call   c00004f0 <memset>
c0009e09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e0d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e10:	e8 1a fb ff ff       	call   c000992f <Virt::freeKernelVirtualPages(unsigned long)>
c0009e15:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e19:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e1c:	83 c4 10             	add    esp,0x10
c0009e1f:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e22:	e9 3e ff ff ff       	jmp    c0009d65 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e27:	90                   	nop

c0009e28 <VAS::allocatePages(int, int)>:
c0009e28:	55                   	push   ebp
c0009e29:	57                   	push   edi
c0009e2a:	56                   	push   esi
c0009e2b:	53                   	push   ebx
c0009e2c:	83 ec 1c             	sub    esp,0x1c
c0009e2f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e33:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e37:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e3b:	75 71                	jne    c0009eae <VAS::allocatePages(int, int)+0x86>
c0009e3d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e44:	85 c0                	test   eax,eax
c0009e46:	74 4d                	je     c0009e95 <VAS::allocatePages(int, int)+0x6d>
c0009e48:	89 dd                	mov    ebp,ebx
c0009e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4e:	c1 e5 0c             	shl    ebp,0xc
c0009e51:	01 c5                	add    ebp,eax
c0009e53:	85 db                	test   ebx,ebx
c0009e55:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e58:	7e 29                	jle    c0009e83 <VAS::allocatePages(int, int)+0x5b>
c0009e5a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e62:	81 cf 00 04 00 00    	or     edi,0x400
c0009e68:	e8 56 df ff ff       	call   c0007dc3 <Phys::allocatePage()>
c0009e6d:	57                   	push   edi
c0009e6e:	53                   	push   ebx
c0009e6f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e75:	50                   	push   eax
c0009e76:	56                   	push   esi
c0009e77:	e8 a8 fe ff ff       	call   c0009d24 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e7c:	83 c4 10             	add    esp,0x10
c0009e7f:	39 dd                	cmp    ebp,ebx
c0009e81:	75 e5                	jne    c0009e68 <VAS::allocatePages(int, int)+0x40>
c0009e83:	0f 20 d8             	mov    eax,cr3
c0009e86:	0f 22 d8             	mov    cr3,eax
c0009e89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e8d:	83 c4 1c             	add    esp,0x1c
c0009e90:	5b                   	pop    ebx
c0009e91:	5e                   	pop    esi
c0009e92:	5f                   	pop    edi
c0009e93:	5d                   	pop    ebp
c0009e94:	c3                   	ret    
c0009e95:	83 ec 0c             	sub    esp,0xc
c0009e98:	68 9c 11 02 c0       	push   0xc002119c
c0009e9d:	e8 21 78 00 00       	call   c00116c3 <KePanic(char const*)>
c0009ea2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea9:	83 c4 10             	add    esp,0x10
c0009eac:	eb 9a                	jmp    c0009e48 <VAS::allocatePages(int, int)+0x20>
c0009eae:	83 ec 0c             	sub    esp,0xc
c0009eb1:	53                   	push   ebx
c0009eb2:	e8 5a f7 ff ff       	call   c0009611 <Virt::allocateKernelVirtualPages(int)>
c0009eb7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ebb:	83 c4 10             	add    esp,0x10
c0009ebe:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ec3:	77 37                	ja     c0009efc <VAS::allocatePages(int, int)+0xd4>
c0009ec5:	85 db                	test   ebx,ebx
c0009ec7:	7e ba                	jle    c0009e83 <VAS::allocatePages(int, int)+0x5b>
c0009ec9:	c1 e3 0c             	shl    ebx,0xc
c0009ecc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ed0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed4:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed7:	81 cf 00 04 00 00    	or     edi,0x400
c0009edd:	89 c3                	mov    ebx,eax
c0009edf:	e8 df de ff ff       	call   c0007dc3 <Phys::allocatePage()>
c0009ee4:	57                   	push   edi
c0009ee5:	53                   	push   ebx
c0009ee6:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009eec:	50                   	push   eax
c0009eed:	56                   	push   esi
c0009eee:	e8 31 fe ff ff       	call   c0009d24 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ef3:	83 c4 10             	add    esp,0x10
c0009ef6:	39 dd                	cmp    ebp,ebx
c0009ef8:	75 e5                	jne    c0009edf <VAS::allocatePages(int, int)+0xb7>
c0009efa:	eb 87                	jmp    c0009e83 <VAS::allocatePages(int, int)+0x5b>
c0009efc:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009f01:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f07:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0e:	74 b5                	je     c0009ec5 <VAS::allocatePages(int, int)+0x9d>
c0009f10:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f14:	80 ce 01             	or     dh,0x1
c0009f17:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f1b:	eb a8                	jmp    c0009ec5 <VAS::allocatePages(int, int)+0x9d>
c0009f1d:	90                   	nop

c0009f1e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1e:	55                   	push   ebp
c0009f1f:	57                   	push   edi
c0009f20:	56                   	push   esi
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 0c             	sub    esp,0xc
c0009f25:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f29:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f2d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f31:	85 db                	test   ebx,ebx
c0009f33:	7e 2f                	jle    c0009f64 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f35:	c1 e3 0c             	shl    ebx,0xc
c0009f38:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f3c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f40:	01 d3                	add    ebx,edx
c0009f42:	55                   	push   ebp
c0009f43:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f4b:	29 c2                	sub    edx,eax
c0009f4d:	01 f2                	add    edx,esi
c0009f4f:	52                   	push   edx
c0009f50:	56                   	push   esi
c0009f51:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f57:	57                   	push   edi
c0009f58:	e8 c7 fd ff ff       	call   c0009d24 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f5d:	83 c4 10             	add    esp,0x10
c0009f60:	39 de                	cmp    esi,ebx
c0009f62:	75 de                	jne    c0009f42 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f64:	0f 20 d8             	mov    eax,cr3
c0009f67:	0f 22 d8             	mov    cr3,eax
c0009f6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6e:	83 c4 0c             	add    esp,0xc
c0009f71:	5b                   	pop    ebx
c0009f72:	5e                   	pop    esi
c0009f73:	5f                   	pop    edi
c0009f74:	5d                   	pop    ebp
c0009f75:	c3                   	ret    

c0009f76 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f76:	55                   	push   ebp
c0009f77:	57                   	push   edi
c0009f78:	56                   	push   esi
c0009f79:	53                   	push   ebx
c0009f7a:	83 ec 1c             	sub    esp,0x1c
c0009f7d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f81:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f85:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f89:	09 f8                	or     eax,edi
c0009f8b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f94:	75 4f                	jne    c0009fe5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f96:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f9a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f9d:	c1 eb 16             	shr    ebx,0x16
c0009fa0:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa7:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fab:	74 52                	je     c0009fff <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fad:	0f b6 f2             	movzx  esi,dl
c0009fb0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb4:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb8:	c1 e8 0a             	shr    eax,0xa
c0009fbb:	83 fe 01             	cmp    esi,0x1
c0009fbe:	19 d2                	sbb    edx,edx
c0009fc0:	c1 e3 0c             	shl    ebx,0xc
c0009fc3:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc9:	25 fc 0f 00 00       	and    eax,0xffc
c0009fce:	01 d8                	add    eax,ebx
c0009fd0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd4:	09 d9                	or     ecx,ebx
c0009fd6:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fdd:	83 c4 1c             	add    esp,0x1c
c0009fe0:	5b                   	pop    ebx
c0009fe1:	5e                   	pop    esi
c0009fe2:	5f                   	pop    edi
c0009fe3:	5d                   	pop    ebp
c0009fe4:	c3                   	ret    
c0009fe5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe9:	83 ec 0c             	sub    esp,0xc
c0009fec:	68 c8 11 02 c0       	push   0xc00211c8
c0009ff1:	e8 cd 76 00 00       	call   c00116c3 <KePanic(char const*)>
c0009ff6:	83 c4 10             	add    esp,0x10
c0009ff9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ffd:	eb 97                	jmp    c0009f96 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009fff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a003:	e8 bb dd ff ff       	call   c0007dc3 <Phys::allocatePage()>
c000a008:	83 ec 0c             	sub    esp,0xc
c000a00b:	89 c5                	mov    ebp,eax
c000a00d:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c000a013:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a017:	6a 01                	push   0x1
c000a019:	e8 f3 f5 ff ff       	call   c0009611 <Virt::allocateKernelVirtualPages(int)>
c000a01e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a025:	6a 01                	push   0x1
c000a027:	50                   	push   eax
c000a028:	55                   	push   ebp
c000a029:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a033:	51                   	push   ecx
c000a034:	e8 e5 fe ff ff       	call   c0009f1e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a039:	83 c4 1c             	add    esp,0x1c
c000a03c:	68 00 10 00 00       	push   0x1000
c000a041:	6a 00                	push   0x0
c000a043:	50                   	push   eax
c000a044:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a048:	e8 a3 64 ff ff       	call   c00004f0 <memset>
c000a04d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a051:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a054:	e8 d6 f8 ff ff       	call   c000992f <Virt::freeKernelVirtualPages(unsigned long)>
c000a059:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a05c:	83 c4 10             	add    esp,0x10
c000a05f:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a062:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a066:	e9 42 ff ff ff       	jmp    c0009fad <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a06b:	90                   	nop

c000a06c <VAS::VAS(bool)>:
c000a06c:	53                   	push   ebx
c000a06d:	83 ec 28             	sub    esp,0x28
c000a070:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a074:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a078:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a07c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a083:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a087:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a092:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a096:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a099:	e8 25 dd ff ff       	call   c0007dc3 <Phys::allocatePage()>
c000a09e:	89 c2                	mov    edx,eax
c000a0a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a7:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a0ad:	83 ec 0c             	sub    esp,0xc
c000a0b0:	6a 01                	push   0x1
c000a0b2:	e8 5a f5 ff ff       	call   c0009611 <Virt::allocateKernelVirtualPages(int)>
c000a0b7:	83 c4 10             	add    esp,0x10
c000a0ba:	89 c2                	mov    edx,eax
c000a0bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0c3:	83 ec 0c             	sub    esp,0xc
c000a0c6:	6a 03                	push   0x3
c000a0c8:	6a 01                	push   0x1
c000a0ca:	52                   	push   edx
c000a0cb:	50                   	push   eax
c000a0cc:	53                   	push   ebx
c000a0cd:	e8 4c fe ff ff       	call   c0009f1e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0d2:	83 c4 20             	add    esp,0x20
c000a0d5:	89 c2                	mov    edx,eax
c000a0d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0db:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e6:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ee:	7f 1d                	jg     c000a10d <VAS::VAS(bool)+0xa1>
c000a0f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0fb:	c1 e2 02             	shl    edx,0x2
c000a0fe:	01 d0                	add    eax,edx
c000a100:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a106:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a10b:	eb d9                	jmp    c000a0e6 <VAS::VAS(bool)+0x7a>
c000a10d:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a115:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a11d:	7f 7e                	jg     c000a19d <VAS::VAS(bool)+0x131>
c000a11f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a123:	2d 00 02 00 00       	sub    eax,0x200
c000a128:	c1 e0 0c             	shl    eax,0xc
c000a12b:	83 c8 05             	or     eax,0x5
c000a12e:	89 c2                	mov    edx,eax
c000a130:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a135:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a13b:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a141:	83 e0 10             	and    eax,0x10
c000a144:	0f b6 c0             	movzx  eax,al
c000a147:	85 c0                	test   eax,eax
c000a149:	74 07                	je     c000a152 <VAS::VAS(bool)+0xe6>
c000a14b:	b8 00 01 00 00       	mov    eax,0x100
c000a150:	eb 05                	jmp    c000a157 <VAS::VAS(bool)+0xeb>
c000a152:	b8 00 00 00 00       	mov    eax,0x0
c000a157:	09 d0                	or     eax,edx
c000a159:	89 c1                	mov    ecx,eax
c000a15b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a162:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a166:	c1 e2 02             	shl    edx,0x2
c000a169:	01 d0                	add    eax,edx
c000a16b:	89 ca                	mov    edx,ecx
c000a16d:	89 10                	mov    DWORD PTR [eax],edx
c000a16f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a173:	2d 40 03 00 00       	sub    eax,0x340
c000a178:	83 f8 7f             	cmp    eax,0x7f
c000a17b:	77 16                	ja     c000a193 <VAS::VAS(bool)+0x127>
c000a17d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a181:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a184:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a188:	c1 e2 02             	shl    edx,0x2
c000a18b:	01 d0                	add    eax,edx
c000a18d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a193:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a198:	e9 78 ff ff ff       	jmp    c000a115 <VAS::VAS(bool)+0xa9>
c000a19d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a8:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1ae:	83 e0 10             	and    eax,0x10
c000a1b1:	0f b6 c0             	movzx  eax,al
c000a1b4:	85 c0                	test   eax,eax
c000a1b6:	74 07                	je     c000a1bf <VAS::VAS(bool)+0x153>
c000a1b8:	b8 03 41 00 00       	mov    eax,0x4103
c000a1bd:	eb 05                	jmp    c000a1c4 <VAS::VAS(bool)+0x158>
c000a1bf:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c8:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1cb:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1d1:	89 02                	mov    DWORD PTR [edx],eax
c000a1d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1da:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e5:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1eb:	83 e0 10             	and    eax,0x10
c000a1ee:	0f b6 c0             	movzx  eax,al
c000a1f1:	85 c0                	test   eax,eax
c000a1f3:	74 07                	je     c000a1fc <VAS::VAS(bool)+0x190>
c000a1f5:	b8 00 01 00 00       	mov    eax,0x100
c000a1fa:	eb 05                	jmp    c000a201 <VAS::VAS(bool)+0x195>
c000a1fc:	b8 00 00 00 00       	mov    eax,0x0
c000a201:	09 c2                	or     edx,eax
c000a203:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a207:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a20a:	05 fc 0f 00 00       	add    eax,0xffc
c000a20f:	83 ca 03             	or     edx,0x3
c000a212:	89 10                	mov    DWORD PTR [eax],edx
c000a214:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a219:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21f:	83 ec 0c             	sub    esp,0xc
c000a222:	50                   	push   eax
c000a223:	e8 00 2a 00 00       	call   c000cc28 <Device::getName()>
c000a228:	83 c4 10             	add    esp,0x10
c000a22b:	83 ec 08             	sub    esp,0x8
c000a22e:	68 98 13 02 c0       	push   0xc0021398
c000a233:	50                   	push   eax
c000a234:	e8 17 65 ff ff       	call   c0000750 <strcmp>
c000a239:	83 c4 10             	add    esp,0x10
c000a23c:	85 c0                	test   eax,eax
c000a23e:	0f 94 c0             	sete   al
c000a241:	0f b6 c0             	movzx  eax,al
c000a244:	85 c0                	test   eax,eax
c000a246:	74 68                	je     c000a2b0 <VAS::VAS(bool)+0x244>
c000a248:	fa                   	cli    
c000a249:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a24e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a254:	05 7c 09 00 00       	add    eax,0x97c
c000a259:	83 ec 0c             	sub    esp,0xc
c000a25c:	50                   	push   eax
c000a25d:	e8 50 d3 ff ff       	call   c00075b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a262:	83 c4 10             	add    esp,0x10
c000a265:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a26a:	89 c3                	mov    ebx,eax
c000a26c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a271:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a277:	05 7c 09 00 00       	add    eax,0x97c
c000a27c:	83 ec 0c             	sub    esp,0xc
c000a27f:	50                   	push   eax
c000a280:	e8 2d d3 ff ff       	call   c00075b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a285:	83 c4 10             	add    esp,0x10
c000a288:	83 ec 08             	sub    esp,0x8
c000a28b:	50                   	push   eax
c000a28c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a290:	e8 7b f6 ff ff       	call   c0009910 <VAS::getPageTableEntry(unsigned long)>
c000a295:	83 c4 10             	add    esp,0x10
c000a298:	8b 00                	mov    eax,DWORD PTR [eax]
c000a29a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29f:	6a 11                	push   0x11
c000a2a1:	53                   	push   ebx
c000a2a2:	50                   	push   eax
c000a2a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a7:	e8 78 fa ff ff       	call   c0009d24 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2ac:	83 c4 10             	add    esp,0x10
c000a2af:	fb                   	sti    
c000a2b0:	90                   	nop
c000a2b1:	83 c4 28             	add    esp,0x28
c000a2b4:	5b                   	pop    ebx
c000a2b5:	c3                   	ret    

c000a2b6 <VAS::evict(unsigned long)>:
c000a2b6:	55                   	push   ebp
c000a2b7:	57                   	push   edi
c000a2b8:	56                   	push   esi
c000a2b9:	53                   	push   ebx
c000a2ba:	83 ec 1c             	sub    esp,0x1c
c000a2bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2c1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c9:	e8 a1 f4 ff ff       	call   c000976f <Virt::allocateSwapfilePage()>
c000a2ce:	89 c7                	mov    edi,eax
c000a2d0:	a1 4c 38 02 c0       	mov    eax,ds:0xc002384c
c000a2d5:	85 c0                	test   eax,eax
c000a2d7:	7e 40                	jle    c000a319 <VAS::evict(unsigned long)+0x63>
c000a2d9:	89 ee                	mov    esi,ebp
c000a2db:	31 db                	xor    ebx,ebx
c000a2dd:	83 ec 0c             	sub    esp,0xc
c000a2e0:	57                   	push   edi
c000a2e1:	e8 73 f4 ff ff       	call   c0009759 <Virt::swapIDToSector(unsigned long)>
c000a2e6:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e9:	01 d8                	add    eax,ebx
c000a2eb:	6a 01                	push   0x1
c000a2ed:	31 d2                	xor    edx,edx
c000a2ef:	83 c3 01             	add    ebx,0x1
c000a2f2:	52                   	push   edx
c000a2f3:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f9:	50                   	push   eax
c000a2fa:	0f be 05 58 38 02 c0 	movsx  eax,BYTE PTR ds:0xc0023858
c000a301:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a308:	50                   	push   eax
c000a309:	e8 22 3b 00 00       	call   c000de30 <LogicalDisk::write(unsigned long long, int, void*)>
c000a30e:	83 c4 20             	add    esp,0x20
c000a311:	39 1d 4c 38 02 c0    	cmp    DWORD PTR ds:0xc002384c,ebx
c000a317:	7f c4                	jg     c000a2dd <VAS::evict(unsigned long)+0x27>
c000a319:	83 ec 08             	sub    esp,0x8
c000a31c:	c1 e7 0c             	shl    edi,0xc
c000a31f:	55                   	push   ebp
c000a320:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a324:	50                   	push   eax
c000a325:	e8 e6 f5 ff ff       	call   c0009910 <VAS::getPageTableEntry(unsigned long)>
c000a32a:	8b 10                	mov    edx,DWORD PTR [eax]
c000a32c:	89 d3                	mov    ebx,edx
c000a32e:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a334:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a33a:	09 d7                	or     edi,edx
c000a33c:	89 38                	mov    DWORD PTR [eax],edi
c000a33e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a341:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a347:	83 c2 01             	add    edx,0x1
c000a34a:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a350:	e8 05 da ff ff       	call   c0007d5a <Phys::freePage(unsigned long)>
c000a355:	0f 20 d8             	mov    eax,cr3
c000a358:	0f 22 d8             	mov    cr3,eax
c000a35b:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a361:	51                   	push   ecx
c000a362:	55                   	push   ebp
c000a363:	53                   	push   ebx
c000a364:	68 ec 11 02 c0       	push   0xc00211ec
c000a369:	e8 db 05 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000a36e:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a373:	c7 44 24 50 a6 13 02 c0 	mov    DWORD PTR [esp+0x50],0xc00213a6
c000a37b:	8d 50 01             	lea    edx,[eax+0x1]
c000a37e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a382:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a388:	83 c4 3c             	add    esp,0x3c
c000a38b:	5b                   	pop    ebx
c000a38c:	5e                   	pop    esi
c000a38d:	5f                   	pop    edi
c000a38e:	5d                   	pop    ebp
c000a38f:	e9 b5 05 00 00       	jmp    c000a949 <Dbg::kprintf(char const*, ...)>

c000a394 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a394:	55                   	push   ebp
c000a395:	57                   	push   edi
c000a396:	56                   	push   esi
c000a397:	53                   	push   ebx
c000a398:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39e:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a5:	89 f3                	mov    ebx,esi
c000a3a7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3ad:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3b3:	77 22                	ja     c000a3d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b5:	83 ec 08             	sub    esp,0x8
c000a3b8:	56                   	push   esi
c000a3b9:	68 c9 13 02 c0       	push   0xc00213c9
c000a3be:	e8 86 05 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000a3c3:	83 c4 10             	add    esp,0x10
c000a3c6:	85 db                	test   ebx,ebx
c000a3c8:	75 2a                	jne    c000a3f4 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3ca:	31 c0                	xor    eax,eax
c000a3cc:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3d2:	5b                   	pop    ebx
c000a3d3:	5e                   	pop    esi
c000a3d4:	5f                   	pop    edi
c000a3d5:	5d                   	pop    ebp
c000a3d6:	c3                   	ret    
c000a3d7:	83 ec 0c             	sub    esp,0xc
c000a3da:	68 b7 13 02 c0       	push   0xc00213b7
c000a3df:	e8 df 72 00 00       	call   c00116c3 <KePanic(char const*)>
c000a3e4:	5f                   	pop    edi
c000a3e5:	5d                   	pop    ebp
c000a3e6:	56                   	push   esi
c000a3e7:	68 c9 13 02 c0       	push   0xc00213c9
c000a3ec:	e8 58 05 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000a3f1:	83 c4 10             	add    esp,0x10
c000a3f4:	83 ec 08             	sub    esp,0x8
c000a3f7:	53                   	push   ebx
c000a3f8:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3ff:	51                   	push   ecx
c000a400:	e8 0b f5 ff ff       	call   c0009910 <VAS::getPageTableEntry(unsigned long)>
c000a405:	83 c4 10             	add    esp,0x10
c000a408:	89 c2                	mov    edx,eax
c000a40a:	85 c0                	test   eax,eax
c000a40c:	74 bc                	je     c000a3ca <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a410:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a416:	0f 85 c0 00 00 00    	jne    c000a4dc <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a41c:	89 e8                	mov    eax,ebp
c000a41e:	25 01 04 00 00       	and    eax,0x401
c000a423:	3d 00 04 00 00       	cmp    eax,0x400
c000a428:	75 a0                	jne    c000a3ca <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a42a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42e:	c1 ed 0c             	shr    ebp,0xc
c000a431:	e8 8d d9 ff ff       	call   c0007dc3 <Phys::allocatePage()>
c000a436:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a43a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a43c:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a442:	09 c1                	or     ecx,eax
c000a444:	81 c9 01 08 00 00    	or     ecx,0x801
c000a44a:	89 0a                	mov    DWORD PTR [edx],ecx
c000a44c:	8b 15 4c 38 02 c0    	mov    edx,DWORD PTR ds:0xc002384c
c000a452:	85 d2                	test   edx,edx
c000a454:	7e 40                	jle    c000a496 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a456:	89 df                	mov    edi,ebx
c000a458:	31 f6                	xor    esi,esi
c000a45a:	83 ec 0c             	sub    esp,0xc
c000a45d:	55                   	push   ebp
c000a45e:	e8 f6 f2 ff ff       	call   c0009759 <Virt::swapIDToSector(unsigned long)>
c000a463:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a466:	01 f0                	add    eax,esi
c000a468:	6a 01                	push   0x1
c000a46a:	31 d2                	xor    edx,edx
c000a46c:	83 c6 01             	add    esi,0x1
c000a46f:	52                   	push   edx
c000a470:	81 c7 00 02 00 00    	add    edi,0x200
c000a476:	50                   	push   eax
c000a477:	0f be 05 58 38 02 c0 	movsx  eax,BYTE PTR ds:0xc0023858
c000a47e:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a485:	50                   	push   eax
c000a486:	e8 39 39 00 00       	call   c000ddc4 <LogicalDisk::read(unsigned long long, int, void*)>
c000a48b:	83 c4 20             	add    esp,0x20
c000a48e:	39 35 4c 38 02 c0    	cmp    DWORD PTR ds:0xc002384c,esi
c000a494:	7f c4                	jg     c000a45a <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a496:	83 ec 04             	sub    esp,0x4
c000a499:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a49e:	83 e8 01             	sub    eax,0x1
c000a4a1:	50                   	push   eax
c000a4a2:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4a7:	53                   	push   ebx
c000a4a8:	68 dc 13 02 c0       	push   0xc00213dc
c000a4ad:	e8 97 04 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000a4b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b5:	e8 7c f2 ff ff       	call   c0009736 <Virt::freeSwapfilePage(unsigned long)>
c000a4ba:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a4bf:	83 c4 10             	add    esp,0x10
c000a4c2:	83 e8 01             	sub    eax,0x1
c000a4c5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a4ca:	85 c0                	test   eax,eax
c000a4cc:	75 01                	jne    c000a4cf <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ce:	fb                   	sti    
c000a4cf:	0f 20 d8             	mov    eax,cr3
c000a4d2:	0f 22 d8             	mov    cr3,eax
c000a4d5:	b0 01                	mov    al,0x1
c000a4d7:	e9 f0 fe ff ff       	jmp    c000a3cc <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4e0:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e5:	83 ec 0c             	sub    esp,0xc
c000a4e8:	89 de                	mov    esi,ebx
c000a4ea:	68 1c 12 02 c0       	push   0xc002121c
c000a4ef:	e8 55 04 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000a4f4:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f8:	e8 c6 d8 ff ff       	call   c0007dc3 <Phys::allocatePage()>
c000a4fd:	89 e9                	mov    ecx,ebp
c000a4ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a501:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a505:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a507:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a50d:	09 c8                	or     eax,ecx
c000a50f:	83 c8 02             	or     eax,0x2
c000a512:	89 02                	mov    DWORD PTR [edx],eax
c000a514:	0f 20 d8             	mov    eax,cr3
c000a517:	0f 22 d8             	mov    cr3,eax
c000a51a:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51e:	89 df                	mov    edi,ebx
c000a520:	89 e9                	mov    ecx,ebp
c000a522:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a524:	b0 01                	mov    al,0x1
c000a526:	83 c4 10             	add    esp,0x10
c000a529:	e9 9e fe ff ff       	jmp    c000a3cc <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52e:	55                   	push   ebp
c000a52f:	57                   	push   edi
c000a530:	56                   	push   esi
c000a531:	53                   	push   ebx
c000a532:	83 ec 28             	sub    esp,0x28
c000a535:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a539:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a53d:	50                   	push   eax
c000a53e:	e8 ce f0 ff ff       	call   c0009611 <Virt::allocateKernelVirtualPages(int)>
c000a543:	83 c4 0c             	add    esp,0xc
c000a546:	89 c5                	mov    ebp,eax
c000a548:	6a 07                	push   0x7
c000a54a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54e:	52                   	push   edx
c000a54f:	56                   	push   esi
c000a550:	e8 d3 f8 ff ff       	call   c0009e28 <VAS::allocatePages(int, int)>
c000a555:	83 c4 10             	add    esp,0x10
c000a558:	89 c7                	mov    edi,eax
c000a55a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55e:	85 c9                	test   ecx,ecx
c000a560:	74 2f                	je     c000a591 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a562:	31 db                	xor    ebx,ebx
c000a564:	e8 5a d8 ff ff       	call   c0007dc3 <Phys::allocatePage()>
c000a569:	83 c3 01             	add    ebx,0x1
c000a56c:	6a 03                	push   0x3
c000a56e:	55                   	push   ebp
c000a56f:	50                   	push   eax
c000a570:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a574:	56                   	push   esi
c000a575:	e8 aa f7 ff ff       	call   c0009d24 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a57a:	6a 07                	push   0x7
c000a57c:	57                   	push   edi
c000a57d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a581:	50                   	push   eax
c000a582:	56                   	push   esi
c000a583:	e8 9c f7 ff ff       	call   c0009d24 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a588:	83 c4 20             	add    esp,0x20
c000a58b:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58f:	75 d3                	jne    c000a564 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a591:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a595:	89 28                	mov    DWORD PTR [eax],ebp
c000a597:	83 c4 1c             	add    esp,0x1c
c000a59a:	89 f8                	mov    eax,edi
c000a59c:	5b                   	pop    ebx
c000a59d:	5e                   	pop    esi
c000a59e:	5f                   	pop    edi
c000a59f:	5d                   	pop    ebp
c000a5a0:	c3                   	ret    
c000a5a1:	90                   	nop

c000a5a2 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a5a2:	53                   	push   ebx
c000a5a3:	83 ec 14             	sub    esp,0x14
c000a5a6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5aa:	68 3c 12 02 c0       	push   0xc002123c
c000a5af:	e8 95 03 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000a5b4:	c7 04 24 9c 12 02 c0 	mov    DWORD PTR [esp],0xc002129c
c000a5bb:	e8 89 03 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000a5c0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c4:	83 c4 18             	add    esp,0x18
c000a5c7:	5b                   	pop    ebx
c000a5c8:	e9 62 f3 ff ff       	jmp    c000992f <Virt::freeKernelVirtualPages(unsigned long)>
c000a5cd:	90                   	nop

c000a5ce <VAS::scanForEviction()>:
c000a5ce:	57                   	push   edi
c000a5cf:	56                   	push   esi
c000a5d0:	31 f6                	xor    esi,esi
c000a5d2:	53                   	push   ebx
c000a5d3:	83 ec 10             	sub    esp,0x10
c000a5d6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5da:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5dd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5e3:	75 0e                	jne    c000a5f3 <VAS::scanForEviction()+0x25>
c000a5e5:	89 da                	mov    edx,ebx
c000a5e7:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5ea:	c1 ea 16             	shr    edx,0x16
c000a5ed:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5f1:	74 57                	je     c000a64a <VAS::scanForEviction()+0x7c>
c000a5f3:	53                   	push   ebx
c000a5f4:	57                   	push   edi
c000a5f5:	e8 16 f3 ff ff       	call   c0009910 <VAS::getPageTableEntry(unsigned long)>
c000a5fa:	5a                   	pop    edx
c000a5fb:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5fd:	59                   	pop    ecx
c000a5fe:	89 d1                	mov    ecx,edx
c000a600:	c1 e9 0c             	shr    ecx,0xc
c000a603:	74 10                	je     c000a615 <VAS::scanForEviction()+0x47>
c000a605:	89 d1                	mov    ecx,edx
c000a607:	81 e1 01 08 00 00    	and    ecx,0x801
c000a60d:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a613:	74 40                	je     c000a655 <VAS::scanForEviction()+0x87>
c000a615:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a61b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a621:	76 2d                	jbe    c000a650 <VAS::scanForEviction()+0x82>
c000a623:	83 c6 01             	add    esi,0x1
c000a626:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a62d:	83 fe 03             	cmp    esi,0x3
c000a630:	74 32                	je     c000a664 <VAS::scanForEviction()+0x96>
c000a632:	31 db                	xor    ebx,ebx
c000a634:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a63a:	75 b7                	jne    c000a5f3 <VAS::scanForEviction()+0x25>
c000a63c:	89 da                	mov    edx,ebx
c000a63e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a641:	c1 ea 16             	shr    edx,0x16
c000a644:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a648:	75 a9                	jne    c000a5f3 <VAS::scanForEviction()+0x25>
c000a64a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a650:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a653:	eb 88                	jmp    c000a5dd <VAS::scanForEviction()+0xf>
c000a655:	f6 c2 20             	test   dl,0x20
c000a658:	74 13                	je     c000a66d <VAS::scanForEviction()+0x9f>
c000a65a:	83 e2 df             	and    edx,0xffffffdf
c000a65d:	89 10                	mov    DWORD PTR [eax],edx
c000a65f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a662:	eb b1                	jmp    c000a615 <VAS::scanForEviction()+0x47>
c000a664:	83 c4 10             	add    esp,0x10
c000a667:	31 c0                	xor    eax,eax
c000a669:	5b                   	pop    ebx
c000a66a:	5e                   	pop    esi
c000a66b:	5f                   	pop    edi
c000a66c:	c3                   	ret    
c000a66d:	83 ec 08             	sub    esp,0x8
c000a670:	89 d0                	mov    eax,edx
c000a672:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a677:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a67b:	53                   	push   ebx
c000a67c:	68 f1 13 02 c0       	push   0xc00213f1
c000a681:	e8 c3 02 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000a686:	58                   	pop    eax
c000a687:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a68a:	5a                   	pop    edx
c000a68b:	51                   	push   ecx
c000a68c:	57                   	push   edi
c000a68d:	e8 24 fc ff ff       	call   c000a2b6 <VAS::evict(unsigned long)>
c000a692:	5b                   	pop    ebx
c000a693:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a696:	5e                   	pop    esi
c000a697:	50                   	push   eax
c000a698:	68 05 14 02 c0       	push   0xc0021405
c000a69d:	e8 a7 02 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000a6a2:	58                   	pop    eax
c000a6a3:	5a                   	pop    edx
c000a6a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a8:	50                   	push   eax
c000a6a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6ad:	68 18 14 02 c0       	push   0xc0021418
c000a6b2:	e8 92 02 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000a6b7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c7:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6ca:	83 c4 10             	add    esp,0x10
c000a6cd:	5b                   	pop    ebx
c000a6ce:	5e                   	pop    esi
c000a6cf:	5f                   	pop    edi
c000a6d0:	c3                   	ret    

c000a6d1 <mapVASFirstTime>:
c000a6d1:	55                   	push   ebp
c000a6d2:	57                   	push   edi
c000a6d3:	56                   	push   esi
c000a6d4:	53                   	push   ebx
c000a6d5:	83 ec 0c             	sub    esp,0xc
c000a6d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6dd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6e0:	83 fa 01             	cmp    edx,0x1
c000a6e3:	0f 84 cb 00 00 00    	je     c000a7b4 <mapVASFirstTime+0xe3>
c000a6e9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6ec:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6ef:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f4:	c1 e5 15             	shl    ebp,0x15
c000a6f7:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6fc:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a702:	29 eb                	sub    ebx,ebp
c000a704:	29 ef                	sub    edi,ebp
c000a706:	e8 b8 d6 ff ff       	call   c0007dc3 <Phys::allocatePage()>
c000a70b:	83 ec 0c             	sub    esp,0xc
c000a70e:	68 03 04 00 00       	push   0x403
c000a713:	6a 01                	push   0x1
c000a715:	53                   	push   ebx
c000a716:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a71c:	50                   	push   eax
c000a71d:	56                   	push   esi
c000a71e:	e8 fb f7 ff ff       	call   c0009f1e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a723:	83 c4 20             	add    esp,0x20
c000a726:	39 fb                	cmp    ebx,edi
c000a728:	75 dc                	jne    c000a706 <mapVASFirstTime+0x35>
c000a72a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a734:	29 eb                	sub    ebx,ebp
c000a736:	29 ef                	sub    edi,ebp
c000a738:	e8 86 d6 ff ff       	call   c0007dc3 <Phys::allocatePage()>
c000a73d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a741:	83 fa 01             	cmp    edx,0x1
c000a744:	19 d2                	sbb    edx,edx
c000a746:	83 ec 0c             	sub    esp,0xc
c000a749:	83 e2 04             	and    edx,0x4
c000a74c:	81 c2 03 04 00 00    	add    edx,0x403
c000a752:	52                   	push   edx
c000a753:	6a 01                	push   0x1
c000a755:	53                   	push   ebx
c000a756:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a75c:	50                   	push   eax
c000a75d:	56                   	push   esi
c000a75e:	e8 bb f7 ff ff       	call   c0009f1e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a763:	83 c4 20             	add    esp,0x20
c000a766:	39 df                	cmp    edi,ebx
c000a768:	75 ce                	jne    c000a738 <mapVASFirstTime+0x67>
c000a76a:	83 ec 0c             	sub    esp,0xc
c000a76d:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a772:	6a 04                	push   0x4
c000a774:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a77a:	6a ff                	push   0xffffffff
c000a77c:	c1 eb 0c             	shr    ebx,0xc
c000a77f:	53                   	push   ebx
c000a780:	68 00 50 02 c0       	push   0xc0025000
c000a785:	56                   	push   esi
c000a786:	e8 1f f3 ff ff       	call   c0009aaa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a78b:	83 c4 14             	add    esp,0x14
c000a78e:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a793:	6a 04                	push   0x4
c000a795:	6a ff                	push   0xffffffff
c000a797:	53                   	push   ebx
c000a798:	68 00 50 02 c0       	push   0xc0025000
c000a79d:	50                   	push   eax
c000a79e:	e8 07 f3 ff ff       	call   c0009aaa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a7a3:	0f 20 d8             	mov    eax,cr3
c000a7a6:	0f 22 d8             	mov    cr3,eax
c000a7a9:	83 c4 20             	add    esp,0x20
c000a7ac:	83 c4 0c             	add    esp,0xc
c000a7af:	5b                   	pop    ebx
c000a7b0:	5e                   	pop    esi
c000a7b1:	5f                   	pop    edi
c000a7b2:	5d                   	pop    ebp
c000a7b3:	c3                   	ret    
c000a7b4:	83 ec 0c             	sub    esp,0xc
c000a7b7:	68 25 14 02 c0       	push   0xc0021425
c000a7bc:	e8 88 01 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000a7c1:	83 c4 10             	add    esp,0x10
c000a7c4:	83 c4 0c             	add    esp,0xc
c000a7c7:	5b                   	pop    ebx
c000a7c8:	5e                   	pop    esi
c000a7c9:	5f                   	pop    edi
c000a7ca:	5d                   	pop    ebp
c000a7cb:	c3                   	ret    

c000a7cc <__cxa_atexit>:
c000a7cc:	31 c0                	xor    eax,eax
c000a7ce:	c3                   	ret    

c000a7cf <__cxa_finalize>:
c000a7cf:	c3                   	ret    

c000a7d0 <__stack_chk_fail>:
c000a7d0:	55                   	push   ebp
c000a7d1:	89 e5                	mov    ebp,esp
c000a7d3:	83 ec 10             	sub    esp,0x10
c000a7d6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d9:	68 3e 14 02 c0       	push   0xc002143e
c000a7de:	e8 66 01 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000a7e3:	58                   	pop    eax
c000a7e4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e7:	5a                   	pop    edx
c000a7e8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7eb:	68 3e 14 02 c0       	push   0xc002143e
c000a7f0:	e8 54 01 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000a7f5:	c7 04 24 46 14 02 c0 	mov    DWORD PTR [esp],0xc0021446
c000a7fc:	e8 c2 6e 00 00       	call   c00116c3 <KePanic(char const*)>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	c9                   	leave  
c000a805:	c3                   	ret    

c000a806 <__cxa_pure_virtual>:
c000a806:	83 ec 18             	sub    esp,0x18
c000a809:	68 5e 14 02 c0       	push   0xc002145e
c000a80e:	e8 b0 6e 00 00       	call   c00116c3 <KePanic(char const*)>
c000a813:	83 c4 1c             	add    esp,0x1c
c000a816:	c3                   	ret    

c000a817 <operator new[](unsigned long)>:
c000a817:	e9 9e d2 ff ff       	jmp    c0007aba <malloc>

c000a81c <operator delete(void*, unsigned long)>:
c000a81c:	e9 b9 d2 ff ff       	jmp    c0007ada <rfree>

c000a821 <operator delete[](void*)>:
c000a821:	e9 b4 d2 ff ff       	jmp    c0007ada <rfree>

c000a826 <operator delete[](void*, unsigned long)>:
c000a826:	e9 af d2 ff ff       	jmp    c0007ada <rfree>

c000a82b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a82b:	55                   	push   ebp
c000a82c:	57                   	push   edi
c000a82d:	56                   	push   esi
c000a82e:	be 67 0f 02 c0       	mov    esi,0xc0020f67
c000a833:	53                   	push   ebx
c000a834:	83 ec 20             	sub    esp,0x20
c000a837:	a0 66 0f 02 c0       	mov    al,ds:0xc0020f66
c000a83c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a840:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a844:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a848:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a84c:	b8 10 00 00 00       	mov    eax,0x10
c000a851:	f7 c7 02 00 00 00    	test   edi,0x2
c000a857:	75 60                	jne    c000a8b9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a859:	89 c1                	mov    ecx,eax
c000a85b:	c1 e9 02             	shr    ecx,0x2
c000a85e:	fc                   	cld    
c000a85f:	31 d2                	xor    edx,edx
c000a861:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a863:	a8 02                	test   al,0x2
c000a865:	74 0b                	je     c000a872 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a867:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a86a:	66 89 17             	mov    WORD PTR [edi],dx
c000a86d:	ba 02 00 00 00       	mov    edx,0x2
c000a872:	a8 01                	test   al,0x1
c000a874:	74 06                	je     c000a87c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a876:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a879:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a87c:	89 ee                	mov    esi,ebp
c000a87e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a882:	eb 02                	jmp    c000a886 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a884:	89 c6                	mov    esi,eax
c000a886:	31 d2                	xor    edx,edx
c000a888:	83 c1 01             	add    ecx,0x1
c000a88b:	89 f0                	mov    eax,esi
c000a88d:	f7 f3                	div    ebx
c000a88f:	39 de                	cmp    esi,ebx
c000a891:	73 f1                	jae    c000a884 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a893:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a896:	eb 02                	jmp    c000a89a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a898:	89 c5                	mov    ebp,eax
c000a89a:	31 d2                	xor    edx,edx
c000a89c:	83 e9 01             	sub    ecx,0x1
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	f7 f3                	div    ebx
c000a8a3:	39 dd                	cmp    ebp,ebx
c000a8a5:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a9:	88 11                	mov    BYTE PTR [ecx],dl
c000a8ab:	73 eb                	jae    c000a898 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8b1:	83 c4 20             	add    esp,0x20
c000a8b4:	5b                   	pop    ebx
c000a8b5:	5e                   	pop    esi
c000a8b6:	5f                   	pop    edi
c000a8b7:	5d                   	pop    ebp
c000a8b8:	c3                   	ret    
c000a8b9:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8bc:	83 c7 02             	add    edi,0x2
c000a8bf:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8c3:	83 c6 02             	add    esi,0x2
c000a8c6:	83 e8 02             	sub    eax,0x2
c000a8c9:	eb 8e                	jmp    c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8cb <Dbg::logc(char)>:
c000a8cb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cf:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a8d6:	75 12                	jne    c000a8ea <Dbg::logc(char)+0x1f>
c000a8d8:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8dd:	ec                   	in     al,dx
c000a8de:	a8 20                	test   al,0x20
c000a8e0:	74 fb                	je     c000a8dd <Dbg::logc(char)+0x12>
c000a8e2:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e7:	88 c8                	mov    al,cl
c000a8e9:	ee                   	out    dx,al
c000a8ea:	c3                   	ret    

c000a8eb <Dbg::logs(char*)>:
c000a8eb:	53                   	push   ebx
c000a8ec:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8f0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8f3:	85 c0                	test   eax,eax
c000a8f5:	74 11                	je     c000a908 <Dbg::logs(char*)+0x1d>
c000a8f7:	83 c3 01             	add    ebx,0x1
c000a8fa:	50                   	push   eax
c000a8fb:	e8 cb ff ff ff       	call   c000a8cb <Dbg::logc(char)>
c000a900:	58                   	pop    eax
c000a901:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a904:	85 c0                	test   eax,eax
c000a906:	75 ef                	jne    c000a8f7 <Dbg::logs(char*)+0xc>
c000a908:	5b                   	pop    ebx
c000a909:	c3                   	ret    

c000a90a <Dbg::logWriteInt(unsigned int)>:
c000a90a:	83 ec 10             	sub    esp,0x10
c000a90d:	6a 0a                	push   0xa
c000a90f:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a913:	50                   	push   eax
c000a914:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a918:	50                   	push   eax
c000a919:	e8 0d ff ff ff       	call   c000a82b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91e:	50                   	push   eax
c000a91f:	e8 c7 ff ff ff       	call   c000a8eb <Dbg::logs(char*)>
c000a924:	83 c4 20             	add    esp,0x20
c000a927:	c3                   	ret    

c000a928 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a928:	83 ec 10             	sub    esp,0x10
c000a92b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92f:	50                   	push   eax
c000a930:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a934:	50                   	push   eax
c000a935:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a939:	52                   	push   edx
c000a93a:	e8 ec fe ff ff       	call   c000a82b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93f:	50                   	push   eax
c000a940:	e8 a6 ff ff ff       	call   c000a8eb <Dbg::logs(char*)>
c000a945:	83 c4 20             	add    esp,0x20
c000a948:	c3                   	ret    

c000a949 <Dbg::kprintf(char const*, ...)>:
c000a949:	55                   	push   ebp
c000a94a:	57                   	push   edi
c000a94b:	56                   	push   esi
c000a94c:	53                   	push   ebx
c000a94d:	83 ec 0c             	sub    esp,0xc
c000a950:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a954:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a95b:	74 08                	je     c000a965 <Dbg::kprintf(char const*, ...)+0x1c>
c000a95d:	83 c4 0c             	add    esp,0xc
c000a960:	5b                   	pop    ebx
c000a961:	5e                   	pop    esi
c000a962:	5f                   	pop    edi
c000a963:	5d                   	pop    ebp
c000a964:	c3                   	ret    
c000a965:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a969:	31 ff                	xor    edi,edi
c000a96b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a972:	85 c0                	test   eax,eax
c000a974:	74 e7                	je     c000a95d <Dbg::kprintf(char const*, ...)+0x14>
c000a976:	8d 77 01             	lea    esi,[edi+0x1]
c000a979:	83 f8 25             	cmp    eax,0x25
c000a97c:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97f:	75 47                	jne    c000a9c8 <Dbg::kprintf(char const*, ...)+0x7f>
c000a981:	83 c7 02             	add    edi,0x2
c000a984:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a987:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a98a:	83 e8 25             	sub    eax,0x25
c000a98d:	0f b6 c0             	movzx  eax,al
c000a990:	83 f8 53             	cmp    eax,0x53
c000a993:	0f 87 ce 00 00 00    	ja     c000aa67 <Dbg::kprintf(char const*, ...)+0x11e>
c000a999:	ff 24 85 74 14 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdeb8c]
c000a9a0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a4:	89 c8                	mov    eax,ecx
c000a9a6:	83 c1 04             	add    ecx,0x4
c000a9a9:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ad:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9af:	55                   	push   ebp
c000a9b0:	e8 55 ff ff ff       	call   c000a90a <Dbg::logWriteInt(unsigned int)>
c000a9b5:	58                   	pop    eax
c000a9b6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b9:	85 c0                	test   eax,eax
c000a9bb:	74 a0                	je     c000a95d <Dbg::kprintf(char const*, ...)+0x14>
c000a9bd:	8d 77 01             	lea    esi,[edi+0x1]
c000a9c0:	83 f8 25             	cmp    eax,0x25
c000a9c3:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c6:	74 b9                	je     c000a981 <Dbg::kprintf(char const*, ...)+0x38>
c000a9c8:	50                   	push   eax
c000a9c9:	89 f7                	mov    edi,esi
c000a9cb:	e8 fb fe ff ff       	call   c000a8cb <Dbg::logc(char)>
c000a9d0:	89 ee                	mov    esi,ebp
c000a9d2:	58                   	pop    eax
c000a9d3:	eb e1                	jmp    c000a9b6 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d9:	89 c8                	mov    eax,ecx
c000a9db:	83 c1 04             	add    ecx,0x4
c000a9de:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9e0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e4:	50                   	push   eax
c000a9e5:	e8 01 ff ff ff       	call   c000a8eb <Dbg::logs(char*)>
c000a9ea:	58                   	pop    eax
c000a9eb:	eb c9                	jmp    c000a9b6 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ed:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9f1:	89 d0                	mov    eax,edx
c000a9f3:	83 c2 04             	add    edx,0x4
c000a9f6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9fa:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9fc:	50                   	push   eax
c000a9fd:	e8 08 ff ff ff       	call   c000a90a <Dbg::logWriteInt(unsigned int)>
c000aa02:	58                   	pop    eax
c000aa03:	eb b1                	jmp    c000a9b6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa05:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa09:	89 d0                	mov    eax,edx
c000aa0b:	83 c2 04             	add    edx,0x4
c000aa0e:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa11:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa15:	50                   	push   eax
c000aa16:	e8 b0 fe ff ff       	call   c000a8cb <Dbg::logc(char)>
c000aa1b:	58                   	pop    eax
c000aa1c:	eb 98                	jmp    c000a9b6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa22:	89 c8                	mov    eax,ecx
c000aa24:	83 c1 04             	add    ecx,0x4
c000aa27:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa2b:	6a 10                	push   0x10
c000aa2d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2f:	51                   	push   ecx
c000aa30:	e8 f3 fe ff ff       	call   c000a928 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa35:	5d                   	pop    ebp
c000aa36:	58                   	pop    eax
c000aa37:	e9 7a ff ff ff       	jmp    c000a9b6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa40:	89 d0                	mov    eax,edx
c000aa42:	83 c2 08             	add    edx,0x8
c000aa45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa49:	6a 10                	push   0x10
c000aa4b:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa4d:	50                   	push   eax
c000aa4e:	e8 d5 fe ff ff       	call   c000a928 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa53:	58                   	pop    eax
c000aa54:	5a                   	pop    edx
c000aa55:	e9 5c ff ff ff       	jmp    c000a9b6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa5a:	6a 25                	push   0x25
c000aa5c:	e8 6a fe ff ff       	call   c000a8cb <Dbg::logc(char)>
c000aa61:	5a                   	pop    edx
c000aa62:	e9 4f ff ff ff       	jmp    c000a9b6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa67:	6a 25                	push   0x25
c000aa69:	e8 5d fe ff ff       	call   c000a8cb <Dbg::logc(char)>
c000aa6e:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa72:	50                   	push   eax
c000aa73:	e8 53 fe ff ff       	call   c000a8cb <Dbg::logc(char)>
c000aa78:	5a                   	pop    edx
c000aa79:	59                   	pop    ecx
c000aa7a:	e9 37 ff ff ff       	jmp    c000a9b6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7f:	90                   	nop

c000aa80 <KiUbsanPrintDetails(char const*, void*)>:
c000aa80:	83 ec 1c             	sub    esp,0x1c
c000aa83:	83 ec 08             	sub    esp,0x8
c000aa86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa8a:	68 c4 15 02 c0       	push   0xc00215c4
c000aa8f:	e8 b5 fe ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000aa94:	83 c4 10             	add    esp,0x10
c000aa97:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aaa3:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa5:	83 ec 08             	sub    esp,0x8
c000aaa8:	50                   	push   eax
c000aaa9:	68 d8 15 02 c0       	push   0xc00215d8
c000aaae:	e8 96 fe ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000aab3:	83 c4 10             	add    esp,0x10
c000aab6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aaba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aabd:	83 ec 08             	sub    esp,0x8
c000aac0:	50                   	push   eax
c000aac1:	68 e2 15 02 c0       	push   0xc00215e2
c000aac6:	e8 7e fe ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000aacb:	83 c4 10             	add    esp,0x10
c000aace:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aad2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad5:	83 ec 08             	sub    esp,0x8
c000aad8:	50                   	push   eax
c000aad9:	68 ec 15 02 c0       	push   0xc00215ec
c000aade:	e8 66 fe ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000aae3:	83 c4 10             	add    esp,0x10
c000aae6:	90                   	nop
c000aae7:	83 c4 1c             	add    esp,0x1c
c000aaea:	c3                   	ret    
c000aaeb:	90                   	nop

c000aaec <__ubsan_handle_type_mismatch_v1>:
c000aaec:	83 ec 0c             	sub    esp,0xc
c000aaef:	83 ec 08             	sub    esp,0x8
c000aaf2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf6:	68 30 17 02 c0       	push   0xc0021730
c000aafb:	e8 80 ff ff ff       	call   c000aa80 <KiUbsanPrintDetails(char const*, void*)>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab08:	75 16                	jne    c000ab20 <__ubsan_handle_type_mismatch_v1+0x34>
c000ab0a:	83 ec 0c             	sub    esp,0xc
c000ab0d:	68 f6 15 02 c0       	push   0xc00215f6
c000ab12:	e8 32 fe ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000ab17:	83 c4 10             	add    esp,0x10
c000ab1a:	e9 91 00 00 00       	jmp    c000abb0 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1f:	90                   	nop
c000ab20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab24:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab27:	85 c0                	test   eax,eax
c000ab29:	74 29                	je     c000ab54 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab32:	83 e8 01             	sub    eax,0x1
c000ab35:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab39:	75 19                	jne    c000ab54 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab3b:	83 ec 08             	sub    esp,0x8
c000ab3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab42:	68 50 17 02 c0       	push   0xc0021750
c000ab47:	e8 fd fd ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000ab4c:	83 c4 10             	add    esp,0x10
c000ab4f:	eb 5f                	jmp    c000abb0 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab51:	8d 76 00             	lea    esi,[esi+0x0]
c000ab54:	83 ec 0c             	sub    esp,0xc
c000ab57:	68 0b 16 02 c0       	push   0xc002160b
c000ab5c:	e8 e8 fd ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000ab61:	83 c4 10             	add    esp,0x10
c000ab64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab68:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab6b:	0f b6 c0             	movzx  eax,al
c000ab6e:	83 ec 08             	sub    esp,0x8
c000ab71:	50                   	push   eax
c000ab72:	68 25 16 02 c0       	push   0xc0021625
c000ab77:	e8 cd fd ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000ab7c:	83 c4 10             	add    esp,0x10
c000ab7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab83:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab86:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab91:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab94:	0f b6 c0             	movzx  eax,al
c000ab97:	8b 04 85 60 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7a0]
c000ab9e:	51                   	push   ecx
c000ab9f:	52                   	push   edx
c000aba0:	50                   	push   eax
c000aba1:	68 78 17 02 c0       	push   0xc0021778
c000aba6:	e8 9e fd ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000abab:	83 c4 10             	add    esp,0x10
c000abae:	66 90                	xchg   ax,ax
c000abb0:	83 ec 0c             	sub    esp,0xc
c000abb3:	68 30 17 02 c0       	push   0xc0021730
c000abb8:	e8 06 6b 00 00       	call   c00116c3 <KePanic(char const*)>
c000abbd:	83 c4 10             	add    esp,0x10
c000abc0:	90                   	nop
c000abc1:	83 c4 0c             	add    esp,0xc
c000abc4:	c3                   	ret    
c000abc5:	8d 76 00             	lea    esi,[esi+0x0]

c000abc8 <__ubsan_handle_pointer_overflow>:
c000abc8:	83 ec 0c             	sub    esp,0xc
c000abcb:	83 ec 08             	sub    esp,0x8
c000abce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abd2:	68 c0 17 02 c0       	push   0xc00217c0
c000abd7:	e8 a4 fe ff ff       	call   c000aa80 <KiUbsanPrintDetails(char const*, void*)>
c000abdc:	83 c4 10             	add    esp,0x10
c000abdf:	83 ec 0c             	sub    esp,0xc
c000abe2:	68 c0 17 02 c0       	push   0xc00217c0
c000abe7:	e8 d7 6a 00 00       	call   c00116c3 <KePanic(char const*)>
c000abec:	83 c4 10             	add    esp,0x10
c000abef:	90                   	nop
c000abf0:	83 c4 0c             	add    esp,0xc
c000abf3:	c3                   	ret    

c000abf4 <__ubsan_handle_out_of_bounds>:
c000abf4:	83 ec 0c             	sub    esp,0xc
c000abf7:	83 ec 08             	sub    esp,0x8
c000abfa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfe:	68 30 16 02 c0       	push   0xc0021630
c000ac03:	e8 78 fe ff ff       	call   c000aa80 <KiUbsanPrintDetails(char const*, void*)>
c000ac08:	83 c4 10             	add    esp,0x10
c000ac0b:	83 ec 0c             	sub    esp,0xc
c000ac0e:	68 30 16 02 c0       	push   0xc0021630
c000ac13:	e8 ab 6a 00 00       	call   c00116c3 <KePanic(char const*)>
c000ac18:	83 c4 10             	add    esp,0x10
c000ac1b:	90                   	nop
c000ac1c:	83 c4 0c             	add    esp,0xc
c000ac1f:	c3                   	ret    

c000ac20 <__ubsan_handle_add_overflow>:
c000ac20:	83 ec 0c             	sub    esp,0xc
c000ac23:	83 ec 08             	sub    esp,0x8
c000ac26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac2a:	68 4d 16 02 c0       	push   0xc002164d
c000ac2f:	e8 4c fe ff ff       	call   c000aa80 <KiUbsanPrintDetails(char const*, void*)>
c000ac34:	83 c4 10             	add    esp,0x10
c000ac37:	83 ec 0c             	sub    esp,0xc
c000ac3a:	68 4d 16 02 c0       	push   0xc002164d
c000ac3f:	e8 7f 6a 00 00       	call   c00116c3 <KePanic(char const*)>
c000ac44:	83 c4 10             	add    esp,0x10
c000ac47:	90                   	nop
c000ac48:	83 c4 0c             	add    esp,0xc
c000ac4b:	c3                   	ret    

c000ac4c <__ubsan_handle_load_invalid_value>:
c000ac4c:	83 ec 0c             	sub    esp,0xc
c000ac4f:	83 ec 08             	sub    esp,0x8
c000ac52:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac56:	68 e0 17 02 c0       	push   0xc00217e0
c000ac5b:	e8 20 fe ff ff       	call   c000aa80 <KiUbsanPrintDetails(char const*, void*)>
c000ac60:	83 c4 10             	add    esp,0x10
c000ac63:	83 ec 0c             	sub    esp,0xc
c000ac66:	68 e0 17 02 c0       	push   0xc00217e0
c000ac6b:	e8 53 6a 00 00       	call   c00116c3 <KePanic(char const*)>
c000ac70:	83 c4 10             	add    esp,0x10
c000ac73:	90                   	nop
c000ac74:	83 c4 0c             	add    esp,0xc
c000ac77:	c3                   	ret    

c000ac78 <__ubsan_handle_divrem_overflow>:
c000ac78:	83 ec 0c             	sub    esp,0xc
c000ac7b:	83 ec 08             	sub    esp,0x8
c000ac7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac82:	68 04 18 02 c0       	push   0xc0021804
c000ac87:	e8 f4 fd ff ff       	call   c000aa80 <KiUbsanPrintDetails(char const*, void*)>
c000ac8c:	83 c4 10             	add    esp,0x10
c000ac8f:	83 ec 0c             	sub    esp,0xc
c000ac92:	68 04 18 02 c0       	push   0xc0021804
c000ac97:	e8 27 6a 00 00       	call   c00116c3 <KePanic(char const*)>
c000ac9c:	83 c4 10             	add    esp,0x10
c000ac9f:	90                   	nop
c000aca0:	83 c4 0c             	add    esp,0xc
c000aca3:	c3                   	ret    

c000aca4 <__ubsan_handle_mul_overflow>:
c000aca4:	83 ec 0c             	sub    esp,0xc
c000aca7:	83 ec 08             	sub    esp,0x8
c000acaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acae:	68 69 16 02 c0       	push   0xc0021669
c000acb3:	e8 c8 fd ff ff       	call   c000aa80 <KiUbsanPrintDetails(char const*, void*)>
c000acb8:	83 c4 10             	add    esp,0x10
c000acbb:	83 ec 0c             	sub    esp,0xc
c000acbe:	68 69 16 02 c0       	push   0xc0021669
c000acc3:	e8 fb 69 00 00       	call   c00116c3 <KePanic(char const*)>
c000acc8:	83 c4 10             	add    esp,0x10
c000accb:	90                   	nop
c000accc:	83 c4 0c             	add    esp,0xc
c000accf:	c3                   	ret    

c000acd0 <__ubsan_handle_sub_overflow>:
c000acd0:	83 ec 0c             	sub    esp,0xc
c000acd3:	83 ec 08             	sub    esp,0x8
c000acd6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acda:	68 85 16 02 c0       	push   0xc0021685
c000acdf:	e8 9c fd ff ff       	call   c000aa80 <KiUbsanPrintDetails(char const*, void*)>
c000ace4:	83 c4 10             	add    esp,0x10
c000ace7:	83 ec 0c             	sub    esp,0xc
c000acea:	68 85 16 02 c0       	push   0xc0021685
c000acef:	e8 cf 69 00 00       	call   c00116c3 <KePanic(char const*)>
c000acf4:	83 c4 10             	add    esp,0x10
c000acf7:	90                   	nop
c000acf8:	83 c4 0c             	add    esp,0xc
c000acfb:	c3                   	ret    

c000acfc <__ubsan_handle_shift_out_of_bounds>:
c000acfc:	83 ec 0c             	sub    esp,0xc
c000acff:	83 ec 08             	sub    esp,0x8
c000ad02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad06:	68 24 18 02 c0       	push   0xc0021824
c000ad0b:	e8 70 fd ff ff       	call   c000aa80 <KiUbsanPrintDetails(char const*, void*)>
c000ad10:	83 c4 10             	add    esp,0x10
c000ad13:	83 ec 0c             	sub    esp,0xc
c000ad16:	68 24 18 02 c0       	push   0xc0021824
c000ad1b:	e8 a3 69 00 00       	call   c00116c3 <KePanic(char const*)>
c000ad20:	83 c4 10             	add    esp,0x10
c000ad23:	90                   	nop
c000ad24:	83 c4 0c             	add    esp,0xc
c000ad27:	c3                   	ret    

c000ad28 <__ubsan_handle_negate_overflow>:
c000ad28:	83 ec 0c             	sub    esp,0xc
c000ad2b:	83 ec 08             	sub    esp,0x8
c000ad2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad32:	68 48 18 02 c0       	push   0xc0021848
c000ad37:	e8 44 fd ff ff       	call   c000aa80 <KiUbsanPrintDetails(char const*, void*)>
c000ad3c:	83 c4 10             	add    esp,0x10
c000ad3f:	83 ec 0c             	sub    esp,0xc
c000ad42:	68 48 18 02 c0       	push   0xc0021848
c000ad47:	e8 77 69 00 00       	call   c00116c3 <KePanic(char const*)>
c000ad4c:	83 c4 10             	add    esp,0x10
c000ad4f:	90                   	nop
c000ad50:	83 c4 0c             	add    esp,0xc
c000ad53:	c3                   	ret    

c000ad54 <KiIsHashInTable(unsigned short)>:
c000ad54:	0f b7 d0             	movzx  edx,ax
c000ad57:	83 e0 07             	and    eax,0x7
c000ad5a:	c1 fa 03             	sar    edx,0x3
c000ad5d:	88 c1                	mov    cl,al
c000ad5f:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad66:	d3 fa                	sar    edx,cl
c000ad68:	89 d0                	mov    eax,edx
c000ad6a:	83 e0 01             	and    eax,0x1
c000ad6d:	c3                   	ret    

c000ad6e <KiSetHashInTable(unsigned short, bool)>:
c000ad6e:	56                   	push   esi
c000ad6f:	53                   	push   ebx
c000ad70:	0f b7 d8             	movzx  ebx,ax
c000ad73:	83 e0 07             	and    eax,0x7
c000ad76:	c1 fb 03             	sar    ebx,0x3
c000ad79:	89 c1                	mov    ecx,eax
c000ad7b:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ad82:	b8 01 00 00 00       	mov    eax,0x1
c000ad87:	d3 e0                	shl    eax,cl
c000ad89:	84 d2                	test   dl,dl
c000ad8b:	74 04                	je     c000ad91 <KiSetHashInTable(unsigned short, bool)+0x23>
c000ad8d:	09 f0                	or     eax,esi
c000ad8f:	eb 04                	jmp    c000ad95 <KiSetHashInTable(unsigned short, bool)+0x27>
c000ad91:	f7 d0                	not    eax
c000ad93:	21 f0                	and    eax,esi
c000ad95:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000ad9b:	5b                   	pop    ebx
c000ad9c:	5e                   	pop    esi
c000ad9d:	c3                   	ret    

c000ad9e <KiFlushSymlinkChanges()>:
c000ad9e:	57                   	push   edi
c000ad9f:	56                   	push   esi
c000ada0:	53                   	push   ebx
c000ada1:	83 ec 1c             	sub    esp,0x1c
c000ada4:	68 14 01 00 00       	push   0x114
c000ada9:	e8 0c cd ff ff       	call   c0007aba <malloc>
c000adae:	83 c4 0c             	add    esp,0xc
c000adb1:	89 c3                	mov    ebx,eax
c000adb3:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000adb9:	68 67 18 02 c0       	push   0xc0021867
c000adbe:	50                   	push   eax
c000adbf:	e8 8c 0d 00 00       	call   c000bb50 <File::File(char const*, Process*)>
c000adc4:	83 c4 10             	add    esp,0x10
c000adc7:	85 db                	test   ebx,ebx
c000adc9:	75 10                	jne    c000addb <KiFlushSymlinkChanges()+0x3d>
c000adcb:	83 ec 0c             	sub    esp,0xc
c000adce:	68 85 18 02 c0       	push   0xc0021885
c000add3:	e8 eb 68 00 00       	call   c00116c3 <KePanic(char const*)>
c000add8:	83 c4 10             	add    esp,0x10
c000addb:	50                   	push   eax
c000addc:	50                   	push   eax
c000addd:	6a 06                	push   0x6
c000addf:	53                   	push   ebx
c000ade0:	e8 89 0d 00 00       	call   c000bb6e <File::open(FileOpenMode)>
c000ade5:	83 c4 10             	add    esp,0x10
c000ade8:	85 c0                	test   eax,eax
c000adea:	74 10                	je     c000adfc <KiFlushSymlinkChanges()+0x5e>
c000adec:	83 ec 0c             	sub    esp,0xc
c000adef:	68 9f 18 02 c0       	push   0xc002189f
c000adf4:	e8 ca 68 00 00       	call   c00116c3 <KePanic(char const*)>
c000adf9:	83 c4 10             	add    esp,0x10
c000adfc:	31 f6                	xor    esi,esi
c000adfe:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000ae04:	7e 70                	jle    c000ae76 <KiFlushSymlinkChanges()+0xd8>
c000ae06:	83 ec 0c             	sub    esp,0xc
c000ae09:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae0b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ae0f:	89 f0                	mov    eax,esi
c000ae11:	57                   	push   edi
c000ae12:	c1 e0 08             	shl    eax,0x8
c000ae15:	05 00 70 02 c0       	add    eax,0xc0027000
c000ae1a:	50                   	push   eax
c000ae1b:	6a 00                	push   0x0
c000ae1d:	68 00 01 00 00       	push   0x100
c000ae22:	53                   	push   ebx
c000ae23:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae26:	83 c4 20             	add    esp,0x20
c000ae29:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae31:	74 10                	je     c000ae43 <KiFlushSymlinkChanges()+0xa5>
c000ae33:	83 ec 0c             	sub    esp,0xc
c000ae36:	68 b9 18 02 c0       	push   0xc00218b9
c000ae3b:	e8 83 68 00 00       	call   c00116c3 <KePanic(char const*)>
c000ae40:	83 c4 10             	add    esp,0x10
c000ae43:	83 ec 0c             	sub    esp,0xc
c000ae46:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae48:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae4f:	57                   	push   edi
c000ae50:	52                   	push   edx
c000ae51:	6a 00                	push   0x0
c000ae53:	6a 08                	push   0x8
c000ae55:	53                   	push   ebx
c000ae56:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae59:	83 c4 20             	add    esp,0x20
c000ae5c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae61:	74 10                	je     c000ae73 <KiFlushSymlinkChanges()+0xd5>
c000ae63:	83 ec 0c             	sub    esp,0xc
c000ae66:	68 d3 18 02 c0       	push   0xc00218d3
c000ae6b:	e8 53 68 00 00       	call   c00116c3 <KePanic(char const*)>
c000ae70:	83 c4 10             	add    esp,0x10
c000ae73:	46                   	inc    esi
c000ae74:	eb 88                	jmp    c000adfe <KiFlushSymlinkChanges()+0x60>
c000ae76:	83 ec 0c             	sub    esp,0xc
c000ae79:	53                   	push   ebx
c000ae7a:	e8 4d 0d 00 00       	call   c000bbcc <File::close()>
c000ae7f:	83 c4 10             	add    esp,0x10
c000ae82:	85 db                	test   ebx,ebx
c000ae84:	74 0c                	je     c000ae92 <KiFlushSymlinkChanges()+0xf4>
c000ae86:	83 ec 0c             	sub    esp,0xc
c000ae89:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae8b:	53                   	push   ebx
c000ae8c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae8f:	83 c4 10             	add    esp,0x10
c000ae92:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae9c:	83 c4 10             	add    esp,0x10
c000ae9f:	5b                   	pop    ebx
c000aea0:	5e                   	pop    esi
c000aea1:	5f                   	pop    edi
c000aea2:	c3                   	ret    

c000aea3 <KiDeinitialiseSymlinks(void*)>:
c000aea3:	e9 f6 fe ff ff       	jmp    c000ad9e <KiFlushSymlinkChanges()>

c000aea8 <KiGetSymlinkHash(char const*)>:
c000aea8:	53                   	push   ebx
c000aea9:	89 c3                	mov    ebx,eax
c000aeab:	83 ec 14             	sub    esp,0x14
c000aeae:	50                   	push   eax
c000aeaf:	e8 bc 56 ff ff       	call   c0000570 <strlen>
c000aeb4:	5a                   	pop    edx
c000aeb5:	59                   	pop    ecx
c000aeb6:	50                   	push   eax
c000aeb7:	53                   	push   ebx
c000aeb8:	e8 88 61 00 00       	call   c0011045 <KeCalculateCRC32(unsigned char*, int)>
c000aebd:	83 c4 18             	add    esp,0x18
c000aec0:	89 c2                	mov    edx,eax
c000aec2:	5b                   	pop    ebx
c000aec3:	c1 ea 10             	shr    edx,0x10
c000aec6:	31 d0                	xor    eax,edx
c000aec8:	c3                   	ret    

c000aec9 <KiCreateSymlinkID()>:
c000aec9:	55                   	push   ebp
c000aeca:	57                   	push   edi
c000aecb:	56                   	push   esi
c000aecc:	53                   	push   ebx
c000aecd:	31 db                	xor    ebx,ebx
c000aecf:	83 ec 1c             	sub    esp,0x1c
c000aed2:	e8 3a 69 00 00       	call   c0011811 <KeRand()>
c000aed7:	43                   	inc    ebx
c000aed8:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000aede:	31 d2                	xor    edx,edx
c000aee0:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000aee3:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000aee7:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000aeed:	c1 e0 1f             	shl    eax,0x1f
c000aef0:	89 d7                	mov    edi,edx
c000aef2:	89 c6                	mov    esi,eax
c000aef4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000aef8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000af00:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000af06:	75 10                	jne    c000af18 <KiCreateSymlinkID()+0x4f>
c000af08:	83 ec 0c             	sub    esp,0xc
c000af0b:	68 ed 18 02 c0       	push   0xc00218ed
c000af10:	e8 ae 67 00 00       	call   c00116c3 <KePanic(char const*)>
c000af15:	83 c4 10             	add    esp,0x10
c000af18:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000af1c:	75 04                	jne    c000af22 <KiCreateSymlinkID()+0x59>
c000af1e:	39 f5                	cmp    ebp,esi
c000af20:	74 b0                	je     c000aed2 <KiCreateSymlinkID()+0x9>
c000af22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af2a:	31 f0                	xor    eax,esi
c000af2c:	83 c4 1c             	add    esp,0x1c
c000af2f:	31 fa                	xor    edx,edi
c000af31:	5b                   	pop    ebx
c000af32:	5e                   	pop    esi
c000af33:	5f                   	pop    edi
c000af34:	5d                   	pop    ebp
c000af35:	c3                   	ret    

c000af36 <KeRegisterSymlink(char const*, unsigned long long)>:
c000af36:	53                   	push   ebx
c000af37:	83 ec 0c             	sub    esp,0xc
c000af3a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af3e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af42:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af46:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af4b:	68 00 01 00 00       	push   0x100
c000af50:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af57:	6a 00                	push   0x0
c000af59:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af60:	c1 e0 08             	shl    eax,0x8
c000af63:	05 00 70 02 c0       	add    eax,0xc0027000
c000af68:	50                   	push   eax
c000af69:	e8 82 55 ff ff       	call   c00004f0 <memset>
c000af6e:	58                   	pop    eax
c000af6f:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af74:	5a                   	pop    edx
c000af75:	c1 e0 08             	shl    eax,0x8
c000af78:	53                   	push   ebx
c000af79:	05 00 70 02 c0       	add    eax,0xc0027000
c000af7e:	50                   	push   eax
c000af7f:	e8 bc 56 ff ff       	call   c0000640 <strcpy>
c000af84:	89 d8                	mov    eax,ebx
c000af86:	e8 1d ff ff ff       	call   c000aea8 <KiGetSymlinkHash(char const*)>
c000af8b:	59                   	pop    ecx
c000af8c:	0f b7 d8             	movzx  ebx,ax
c000af8f:	58                   	pop    eax
c000af90:	53                   	push   ebx
c000af91:	68 f6 18 02 c0       	push   0xc00218f6
c000af96:	e8 ae f9 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000af9b:	89 d8                	mov    eax,ebx
c000af9d:	ba 01 00 00 00       	mov    edx,0x1
c000afa2:	e8 c7 fd ff ff       	call   c000ad6e <KiSetHashInTable(unsigned short, bool)>
c000afa7:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000afac:	83 c4 10             	add    esp,0x10
c000afaf:	40                   	inc    eax
c000afb0:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000afb5:	83 f8 03             	cmp    eax,0x3
c000afb8:	7e 09                	jle    c000afc3 <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c000afba:	83 c4 08             	add    esp,0x8
c000afbd:	5b                   	pop    ebx
c000afbe:	e9 db fd ff ff       	jmp    c000ad9e <KiFlushSymlinkChanges()>
c000afc3:	83 c4 08             	add    esp,0x8
c000afc6:	5b                   	pop    ebx
c000afc7:	c3                   	ret    

c000afc8 <KeInitialiseSymlinks()>:
c000afc8:	57                   	push   edi
c000afc9:	56                   	push   esi
c000afca:	53                   	push   ebx
c000afcb:	81 ec 14 01 00 00    	sub    esp,0x114
c000afd1:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c000afdb:	68 00 20 00 00       	push   0x2000
c000afe0:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000afea:	6a 00                	push   0x0
c000afec:	68 00 74 02 c0       	push   0xc0027400
c000aff1:	e8 fa 54 ff ff       	call   c00004f0 <memset>
c000aff6:	59                   	pop    ecx
c000aff7:	5b                   	pop    ebx
c000aff8:	ff 35 00 94 02 c0    	push   DWORD PTR ds:0xc0029400
c000affe:	68 0a 19 02 c0       	push   0xc002190a
c000b003:	e8 41 f9 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000b008:	5e                   	pop    esi
c000b009:	5f                   	pop    edi
c000b00a:	6a 00                	push   0x0
c000b00c:	68 a3 ae 00 c0       	push   0xc000aea3
c000b011:	e8 9a 5e 00 00       	call   c0010eb0 <KeRegisterAtexit(void (*)(void*), void*)>
c000b016:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b01d:	e8 98 ca ff ff       	call   c0007aba <malloc>
c000b022:	83 c4 0c             	add    esp,0xc
c000b025:	89 c3                	mov    ebx,eax
c000b027:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b02d:	68 67 18 02 c0       	push   0xc0021867
c000b032:	50                   	push   eax
c000b033:	e8 18 0b 00 00       	call   c000bb50 <File::File(char const*, Process*)>
c000b038:	83 c4 10             	add    esp,0x10
c000b03b:	85 db                	test   ebx,ebx
c000b03d:	75 10                	jne    c000b04f <KeInitialiseSymlinks()+0x87>
c000b03f:	83 ec 0c             	sub    esp,0xc
c000b042:	68 27 19 02 c0       	push   0xc0021927
c000b047:	e8 77 66 00 00       	call   c00116c3 <KePanic(char const*)>
c000b04c:	83 c4 10             	add    esp,0x10
c000b04f:	83 ec 0c             	sub    esp,0xc
c000b052:	53                   	push   ebx
c000b053:	e8 da 0d 00 00       	call   c000be32 <File::exists()>
c000b058:	83 c4 10             	add    esp,0x10
c000b05b:	84 c0                	test   al,al
c000b05d:	75 3a                	jne    c000b099 <KeInitialiseSymlinks()+0xd1>
c000b05f:	52                   	push   edx
c000b060:	52                   	push   edx
c000b061:	6a 12                	push   0x12
c000b063:	53                   	push   ebx
c000b064:	e8 05 0b 00 00       	call   c000bb6e <File::open(FileOpenMode)>
c000b069:	83 c4 10             	add    esp,0x10
c000b06c:	85 c0                	test   eax,eax
c000b06e:	74 10                	je     c000b080 <KeInitialiseSymlinks()+0xb8>
c000b070:	83 ec 0c             	sub    esp,0xc
c000b073:	68 44 19 02 c0       	push   0xc0021944
c000b078:	e8 46 66 00 00       	call   c00116c3 <KePanic(char const*)>
c000b07d:	83 c4 10             	add    esp,0x10
c000b080:	83 ec 0c             	sub    esp,0xc
c000b083:	53                   	push   ebx
c000b084:	e8 43 0b 00 00       	call   c000bbcc <File::close()>
c000b089:	83 c4 10             	add    esp,0x10
c000b08c:	85 db                	test   ebx,ebx
c000b08e:	0f 84 9e 00 00 00    	je     c000b132 <KeInitialiseSymlinks()+0x16a>
c000b094:	e9 8d 00 00 00       	jmp    c000b126 <KeInitialiseSymlinks()+0x15e>
c000b099:	50                   	push   eax
c000b09a:	50                   	push   eax
c000b09b:	6a 01                	push   0x1
c000b09d:	53                   	push   ebx
c000b09e:	e8 cb 0a 00 00       	call   c000bb6e <File::open(FileOpenMode)>
c000b0a3:	83 c4 10             	add    esp,0x10
c000b0a6:	85 c0                	test   eax,eax
c000b0a8:	74 10                	je     c000b0ba <KeInitialiseSymlinks()+0xf2>
c000b0aa:	83 ec 0c             	sub    esp,0xc
c000b0ad:	68 61 19 02 c0       	push   0xc0021961
c000b0b2:	e8 0c 66 00 00       	call   c00116c3 <KePanic(char const*)>
c000b0b7:	83 c4 10             	add    esp,0x10
c000b0ba:	83 ec 0c             	sub    esp,0xc
c000b0bd:	ff 05 00 94 02 c0    	inc    DWORD PTR ds:0xc0029400
c000b0c3:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b0c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0c9:	57                   	push   edi
c000b0ca:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b0ce:	56                   	push   esi
c000b0cf:	6a 00                	push   0x0
c000b0d1:	68 00 01 00 00       	push   0x100
c000b0d6:	53                   	push   ebx
c000b0d7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0da:	83 c4 20             	add    esp,0x20
c000b0dd:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b0e5:	75 33                	jne    c000b11a <KeInitialiseSymlinks()+0x152>
c000b0e7:	83 ec 0c             	sub    esp,0xc
c000b0ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0ec:	57                   	push   edi
c000b0ed:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b0f1:	52                   	push   edx
c000b0f2:	6a 00                	push   0x0
c000b0f4:	6a 08                	push   0x8
c000b0f6:	53                   	push   ebx
c000b0f7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0fa:	83 c4 20             	add    esp,0x20
c000b0fd:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b102:	75 16                	jne    c000b11a <KeInitialiseSymlinks()+0x152>
c000b104:	89 f0                	mov    eax,esi
c000b106:	e8 9d fd ff ff       	call   c000aea8 <KiGetSymlinkHash(char const*)>
c000b10b:	ba 01 00 00 00       	mov    edx,0x1
c000b110:	0f b7 c0             	movzx  eax,ax
c000b113:	e8 56 fc ff ff       	call   c000ad6e <KiSetHashInTable(unsigned short, bool)>
c000b118:	eb a0                	jmp    c000b0ba <KeInitialiseSymlinks()+0xf2>
c000b11a:	83 ec 0c             	sub    esp,0xc
c000b11d:	53                   	push   ebx
c000b11e:	e8 a9 0a 00 00       	call   c000bbcc <File::close()>
c000b123:	83 c4 10             	add    esp,0x10
c000b126:	83 ec 0c             	sub    esp,0xc
c000b129:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b12b:	53                   	push   ebx
c000b12c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b12f:	83 c4 10             	add    esp,0x10
c000b132:	81 c4 10 01 00 00    	add    esp,0x110
c000b138:	5b                   	pop    ebx
c000b139:	5e                   	pop    esi
c000b13a:	5f                   	pop    edi
c000b13b:	c3                   	ret    

c000b13c <KiIsSymlinkRegistered(char const*)>:
c000b13c:	55                   	push   ebp
c000b13d:	57                   	push   edi
c000b13e:	56                   	push   esi
c000b13f:	53                   	push   ebx
c000b140:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000b146:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000b14d:	89 f0                	mov    eax,esi
c000b14f:	e8 54 fd ff ff       	call   c000aea8 <KiGetSymlinkHash(char const*)>
c000b154:	0f b7 c0             	movzx  eax,ax
c000b157:	53                   	push   ebx
c000b158:	56                   	push   esi
c000b159:	50                   	push   eax
c000b15a:	68 7c 19 02 c0       	push   0xc002197c
c000b15f:	e8 e5 f7 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000b164:	89 f0                	mov    eax,esi
c000b166:	e8 3d fd ff ff       	call   c000aea8 <KiGetSymlinkHash(char const*)>
c000b16b:	0f b7 c0             	movzx  eax,ax
c000b16e:	e8 e1 fb ff ff       	call   c000ad54 <KiIsHashInTable(unsigned short)>
c000b173:	83 c4 10             	add    esp,0x10
c000b176:	88 c1                	mov    cl,al
c000b178:	31 d2                	xor    edx,edx
c000b17a:	31 c0                	xor    eax,eax
c000b17c:	84 c9                	test   cl,cl
c000b17e:	0f 84 31 01 00 00    	je     c000b2b5 <KiIsSymlinkRegistered(char const*)+0x179>
c000b184:	31 db                	xor    ebx,ebx
c000b186:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000b18c:	7e 30                	jle    c000b1be <KiIsSymlinkRegistered(char const*)+0x82>
c000b18e:	89 d8                	mov    eax,ebx
c000b190:	51                   	push   ecx
c000b191:	c1 e0 08             	shl    eax,0x8
c000b194:	51                   	push   ecx
c000b195:	05 00 70 02 c0       	add    eax,0xc0027000
c000b19a:	50                   	push   eax
c000b19b:	56                   	push   esi
c000b19c:	e8 af 55 ff ff       	call   c0000750 <strcmp>
c000b1a1:	83 c4 10             	add    esp,0x10
c000b1a4:	85 c0                	test   eax,eax
c000b1a6:	75 13                	jne    c000b1bb <KiIsSymlinkRegistered(char const*)+0x7f>
c000b1a8:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000b1af:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b1b6:	e9 fa 00 00 00       	jmp    c000b2b5 <KiIsSymlinkRegistered(char const*)+0x179>
c000b1bb:	43                   	inc    ebx
c000b1bc:	eb c8                	jmp    c000b186 <KiIsSymlinkRegistered(char const*)+0x4a>
c000b1be:	83 ec 0c             	sub    esp,0xc
c000b1c1:	68 14 01 00 00       	push   0x114
c000b1c6:	e8 ef c8 ff ff       	call   c0007aba <malloc>
c000b1cb:	83 c4 0c             	add    esp,0xc
c000b1ce:	89 c3                	mov    ebx,eax
c000b1d0:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b1d6:	68 67 18 02 c0       	push   0xc0021867
c000b1db:	50                   	push   eax
c000b1dc:	e8 6f 09 00 00       	call   c000bb50 <File::File(char const*, Process*)>
c000b1e1:	83 c4 10             	add    esp,0x10
c000b1e4:	85 db                	test   ebx,ebx
c000b1e6:	75 12                	jne    c000b1fa <KiIsSymlinkRegistered(char const*)+0xbe>
c000b1e8:	83 ec 0c             	sub    esp,0xc
c000b1eb:	68 91 19 02 c0       	push   0xc0021991
c000b1f0:	e8 ce 64 00 00       	call   c00116c3 <KePanic(char const*)>
c000b1f5:	83 c4 10             	add    esp,0x10
c000b1f8:	eb 10                	jmp    c000b20a <KiIsSymlinkRegistered(char const*)+0xce>
c000b1fa:	83 ec 0c             	sub    esp,0xc
c000b1fd:	53                   	push   ebx
c000b1fe:	e8 2f 0c 00 00       	call   c000be32 <File::exists()>
c000b203:	83 c4 10             	add    esp,0x10
c000b206:	84 c0                	test   al,al
c000b208:	74 de                	je     c000b1e8 <KiIsSymlinkRegistered(char const*)+0xac>
c000b20a:	52                   	push   edx
c000b20b:	52                   	push   edx
c000b20c:	6a 01                	push   0x1
c000b20e:	53                   	push   ebx
c000b20f:	e8 5a 09 00 00       	call   c000bb6e <File::open(FileOpenMode)>
c000b214:	83 c4 10             	add    esp,0x10
c000b217:	85 c0                	test   eax,eax
c000b219:	74 10                	je     c000b22b <KiIsSymlinkRegistered(char const*)+0xef>
c000b21b:	83 ec 0c             	sub    esp,0xc
c000b21e:	68 ac 19 02 c0       	push   0xc00219ac
c000b223:	e8 9b 64 00 00       	call   c00116c3 <KePanic(char const*)>
c000b228:	83 c4 10             	add    esp,0x10
c000b22b:	83 ec 0c             	sub    esp,0xc
c000b22e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b230:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b234:	55                   	push   ebp
c000b235:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b239:	57                   	push   edi
c000b23a:	6a 00                	push   0x0
c000b23c:	68 00 01 00 00       	push   0x100
c000b241:	53                   	push   ebx
c000b242:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b245:	83 c4 20             	add    esp,0x20
c000b248:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b250:	75 4b                	jne    c000b29d <KiIsSymlinkRegistered(char const*)+0x161>
c000b252:	83 ec 0c             	sub    esp,0xc
c000b255:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b257:	55                   	push   ebp
c000b258:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b25c:	52                   	push   edx
c000b25d:	6a 00                	push   0x0
c000b25f:	6a 08                	push   0x8
c000b261:	53                   	push   ebx
c000b262:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b265:	83 c4 20             	add    esp,0x20
c000b268:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b26d:	75 2e                	jne    c000b29d <KiIsSymlinkRegistered(char const*)+0x161>
c000b26f:	50                   	push   eax
c000b270:	50                   	push   eax
c000b271:	57                   	push   edi
c000b272:	56                   	push   esi
c000b273:	e8 d8 54 ff ff       	call   c0000750 <strcmp>
c000b278:	83 c4 10             	add    esp,0x10
c000b27b:	85 c0                	test   eax,eax
c000b27d:	75 ac                	jne    c000b22b <KiIsSymlinkRegistered(char const*)+0xef>
c000b27f:	83 ec 0c             	sub    esp,0xc
c000b282:	53                   	push   ebx
c000b283:	e8 44 09 00 00       	call   c000bbcc <File::close()>
c000b288:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b28a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b28d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b290:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b294:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b298:	83 c4 10             	add    esp,0x10
c000b29b:	eb 18                	jmp    c000b2b5 <KiIsSymlinkRegistered(char const*)+0x179>
c000b29d:	83 ec 0c             	sub    esp,0xc
c000b2a0:	53                   	push   ebx
c000b2a1:	e8 26 09 00 00       	call   c000bbcc <File::close()>
c000b2a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2ae:	83 c4 10             	add    esp,0x10
c000b2b1:	31 c0                	xor    eax,eax
c000b2b3:	31 d2                	xor    edx,edx
c000b2b5:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b2bb:	5b                   	pop    ebx
c000b2bc:	5e                   	pop    esi
c000b2bd:	5f                   	pop    edi
c000b2be:	5d                   	pop    ebp
c000b2bf:	c3                   	ret    

c000b2c0 <KeDereferenceSymlink(char const*, char*)>:
c000b2c0:	55                   	push   ebp
c000b2c1:	57                   	push   edi
c000b2c2:	56                   	push   esi
c000b2c3:	53                   	push   ebx
c000b2c4:	83 ec 48             	sub    esp,0x48
c000b2c7:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000b2cb:	56                   	push   esi
c000b2cc:	e8 6b fe ff ff       	call   c000b13c <KiIsSymlinkRegistered(char const*)>
c000b2d1:	83 c4 10             	add    esp,0x10
c000b2d4:	89 c7                	mov    edi,eax
c000b2d6:	89 d0                	mov    eax,edx
c000b2d8:	09 f8                	or     eax,edi
c000b2da:	75 07                	jne    c000b2e3 <KeDereferenceSymlink(char const*, char*)+0x23>
c000b2dc:	31 c0                	xor    eax,eax
c000b2de:	e9 7c 01 00 00       	jmp    c000b45f <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b2e3:	83 ec 0c             	sub    esp,0xc
c000b2e6:	89 d5                	mov    ebp,edx
c000b2e8:	68 14 01 00 00       	push   0x114
c000b2ed:	e8 c8 c7 ff ff       	call   c0007aba <malloc>
c000b2f2:	83 c4 0c             	add    esp,0xc
c000b2f5:	89 c3                	mov    ebx,eax
c000b2f7:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b2fd:	56                   	push   esi
c000b2fe:	50                   	push   eax
c000b2ff:	e8 4c 08 00 00       	call   c000bb50 <File::File(char const*, Process*)>
c000b304:	83 c4 10             	add    esp,0x10
c000b307:	85 db                	test   ebx,ebx
c000b309:	0f 84 32 01 00 00    	je     c000b441 <KeDereferenceSymlink(char const*, char*)+0x181>
c000b30f:	56                   	push   esi
c000b310:	56                   	push   esi
c000b311:	6a 01                	push   0x1
c000b313:	53                   	push   ebx
c000b314:	e8 55 08 00 00       	call   c000bb6e <File::open(FileOpenMode)>
c000b319:	83 c4 10             	add    esp,0x10
c000b31c:	85 c0                	test   eax,eax
c000b31e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b320:	74 09                	je     c000b32b <KeDereferenceSymlink(char const*, char*)+0x6b>
c000b322:	83 ec 0c             	sub    esp,0xc
c000b325:	53                   	push   ebx
c000b326:	e9 10 01 00 00       	jmp    c000b43b <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b32b:	83 ec 0c             	sub    esp,0xc
c000b32e:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b332:	56                   	push   esi
c000b333:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b337:	52                   	push   edx
c000b338:	6a 00                	push   0x0
c000b33a:	6a 08                	push   0x8
c000b33c:	53                   	push   ebx
c000b33d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b340:	83 c4 20             	add    esp,0x20
c000b343:	85 c0                	test   eax,eax
c000b345:	0f 85 e2 00 00 00    	jne    c000b42d <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b34b:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b350:	0f 85 d7 00 00 00    	jne    c000b42d <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b356:	83 ec 0c             	sub    esp,0xc
c000b359:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b35b:	56                   	push   esi
c000b35c:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b360:	52                   	push   edx
c000b361:	6a 00                	push   0x0
c000b363:	6a 08                	push   0x8
c000b365:	53                   	push   ebx
c000b366:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b369:	83 c4 20             	add    esp,0x20
c000b36c:	85 c0                	test   eax,eax
c000b36e:	0f 85 b9 00 00 00    	jne    c000b42d <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b374:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b379:	0f 85 ae 00 00 00    	jne    c000b42d <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b37f:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b383:	0f 85 53 ff ff ff    	jne    c000b2dc <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b389:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b38d:	0f 85 49 ff ff ff    	jne    c000b2dc <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b393:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b39b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b3a3:	51                   	push   ecx
c000b3a4:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b3a8:	50                   	push   eax
c000b3a9:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b3ad:	50                   	push   eax
c000b3ae:	53                   	push   ebx
c000b3af:	e8 bc 0a 00 00       	call   c000be70 <File::stat(unsigned long long*, bool*)>
c000b3b4:	83 c4 10             	add    esp,0x10
c000b3b7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b3bc:	75 6f                	jne    c000b42d <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3be:	31 c9                	xor    ecx,ecx
c000b3c0:	bf 0f 00 00 00       	mov    edi,0xf
c000b3c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b3c9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b3cd:	39 c7                	cmp    edi,eax
c000b3cf:	89 cf                	mov    edi,ecx
c000b3d1:	19 d7                	sbb    edi,edx
c000b3d3:	73 58                	jae    c000b42d <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3d5:	83 c0 f0             	add    eax,0xfffffff0
c000b3d8:	bf ff 00 00 00       	mov    edi,0xff
c000b3dd:	83 d2 ff             	adc    edx,0xffffffff
c000b3e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b3e4:	39 c7                	cmp    edi,eax
c000b3e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b3ea:	19 d1                	sbb    ecx,edx
c000b3ec:	72 53                	jb     c000b441 <KeDereferenceSymlink(char const*, char*)+0x181>
c000b3ee:	40                   	inc    eax
c000b3ef:	52                   	push   edx
c000b3f0:	50                   	push   eax
c000b3f1:	6a 00                	push   0x0
c000b3f3:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000b3f7:	e8 f4 50 ff ff       	call   c00004f0 <memset>
c000b3fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3fe:	89 34 24             	mov    DWORD PTR [esp],esi
c000b401:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b405:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b409:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b40d:	53                   	push   ebx
c000b40e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b411:	83 c4 20             	add    esp,0x20
c000b414:	85 c0                	test   eax,eax
c000b416:	75 15                	jne    c000b42d <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b418:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b41c:	89 c7                	mov    edi,eax
c000b41e:	c1 ff 1f             	sar    edi,0x1f
c000b421:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b425:	75 06                	jne    c000b42d <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b427:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b42b:	74 19                	je     c000b446 <KeDereferenceSymlink(char const*, char*)+0x186>
c000b42d:	83 ec 0c             	sub    esp,0xc
c000b430:	53                   	push   ebx
c000b431:	e8 96 07 00 00       	call   c000bbcc <File::close()>
c000b436:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b438:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b43b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	83 c8 ff             	or     eax,0xffffffff
c000b444:	eb 19                	jmp    c000b45f <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b446:	83 ec 0c             	sub    esp,0xc
c000b449:	53                   	push   ebx
c000b44a:	e8 7d 07 00 00       	call   c000bbcc <File::close()>
c000b44f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b451:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b454:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b457:	83 c4 10             	add    esp,0x10
c000b45a:	b8 01 00 00 00       	mov    eax,0x1
c000b45f:	83 c4 3c             	add    esp,0x3c
c000b462:	5b                   	pop    ebx
c000b463:	5e                   	pop    esi
c000b464:	5f                   	pop    edi
c000b465:	5d                   	pop    ebp
c000b466:	c3                   	ret    

c000b467 <KeCreateSymlink(char const*, char const*)>:
c000b467:	55                   	push   ebp
c000b468:	57                   	push   edi
c000b469:	56                   	push   esi
c000b46a:	53                   	push   ebx
c000b46b:	83 ec 38             	sub    esp,0x38
c000b46e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b472:	68 14 01 00 00       	push   0x114
c000b477:	e8 3e c6 ff ff       	call   c0007aba <malloc>
c000b47c:	6a 00                	push   0x0
c000b47e:	89 c3                	mov    ebx,eax
c000b480:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b486:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b48a:	50                   	push   eax
c000b48b:	e8 e2 05 00 00       	call   c000ba72 <File::File(char const*, Process*, bool)>
c000b490:	83 c4 20             	add    esp,0x20
c000b493:	b8 01 00 00 00       	mov    eax,0x1
c000b498:	85 db                	test   ebx,ebx
c000b49a:	0f 84 19 01 00 00    	je     c000b5b9 <KeCreateSymlink(char const*, char const*)+0x152>
c000b4a0:	52                   	push   edx
c000b4a1:	52                   	push   edx
c000b4a2:	6a 12                	push   0x12
c000b4a4:	53                   	push   ebx
c000b4a5:	e8 c4 06 00 00       	call   c000bb6e <File::open(FileOpenMode)>
c000b4aa:	83 c4 10             	add    esp,0x10
c000b4ad:	85 c0                	test   eax,eax
c000b4af:	74 0b                	je     c000b4bc <KeCreateSymlink(char const*, char const*)+0x55>
c000b4b1:	83 ec 0c             	sub    esp,0xc
c000b4b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4b6:	53                   	push   ebx
c000b4b7:	e9 f2 00 00 00       	jmp    c000b5ae <KeCreateSymlink(char const*, char const*)+0x147>
c000b4bc:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b4c0:	be f9 19 02 c0       	mov    esi,0xc00219f9
c000b4c5:	b9 09 00 00 00       	mov    ecx,0x9
c000b4ca:	fc                   	cld    
c000b4cb:	83 ec 0c             	sub    esp,0xc
c000b4ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b4d0:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b4d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4d6:	56                   	push   esi
c000b4d7:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b4db:	52                   	push   edx
c000b4dc:	6a 00                	push   0x0
c000b4de:	6a 08                	push   0x8
c000b4e0:	53                   	push   ebx
c000b4e1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b4e4:	83 c4 20             	add    esp,0x20
c000b4e7:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b4ec:	0f 85 ae 00 00 00    	jne    c000b5a0 <KeCreateSymlink(char const*, char const*)+0x139>
c000b4f2:	85 c0                	test   eax,eax
c000b4f4:	0f 85 a6 00 00 00    	jne    c000b5a0 <KeCreateSymlink(char const*, char const*)+0x139>
c000b4fa:	e8 ca f9 ff ff       	call   c000aec9 <KiCreateSymlinkID()>
c000b4ff:	83 ec 0c             	sub    esp,0xc
c000b502:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b506:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b50a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b50c:	56                   	push   esi
c000b50d:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b511:	52                   	push   edx
c000b512:	6a 00                	push   0x0
c000b514:	6a 08                	push   0x8
c000b516:	53                   	push   ebx
c000b517:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b51a:	83 c4 20             	add    esp,0x20
c000b51d:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b522:	75 7c                	jne    c000b5a0 <KeCreateSymlink(char const*, char const*)+0x139>
c000b524:	85 c0                	test   eax,eax
c000b526:	75 78                	jne    c000b5a0 <KeCreateSymlink(char const*, char const*)+0x139>
c000b528:	83 ec 0c             	sub    esp,0xc
c000b52b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b52d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b530:	55                   	push   ebp
c000b531:	e8 3a 50 ff ff       	call   c0000570 <strlen>
c000b536:	89 34 24             	mov    DWORD PTR [esp],esi
c000b539:	31 d2                	xor    edx,edx
c000b53b:	55                   	push   ebp
c000b53c:	52                   	push   edx
c000b53d:	50                   	push   eax
c000b53e:	53                   	push   ebx
c000b53f:	ff d7                	call   edi
c000b541:	83 c4 14             	add    esp,0x14
c000b544:	89 c6                	mov    esi,eax
c000b546:	55                   	push   ebp
c000b547:	e8 24 50 ff ff       	call   c0000570 <strlen>
c000b54c:	83 c4 10             	add    esp,0x10
c000b54f:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b553:	75 4b                	jne    c000b5a0 <KeCreateSymlink(char const*, char const*)+0x139>
c000b555:	85 f6                	test   esi,esi
c000b557:	75 47                	jne    c000b5a0 <KeCreateSymlink(char const*, char const*)+0x139>
c000b559:	50                   	push   eax
c000b55a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b55e:	55                   	push   ebp
c000b55f:	68 c7 19 02 c0       	push   0xc00219c7
c000b564:	e8 e0 f3 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000b569:	83 c4 0c             	add    esp,0xc
c000b56c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b570:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b574:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b578:	e8 b9 f9 ff ff       	call   c000af36 <KeRegisterSymlink(char const*, unsigned long long)>
c000b57d:	c7 04 24 ec 19 02 c0 	mov    DWORD PTR [esp],0xc00219ec
c000b584:	e8 c0 f3 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000b589:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b58c:	e8 3b 06 00 00       	call   c000bbcc <File::close()>
c000b591:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b593:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b596:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b599:	83 c4 10             	add    esp,0x10
c000b59c:	31 c0                	xor    eax,eax
c000b59e:	eb 19                	jmp    c000b5b9 <KeCreateSymlink(char const*, char const*)+0x152>
c000b5a0:	83 ec 0c             	sub    esp,0xc
c000b5a3:	53                   	push   ebx
c000b5a4:	e8 23 06 00 00       	call   c000bbcc <File::close()>
c000b5a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b5b1:	83 c4 10             	add    esp,0x10
c000b5b4:	b8 01 00 00 00       	mov    eax,0x1
c000b5b9:	83 c4 2c             	add    esp,0x2c
c000b5bc:	5b                   	pop    ebx
c000b5bd:	5e                   	pop    esi
c000b5be:	5f                   	pop    edi
c000b5bf:	5d                   	pop    ebp
c000b5c0:	c3                   	ret    
c000b5c1:	90                   	nop

c000b5c2 <File::read(unsigned long long, void*, int*)>:
c000b5c2:	53                   	push   ebx
c000b5c3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5c7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5cb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b5d2:	83 f8 19             	cmp    eax,0x19
c000b5d5:	77 35                	ja     c000b60c <File::read(unsigned long long, void*, int*)+0x4a>
c000b5d7:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b5de:	85 c0                	test   eax,eax
c000b5e0:	74 2a                	je     c000b60c <File::read(unsigned long long, void*, int*)+0x4a>
c000b5e2:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5e8:	85 c0                	test   eax,eax
c000b5ea:	74 20                	je     c000b60c <File::read(unsigned long long, void*, int*)+0x4a>
c000b5ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5f0:	74 21                	je     c000b613 <File::read(unsigned long long, void*, int*)+0x51>
c000b5f2:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b5f4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b5f8:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b5fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b602:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b606:	5b                   	pop    ebx
c000b607:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b60a:	ff e0                	jmp    eax
c000b60c:	b8 0b 00 00 00       	mov    eax,0xb
c000b611:	eb 05                	jmp    c000b618 <File::read(unsigned long long, void*, int*)+0x56>
c000b613:	b8 05 00 00 00       	mov    eax,0x5
c000b618:	5b                   	pop    ebx
c000b619:	c3                   	ret    

c000b61a <File::write(unsigned long long, void*, int*)>:
c000b61a:	53                   	push   ebx
c000b61b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b61f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b623:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b62a:	83 f8 19             	cmp    eax,0x19
c000b62d:	77 35                	ja     c000b664 <File::write(unsigned long long, void*, int*)+0x4a>
c000b62f:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b636:	85 c0                	test   eax,eax
c000b638:	74 2a                	je     c000b664 <File::write(unsigned long long, void*, int*)+0x4a>
c000b63a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b640:	85 c0                	test   eax,eax
c000b642:	74 20                	je     c000b664 <File::write(unsigned long long, void*, int*)+0x4a>
c000b644:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b648:	74 21                	je     c000b66b <File::write(unsigned long long, void*, int*)+0x51>
c000b64a:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b64c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b650:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b656:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b65a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65e:	5b                   	pop    ebx
c000b65f:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b662:	ff e0                	jmp    eax
c000b664:	b8 0b 00 00 00       	mov    eax,0xb
c000b669:	eb 05                	jmp    c000b670 <File::write(unsigned long long, void*, int*)+0x56>
c000b66b:	b8 05 00 00 00       	mov    eax,0x5
c000b670:	5b                   	pop    ebx
c000b671:	c3                   	ret    

c000b672 <Directory::read(unsigned long long, void*, int*)>:
c000b672:	53                   	push   ebx
c000b673:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b677:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b67b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b682:	83 f8 19             	cmp    eax,0x19
c000b685:	77 35                	ja     c000b6bc <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b687:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b68e:	85 c0                	test   eax,eax
c000b690:	74 2a                	je     c000b6bc <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b692:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b698:	85 c0                	test   eax,eax
c000b69a:	74 20                	je     c000b6bc <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b69c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6a0:	74 21                	je     c000b6c3 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b6a2:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b6a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b6a8:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b6ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b6:	5b                   	pop    ebx
c000b6b7:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b6ba:	ff e0                	jmp    eax
c000b6bc:	b8 0b 00 00 00       	mov    eax,0xb
c000b6c1:	eb 05                	jmp    c000b6c8 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b6c3:	b8 05 00 00 00       	mov    eax,0x5
c000b6c8:	5b                   	pop    ebx
c000b6c9:	c3                   	ret    

c000b6ca <Directory::write(unsigned long long, void*, int*)>:
c000b6ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6ce:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b6d5:	b8 0b 00 00 00       	mov    eax,0xb
c000b6da:	83 fa 19             	cmp    edx,0x19
c000b6dd:	77 18                	ja     c000b6f7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6df:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b6e6:	85 d2                	test   edx,edx
c000b6e8:	74 0d                	je     c000b6f7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6ea:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b6f1:	19 c0                	sbb    eax,eax
c000b6f3:	83 e0 0a             	and    eax,0xa
c000b6f6:	40                   	inc    eax
c000b6f7:	c3                   	ret    

c000b6f8 <File::isAtty()>:
c000b6f8:	31 c0                	xor    eax,eax
c000b6fa:	c3                   	ret    
c000b6fb:	90                   	nop

c000b6fc <Directory::isAtty()>:
c000b6fc:	31 c0                	xor    eax,eax
c000b6fe:	c3                   	ret    
c000b6ff:	90                   	nop

c000b700 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b700:	b8 0a 00 00 00       	mov    eax,0xa
c000b705:	c3                   	ret    

c000b706 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b706:	b8 0a 00 00 00       	mov    eax,0xa
c000b70b:	c3                   	ret    

c000b70c <Filesystem::allocateSwapfile(char const*, int)>:
c000b70c:	31 c0                	xor    eax,eax
c000b70e:	31 d2                	xor    edx,edx
c000b710:	c3                   	ret    
c000b711:	90                   	nop

c000b712 <File::~File()>:
c000b712:	83 ec 0c             	sub    esp,0xc
c000b715:	ba b8 1a 02 c0       	mov    edx,0xc0021ab8
c000b71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b71e:	89 10                	mov    DWORD PTR [eax],edx
c000b720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b724:	83 ec 0c             	sub    esp,0xc
c000b727:	50                   	push   eax
c000b728:	e8 7b dc ff ff       	call   c00093a8 <UnixFile::~UnixFile()>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	90                   	nop
c000b731:	83 c4 0c             	add    esp,0xc
c000b734:	c3                   	ret    
c000b735:	90                   	nop

c000b736 <File::~File()>:
c000b736:	83 ec 0c             	sub    esp,0xc
c000b739:	83 ec 0c             	sub    esp,0xc
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	e8 cd ff ff ff       	call   c000b712 <File::~File()>
c000b745:	83 c4 10             	add    esp,0x10
c000b748:	83 ec 08             	sub    esp,0x8
c000b74b:	68 14 01 00 00       	push   0x114
c000b750:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b754:	e8 c3 f0 ff ff       	call   c000a81c <operator delete(void*, unsigned long)>
c000b759:	83 c4 10             	add    esp,0x10
c000b75c:	83 c4 0c             	add    esp,0xc
c000b75f:	c3                   	ret    

c000b760 <Directory::~Directory()>:
c000b760:	83 ec 0c             	sub    esp,0xc
c000b763:	ba d4 1a 02 c0       	mov    edx,0xc0021ad4
c000b768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b76c:	89 10                	mov    DWORD PTR [eax],edx
c000b76e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b772:	83 ec 0c             	sub    esp,0xc
c000b775:	50                   	push   eax
c000b776:	e8 2d dc ff ff       	call   c00093a8 <UnixFile::~UnixFile()>
c000b77b:	83 c4 10             	add    esp,0x10
c000b77e:	90                   	nop
c000b77f:	83 c4 0c             	add    esp,0xc
c000b782:	c3                   	ret    
c000b783:	90                   	nop

c000b784 <Directory::~Directory()>:
c000b784:	83 ec 0c             	sub    esp,0xc
c000b787:	83 ec 0c             	sub    esp,0xc
c000b78a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b78e:	e8 cd ff ff ff       	call   c000b760 <Directory::~Directory()>
c000b793:	83 c4 10             	add    esp,0x10
c000b796:	83 ec 08             	sub    esp,0x8
c000b799:	68 14 01 00 00       	push   0x114
c000b79e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7a2:	e8 75 f0 ff ff       	call   c000a81c <operator delete(void*, unsigned long)>
c000b7a7:	83 c4 10             	add    esp,0x10
c000b7aa:	83 c4 0c             	add    esp,0xc
c000b7ad:	c3                   	ret    

c000b7ae <Filesystem::Filesystem()>:
c000b7ae:	ba 4c 1a 02 c0       	mov    edx,0xc0021a4c
c000b7b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7b7:	89 10                	mov    DWORD PTR [eax],edx
c000b7b9:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b7bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7c3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b7c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ca:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b7cf:	90                   	nop
c000b7d0:	c3                   	ret    
c000b7d1:	90                   	nop

c000b7d2 <Filesystem::~Filesystem()>:
c000b7d2:	ba 4c 1a 02 c0       	mov    edx,0xc0021a4c
c000b7d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7db:	89 10                	mov    DWORD PTR [eax],edx
c000b7dd:	90                   	nop
c000b7de:	c3                   	ret    
c000b7df:	90                   	nop

c000b7e0 <Filesystem::~Filesystem()>:
c000b7e0:	83 ec 0c             	sub    esp,0xc
c000b7e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7e7:	e8 e6 ff ff ff       	call   c000b7d2 <Filesystem::~Filesystem()>
c000b7ec:	83 c4 04             	add    esp,0x4
c000b7ef:	83 ec 08             	sub    esp,0x8
c000b7f2:	6a 08                	push   0x8
c000b7f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f8:	e8 1f f0 ff ff       	call   c000a81c <operator delete(void*, unsigned long)>
c000b7fd:	83 c4 10             	add    esp,0x10
c000b800:	83 c4 0c             	add    esp,0xc
c000b803:	c3                   	ret    

c000b804 <Fs::getcwd(Process*, char*, int)>:
c000b804:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b808:	31 c0                	xor    eax,eax
c000b80a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b80d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b811:	7d 15                	jge    c000b828 <Fs::getcwd(Process*, char*, int)+0x24>
c000b813:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b817:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b81e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b821:	84 c9                	test   cl,cl
c000b823:	74 06                	je     c000b82b <Fs::getcwd(Process*, char*, int)+0x27>
c000b825:	40                   	inc    eax
c000b826:	eb e2                	jmp    c000b80a <Fs::getcwd(Process*, char*, int)+0x6>
c000b828:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b82b:	31 c0                	xor    eax,eax
c000b82d:	c3                   	ret    

c000b82e <Fs::initVFS()>:
c000b82e:	83 ec 18             	sub    esp,0x18
c000b831:	6a 08                	push   0x8
c000b833:	e8 82 c2 ff ff       	call   c0007aba <malloc>
c000b838:	89 04 24             	mov    DWORD PTR [esp],eax
c000b83b:	e8 d4 e4 00 00       	call   c0019d14 <FAT::FAT()>
c000b840:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b847:	e8 6e c2 ff ff       	call   c0007aba <malloc>
c000b84c:	89 04 24             	mov    DWORD PTR [esp],eax
c000b84f:	e8 ec f3 00 00       	call   c001ac40 <ISO9660::ISO9660()>
c000b854:	83 c4 1c             	add    esp,0x1c
c000b857:	c3                   	ret    

c000b858 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b858:	55                   	push   ebp
c000b859:	57                   	push   edi
c000b85a:	56                   	push   esi
c000b85b:	53                   	push   ebx
c000b85c:	81 ec 10 04 00 00    	sub    esp,0x410
c000b862:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c000b869:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c000b870:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c000b878:	68 00 04 00 00       	push   0x400
c000b87d:	6a 00                	push   0x0
c000b87f:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000b883:	57                   	push   edi
c000b884:	e8 67 4c ff ff       	call   c00004f0 <memset>
c000b889:	83 c4 10             	add    esp,0x10
c000b88c:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c000b890:	75 0b                	jne    c000b89d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c000b892:	50                   	push   eax
c000b893:	50                   	push   eax
c000b894:	55                   	push   ebp
c000b895:	57                   	push   edi
c000b896:	e8 a5 4d ff ff       	call   c0000640 <strcpy>
c000b89b:	eb 51                	jmp    c000b8ee <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c000b89d:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000b8a1:	83 f8 5c             	cmp    eax,0x5c
c000b8a4:	74 05                	je     c000b8ab <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c000b8a6:	83 f8 2f             	cmp    eax,0x2f
c000b8a9:	75 1e                	jne    c000b8c9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c000b8ab:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c000b8b2:	8a 00                	mov    al,BYTE PTR [eax]
c000b8b4:	3c 60                	cmp    al,0x60
c000b8b6:	7e 03                	jle    c000b8bb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c000b8b8:	83 e8 20             	sub    eax,0x20
c000b8bb:	88 04 24             	mov    BYTE PTR [esp],al
c000b8be:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b8c5:	50                   	push   eax
c000b8c6:	50                   	push   eax
c000b8c7:	eb 1e                	jmp    c000b8e7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000b8c9:	50                   	push   eax
c000b8ca:	50                   	push   eax
c000b8cb:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c000b8d2:	57                   	push   edi
c000b8d3:	e8 68 4d ff ff       	call   c0000640 <strcpy>
c000b8d8:	58                   	pop    eax
c000b8d9:	5a                   	pop    edx
c000b8da:	68 b7 2a 02 c0       	push   0xc0022ab7
c000b8df:	57                   	push   edi
c000b8e0:	e8 5b 4f ff ff       	call   c0000840 <strcat>
c000b8e5:	59                   	pop    ecx
c000b8e6:	58                   	pop    eax
c000b8e7:	55                   	push   ebp
c000b8e8:	57                   	push   edi
c000b8e9:	e8 52 4f ff ff       	call   c0000840 <strcat>
c000b8ee:	83 c4 10             	add    esp,0x10
c000b8f1:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b8f4:	3c 60                	cmp    al,0x60
c000b8f6:	7e 03                	jle    c000b8fb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000b8f8:	83 e8 20             	sub    eax,0x20
c000b8fb:	88 04 24             	mov    BYTE PTR [esp],al
c000b8fe:	88 06                	mov    BYTE PTR [esi],al
c000b900:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b907:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c000b90d:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c000b911:	bf 03 00 00 00       	mov    edi,0x3
c000b916:	b8 03 00 00 00       	mov    eax,0x3
c000b91b:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b91f:	89 e9                	mov    ecx,ebp
c000b921:	85 ed                	test   ebp,ebp
c000b923:	0f 84 97 00 00 00    	je     c000b9c0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000b929:	8d 57 01             	lea    edx,[edi+0x1]
c000b92c:	83 fd 5c             	cmp    ebp,0x5c
c000b92f:	74 05                	je     c000b936 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c000b931:	83 fd 2f             	cmp    ebp,0x2f
c000b934:	75 12                	jne    c000b948 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b936:	89 c5                	mov    ebp,eax
c000b938:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b93d:	74 09                	je     c000b948 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b93f:	40                   	inc    eax
c000b940:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c000b944:	89 d7                	mov    edi,edx
c000b946:	eb d3                	jmp    c000b91b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b948:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b94d:	0f be e9             	movsx  ebp,cl
c000b950:	75 5e                	jne    c000b9b0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b952:	83 fd 2e             	cmp    ebp,0x2e
c000b955:	75 59                	jne    c000b9b0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b957:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000b95b:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b960:	74 18                	je     c000b97a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c000b962:	83 fd 2e             	cmp    ebp,0x2e
c000b965:	74 53                	je     c000b9ba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b967:	89 fa                	mov    edx,edi
c000b969:	42                   	inc    edx
c000b96a:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b96e:	83 f9 2f             	cmp    ecx,0x2f
c000b971:	74 f6                	je     c000b969 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b973:	83 f9 5c             	cmp    ecx,0x5c
c000b976:	74 f1                	je     c000b969 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b978:	eb ca                	jmp    c000b944 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b97a:	83 fd 2e             	cmp    ebp,0x2e
c000b97d:	74 3b                	je     c000b9ba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b97f:	83 f8 03             	cmp    eax,0x3
c000b982:	74 c0                	je     c000b944 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b984:	42                   	inc    edx
c000b985:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b989:	83 f9 5c             	cmp    ecx,0x5c
c000b98c:	74 f6                	je     c000b984 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b98e:	83 f9 2f             	cmp    ecx,0x2f
c000b991:	74 f1                	je     c000b984 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b993:	48                   	dec    eax
c000b994:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b998:	75 06                	jne    c000b9a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b99a:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b99e:	eb f3                	jmp    c000b993 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c000b9a0:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b9a4:	74 07                	je     c000b9ad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c000b9a6:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b9aa:	48                   	dec    eax
c000b9ab:	eb f3                	jmp    c000b9a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b9ad:	40                   	inc    eax
c000b9ae:	eb 94                	jmp    c000b944 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9b0:	83 fd 5c             	cmp    ebp,0x5c
c000b9b3:	74 8f                	je     c000b944 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9b5:	83 fd 2f             	cmp    ebp,0x2f
c000b9b8:	74 8a                	je     c000b944 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9ba:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c000b9bd:	40                   	inc    eax
c000b9be:	eb 84                	jmp    c000b944 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9c0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b9c4:	83 ec 0c             	sub    esp,0xc
c000b9c7:	56                   	push   esi
c000b9c8:	e8 a3 4b ff ff       	call   c0000570 <strlen>
c000b9cd:	83 c4 10             	add    esp,0x10
c000b9d0:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c000b9d5:	74 17                	je     c000b9ee <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000b9d7:	83 ec 0c             	sub    esp,0xc
c000b9da:	56                   	push   esi
c000b9db:	e8 90 4b ff ff       	call   c0000570 <strlen>
c000b9e0:	83 c4 10             	add    esp,0x10
c000b9e3:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b9e8:	74 04                	je     c000b9ee <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000b9ea:	31 ff                	xor    edi,edi
c000b9ec:	eb 5c                	jmp    c000ba4a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c000b9ee:	83 ec 0c             	sub    esp,0xc
c000b9f1:	56                   	push   esi
c000b9f2:	e8 79 4b ff ff       	call   c0000570 <strlen>
c000b9f7:	83 c4 10             	add    esp,0x10
c000b9fa:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c000b9ff:	74 e9                	je     c000b9ea <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000ba01:	83 ec 0c             	sub    esp,0xc
c000ba04:	56                   	push   esi
c000ba05:	e8 66 4b ff ff       	call   c0000570 <strlen>
c000ba0a:	83 c4 10             	add    esp,0x10
c000ba0d:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000ba12:	eb b0                	jmp    c000b9c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000ba14:	52                   	push   edx
c000ba15:	52                   	push   edx
c000ba16:	56                   	push   esi
c000ba17:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c000ba1b:	55                   	push   ebp
c000ba1c:	e8 1f 4c ff ff       	call   c0000640 <strcpy>
c000ba21:	59                   	pop    ecx
c000ba22:	58                   	pop    eax
c000ba23:	56                   	push   esi
c000ba24:	55                   	push   ebp
c000ba25:	e8 96 f8 ff ff       	call   c000b2c0 <KeDereferenceSymlink(char const*, char*)>
c000ba2a:	83 c4 10             	add    esp,0x10
c000ba2d:	48                   	dec    eax
c000ba2e:	75 37                	jne    c000ba67 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000ba30:	50                   	push   eax
c000ba31:	56                   	push   esi
c000ba32:	55                   	push   ebp
c000ba33:	68 02 1a 02 c0       	push   0xc0021a02
c000ba38:	e8 0c ef ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000ba3d:	83 c4 10             	add    esp,0x10
c000ba40:	8d 47 01             	lea    eax,[edi+0x1]
c000ba43:	83 ff 14             	cmp    edi,0x14
c000ba46:	74 08                	je     c000ba50 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000ba48:	89 c7                	mov    edi,eax
c000ba4a:	85 db                	test   ebx,ebx
c000ba4c:	75 c6                	jne    c000ba14 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c000ba4e:	eb 17                	jmp    c000ba67 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000ba50:	83 ec 0c             	sub    esp,0xc
c000ba53:	bf 15 00 00 00       	mov    edi,0x15
c000ba58:	68 1d 1a 02 c0       	push   0xc0021a1d
c000ba5d:	e8 61 5c 00 00       	call   c00116c3 <KePanic(char const*)>
c000ba62:	83 c4 10             	add    esp,0x10
c000ba65:	eb e3                	jmp    c000ba4a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c000ba67:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ba6d:	5b                   	pop    ebx
c000ba6e:	5e                   	pop    esi
c000ba6f:	5f                   	pop    edi
c000ba70:	5d                   	pop    ebp
c000ba71:	c3                   	ret    

c000ba72 <File::File(char const*, Process*, bool)>:
c000ba72:	83 ec 1c             	sub    esp,0x1c
c000ba75:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba79:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ba7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba81:	83 ec 08             	sub    esp,0x8
c000ba84:	6a 00                	push   0x0
c000ba86:	50                   	push   eax
c000ba87:	e8 36 d7 ff ff       	call   c00091c2 <UnixFile::UnixFile(int)>
c000ba8c:	83 c4 10             	add    esp,0x10
c000ba8f:	ba b8 1a 02 c0       	mov    edx,0xc0021ab8
c000ba94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba98:	89 10                	mov    DWORD PTR [eax],edx
c000ba9a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ba9f:	85 c0                	test   eax,eax
c000baa1:	74 0f                	je     c000bab2 <File::File(char const*, Process*, bool)+0x40>
c000baa3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000baa8:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000baac:	74 04                	je     c000bab2 <File::File(char const*, Process*, bool)+0x40>
c000baae:	b0 01                	mov    al,0x1
c000bab0:	eb 02                	jmp    c000bab4 <File::File(char const*, Process*, bool)+0x42>
c000bab2:	b0 00                	mov    al,0x0
c000bab4:	0f b6 c0             	movzx  eax,al
c000bab7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000babb:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bac1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bac5:	83 c2 0d             	add    edx,0xd
c000bac8:	50                   	push   eax
c000bac9:	51                   	push   ecx
c000baca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bace:	52                   	push   edx
c000bacf:	e8 84 fd ff ff       	call   c000b858 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bad4:	83 c4 10             	add    esp,0x10
c000bad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000badb:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bade:	83 e8 41             	sub    eax,0x41
c000bae1:	88 c2                	mov    dl,al
c000bae3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bae7:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000baed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf1:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000baf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000baff:	0f b6 c0             	movzx  eax,al
c000bb02:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb09:	85 c0                	test   eax,eax
c000bb0b:	74 3e                	je     c000bb4b <File::File(char const*, Process*, bool)+0xd9>
c000bb0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb11:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb17:	0f b6 c0             	movzx  eax,al
c000bb1a:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb21:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bb27:	85 c0                	test   eax,eax
c000bb29:	75 20                	jne    c000bb4b <File::File(char const*, Process*, bool)+0xd9>
c000bb2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb2f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb35:	0f b6 c0             	movzx  eax,al
c000bb38:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb3f:	83 ec 0c             	sub    esp,0xc
c000bb42:	50                   	push   eax
c000bb43:	e8 ba 21 00 00       	call   c000dd02 <LogicalDisk::mount()>
c000bb48:	83 c4 10             	add    esp,0x10
c000bb4b:	90                   	nop
c000bb4c:	83 c4 1c             	add    esp,0x1c
c000bb4f:	c3                   	ret    

c000bb50 <File::File(char const*, Process*)>:
c000bb50:	83 ec 0c             	sub    esp,0xc
c000bb53:	6a 01                	push   0x1
c000bb55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb61:	e8 0c ff ff ff       	call   c000ba72 <File::File(char const*, Process*, bool)>
c000bb66:	83 c4 10             	add    esp,0x10
c000bb69:	90                   	nop
c000bb6a:	83 c4 0c             	add    esp,0xc
c000bb6d:	c3                   	ret    

c000bb6e <File::open(FileOpenMode)>:
c000bb6e:	53                   	push   ebx
c000bb6f:	b8 0b 00 00 00       	mov    eax,0xb
c000bb74:	83 ec 08             	sub    esp,0x8
c000bb77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb7b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bb82:	83 fa 19             	cmp    edx,0x19
c000bb85:	77 40                	ja     c000bbc7 <File::open(FileOpenMode)+0x59>
c000bb87:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bb8e:	85 d2                	test   edx,edx
c000bb90:	74 35                	je     c000bbc7 <File::open(FileOpenMode)+0x59>
c000bb92:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bb98:	85 d2                	test   edx,edx
c000bb9a:	74 2b                	je     c000bbc7 <File::open(FileOpenMode)+0x59>
c000bb9c:	b8 06 00 00 00       	mov    eax,0x6
c000bba1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bba5:	75 20                	jne    c000bbc7 <File::open(FileOpenMode)+0x59>
c000bba7:	8b 02                	mov    eax,DWORD PTR [edx]
c000bba9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bbaf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbb3:	51                   	push   ecx
c000bbb4:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bbb7:	51                   	push   ecx
c000bbb8:	52                   	push   edx
c000bbb9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bbbc:	83 c4 10             	add    esp,0x10
c000bbbf:	85 c0                	test   eax,eax
c000bbc1:	75 04                	jne    c000bbc7 <File::open(FileOpenMode)+0x59>
c000bbc3:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bbc7:	83 c4 08             	add    esp,0x8
c000bbca:	5b                   	pop    ebx
c000bbcb:	c3                   	ret    

c000bbcc <File::close()>:
c000bbcc:	53                   	push   ebx
c000bbcd:	b8 0b 00 00 00       	mov    eax,0xb
c000bbd2:	83 ec 08             	sub    esp,0x8
c000bbd5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbd9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbe0:	83 f9 19             	cmp    ecx,0x19
c000bbe3:	77 41                	ja     c000bc26 <File::close()+0x5a>
c000bbe5:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bbec:	85 db                	test   ebx,ebx
c000bbee:	74 36                	je     c000bc26 <File::close()+0x5a>
c000bbf0:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bbf7:	74 2d                	je     c000bc26 <File::close()+0x5a>
c000bbf9:	b8 05 00 00 00       	mov    eax,0x5
c000bbfe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc02:	74 22                	je     c000bc26 <File::close()+0x5a>
c000bc04:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bc08:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bc0f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bc15:	53                   	push   ebx
c000bc16:	53                   	push   ebx
c000bc17:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bc19:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc1f:	50                   	push   eax
c000bc20:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bc23:	83 c4 10             	add    esp,0x10
c000bc26:	83 c4 08             	add    esp,0x8
c000bc29:	5b                   	pop    ebx
c000bc2a:	c3                   	ret    
c000bc2b:	90                   	nop

c000bc2c <File::seek(unsigned long long)>:
c000bc2c:	56                   	push   esi
c000bc2d:	53                   	push   ebx
c000bc2e:	b8 0b 00 00 00       	mov    eax,0xb
c000bc33:	51                   	push   ecx
c000bc34:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc38:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc3c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc43:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc47:	83 fa 19             	cmp    edx,0x19
c000bc4a:	77 31                	ja     c000bc7d <File::seek(unsigned long long)+0x51>
c000bc4c:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc53:	85 d2                	test   edx,edx
c000bc55:	74 26                	je     c000bc7d <File::seek(unsigned long long)+0x51>
c000bc57:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc5d:	85 d2                	test   edx,edx
c000bc5f:	74 1c                	je     c000bc7d <File::seek(unsigned long long)+0x51>
c000bc61:	b8 05 00 00 00       	mov    eax,0x5
c000bc66:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc6a:	74 11                	je     c000bc7d <File::seek(unsigned long long)+0x51>
c000bc6c:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc6e:	53                   	push   ebx
c000bc6f:	51                   	push   ecx
c000bc70:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bc76:	52                   	push   edx
c000bc77:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bc7a:	83 c4 10             	add    esp,0x10
c000bc7d:	5a                   	pop    edx
c000bc7e:	5b                   	pop    ebx
c000bc7f:	5e                   	pop    esi
c000bc80:	c3                   	ret    
c000bc81:	90                   	nop

c000bc82 <File::truncate(unsigned long long)>:
c000bc82:	56                   	push   esi
c000bc83:	53                   	push   ebx
c000bc84:	b8 0b 00 00 00       	mov    eax,0xb
c000bc89:	51                   	push   ecx
c000bc8a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc8e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc92:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc99:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc9d:	83 fa 19             	cmp    edx,0x19
c000bca0:	77 31                	ja     c000bcd3 <File::truncate(unsigned long long)+0x51>
c000bca2:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bca9:	85 d2                	test   edx,edx
c000bcab:	74 26                	je     c000bcd3 <File::truncate(unsigned long long)+0x51>
c000bcad:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bcb3:	85 d2                	test   edx,edx
c000bcb5:	74 1c                	je     c000bcd3 <File::truncate(unsigned long long)+0x51>
c000bcb7:	b8 05 00 00 00       	mov    eax,0x5
c000bcbc:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bcc0:	74 11                	je     c000bcd3 <File::truncate(unsigned long long)+0x51>
c000bcc2:	8b 02                	mov    eax,DWORD PTR [edx]
c000bcc4:	53                   	push   ebx
c000bcc5:	51                   	push   ecx
c000bcc6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bccc:	52                   	push   edx
c000bccd:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bcd0:	83 c4 10             	add    esp,0x10
c000bcd3:	5a                   	pop    edx
c000bcd4:	5b                   	pop    ebx
c000bcd5:	5e                   	pop    esi
c000bcd6:	c3                   	ret    
c000bcd7:	90                   	nop

c000bcd8 <File::tell(unsigned long long*)>:
c000bcd8:	83 ec 0c             	sub    esp,0xc
c000bcdb:	b8 0b 00 00 00       	mov    eax,0xb
c000bce0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bce4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bceb:	83 fa 19             	cmp    edx,0x19
c000bcee:	77 34                	ja     c000bd24 <File::tell(unsigned long long*)+0x4c>
c000bcf0:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcf7:	85 d2                	test   edx,edx
c000bcf9:	74 29                	je     c000bd24 <File::tell(unsigned long long*)+0x4c>
c000bcfb:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd01:	85 d2                	test   edx,edx
c000bd03:	74 1f                	je     c000bd24 <File::tell(unsigned long long*)+0x4c>
c000bd05:	b8 05 00 00 00       	mov    eax,0x5
c000bd0a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bd0e:	74 14                	je     c000bd24 <File::tell(unsigned long long*)+0x4c>
c000bd10:	50                   	push   eax
c000bd11:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd13:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd17:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bd1d:	52                   	push   edx
c000bd1e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	83 c4 0c             	add    esp,0xc
c000bd27:	c3                   	ret    

c000bd28 <File::rewind()>:
c000bd28:	83 ec 10             	sub    esp,0x10
c000bd2b:	6a 00                	push   0x0
c000bd2d:	6a 00                	push   0x0
c000bd2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd33:	e8 f4 fe ff ff       	call   c000bc2c <File::seek(unsigned long long)>
c000bd38:	83 c4 1c             	add    esp,0x1c
c000bd3b:	c3                   	ret    

c000bd3c <File::unlink()>:
c000bd3c:	83 ec 0c             	sub    esp,0xc
c000bd3f:	b8 0b 00 00 00       	mov    eax,0xb
c000bd44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd48:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd4f:	83 f9 19             	cmp    ecx,0x19
c000bd52:	77 2f                	ja     c000bd83 <File::unlink()+0x47>
c000bd54:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd5b:	85 c9                	test   ecx,ecx
c000bd5d:	74 24                	je     c000bd83 <File::unlink()+0x47>
c000bd5f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd65:	85 c9                	test   ecx,ecx
c000bd67:	74 1a                	je     c000bd83 <File::unlink()+0x47>
c000bd69:	b8 06 00 00 00       	mov    eax,0x6
c000bd6e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd72:	75 0f                	jne    c000bd83 <File::unlink()+0x47>
c000bd74:	83 c2 0d             	add    edx,0xd
c000bd77:	50                   	push   eax
c000bd78:	50                   	push   eax
c000bd79:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bd7b:	52                   	push   edx
c000bd7c:	51                   	push   ecx
c000bd7d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bd80:	83 c4 10             	add    esp,0x10
c000bd83:	83 c4 0c             	add    esp,0xc
c000bd86:	c3                   	ret    
c000bd87:	90                   	nop

c000bd88 <File::rename(char const*)>:
c000bd88:	83 ec 0c             	sub    esp,0xc
c000bd8b:	b8 0b 00 00 00       	mov    eax,0xb
c000bd90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd94:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd9b:	83 f9 19             	cmp    ecx,0x19
c000bd9e:	77 32                	ja     c000bdd2 <File::rename(char const*)+0x4a>
c000bda0:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bda7:	85 c9                	test   ecx,ecx
c000bda9:	74 27                	je     c000bdd2 <File::rename(char const*)+0x4a>
c000bdab:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdb1:	85 c9                	test   ecx,ecx
c000bdb3:	74 1d                	je     c000bdd2 <File::rename(char const*)+0x4a>
c000bdb5:	b8 06 00 00 00       	mov    eax,0x6
c000bdba:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdbe:	75 12                	jne    c000bdd2 <File::rename(char const*)+0x4a>
c000bdc0:	83 c2 0d             	add    edx,0xd
c000bdc3:	50                   	push   eax
c000bdc4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bdc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bdca:	52                   	push   edx
c000bdcb:	51                   	push   ecx
c000bdcc:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bdcf:	83 c4 10             	add    esp,0x10
c000bdd2:	83 c4 0c             	add    esp,0xc
c000bdd5:	c3                   	ret    

c000bdd6 <File::chfatattr(unsigned char, unsigned char)>:
c000bdd6:	57                   	push   edi
c000bdd7:	b8 0b 00 00 00       	mov    eax,0xb
c000bddc:	56                   	push   esi
c000bddd:	53                   	push   ebx
c000bdde:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bde2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bde6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bded:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bdf1:	83 f9 19             	cmp    ecx,0x19
c000bdf4:	77 37                	ja     c000be2d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdf6:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bdfd:	85 c9                	test   ecx,ecx
c000bdff:	74 2c                	je     c000be2d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be01:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be07:	85 c9                	test   ecx,ecx
c000be09:	74 22                	je     c000be2d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be0b:	b8 06 00 00 00       	mov    eax,0x6
c000be10:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be14:	75 17                	jne    c000be2d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be16:	8b 39                	mov    edi,DWORD PTR [ecx]
c000be18:	89 f0                	mov    eax,esi
c000be1a:	83 c2 0d             	add    edx,0xd
c000be1d:	0f b6 f0             	movzx  esi,al
c000be20:	0f b6 db             	movzx  ebx,bl
c000be23:	56                   	push   esi
c000be24:	53                   	push   ebx
c000be25:	52                   	push   edx
c000be26:	51                   	push   ecx
c000be27:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	5b                   	pop    ebx
c000be2e:	5e                   	pop    esi
c000be2f:	5f                   	pop    edi
c000be30:	c3                   	ret    
c000be31:	90                   	nop

c000be32 <File::exists()>:
c000be32:	83 ec 0c             	sub    esp,0xc
c000be35:	31 c0                	xor    eax,eax
c000be37:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be3b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be42:	83 f9 19             	cmp    ecx,0x19
c000be45:	77 24                	ja     c000be6b <File::exists()+0x39>
c000be47:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be4e:	85 c9                	test   ecx,ecx
c000be50:	74 19                	je     c000be6b <File::exists()+0x39>
c000be52:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be58:	85 c9                	test   ecx,ecx
c000be5a:	74 0f                	je     c000be6b <File::exists()+0x39>
c000be5c:	83 c2 0d             	add    edx,0xd
c000be5f:	50                   	push   eax
c000be60:	50                   	push   eax
c000be61:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be63:	52                   	push   edx
c000be64:	51                   	push   ecx
c000be65:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000be68:	83 c4 10             	add    esp,0x10
c000be6b:	83 c4 0c             	add    esp,0xc
c000be6e:	c3                   	ret    
c000be6f:	90                   	nop

c000be70 <File::stat(unsigned long long*, bool*)>:
c000be70:	56                   	push   esi
c000be71:	53                   	push   ebx
c000be72:	50                   	push   eax
c000be73:	b8 0b 00 00 00       	mov    eax,0xb
c000be78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be7c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be80:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be87:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000be8b:	83 f9 19             	cmp    ecx,0x19
c000be8e:	77 3d                	ja     c000becd <File::stat(unsigned long long*, bool*)+0x5d>
c000be90:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be97:	85 c9                	test   ecx,ecx
c000be99:	74 32                	je     c000becd <File::stat(unsigned long long*, bool*)+0x5d>
c000be9b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bea1:	85 c9                	test   ecx,ecx
c000bea3:	74 28                	je     c000becd <File::stat(unsigned long long*, bool*)+0x5d>
c000bea5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bea7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000beab:	74 13                	je     c000bec0 <File::stat(unsigned long long*, bool*)+0x50>
c000bead:	83 ec 04             	sub    esp,0x4
c000beb0:	56                   	push   esi
c000beb1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000beb7:	51                   	push   ecx
c000beb8:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bebb:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bebe:	eb 0a                	jmp    c000beca <File::stat(unsigned long long*, bool*)+0x5a>
c000bec0:	53                   	push   ebx
c000bec1:	83 c2 0d             	add    edx,0xd
c000bec4:	56                   	push   esi
c000bec5:	52                   	push   edx
c000bec6:	51                   	push   ecx
c000bec7:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000beca:	83 c4 10             	add    esp,0x10
c000becd:	5a                   	pop    edx
c000bece:	5b                   	pop    ebx
c000becf:	5e                   	pop    esi
c000bed0:	c3                   	ret    

c000bed1 <Fs::setcwd(Process*, char*)>:
c000bed1:	55                   	push   ebp
c000bed2:	57                   	push   edi
c000bed3:	56                   	push   esi
c000bed4:	53                   	push   ebx
c000bed5:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bedb:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bee2:	6a 00                	push   0x0
c000bee4:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000beea:	57                   	push   edi
c000beeb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bef2:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bef6:	56                   	push   esi
c000bef7:	e8 5c f9 ff ff       	call   c000b858 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000befc:	89 34 24             	mov    DWORD PTR [esp],esi
c000beff:	e8 6c 46 ff ff       	call   c0000570 <strlen>
c000bf04:	83 c4 10             	add    esp,0x10
c000bf07:	83 f8 02             	cmp    eax,0x2
c000bf0a:	77 15                	ja     c000bf21 <Fs::setcwd(Process*, char*)+0x50>
c000bf0c:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bf11:	83 eb 41             	sub    ebx,0x41
c000bf14:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bf1b:	85 c0                	test   eax,eax
c000bf1d:	75 1c                	jne    c000bf3b <Fs::setcwd(Process*, char*)+0x6a>
c000bf1f:	eb 2f                	jmp    c000bf50 <Fs::setcwd(Process*, char*)+0x7f>
c000bf21:	83 ec 0c             	sub    esp,0xc
c000bf24:	56                   	push   esi
c000bf25:	e8 46 46 ff ff       	call   c0000570 <strlen>
c000bf2a:	83 c4 10             	add    esp,0x10
c000bf2d:	83 f8 03             	cmp    eax,0x3
c000bf30:	75 57                	jne    c000bf89 <Fs::setcwd(Process*, char*)+0xb8>
c000bf32:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bf37:	75 50                	jne    c000bf89 <Fs::setcwd(Process*, char*)+0xb8>
c000bf39:	eb d1                	jmp    c000bf0c <Fs::setcwd(Process*, char*)+0x3b>
c000bf3b:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bf42:	75 0c                	jne    c000bf50 <Fs::setcwd(Process*, char*)+0x7f>
c000bf44:	83 ec 0c             	sub    esp,0xc
c000bf47:	50                   	push   eax
c000bf48:	e8 b5 1d 00 00       	call   c000dd02 <LogicalDisk::mount()>
c000bf4d:	83 c4 10             	add    esp,0x10
c000bf50:	b8 03 00 00 00       	mov    eax,0x3
c000bf55:	83 fb 19             	cmp    ebx,0x19
c000bf58:	0f 87 c6 00 00 00    	ja     c000c024 <Fs::setcwd(Process*, char*)+0x153>
c000bf5e:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bf65:	b8 05 00 00 00       	mov    eax,0x5
c000bf6a:	85 d2                	test   edx,edx
c000bf6c:	0f 84 b2 00 00 00    	je     c000c024 <Fs::setcwd(Process*, char*)+0x153>
c000bf72:	b8 06 00 00 00       	mov    eax,0x6
c000bf77:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bf7e:	0f 85 92 00 00 00    	jne    c000c016 <Fs::setcwd(Process*, char*)+0x145>
c000bf84:	e9 9b 00 00 00       	jmp    c000c024 <Fs::setcwd(Process*, char*)+0x153>
c000bf89:	83 ec 0c             	sub    esp,0xc
c000bf8c:	68 14 01 00 00       	push   0x114
c000bf91:	e8 24 bb ff ff       	call   c0007aba <malloc>
c000bf96:	83 c4 0c             	add    esp,0xc
c000bf99:	89 c3                	mov    ebx,eax
c000bf9b:	55                   	push   ebp
c000bf9c:	56                   	push   esi
c000bf9d:	50                   	push   eax
c000bf9e:	e8 ad fb ff ff       	call   c000bb50 <File::File(char const*, Process*)>
c000bfa3:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bfa8:	83 c4 0c             	add    esp,0xc
c000bfab:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bfaf:	50                   	push   eax
c000bfb0:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bfb4:	50                   	push   eax
c000bfb5:	53                   	push   ebx
c000bfb6:	e8 b5 fe ff ff       	call   c000be70 <File::stat(unsigned long long*, bool*)>
c000bfbb:	83 c4 10             	add    esp,0x10
c000bfbe:	83 f8 02             	cmp    eax,0x2
c000bfc1:	74 27                	je     c000bfea <Fs::setcwd(Process*, char*)+0x119>
c000bfc3:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bfc8:	75 1c                	jne    c000bfe6 <Fs::setcwd(Process*, char*)+0x115>
c000bfca:	b8 02 00 00 00       	mov    eax,0x2
c000bfcf:	85 db                	test   ebx,ebx
c000bfd1:	74 51                	je     c000c024 <Fs::setcwd(Process*, char*)+0x153>
c000bfd3:	83 ec 0c             	sub    esp,0xc
c000bfd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfd8:	53                   	push   ebx
c000bfd9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bfdc:	83 c4 10             	add    esp,0x10
c000bfdf:	b8 02 00 00 00       	mov    eax,0x2
c000bfe4:	eb 3e                	jmp    c000c024 <Fs::setcwd(Process*, char*)+0x153>
c000bfe6:	85 c0                	test   eax,eax
c000bfe8:	74 1c                	je     c000c006 <Fs::setcwd(Process*, char*)+0x135>
c000bfea:	b8 01 00 00 00       	mov    eax,0x1
c000bfef:	85 db                	test   ebx,ebx
c000bff1:	74 31                	je     c000c024 <Fs::setcwd(Process*, char*)+0x153>
c000bff3:	83 ec 0c             	sub    esp,0xc
c000bff6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bff8:	53                   	push   ebx
c000bff9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bffc:	83 c4 10             	add    esp,0x10
c000bfff:	b8 01 00 00 00       	mov    eax,0x1
c000c004:	eb 1e                	jmp    c000c024 <Fs::setcwd(Process*, char*)+0x153>
c000c006:	85 db                	test   ebx,ebx
c000c008:	74 0c                	je     c000c016 <Fs::setcwd(Process*, char*)+0x145>
c000c00a:	83 ec 0c             	sub    esp,0xc
c000c00d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c00f:	53                   	push   ebx
c000c010:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c013:	83 c4 10             	add    esp,0x10
c000c016:	50                   	push   eax
c000c017:	50                   	push   eax
c000c018:	56                   	push   esi
c000c019:	57                   	push   edi
c000c01a:	e8 21 46 ff ff       	call   c0000640 <strcpy>
c000c01f:	83 c4 10             	add    esp,0x10
c000c022:	31 c0                	xor    eax,eax
c000c024:	81 c4 1c 02 00 00    	add    esp,0x21c
c000c02a:	5b                   	pop    ebx
c000c02b:	5e                   	pop    esi
c000c02c:	5f                   	pop    edi
c000c02d:	5d                   	pop    ebp
c000c02e:	c3                   	ret    
c000c02f:	90                   	nop

c000c030 <Directory::Directory(char const*, Process*)>:
c000c030:	83 ec 0c             	sub    esp,0xc
c000c033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c037:	83 ec 08             	sub    esp,0x8
c000c03a:	6a 00                	push   0x0
c000c03c:	50                   	push   eax
c000c03d:	e8 80 d1 ff ff       	call   c00091c2 <UnixFile::UnixFile(int)>
c000c042:	83 c4 10             	add    esp,0x10
c000c045:	ba d4 1a 02 c0       	mov    edx,0xc0021ad4
c000c04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c04e:	89 10                	mov    DWORD PTR [eax],edx
c000c050:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c055:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c059:	0f 95 c0             	setne  al
c000c05c:	0f b6 c0             	movzx  eax,al
c000c05f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c063:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c069:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c06d:	83 c2 0d             	add    edx,0xd
c000c070:	50                   	push   eax
c000c071:	51                   	push   ecx
c000c072:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c076:	52                   	push   edx
c000c077:	e8 dc f7 ff ff       	call   c000b858 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c07c:	83 c4 10             	add    esp,0x10
c000c07f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c083:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c086:	83 e8 41             	sub    eax,0x41
c000c089:	88 c2                	mov    dl,al
c000c08b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c08f:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c099:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c09d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0a1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0a7:	0f b6 c0             	movzx  eax,al
c000c0aa:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0b1:	85 c0                	test   eax,eax
c000c0b3:	74 3e                	je     c000c0f3 <Directory::Directory(char const*, Process*)+0xc3>
c000c0b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0b9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0bf:	0f b6 c0             	movzx  eax,al
c000c0c2:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0c9:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c0cf:	85 c0                	test   eax,eax
c000c0d1:	75 20                	jne    c000c0f3 <Directory::Directory(char const*, Process*)+0xc3>
c000c0d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d7:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0dd:	0f b6 c0             	movzx  eax,al
c000c0e0:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0e7:	83 ec 0c             	sub    esp,0xc
c000c0ea:	50                   	push   eax
c000c0eb:	e8 12 1c 00 00       	call   c000dd02 <LogicalDisk::mount()>
c000c0f0:	83 c4 10             	add    esp,0x10
c000c0f3:	90                   	nop
c000c0f4:	83 c4 0c             	add    esp,0xc
c000c0f7:	c3                   	ret    

c000c0f8 <Directory::open()>:
c000c0f8:	53                   	push   ebx
c000c0f9:	b8 0b 00 00 00       	mov    eax,0xb
c000c0fe:	83 ec 08             	sub    esp,0x8
c000c101:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c105:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c10c:	83 fa 19             	cmp    edx,0x19
c000c10f:	77 3d                	ja     c000c14e <Directory::open()+0x56>
c000c111:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c118:	85 d2                	test   edx,edx
c000c11a:	74 32                	je     c000c14e <Directory::open()+0x56>
c000c11c:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c122:	85 d2                	test   edx,edx
c000c124:	74 28                	je     c000c14e <Directory::open()+0x56>
c000c126:	b8 06 00 00 00       	mov    eax,0x6
c000c12b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c12f:	75 1d                	jne    c000c14e <Directory::open()+0x56>
c000c131:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c137:	50                   	push   eax
c000c138:	8b 02                	mov    eax,DWORD PTR [edx]
c000c13a:	51                   	push   ecx
c000c13b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c13e:	51                   	push   ecx
c000c13f:	52                   	push   edx
c000c140:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c143:	83 c4 10             	add    esp,0x10
c000c146:	85 c0                	test   eax,eax
c000c148:	75 04                	jne    c000c14e <Directory::open()+0x56>
c000c14a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c14e:	83 c4 08             	add    esp,0x8
c000c151:	5b                   	pop    ebx
c000c152:	c3                   	ret    
c000c153:	90                   	nop

c000c154 <Directory::close()>:
c000c154:	53                   	push   ebx
c000c155:	b8 0b 00 00 00       	mov    eax,0xb
c000c15a:	83 ec 08             	sub    esp,0x8
c000c15d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c161:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c168:	83 f9 19             	cmp    ecx,0x19
c000c16b:	77 41                	ja     c000c1ae <Directory::close()+0x5a>
c000c16d:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c174:	85 db                	test   ebx,ebx
c000c176:	74 36                	je     c000c1ae <Directory::close()+0x5a>
c000c178:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c17f:	74 2d                	je     c000c1ae <Directory::close()+0x5a>
c000c181:	b8 05 00 00 00       	mov    eax,0x5
c000c186:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c18a:	74 22                	je     c000c1ae <Directory::close()+0x5a>
c000c18c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c190:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c197:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c19d:	53                   	push   ebx
c000c19e:	53                   	push   ebx
c000c19f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c1a1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c1a7:	50                   	push   eax
c000c1a8:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c1ab:	83 c4 10             	add    esp,0x10
c000c1ae:	83 c4 08             	add    esp,0x8
c000c1b1:	5b                   	pop    ebx
c000c1b2:	c3                   	ret    
c000c1b3:	90                   	nop

c000c1b4 <Directory::unlink()>:
c000c1b4:	83 ec 0c             	sub    esp,0xc
c000c1b7:	b8 0b 00 00 00       	mov    eax,0xb
c000c1bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1c0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1c7:	83 f9 19             	cmp    ecx,0x19
c000c1ca:	77 2f                	ja     c000c1fb <Directory::unlink()+0x47>
c000c1cc:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1d3:	85 c9                	test   ecx,ecx
c000c1d5:	74 24                	je     c000c1fb <Directory::unlink()+0x47>
c000c1d7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c1dd:	85 c9                	test   ecx,ecx
c000c1df:	74 1a                	je     c000c1fb <Directory::unlink()+0x47>
c000c1e1:	b8 06 00 00 00       	mov    eax,0x6
c000c1e6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1ea:	75 0f                	jne    c000c1fb <Directory::unlink()+0x47>
c000c1ec:	83 c2 0d             	add    edx,0xd
c000c1ef:	50                   	push   eax
c000c1f0:	50                   	push   eax
c000c1f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1f3:	52                   	push   edx
c000c1f4:	51                   	push   ecx
c000c1f5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c1f8:	83 c4 10             	add    esp,0x10
c000c1fb:	83 c4 0c             	add    esp,0xc
c000c1fe:	c3                   	ret    
c000c1ff:	90                   	nop

c000c200 <Directory::rename(char const*)>:
c000c200:	83 ec 0c             	sub    esp,0xc
c000c203:	b8 0b 00 00 00       	mov    eax,0xb
c000c208:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c20c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c213:	83 f9 19             	cmp    ecx,0x19
c000c216:	77 32                	ja     c000c24a <Directory::rename(char const*)+0x4a>
c000c218:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c21f:	85 c9                	test   ecx,ecx
c000c221:	74 27                	je     c000c24a <Directory::rename(char const*)+0x4a>
c000c223:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c229:	85 c9                	test   ecx,ecx
c000c22b:	74 1d                	je     c000c24a <Directory::rename(char const*)+0x4a>
c000c22d:	b8 06 00 00 00       	mov    eax,0x6
c000c232:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c236:	75 12                	jne    c000c24a <Directory::rename(char const*)+0x4a>
c000c238:	83 c2 0d             	add    edx,0xd
c000c23b:	50                   	push   eax
c000c23c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c23e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c242:	52                   	push   edx
c000c243:	51                   	push   ecx
c000c244:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c247:	83 c4 10             	add    esp,0x10
c000c24a:	83 c4 0c             	add    esp,0xc
c000c24d:	c3                   	ret    

c000c24e <Directory::exists()>:
c000c24e:	83 ec 0c             	sub    esp,0xc
c000c251:	31 c0                	xor    eax,eax
c000c253:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c257:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c25e:	83 f9 19             	cmp    ecx,0x19
c000c261:	77 24                	ja     c000c287 <Directory::exists()+0x39>
c000c263:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c26a:	85 c9                	test   ecx,ecx
c000c26c:	74 19                	je     c000c287 <Directory::exists()+0x39>
c000c26e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c274:	85 c9                	test   ecx,ecx
c000c276:	74 0f                	je     c000c287 <Directory::exists()+0x39>
c000c278:	83 c2 0d             	add    edx,0xd
c000c27b:	50                   	push   eax
c000c27c:	50                   	push   eax
c000c27d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c27f:	52                   	push   edx
c000c280:	51                   	push   ecx
c000c281:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c284:	83 c4 10             	add    esp,0x10
c000c287:	83 c4 0c             	add    esp,0xc
c000c28a:	c3                   	ret    
c000c28b:	90                   	nop

c000c28c <Directory::read(dirent*)>:
c000c28c:	83 ec 1c             	sub    esp,0x1c
c000c28f:	b8 0b 00 00 00       	mov    eax,0xb
c000c294:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c298:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c29f:	83 f9 19             	cmp    ecx,0x19
c000c2a2:	77 30                	ja     c000c2d4 <Directory::read(dirent*)+0x48>
c000c2a4:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2ab:	85 c9                	test   ecx,ecx
c000c2ad:	74 25                	je     c000c2d4 <Directory::read(dirent*)+0x48>
c000c2af:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c2b6:	74 1c                	je     c000c2d4 <Directory::read(dirent*)+0x48>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	8b 02                	mov    eax,DWORD PTR [edx]
c000c2bd:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c2c1:	51                   	push   ecx
c000c2c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2c6:	6a 00                	push   0x0
c000c2c8:	68 10 01 00 00       	push   0x110
c000c2cd:	52                   	push   edx
c000c2ce:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c2d1:	83 c4 20             	add    esp,0x20
c000c2d4:	83 c4 1c             	add    esp,0x1c
c000c2d7:	c3                   	ret    

c000c2d8 <Directory::create()>:
c000c2d8:	83 ec 0c             	sub    esp,0xc
c000c2db:	b8 0b 00 00 00       	mov    eax,0xb
c000c2e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c2e4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2eb:	83 f9 19             	cmp    ecx,0x19
c000c2ee:	77 2f                	ja     c000c31f <Directory::create()+0x47>
c000c2f0:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2f7:	85 c9                	test   ecx,ecx
c000c2f9:	74 24                	je     c000c31f <Directory::create()+0x47>
c000c2fb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c301:	85 c9                	test   ecx,ecx
c000c303:	74 1a                	je     c000c31f <Directory::create()+0x47>
c000c305:	b8 06 00 00 00       	mov    eax,0x6
c000c30a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c30e:	75 0f                	jne    c000c31f <Directory::create()+0x47>
c000c310:	83 c2 0d             	add    edx,0xd
c000c313:	50                   	push   eax
c000c314:	50                   	push   eax
c000c315:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c317:	52                   	push   edx
c000c318:	51                   	push   ecx
c000c319:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c31c:	83 c4 10             	add    esp,0x10
c000c31f:	83 c4 0c             	add    esp,0xc
c000c322:	c3                   	ret    
c000c323:	90                   	nop

c000c324 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c324:	b8 0a 00 00 00       	mov    eax,0xa
c000c329:	c3                   	ret    
c000c32a:	66 90                	xchg   ax,ax

c000c32c <Bus::Bus(char const*)>:
c000c32c:	83 ec 0c             	sub    esp,0xc
c000c32f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c333:	83 ec 08             	sub    esp,0x8
c000c336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c33a:	50                   	push   eax
c000c33b:	e8 ec 07 00 00       	call   c000cb2c <Device::Device(char const*)>
c000c340:	83 c4 10             	add    esp,0x10
c000c343:	ba f0 1a 02 c0       	mov    edx,0xc0021af0
c000c348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c34c:	89 10                	mov    DWORD PTR [eax],edx
c000c34e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c352:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c35c:	90                   	nop
c000c35d:	83 c4 0c             	add    esp,0xc
c000c360:	c3                   	ret    
c000c361:	90                   	nop
c000c362:	66 90                	xchg   ax,ax

c000c364 <Bus::~Bus()>:
c000c364:	83 ec 0c             	sub    esp,0xc
c000c367:	ba f0 1a 02 c0       	mov    edx,0xc0021af0
c000c36c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c370:	89 10                	mov    DWORD PTR [eax],edx
c000c372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c376:	83 ec 0c             	sub    esp,0xc
c000c379:	50                   	push   eax
c000c37a:	e8 4d 05 00 00       	call   c000c8cc <Device::~Device()>
c000c37f:	83 c4 10             	add    esp,0x10
c000c382:	90                   	nop
c000c383:	83 c4 0c             	add    esp,0xc
c000c386:	c3                   	ret    
c000c387:	90                   	nop

c000c388 <Bus::~Bus()>:
c000c388:	83 ec 0c             	sub    esp,0xc
c000c38b:	83 ec 0c             	sub    esp,0xc
c000c38e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c392:	e8 cd ff ff ff       	call   c000c364 <Bus::~Bus()>
c000c397:	83 c4 10             	add    esp,0x10
c000c39a:	83 ec 08             	sub    esp,0x8
c000c39d:	68 58 01 00 00       	push   0x158
c000c3a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3a6:	e8 71 e4 ff ff       	call   c000a81c <operator delete(void*, unsigned long)>
c000c3ab:	83 c4 10             	add    esp,0x10
c000c3ae:	83 c4 0c             	add    esp,0xc
c000c3b1:	c3                   	ret    

c000c3b2 <beepThread(void*)>:
c000c3b2:	83 ec 0c             	sub    esp,0xc
c000c3b5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c3ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3be:	48                   	dec    eax
c000c3bf:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c3c4:	75 01                	jne    c000c3c7 <beepThread(void*)+0x15>
c000c3c6:	fb                   	sti    
c000c3c7:	83 ec 0c             	sub    esp,0xc
c000c3ca:	6b c2 0a             	imul   eax,edx,0xa
c000c3cd:	50                   	push   eax
c000c3ce:	e8 05 a1 00 00       	call   c00164d8 <milliTenthSleep(unsigned int)>
c000c3d3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c3da:	e8 54 c0 00 00       	call   c0018433 <HalMakeBeep(int)>
c000c3df:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c3e7:	83 c4 1c             	add    esp,0x1c
c000c3ea:	e9 cd 9f 00 00       	jmp    c00163bc <blockTask(TaskState)>

c000c3ef <Krnl::beep(int, int, bool)>:
c000c3ef:	56                   	push   esi
c000c3f0:	53                   	push   ebx
c000c3f1:	83 ec 10             	sub    esp,0x10
c000c3f4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c3f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c3fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c400:	e8 2e c0 00 00       	call   c0018433 <HalMakeBeep(int)>
c000c405:	83 c4 10             	add    esp,0x10
c000c408:	89 f0                	mov    eax,esi
c000c40a:	84 c0                	test   al,al
c000c40c:	74 1e                	je     c000c42c <Krnl::beep(int, int, bool)+0x3d>
c000c40e:	83 ec 0c             	sub    esp,0xc
c000c411:	6b db 0a             	imul   ebx,ebx,0xa
c000c414:	53                   	push   ebx
c000c415:	e8 be a0 00 00       	call   c00164d8 <milliTenthSleep(unsigned int)>
c000c41a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c422:	83 c4 14             	add    esp,0x14
c000c425:	5b                   	pop    ebx
c000c426:	5e                   	pop    esi
c000c427:	e9 07 c0 00 00       	jmp    c0018433 <HalMakeBeep(int)>
c000c42c:	68 e6 00 00 00       	push   0xe6
c000c431:	53                   	push   ebx
c000c432:	68 b2 c3 00 c0       	push   0xc000c3b2
c000c437:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c43d:	e8 16 9b 00 00       	call   c0015f58 <Process::createThread(void (*)(void*), void*, int)>
c000c442:	83 c4 14             	add    esp,0x14
c000c445:	5b                   	pop    ebx
c000c446:	5e                   	pop    esi
c000c447:	c3                   	ret    

c000c448 <User::loadClockSettings(int)>:
c000c448:	53                   	push   ebx
c000c449:	83 ec 14             	sub    esp,0x14
c000c44c:	68 14 01 00 00       	push   0x114
c000c451:	e8 64 b6 ff ff       	call   c0007aba <malloc>
c000c456:	83 c4 0c             	add    esp,0xc
c000c459:	89 c3                	mov    ebx,eax
c000c45b:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c461:	68 14 1b 02 c0       	push   0xc0021b14
c000c466:	50                   	push   eax
c000c467:	e8 e4 f6 ff ff       	call   c000bb50 <File::File(char const*, Process*)>
c000c46c:	58                   	pop    eax
c000c46d:	5a                   	pop    edx
c000c46e:	6a 01                	push   0x1
c000c470:	53                   	push   ebx
c000c471:	e8 f8 f6 ff ff       	call   c000bb6e <File::open(FileOpenMode)>
c000c476:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c479:	e8 4e f7 ff ff       	call   c000bbcc <File::close()>
c000c47e:	83 c4 10             	add    esp,0x10
c000c481:	85 db                	test   ebx,ebx
c000c483:	74 0f                	je     c000c494 <User::loadClockSettings(int)+0x4c>
c000c485:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c487:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c48b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c48e:	83 c4 08             	add    esp,0x8
c000c491:	5b                   	pop    ebx
c000c492:	ff e0                	jmp    eax
c000c494:	83 c4 08             	add    esp,0x8
c000c497:	5b                   	pop    ebx
c000c498:	c3                   	ret    
c000c499:	90                   	nop

c000c49a <Clock::Clock(char const*)>:
c000c49a:	83 ec 0c             	sub    esp,0xc
c000c49d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4a1:	83 ec 08             	sub    esp,0x8
c000c4a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4a8:	50                   	push   eax
c000c4a9:	e8 7e 06 00 00       	call   c000cb2c <Device::Device(char const*)>
c000c4ae:	83 c4 10             	add    esp,0x10
c000c4b1:	ba 3c 1b 02 c0       	mov    edx,0xc0021b3c
c000c4b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4ba:	89 10                	mov    DWORD PTR [eax],edx
c000c4bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4c0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c4ca:	90                   	nop
c000c4cb:	83 c4 0c             	add    esp,0xc
c000c4ce:	c3                   	ret    
c000c4cf:	90                   	nop

c000c4d0 <Clock::~Clock()>:
c000c4d0:	83 ec 0c             	sub    esp,0xc
c000c4d3:	ba 3c 1b 02 c0       	mov    edx,0xc0021b3c
c000c4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4dc:	89 10                	mov    DWORD PTR [eax],edx
c000c4de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4e2:	83 ec 0c             	sub    esp,0xc
c000c4e5:	50                   	push   eax
c000c4e6:	e8 e1 03 00 00       	call   c000c8cc <Device::~Device()>
c000c4eb:	83 c4 10             	add    esp,0x10
c000c4ee:	90                   	nop
c000c4ef:	83 c4 0c             	add    esp,0xc
c000c4f2:	c3                   	ret    
c000c4f3:	90                   	nop

c000c4f4 <Clock::~Clock()>:
c000c4f4:	83 ec 0c             	sub    esp,0xc
c000c4f7:	83 ec 0c             	sub    esp,0xc
c000c4fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4fe:	e8 cd ff ff ff       	call   c000c4d0 <Clock::~Clock()>
c000c503:	83 c4 10             	add    esp,0x10
c000c506:	83 ec 08             	sub    esp,0x8
c000c509:	68 58 01 00 00       	push   0x158
c000c50e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c512:	e8 05 e3 ff ff       	call   c000a81c <operator delete(void*, unsigned long)>
c000c517:	83 c4 10             	add    esp,0x10
c000c51a:	83 c4 0c             	add    esp,0xc
c000c51d:	c3                   	ret    

c000c51e <Clock::timeInSecondsLocal()>:
c000c51e:	53                   	push   ebx
c000c51f:	83 ec 14             	sub    esp,0x14
c000c522:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c526:	8b 10                	mov    edx,DWORD PTR [eax]
c000c528:	50                   	push   eax
c000c529:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c52c:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c533:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c539:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c53f:	89 cb                	mov    ebx,ecx
c000c541:	c1 fb 1f             	sar    ebx,0x1f
c000c544:	01 c8                	add    eax,ecx
c000c546:	11 da                	adc    edx,ebx
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	31 c9                	xor    ecx,ecx
c000c54d:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c554:	74 05                	je     c000c55b <Clock::timeInSecondsLocal()+0x3d>
c000c556:	b9 08 07 00 00       	mov    ecx,0x708
c000c55b:	31 db                	xor    ebx,ebx
c000c55d:	01 c8                	add    eax,ecx
c000c55f:	11 da                	adc    edx,ebx
c000c561:	83 c4 08             	add    esp,0x8
c000c564:	5b                   	pop    ebx
c000c565:	c3                   	ret    

c000c566 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c566:	57                   	push   edi
c000c567:	56                   	push   esi
c000c568:	53                   	push   ebx
c000c569:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c56d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c571:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c573:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c577:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c57a:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c581:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c587:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c58d:	99                   	cdq    
c000c58e:	29 c6                	sub    esi,eax
c000c590:	19 d7                	sbb    edi,edx
c000c592:	89 f0                	mov    eax,esi
c000c594:	89 fa                	mov    edx,edi
c000c596:	31 f6                	xor    esi,esi
c000c598:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c59f:	74 05                	je     c000c5a6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c5a1:	be 08 07 00 00       	mov    esi,0x708
c000c5a6:	31 ff                	xor    edi,edi
c000c5a8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c5ac:	29 f0                	sub    eax,esi
c000c5ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c5b2:	19 fa                	sbb    edx,edi
c000c5b4:	89 d8                	mov    eax,ebx
c000c5b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c5ba:	5b                   	pop    ebx
c000c5bb:	5e                   	pop    esi
c000c5bc:	5f                   	pop    edi
c000c5bd:	ff e0                	jmp    eax

c000c5bf <datetimeToSeconds(datetime_t)>:
c000c5bf:	55                   	push   ebp
c000c5c0:	57                   	push   edi
c000c5c1:	56                   	push   esi
c000c5c2:	53                   	push   ebx
c000c5c3:	83 ec 0c             	sub    esp,0xc
c000c5c6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c5ca:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c5ce:	89 d6                	mov    esi,edx
c000c5d0:	0f b6 c7             	movzx  eax,bh
c000c5d3:	c1 ee 10             	shr    esi,0x10
c000c5d6:	6b e8 3c             	imul   ebp,eax,0x3c
c000c5d9:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c5df:	0f b6 ce             	movzx  ecx,dh
c000c5e2:	89 df                	mov    edi,ebx
c000c5e4:	49                   	dec    ecx
c000c5e5:	c1 ef 10             	shr    edi,0x10
c000c5e8:	0f b6 db             	movzx  ebx,bl
c000c5eb:	89 f8                	mov    eax,edi
c000c5ed:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c5f3:	0f b6 f8             	movzx  edi,al
c000c5f6:	0f b6 d2             	movzx  edx,dl
c000c5f9:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c5fd:	01 d8                	add    eax,ebx
c000c5ff:	0f b7 de             	movzx  ebx,si
c000c602:	89 04 24             	mov    DWORD PTR [esp],eax
c000c605:	c1 f8 1f             	sar    eax,0x1f
c000c608:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c60c:	0f b6 c1             	movzx  eax,cl
c000c60f:	8b 0c 85 80 1b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde480]
c000c616:	83 f8 01             	cmp    eax,0x1
c000c619:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c61d:	76 27                	jbe    c000c646 <datetimeToSeconds(datetime_t)+0x87>
c000c61f:	83 e6 03             	and    esi,0x3
c000c622:	75 22                	jne    c000c646 <datetimeToSeconds(datetime_t)+0x87>
c000c624:	31 d2                	xor    edx,edx
c000c626:	be 64 00 00 00       	mov    esi,0x64
c000c62b:	89 d8                	mov    eax,ebx
c000c62d:	f7 f6                	div    esi
c000c62f:	85 d2                	test   edx,edx
c000c631:	75 12                	jne    c000c645 <datetimeToSeconds(datetime_t)+0x86>
c000c633:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c639:	be 90 01 00 00       	mov    esi,0x190
c000c63e:	99                   	cdq    
c000c63f:	f7 fe                	idiv   esi
c000c641:	85 d2                	test   edx,edx
c000c643:	75 01                	jne    c000c646 <datetimeToSeconds(datetime_t)+0x87>
c000c645:	41                   	inc    ecx
c000c646:	83 fb 46             	cmp    ebx,0x46
c000c649:	76 48                	jbe    c000c693 <datetimeToSeconds(datetime_t)+0xd4>
c000c64b:	be 46 00 00 00       	mov    esi,0x46
c000c650:	bf 64 00 00 00       	mov    edi,0x64
c000c655:	bd 90 01 00 00       	mov    ebp,0x190
c000c65a:	b8 6d 01 00 00       	mov    eax,0x16d
c000c65f:	f7 c6 03 00 00 00    	test   esi,0x3
c000c665:	75 23                	jne    c000c68a <datetimeToSeconds(datetime_t)+0xcb>
c000c667:	89 f0                	mov    eax,esi
c000c669:	99                   	cdq    
c000c66a:	f7 ff                	idiv   edi
c000c66c:	b8 6e 01 00 00       	mov    eax,0x16e
c000c671:	85 d2                	test   edx,edx
c000c673:	75 15                	jne    c000c68a <datetimeToSeconds(datetime_t)+0xcb>
c000c675:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c67b:	99                   	cdq    
c000c67c:	f7 fd                	idiv   ebp
c000c67e:	83 fa 01             	cmp    edx,0x1
c000c681:	19 c0                	sbb    eax,eax
c000c683:	f7 d0                	not    eax
c000c685:	05 6e 01 00 00       	add    eax,0x16e
c000c68a:	01 c1                	add    ecx,eax
c000c68c:	46                   	inc    esi
c000c68d:	39 de                	cmp    esi,ebx
c000c68f:	7c c9                	jl     c000c65a <datetimeToSeconds(datetime_t)+0x9b>
c000c691:	eb 34                	jmp    c000c6c7 <datetimeToSeconds(datetime_t)+0x108>
c000c693:	74 32                	je     c000c6c7 <datetimeToSeconds(datetime_t)+0x108>
c000c695:	b8 45 00 00 00       	mov    eax,0x45
c000c69a:	89 c2                	mov    edx,eax
c000c69c:	83 e2 03             	and    edx,0x3
c000c69f:	39 d8                	cmp    eax,ebx
c000c6a1:	7e 0f                	jle    c000c6b2 <datetimeToSeconds(datetime_t)+0xf3>
c000c6a3:	83 fa 01             	cmp    edx,0x1
c000c6a6:	19 d2                	sbb    edx,edx
c000c6a8:	48                   	dec    eax
c000c6a9:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c6b0:	eb e8                	jmp    c000c69a <datetimeToSeconds(datetime_t)+0xdb>
c000c6b2:	b8 6d 01 00 00       	mov    eax,0x16d
c000c6b7:	85 d2                	test   edx,edx
c000c6b9:	75 0a                	jne    c000c6c5 <datetimeToSeconds(datetime_t)+0x106>
c000c6bb:	83 fb 01             	cmp    ebx,0x1
c000c6be:	19 c0                	sbb    eax,eax
c000c6c0:	05 6e 01 00 00       	add    eax,0x16e
c000c6c5:	29 c1                	sub    ecx,eax
c000c6c7:	b8 80 51 01 00       	mov    eax,0x15180
c000c6cc:	f7 e9                	imul   ecx
c000c6ce:	03 04 24             	add    eax,DWORD PTR [esp]
c000c6d1:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c6d5:	83 c4 0c             	add    esp,0xc
c000c6d8:	5b                   	pop    ebx
c000c6d9:	5e                   	pop    esi
c000c6da:	5f                   	pop    edi
c000c6db:	5d                   	pop    ebp
c000c6dc:	c3                   	ret    
c000c6dd:	90                   	nop

c000c6de <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c6de:	57                   	push   edi
c000c6df:	56                   	push   esi
c000c6e0:	53                   	push   ebx
c000c6e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c6e5:	8b 06                	mov    eax,DWORD PTR [esi]
c000c6e7:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c6ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6f2:	e8 c8 fe ff ff       	call   c000c5bf <datetimeToSeconds(datetime_t)>
c000c6f7:	59                   	pop    ecx
c000c6f8:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c6ff:	5b                   	pop    ebx
c000c700:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c706:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c70c:	89 cb                	mov    ebx,ecx
c000c70e:	c1 fb 1f             	sar    ebx,0x1f
c000c711:	29 c8                	sub    eax,ecx
c000c713:	19 da                	sbb    edx,ebx
c000c715:	31 c9                	xor    ecx,ecx
c000c717:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c71e:	74 05                	je     c000c725 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c720:	b9 08 07 00 00       	mov    ecx,0x708
c000c725:	31 db                	xor    ebx,ebx
c000c727:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c72b:	29 c8                	sub    eax,ecx
c000c72d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c731:	19 da                	sbb    edx,ebx
c000c733:	89 f8                	mov    eax,edi
c000c735:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c739:	5b                   	pop    ebx
c000c73a:	5e                   	pop    esi
c000c73b:	5f                   	pop    edi
c000c73c:	ff e0                	jmp    eax

c000c73e <secondsToDatetime(unsigned long long)>:
c000c73e:	55                   	push   ebp
c000c73f:	57                   	push   edi
c000c740:	56                   	push   esi
c000c741:	53                   	push   ebx
c000c742:	83 ec 1c             	sub    esp,0x1c
c000c745:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c749:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c74d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c751:	6a 00                	push   0x0
c000c753:	68 80 51 01 00       	push   0x15180
c000c758:	55                   	push   ebp
c000c759:	57                   	push   edi
c000c75a:	e8 c1 30 01 00       	call   c001f820 <__udivdi3>
c000c75f:	83 c4 10             	add    esp,0x10
c000c762:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c768:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c76c:	6a 00                	push   0x0
c000c76e:	68 80 51 01 00       	push   0x15180
c000c773:	55                   	push   ebp
c000c774:	57                   	push   edi
c000c775:	bf 10 0e 00 00       	mov    edi,0xe10
c000c77a:	e8 a1 31 01 00       	call   c001f920 <__umoddi3>
c000c77f:	83 c4 10             	add    esp,0x10
c000c782:	99                   	cdq    
c000c783:	f7 ff                	idiv   edi
c000c785:	bf 3c 00 00 00       	mov    edi,0x3c
c000c78a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c78d:	89 d0                	mov    eax,edx
c000c78f:	99                   	cdq    
c000c790:	f7 ff                	idiv   edi
c000c792:	85 db                	test   ebx,ebx
c000c794:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c797:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c79a:	79 11                	jns    c000c7ad <secondsToDatetime(unsigned long long)+0x6f>
c000c79c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c7a0:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c7a6:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7ab:	eb 07                	jmp    c000c7b4 <secondsToDatetime(unsigned long long)+0x76>
c000c7ad:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7b2:	89 d8                	mov    eax,ebx
c000c7b4:	bf b4 05 00 00       	mov    edi,0x5b4
c000c7b9:	99                   	cdq    
c000c7ba:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c7bf:	f7 f9                	idiv   ecx
c000c7c1:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c7c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7ca:	31 d2                	xor    edx,edx
c000c7cc:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c7d4:	01 c3                	add    ebx,eax
c000c7d6:	89 d8                	mov    eax,ebx
c000c7d8:	f7 f1                	div    ecx
c000c7da:	31 d2                	xor    edx,edx
c000c7dc:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c7df:	89 d8                	mov    eax,ebx
c000c7e1:	f7 f7                	div    edi
c000c7e3:	31 d2                	xor    edx,edx
c000c7e5:	29 c1                	sub    ecx,eax
c000c7e7:	89 d8                	mov    eax,ebx
c000c7e9:	f7 f5                	div    ebp
c000c7eb:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c7f0:	29 c1                	sub    ecx,eax
c000c7f2:	31 d2                	xor    edx,edx
c000c7f4:	89 c8                	mov    eax,ecx
c000c7f6:	f7 f5                	div    ebp
c000c7f8:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c7fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c801:	31 d2                	xor    edx,edx
c000c803:	89 c8                	mov    eax,ecx
c000c805:	f7 f5                	div    ebp
c000c807:	31 d2                	xor    edx,edx
c000c809:	01 c3                	add    ebx,eax
c000c80b:	89 c8                	mov    eax,ecx
c000c80d:	f7 f7                	div    edi
c000c80f:	bf 99 00 00 00       	mov    edi,0x99
c000c814:	29 c3                	sub    ebx,eax
c000c816:	31 d2                	xor    edx,edx
c000c818:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c820:	29 c3                	sub    ebx,eax
c000c822:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c825:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c828:	bb 05 00 00 00       	mov    ebx,0x5
c000c82d:	83 c1 02             	add    ecx,0x2
c000c830:	89 c8                	mov    eax,ecx
c000c832:	f7 f7                	div    edi
c000c834:	31 d2                	xor    edx,edx
c000c836:	89 c7                	mov    edi,eax
c000c838:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c83e:	83 c0 02             	add    eax,0x2
c000c841:	f7 f3                	div    ebx
c000c843:	89 eb                	mov    ebx,ebp
c000c845:	29 c3                	sub    ebx,eax
c000c847:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c84d:	88 1e                	mov    BYTE PTR [esi],bl
c000c84f:	19 c0                	sbb    eax,eax
c000c851:	31 d2                	xor    edx,edx
c000c853:	83 e0 0c             	and    eax,0xc
c000c856:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c85a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c862:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c866:	83 f9 01             	cmp    ecx,0x1
c000c869:	0f 96 c2             	setbe  dl
c000c86c:	41                   	inc    ecx
c000c86d:	01 d0                	add    eax,edx
c000c86f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c872:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c876:	83 c4 1c             	add    esp,0x1c
c000c879:	89 f0                	mov    eax,esi
c000c87b:	5b                   	pop    ebx
c000c87c:	5e                   	pop    esi
c000c87d:	5f                   	pop    edi
c000c87e:	5d                   	pop    ebp
c000c87f:	c2 04 00             	ret    0x4

c000c882 <Clock::timeInDatetimeLocal()>:
c000c882:	53                   	push   ebx
c000c883:	83 ec 14             	sub    esp,0x14
c000c886:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c88a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c88e:	e8 8b fc ff ff       	call   c000c51e <Clock::timeInSecondsLocal()>
c000c893:	83 c4 0c             	add    esp,0xc
c000c896:	52                   	push   edx
c000c897:	50                   	push   eax
c000c898:	53                   	push   ebx
c000c899:	e8 a0 fe ff ff       	call   c000c73e <secondsToDatetime(unsigned long long)>
c000c89e:	89 d8                	mov    eax,ebx
c000c8a0:	83 c4 14             	add    esp,0x14
c000c8a3:	5b                   	pop    ebx
c000c8a4:	c2 04 00             	ret    0x4
c000c8a7:	90                   	nop

c000c8a8 <Device::hibernate()>:
c000c8a8:	c3                   	ret    
c000c8a9:	90                   	nop

c000c8aa <Device::wake()>:
c000c8aa:	c3                   	ret    
c000c8ab:	90                   	nop

c000c8ac <Device::detect()>:
c000c8ac:	c3                   	ret    
c000c8ad:	90                   	nop

c000c8ae <Device::disableLegacy()>:
c000c8ae:	c3                   	ret    
c000c8af:	90                   	nop

c000c8b0 <Device::powerSaving(PowerSavingLevel)>:
c000c8b0:	c3                   	ret    
c000c8b1:	90                   	nop

c000c8b2 <DriverlessDevice::close(int, int, void*)>:
c000c8b2:	31 c0                	xor    eax,eax
c000c8b4:	c3                   	ret    
c000c8b5:	90                   	nop

c000c8b6 <DriverlessDevice::detect()>:
c000c8b6:	c3                   	ret    
c000c8b7:	90                   	nop

c000c8b8 <DriverlessDevice::open(int, int, void*)>:
c000c8b8:	83 ec 18             	sub    esp,0x18
c000c8bb:	68 b0 1b 02 c0       	push   0xc0021bb0
c000c8c0:	e8 fe 4d 00 00       	call   c00116c3 <KePanic(char const*)>
c000c8c5:	83 c8 ff             	or     eax,0xffffffff
c000c8c8:	83 c4 1c             	add    esp,0x1c
c000c8cb:	c3                   	ret    

c000c8cc <Device::~Device()>:
c000c8cc:	ba 1c 1c 02 c0       	mov    edx,0xc0021c1c
c000c8d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8d5:	89 10                	mov    DWORD PTR [eax],edx
c000c8d7:	90                   	nop
c000c8d8:	c3                   	ret    
c000c8d9:	90                   	nop

c000c8da <Device::~Device()>:
c000c8da:	83 ec 0c             	sub    esp,0xc
c000c8dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c8e1:	e8 e6 ff ff ff       	call   c000c8cc <Device::~Device()>
c000c8e6:	83 c4 04             	add    esp,0x4
c000c8e9:	83 ec 08             	sub    esp,0x8
c000c8ec:	68 58 01 00 00       	push   0x158
c000c8f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f5:	e8 22 df ff ff       	call   c000a81c <operator delete(void*, unsigned long)>
c000c8fa:	83 c4 10             	add    esp,0x10
c000c8fd:	83 c4 0c             	add    esp,0xc
c000c900:	c3                   	ret    
c000c901:	90                   	nop

c000c902 <Device::findAndLoadDriver()>:
c000c902:	c7 44 24 04 ce 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021bce
c000c90a:	e9 3a e0 ff ff       	jmp    c000a949 <Dbg::kprintf(char const*, ...)>
c000c90f:	90                   	nop

c000c910 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c910:	57                   	push   edi
c000c911:	b9 09 00 00 00       	mov    ecx,0x9
c000c916:	56                   	push   esi
c000c917:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c91b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c91f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c929:	81 c7 18 01 00 00    	add    edi,0x118
c000c92f:	fc                   	cld    
c000c930:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c932:	5e                   	pop    esi
c000c933:	5f                   	pop    edi
c000c934:	c3                   	ret    
c000c935:	90                   	nop

c000c936 <Device::preOpenACPI(void*, char*, char*)>:
c000c936:	57                   	push   edi
c000c937:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c93c:	56                   	push   esi
c000c93d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c941:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c945:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c94f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c955:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c95b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c95f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c961:	b9 0e 00 00 00       	mov    ecx,0xe
c000c966:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c96c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c970:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c972:	5e                   	pop    esi
c000c973:	5f                   	pop    edi
c000c974:	c3                   	ret    
c000c975:	90                   	nop

c000c976 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c976:	53                   	push   ebx
c000c977:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c97b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c97f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c983:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c987:	0f b6 c0             	movzx  eax,al
c000c98a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c98e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c992:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c996:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c99a:	5b                   	pop    ebx
c000c99b:	e9 c0 05 00 00       	jmp    c000cf60 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c9a0 <Device::getParent()>:
c000c9a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9a4:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c9aa:	c3                   	ret    
c000c9ab:	90                   	nop

c000c9ac <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c9ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9b4:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c9b9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9bd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c9c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c9c5:	e9 fe 06 00 00       	jmp    c000d0c8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c9ca <Device::addChild(Device*)>:
c000c9ca:	53                   	push   ebx
c000c9cb:	83 ec 08             	sub    esp,0x8
c000c9ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c9d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9d6:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c9dc:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c9e2:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c9e4:	85 d2                	test   edx,edx
c000c9e6:	74 04                	je     c000c9ec <Device::addChild(Device*)+0x22>
c000c9e8:	89 d3                	mov    ebx,edx
c000c9ea:	eb f6                	jmp    c000c9e2 <Device::addChild(Device*)+0x18>
c000c9ec:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c9ef:	83 ec 0c             	sub    esp,0xc
c000c9f2:	6a 08                	push   0x8
c000c9f4:	e8 c1 b0 ff ff       	call   c0007aba <malloc>
c000c9f9:	89 03                	mov    DWORD PTR [ebx],eax
c000c9fb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca01:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca08:	83 c4 18             	add    esp,0x18
c000ca0b:	5b                   	pop    ebx
c000ca0c:	c3                   	ret    
c000ca0d:	90                   	nop

c000ca0e <Device::removeAllChildren()>:
c000ca0e:	56                   	push   esi
c000ca0f:	53                   	push   ebx
c000ca10:	52                   	push   edx
c000ca11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ca15:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ca1b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca1e:	74 17                	je     c000ca37 <Device::removeAllChildren()+0x29>
c000ca20:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ca23:	85 c0                	test   eax,eax
c000ca25:	74 0c                	je     c000ca33 <Device::removeAllChildren()+0x25>
c000ca27:	83 ec 0c             	sub    esp,0xc
c000ca2a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca2c:	50                   	push   eax
c000ca2d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ca30:	83 c4 10             	add    esp,0x10
c000ca33:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca35:	eb e4                	jmp    c000ca1b <Device::removeAllChildren()+0xd>
c000ca37:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca3d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca43:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca49:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca50:	58                   	pop    eax
c000ca51:	5b                   	pop    ebx
c000ca52:	5e                   	pop    esi
c000ca53:	c3                   	ret    

c000ca54 <Device::hibernateAll()>:
c000ca54:	53                   	push   ebx
c000ca55:	83 ec 14             	sub    esp,0x14
c000ca58:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca5c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca5e:	53                   	push   ebx
c000ca5f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ca62:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca68:	83 c4 10             	add    esp,0x10
c000ca6b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca6e:	74 0f                	je     c000ca7f <Device::hibernateAll()+0x2b>
c000ca70:	83 ec 0c             	sub    esp,0xc
c000ca73:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca76:	e8 d9 ff ff ff       	call   c000ca54 <Device::hibernateAll()>
c000ca7b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca7d:	eb e9                	jmp    c000ca68 <Device::hibernateAll()+0x14>
c000ca7f:	83 c4 08             	add    esp,0x8
c000ca82:	5b                   	pop    ebx
c000ca83:	c3                   	ret    

c000ca84 <Device::wakeAll()>:
c000ca84:	53                   	push   ebx
c000ca85:	83 ec 14             	sub    esp,0x14
c000ca88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca8e:	53                   	push   ebx
c000ca8f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ca92:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca98:	83 c4 10             	add    esp,0x10
c000ca9b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca9e:	74 0f                	je     c000caaf <Device::wakeAll()+0x2b>
c000caa0:	83 ec 0c             	sub    esp,0xc
c000caa3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000caa6:	e8 d9 ff ff ff       	call   c000ca84 <Device::wakeAll()>
c000caab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000caad:	eb e9                	jmp    c000ca98 <Device::wakeAll()+0x14>
c000caaf:	83 c4 08             	add    esp,0x8
c000cab2:	5b                   	pop    ebx
c000cab3:	c3                   	ret    

c000cab4 <Device::detectAll()>:
c000cab4:	53                   	push   ebx
c000cab5:	83 ec 14             	sub    esp,0x14
c000cab8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cabc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cabe:	53                   	push   ebx
c000cabf:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000cac2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cac8:	83 c4 10             	add    esp,0x10
c000cacb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cace:	74 0f                	je     c000cadf <Device::detectAll()+0x2b>
c000cad0:	83 ec 0c             	sub    esp,0xc
c000cad3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cad6:	e8 d9 ff ff ff       	call   c000cab4 <Device::detectAll()>
c000cadb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cadd:	eb e9                	jmp    c000cac8 <Device::detectAll()+0x14>
c000cadf:	83 c4 08             	add    esp,0x8
c000cae2:	5b                   	pop    ebx
c000cae3:	c3                   	ret    

c000cae4 <Device::disableLegacyAll()>:
c000cae4:	c3                   	ret    
c000cae5:	90                   	nop

c000cae6 <Device::loadDriversForAll()>:
c000cae6:	c3                   	ret    
c000cae7:	90                   	nop

c000cae8 <Device::powerSavingAll(PowerSavingLevel)>:
c000cae8:	56                   	push   esi
c000cae9:	53                   	push   ebx
c000caea:	83 ec 0c             	sub    esp,0xc
c000caed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000caf1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000caf5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000caf7:	56                   	push   esi
c000caf8:	53                   	push   ebx
c000caf9:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cafc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb02:	83 c4 10             	add    esp,0x10
c000cb05:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb08:	74 0f                	je     c000cb19 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cb0a:	52                   	push   edx
c000cb0b:	52                   	push   edx
c000cb0c:	56                   	push   esi
c000cb0d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb10:	e8 d3 ff ff ff       	call   c000cae8 <Device::powerSavingAll(PowerSavingLevel)>
c000cb15:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb17:	eb e9                	jmp    c000cb02 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cb19:	58                   	pop    eax
c000cb1a:	5b                   	pop    ebx
c000cb1b:	5e                   	pop    esi
c000cb1c:	c3                   	ret    
c000cb1d:	90                   	nop

c000cb1e <Device::setName(char const*)>:
c000cb1e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cb26:	e9 15 3b ff ff       	jmp    c0000640 <strcpy>
c000cb2b:	90                   	nop

c000cb2c <Device::Device(char const*)>:
c000cb2c:	83 ec 1c             	sub    esp,0x1c
c000cb2f:	ba 1c 1c 02 c0       	mov    edx,0xc0021c1c
c000cb34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb38:	89 10                	mov    DWORD PTR [eax],edx
c000cb3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb3e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cb48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb4c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cb56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb5a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cb64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb68:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cb72:	83 ec 08             	sub    esp,0x8
c000cb75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb7d:	e8 9c ff ff ff       	call   c000cb1e <Device::setName(char const*)>
c000cb82:	83 c4 10             	add    esp,0x10
c000cb85:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cb8d:	83 ec 0c             	sub    esp,0xc
c000cb90:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb94:	e8 21 af ff ff       	call   c0007aba <malloc>
c000cb99:	83 c4 10             	add    esp,0x10
c000cb9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cba2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cbad:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cbb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbb7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cbbd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cbc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbc7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cbcd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cbd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbd8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cbdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbe3:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cbea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbee:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cbf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbfc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cc06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc0a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cc14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc18:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000cc22:	90                   	nop
c000cc23:	83 c4 1c             	add    esp,0x1c
c000cc26:	c3                   	ret    
c000cc27:	90                   	nop

c000cc28 <Device::getName()>:
c000cc28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc2c:	05 d0 00 00 00       	add    eax,0xd0
c000cc31:	c3                   	ret    

c000cc32 <Device::closeAll()>:
c000cc32:	53                   	push   ebx
c000cc33:	83 ec 08             	sub    esp,0x8
c000cc36:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc3a:	53                   	push   ebx
c000cc3b:	e8 e8 ff ff ff       	call   c000cc28 <Device::getName()>
c000cc40:	52                   	push   edx
c000cc41:	50                   	push   eax
c000cc42:	68 08 1c 02 c0       	push   0xc0021c08
c000cc47:	e8 fd dc ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000cc4c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cc4e:	6a 00                	push   0x0
c000cc50:	6a 00                	push   0x0
c000cc52:	6a 00                	push   0x0
c000cc54:	53                   	push   ebx
c000cc55:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000cc58:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cc5e:	83 c4 20             	add    esp,0x20
c000cc61:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cc64:	74 12                	je     c000cc78 <Device::closeAll()+0x46>
c000cc66:	83 ec 0c             	sub    esp,0xc
c000cc69:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cc6c:	e8 c1 ff ff ff       	call   c000cc32 <Device::closeAll()>
c000cc71:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cc73:	83 c4 10             	add    esp,0x10
c000cc76:	eb e9                	jmp    c000cc61 <Device::closeAll()+0x2f>
c000cc78:	83 c4 08             	add    esp,0x8
c000cc7b:	5b                   	pop    ebx
c000cc7c:	c3                   	ret    
c000cc7d:	90                   	nop

c000cc7e <DriverlessDevice::DriverlessDevice(char const*)>:
c000cc7e:	83 ec 0c             	sub    esp,0xc
c000cc81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc85:	83 ec 08             	sub    esp,0x8
c000cc88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc8c:	50                   	push   eax
c000cc8d:	e8 9a fe ff ff       	call   c000cb2c <Device::Device(char const*)>
c000cc92:	83 c4 10             	add    esp,0x10
c000cc95:	ba 48 1c 02 c0       	mov    edx,0xc0021c48
c000cc9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc9e:	89 10                	mov    DWORD PTR [eax],edx
c000cca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cca4:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000ccae:	90                   	nop
c000ccaf:	83 c4 0c             	add    esp,0xc
c000ccb2:	c3                   	ret    
c000ccb3:	90                   	nop

c000ccb4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000ccb4:	57                   	push   edi
c000ccb5:	56                   	push   esi
c000ccb6:	53                   	push   ebx
c000ccb7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ccbb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ccbf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ccc3:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000ccc9:	75 0c                	jne    c000ccd7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000cccb:	52                   	push   edx
c000cccc:	52                   	push   edx
c000cccd:	53                   	push   ebx
c000ccce:	56                   	push   esi
c000cccf:	e8 fe 2f 01 00       	call   c001fcd2 <LinkedList<Device>::addElement(Device*)>
c000ccd4:	83 c4 10             	add    esp,0x10
c000ccd7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ccdd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cce0:	74 12                	je     c000ccf4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000cce2:	50                   	push   eax
c000cce3:	57                   	push   edi
c000cce4:	56                   	push   esi
c000cce5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cce8:	e8 c7 ff ff ff       	call   c000ccb4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cced:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ccef:	83 c4 10             	add    esp,0x10
c000ccf2:	eb e9                	jmp    c000ccdd <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ccf4:	5b                   	pop    ebx
c000ccf5:	5e                   	pop    esi
c000ccf6:	5f                   	pop    edi
c000ccf7:	c3                   	ret    

c000ccf8 <getDevicesOfType(DeviceType)>:
c000ccf8:	53                   	push   ebx
c000ccf9:	83 ec 14             	sub    esp,0x14
c000ccfc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cd00:	53                   	push   ebx
c000cd01:	e8 a8 30 01 00       	call   c001fdae <LinkedList<Device>::LinkedList()>
c000cd06:	83 c4 0c             	add    esp,0xc
c000cd09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd0d:	53                   	push   ebx
c000cd0e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000cd14:	e8 9b ff ff ff       	call   c000ccb4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd19:	89 d8                	mov    eax,ebx
c000cd1b:	83 c4 18             	add    esp,0x18
c000cd1e:	5b                   	pop    ebx
c000cd1f:	c2 04 00             	ret    0x4
c000cd22:	66 90                	xchg   ax,ax

c000cd24 <HardDiskController::HardDiskController(char const*)>:
c000cd24:	83 ec 0c             	sub    esp,0xc
c000cd27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd2b:	83 ec 08             	sub    esp,0x8
c000cd2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd32:	50                   	push   eax
c000cd33:	e8 f4 fd ff ff       	call   c000cb2c <Device::Device(char const*)>
c000cd38:	83 c4 10             	add    esp,0x10
c000cd3b:	ba 74 1c 02 c0       	mov    edx,0xc0021c74
c000cd40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd44:	89 10                	mov    DWORD PTR [eax],edx
c000cd46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd4a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cd54:	90                   	nop
c000cd55:	83 c4 0c             	add    esp,0xc
c000cd58:	c3                   	ret    
c000cd59:	90                   	nop
c000cd5a:	66 90                	xchg   ax,ax

c000cd5c <HardDiskController::~HardDiskController()>:
c000cd5c:	83 ec 0c             	sub    esp,0xc
c000cd5f:	ba 74 1c 02 c0       	mov    edx,0xc0021c74
c000cd64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd68:	89 10                	mov    DWORD PTR [eax],edx
c000cd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd6e:	83 ec 0c             	sub    esp,0xc
c000cd71:	50                   	push   eax
c000cd72:	e8 55 fb ff ff       	call   c000c8cc <Device::~Device()>
c000cd77:	83 c4 10             	add    esp,0x10
c000cd7a:	90                   	nop
c000cd7b:	83 c4 0c             	add    esp,0xc
c000cd7e:	c3                   	ret    
c000cd7f:	90                   	nop

c000cd80 <HardDiskController::~HardDiskController()>:
c000cd80:	83 ec 0c             	sub    esp,0xc
c000cd83:	83 ec 0c             	sub    esp,0xc
c000cd86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd8a:	e8 cd ff ff ff       	call   c000cd5c <HardDiskController::~HardDiskController()>
c000cd8f:	83 c4 10             	add    esp,0x10
c000cd92:	83 ec 08             	sub    esp,0x8
c000cd95:	68 58 01 00 00       	push   0x158
c000cd9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9e:	e8 79 da ff ff       	call   c000a81c <operator delete(void*, unsigned long)>
c000cda3:	83 c4 10             	add    esp,0x10
c000cda6:	83 c4 0c             	add    esp,0xc
c000cda9:	c3                   	ret    

c000cdaa <PhysicalDisk::eject()>:
c000cdaa:	83 c8 ff             	or     eax,0xffffffff
c000cdad:	c3                   	ret    

c000cdae <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cdae:	83 ec 0c             	sub    esp,0xc
c000cdb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdb5:	83 ec 08             	sub    esp,0x8
c000cdb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdbc:	50                   	push   eax
c000cdbd:	e8 6a fd ff ff       	call   c000cb2c <Device::Device(char const*)>
c000cdc2:	83 c4 10             	add    esp,0x10
c000cdc5:	ba a0 1c 02 c0       	mov    edx,0xc0021ca0
c000cdca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdce:	89 10                	mov    DWORD PTR [eax],edx
c000cdd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdd4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cddf:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cde6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdea:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cdf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdf8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cdfc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ce02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce06:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ce10:	90                   	nop
c000ce11:	83 c4 0c             	add    esp,0xc
c000ce14:	c3                   	ret    
c000ce15:	90                   	nop

c000ce16 <PhysicalDisk::startCache()>:
c000ce16:	56                   	push   esi
c000ce17:	53                   	push   ebx
c000ce18:	83 ec 10             	sub    esp,0x10
c000ce1b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ce1f:	6a 44                	push   0x44
c000ce21:	e8 94 ac ff ff       	call   c0007aba <malloc>
c000ce26:	89 c6                	mov    esi,eax
c000ce28:	58                   	pop    eax
c000ce29:	5a                   	pop    edx
c000ce2a:	53                   	push   ebx
c000ce2b:	56                   	push   esi
c000ce2c:	e8 7b 17 00 00       	call   c000e5ac <VCache::VCache(PhysicalDisk*)>
c000ce31:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ce37:	83 c4 14             	add    esp,0x14
c000ce3a:	5b                   	pop    ebx
c000ce3b:	5e                   	pop    esi
c000ce3c:	c3                   	ret    
c000ce3d:	90                   	nop

c000ce3e <PhysicalDisk::~PhysicalDisk()>:
c000ce3e:	83 ec 0c             	sub    esp,0xc
c000ce41:	ba a0 1c 02 c0       	mov    edx,0xc0021ca0
c000ce46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce4a:	89 10                	mov    DWORD PTR [eax],edx
c000ce4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce50:	83 ec 0c             	sub    esp,0xc
c000ce53:	50                   	push   eax
c000ce54:	e8 73 fa ff ff       	call   c000c8cc <Device::~Device()>
c000ce59:	83 c4 10             	add    esp,0x10
c000ce5c:	90                   	nop
c000ce5d:	83 c4 0c             	add    esp,0xc
c000ce60:	c3                   	ret    
c000ce61:	90                   	nop

c000ce62 <PhysicalDisk::~PhysicalDisk()>:
c000ce62:	83 ec 0c             	sub    esp,0xc
c000ce65:	83 ec 0c             	sub    esp,0xc
c000ce68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce6c:	e8 cd ff ff ff       	call   c000ce3e <PhysicalDisk::~PhysicalDisk()>
c000ce71:	83 c4 10             	add    esp,0x10
c000ce74:	83 ec 08             	sub    esp,0x8
c000ce77:	68 6c 01 00 00       	push   0x16c
c000ce7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce80:	e8 97 d9 ff ff       	call   c000a81c <operator delete(void*, unsigned long)>
c000ce85:	83 c4 10             	add    esp,0x10
c000ce88:	83 c4 0c             	add    esp,0xc
c000ce8b:	c3                   	ret    

c000ce8c <int_handler>:
c000ce8c:	55                   	push   ebp
c000ce8d:	57                   	push   edi
c000ce8e:	56                   	push   esi
c000ce8f:	53                   	push   ebx
c000ce90:	83 ec 0c             	sub    esp,0xc
c000ce93:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ce97:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce9e:	74 0b                	je     c000ceab <int_handler+0x1f>
c000cea0:	fa                   	cli    
c000cea1:	f4                   	hlt    
c000cea2:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000cea9:	75 f5                	jne    c000cea0 <int_handler+0x14>
c000ceab:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000ceae:	8d 46 e0             	lea    eax,[esi-0x20]
c000ceb1:	83 f8 17             	cmp    eax,0x17
c000ceb4:	76 40                	jbe    c000cef6 <int_handler+0x6a>
c000ceb6:	c1 e6 04             	shl    esi,0x4
c000ceb9:	31 db                	xor    ebx,ebx
c000cebb:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000cec1:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000cec7:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cecb:	85 c0                	test   eax,eax
c000cecd:	74 13                	je     c000cee2 <int_handler+0x56>
c000cecf:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000ced2:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000ced6:	74 2c                	je     c000cf04 <int_handler+0x78>
c000ced8:	83 ec 08             	sub    esp,0x8
c000cedb:	52                   	push   edx
c000cedc:	57                   	push   edi
c000cedd:	ff d0                	call   eax
c000cedf:	83 c4 10             	add    esp,0x10
c000cee2:	83 c3 01             	add    ebx,0x1
c000cee5:	83 fb 04             	cmp    ebx,0x4
c000cee8:	75 dd                	jne    c000cec7 <int_handler+0x3b>
c000ceea:	83 c4 0c             	add    esp,0xc
c000ceed:	31 c0                	xor    eax,eax
c000ceef:	5b                   	pop    ebx
c000cef0:	31 d2                	xor    edx,edx
c000cef2:	5e                   	pop    esi
c000cef3:	5f                   	pop    edi
c000cef4:	5d                   	pop    ebp
c000cef5:	c3                   	ret    
c000cef6:	83 ec 0c             	sub    esp,0xc
c000cef9:	50                   	push   eax
c000cefa:	e8 71 b5 00 00       	call   c0018470 <HalEndOfInterrupt(int)>
c000ceff:	83 c4 10             	add    esp,0x10
c000cf02:	eb b2                	jmp    c000ceb6 <int_handler+0x2a>
c000cf04:	83 ec 08             	sub    esp,0x8
c000cf07:	52                   	push   edx
c000cf08:	57                   	push   edi
c000cf09:	ff d0                	call   eax
c000cf0b:	83 c4 10             	add    esp,0x10
c000cf0e:	83 c4 0c             	add    esp,0xc
c000cf11:	5b                   	pop    ebx
c000cf12:	5e                   	pop    esi
c000cf13:	5f                   	pop    edi
c000cf14:	5d                   	pop    ebp
c000cf15:	c3                   	ret    

c000cf16 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cf16:	56                   	push   esi
c000cf17:	31 c0                	xor    eax,eax
c000cf19:	53                   	push   ebx
c000cf1a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf1e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf22:	89 ca                	mov    edx,ecx
c000cf24:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf28:	c1 e2 04             	shl    edx,0x4
c000cf2b:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cf33:	74 17                	je     c000cf4c <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cf35:	83 c0 01             	add    eax,0x1
c000cf38:	83 f8 04             	cmp    eax,0x4
c000cf3b:	75 ee                	jne    c000cf2b <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cf3d:	c7 44 24 0c d0 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021cd0
c000cf45:	5b                   	pop    ebx
c000cf46:	5e                   	pop    esi
c000cf47:	e9 77 47 00 00       	jmp    c00116c3 <KePanic(char const*)>
c000cf4c:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cf4f:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cf56:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cf5d:	5b                   	pop    ebx
c000cf5e:	5e                   	pop    esi
c000cf5f:	c3                   	ret    

c000cf60 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cf60:	57                   	push   edi
c000cf61:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cf67:	56                   	push   esi
c000cf68:	53                   	push   ebx
c000cf69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cf6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cf71:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf78:	74 54                	je     c000cfce <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cf7a:	89 c7                	mov    edi,eax
c000cf7c:	84 c0                	test   al,al
c000cf7e:	74 1d                	je     c000cf9d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cf80:	83 fe 0f             	cmp    esi,0xf
c000cf83:	0f 8f d5 00 00 00    	jg     c000d05e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cf89:	0f b6 b6 88 38 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc778]
c000cf90:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cf98:	d1 ef                	shr    edi,1
c000cf9a:	83 e7 01             	and    edi,0x1
c000cf9d:	83 ec 08             	sub    esp,0x8
c000cfa0:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cfa5:	31 db                	xor    ebx,ebx
c000cfa7:	50                   	push   eax
c000cfa8:	68 dd 1c 02 c0       	push   0xc0021cdd
c000cfad:	e8 97 d9 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000cfb2:	83 c4 10             	add    esp,0x10
c000cfb5:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cfba:	85 c0                	test   eax,eax
c000cfbc:	7f 55                	jg     c000d013 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cfbe:	83 ec 0c             	sub    esp,0xc
c000cfc1:	68 f4 1c 02 c0       	push   0xc0021cf4
c000cfc6:	e8 f8 46 00 00       	call   c00116c3 <KePanic(char const*)>
c000cfcb:	83 c4 10             	add    esp,0x10
c000cfce:	8d 7e 20             	lea    edi,[esi+0x20]
c000cfd1:	89 f8                	mov    eax,edi
c000cfd3:	31 d2                	xor    edx,edx
c000cfd5:	c1 e0 04             	shl    eax,0x4
c000cfd8:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000cfdf:	85 c9                	test   ecx,ecx
c000cfe1:	0f 84 8e 00 00 00    	je     c000d075 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000cfe7:	83 c2 01             	add    edx,0x1
c000cfea:	83 fa 04             	cmp    edx,0x4
c000cfed:	75 e9                	jne    c000cfd8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cfef:	83 ec 0c             	sub    esp,0xc
c000cff2:	68 48 1d 02 c0       	push   0xc0021d48
c000cff7:	e8 c7 46 00 00       	call   c00116c3 <KePanic(char const*)>
c000cffc:	83 c4 10             	add    esp,0x10
c000cfff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d004:	5b                   	pop    ebx
c000d005:	5e                   	pop    esi
c000d006:	5f                   	pop    edi
c000d007:	c3                   	ret    
c000d008:	83 c3 01             	add    ebx,0x1
c000d00b:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000d011:	7e ab                	jle    c000cfbe <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000d013:	83 ec 08             	sub    esp,0x8
c000d016:	8b 04 9d e0 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2f20]
c000d01d:	56                   	push   esi
c000d01e:	50                   	push   eax
c000d01f:	e8 d6 1b 01 00       	call   c001ebfa <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000d024:	83 c4 10             	add    esp,0x10
c000d027:	84 c0                	test   al,al
c000d029:	74 dd                	je     c000d008 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000d02b:	83 ec 04             	sub    esp,0x4
c000d02e:	89 f8                	mov    eax,edi
c000d030:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000d037:	0f b6 f8             	movzx  edi,al
c000d03a:	57                   	push   edi
c000d03b:	8d 7e 20             	lea    edi,[esi+0x20]
c000d03e:	6a 00                	push   0x0
c000d040:	89 f8                	mov    eax,edi
c000d042:	0f b6 c0             	movzx  eax,al
c000d045:	50                   	push   eax
c000d046:	89 f0                	mov    eax,esi
c000d048:	6a 00                	push   0x0
c000d04a:	0f b6 c0             	movzx  eax,al
c000d04d:	6a 00                	push   0x0
c000d04f:	50                   	push   eax
c000d050:	53                   	push   ebx
c000d051:	e8 10 1d 01 00       	call   c001ed66 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d056:	83 c4 20             	add    esp,0x20
c000d059:	e9 73 ff ff ff       	jmp    c000cfd1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000d05e:	83 ec 0c             	sub    esp,0xc
c000d061:	31 ff                	xor    edi,edi
c000d063:	68 10 1d 02 c0       	push   0xc0021d10
c000d068:	e8 56 46 00 00       	call   c00116c3 <KePanic(char const*)>
c000d06d:	83 c4 10             	add    esp,0x10
c000d070:	e9 28 ff ff ff       	jmp    c000cf9d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000d075:	8d 04 ba             	lea    eax,[edx+edi*4]
c000d078:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d07c:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d083:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d087:	5b                   	pop    ebx
c000d088:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d08f:	89 f0                	mov    eax,esi
c000d091:	5e                   	pop    esi
c000d092:	5f                   	pop    edi
c000d093:	c3                   	ret    

c000d094 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d098:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d09c:	c1 e0 04             	shl    eax,0x4
c000d09f:	8d 50 10             	lea    edx,[eax+0x10]
c000d0a2:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d0a8:	74 08                	je     c000d0b2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d0aa:	83 c0 04             	add    eax,0x4
c000d0ad:	39 d0                	cmp    eax,edx
c000d0af:	75 f1                	jne    c000d0a2 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d0b1:	c3                   	ret    
c000d0b2:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0bc:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d0c6:	eb e2                	jmp    c000d0aa <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d0c8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d0c8:	53                   	push   ebx
c000d0c9:	83 ec 08             	sub    esp,0x8
c000d0cc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d0d0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d0d5:	74 0e                	je     c000d0e5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d0d7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d0dc:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d0e3:	75 37                	jne    c000d11c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000d0e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0e9:	83 c0 20             	add    eax,0x20
c000d0ec:	c1 e0 04             	shl    eax,0x4
c000d0ef:	8d 50 10             	lea    edx,[eax+0x10]
c000d0f2:	39 98 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ebx
c000d0f8:	74 0c                	je     c000d106 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000d0fa:	83 c0 04             	add    eax,0x4
c000d0fd:	39 d0                	cmp    eax,edx
c000d0ff:	75 f1                	jne    c000d0f2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000d101:	83 c4 08             	add    esp,0x8
c000d104:	5b                   	pop    ebx
c000d105:	c3                   	ret    
c000d106:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d110:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d11a:	eb de                	jmp    c000d0fa <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000d11c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000d121:	7f 11                	jg     c000d134 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000d123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d127:	0f b6 80 88 38 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc778]
c000d12e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d132:	eb b1                	jmp    c000d0e5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d134:	83 ec 0c             	sub    esp,0xc
c000d137:	68 01 1d 02 c0       	push   0xc0021d01
c000d13c:	e8 82 45 00 00       	call   c00116c3 <KePanic(char const*)>
c000d141:	83 c4 10             	add    esp,0x10
c000d144:	eb 9f                	jmp    c000d0e5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000d146 <setupINTS()>:
c000d146:	31 c0                	xor    eax,eax
c000d148:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d152:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d15c:	c7 80 24 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bdc],0x0
c000d166:	c7 80 24 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bdc],0x0
c000d170:	c7 80 28 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd8],0x0
c000d17a:	c7 80 28 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd8],0x0
c000d184:	c7 80 2c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd4],0x0
c000d18e:	c7 80 2c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd4],0x0
c000d198:	83 c0 10             	add    eax,0x10
c000d19b:	3d 00 10 00 00       	cmp    eax,0x1000
c000d1a0:	75 a6                	jne    c000d148 <setupINTS()+0x2>
c000d1a2:	c3                   	ret    

c000d1a3 <convertLegacyIRQNumber(int)>:
c000d1a3:	83 ec 0c             	sub    esp,0xc
c000d1a6:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d1ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1b0:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d1b7:	74 0c                	je     c000d1c5 <convertLegacyIRQNumber(int)+0x22>
c000d1b9:	83 f8 0f             	cmp    eax,0xf
c000d1bc:	7f 0b                	jg     c000d1c9 <convertLegacyIRQNumber(int)+0x26>
c000d1be:	0f b6 80 88 38 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc778]
c000d1c5:	83 c4 0c             	add    esp,0xc
c000d1c8:	c3                   	ret    
c000d1c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1cd:	83 ec 0c             	sub    esp,0xc
c000d1d0:	68 10 1d 02 c0       	push   0xc0021d10
c000d1d5:	e8 e9 44 00 00       	call   c00116c3 <KePanic(char const*)>
c000d1da:	83 c4 10             	add    esp,0x10
c000d1dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e1:	83 c4 0c             	add    esp,0xc
c000d1e4:	c3                   	ret    
c000d1e5:	90                   	nop

c000d1e6 <startGUI(void*)>:
c000d1e6:	55                   	push   ebp
c000d1e7:	89 e5                	mov    ebp,esp
c000d1e9:	53                   	push   ebx
c000d1ea:	83 ec 04             	sub    esp,0x4
c000d1ed:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1f2:	83 e8 01             	sub    eax,0x1
c000d1f5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d1fa:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1ff:	85 c0                	test   eax,eax
c000d201:	75 01                	jne    c000d204 <startGUI(void*)+0x1e>
c000d203:	fb                   	sti    
c000d204:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d20a:	83 ec 08             	sub    esp,0x8
c000d20d:	6a 01                	push   0x1
c000d20f:	68 6d 1d 02 c0       	push   0xc0021d6d
c000d214:	e8 30 85 00 00       	call   c0015749 <Thr::loadDLL(char const*, bool)>
c000d219:	83 c4 10             	add    esp,0x10
c000d21c:	83 ec 08             	sub    esp,0x8
c000d21f:	53                   	push   ebx
c000d220:	50                   	push   eax
c000d221:	e8 54 87 00 00       	call   c001597a <Thr::executeDLL(unsigned long, void*)>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d22f:	83 ec 08             	sub    esp,0x8
c000d232:	6a 01                	push   0x1
c000d234:	68 87 1d 02 c0       	push   0xc0021d87
c000d239:	e8 0b 85 00 00       	call   c0015749 <Thr::loadDLL(char const*, bool)>
c000d23e:	83 c4 10             	add    esp,0x10
c000d241:	83 ec 08             	sub    esp,0x8
c000d244:	53                   	push   ebx
c000d245:	50                   	push   eax
c000d246:	e8 2f 87 00 00       	call   c001597a <Thr::executeDLL(unsigned long, void*)>
c000d24b:	83 c4 10             	add    esp,0x10
c000d24e:	90                   	nop
c000d24f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d252:	c9                   	leave  
c000d253:	c3                   	ret    

c000d254 <startGUIVESA(void*)>:
c000d254:	55                   	push   ebp
c000d255:	89 e5                	mov    ebp,esp
c000d257:	53                   	push   ebx
c000d258:	83 ec 04             	sub    esp,0x4
c000d25b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d260:	83 e8 01             	sub    eax,0x1
c000d263:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d268:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d26d:	85 c0                	test   eax,eax
c000d26f:	75 01                	jne    c000d272 <startGUIVESA(void*)+0x1e>
c000d271:	fb                   	sti    
c000d272:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d278:	83 ec 08             	sub    esp,0x8
c000d27b:	6a 01                	push   0x1
c000d27d:	68 a5 1d 02 c0       	push   0xc0021da5
c000d282:	e8 c2 84 00 00       	call   c0015749 <Thr::loadDLL(char const*, bool)>
c000d287:	83 c4 10             	add    esp,0x10
c000d28a:	83 ec 08             	sub    esp,0x8
c000d28d:	53                   	push   ebx
c000d28e:	50                   	push   eax
c000d28f:	e8 e6 86 00 00       	call   c001597a <Thr::executeDLL(unsigned long, void*)>
c000d294:	83 c4 10             	add    esp,0x10
c000d297:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d29d:	83 ec 08             	sub    esp,0x8
c000d2a0:	6a 01                	push   0x1
c000d2a2:	68 87 1d 02 c0       	push   0xc0021d87
c000d2a7:	e8 9d 84 00 00       	call   c0015749 <Thr::loadDLL(char const*, bool)>
c000d2ac:	83 c4 10             	add    esp,0x10
c000d2af:	83 ec 08             	sub    esp,0x8
c000d2b2:	53                   	push   ebx
c000d2b3:	50                   	push   eax
c000d2b4:	e8 c1 86 00 00       	call   c001597a <Thr::executeDLL(unsigned long, void*)>
c000d2b9:	83 c4 10             	add    esp,0x10
c000d2bc:	90                   	nop
c000d2bd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d2c0:	c9                   	leave  
c000d2c1:	c3                   	ret    

c000d2c2 <sendKeyToTerminal(unsigned char)>:
c000d2c2:	55                   	push   ebp
c000d2c3:	89 e5                	mov    ebp,esp
c000d2c5:	83 ec 28             	sub    esp,0x28
c000d2c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2cb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d2ce:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d2d3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d2d7:	83 ec 08             	sub    esp,0x8
c000d2da:	52                   	push   edx
c000d2db:	50                   	push   eax
c000d2dc:	e8 d9 ba ff ff       	call   c0008dba <VgaText::receiveKey(unsigned char)>
c000d2e1:	83 c4 10             	add    esp,0x10
c000d2e4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2e8:	83 f8 0a             	cmp    eax,0xa
c000d2eb:	74 16                	je     c000d303 <sendKeyToTerminal(unsigned char)+0x41>
c000d2ed:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2f1:	83 f8 03             	cmp    eax,0x3
c000d2f4:	74 0d                	je     c000d303 <sendKeyToTerminal(unsigned char)+0x41>
c000d2f6:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2fa:	83 f8 1c             	cmp    eax,0x1c
c000d2fd:	0f 85 97 00 00 00    	jne    c000d39a <sendKeyToTerminal(unsigned char)+0xd8>
c000d303:	fa                   	cli    
c000d304:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d309:	83 c0 01             	add    eax,0x1
c000d30c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d311:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d316:	83 c0 01             	add    eax,0x1
c000d319:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d31e:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d323:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d326:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d330:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d334:	74 1f                	je     c000d355 <sendKeyToTerminal(unsigned char)+0x93>
c000d336:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d339:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d33c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d33f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d342:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d345:	83 ec 0c             	sub    esp,0xc
c000d348:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d34b:	e8 70 93 00 00       	call   c00166c0 <unblockTask(ThreadControlBlock*)>
c000d350:	83 c4 10             	add    esp,0x10
c000d353:	eb db                	jmp    c000d330 <sendKeyToTerminal(unsigned char)+0x6e>
c000d355:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d35a:	83 e8 01             	sub    eax,0x1
c000d35d:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d362:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d367:	85 c0                	test   eax,eax
c000d369:	75 18                	jne    c000d383 <sendKeyToTerminal(unsigned char)+0xc1>
c000d36b:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d370:	85 c0                	test   eax,eax
c000d372:	74 0f                	je     c000d383 <sendKeyToTerminal(unsigned char)+0xc1>
c000d374:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d37e:	e8 25 8e 00 00       	call   c00161a8 <schedule()>
c000d383:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d388:	83 e8 01             	sub    eax,0x1
c000d38b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d390:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d395:	85 c0                	test   eax,eax
c000d397:	75 01                	jne    c000d39a <sendKeyToTerminal(unsigned char)+0xd8>
c000d399:	fb                   	sti    
c000d39a:	90                   	nop
c000d39b:	c9                   	leave  
c000d39c:	c3                   	ret    

c000d39d <sendKeyboardToken(KeyboardToken)>:
c000d39d:	55                   	push   ebp
c000d39e:	89 e5                	mov    ebp,esp
c000d3a0:	83 ec 18             	sub    esp,0x18
c000d3a3:	e8 6b 43 00 00       	call   c0011713 <KeUserIOReceived()>
c000d3a8:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d3ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3ae:	0f b7 c0             	movzx  eax,ax
c000d3b1:	83 f2 01             	xor    edx,0x1
c000d3b4:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d3ba:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d3bf:	85 c0                	test   eax,eax
c000d3c1:	74 24                	je     c000d3e7 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d3c3:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d3c9:	83 ec 04             	sub    esp,0x4
c000d3cc:	68 40 b4 02 c0       	push   0xc002b440
c000d3d1:	83 ec 08             	sub    esp,0x8
c000d3d4:	89 e2                	mov    edx,esp
c000d3d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3d9:	89 02                	mov    DWORD PTR [edx],eax
c000d3db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d3de:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d3e2:	ff d1                	call   ecx
c000d3e4:	83 c4 10             	add    esp,0x10
c000d3e7:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d3eb:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d3ee:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d3f3:	0f b6 d2             	movzx  edx,dl
c000d3f6:	0f b6 c0             	movzx  eax,al
c000d3f9:	39 c2                	cmp    edx,eax
c000d3fb:	74 1c                	je     c000d419 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d3fd:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d400:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d405:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d40a:	0f b6 c0             	movzx  eax,al
c000d40d:	83 ec 0c             	sub    esp,0xc
c000d410:	50                   	push   eax
c000d411:	e8 f0 b0 ff ff       	call   c0008506 <setTerminalScrollLock(bool)>
c000d416:	83 c4 10             	add    esp,0x10
c000d419:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d41c:	0f b6 c0             	movzx  eax,al
c000d41f:	85 c0                	test   eax,eax
c000d421:	0f 84 da 00 00 00    	je     c000d501 <sendKeyboardToken(KeyboardToken)+0x164>
c000d427:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d42a:	0f b7 c0             	movzx  eax,ax
c000d42d:	3d 18 03 00 00       	cmp    eax,0x318
c000d432:	75 06                	jne    c000d43a <sendKeyboardToken(KeyboardToken)+0x9d>
c000d434:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d43a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d43d:	0f b7 c0             	movzx  eax,ax
c000d440:	3d 19 03 00 00       	cmp    eax,0x319
c000d445:	75 06                	jne    c000d44d <sendKeyboardToken(KeyboardToken)+0xb0>
c000d447:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d44d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d450:	0f b7 c0             	movzx  eax,ax
c000d453:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d458:	75 06                	jne    c000d460 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d45a:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d460:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d463:	0f b7 c0             	movzx  eax,ax
c000d466:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d46b:	75 06                	jne    c000d473 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d46d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d473:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d476:	0f b7 c0             	movzx  eax,ax
c000d479:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d47e:	75 06                	jne    c000d486 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d480:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d486:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d489:	0f b7 c0             	movzx  eax,ax
c000d48c:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d491:	75 06                	jne    c000d499 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d493:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d499:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d49c:	0f b7 c0             	movzx  eax,ax
c000d49f:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d4a4:	75 06                	jne    c000d4ac <sendKeyboardToken(KeyboardToken)+0x10f>
c000d4a6:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d4ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4af:	0f b7 c0             	movzx  eax,ax
c000d4b2:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d4b7:	75 06                	jne    c000d4bf <sendKeyboardToken(KeyboardToken)+0x122>
c000d4b9:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d4bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4c2:	0f b7 c0             	movzx  eax,ax
c000d4c5:	3d 20 03 00 00       	cmp    eax,0x320
c000d4ca:	75 06                	jne    c000d4d2 <sendKeyboardToken(KeyboardToken)+0x135>
c000d4cc:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d4d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4d5:	0f b7 c0             	movzx  eax,ax
c000d4d8:	3d 21 03 00 00       	cmp    eax,0x321
c000d4dd:	75 06                	jne    c000d4e5 <sendKeyboardToken(KeyboardToken)+0x148>
c000d4df:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d4e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4e8:	0f b7 c0             	movzx  eax,ax
c000d4eb:	3d 22 03 00 00       	cmp    eax,0x322
c000d4f0:	0f 85 f1 00 00 00    	jne    c000d5e7 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d4f6:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d4fc:	e9 e6 00 00 00       	jmp    c000d5e7 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d504:	0f b7 c0             	movzx  eax,ax
c000d507:	3d 18 03 00 00       	cmp    eax,0x318
c000d50c:	75 0a                	jne    c000d518 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d50e:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d514:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d518:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d51b:	0f b7 c0             	movzx  eax,ax
c000d51e:	3d 19 03 00 00       	cmp    eax,0x319
c000d523:	75 0a                	jne    c000d52f <sendKeyboardToken(KeyboardToken)+0x192>
c000d525:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d52b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d52f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d532:	0f b7 c0             	movzx  eax,ax
c000d535:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d53a:	75 0a                	jne    c000d546 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d53c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d542:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d546:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d549:	0f b7 c0             	movzx  eax,ax
c000d54c:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d551:	75 0a                	jne    c000d55d <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d553:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d559:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d55d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d560:	0f b7 c0             	movzx  eax,ax
c000d563:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d568:	75 0a                	jne    c000d574 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d56a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d570:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d577:	0f b7 c0             	movzx  eax,ax
c000d57a:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d57f:	75 0a                	jne    c000d58b <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d581:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d587:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d58b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d58e:	0f b7 c0             	movzx  eax,ax
c000d591:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d596:	75 0a                	jne    c000d5a2 <sendKeyboardToken(KeyboardToken)+0x205>
c000d598:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d59e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5a5:	0f b7 c0             	movzx  eax,ax
c000d5a8:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d5ad:	75 0a                	jne    c000d5b9 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d5af:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d5b5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5bc:	0f b7 c0             	movzx  eax,ax
c000d5bf:	3d 20 03 00 00       	cmp    eax,0x320
c000d5c4:	75 0a                	jne    c000d5d0 <sendKeyboardToken(KeyboardToken)+0x233>
c000d5c6:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d5cc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5d3:	0f b7 c0             	movzx  eax,ax
c000d5d6:	3d 21 03 00 00       	cmp    eax,0x321
c000d5db:	75 0a                	jne    c000d5e7 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d5dd:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d5e3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ea:	0f b7 c0             	movzx  eax,ax
c000d5ed:	3d 00 02 00 00       	cmp    eax,0x200
c000d5f2:	75 2f                	jne    c000d623 <sendKeyboardToken(KeyboardToken)+0x286>
c000d5f4:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d5f9:	83 f0 01             	xor    eax,0x1
c000d5fc:	0f b6 c0             	movzx  eax,al
c000d5ff:	85 c0                	test   eax,eax
c000d601:	74 20                	je     c000d623 <sendKeyboardToken(KeyboardToken)+0x286>
c000d603:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d608:	6a 01                	push   0x1
c000d60a:	6a 00                	push   0x0
c000d60c:	68 e6 d1 00 c0       	push   0xc000d1e6
c000d611:	50                   	push   eax
c000d612:	e8 41 89 00 00       	call   c0015f58 <Process::createThread(void (*)(void*), void*, int)>
c000d617:	83 c4 10             	add    esp,0x10
c000d61a:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d621:	eb 3a                	jmp    c000d65d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d623:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d626:	0f b7 c0             	movzx  eax,ax
c000d629:	3d 01 02 00 00       	cmp    eax,0x201
c000d62e:	75 2d                	jne    c000d65d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d630:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d635:	83 f0 01             	xor    eax,0x1
c000d638:	0f b6 c0             	movzx  eax,al
c000d63b:	85 c0                	test   eax,eax
c000d63d:	74 1e                	je     c000d65d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d63f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d644:	6a 01                	push   0x1
c000d646:	6a 00                	push   0x0
c000d648:	68 54 d2 00 c0       	push   0xc000d254
c000d64d:	50                   	push   eax
c000d64e:	e8 05 89 00 00       	call   c0015f58 <Process::createThread(void (*)(void*), void*, int)>
c000d653:	83 c4 10             	add    esp,0x10
c000d656:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d65d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d660:	0f b7 c0             	movzx  eax,ax
c000d663:	3d 25 03 00 00       	cmp    eax,0x325
c000d668:	75 06                	jne    c000d670 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d66a:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d670:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d673:	0f b7 c0             	movzx  eax,ax
c000d676:	3d 24 03 00 00       	cmp    eax,0x324
c000d67b:	75 06                	jne    c000d683 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d67d:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d683:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d686:	0f b7 c0             	movzx  eax,ax
c000d689:	3d 23 03 00 00       	cmp    eax,0x323
c000d68e:	75 06                	jne    c000d696 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d690:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d696:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d699:	0f b7 c0             	movzx  eax,ax
c000d69c:	3d 26 03 00 00       	cmp    eax,0x326
c000d6a1:	75 06                	jne    c000d6a9 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d6a3:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d6a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ac:	0f b7 c0             	movzx  eax,ax
c000d6af:	3d 27 03 00 00       	cmp    eax,0x327
c000d6b4:	75 06                	jne    c000d6bc <sendKeyboardToken(KeyboardToken)+0x31f>
c000d6b6:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d6bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6bf:	0f b7 c0             	movzx  eax,ax
c000d6c2:	3d 22 03 00 00       	cmp    eax,0x322
c000d6c7:	75 06                	jne    c000d6cf <sendKeyboardToken(KeyboardToken)+0x332>
c000d6c9:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d6cf:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d6d3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d6d6:	83 f0 01             	xor    eax,0x1
c000d6d9:	0f b6 c0             	movzx  eax,al
c000d6dc:	85 c0                	test   eax,eax
c000d6de:	74 7c                	je     c000d75c <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d6e0:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d6e5:	0f b6 c0             	movzx  eax,al
c000d6e8:	85 c0                	test   eax,eax
c000d6ea:	74 43                	je     c000d72f <sendKeyboardToken(KeyboardToken)+0x392>
c000d6ec:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d6f0:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d6f4:	85 c0                	test   eax,eax
c000d6f6:	74 2b                	je     c000d723 <sendKeyboardToken(KeyboardToken)+0x386>
c000d6f8:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d6fe:	89 d0                	mov    eax,edx
c000d700:	c1 e0 02             	shl    eax,0x2
c000d703:	01 d0                	add    eax,edx
c000d705:	01 c0                	add    eax,eax
c000d707:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d70c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d70f:	0f b7 c0             	movzx  eax,ax
c000d712:	8d 50 d0             	lea    edx,[eax-0x30]
c000d715:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d71a:	01 d0                	add    eax,edx
c000d71c:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d721:	eb 71                	jmp    c000d794 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d723:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d72d:	eb 65                	jmp    c000d794 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d72f:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d734:	85 c0                	test   eax,eax
c000d736:	74 18                	je     c000d750 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d738:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d73d:	0f b6 c0             	movzx  eax,al
c000d740:	83 ec 0c             	sub    esp,0xc
c000d743:	50                   	push   eax
c000d744:	e8 79 fb ff ff       	call   c000d2c2 <sendKeyToTerminal(unsigned char)>
c000d749:	83 c4 10             	add    esp,0x10
c000d74c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d750:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d75a:	eb 38                	jmp    c000d794 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d75c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d75f:	0f b7 c0             	movzx  eax,ax
c000d762:	3d 01 01 00 00       	cmp    eax,0x101
c000d767:	75 2b                	jne    c000d794 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d769:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d76e:	85 c0                	test   eax,eax
c000d770:	74 18                	je     c000d78a <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d772:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d777:	0f b6 c0             	movzx  eax,al
c000d77a:	83 ec 0c             	sub    esp,0xc
c000d77d:	50                   	push   eax
c000d77e:	e8 3f fb ff ff       	call   c000d2c2 <sendKeyToTerminal(unsigned char)>
c000d783:	83 c4 10             	add    esp,0x10
c000d786:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d78a:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d794:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d797:	83 f0 01             	xor    eax,0x1
c000d79a:	0f b6 c0             	movzx  eax,al
c000d79d:	85 c0                	test   eax,eax
c000d79f:	74 5a                	je     c000d7fb <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7a1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7a4:	83 f0 01             	xor    eax,0x1
c000d7a7:	0f b6 c0             	movzx  eax,al
c000d7aa:	85 c0                	test   eax,eax
c000d7ac:	74 4d                	je     c000d7fb <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7ae:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d7b3:	83 f0 01             	xor    eax,0x1
c000d7b6:	0f b6 c0             	movzx  eax,al
c000d7b9:	85 c0                	test   eax,eax
c000d7bb:	74 3e                	je     c000d7fb <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7c0:	0f b7 c0             	movzx  eax,ax
c000d7c3:	83 f8 1f             	cmp    eax,0x1f
c000d7c6:	76 0b                	jbe    c000d7d3 <sendKeyboardToken(KeyboardToken)+0x436>
c000d7c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7cb:	0f b7 c0             	movzx  eax,ax
c000d7ce:	83 f8 7e             	cmp    eax,0x7e
c000d7d1:	76 16                	jbe    c000d7e9 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7d6:	0f b7 c0             	movzx  eax,ax
c000d7d9:	83 f8 0a             	cmp    eax,0xa
c000d7dc:	74 0b                	je     c000d7e9 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7e1:	0f b7 c0             	movzx  eax,ax
c000d7e4:	83 f8 08             	cmp    eax,0x8
c000d7e7:	75 12                	jne    c000d7fb <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7ec:	0f b6 c0             	movzx  eax,al
c000d7ef:	83 ec 0c             	sub    esp,0xc
c000d7f2:	50                   	push   eax
c000d7f3:	e8 ca fa ff ff       	call   c000d2c2 <sendKeyToTerminal(unsigned char)>
c000d7f8:	83 c4 10             	add    esp,0x10
c000d7fb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7fe:	83 f0 01             	xor    eax,0x1
c000d801:	0f b6 c0             	movzx  eax,al
c000d804:	85 c0                	test   eax,eax
c000d806:	74 5d                	je     c000d865 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d808:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d80b:	83 f0 01             	xor    eax,0x1
c000d80e:	0f b6 c0             	movzx  eax,al
c000d811:	85 c0                	test   eax,eax
c000d813:	74 50                	je     c000d865 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d815:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d81a:	0f b6 c0             	movzx  eax,al
c000d81d:	85 c0                	test   eax,eax
c000d81f:	74 44                	je     c000d865 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d824:	0f b7 c0             	movzx  eax,ax
c000d827:	83 f8 3f             	cmp    eax,0x3f
c000d82a:	76 39                	jbe    c000d865 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d82c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d82f:	0f b7 c0             	movzx  eax,ax
c000d832:	83 f8 7f             	cmp    eax,0x7f
c000d835:	77 2e                	ja     c000d865 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d837:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d83a:	88 c2                	mov    dl,al
c000d83c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d83f:	0f b7 c0             	movzx  eax,ax
c000d842:	83 f8 5f             	cmp    eax,0x5f
c000d845:	76 04                	jbe    c000d84b <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d847:	b0 20                	mov    al,0x20
c000d849:	eb 02                	jmp    c000d84d <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d84b:	b0 00                	mov    al,0x0
c000d84d:	89 d1                	mov    ecx,edx
c000d84f:	29 c1                	sub    ecx,eax
c000d851:	89 c8                	mov    eax,ecx
c000d853:	83 e8 40             	sub    eax,0x40
c000d856:	0f b6 c0             	movzx  eax,al
c000d859:	83 ec 0c             	sub    esp,0xc
c000d85c:	50                   	push   eax
c000d85d:	e8 60 fa ff ff       	call   c000d2c2 <sendKeyToTerminal(unsigned char)>
c000d862:	83 c4 10             	add    esp,0x10
c000d865:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d868:	0f b7 c0             	movzx  eax,ax
c000d86b:	3d 00 03 00 00       	cmp    eax,0x300
c000d870:	75 12                	jne    c000d884 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d872:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d875:	83 f0 01             	xor    eax,0x1
c000d878:	0f b6 c0             	movzx  eax,al
c000d87b:	85 c0                	test   eax,eax
c000d87d:	74 05                	je     c000d884 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d87f:	e8 83 ac ff ff       	call   c0008507 <doTerminalCycle()>
c000d884:	90                   	nop
c000d885:	c9                   	leave  
c000d886:	c3                   	ret    

c000d887 <clearInternalKeybuffer(VgaText*)>:
c000d887:	55                   	push   ebp
c000d888:	89 e5                	mov    ebp,esp
c000d88a:	83 ec 08             	sub    esp,0x8
c000d88d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d890:	05 02 01 00 00       	add    eax,0x102
c000d895:	83 ec 0c             	sub    esp,0xc
c000d898:	50                   	push   eax
c000d899:	e8 d2 2c ff ff       	call   c0000570 <strlen>
c000d89e:	83 c4 10             	add    esp,0x10
c000d8a1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d8a4:	81 c2 02 01 00 00    	add    edx,0x102
c000d8aa:	83 ec 04             	sub    esp,0x4
c000d8ad:	50                   	push   eax
c000d8ae:	6a 00                	push   0x0
c000d8b0:	52                   	push   edx
c000d8b1:	e8 3a 2c ff ff       	call   c00004f0 <memset>
c000d8b6:	83 c4 10             	add    esp,0x10
c000d8b9:	90                   	nop
c000d8ba:	c9                   	leave  
c000d8bb:	c3                   	ret    

c000d8bc <readKeyboard(VgaText*, char*, unsigned long)>:
c000d8bc:	55                   	push   ebp
c000d8bd:	89 e5                	mov    ebp,esp
c000d8bf:	83 ec 18             	sub    esp,0x18
c000d8c2:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d8c7:	85 c0                	test   eax,eax
c000d8c9:	74 2a                	je     c000d8f5 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d8cb:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d8d1:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d8d7:	83 ec 04             	sub    esp,0x4
c000d8da:	68 40 b4 02 c0       	push   0xc002b440
c000d8df:	83 ec 08             	sub    esp,0x8
c000d8e2:	89 e2                	mov    edx,esp
c000d8e4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d8e7:	89 02                	mov    DWORD PTR [edx],eax
c000d8e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d8ec:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d8f0:	ff d1                	call   ecx
c000d8f2:	83 c4 10             	add    esp,0x10
c000d8f5:	fb                   	sti    
c000d8f6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d8fd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d901:	0f 84 0d 01 00 00    	je     c000da14 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d907:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d90a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d910:	0f be c0             	movsx  eax,al
c000d913:	85 c0                	test   eax,eax
c000d915:	75 2c                	jne    c000d943 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d917:	fa                   	cli    
c000d918:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d91d:	83 c0 01             	add    eax,0x1
c000d920:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d925:	e8 7e 88 00 00       	call   c00161a8 <schedule()>
c000d92a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d92f:	83 e8 01             	sub    eax,0x1
c000d932:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d937:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d93c:	85 c0                	test   eax,eax
c000d93e:	75 c7                	jne    c000d907 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d940:	fb                   	sti    
c000d941:	eb c4                	jmp    c000d907 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d943:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d946:	8d 50 01             	lea    edx,[eax+0x1]
c000d949:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d94c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d94f:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d955:	88 10                	mov    BYTE PTR [eax],dl
c000d957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d95a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d960:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d963:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d967:	83 f8 03             	cmp    eax,0x3
c000d96a:	75 1e                	jne    c000d98a <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d96c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d971:	8b 00                	mov    eax,DWORD PTR [eax]
c000d973:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d976:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d97c:	83 ec 08             	sub    esp,0x8
c000d97f:	6a 02                	push   0x2
c000d981:	50                   	push   eax
c000d982:	e8 df 41 00 00       	call   c0011b66 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d987:	83 c4 10             	add    esp,0x10
c000d98a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d98e:	83 f8 1c             	cmp    eax,0x1c
c000d991:	75 1e                	jne    c000d9b1 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d993:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d998:	8b 00                	mov    eax,DWORD PTR [eax]
c000d99a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d99d:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d9a3:	83 ec 08             	sub    esp,0x8
c000d9a6:	6a 09                	push   0x9
c000d9a8:	50                   	push   eax
c000d9a9:	e8 b8 41 00 00       	call   c0011b66 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d9ae:	83 c4 10             	add    esp,0x10
c000d9b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d9b4:	05 02 01 00 00       	add    eax,0x102
c000d9b9:	83 ec 0c             	sub    esp,0xc
c000d9bc:	50                   	push   eax
c000d9bd:	e8 ae 2b ff ff       	call   c0000570 <strlen>
c000d9c2:	83 c4 10             	add    esp,0x10
c000d9c5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9c8:	81 c2 02 01 00 00    	add    edx,0x102
c000d9ce:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d9d1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9d4:	81 c2 02 01 00 00    	add    edx,0x102
c000d9da:	83 ec 04             	sub    esp,0x4
c000d9dd:	50                   	push   eax
c000d9de:	51                   	push   ecx
c000d9df:	52                   	push   edx
c000d9e0:	e8 eb 29 ff ff       	call   c00003d0 <memmove>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d9ec:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d9f0:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9f4:	83 f8 0a             	cmp    eax,0xa
c000d9f7:	74 16                	je     c000da0f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d9f9:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9fd:	83 f8 03             	cmp    eax,0x3
c000da00:	74 0d                	je     c000da0f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da02:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da06:	83 f8 1c             	cmp    eax,0x1c
c000da09:	0f 85 ee fe ff ff    	jne    c000d8fd <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000da0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da12:	eb 03                	jmp    c000da17 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000da14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da17:	c9                   	leave  
c000da18:	c3                   	ret    
c000da19:	90                   	nop

c000da1a <Keyboard::Keyboard(char const*)>:
c000da1a:	83 ec 0c             	sub    esp,0xc
c000da1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da21:	83 ec 08             	sub    esp,0x8
c000da24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da28:	50                   	push   eax
c000da29:	e8 fe f0 ff ff       	call   c000cb2c <Device::Device(char const*)>
c000da2e:	83 c4 10             	add    esp,0x10
c000da31:	ba c8 1d 02 c0       	mov    edx,0xc0021dc8
c000da36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da3a:	89 10                	mov    DWORD PTR [eax],edx
c000da3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da40:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000da4a:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000da51:	90                   	nop
c000da52:	83 c4 0c             	add    esp,0xc
c000da55:	c3                   	ret    

c000da56 <Keyboard::~Keyboard()>:
c000da56:	83 ec 0c             	sub    esp,0xc
c000da59:	ba c8 1d 02 c0       	mov    edx,0xc0021dc8
c000da5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da62:	89 10                	mov    DWORD PTR [eax],edx
c000da64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da68:	83 ec 0c             	sub    esp,0xc
c000da6b:	50                   	push   eax
c000da6c:	e8 5b ee ff ff       	call   c000c8cc <Device::~Device()>
c000da71:	83 c4 10             	add    esp,0x10
c000da74:	90                   	nop
c000da75:	83 c4 0c             	add    esp,0xc
c000da78:	c3                   	ret    
c000da79:	90                   	nop

c000da7a <Keyboard::~Keyboard()>:
c000da7a:	83 ec 0c             	sub    esp,0xc
c000da7d:	83 ec 0c             	sub    esp,0xc
c000da80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da84:	e8 cd ff ff ff       	call   c000da56 <Keyboard::~Keyboard()>
c000da89:	83 c4 10             	add    esp,0x10
c000da8c:	83 ec 08             	sub    esp,0x8
c000da8f:	68 5c 01 00 00       	push   0x15c
c000da94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da98:	e8 7f cd ff ff       	call   c000a81c <operator delete(void*, unsigned long)>
c000da9d:	83 c4 10             	add    esp,0x10
c000daa0:	83 c4 0c             	add    esp,0xc
c000daa3:	c3                   	ret    

c000daa4 <LogicalDisk::close(int, int, void*)>:
c000daa4:	83 c8 ff             	or     eax,0xffffffff
c000daa7:	c3                   	ret    

c000daa8 <LogicalDisk::~LogicalDisk()>:
c000daa8:	83 ec 0c             	sub    esp,0xc
c000daab:	ba 40 1e 02 c0       	mov    edx,0xc0021e40
c000dab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dab4:	89 10                	mov    DWORD PTR [eax],edx
c000dab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daba:	83 ec 0c             	sub    esp,0xc
c000dabd:	50                   	push   eax
c000dabe:	e8 09 ee ff ff       	call   c000c8cc <Device::~Device()>
c000dac3:	83 c4 10             	add    esp,0x10
c000dac6:	90                   	nop
c000dac7:	83 c4 0c             	add    esp,0xc
c000daca:	c3                   	ret    
c000dacb:	90                   	nop

c000dacc <LogicalDisk::~LogicalDisk()>:
c000dacc:	83 ec 0c             	sub    esp,0xc
c000dacf:	83 ec 0c             	sub    esp,0xc
c000dad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dad6:	e8 cd ff ff ff       	call   c000daa8 <LogicalDisk::~LogicalDisk()>
c000dadb:	83 c4 10             	add    esp,0x10
c000dade:	83 ec 08             	sub    esp,0x8
c000dae1:	68 78 01 00 00       	push   0x178
c000dae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daea:	e8 2d cd ff ff       	call   c000a81c <operator delete(void*, unsigned long)>
c000daef:	83 c4 10             	add    esp,0x10
c000daf2:	83 c4 0c             	add    esp,0xc
c000daf5:	c3                   	ret    

c000daf6 <LogicalDisk::open(int, int, void*)>:
c000daf6:	83 ec 18             	sub    esp,0x18
c000daf9:	68 f4 1d 02 c0       	push   0xc0021df4
c000dafe:	e8 c0 3b 00 00       	call   c00116c3 <KePanic(char const*)>
c000db03:	83 c8 ff             	or     eax,0xffffffff
c000db06:	83 c4 1c             	add    esp,0x1c
c000db09:	c3                   	ret    

c000db0a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000db0a:	53                   	push   ebx
c000db0b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000db0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000db17:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000db1d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000db23:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000db29:	77 10                	ja     c000db3b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000db2b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000db31:	89 d3                	mov    ebx,edx
c000db33:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000db39:	72 05                	jb     c000db40 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000db3b:	83 c8 ff             	or     eax,0xffffffff
c000db3e:	89 c2                	mov    edx,eax
c000db40:	5b                   	pop    ebx
c000db41:	c3                   	ret    

c000db42 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000db42:	56                   	push   esi
c000db43:	83 c8 ff             	or     eax,0xffffffff
c000db46:	53                   	push   ebx
c000db47:	89 c2                	mov    edx,eax
c000db49:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db4d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000db51:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000db55:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db5b:	77 27                	ja     c000db84 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db5d:	89 d8                	mov    eax,ebx
c000db5f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000db65:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000db6b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000db70:	89 c2                	mov    edx,eax
c000db72:	73 10                	jae    c000db84 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db74:	89 c8                	mov    eax,ecx
c000db76:	89 da                	mov    edx,ebx
c000db78:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000db7e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000db84:	5b                   	pop    ebx
c000db85:	5e                   	pop    esi
c000db86:	c3                   	ret    
c000db87:	90                   	nop

c000db88 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000db88:	83 ec 1c             	sub    esp,0x1c
c000db8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000db8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db9b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000dba2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dba6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dbaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbae:	83 ec 08             	sub    esp,0x8
c000dbb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbb5:	50                   	push   eax
c000dbb6:	e8 71 ef ff ff       	call   c000cb2c <Device::Device(char const*)>
c000dbbb:	83 c4 10             	add    esp,0x10
c000dbbe:	ba 40 1e 02 c0       	mov    edx,0xc0021e40
c000dbc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbc7:	89 10                	mov    DWORD PTR [eax],edx
c000dbc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbcd:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dbd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd8:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000dbdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbe3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dbea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbee:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000dbf8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dbfc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dc00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dc04:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dc0a:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dc10:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc14:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dc17:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc1b:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dc21:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dc27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc2b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dc2f:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dc35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc39:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dc43:	90                   	nop
c000dc44:	83 c4 1c             	add    esp,0x1c
c000dc47:	c3                   	ret    

c000dc48 <LogicalDisk::assignDriveLetter()>:
c000dc48:	55                   	push   ebp
c000dc49:	57                   	push   edi
c000dc4a:	56                   	push   esi
c000dc4b:	53                   	push   ebx
c000dc4c:	83 ec 14             	sub    esp,0x14
c000dc4f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dc53:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dc59:	b0 41                	mov    al,0x41
c000dc5b:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dc61:	84 d2                	test   dl,dl
c000dc63:	75 02                	jne    c000dc67 <LogicalDisk::assignDriveLetter()+0x1f>
c000dc65:	b0 43                	mov    al,0x43
c000dc67:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dc6d:	0f b6 ca             	movzx  ecx,dl
c000dc70:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dc74:	0f be e8             	movsx  ebp,al
c000dc77:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dc7d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc81:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dc85:	3c 43                	cmp    al,0x43
c000dc87:	75 10                	jne    c000dc99 <LogicalDisk::assignDriveLetter()+0x51>
c000dc89:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dc90:	75 5a                	jne    c000dcec <LogicalDisk::assignDriveLetter()+0xa4>
c000dc92:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dc97:	75 53                	jne    c000dcec <LogicalDisk::assignDriveLetter()+0xa4>
c000dc99:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dc9c:	ba 01 00 00 00       	mov    edx,0x1
c000dca1:	89 34 24             	mov    DWORD PTR [esp],esi
c000dca4:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dca7:	d3 e2                	shl    edx,cl
c000dca9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dcad:	89 d7                	mov    edi,edx
c000dcaf:	89 d6                	mov    esi,edx
c000dcb1:	c1 ff 1f             	sar    edi,0x1f
c000dcb4:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dcb8:	21 f9                	and    ecx,edi
c000dcba:	09 d1                	or     ecx,edx
c000dcbc:	75 2e                	jne    c000dcec <LogicalDisk::assignDriveLetter()+0xa4>
c000dcbe:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dcc2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dcc6:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dccc:	09 f2                	or     edx,esi
c000dcce:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dcd1:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dcd7:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dcde:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dce2:	09 fa                	or     edx,edi
c000dce4:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dcea:	eb 0d                	jmp    c000dcf9 <LogicalDisk::assignDriveLetter()+0xb1>
c000dcec:	8d 50 01             	lea    edx,[eax+0x1]
c000dcef:	45                   	inc    ebp
c000dcf0:	88 d0                	mov    al,dl
c000dcf2:	80 fa 5b             	cmp    dl,0x5b
c000dcf5:	75 8e                	jne    c000dc85 <LogicalDisk::assignDriveLetter()+0x3d>
c000dcf7:	31 c0                	xor    eax,eax
c000dcf9:	83 c4 14             	add    esp,0x14
c000dcfc:	5b                   	pop    ebx
c000dcfd:	5e                   	pop    esi
c000dcfe:	5f                   	pop    edi
c000dcff:	5d                   	pop    ebp
c000dd00:	c3                   	ret    
c000dd01:	90                   	nop

c000dd02 <LogicalDisk::mount()>:
c000dd02:	56                   	push   esi
c000dd03:	53                   	push   ebx
c000dd04:	53                   	push   ebx
c000dd05:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd09:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dd0f:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dd19:	85 db                	test   ebx,ebx
c000dd1b:	74 27                	je     c000dd44 <LogicalDisk::mount()+0x42>
c000dd1d:	51                   	push   ecx
c000dd1e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dd25:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dd27:	83 e8 41             	sub    eax,0x41
c000dd2a:	50                   	push   eax
c000dd2b:	56                   	push   esi
c000dd2c:	53                   	push   ebx
c000dd2d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dd30:	83 c4 10             	add    esp,0x10
c000dd33:	84 c0                	test   al,al
c000dd35:	74 08                	je     c000dd3f <LogicalDisk::mount()+0x3d>
c000dd37:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dd3d:	eb 07                	jmp    c000dd46 <LogicalDisk::mount()+0x44>
c000dd3f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dd42:	eb d5                	jmp    c000dd19 <LogicalDisk::mount()+0x17>
c000dd44:	31 c0                	xor    eax,eax
c000dd46:	5a                   	pop    edx
c000dd47:	5b                   	pop    ebx
c000dd48:	5e                   	pop    esi
c000dd49:	c3                   	ret    

c000dd4a <LogicalDisk::unmount()>:
c000dd4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd4e:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dd58:	c3                   	ret    
c000dd59:	90                   	nop

c000dd5a <LogicalDisk::eject()>:
c000dd5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd5e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dd64:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd66:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd6a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dd6d:	90                   	nop

c000dd6e <LogicalDisk::unassignDriveLetter()>:
c000dd6e:	57                   	push   edi
c000dd6f:	56                   	push   esi
c000dd70:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dd74:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dd7b:	85 c9                	test   ecx,ecx
c000dd7d:	75 0f                	jne    c000dd8e <LogicalDisk::unassignDriveLetter()+0x20>
c000dd7f:	c7 44 24 0c 18 1e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021e18
c000dd87:	5e                   	pop    esi
c000dd88:	5f                   	pop    edi
c000dd89:	e9 35 39 00 00       	jmp    c00116c3 <KePanic(char const*)>
c000dd8e:	83 e9 41             	sub    ecx,0x41
c000dd91:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dd98:	b8 01 00 00 00       	mov    eax,0x1
c000dd9d:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000dda8:	d3 e0                	shl    eax,cl
c000ddaa:	89 c7                	mov    edi,eax
c000ddac:	f7 d0                	not    eax
c000ddae:	c1 ff 1f             	sar    edi,0x1f
c000ddb1:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000ddb7:	89 fe                	mov    esi,edi
c000ddb9:	f7 d6                	not    esi
c000ddbb:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000ddc1:	5e                   	pop    esi
c000ddc2:	5f                   	pop    edi
c000ddc3:	c3                   	ret    

c000ddc4 <LogicalDisk::read(unsigned long long, int, void*)>:
c000ddc4:	57                   	push   edi
c000ddc5:	56                   	push   esi
c000ddc6:	53                   	push   ebx
c000ddc7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ddcb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ddcf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ddd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ddd7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dddd:	77 41                	ja     c000de20 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000dddf:	99                   	cdq    
c000dde0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dde6:	01 c8                	add    eax,ecx
c000dde8:	11 da                	adc    edx,ebx
c000ddea:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ddf0:	19 d7                	sbb    edi,edx
c000ddf2:	72 33                	jb     c000de27 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000ddf4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ddfa:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de00:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de04:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de08:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de0e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de18:	5b                   	pop    ebx
c000de19:	5e                   	pop    esi
c000de1a:	5f                   	pop    edi
c000de1b:	e9 c6 0a 00 00       	jmp    c000e8e6 <VCache::read(unsigned long long, int, void*)>
c000de20:	b8 05 00 00 00       	mov    eax,0x5
c000de25:	eb 05                	jmp    c000de2c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000de27:	b8 07 00 00 00       	mov    eax,0x7
c000de2c:	5b                   	pop    ebx
c000de2d:	5e                   	pop    esi
c000de2e:	5f                   	pop    edi
c000de2f:	c3                   	ret    

c000de30 <LogicalDisk::write(unsigned long long, int, void*)>:
c000de30:	57                   	push   edi
c000de31:	56                   	push   esi
c000de32:	53                   	push   ebx
c000de33:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de3b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de43:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de49:	77 41                	ja     c000de8c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000de4b:	99                   	cdq    
c000de4c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de52:	01 c8                	add    eax,ecx
c000de54:	11 da                	adc    edx,ebx
c000de56:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de5c:	19 d7                	sbb    edi,edx
c000de5e:	72 33                	jb     c000de93 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000de60:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de66:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de6c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de70:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de74:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de7a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de84:	5b                   	pop    ebx
c000de85:	5e                   	pop    esi
c000de86:	5f                   	pop    edi
c000de87:	e9 6c 09 00 00       	jmp    c000e7f8 <VCache::write(unsigned long long, int, void*)>
c000de8c:	b8 05 00 00 00       	mov    eax,0x5
c000de91:	eb 05                	jmp    c000de98 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000de93:	b8 07 00 00 00       	mov    eax,0x7
c000de98:	5b                   	pop    ebx
c000de99:	5e                   	pop    esi
c000de9a:	5f                   	pop    edi
c000de9b:	c3                   	ret    

c000de9c <Mouse::Mouse(char const*)>:
c000de9c:	83 ec 0c             	sub    esp,0xc
c000de9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dea3:	83 ec 08             	sub    esp,0x8
c000dea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deaa:	50                   	push   eax
c000deab:	e8 7c ec ff ff       	call   c000cb2c <Device::Device(char const*)>
c000deb0:	83 c4 10             	add    esp,0x10
c000deb3:	ba 6c 1e 02 c0       	mov    edx,0xc0021e6c
c000deb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000debc:	89 10                	mov    DWORD PTR [eax],edx
c000debe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000decc:	90                   	nop
c000decd:	83 c4 0c             	add    esp,0xc
c000ded0:	c3                   	ret    
c000ded1:	90                   	nop
c000ded2:	66 90                	xchg   ax,ax

c000ded4 <Mouse::~Mouse()>:
c000ded4:	83 ec 0c             	sub    esp,0xc
c000ded7:	ba 6c 1e 02 c0       	mov    edx,0xc0021e6c
c000dedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dee0:	89 10                	mov    DWORD PTR [eax],edx
c000dee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dee6:	83 ec 0c             	sub    esp,0xc
c000dee9:	50                   	push   eax
c000deea:	e8 dd e9 ff ff       	call   c000c8cc <Device::~Device()>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	90                   	nop
c000def3:	83 c4 0c             	add    esp,0xc
c000def6:	c3                   	ret    
c000def7:	90                   	nop

c000def8 <Mouse::~Mouse()>:
c000def8:	83 ec 0c             	sub    esp,0xc
c000defb:	83 ec 0c             	sub    esp,0xc
c000defe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df02:	e8 cd ff ff ff       	call   c000ded4 <Mouse::~Mouse()>
c000df07:	83 c4 10             	add    esp,0x10
c000df0a:	83 ec 08             	sub    esp,0x8
c000df0d:	68 58 01 00 00       	push   0x158
c000df12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df16:	e8 01 c9 ff ff       	call   c000a81c <operator delete(void*, unsigned long)>
c000df1b:	83 c4 10             	add    esp,0x10
c000df1e:	83 c4 0c             	add    esp,0xc
c000df21:	c3                   	ret    

c000df22 <NIC::getMAC()>:
c000df22:	31 c0                	xor    eax,eax
c000df24:	31 d2                	xor    edx,edx
c000df26:	c3                   	ret    
c000df27:	90                   	nop

c000df28 <NIC::write(int, unsigned char*, int*)>:
c000df28:	b8 01 00 00 00       	mov    eax,0x1
c000df2d:	c3                   	ret    

c000df2e <NIC::NIC(char const*)>:
c000df2e:	83 ec 0c             	sub    esp,0xc
c000df31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df35:	83 ec 08             	sub    esp,0x8
c000df38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df3c:	50                   	push   eax
c000df3d:	e8 ea eb ff ff       	call   c000cb2c <Device::Device(char const*)>
c000df42:	83 c4 10             	add    esp,0x10
c000df45:	ba 98 1e 02 c0       	mov    edx,0xc0021e98
c000df4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4e:	89 10                	mov    DWORD PTR [eax],edx
c000df50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df54:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000df5e:	90                   	nop
c000df5f:	83 c4 0c             	add    esp,0xc
c000df62:	c3                   	ret    
c000df63:	90                   	nop

c000df64 <NIC::~NIC()>:
c000df64:	83 ec 0c             	sub    esp,0xc
c000df67:	ba 98 1e 02 c0       	mov    edx,0xc0021e98
c000df6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df70:	89 10                	mov    DWORD PTR [eax],edx
c000df72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df76:	83 ec 0c             	sub    esp,0xc
c000df79:	50                   	push   eax
c000df7a:	e8 4d e9 ff ff       	call   c000c8cc <Device::~Device()>
c000df7f:	83 c4 10             	add    esp,0x10
c000df82:	90                   	nop
c000df83:	83 c4 0c             	add    esp,0xc
c000df86:	c3                   	ret    
c000df87:	90                   	nop

c000df88 <NIC::~NIC()>:
c000df88:	83 ec 0c             	sub    esp,0xc
c000df8b:	83 ec 0c             	sub    esp,0xc
c000df8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df92:	e8 cd ff ff ff       	call   c000df64 <NIC::~NIC()>
c000df97:	83 c4 10             	add    esp,0x10
c000df9a:	83 ec 08             	sub    esp,0x8
c000df9d:	68 58 01 00 00       	push   0x158
c000dfa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa6:	e8 71 c8 ff ff       	call   c000a81c <operator delete(void*, unsigned long)>
c000dfab:	83 c4 10             	add    esp,0x10
c000dfae:	83 c4 0c             	add    esp,0xc
c000dfb1:	c3                   	ret    

c000dfb2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dfb2:	55                   	push   ebp
c000dfb3:	57                   	push   edi
c000dfb4:	56                   	push   esi
c000dfb5:	53                   	push   ebx
c000dfb6:	81 ec 28 01 00 00    	sub    esp,0x128
c000dfbc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000dfc3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000dfca:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000dfd1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000dfd8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dfdc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dfe0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dfe7:	e8 3c ec ff ff       	call   c000cc28 <Device::getName()>
c000dfec:	5a                   	pop    edx
c000dfed:	59                   	pop    ecx
c000dfee:	50                   	push   eax
c000dfef:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dff3:	55                   	push   ebp
c000dff4:	e8 47 26 ff ff       	call   c0000640 <strcpy>
c000dff9:	5b                   	pop    ebx
c000dffa:	58                   	pop    eax
c000dffb:	68 c4 1e 02 c0       	push   0xc0021ec4
c000e000:	55                   	push   ebp
c000e001:	e8 3a 28 ff ff       	call   c0000840 <strcat>
c000e006:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000e00d:	e8 a8 9a ff ff       	call   c0007aba <malloc>
c000e012:	83 c4 0c             	add    esp,0xc
c000e015:	89 c3                	mov    ebx,eax
c000e017:	57                   	push   edi
c000e018:	56                   	push   esi
c000e019:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e01d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e021:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000e028:	55                   	push   ebp
c000e029:	50                   	push   eax
c000e02a:	e8 59 fb ff ff       	call   c000db88 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000e02f:	83 c4 14             	add    esp,0x14
c000e032:	53                   	push   ebx
c000e033:	e8 10 fc ff ff       	call   c000dc48 <LogicalDisk::assignDriveLetter()>
c000e038:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e03b:	e8 c2 fc ff ff       	call   c000dd02 <LogicalDisk::mount()>
c000e040:	58                   	pop    eax
c000e041:	5a                   	pop    edx
c000e042:	53                   	push   ebx
c000e043:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e04a:	e8 7b e9 ff ff       	call   c000c9ca <Device::addChild(Device*)>
c000e04f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e055:	5b                   	pop    ebx
c000e056:	5e                   	pop    esi
c000e057:	5f                   	pop    edi
c000e058:	5d                   	pop    ebp
c000e059:	c3                   	ret    

c000e05a <createPartitionsForDisk(PhysicalDisk*)>:
c000e05a:	55                   	push   ebp
c000e05b:	57                   	push   edi
c000e05c:	56                   	push   esi
c000e05d:	53                   	push   ebx
c000e05e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e064:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e06b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e071:	3d 00 02 00 00       	cmp    eax,0x200
c000e076:	74 27                	je     c000e09f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e078:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e07e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e084:	83 ec 10             	sub    esp,0x10
c000e087:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e08b:	99                   	cdq    
c000e08c:	c1 e6 0a             	shl    esi,0xa
c000e08f:	52                   	push   edx
c000e090:	89 fd                	mov    ebp,edi
c000e092:	50                   	push   eax
c000e093:	55                   	push   ebp
c000e094:	56                   	push   esi
c000e095:	e8 86 17 01 00       	call   c001f820 <__udivdi3>
c000e09a:	e9 b9 00 00 00       	jmp    c000e158 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e09f:	83 ec 0c             	sub    esp,0xc
c000e0a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e0a4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e0a8:	56                   	push   esi
c000e0a9:	6a 01                	push   0x1
c000e0ab:	6a 00                	push   0x0
c000e0ad:	6a 00                	push   0x0
c000e0af:	53                   	push   ebx
c000e0b0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e0b3:	83 c4 20             	add    esp,0x20
c000e0b6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e0be:	75 0a                	jne    c000e0ca <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e0c0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e0c8:	74 2c                	je     c000e0f6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e0ca:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e0d0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e0d6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e0dc:	83 ec 10             	sub    esp,0x10
c000e0df:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e0e3:	89 f7                	mov    edi,esi
c000e0e5:	c1 e0 0a             	shl    eax,0xa
c000e0e8:	c1 ff 1f             	sar    edi,0x1f
c000e0eb:	57                   	push   edi
c000e0ec:	56                   	push   esi
c000e0ed:	52                   	push   edx
c000e0ee:	50                   	push   eax
c000e0ef:	e8 2c 17 01 00       	call   c001f820 <__udivdi3>
c000e0f4:	eb 62                	jmp    c000e158 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e0f6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e0fd:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e104:	89 cf                	mov    edi,ecx
c000e106:	83 e2 7f             	and    edx,0x7f
c000e109:	83 e7 7f             	and    edi,0x7f
c000e10c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e113:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e116:	83 e0 7f             	and    eax,0x7f
c000e119:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e11c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e123:	83 e0 7f             	and    eax,0x7f
c000e126:	01 d0                	add    eax,edx
c000e128:	89 c5                	mov    ebp,eax
c000e12a:	84 c0                	test   al,al
c000e12c:	74 41                	je     c000e16f <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e12e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e134:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e13a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e140:	83 ec 10             	sub    esp,0x10
c000e143:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e147:	89 f7                	mov    edi,esi
c000e149:	c1 e0 0a             	shl    eax,0xa
c000e14c:	c1 ff 1f             	sar    edi,0x1f
c000e14f:	57                   	push   edi
c000e150:	56                   	push   esi
c000e151:	52                   	push   edx
c000e152:	50                   	push   eax
c000e153:	e8 c8 16 01 00       	call   c001f820 <__udivdi3>
c000e158:	83 c4 14             	add    esp,0x14
c000e15b:	52                   	push   edx
c000e15c:	50                   	push   eax
c000e15d:	6a 00                	push   0x0
c000e15f:	6a 00                	push   0x0
c000e161:	53                   	push   ebx
c000e162:	e8 4b fe ff ff       	call   c000dfb2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e167:	83 c4 20             	add    esp,0x20
c000e16a:	e9 73 01 00 00       	jmp    c000e2e2 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e16f:	89 f0                	mov    eax,esi
c000e171:	31 c9                	xor    ecx,ecx
c000e173:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e17a:	75 02                	jne    c000e17e <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e17c:	89 cd                	mov    ebp,ecx
c000e17e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e185:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000e18c:	c1 e2 08             	shl    edx,0x8
c000e18f:	c1 e6 10             	shl    esi,0x10
c000e192:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e19a:	09 f2                	or     edx,esi
c000e19c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e1a4:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000e1ab:	83 c0 10             	add    eax,0x10
c000e1ae:	09 f2                	or     edx,esi
c000e1b0:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e1b7:	c1 e6 18             	shl    esi,0x18
c000e1ba:	09 f2                	or     edx,esi
c000e1bc:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e1c3:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e1c7:	c1 e6 10             	shl    esi,0x10
c000e1ca:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e1d1:	c1 e2 08             	shl    edx,0x8
c000e1d4:	09 f2                	or     edx,esi
c000e1d6:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e1dd:	09 f2                	or     edx,esi
c000e1df:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e1e6:	c1 e6 18             	shl    esi,0x18
c000e1e9:	09 f2                	or     edx,esi
c000e1eb:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e1ef:	41                   	inc    ecx
c000e1f0:	83 f9 04             	cmp    ecx,0x4
c000e1f3:	0f 85 7a ff ff ff    	jne    c000e173 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e1f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1fd:	83 f0 01             	xor    eax,0x1
c000e200:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e204:	75 4f                	jne    c000e255 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e206:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e20a:	83 f0 01             	xor    eax,0x1
c000e20d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e211:	75 42                	jne    c000e255 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e213:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e21b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e223:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e229:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e22f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e235:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e239:	89 f7                	mov    edi,esi
c000e23b:	c1 e0 0a             	shl    eax,0xa
c000e23e:	c1 ff 1f             	sar    edi,0x1f
c000e241:	57                   	push   edi
c000e242:	56                   	push   esi
c000e243:	52                   	push   edx
c000e244:	50                   	push   eax
c000e245:	e8 d6 15 01 00       	call   c001f820 <__udivdi3>
c000e24a:	83 c4 10             	add    esp,0x10
c000e24d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e251:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e255:	89 e8                	mov    eax,ebp
c000e257:	0f b6 e8             	movzx  ebp,al
c000e25a:	85 ed                	test   ebp,ebp
c000e25c:	74 50                	je     c000e2ae <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e25e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e262:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e266:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e26a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e26e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e272:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e276:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e27a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e27e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e282:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e286:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e28a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e28e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e292:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e296:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e29a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e29e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e2a2:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e2a6:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e2aa:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e2ae:	31 ed                	xor    ebp,ebp
c000e2b0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e2b4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e2b8:	89 f8                	mov    eax,edi
c000e2ba:	09 f0                	or     eax,esi
c000e2bc:	74 1e                	je     c000e2dc <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2be:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e2c2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e2c6:	89 d1                	mov    ecx,edx
c000e2c8:	09 c1                	or     ecx,eax
c000e2ca:	74 10                	je     c000e2dc <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2cc:	83 ec 0c             	sub    esp,0xc
c000e2cf:	57                   	push   edi
c000e2d0:	56                   	push   esi
c000e2d1:	52                   	push   edx
c000e2d2:	50                   	push   eax
c000e2d3:	53                   	push   ebx
c000e2d4:	e8 d9 fc ff ff       	call   c000dfb2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e2d9:	83 c4 20             	add    esp,0x20
c000e2dc:	45                   	inc    ebp
c000e2dd:	83 fd 04             	cmp    ebp,0x4
c000e2e0:	75 ce                	jne    c000e2b0 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e2e2:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e2e8:	5b                   	pop    ebx
c000e2e9:	5e                   	pop    esi
c000e2ea:	5f                   	pop    edi
c000e2eb:	5d                   	pop    ebp
c000e2ec:	c3                   	ret    
c000e2ed:	66 90                	xchg   ax,ax
c000e2ef:	90                   	nop

c000e2f0 <Serial::Serial(char const*)>:
c000e2f0:	83 ec 0c             	sub    esp,0xc
c000e2f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f7:	83 ec 08             	sub    esp,0x8
c000e2fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2fe:	50                   	push   eax
c000e2ff:	e8 28 e8 ff ff       	call   c000cb2c <Device::Device(char const*)>
c000e304:	83 c4 10             	add    esp,0x10
c000e307:	ba d8 1e 02 c0       	mov    edx,0xc0021ed8
c000e30c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e310:	89 10                	mov    DWORD PTR [eax],edx
c000e312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e316:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e320:	90                   	nop
c000e321:	83 c4 0c             	add    esp,0xc
c000e324:	c3                   	ret    
c000e325:	90                   	nop
c000e326:	66 90                	xchg   ax,ax

c000e328 <Serial::~Serial()>:
c000e328:	83 ec 0c             	sub    esp,0xc
c000e32b:	ba d8 1e 02 c0       	mov    edx,0xc0021ed8
c000e330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e334:	89 10                	mov    DWORD PTR [eax],edx
c000e336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e33a:	83 ec 0c             	sub    esp,0xc
c000e33d:	50                   	push   eax
c000e33e:	e8 89 e5 ff ff       	call   c000c8cc <Device::~Device()>
c000e343:	83 c4 10             	add    esp,0x10
c000e346:	90                   	nop
c000e347:	83 c4 0c             	add    esp,0xc
c000e34a:	c3                   	ret    
c000e34b:	90                   	nop

c000e34c <Serial::~Serial()>:
c000e34c:	83 ec 0c             	sub    esp,0xc
c000e34f:	83 ec 0c             	sub    esp,0xc
c000e352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e356:	e8 cd ff ff ff       	call   c000e328 <Serial::~Serial()>
c000e35b:	83 c4 10             	add    esp,0x10
c000e35e:	83 ec 08             	sub    esp,0x8
c000e361:	68 58 01 00 00       	push   0x158
c000e366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e36a:	e8 ad c4 ff ff       	call   c000a81c <operator delete(void*, unsigned long)>
c000e36f:	83 c4 10             	add    esp,0x10
c000e372:	83 c4 0c             	add    esp,0xc
c000e375:	c3                   	ret    
c000e376:	66 90                	xchg   ax,ax

c000e378 <Timer::Timer(char const*)>:
c000e378:	83 ec 0c             	sub    esp,0xc
c000e37b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e37f:	83 ec 08             	sub    esp,0x8
c000e382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e386:	50                   	push   eax
c000e387:	e8 a0 e7 ff ff       	call   c000cb2c <Device::Device(char const*)>
c000e38c:	83 c4 10             	add    esp,0x10
c000e38f:	ba 1c 1f 02 c0       	mov    edx,0xc0021f1c
c000e394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e398:	89 10                	mov    DWORD PTR [eax],edx
c000e39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e39e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e3a8:	90                   	nop
c000e3a9:	83 c4 0c             	add    esp,0xc
c000e3ac:	c3                   	ret    
c000e3ad:	90                   	nop
c000e3ae:	66 90                	xchg   ax,ax

c000e3b0 <Timer::~Timer()>:
c000e3b0:	83 ec 0c             	sub    esp,0xc
c000e3b3:	ba 1c 1f 02 c0       	mov    edx,0xc0021f1c
c000e3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3bc:	89 10                	mov    DWORD PTR [eax],edx
c000e3be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c2:	83 ec 0c             	sub    esp,0xc
c000e3c5:	50                   	push   eax
c000e3c6:	e8 01 e5 ff ff       	call   c000c8cc <Device::~Device()>
c000e3cb:	83 c4 10             	add    esp,0x10
c000e3ce:	90                   	nop
c000e3cf:	83 c4 0c             	add    esp,0xc
c000e3d2:	c3                   	ret    
c000e3d3:	90                   	nop

c000e3d4 <Timer::~Timer()>:
c000e3d4:	83 ec 0c             	sub    esp,0xc
c000e3d7:	83 ec 0c             	sub    esp,0xc
c000e3da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3de:	e8 cd ff ff ff       	call   c000e3b0 <Timer::~Timer()>
c000e3e3:	83 c4 10             	add    esp,0x10
c000e3e6:	83 ec 08             	sub    esp,0x8
c000e3e9:	68 5c 01 00 00       	push   0x15c
c000e3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3f2:	e8 25 c4 ff ff       	call   c000a81c <operator delete(void*, unsigned long)>
c000e3f7:	83 c4 10             	add    esp,0x10
c000e3fa:	83 c4 0c             	add    esp,0xc
c000e3fd:	c3                   	ret    

c000e3fe <Timer::read()>:
c000e3fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e402:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e408:	c3                   	ret    

c000e409 <setupTimer(int)>:
c000e409:	53                   	push   ebx
c000e40a:	83 ec 14             	sub    esp,0x14
c000e40d:	68 5c 01 00 00       	push   0x15c
c000e412:	e8 a3 96 ff ff       	call   c0007aba <malloc>
c000e417:	89 04 24             	mov    DWORD PTR [esp],eax
c000e41a:	89 c3                	mov    ebx,eax
c000e41c:	e8 63 0c 01 00       	call   c001f084 <PIT::PIT()>
c000e421:	58                   	pop    eax
c000e422:	5a                   	pop    edx
c000e423:	53                   	push   ebx
c000e424:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e42a:	e8 9b e5 ff ff       	call   c000c9ca <Device::addChild(Device*)>
c000e42f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e431:	6a 00                	push   0x0
c000e433:	6a 00                	push   0x0
c000e435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e439:	53                   	push   ebx
c000e43a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e43d:	89 d8                	mov    eax,ebx
c000e43f:	83 c4 28             	add    esp,0x28
c000e442:	5b                   	pop    ebx
c000e443:	c3                   	ret    

c000e444 <timerHandler(unsigned int)>:
c000e444:	56                   	push   esi
c000e445:	53                   	push   ebx
c000e446:	51                   	push   ecx
c000e447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e44b:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e451:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e458:	0f 84 4a 01 00 00    	je     c000e5a8 <timerHandler(unsigned int)+0x164>
c000e45e:	fa                   	cli    
c000e45f:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e465:	83 ec 0c             	sub    esp,0xc
c000e468:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e46e:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e473:	e8 78 19 01 00       	call   c001fdf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e478:	83 c4 10             	add    esp,0x10
c000e47b:	84 c0                	test   al,al
c000e47d:	0f 85 a1 00 00 00    	jne    c000e524 <timerHandler(unsigned int)+0xe0>
c000e483:	83 ec 0c             	sub    esp,0xc
c000e486:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e48b:	e8 7c 19 01 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e490:	83 c4 10             	add    esp,0x10
c000e493:	89 c6                	mov    esi,eax
c000e495:	8d 76 00             	lea    esi,[esi+0x0]
c000e498:	83 ec 0c             	sub    esp,0xc
c000e49b:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4a0:	e8 67 19 01 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4a5:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e4ac:	89 c3                	mov    ebx,eax
c000e4ae:	e8 61 19 01 00       	call   c001fe14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e4b3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e4b6:	83 c4 10             	add    esp,0x10
c000e4b9:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e4bf:	77 23                	ja     c000e4e4 <timerHandler(unsigned int)+0xa0>
c000e4c1:	83 ec 0c             	sub    esp,0xc
c000e4c4:	53                   	push   ebx
c000e4c5:	e8 f6 81 00 00       	call   c00166c0 <unblockTask(ThreadControlBlock*)>
c000e4ca:	83 c4 10             	add    esp,0x10
c000e4cd:	39 de                	cmp    esi,ebx
c000e4cf:	75 27                	jne    c000e4f8 <timerHandler(unsigned int)+0xb4>
c000e4d1:	83 ec 0c             	sub    esp,0xc
c000e4d4:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4d9:	e8 2e 19 01 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4de:	89 c6                	mov    esi,eax
c000e4e0:	eb 12                	jmp    c000e4f4 <timerHandler(unsigned int)+0xb0>
c000e4e2:	66 90                	xchg   ax,ax
c000e4e4:	52                   	push   edx
c000e4e5:	52                   	push   edx
c000e4e6:	53                   	push   ebx
c000e4e7:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4ec:	e8 df 19 01 00       	call   c001fed0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e4f1:	8d 76 00             	lea    esi,[esi+0x0]
c000e4f4:	83 c4 10             	add    esp,0x10
c000e4f7:	90                   	nop
c000e4f8:	83 ec 0c             	sub    esp,0xc
c000e4fb:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e500:	e8 eb 18 01 00       	call   c001fdf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e505:	83 c4 10             	add    esp,0x10
c000e508:	84 c0                	test   al,al
c000e50a:	75 18                	jne    c000e524 <timerHandler(unsigned int)+0xe0>
c000e50c:	83 ec 0c             	sub    esp,0xc
c000e50f:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e514:	e8 f3 18 01 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e519:	83 c4 10             	add    esp,0x10
c000e51c:	39 f0                	cmp    eax,esi
c000e51e:	0f 85 74 ff ff ff    	jne    c000e498 <timerHandler(unsigned int)+0x54>
c000e524:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e529:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e52d:	74 41                	je     c000e570 <timerHandler(unsigned int)+0x12c>
c000e52f:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e536:	74 38                	je     c000e570 <timerHandler(unsigned int)+0x12c>
c000e538:	fa                   	cli    
c000e539:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e53f:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e544:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e54a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e54d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e553:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e556:	72 08                	jb     c000e560 <timerHandler(unsigned int)+0x11c>
c000e558:	e8 4b 7c 00 00       	call   c00161a8 <schedule()>
c000e55d:	8d 76 00             	lea    esi,[esi+0x0]
c000e560:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e565:	48                   	dec    eax
c000e566:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e56b:	75 03                	jne    c000e570 <timerHandler(unsigned int)+0x12c>
c000e56d:	fb                   	sti    
c000e56e:	66 90                	xchg   ax,ax
c000e570:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e575:	48                   	dec    eax
c000e576:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e57b:	75 1b                	jne    c000e598 <timerHandler(unsigned int)+0x154>
c000e57d:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e584:	74 12                	je     c000e598 <timerHandler(unsigned int)+0x154>
c000e586:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e590:	e8 13 7c 00 00       	call   c00161a8 <schedule()>
c000e595:	8d 76 00             	lea    esi,[esi+0x0]
c000e598:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e59d:	48                   	dec    eax
c000e59e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e5a3:	75 03                	jne    c000e5a8 <timerHandler(unsigned int)+0x164>
c000e5a5:	fb                   	sti    
c000e5a6:	66 90                	xchg   ax,ax
c000e5a8:	58                   	pop    eax
c000e5a9:	5b                   	pop    ebx
c000e5aa:	5e                   	pop    esi
c000e5ab:	c3                   	ret    

c000e5ac <VCache::VCache(PhysicalDisk*)>:
c000e5ac:	53                   	push   ebx
c000e5ad:	83 ec 18             	sub    esp,0x18
c000e5b0:	ba 4c 1f 02 c0       	mov    edx,0xc0021f4c
c000e5b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5b9:	89 10                	mov    DWORD PTR [eax],edx
c000e5bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5bf:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e5c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5ca:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e5d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5d5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e5dc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e5e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5e7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e5ee:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e5f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5f9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e600:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e604:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e608:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e60c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e613:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e61a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e61e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e622:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e626:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e62a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e62e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e636:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e63d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e645:	83 ec 0c             	sub    esp,0xc
c000e648:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e64c:	e8 69 94 ff ff       	call   c0007aba <malloc>
c000e651:	83 c4 10             	add    esp,0x10
c000e654:	89 c3                	mov    ebx,eax
c000e656:	83 ec 0c             	sub    esp,0xc
c000e659:	53                   	push   ebx
c000e65a:	e8 e5 78 00 00       	call   c0015f44 <Mutex::Mutex()>
c000e65f:	83 c4 10             	add    esp,0x10
c000e662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e666:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e669:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e66d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e674:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e678:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e67f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e683:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e689:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e68d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e690:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e694:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e69a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e6a0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e6a4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e6a7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e6aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6ae:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e6b2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6b6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e6bc:	05 00 02 00 00       	add    eax,0x200
c000e6c1:	c1 e0 03             	shl    eax,0x3
c000e6c4:	83 ec 0c             	sub    esp,0xc
c000e6c7:	50                   	push   eax
c000e6c8:	e8 ed 93 ff ff       	call   c0007aba <malloc>
c000e6cd:	83 c4 10             	add    esp,0x10
c000e6d0:	89 c2                	mov    edx,eax
c000e6d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6d6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e6d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6dd:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e6e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6e8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e6ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6f0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e6f6:	89 d0                	mov    eax,edx
c000e6f8:	c1 e0 02             	shl    eax,0x2
c000e6fb:	01 d0                	add    eax,edx
c000e6fd:	c1 e0 04             	shl    eax,0x4
c000e700:	83 ec 0c             	sub    esp,0xc
c000e703:	50                   	push   eax
c000e704:	e8 b1 93 ff ff       	call   c0007aba <malloc>
c000e709:	83 c4 10             	add    esp,0x10
c000e70c:	89 c2                	mov    edx,eax
c000e70e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e712:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e715:	90                   	nop
c000e716:	83 c4 18             	add    esp,0x18
c000e719:	5b                   	pop    ebx
c000e71a:	c3                   	ret    
c000e71b:	90                   	nop

c000e71c <VCache::invalidateReadBuffer()>:
c000e71c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e720:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e726:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e72a:	c3                   	ret    
c000e72b:	90                   	nop

c000e72c <VCache::writeWriteBuffer()>:
c000e72c:	53                   	push   ebx
c000e72d:	83 ec 08             	sub    esp,0x8
c000e730:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e734:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e738:	74 1e                	je     c000e758 <VCache::writeWriteBuffer()+0x2c>
c000e73a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e73d:	83 ec 0c             	sub    esp,0xc
c000e740:	8b 10                	mov    edx,DWORD PTR [eax]
c000e742:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e745:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e748:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e74b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e74e:	50                   	push   eax
c000e74f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e752:	83 c4 20             	add    esp,0x20
c000e755:	8d 76 00             	lea    esi,[esi+0x0]
c000e758:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e75f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e766:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e76a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e771:	83 c4 08             	add    esp,0x8
c000e774:	5b                   	pop    ebx
c000e775:	c3                   	ret    
c000e776:	66 90                	xchg   ax,ax

c000e778 <VCache::~VCache()>:
c000e778:	83 ec 0c             	sub    esp,0xc
c000e77b:	ba 4c 1f 02 c0       	mov    edx,0xc0021f4c
c000e780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e784:	89 10                	mov    DWORD PTR [eax],edx
c000e786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e78d:	0f b6 c0             	movzx  eax,al
c000e790:	85 c0                	test   eax,eax
c000e792:	74 10                	je     c000e7a4 <VCache::~VCache()+0x2c>
c000e794:	83 ec 0c             	sub    esp,0xc
c000e797:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e79b:	e8 8c ff ff ff       	call   c000e72c <VCache::writeWriteBuffer()>
c000e7a0:	83 c4 10             	add    esp,0x10
c000e7a3:	90                   	nop
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e7ab:	83 ec 0c             	sub    esp,0xc
c000e7ae:	50                   	push   eax
c000e7af:	e8 16 93 ff ff       	call   c0007aca <free>
c000e7b4:	83 c4 10             	add    esp,0x10
c000e7b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7bb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e7be:	83 ec 0c             	sub    esp,0xc
c000e7c1:	50                   	push   eax
c000e7c2:	e8 03 93 ff ff       	call   c0007aca <free>
c000e7c7:	83 c4 10             	add    esp,0x10
c000e7ca:	90                   	nop
c000e7cb:	83 c4 0c             	add    esp,0xc
c000e7ce:	c3                   	ret    
c000e7cf:	90                   	nop

c000e7d0 <VCache::~VCache()>:
c000e7d0:	83 ec 0c             	sub    esp,0xc
c000e7d3:	83 ec 0c             	sub    esp,0xc
c000e7d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7da:	e8 99 ff ff ff       	call   c000e778 <VCache::~VCache()>
c000e7df:	83 c4 10             	add    esp,0x10
c000e7e2:	83 ec 08             	sub    esp,0x8
c000e7e5:	6a 44                	push   0x44
c000e7e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7eb:	e8 2c c0 ff ff       	call   c000a81c <operator delete(void*, unsigned long)>
c000e7f0:	83 c4 10             	add    esp,0x10
c000e7f3:	83 c4 0c             	add    esp,0xc
c000e7f6:	c3                   	ret    
c000e7f7:	90                   	nop

c000e7f8 <VCache::write(unsigned long long, int, void*)>:
c000e7f8:	55                   	push   ebp
c000e7f9:	57                   	push   edi
c000e7fa:	56                   	push   esi
c000e7fb:	53                   	push   ebx
c000e7fc:	83 ec 1c             	sub    esp,0x1c
c000e7ff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e803:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e807:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e80b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e80f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e813:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e817:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e81b:	74 07                	je     c000e824 <VCache::write(unsigned long long, int, void*)+0x2c>
c000e81d:	53                   	push   ebx
c000e81e:	e8 f9 fe ff ff       	call   c000e71c <VCache::invalidateReadBuffer()>
c000e823:	58                   	pop    eax
c000e824:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e828:	74 62                	je     c000e88c <VCache::write(unsigned long long, int, void*)+0x94>
c000e82a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e82d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e831:	99                   	cdq    
c000e832:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e836:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e839:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e83c:	31 c1                	xor    ecx,eax
c000e83e:	89 d0                	mov    eax,edx
c000e840:	89 ca                	mov    edx,ecx
c000e842:	31 e8                	xor    eax,ebp
c000e844:	09 c2                	or     edx,eax
c000e846:	75 38                	jne    c000e880 <VCache::write(unsigned long long, int, void*)+0x88>
c000e848:	83 ff 01             	cmp    edi,0x1
c000e84b:	75 33                	jne    c000e880 <VCache::write(unsigned long long, int, void*)+0x88>
c000e84d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e854:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e85a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e85d:	0f af c8             	imul   ecx,eax
c000e860:	01 cf                	add    edi,ecx
c000e862:	89 c1                	mov    ecx,eax
c000e864:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e866:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e869:	40                   	inc    eax
c000e86a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e86d:	83 f8 50             	cmp    eax,0x50
c000e870:	75 6a                	jne    c000e8dc <VCache::write(unsigned long long, int, void*)+0xe4>
c000e872:	83 ec 0c             	sub    esp,0xc
c000e875:	53                   	push   ebx
c000e876:	e8 b1 fe ff ff       	call   c000e72c <VCache::writeWriteBuffer()>
c000e87b:	83 c4 10             	add    esp,0x10
c000e87e:	eb 5c                	jmp    c000e8dc <VCache::write(unsigned long long, int, void*)+0xe4>
c000e880:	83 ec 0c             	sub    esp,0xc
c000e883:	53                   	push   ebx
c000e884:	e8 a3 fe ff ff       	call   c000e72c <VCache::writeWriteBuffer()>
c000e889:	83 c4 10             	add    esp,0x10
c000e88c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e88f:	83 ff 4f             	cmp    edi,0x4f
c000e892:	7f 20                	jg     c000e8b4 <VCache::write(unsigned long long, int, void*)+0xbc>
c000e894:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e897:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e89b:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e89e:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e8a1:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e8a5:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e8a8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e8ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8b0:	eb 2a                	jmp    c000e8dc <VCache::write(unsigned long long, int, void*)+0xe4>
c000e8b2:	66 90                	xchg   ax,ax
c000e8b4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e8b6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e8ba:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e8be:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e8c2:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e8c6:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e8ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e8ce:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e8d1:	83 c4 1c             	add    esp,0x1c
c000e8d4:	5b                   	pop    ebx
c000e8d5:	5e                   	pop    esi
c000e8d6:	5f                   	pop    edi
c000e8d7:	5d                   	pop    ebp
c000e8d8:	ff e0                	jmp    eax
c000e8da:	66 90                	xchg   ax,ax
c000e8dc:	83 c4 1c             	add    esp,0x1c
c000e8df:	31 c0                	xor    eax,eax
c000e8e1:	5b                   	pop    ebx
c000e8e2:	5e                   	pop    esi
c000e8e3:	5f                   	pop    edi
c000e8e4:	5d                   	pop    ebp
c000e8e5:	c3                   	ret    

c000e8e6 <VCache::read(unsigned long long, int, void*)>:
c000e8e6:	55                   	push   ebp
c000e8e7:	57                   	push   edi
c000e8e8:	56                   	push   esi
c000e8e9:	53                   	push   ebx
c000e8ea:	83 ec 1c             	sub    esp,0x1c
c000e8ed:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e8f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e8f5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e8f9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e8fd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e901:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e905:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e909:	74 0d                	je     c000e918 <VCache::read(unsigned long long, int, void*)+0x32>
c000e90b:	83 ec 0c             	sub    esp,0xc
c000e90e:	57                   	push   edi
c000e90f:	e8 18 fe ff ff       	call   c000e72c <VCache::writeWriteBuffer()>
c000e914:	83 c4 10             	add    esp,0x10
c000e917:	90                   	nop
c000e918:	83 fd 01             	cmp    ebp,0x1
c000e91b:	0f 85 93 00 00 00    	jne    c000e9b4 <VCache::read(unsigned long long, int, void*)+0xce>
c000e921:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e924:	89 04 24             	mov    DWORD PTR [esp],eax
c000e927:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e92e:	0f 85 80 00 00 00    	jne    c000e9b4 <VCache::read(unsigned long long, int, void*)+0xce>
c000e934:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e937:	89 e9                	mov    ecx,ebp
c000e939:	f7 d9                	neg    ecx
c000e93b:	89 c8                	mov    eax,ecx
c000e93d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e941:	c1 f8 1f             	sar    eax,0x1f
c000e944:	21 d9                	and    ecx,ebx
c000e946:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e94a:	89 c8                	mov    eax,ecx
c000e94c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e950:	21 f1                	and    ecx,esi
c000e952:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e956:	89 ca                	mov    edx,ecx
c000e958:	74 2e                	je     c000e988 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e95a:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e95d:	75 29                	jne    c000e988 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e95f:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e962:	75 24                	jne    c000e988 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e964:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e967:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e96d:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e970:	8d 70 ff             	lea    esi,[eax-0x1]
c000e973:	21 f3                	and    ebx,esi
c000e975:	0f af d9             	imul   ebx,ecx
c000e978:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e97b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e97f:	89 de                	mov    esi,ebx
c000e981:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e983:	31 c0                	xor    eax,eax
c000e985:	eb 61                	jmp    c000e9e8 <VCache::read(unsigned long long, int, void*)+0x102>
c000e987:	90                   	nop
c000e988:	83 ec 0c             	sub    esp,0xc
c000e98b:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e98f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e993:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e996:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e999:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e99b:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e99e:	55                   	push   ebp
c000e99f:	52                   	push   edx
c000e9a0:	50                   	push   eax
c000e9a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9a5:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e9a8:	83 c4 20             	add    esp,0x20
c000e9ab:	85 c0                	test   eax,eax
c000e9ad:	75 39                	jne    c000e9e8 <VCache::read(unsigned long long, int, void*)+0x102>
c000e9af:	eb b3                	jmp    c000e964 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e9b1:	8d 76 00             	lea    esi,[esi+0x0]
c000e9b4:	83 ec 0c             	sub    esp,0xc
c000e9b7:	57                   	push   edi
c000e9b8:	e8 5f fd ff ff       	call   c000e71c <VCache::invalidateReadBuffer()>
c000e9bd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9c0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e9c4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9c6:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e9ca:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e9ce:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e9d2:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e9d6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e9da:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e9dd:	83 c4 2c             	add    esp,0x2c
c000e9e0:	5b                   	pop    ebx
c000e9e1:	5e                   	pop    esi
c000e9e2:	5f                   	pop    edi
c000e9e3:	5d                   	pop    ebp
c000e9e4:	ff e0                	jmp    eax
c000e9e6:	66 90                	xchg   ax,ax
c000e9e8:	83 c4 1c             	add    esp,0x1c
c000e9eb:	5b                   	pop    ebx
c000e9ec:	5e                   	pop    esi
c000e9ed:	5f                   	pop    edi
c000e9ee:	5d                   	pop    ebp
c000e9ef:	c3                   	ret    

c000e9f0 <Video::putrect(int, int, int, int, unsigned int)>:
c000e9f0:	55                   	push   ebp
c000e9f1:	57                   	push   edi
c000e9f2:	56                   	push   esi
c000e9f3:	53                   	push   ebx
c000e9f4:	83 ec 1c             	sub    esp,0x1c
c000e9f7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e9fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e9ff:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ea03:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ea07:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea0f:	01 df                	add    edi,ebx
c000ea11:	39 fb                	cmp    ebx,edi
c000ea13:	7d 1f                	jge    c000ea34 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ea15:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea19:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ea1d:	7d 12                	jge    c000ea31 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ea1f:	8b 16                	mov    edx,DWORD PTR [esi]
c000ea21:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ea25:	53                   	push   ebx
c000ea26:	55                   	push   ebp
c000ea27:	45                   	inc    ebp
c000ea28:	56                   	push   esi
c000ea29:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ea2c:	83 c4 10             	add    esp,0x10
c000ea2f:	eb e8                	jmp    c000ea19 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ea31:	43                   	inc    ebx
c000ea32:	eb dd                	jmp    c000ea11 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ea34:	83 c4 1c             	add    esp,0x1c
c000ea37:	5b                   	pop    ebx
c000ea38:	5e                   	pop    esi
c000ea39:	5f                   	pop    edi
c000ea3a:	5d                   	pop    ebp
c000ea3b:	c3                   	ret    

c000ea3c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ea3c:	55                   	push   ebp
c000ea3d:	57                   	push   edi
c000ea3e:	31 ff                	xor    edi,edi
c000ea40:	56                   	push   esi
c000ea41:	53                   	push   ebx
c000ea42:	83 ec 1c             	sub    esp,0x1c
c000ea45:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ea49:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ea4d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ea54:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ea59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ea5d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ea61:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ea65:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ea68:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea6c:	01 f9                	add    ecx,edi
c000ea6e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ea72:	7d 2f                	jge    c000eaa3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ea74:	31 f6                	xor    esi,esi
c000ea76:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea7a:	01 f2                	add    edx,esi
c000ea7c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ea80:	7d 1a                	jge    c000ea9c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ea82:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ea85:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ea88:	46                   	inc    esi
c000ea89:	51                   	push   ecx
c000ea8a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ea8e:	52                   	push   edx
c000ea8f:	55                   	push   ebp
c000ea90:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea93:	83 c4 10             	add    esp,0x10
c000ea96:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea9a:	eb da                	jmp    c000ea76 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ea9c:	47                   	inc    edi
c000ea9d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000eaa1:	eb c5                	jmp    c000ea68 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000eaa3:	83 c4 1c             	add    esp,0x1c
c000eaa6:	5b                   	pop    ebx
c000eaa7:	5e                   	pop    esi
c000eaa8:	5f                   	pop    edi
c000eaa9:	5d                   	pop    ebp
c000eaaa:	c3                   	ret    
c000eaab:	90                   	nop

c000eaac <Video::blit(unsigned int*, int, int, int, int)>:
c000eaac:	55                   	push   ebp
c000eaad:	57                   	push   edi
c000eaae:	56                   	push   esi
c000eaaf:	53                   	push   ebx
c000eab0:	83 ec 1c             	sub    esp,0x1c
c000eab3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eab7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000eabb:	85 c0                	test   eax,eax
c000eabd:	79 02                	jns    c000eac1 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000eabf:	31 c0                	xor    eax,eax
c000eac1:	c1 e0 02             	shl    eax,0x2
c000eac4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000eac8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eacc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ead0:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000ead4:	39 d8                	cmp    eax,ebx
c000ead6:	7e 49                	jle    c000eb21 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000ead8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eade:	7c 41                	jl     c000eb21 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000eae0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eae4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eae8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eaec:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000eaf0:	39 f9                	cmp    ecx,edi
c000eaf2:	7e 22                	jle    c000eb16 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000eaf4:	83 c5 04             	add    ebp,0x4
c000eaf7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eafd:	7c 14                	jl     c000eb13 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000eaff:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eb01:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000eb04:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb08:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb0c:	56                   	push   esi
c000eb0d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eb10:	83 c4 10             	add    esp,0x10
c000eb13:	47                   	inc    edi
c000eb14:	eb d2                	jmp    c000eae8 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000eb16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb1a:	43                   	inc    ebx
c000eb1b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000eb1f:	eb ab                	jmp    c000eacc <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000eb21:	83 c4 1c             	add    esp,0x1c
c000eb24:	5b                   	pop    ebx
c000eb25:	5e                   	pop    esi
c000eb26:	5f                   	pop    edi
c000eb27:	5d                   	pop    ebp
c000eb28:	c3                   	ret    
c000eb29:	90                   	nop

c000eb2a <Video::clearScreen(unsigned int)>:
c000eb2a:	57                   	push   edi
c000eb2b:	56                   	push   esi
c000eb2c:	53                   	push   ebx
c000eb2d:	31 db                	xor    ebx,ebx
c000eb2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eb33:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb39:	7e 1f                	jle    c000eb5a <Video::clearScreen(unsigned int)+0x30>
c000eb3b:	31 ff                	xor    edi,edi
c000eb3d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb43:	7e 12                	jle    c000eb57 <Video::clearScreen(unsigned int)+0x2d>
c000eb45:	8b 06                	mov    eax,DWORD PTR [esi]
c000eb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb4b:	53                   	push   ebx
c000eb4c:	57                   	push   edi
c000eb4d:	47                   	inc    edi
c000eb4e:	56                   	push   esi
c000eb4f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eb52:	83 c4 10             	add    esp,0x10
c000eb55:	eb e6                	jmp    c000eb3d <Video::clearScreen(unsigned int)+0x13>
c000eb57:	43                   	inc    ebx
c000eb58:	eb d9                	jmp    c000eb33 <Video::clearScreen(unsigned int)+0x9>
c000eb5a:	5b                   	pop    ebx
c000eb5b:	5e                   	pop    esi
c000eb5c:	5f                   	pop    edi
c000eb5d:	c3                   	ret    

c000eb5e <Video::putpixel(int, int, unsigned int)>:
c000eb5e:	c7 44 24 04 54 1f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021f54
c000eb66:	e9 58 2b 00 00       	jmp    c00116c3 <KePanic(char const*)>
c000eb6b:	90                   	nop

c000eb6c <Video::readPixelApprox(int, int)>:
c000eb6c:	83 ec 18             	sub    esp,0x18
c000eb6f:	68 75 1f 02 c0       	push   0xc0021f75
c000eb74:	e8 4a 2b 00 00       	call   c00116c3 <KePanic(char const*)>
c000eb79:	31 c0                	xor    eax,eax
c000eb7b:	83 c4 1c             	add    esp,0x1c
c000eb7e:	c3                   	ret    
c000eb7f:	90                   	nop

c000eb80 <Video::Video(char const*)>:
c000eb80:	83 ec 0c             	sub    esp,0xc
c000eb83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb87:	83 ec 08             	sub    esp,0x8
c000eb8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb8e:	50                   	push   eax
c000eb8f:	e8 98 df ff ff       	call   c000cb2c <Device::Device(char const*)>
c000eb94:	83 c4 10             	add    esp,0x10
c000eb97:	ba f0 1f 02 c0       	mov    edx,0xc0021ff0
c000eb9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eba0:	89 10                	mov    DWORD PTR [eax],edx
c000eba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eba6:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ebb0:	90                   	nop
c000ebb1:	83 c4 0c             	add    esp,0xc
c000ebb4:	c3                   	ret    
c000ebb5:	90                   	nop

c000ebb6 <Video::~Video()>:
c000ebb6:	83 ec 0c             	sub    esp,0xc
c000ebb9:	ba f0 1f 02 c0       	mov    edx,0xc0021ff0
c000ebbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebc2:	89 10                	mov    DWORD PTR [eax],edx
c000ebc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebc8:	83 ec 0c             	sub    esp,0xc
c000ebcb:	50                   	push   eax
c000ebcc:	e8 fb dc ff ff       	call   c000c8cc <Device::~Device()>
c000ebd1:	83 c4 10             	add    esp,0x10
c000ebd4:	90                   	nop
c000ebd5:	83 c4 0c             	add    esp,0xc
c000ebd8:	c3                   	ret    
c000ebd9:	90                   	nop

c000ebda <Video::~Video()>:
c000ebda:	83 ec 0c             	sub    esp,0xc
c000ebdd:	83 ec 0c             	sub    esp,0xc
c000ebe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebe4:	e8 cd ff ff ff       	call   c000ebb6 <Video::~Video()>
c000ebe9:	83 c4 10             	add    esp,0x10
c000ebec:	83 ec 08             	sub    esp,0x8
c000ebef:	68 64 01 00 00       	push   0x164
c000ebf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebf8:	e8 1f bc ff ff       	call   c000a81c <operator delete(void*, unsigned long)>
c000ebfd:	83 c4 10             	add    esp,0x10
c000ec00:	83 c4 0c             	add    esp,0xc
c000ec03:	c3                   	ret    

c000ec04 <Video::isMonochrome()>:
c000ec04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec08:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ec0e:	c3                   	ret    
c000ec0f:	90                   	nop

c000ec10 <Video::getWidth()>:
c000ec10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec14:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ec1a:	c3                   	ret    
c000ec1b:	90                   	nop

c000ec1c <Video::getHeight()>:
c000ec1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec20:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ec26:	c3                   	ret    
c000ec27:	90                   	nop

c000ec28 <Video::drawCursor(int, int, unsigned int*, int)>:
c000ec28:	55                   	push   ebp
c000ec29:	57                   	push   edi
c000ec2a:	56                   	push   esi
c000ec2b:	53                   	push   ebx
c000ec2c:	83 ec 2c             	sub    esp,0x2c
c000ec2f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec33:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ec37:	83 f8 01             	cmp    eax,0x1
c000ec3a:	19 c9                	sbb    ecx,ecx
c000ec3c:	31 db                	xor    ebx,ebx
c000ec3e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ec42:	89 cd                	mov    ebp,ecx
c000ec44:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ec4c:	f7 d5                	not    ebp
c000ec4e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000ec54:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ec58:	01 d8                	add    eax,ebx
c000ec5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec5e:	56                   	push   esi
c000ec5f:	e8 b8 ff ff ff       	call   c000ec1c <Video::getHeight()>
c000ec64:	59                   	pop    ecx
c000ec65:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ec69:	7e 70                	jle    c000ecdb <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ec6b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec6f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000ec73:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ec76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec7a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec7e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ec85:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec89:	89 f8                	mov    eax,edi
c000ec8b:	83 c0 20             	add    eax,0x20
c000ec8e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec92:	56                   	push   esi
c000ec93:	e8 78 ff ff ff       	call   c000ec10 <Video::getWidth()>
c000ec98:	5a                   	pop    edx
c000ec99:	39 c7                	cmp    edi,eax
c000ec9b:	7d 34                	jge    c000ecd1 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ec9d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000eca2:	74 05                	je     c000eca9 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000eca4:	8b 06                	mov    eax,DWORD PTR [esi]
c000eca6:	55                   	push   ebp
c000eca7:	eb 0d                	jmp    c000ecb6 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000eca9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ecae:	74 12                	je     c000ecc2 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ecb0:	8b 06                	mov    eax,DWORD PTR [esi]
c000ecb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ecb6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ecba:	57                   	push   edi
c000ecbb:	56                   	push   esi
c000ecbc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ecbf:	83 c4 10             	add    esp,0x10
c000ecc2:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ecc6:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ecca:	47                   	inc    edi
c000eccb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000eccf:	75 c1                	jne    c000ec92 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ecd1:	43                   	inc    ebx
c000ecd2:	83 fb 20             	cmp    ebx,0x20
c000ecd5:	0f 85 79 ff ff ff    	jne    c000ec54 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ecdb:	83 c4 2c             	add    esp,0x2c
c000ecde:	5b                   	pop    ebx
c000ecdf:	5e                   	pop    esi
c000ece0:	5f                   	pop    edi
c000ece1:	5d                   	pop    ebp
c000ece2:	c3                   	ret    
c000ece3:	90                   	nop

c000ece4 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ece4:	55                   	push   ebp
c000ece5:	57                   	push   edi
c000ece6:	56                   	push   esi
c000ece7:	53                   	push   ebx
c000ece8:	83 ec 28             	sub    esp,0x28
c000eceb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ecef:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ecf3:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ecf7:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000ecfb:	c1 e6 08             	shl    esi,0x8
c000ecfe:	01 c6                	add    esi,eax
c000ed00:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ed04:	c1 e0 08             	shl    eax,0x8
c000ed07:	01 d0                	add    eax,edx
c000ed09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ed0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed11:	0f af c6             	imul   eax,esi
c000ed14:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ed1b:	50                   	push   eax
c000ed1c:	e8 99 8d ff ff       	call   c0007aba <malloc>
c000ed21:	83 c4 10             	add    esp,0x10
c000ed24:	89 c7                	mov    edi,eax
c000ed26:	85 c0                	test   eax,eax
c000ed28:	75 10                	jne    c000ed3a <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ed2a:	83 ec 0c             	sub    esp,0xc
c000ed2d:	68 a0 1f 02 c0       	push   0xc0021fa0
c000ed32:	e8 8c 29 00 00       	call   c00116c3 <KePanic(char const*)>
c000ed37:	83 c4 10             	add    esp,0x10
c000ed3a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ed3e:	ba 12 00 00 00       	mov    edx,0x12
c000ed43:	85 c0                	test   eax,eax
c000ed45:	74 11                	je     c000ed58 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ed47:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ed4b:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ed4f:	c1 fa 03             	sar    edx,0x3
c000ed52:	0f af d1             	imul   edx,ecx
c000ed55:	83 c2 12             	add    edx,0x12
c000ed58:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ed5c:	74 04                	je     c000ed62 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ed5e:	85 f6                	test   esi,esi
c000ed60:	75 12                	jne    c000ed74 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ed62:	83 ec 0c             	sub    esp,0xc
c000ed65:	68 b0 1f 02 c0       	push   0xc0021fb0
c000ed6a:	e8 da bb ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000ed6f:	e9 b8 00 00 00       	jmp    c000ee2c <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000ed74:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000ed78:	83 f9 02             	cmp    ecx,0x2
c000ed7b:	0f 85 96 00 00 00    	jne    c000ee17 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ed81:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ed86:	75 0e                	jne    c000ed96 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed88:	85 c0                	test   eax,eax
c000ed8a:	75 0a                	jne    c000ed96 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed8c:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ed8f:	83 e8 18             	sub    eax,0x18
c000ed92:	a8 f7                	test   al,0xf7
c000ed94:	74 0a                	je     c000eda0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ed96:	83 ec 0c             	sub    esp,0xc
c000ed99:	68 c5 1f 02 c0       	push   0xc0021fc5
c000ed9e:	eb 7f                	jmp    c000ee1f <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000eda0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eda8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000edb0:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000edb4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000edbc:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000edc0:	75 0c                	jne    c000edce <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000edc2:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000edc7:	c1 e0 18             	shl    eax,0x18
c000edca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000edce:	45                   	inc    ebp
c000edcf:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000edd4:	c1 e1 10             	shl    ecx,0x10
c000edd7:	89 c8                	mov    eax,ecx
c000edd9:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000edde:	c1 e1 08             	shl    ecx,0x8
c000ede1:	09 c1                	or     ecx,eax
c000ede3:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ede7:	09 c1                	or     ecx,eax
c000ede9:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000eded:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000edf1:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000edf5:	c1 f8 03             	sar    eax,0x3
c000edf8:	01 c2                	add    edx,eax
c000edfa:	89 e8                	mov    eax,ebp
c000edfc:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ee00:	39 c6                	cmp    esi,eax
c000ee02:	7f b0                	jg     c000edb4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ee04:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ee08:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee0c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ee0f:	7e 22                	jle    c000ee33 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ee11:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000ee15:	eb 99                	jmp    c000edb0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ee17:	50                   	push   eax
c000ee18:	50                   	push   eax
c000ee19:	51                   	push   ecx
c000ee1a:	68 d3 1f 02 c0       	push   0xc0021fd3
c000ee1f:	e8 25 bb ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000ee24:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ee27:	e8 9e 8c ff ff       	call   c0007aca <free>
c000ee2c:	83 c4 10             	add    esp,0x10
c000ee2f:	31 ff                	xor    edi,edi
c000ee31:	eb 0f                	jmp    c000ee42 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ee33:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee37:	89 30                	mov    DWORD PTR [eax],esi
c000ee39:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee3d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ee40:	89 30                	mov    DWORD PTR [eax],esi
c000ee42:	83 c4 1c             	add    esp,0x1c
c000ee45:	89 f8                	mov    eax,edi
c000ee47:	5b                   	pop    ebx
c000ee48:	5e                   	pop    esi
c000ee49:	5f                   	pop    edi
c000ee4a:	5d                   	pop    ebp
c000ee4b:	c3                   	ret    

c000ee4c <Video::putTGA(int, int, unsigned char*, int)>:
c000ee4c:	55                   	push   ebp
c000ee4d:	57                   	push   edi
c000ee4e:	56                   	push   esi
c000ee4f:	53                   	push   ebx
c000ee50:	83 ec 28             	sub    esp,0x28
c000ee53:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ee57:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee5b:	50                   	push   eax
c000ee5c:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee60:	50                   	push   eax
c000ee61:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee65:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee69:	56                   	push   esi
c000ee6a:	e8 75 fe ff ff       	call   c000ece4 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ee6f:	83 c4 20             	add    esp,0x20
c000ee72:	85 c0                	test   eax,eax
c000ee74:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ee78:	74 35                	je     c000eeaf <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee7a:	89 c7                	mov    edi,eax
c000ee7c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee80:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ee84:	39 d8                	cmp    eax,ebx
c000ee86:	7e 27                	jle    c000eeaf <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee88:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ee8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee90:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ee94:	39 e8                	cmp    eax,ebp
c000ee96:	7e 14                	jle    c000eeac <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ee98:	8b 06                	mov    eax,DWORD PTR [esi]
c000ee9a:	83 c7 04             	add    edi,0x4
c000ee9d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000eea0:	53                   	push   ebx
c000eea1:	55                   	push   ebp
c000eea2:	45                   	inc    ebp
c000eea3:	56                   	push   esi
c000eea4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eea7:	83 c4 10             	add    esp,0x10
c000eeaa:	eb e0                	jmp    c000ee8c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eeac:	43                   	inc    ebx
c000eead:	eb cd                	jmp    c000ee7c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eeaf:	83 c4 1c             	add    esp,0x1c
c000eeb2:	5b                   	pop    ebx
c000eeb3:	5e                   	pop    esi
c000eeb4:	5f                   	pop    edi
c000eeb5:	5d                   	pop    ebp
c000eeb6:	c3                   	ret    
c000eeb7:	90                   	nop

c000eeb8 <ACPI::close(int, int, void*)>:
c000eeb8:	83 ec 1c             	sub    esp,0x1c
c000eebb:	83 ec 0c             	sub    esp,0xc
c000eebe:	68 34 20 02 c0       	push   0xc0022034
c000eec3:	e8 81 ba ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000eec8:	83 c4 10             	add    esp,0x10
c000eecb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eed3:	74 1b                	je     c000eef0 <ACPI::close(int, int, void*)+0x38>
c000eed5:	83 ec 0c             	sub    esp,0xc
c000eed8:	68 43 20 02 c0       	push   0xc0022043
c000eedd:	e8 67 ba ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000eee2:	83 c4 10             	add    esp,0x10
c000eee5:	b8 00 00 00 00       	mov    eax,0x0
c000eeea:	e9 01 01 00 00       	jmp    c000eff0 <ACPI::close(int, int, void*)+0x138>
c000eeef:	90                   	nop
c000eef0:	83 ec 0c             	sub    esp,0xc
c000eef3:	68 54 20 02 c0       	push   0xc0022054
c000eef8:	e8 4c ba ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000eefd:	83 c4 10             	add    esp,0x10
c000ef00:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ef05:	75 45                	jne    c000ef4c <ACPI::close(int, int, void*)+0x94>
c000ef07:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef0c:	83 ec 08             	sub    esp,0x8
c000ef0f:	50                   	push   eax
c000ef10:	68 63 20 02 c0       	push   0xc0022063
c000ef15:	e8 2f ba ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000ef1a:	83 c4 10             	add    esp,0x10
c000ef1d:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef22:	85 c0                	test   eax,eax
c000ef24:	74 0a                	je     c000ef30 <ACPI::close(int, int, void*)+0x78>
c000ef26:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef2b:	ff d0                	call   eax
c000ef2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef30:	83 ec 0c             	sub    esp,0xc
c000ef33:	68 34 22 02 c0       	push   0xc0022234
c000ef38:	e8 86 27 00 00       	call   c00116c3 <KePanic(char const*)>
c000ef3d:	83 c4 10             	add    esp,0x10
c000ef40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef45:	e9 a6 00 00 00       	jmp    c000eff0 <ACPI::close(int, int, void*)+0x138>
c000ef4a:	66 90                	xchg   ax,ax
c000ef4c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ef51:	0f 85 81 00 00 00    	jne    c000efd8 <ACPI::close(int, int, void*)+0x120>
c000ef57:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef5c:	83 ec 08             	sub    esp,0x8
c000ef5f:	50                   	push   eax
c000ef60:	68 81 20 02 c0       	push   0xc0022081
c000ef65:	e8 df b9 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000ef6a:	83 c4 10             	add    esp,0x10
c000ef6d:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef72:	85 c0                	test   eax,eax
c000ef74:	74 0a                	je     c000ef80 <ACPI::close(int, int, void*)+0xc8>
c000ef76:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef7b:	ff d0                	call   eax
c000ef7d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef80:	83 ec 0c             	sub    esp,0xc
c000ef83:	68 9c 20 02 c0       	push   0xc002209c
c000ef88:	e8 bc b9 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000ef8d:	83 c4 10             	add    esp,0x10
c000ef90:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ef95:	8d 76 00             	lea    esi,[esi+0x0]
c000ef98:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ef9d:	83 e0 02             	and    eax,0x2
c000efa0:	74 1e                	je     c000efc0 <ACPI::close(int, int, void*)+0x108>
c000efa2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000efa9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efad:	89 c2                	mov    edx,eax
c000efaf:	ec                   	in     al,dx
c000efb0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000efb4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000efb8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000efbc:	eb da                	jmp    c000ef98 <ACPI::close(int, int, void*)+0xe0>
c000efbe:	66 90                	xchg   ax,ax
c000efc0:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000efc7:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000efcc:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000efd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000efd4:	ee                   	out    dx,al
c000efd5:	8d 76 00             	lea    esi,[esi+0x0]
c000efd8:	83 ec 0c             	sub    esp,0xc
c000efdb:	68 ae 20 02 c0       	push   0xc00220ae
c000efe0:	e8 64 b9 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000efe5:	83 c4 10             	add    esp,0x10
c000efe8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efed:	8d 76 00             	lea    esi,[esi+0x0]
c000eff0:	83 c4 1c             	add    esp,0x1c
c000eff3:	c3                   	ret    

c000eff4 <findRSDP()>:
c000eff4:	83 ec 1c             	sub    esp,0x1c
c000eff7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000effc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f002:	83 e0 04             	and    eax,0x4
c000f005:	0f b6 c0             	movzx  eax,al
c000f008:	85 c0                	test   eax,eax
c000f00a:	75 08                	jne    c000f014 <findRSDP()+0x20>
c000f00c:	b8 00 00 00 00       	mov    eax,0x0
c000f011:	eb 75                	jmp    c000f088 <findRSDP()+0x94>
c000f013:	90                   	nop
c000f014:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000f019:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f01e:	7f 1c                	jg     c000f03c <findRSDP()+0x48>
c000f020:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f025:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f02b:	83 e2 fb             	and    edx,0xfffffffb
c000f02e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f034:	b8 00 00 00 00       	mov    eax,0x0
c000f039:	eb 4d                	jmp    c000f088 <findRSDP()+0x94>
c000f03b:	90                   	nop
c000f03c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000f044:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000f04c:	77 32                	ja     c000f080 <findRSDP()+0x8c>
c000f04e:	83 ec 04             	sub    esp,0x4
c000f051:	6a 08                	push   0x8
c000f053:	68 bd 20 02 c0       	push   0xc00220bd
c000f058:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f05c:	e8 1f 13 ff ff       	call   c0000380 <memcmp>
c000f061:	83 c4 10             	add    esp,0x10
c000f064:	85 c0                	test   eax,eax
c000f066:	0f 94 c0             	sete   al
c000f069:	0f b6 c0             	movzx  eax,al
c000f06c:	85 c0                	test   eax,eax
c000f06e:	74 08                	je     c000f078 <findRSDP()+0x84>
c000f070:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f074:	eb 12                	jmp    c000f088 <findRSDP()+0x94>
c000f076:	66 90                	xchg   ax,ax
c000f078:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000f07d:	eb c5                	jmp    c000f044 <findRSDP()+0x50>
c000f07f:	90                   	nop
c000f080:	b8 00 00 00 00       	mov    eax,0x0
c000f085:	8d 76 00             	lea    esi,[esi+0x0]
c000f088:	83 c4 1c             	add    esp,0x1c
c000f08b:	c3                   	ret    

c000f08c <loadACPITables(unsigned char*)>:
c000f08c:	57                   	push   edi
c000f08d:	56                   	push   esi
c000f08e:	53                   	push   ebx
c000f08f:	83 ec 60             	sub    esp,0x60
c000f092:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f097:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f09d:	83 e0 04             	and    eax,0x4
c000f0a0:	0f b6 c0             	movzx  eax,al
c000f0a3:	85 c0                	test   eax,eax
c000f0a5:	0f 84 41 02 00 00    	je     c000f2ec <loadACPITables(unsigned char*)+0x260>
c000f0ab:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000f0b0:	0f b6 c0             	movzx  eax,al
c000f0b3:	85 c0                	test   eax,eax
c000f0b5:	74 79                	je     c000f130 <loadACPITables(unsigned char*)+0xa4>
c000f0b7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0bb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000f0bf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f0c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f0c6:	83 e8 24             	sub    eax,0x24
c000f0c9:	c1 e8 03             	shr    eax,0x3
c000f0cc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f0d0:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000f0d8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f0dc:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f0e0:	0f 8d ba 00 00 00    	jge    c000f1a0 <loadACPITables(unsigned char*)+0x114>
c000f0e6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0ea:	83 c0 24             	add    eax,0x24
c000f0ed:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f0f1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0f5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0f9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f0fd:	c1 e0 03             	shl    eax,0x3
c000f100:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f104:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f108:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f10b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f10d:	89 c1                	mov    ecx,eax
c000f10f:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f114:	8d 50 01             	lea    edx,[eax+0x1]
c000f117:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f11d:	89 ca                	mov    edx,ecx
c000f11f:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f126:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f12b:	eb ab                	jmp    c000f0d8 <loadACPITables(unsigned char*)+0x4c>
c000f12d:	8d 76 00             	lea    esi,[esi+0x0]
c000f130:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f134:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f138:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f13c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f13f:	83 e8 24             	sub    eax,0x24
c000f142:	c1 e8 02             	shr    eax,0x2
c000f145:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f149:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f151:	8d 76 00             	lea    esi,[esi+0x0]
c000f154:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f158:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f15c:	7d 42                	jge    c000f1a0 <loadACPITables(unsigned char*)+0x114>
c000f15e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f162:	83 c0 24             	add    eax,0x24
c000f165:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f169:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f16d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f171:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f175:	c1 e0 02             	shl    eax,0x2
c000f178:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f17c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f180:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f182:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f187:	8d 50 01             	lea    edx,[eax+0x1]
c000f18a:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f190:	89 ca                	mov    edx,ecx
c000f192:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f199:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f19e:	eb b4                	jmp    c000f154 <loadACPITables(unsigned char*)+0xc8>
c000f1a0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f1a8:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f1ad:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f1b1:	0f 8d 39 01 00 00    	jge    c000f2f0 <loadACPITables(unsigned char*)+0x264>
c000f1b7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f1bb:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f1c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1ca:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f1ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1d2:	25 ff 0f 00 00       	and    eax,0xfff
c000f1d7:	89 c6                	mov    esi,eax
c000f1d9:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f1df:	83 ec 0c             	sub    esp,0xc
c000f1e2:	6a 01                	push   0x1
c000f1e4:	e8 28 a4 ff ff       	call   c0009611 <Virt::allocateKernelVirtualPages(int)>
c000f1e9:	83 c4 10             	add    esp,0x10
c000f1ec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f1f0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f1f6:	83 ec 0c             	sub    esp,0xc
c000f1f9:	6a 01                	push   0x1
c000f1fb:	6a 01                	push   0x1
c000f1fd:	50                   	push   eax
c000f1fe:	52                   	push   edx
c000f1ff:	53                   	push   ebx
c000f200:	e8 19 ad ff ff       	call   c0009f1e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f205:	83 c4 20             	add    esp,0x20
c000f208:	09 f0                	or     eax,esi
c000f20a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f20e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f212:	c1 e0 03             	shl    eax,0x3
c000f215:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f21a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f21e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f222:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f226:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f22e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f232:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f236:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f23a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f23e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f242:	89 c6                	mov    esi,eax
c000f244:	89 d7                	mov    edi,edx
c000f246:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f248:	89 c8                	mov    eax,ecx
c000f24a:	89 fa                	mov    edx,edi
c000f24c:	89 f3                	mov    ebx,esi
c000f24e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f252:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f256:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f25a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f25e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f261:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f265:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f269:	05 00 10 00 00       	add    eax,0x1000
c000f26e:	c1 e8 0c             	shr    eax,0xc
c000f271:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f275:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f279:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f27d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f281:	25 ff 0f 00 00       	and    eax,0xfff
c000f286:	89 c6                	mov    esi,eax
c000f288:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f28e:	83 ec 0c             	sub    esp,0xc
c000f291:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f295:	e8 77 a3 ff ff       	call   c0009611 <Virt::allocateKernelVirtualPages(int)>
c000f29a:	83 c4 10             	add    esp,0x10
c000f29d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f2a1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f2a7:	83 ec 0c             	sub    esp,0xc
c000f2aa:	6a 01                	push   0x1
c000f2ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f2b0:	50                   	push   eax
c000f2b1:	52                   	push   edx
c000f2b2:	53                   	push   ebx
c000f2b3:	e8 66 ac ff ff       	call   c0009f1e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f2b8:	83 c4 20             	add    esp,0x20
c000f2bb:	09 f0                	or     eax,esi
c000f2bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f2c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f2c5:	83 ec 0c             	sub    esp,0xc
c000f2c8:	50                   	push   eax
c000f2c9:	e8 61 a6 ff ff       	call   c000992f <Virt::freeKernelVirtualPages(unsigned long)>
c000f2ce:	83 c4 10             	add    esp,0x10
c000f2d1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f2d5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f2d9:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f2e0:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f2e5:	e9 be fe ff ff       	jmp    c000f1a8 <loadACPITables(unsigned char*)+0x11c>
c000f2ea:	66 90                	xchg   ax,ax
c000f2ec:	90                   	nop
c000f2ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f2f0:	83 c4 60             	add    esp,0x60
c000f2f3:	5b                   	pop    ebx
c000f2f4:	5e                   	pop    esi
c000f2f5:	5f                   	pop    edi
c000f2f6:	c3                   	ret    
c000f2f7:	90                   	nop

c000f2f8 <findRSDT(unsigned char*)>:
c000f2f8:	57                   	push   edi
c000f2f9:	56                   	push   esi
c000f2fa:	53                   	push   ebx
c000f2fb:	83 ec 50             	sub    esp,0x50
c000f2fe:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f303:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f309:	83 e0 04             	and    eax,0x4
c000f30c:	0f b6 c0             	movzx  eax,al
c000f30f:	85 c0                	test   eax,eax
c000f311:	75 0d                	jne    c000f320 <findRSDT(unsigned char*)+0x28>
c000f313:	b8 00 00 00 00       	mov    eax,0x0
c000f318:	e9 2b 01 00 00       	jmp    c000f448 <findRSDT(unsigned char*)+0x150>
c000f31d:	8d 76 00             	lea    esi,[esi+0x0]
c000f320:	89 e0                	mov    eax,esp
c000f322:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f326:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f32a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f32e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f336:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f33a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f33e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f342:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f346:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f34a:	89 c6                	mov    esi,eax
c000f34c:	89 d7                	mov    edi,edx
c000f34e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f350:	89 c8                	mov    eax,ecx
c000f352:	89 fa                	mov    edx,edi
c000f354:	89 f3                	mov    ebx,esi
c000f356:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f35a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f35e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f362:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f366:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f36a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f372:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f376:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f37a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f382:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f386:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f38a:	25 ff 0f 00 00       	and    eax,0xfff
c000f38f:	89 c6                	mov    esi,eax
c000f391:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f397:	83 ec 0c             	sub    esp,0xc
c000f39a:	6a 02                	push   0x2
c000f39c:	e8 70 a2 ff ff       	call   c0009611 <Virt::allocateKernelVirtualPages(int)>
c000f3a1:	83 c4 10             	add    esp,0x10
c000f3a4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f3a8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f3ae:	83 ec 0c             	sub    esp,0xc
c000f3b1:	6a 01                	push   0x1
c000f3b3:	6a 02                	push   0x2
c000f3b5:	50                   	push   eax
c000f3b6:	52                   	push   edx
c000f3b7:	53                   	push   ebx
c000f3b8:	e8 61 ab ff ff       	call   c0009f1e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f3bd:	83 c4 20             	add    esp,0x20
c000f3c0:	09 f0                	or     eax,esi
c000f3c2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f3c6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f3ca:	25 ff 0f 00 00       	and    eax,0xfff
c000f3cf:	89 c6                	mov    esi,eax
c000f3d1:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f3d7:	83 ec 0c             	sub    esp,0xc
c000f3da:	6a 02                	push   0x2
c000f3dc:	e8 30 a2 ff ff       	call   c0009611 <Virt::allocateKernelVirtualPages(int)>
c000f3e1:	83 c4 10             	add    esp,0x10
c000f3e4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f3e8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f3ee:	83 ec 0c             	sub    esp,0xc
c000f3f1:	6a 01                	push   0x1
c000f3f3:	6a 02                	push   0x2
c000f3f5:	50                   	push   eax
c000f3f6:	52                   	push   edx
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 21 ab ff ff       	call   c0009f1e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	09 f0                	or     eax,esi
c000f402:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f406:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f40b:	85 c0                	test   eax,eax
c000f40d:	75 11                	jne    c000f420 <findRSDT(unsigned char*)+0x128>
c000f40f:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f416:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f41a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f41e:	eb 24                	jmp    c000f444 <findRSDT(unsigned char*)+0x14c>
c000f420:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f425:	83 f8 02             	cmp    eax,0x2
c000f428:	75 12                	jne    c000f43c <findRSDT(unsigned char*)+0x144>
c000f42a:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f431:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f435:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f439:	eb 09                	jmp    c000f444 <findRSDT(unsigned char*)+0x14c>
c000f43b:	90                   	nop
c000f43c:	b8 00 00 00 00       	mov    eax,0x0
c000f441:	eb 05                	jmp    c000f448 <findRSDT(unsigned char*)+0x150>
c000f443:	90                   	nop
c000f444:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f448:	83 c4 50             	add    esp,0x50
c000f44b:	5b                   	pop    ebx
c000f44c:	5e                   	pop    esi
c000f44d:	5f                   	pop    edi
c000f44e:	c3                   	ret    
c000f44f:	90                   	nop

c000f450 <findDataTable(unsigned char*, char*)>:
c000f450:	83 ec 1c             	sub    esp,0x1c
c000f453:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f458:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f45e:	83 e0 04             	and    eax,0x4
c000f461:	0f b6 c0             	movzx  eax,al
c000f464:	85 c0                	test   eax,eax
c000f466:	75 08                	jne    c000f470 <findDataTable(unsigned char*, char*)+0x20>
c000f468:	b8 00 00 00 00       	mov    eax,0x0
c000f46d:	eb 5d                	jmp    c000f4cc <findDataTable(unsigned char*, char*)+0x7c>
c000f46f:	90                   	nop
c000f470:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f478:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f47d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f481:	7d 41                	jge    c000f4c4 <findDataTable(unsigned char*, char*)+0x74>
c000f483:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f487:	c1 e0 03             	shl    eax,0x3
c000f48a:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f48f:	83 ec 04             	sub    esp,0x4
c000f492:	6a 04                	push   0x4
c000f494:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f498:	50                   	push   eax
c000f499:	e8 e2 0e ff ff       	call   c0000380 <memcmp>
c000f49e:	83 c4 10             	add    esp,0x10
c000f4a1:	85 c0                	test   eax,eax
c000f4a3:	0f 94 c0             	sete   al
c000f4a6:	0f b6 c0             	movzx  eax,al
c000f4a9:	85 c0                	test   eax,eax
c000f4ab:	74 0f                	je     c000f4bc <findDataTable(unsigned char*, char*)+0x6c>
c000f4ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4b1:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f4b8:	eb 12                	jmp    c000f4cc <findDataTable(unsigned char*, char*)+0x7c>
c000f4ba:	66 90                	xchg   ax,ax
c000f4bc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f4c1:	eb b5                	jmp    c000f478 <findDataTable(unsigned char*, char*)+0x28>
c000f4c3:	90                   	nop
c000f4c4:	b8 00 00 00 00       	mov    eax,0x0
c000f4c9:	8d 76 00             	lea    esi,[esi+0x0]
c000f4cc:	83 c4 1c             	add    esp,0x1c
c000f4cf:	c3                   	ret    

c000f4d0 <scanMADT()>:
c000f4d0:	53                   	push   ebx
c000f4d1:	83 ec 38             	sub    esp,0x38
c000f4d4:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f4d9:	25 00 04 00 00       	and    eax,0x400
c000f4de:	74 14                	je     c000f4f4 <scanMADT()+0x24>
c000f4e0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4e5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4eb:	83 e2 fb             	and    edx,0xfffffffb
c000f4ee:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4f4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4f9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f4ff:	83 e0 04             	and    eax,0x4
c000f502:	0f b6 c0             	movzx  eax,al
c000f505:	85 c0                	test   eax,eax
c000f507:	0f 84 6b 04 00 00    	je     c000f978 <scanMADT()+0x4a8>
c000f50d:	e8 e2 fa ff ff       	call   c000eff4 <findRSDP()>
c000f512:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f517:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f51c:	85 c0                	test   eax,eax
c000f51e:	75 1c                	jne    c000f53c <scanMADT()+0x6c>
c000f520:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f525:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f52b:	83 e2 fb             	and    edx,0xfffffffb
c000f52e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f534:	e9 47 04 00 00       	jmp    c000f980 <scanMADT()+0x4b0>
c000f539:	8d 76 00             	lea    esi,[esi+0x0]
c000f53c:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f541:	83 ec 0c             	sub    esp,0xc
c000f544:	50                   	push   eax
c000f545:	e8 ae fd ff ff       	call   c000f2f8 <findRSDT(unsigned char*)>
c000f54a:	83 c4 10             	add    esp,0x10
c000f54d:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f552:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f557:	85 c0                	test   eax,eax
c000f559:	75 19                	jne    c000f574 <scanMADT()+0xa4>
c000f55b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f560:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f566:	83 e2 fb             	and    edx,0xfffffffb
c000f569:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f56f:	e9 0c 04 00 00       	jmp    c000f980 <scanMADT()+0x4b0>
c000f574:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f579:	83 ec 0c             	sub    esp,0xc
c000f57c:	50                   	push   eax
c000f57d:	e8 0a fb ff ff       	call   c000f08c <loadACPITables(unsigned char*)>
c000f582:	83 c4 10             	add    esp,0x10
c000f585:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f58a:	83 ec 08             	sub    esp,0x8
c000f58d:	68 c6 20 02 c0       	push   0xc00220c6
c000f592:	50                   	push   eax
c000f593:	e8 b8 fe ff ff       	call   c000f450 <findDataTable(unsigned char*, char*)>
c000f598:	83 c4 10             	add    esp,0x10
c000f59b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f59f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f5a4:	75 1a                	jne    c000f5c0 <scanMADT()+0xf0>
c000f5a6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f5ab:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f5b1:	83 e2 fe             	and    edx,0xfffffffe
c000f5b4:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f5ba:	e9 c1 03 00 00       	jmp    c000f980 <scanMADT()+0x4b0>
c000f5bf:	90                   	nop
c000f5c0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f5c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f5cf:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f5d3:	0f 87 a7 03 00 00    	ja     c000f980 <scanMADT()+0x4b0>
c000f5d9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f5e1:	0f 87 99 03 00 00    	ja     c000f980 <scanMADT()+0x4b0>
c000f5e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5eb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f5ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5f3:	8d 50 01             	lea    edx,[eax+0x1]
c000f5f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5fe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f602:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f606:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f60a:	8d 50 01             	lea    edx,[eax+0x1]
c000f60d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f611:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f615:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f619:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f61d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f622:	83 f8 02             	cmp    eax,0x2
c000f625:	0f 86 51 03 00 00    	jbe    c000f97c <scanMADT()+0x4ac>
c000f62b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f630:	85 c0                	test   eax,eax
c000f632:	75 58                	jne    c000f68c <scanMADT()+0x1bc>
c000f634:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f638:	8d 50 01             	lea    edx,[eax+0x1]
c000f63b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f63f:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f645:	0f b6 d2             	movzx  edx,dl
c000f648:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f64c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f650:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f656:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f65a:	8d 50 01             	lea    edx,[eax+0x1]
c000f65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f661:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f667:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f66a:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f670:	0f b6 d2             	movzx  edx,dl
c000f673:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f677:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f67b:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f681:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f686:	e9 d9 02 00 00       	jmp    c000f964 <scanMADT()+0x494>
c000f68b:	90                   	nop
c000f68c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f691:	83 f8 01             	cmp    eax,0x1
c000f694:	0f 85 1a 01 00 00    	jne    c000f7b4 <scanMADT()+0x2e4>
c000f69a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f69e:	8d 50 01             	lea    edx,[eax+0x1]
c000f6a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6a5:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f6ab:	0f b6 d2             	movzx  edx,dl
c000f6ae:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f6b2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f6b6:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f6bc:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f6c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6c9:	01 d0                	add    eax,edx
c000f6cb:	83 c0 2c             	add    eax,0x2c
c000f6ce:	8a 00                	mov    al,BYTE PTR [eax]
c000f6d0:	0f b6 d0             	movzx  edx,al
c000f6d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6d7:	8d 48 01             	lea    ecx,[eax+0x1]
c000f6da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6de:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f6e2:	0f b6 c0             	movzx  eax,al
c000f6e5:	c1 e0 08             	shl    eax,0x8
c000f6e8:	89 d1                	mov    ecx,edx
c000f6ea:	09 c1                	or     ecx,eax
c000f6ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6f0:	8d 50 02             	lea    edx,[eax+0x2]
c000f6f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6f7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6fb:	0f b6 c0             	movzx  eax,al
c000f6fe:	c1 e0 10             	shl    eax,0x10
c000f701:	09 c1                	or     ecx,eax
c000f703:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f707:	8d 50 03             	lea    edx,[eax+0x3]
c000f70a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f70e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f712:	0f b6 c0             	movzx  eax,al
c000f715:	c1 e0 18             	shl    eax,0x18
c000f718:	09 c1                	or     ecx,eax
c000f71a:	89 ca                	mov    edx,ecx
c000f71c:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f721:	0f b6 c0             	movzx  eax,al
c000f724:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f72b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f730:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f734:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f738:	01 d0                	add    eax,edx
c000f73a:	83 c0 2c             	add    eax,0x2c
c000f73d:	8a 00                	mov    al,BYTE PTR [eax]
c000f73f:	0f b6 d0             	movzx  edx,al
c000f742:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f746:	8d 48 01             	lea    ecx,[eax+0x1]
c000f749:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f74d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f751:	0f b6 c0             	movzx  eax,al
c000f754:	c1 e0 08             	shl    eax,0x8
c000f757:	89 d1                	mov    ecx,edx
c000f759:	09 c1                	or     ecx,eax
c000f75b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f75f:	8d 50 02             	lea    edx,[eax+0x2]
c000f762:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f766:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f76a:	0f b6 c0             	movzx  eax,al
c000f76d:	c1 e0 10             	shl    eax,0x10
c000f770:	09 c1                	or     ecx,eax
c000f772:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f776:	8d 50 03             	lea    edx,[eax+0x3]
c000f779:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f77d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f781:	0f b6 c0             	movzx  eax,al
c000f784:	c1 e0 18             	shl    eax,0x18
c000f787:	09 c1                	or     ecx,eax
c000f789:	89 ca                	mov    edx,ecx
c000f78b:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f790:	0f b6 c0             	movzx  eax,al
c000f793:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f79a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f79f:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f7a4:	83 c0 01             	add    eax,0x1
c000f7a7:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f7ac:	e9 b3 01 00 00       	jmp    c000f964 <scanMADT()+0x494>
c000f7b1:	8d 76 00             	lea    esi,[esi+0x0]
c000f7b4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f7b9:	83 f8 02             	cmp    eax,0x2
c000f7bc:	0f 85 ea 00 00 00    	jne    c000f8ac <scanMADT()+0x3dc>
c000f7c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7c6:	8d 50 01             	lea    edx,[eax+0x1]
c000f7c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7d1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7d5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f7d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7dd:	8d 50 01             	lea    edx,[eax+0x1]
c000f7e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7e8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7ec:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f7f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7f8:	01 d0                	add    eax,edx
c000f7fa:	83 c0 2c             	add    eax,0x2c
c000f7fd:	8a 00                	mov    al,BYTE PTR [eax]
c000f7ff:	0f b6 d0             	movzx  edx,al
c000f802:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f806:	8d 48 01             	lea    ecx,[eax+0x1]
c000f809:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f80d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f811:	0f b6 c0             	movzx  eax,al
c000f814:	c1 e0 08             	shl    eax,0x8
c000f817:	89 d1                	mov    ecx,edx
c000f819:	09 c1                	or     ecx,eax
c000f81b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f81f:	8d 50 02             	lea    edx,[eax+0x2]
c000f822:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f826:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f82a:	0f b6 c0             	movzx  eax,al
c000f82d:	c1 e0 10             	shl    eax,0x10
c000f830:	09 c1                	or     ecx,eax
c000f832:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f836:	8d 50 03             	lea    edx,[eax+0x3]
c000f839:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f83d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f841:	0f b6 c0             	movzx  eax,al
c000f844:	c1 e0 18             	shl    eax,0x18
c000f847:	09 c8                	or     eax,ecx
c000f849:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f84d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f852:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f856:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f85a:	01 d0                	add    eax,edx
c000f85c:	83 c0 2c             	add    eax,0x2c
c000f85f:	8a 00                	mov    al,BYTE PTR [eax]
c000f861:	0f b6 c0             	movzx  eax,al
c000f864:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f868:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f86b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f86f:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f873:	0f b6 d2             	movzx  edx,dl
c000f876:	c1 e2 08             	shl    edx,0x8
c000f879:	09 d0                	or     eax,edx
c000f87b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f880:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f885:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f88a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f88e:	88 90 88 38 02 c0    	mov    BYTE PTR [eax-0x3ffdc778],dl
c000f894:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f899:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f89e:	66 89 84 12 c0 bb 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd4440],ax
c000f8a6:	e9 b9 00 00 00       	jmp    c000f964 <scanMADT()+0x494>
c000f8ab:	90                   	nop
c000f8ac:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f8b1:	83 f8 04             	cmp    eax,0x4
c000f8b4:	0f 85 9a 00 00 00    	jne    c000f954 <scanMADT()+0x484>
c000f8ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8be:	8d 50 01             	lea    edx,[eax+0x1]
c000f8c1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f8c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8c9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f8cd:	0f b6 c0             	movzx  eax,al
c000f8d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f8d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8dc:	01 d0                	add    eax,edx
c000f8de:	83 c0 2c             	add    eax,0x2c
c000f8e1:	8a 00                	mov    al,BYTE PTR [eax]
c000f8e3:	0f b6 d0             	movzx  edx,al
c000f8e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8ea:	8d 48 01             	lea    ecx,[eax+0x1]
c000f8ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f8f1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f8f5:	0f b6 c0             	movzx  eax,al
c000f8f8:	c1 e0 08             	shl    eax,0x8
c000f8fb:	09 d0                	or     eax,edx
c000f8fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f901:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f906:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f90a:	8d 50 01             	lea    edx,[eax+0x1]
c000f90d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f911:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f915:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f919:	0f b6 c0             	movzx  eax,al
c000f91c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f924:	c1 e0 08             	shl    eax,0x8
c000f927:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f92b:	89 c1                	mov    ecx,eax
c000f92d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f931:	c1 e0 18             	shl    eax,0x18
c000f934:	89 c3                	mov    ebx,eax
c000f936:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f93b:	8d 50 01             	lea    edx,[eax+0x1]
c000f93e:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f944:	09 d9                	or     ecx,ebx
c000f946:	89 ca                	mov    edx,ecx
c000f948:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f94f:	eb 13                	jmp    c000f964 <scanMADT()+0x494>
c000f951:	8d 76 00             	lea    esi,[esi+0x0]
c000f954:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f959:	83 f8 05             	cmp    eax,0x5
c000f95c:	75 06                	jne    c000f964 <scanMADT()+0x494>
c000f95e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f963:	90                   	nop
c000f964:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f969:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f96d:	01 d0                	add    eax,edx
c000f96f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f973:	e9 50 fc ff ff       	jmp    c000f5c8 <scanMADT()+0xf8>
c000f978:	90                   	nop
c000f979:	eb 05                	jmp    c000f980 <scanMADT()+0x4b0>
c000f97b:	90                   	nop
c000f97c:	90                   	nop
c000f97d:	8d 76 00             	lea    esi,[esi+0x0]
c000f980:	83 c4 38             	add    esp,0x38
c000f983:	5b                   	pop    ebx
c000f984:	c3                   	ret    
c000f985:	90                   	nop
c000f986:	66 90                	xchg   ax,ax

c000f988 <ACPI::ACPI()>:
c000f988:	83 ec 0c             	sub    esp,0xc
c000f98b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f98f:	83 ec 08             	sub    esp,0x8
c000f992:	68 cb 20 02 c0       	push   0xc00220cb
c000f997:	50                   	push   eax
c000f998:	e8 8f d1 ff ff       	call   c000cb2c <Device::Device(char const*)>
c000f99d:	83 c4 10             	add    esp,0x10
c000f9a0:	ba d8 22 02 c0       	mov    edx,0xc00222d8
c000f9a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9a9:	89 10                	mov    DWORD PTR [eax],edx
c000f9ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9af:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f9b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9ba:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f9c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9c8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f9d2:	e8 f9 fa ff ff       	call   c000f4d0 <scanMADT()>
c000f9d7:	90                   	nop
c000f9d8:	83 c4 0c             	add    esp,0xc
c000f9db:	c3                   	ret    

c000f9dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f9dc:	83 ec 2c             	sub    esp,0x2c
c000f9df:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f9e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f9e7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f9eb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f9ef:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f9f4:	88 d0                	mov    al,dl
c000f9f6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f9fa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f9ff:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000fa07:	90                   	nop
c000fa08:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa0c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa12:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000fa16:	0f 8d b0 00 00 00    	jge    c000facc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000fa1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa20:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa24:	83 c2 2a             	add    edx,0x2a
c000fa27:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000fa2b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000fa30:	0f b7 c0             	movzx  eax,ax
c000fa33:	39 c2                	cmp    edx,eax
c000fa35:	0f 85 85 00 00 00    	jne    c000fac0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa3b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa3f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa43:	83 c2 2a             	add    edx,0x2a
c000fa46:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000fa4a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000fa4f:	0f b6 c0             	movzx  eax,al
c000fa52:	39 c2                	cmp    edx,eax
c000fa54:	75 6a                	jne    c000fac0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa56:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fa5b:	85 c0                	test   eax,eax
c000fa5d:	74 3d                	je     c000fa9c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000fa5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa63:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa67:	83 c2 2a             	add    edx,0x2a
c000fa6a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000fa6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fa75:	39 c2                	cmp    edx,eax
c000fa77:	74 13                	je     c000fa8c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000fa79:	83 ec 0c             	sub    esp,0xc
c000fa7c:	68 58 22 02 c0       	push   0xc0022258
c000fa81:	e8 3d 1c 00 00       	call   c00116c3 <KePanic(char const*)>
c000fa86:	83 c4 10             	add    esp,0x10
c000fa89:	8d 76 00             	lea    esi,[esi+0x0]
c000fa8c:	83 ec 0c             	sub    esp,0xc
c000fa8f:	68 d0 20 02 c0       	push   0xc00220d0
c000fa94:	e8 2a 1c 00 00       	call   c00116c3 <KePanic(char const*)>
c000fa99:	83 c4 10             	add    esp,0x10
c000fa9c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faa0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000faa4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000faa8:	83 c2 2a             	add    edx,0x2a
c000faab:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000faaf:	8b 02                	mov    eax,DWORD PTR [edx]
c000fab1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000fab4:	89 01                	mov    DWORD PTR [ecx],eax
c000fab6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000fab9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fabe:	66 90                	xchg   ax,ax
c000fac0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000fac5:	e9 3e ff ff ff       	jmp    c000fa08 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000faca:	66 90                	xchg   ax,ax
c000facc:	90                   	nop
c000facd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fad1:	83 c4 2c             	add    esp,0x2c
c000fad4:	c2 04 00             	ret    0x4
c000fad7:	90                   	nop

c000fad8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000fad8:	83 ec 1c             	sub    esp,0x1c
c000fadb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fadf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fae3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fae7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000faec:	88 c8                	mov    al,cl
c000faee:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000faf2:	88 d0                	mov    al,dl
c000faf4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000faf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fafc:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb06:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb09:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000fb0d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000fb11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb15:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb1b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fb1f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000fb22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb26:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000fb2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb2f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb35:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fb39:	83 c0 01             	add    eax,0x1
c000fb3c:	88 c1                	mov    cl,al
c000fb3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb42:	83 c2 2a             	add    edx,0x2a
c000fb45:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fb49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb4d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb57:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb5a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fb5e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fb62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb66:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb6c:	8d 50 01             	lea    edx,[eax+0x1]
c000fb6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb73:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fb79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb7d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb83:	3d 00 02 00 00       	cmp    eax,0x200
c000fb88:	75 12                	jne    c000fb9c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000fb8a:	83 ec 0c             	sub    esp,0xc
c000fb8d:	68 df 20 02 c0       	push   0xc00220df
c000fb92:	e8 2c 1b 00 00       	call   c00116c3 <KePanic(char const*)>
c000fb97:	83 c4 10             	add    esp,0x10
c000fb9a:	66 90                	xchg   ax,ax
c000fb9c:	90                   	nop
c000fb9d:	83 c4 1c             	add    esp,0x1c
c000fba0:	c3                   	ret    
c000fba1:	90                   	nop
c000fba2:	66 90                	xchg   ax,ax

c000fba4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fba4:	b8 00 00 00 00       	mov    eax,0x0
c000fba9:	c3                   	ret    
c000fbaa:	66 90                	xchg   ax,ax

c000fbac <ACPI::detectPCI()>:
c000fbac:	53                   	push   ebx
c000fbad:	83 ec 28             	sub    esp,0x28
c000fbb0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fbb5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fbba:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fbbf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fbc5:	83 e0 04             	and    eax,0x4
c000fbc8:	0f b6 c0             	movzx  eax,al
c000fbcb:	85 c0                	test   eax,eax
c000fbcd:	74 2d                	je     c000fbfc <ACPI::detectPCI()+0x50>
c000fbcf:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fbd4:	83 ec 08             	sub    esp,0x8
c000fbd7:	68 fc 20 02 c0       	push   0xc00220fc
c000fbdc:	50                   	push   eax
c000fbdd:	e8 6e f8 ff ff       	call   c000f450 <findDataTable(unsigned char*, char*)>
c000fbe2:	83 c4 10             	add    esp,0x10
c000fbe5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbe9:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fbee:	74 0c                	je     c000fbfc <ACPI::detectPCI()+0x50>
c000fbf0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbf5:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fbfa:	66 90                	xchg   ax,ax
c000fbfc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fc04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc08:	8a 00                	mov    al,BYTE PTR [eax]
c000fc0a:	0f b6 c0             	movzx  eax,al
c000fc0d:	83 f8 01             	cmp    eax,0x1
c000fc10:	75 0e                	jne    c000fc20 <ACPI::detectPCI()+0x74>
c000fc12:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc17:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc1c:	eb 2e                	jmp    c000fc4c <ACPI::detectPCI()+0xa0>
c000fc1e:	66 90                	xchg   ax,ax
c000fc20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc24:	8a 00                	mov    al,BYTE PTR [eax]
c000fc26:	0f b6 c0             	movzx  eax,al
c000fc29:	83 f8 02             	cmp    eax,0x2
c000fc2c:	75 1e                	jne    c000fc4c <ACPI::detectPCI()+0xa0>
c000fc2e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc33:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc38:	85 c0                	test   eax,eax
c000fc3a:	74 10                	je     c000fc4c <ACPI::detectPCI()+0xa0>
c000fc3c:	83 ec 0c             	sub    esp,0xc
c000fc3f:	68 88 22 02 c0       	push   0xc0022288
c000fc44:	e8 7a 1a 00 00       	call   c00116c3 <KePanic(char const*)>
c000fc49:	83 c4 10             	add    esp,0x10
c000fc4c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fc50:	83 f0 01             	xor    eax,0x1
c000fc53:	0f b6 c0             	movzx  eax,al
c000fc56:	85 c0                	test   eax,eax
c000fc58:	74 46                	je     c000fca0 <ACPI::detectPCI()+0xf4>
c000fc5a:	e8 d1 04 ff ff       	call   c0000130 <manualPCIProbe>
c000fc5f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fc63:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fc68:	75 0e                	jne    c000fc78 <ACPI::detectPCI()+0xcc>
c000fc6a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc6f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc74:	eb 2a                	jmp    c000fca0 <ACPI::detectPCI()+0xf4>
c000fc76:	66 90                	xchg   ax,ax
c000fc78:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fc7d:	75 21                	jne    c000fca0 <ACPI::detectPCI()+0xf4>
c000fc7f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc84:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc89:	85 c0                	test   eax,eax
c000fc8b:	74 13                	je     c000fca0 <ACPI::detectPCI()+0xf4>
c000fc8d:	83 ec 0c             	sub    esp,0xc
c000fc90:	68 88 22 02 c0       	push   0xc0022288
c000fc95:	e8 29 1a 00 00       	call   c00116c3 <KePanic(char const*)>
c000fc9a:	83 c4 10             	add    esp,0x10
c000fc9d:	8d 76 00             	lea    esi,[esi+0x0]
c000fca0:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fca5:	85 c0                	test   eax,eax
c000fca7:	0f 84 87 00 00 00    	je     c000fd34 <ACPI::detectPCI()+0x188>
c000fcad:	83 ec 0c             	sub    esp,0xc
c000fcb0:	68 01 21 02 c0       	push   0xc0022101
c000fcb5:	e8 09 13 00 00       	call   c0010fc3 <KeSetBootMessage(char const*)>
c000fcba:	83 c4 10             	add    esp,0x10
c000fcbd:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fcc5:	83 ec 0c             	sub    esp,0xc
c000fcc8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fccc:	e8 e9 7d ff ff       	call   c0007aba <malloc>
c000fcd1:	83 c4 10             	add    esp,0x10
c000fcd4:	89 c3                	mov    ebx,eax
c000fcd6:	83 ec 0c             	sub    esp,0xc
c000fcd9:	53                   	push   ebx
c000fcda:	e8 a1 b5 00 00       	call   c001b280 <PCI::PCI()>
c000fcdf:	83 c4 10             	add    esp,0x10
c000fce2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fce6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fcea:	83 ec 08             	sub    esp,0x8
c000fced:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fcf1:	50                   	push   eax
c000fcf2:	e8 d3 cc ff ff       	call   c000c9ca <Device::addChild(Device*)>
c000fcf7:	83 c4 10             	add    esp,0x10
c000fcfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcfe:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd00:	83 c0 08             	add    eax,0x8
c000fd03:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd05:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fd0a:	85 d2                	test   edx,edx
c000fd0c:	74 0a                	je     c000fd18 <ACPI::detectPCI()+0x16c>
c000fd0e:	ba 01 00 00 00       	mov    edx,0x1
c000fd13:	eb 0b                	jmp    c000fd20 <ACPI::detectPCI()+0x174>
c000fd15:	8d 76 00             	lea    esi,[esi+0x0]
c000fd18:	ba 02 00 00 00       	mov    edx,0x2
c000fd1d:	8d 76 00             	lea    esi,[esi+0x0]
c000fd20:	6a 00                	push   0x0
c000fd22:	6a 00                	push   0x0
c000fd24:	52                   	push   edx
c000fd25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd29:	ff d0                	call   eax
c000fd2b:	83 c4 10             	add    esp,0x10
c000fd2e:	e9 91 00 00 00       	jmp    c000fdc4 <ACPI::detectPCI()+0x218>
c000fd33:	90                   	nop
c000fd34:	83 ec 0c             	sub    esp,0xc
c000fd37:	68 19 21 02 c0       	push   0xc0022119
c000fd3c:	e8 82 12 00 00       	call   c0010fc3 <KeSetBootMessage(char const*)>
c000fd41:	83 c4 10             	add    esp,0x10
c000fd44:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fd4b:	83 ec 0c             	sub    esp,0xc
c000fd4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fd52:	e8 63 7d ff ff       	call   c0007aba <malloc>
c000fd57:	83 c4 10             	add    esp,0x10
c000fd5a:	89 c3                	mov    ebx,eax
c000fd5c:	83 ec 0c             	sub    esp,0xc
c000fd5f:	53                   	push   ebx
c000fd60:	e8 b5 c0 00 00       	call   c001be1a <IDE::IDE()>
c000fd65:	83 c4 10             	add    esp,0x10
c000fd68:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fd6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd70:	83 ec 08             	sub    esp,0x8
c000fd73:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fd77:	50                   	push   eax
c000fd78:	e8 4d cc ff ff       	call   c000c9ca <Device::addChild(Device*)>
c000fd7d:	83 c4 10             	add    esp,0x10
c000fd80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd84:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fd8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd92:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fd9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd9f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fda8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdac:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdae:	83 c0 08             	add    eax,0x8
c000fdb1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdb3:	6a 00                	push   0x0
c000fdb5:	6a 00                	push   0x0
c000fdb7:	6a 00                	push   0x0
c000fdb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fdbd:	ff d0                	call   eax
c000fdbf:	83 c4 10             	add    esp,0x10
c000fdc2:	66 90                	xchg   ax,ax
c000fdc4:	90                   	nop
c000fdc5:	83 c4 28             	add    esp,0x28
c000fdc8:	5b                   	pop    ebx
c000fdc9:	c3                   	ret    
c000fdca:	66 90                	xchg   ax,ax

c000fdcc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fdcc:	83 ec 1c             	sub    esp,0x1c
c000fdcf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fdd3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fdd6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fdda:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fddf:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fde4:	83 ec 08             	sub    esp,0x8
c000fde7:	52                   	push   edx
c000fde8:	50                   	push   eax
c000fde9:	e8 8e 73 ff ff       	call   c000717c <Computer::readCMOS(unsigned char)>
c000fdee:	83 c4 10             	add    esp,0x10
c000fdf1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fdf5:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fdfa:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fdff:	83 ec 04             	sub    esp,0x4
c000fe02:	6a 01                	push   0x1
c000fe04:	52                   	push   edx
c000fe05:	50                   	push   eax
c000fe06:	e8 8b 74 ff ff       	call   c0007296 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fe0b:	83 c4 10             	add    esp,0x10
c000fe0e:	90                   	nop
c000fe0f:	83 c4 1c             	add    esp,0x1c
c000fe12:	c3                   	ret    
c000fe13:	90                   	nop

c000fe14 <ACPI::sleep()>:
c000fe14:	83 ec 0c             	sub    esp,0xc
c000fe17:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fe1c:	85 c0                	test   eax,eax
c000fe1e:	74 08                	je     c000fe28 <ACPI::sleep()+0x14>
c000fe20:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fe25:	ff d0                	call   eax
c000fe27:	90                   	nop
c000fe28:	90                   	nop
c000fe29:	83 c4 0c             	add    esp,0xc
c000fe2c:	c3                   	ret    
c000fe2d:	90                   	nop
c000fe2e:	66 90                	xchg   ax,ax

c000fe30 <ACPI::open(int, int, void*)>:
c000fe30:	57                   	push   edi
c000fe31:	56                   	push   esi
c000fe32:	53                   	push   ebx
c000fe33:	81 ec 70 01 00 00    	sub    esp,0x170
c000fe39:	83 ec 0c             	sub    esp,0xc
c000fe3c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fe43:	e8 64 fd ff ff       	call   c000fbac <ACPI::detectPCI()>
c000fe48:	83 c4 10             	add    esp,0x10
c000fe4b:	83 ec 0c             	sub    esp,0xc
c000fe4e:	68 b0 22 02 c0       	push   0xc00222b0
c000fe53:	e8 6b 11 00 00       	call   c0010fc3 <KeSetBootMessage(char const*)>
c000fe58:	83 c4 10             	add    esp,0x10
c000fe5b:	b8 4c 05 00 00       	mov    eax,0x54c
c000fe60:	8a 00                	mov    al,BYTE PTR [eax]
c000fe62:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fe69:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fe71:	83 f8 01             	cmp    eax,0x1
c000fe74:	75 12                	jne    c000fe88 <ACPI::open(int, int, void*)+0x58>
c000fe76:	83 ec 0c             	sub    esp,0xc
c000fe79:	68 2e 21 02 c0       	push   0xc002212e
c000fe7e:	e8 4c 4e 00 00       	call   c0014ccf <Thr::loadKernelSymbolTable(char const*)>
c000fe83:	83 c4 10             	add    esp,0x10
c000fe86:	eb 34                	jmp    c000febc <ACPI::open(int, int, void*)+0x8c>
c000fe88:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fe90:	3d bb 00 00 00       	cmp    eax,0xbb
c000fe95:	75 15                	jne    c000feac <ACPI::open(int, int, void*)+0x7c>
c000fe97:	83 ec 0c             	sub    esp,0xc
c000fe9a:	68 4c 21 02 c0       	push   0xc002214c
c000fe9f:	e8 2b 4e 00 00       	call   c0014ccf <Thr::loadKernelSymbolTable(char const*)>
c000fea4:	83 c4 10             	add    esp,0x10
c000fea7:	eb 13                	jmp    c000febc <ACPI::open(int, int, void*)+0x8c>
c000fea9:	8d 76 00             	lea    esi,[esi+0x0]
c000feac:	83 ec 0c             	sub    esp,0xc
c000feaf:	68 6a 21 02 c0       	push   0xc002216a
c000feb4:	e8 0a 18 00 00       	call   c00116c3 <KePanic(char const*)>
c000feb9:	83 c4 10             	add    esp,0x10
c000febc:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fec4:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fecf:	83 ec 0c             	sub    esp,0xc
c000fed2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fed9:	e8 dc 7b ff ff       	call   c0007aba <malloc>
c000fede:	83 c4 10             	add    esp,0x10
c000fee1:	89 c3                	mov    ebx,eax
c000fee3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000fee8:	83 ec 04             	sub    esp,0x4
c000feeb:	50                   	push   eax
c000feec:	68 84 21 02 c0       	push   0xc0022184
c000fef1:	53                   	push   ebx
c000fef2:	e8 59 bc ff ff       	call   c000bb50 <File::File(char const*, Process*)>
c000fef7:	83 c4 10             	add    esp,0x10
c000fefa:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ff01:	83 ec 08             	sub    esp,0x8
c000ff04:	6a 01                	push   0x1
c000ff06:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ff0d:	e8 5c bc ff ff       	call   c000bb6e <File::open(FileOpenMode)>
c000ff12:	83 c4 10             	add    esp,0x10
c000ff15:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ff1c:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ff24:	75 16                	jne    c000ff3c <ACPI::open(int, int, void*)+0x10c>
c000ff26:	83 ec 0c             	sub    esp,0xc
c000ff29:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ff30:	e8 97 bc ff ff       	call   c000bbcc <File::close()>
c000ff35:	83 c4 10             	add    esp,0x10
c000ff38:	eb 0a                	jmp    c000ff44 <ACPI::open(int, int, void*)+0x114>
c000ff3a:	66 90                	xchg   ax,ax
c000ff3c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ff44:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ff4c:	74 1e                	je     c000ff6c <ACPI::open(int, int, void*)+0x13c>
c000ff4e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ff55:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff57:	83 c0 08             	add    eax,0x8
c000ff5a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff5c:	83 ec 0c             	sub    esp,0xc
c000ff5f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ff66:	ff d0                	call   eax
c000ff68:	83 c4 10             	add    esp,0x10
c000ff6b:	90                   	nop
c000ff6c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ff73:	83 f0 01             	xor    eax,0x1
c000ff76:	0f b6 c0             	movzx  eax,al
c000ff79:	85 c0                	test   eax,eax
c000ff7b:	74 43                	je     c000ffc0 <ACPI::open(int, int, void*)+0x190>
c000ff7d:	83 ec 0c             	sub    esp,0xc
c000ff80:	68 a2 21 02 c0       	push   0xc00221a2
c000ff85:	e8 39 10 00 00       	call   c0010fc3 <KeSetBootMessage(char const*)>
c000ff8a:	83 c4 10             	add    esp,0x10
c000ff8d:	83 ec 04             	sub    esp,0x4
c000ff90:	6a 0c                	push   0xc
c000ff92:	68 bd 21 02 c0       	push   0xc00221bd
c000ff97:	68 ce 21 02 c0       	push   0xc00221ce
c000ff9c:	e8 6b 3f 00 00       	call   c0013f0c <Reg::readIntWithDefault(char*, char*, int)>
c000ffa1:	83 c4 10             	add    esp,0x10
c000ffa4:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ffab:	83 ec 0c             	sub    esp,0xc
c000ffae:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ffb5:	e8 86 98 ff ff       	call   c0009840 <Virt::setupPageSwapping(int)>
c000ffba:	83 c4 10             	add    esp,0x10
c000ffbd:	8d 76 00             	lea    esi,[esi+0x0]
c000ffc0:	83 ec 0c             	sub    esp,0xc
c000ffc3:	68 2b 0c 02 c0       	push   0xc0020c2b
c000ffc8:	e8 f6 0f 00 00       	call   c0010fc3 <KeSetBootMessage(char const*)>
c000ffcd:	83 c4 10             	add    esp,0x10
c000ffd0:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ffd7:	83 ec 08             	sub    esp,0x8
c000ffda:	6a 13                	push   0x13
c000ffdc:	50                   	push   eax
c000ffdd:	e8 16 cd ff ff       	call   c000ccf8 <getDevicesOfType(DeviceType)>
c000ffe2:	83 c4 0c             	add    esp,0xc
c000ffe5:	8d 76 00             	lea    esi,[esi+0x0]
c000ffe8:	83 ec 0c             	sub    esp,0xc
c000ffeb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fff2:	50                   	push   eax
c000fff3:	e8 08 00 01 00       	call   c0020000 <LinkedList<Device>::isEmpty()>
c000fff8:	83 c4 10             	add    esp,0x10
c000fffb:	83 f0 01             	xor    eax,0x1
c000fffe:	0f b6 c0             	movzx  eax,al
c0010001:	85 c0                	test   eax,eax
c0010003:	0f 84 47 01 00 00    	je     c0010150 <ACPI::open(int, int, void*)+0x320>
c0010009:	83 ec 0c             	sub    esp,0xc
c001000c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0010013:	50                   	push   eax
c0010014:	e8 03 00 01 00       	call   c002001c <LinkedList<Device>::getFirstElement()>
c0010019:	83 c4 10             	add    esp,0x10
c001001c:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0010023:	83 ec 0c             	sub    esp,0xc
c0010026:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001002d:	50                   	push   eax
c001002e:	e8 f1 ff 00 00       	call   c0020024 <LinkedList<Device>::removeFirst()>
c0010033:	83 c4 10             	add    esp,0x10
c0010036:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c001003d:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0010044:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c001004b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001004f:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0010055:	ba 09 00 00 00       	mov    edx,0x9
c001005a:	fc                   	cld    
c001005b:	89 c7                	mov    edi,eax
c001005d:	89 de                	mov    esi,ebx
c001005f:	89 d1                	mov    ecx,edx
c0010061:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010063:	83 ec 08             	sub    esp,0x8
c0010066:	8d 44 24 38          	lea    eax,[esp+0x38]
c001006a:	50                   	push   eax
c001006b:	83 ec 24             	sub    esp,0x24
c001006e:	89 e0                	mov    eax,esp
c0010070:	89 c3                	mov    ebx,eax
c0010072:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0010076:	ba 09 00 00 00       	mov    edx,0x9
c001007b:	89 df                	mov    edi,ebx
c001007d:	89 c6                	mov    esi,eax
c001007f:	89 d1                	mov    ecx,edx
c0010081:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010083:	e8 e2 b6 00 00       	call   c001b76a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0010088:	83 c4 30             	add    esp,0x30
c001008b:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0010092:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001009a:	0f 84 48 ff ff ff    	je     c000ffe8 <ACPI::open(int, int, void*)+0x1b8>
c00100a0:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00100ab:	83 ec 0c             	sub    esp,0xc
c00100ae:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00100b5:	e8 00 7a ff ff       	call   c0007aba <malloc>
c00100ba:	83 c4 10             	add    esp,0x10
c00100bd:	89 c3                	mov    ebx,eax
c00100bf:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00100c4:	83 ec 04             	sub    esp,0x4
c00100c7:	50                   	push   eax
c00100c8:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00100cf:	53                   	push   ebx
c00100d0:	e8 7b ba ff ff       	call   c000bb50 <File::File(char const*, Process*)>
c00100d5:	83 c4 10             	add    esp,0x10
c00100d8:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c00100df:	83 ec 0c             	sub    esp,0xc
c00100e2:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00100e9:	e8 44 bd ff ff       	call   c000be32 <File::exists()>
c00100ee:	83 c4 10             	add    esp,0x10
c00100f1:	0f b6 c0             	movzx  eax,al
c00100f4:	85 c0                	test   eax,eax
c00100f6:	74 28                	je     c0010120 <ACPI::open(int, int, void*)+0x2f0>
c00100f8:	83 ec 08             	sub    esp,0x8
c00100fb:	6a 01                	push   0x1
c00100fd:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0010104:	e8 40 56 00 00       	call   c0015749 <Thr::loadDLL(char const*, bool)>
c0010109:	83 c4 10             	add    esp,0x10
c001010c:	83 ec 08             	sub    esp,0x8
c001010f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0010116:	50                   	push   eax
c0010117:	e8 5e 58 00 00       	call   c001597a <Thr::executeDLL(unsigned long, void*)>
c001011c:	83 c4 10             	add    esp,0x10
c001011f:	90                   	nop
c0010120:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0010128:	0f 84 ba fe ff ff    	je     c000ffe8 <ACPI::open(int, int, void*)+0x1b8>
c001012e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0010135:	8b 00                	mov    eax,DWORD PTR [eax]
c0010137:	83 c0 08             	add    eax,0x8
c001013a:	8b 00                	mov    eax,DWORD PTR [eax]
c001013c:	83 ec 0c             	sub    esp,0xc
c001013f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0010146:	ff d0                	call   eax
c0010148:	83 c4 10             	add    esp,0x10
c001014b:	e9 98 fe ff ff       	jmp    c000ffe8 <ACPI::open(int, int, void*)+0x1b8>
c0010150:	83 ec 0c             	sub    esp,0xc
c0010153:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001015a:	50                   	push   eax
c001015b:	e8 9c fe 00 00       	call   c001fffc <LinkedList<Device>::~LinkedList()>
c0010160:	83 c4 10             	add    esp,0x10
c0010163:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0010169:	83 ec 08             	sub    esp,0x8
c001016c:	6a 01                	push   0x1
c001016e:	68 d5 21 02 c0       	push   0xc00221d5
c0010173:	e8 d1 55 00 00       	call   c0015749 <Thr::loadDLL(char const*, bool)>
c0010178:	83 c4 10             	add    esp,0x10
c001017b:	83 ec 08             	sub    esp,0x8
c001017e:	53                   	push   ebx
c001017f:	50                   	push   eax
c0010180:	e8 f5 57 00 00       	call   c001597a <Thr::executeDLL(unsigned long, void*)>
c0010185:	83 c4 10             	add    esp,0x10
c0010188:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001018d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0010193:	83 e0 04             	and    eax,0x4
c0010196:	0f b6 c0             	movzx  eax,al
c0010199:	85 c0                	test   eax,eax
c001019b:	0f 84 1b 01 00 00    	je     c00102bc <ACPI::open(int, int, void*)+0x48c>
c00101a1:	83 ec 0c             	sub    esp,0xc
c00101a4:	68 f2 21 02 c0       	push   0xc00221f2
c00101a9:	e8 15 0e 00 00       	call   c0010fc3 <KeSetBootMessage(char const*)>
c00101ae:	83 c4 10             	add    esp,0x10
c00101b1:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00101bc:	83 ec 0c             	sub    esp,0xc
c00101bf:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00101c6:	e8 ef 78 ff ff       	call   c0007aba <malloc>
c00101cb:	83 c4 10             	add    esp,0x10
c00101ce:	89 c3                	mov    ebx,eax
c00101d0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00101d5:	83 ec 04             	sub    esp,0x4
c00101d8:	50                   	push   eax
c00101d9:	68 0f 22 02 c0       	push   0xc002220f
c00101de:	53                   	push   ebx
c00101df:	e8 6c b9 ff ff       	call   c000bb50 <File::File(char const*, Process*)>
c00101e4:	83 c4 10             	add    esp,0x10
c00101e7:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00101ee:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00101f6:	74 20                	je     c0010218 <ACPI::open(int, int, void*)+0x3e8>
c00101f8:	83 ec 0c             	sub    esp,0xc
c00101fb:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0010202:	e8 2b bc ff ff       	call   c000be32 <File::exists()>
c0010207:	83 c4 10             	add    esp,0x10
c001020a:	0f b6 c0             	movzx  eax,al
c001020d:	85 c0                	test   eax,eax
c001020f:	74 07                	je     c0010218 <ACPI::open(int, int, void*)+0x3e8>
c0010211:	b0 01                	mov    al,0x1
c0010213:	eb 07                	jmp    c001021c <ACPI::open(int, int, void*)+0x3ec>
c0010215:	8d 76 00             	lea    esi,[esi+0x0]
c0010218:	b0 00                	mov    al,0x0
c001021a:	66 90                	xchg   ax,ax
c001021c:	0f b6 c0             	movzx  eax,al
c001021f:	85 c0                	test   eax,eax
c0010221:	74 25                	je     c0010248 <ACPI::open(int, int, void*)+0x418>
c0010223:	83 ec 08             	sub    esp,0x8
c0010226:	6a 01                	push   0x1
c0010228:	68 0f 22 02 c0       	push   0xc002220f
c001022d:	e8 17 55 00 00       	call   c0015749 <Thr::loadDLL(char const*, bool)>
c0010232:	83 c4 10             	add    esp,0x10
c0010235:	83 ec 08             	sub    esp,0x8
c0010238:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c001023f:	50                   	push   eax
c0010240:	e8 35 57 00 00       	call   c001597a <Thr::executeDLL(unsigned long, void*)>
c0010245:	83 c4 10             	add    esp,0x10
c0010248:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0010250:	74 2a                	je     c001027c <ACPI::open(int, int, void*)+0x44c>
c0010252:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001025a:	74 20                	je     c001027c <ACPI::open(int, int, void*)+0x44c>
c001025c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0010263:	8b 00                	mov    eax,DWORD PTR [eax]
c0010265:	83 c0 08             	add    eax,0x8
c0010268:	8b 00                	mov    eax,DWORD PTR [eax]
c001026a:	83 ec 0c             	sub    esp,0xc
c001026d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0010274:	ff d0                	call   eax
c0010276:	83 c4 10             	add    esp,0x10
c0010279:	8d 76 00             	lea    esi,[esi+0x0]
c001027c:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c0010281:	83 ec 08             	sub    esp,0x8
c0010284:	68 2c 22 02 c0       	push   0xc002222c
c0010289:	50                   	push   eax
c001028a:	e8 c1 f1 ff ff       	call   c000f450 <findDataTable(unsigned char*, char*)>
c001028f:	83 c4 10             	add    esp,0x10
c0010292:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0010299:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00102a1:	74 19                	je     c00102bc <ACPI::open(int, int, void*)+0x48c>
c00102a3:	83 ec 08             	sub    esp,0x8
c00102a6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00102ad:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00102b4:	e8 13 fb ff ff       	call   c000fdcc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00102b9:	83 c4 10             	add    esp,0x10
c00102bc:	b8 00 00 00 00       	mov    eax,0x0
c00102c1:	81 c4 70 01 00 00    	add    esp,0x170
c00102c7:	5b                   	pop    ebx
c00102c8:	5e                   	pop    esi
c00102c9:	5f                   	pop    edi
c00102ca:	c3                   	ret    
c00102cb:	90                   	nop

c00102cc <CPU::close(int, int, void*)>:
c00102cc:	31 c0                	xor    eax,eax
c00102ce:	c3                   	ret    
c00102cf:	90                   	nop

c00102d0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00102d0:	60                   	pusha  
c00102d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00102d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00102d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102dd:	9c                   	pushf  
c00102de:	fa                   	cli    
c00102df:	0f 09                	wbinvd 
c00102e1:	0f 30                	wrmsr  
c00102e3:	9d                   	popf   
c00102e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00102e8:	89 02                	mov    DWORD PTR [edx],eax
c00102ea:	61                   	popa   
c00102eb:	c3                   	ret    

c00102ec <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00102ec:	60                   	pusha  
c00102ed:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00102f1:	9c                   	pushf  
c00102f2:	fa                   	cli    
c00102f3:	0f 09                	wbinvd 
c00102f5:	31 c0                	xor    eax,eax
c00102f7:	31 d2                	xor    edx,edx
c00102f9:	0f 32                	rdmsr  
c00102fb:	9d                   	popf   
c00102fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010300:	89 02                	mov    DWORD PTR [edx],eax
c0010302:	61                   	popa   
c0010303:	c3                   	ret    

c0010304 <CPU::AMD_K6_writeback(int, int, int)>:
c0010304:	56                   	push   esi
c0010305:	53                   	push   ebx
c0010306:	83 ec 10             	sub    esp,0x10
c0010309:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001030d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0010312:	75 5d                	jne    c0010371 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010314:	83 f8 08             	cmp    eax,0x8
c0010317:	75 09                	jne    c0010322 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0010319:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001031e:	7e 13                	jle    c0010333 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010320:	eb 30                	jmp    c0010352 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010322:	83 f8 06             	cmp    eax,0x6
c0010325:	7c 4a                	jl     c0010371 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010327:	83 f8 07             	cmp    eax,0x7
c001032a:	7e 07                	jle    c0010333 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001032c:	83 f8 09             	cmp    eax,0x9
c001032f:	74 21                	je     c0010352 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010331:	eb 3e                	jmp    c0010371 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010333:	89 e6                	mov    esi,esp
c0010335:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c001033b:	56                   	push   esi
c001033c:	c1 eb 15             	shr    ebx,0x15
c001033f:	68 82 00 00 c0       	push   0xc0000082
c0010344:	83 e3 7e             	and    ebx,0x7e
c0010347:	e8 a0 ff ff ff       	call   c00102ec <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001034c:	56                   	push   esi
c001034d:	6a 00                	push   0x0
c001034f:	53                   	push   ebx
c0010350:	eb 12                	jmp    c0010364 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0010352:	89 e3                	mov    ebx,esp
c0010354:	53                   	push   ebx
c0010355:	68 82 00 00 c0       	push   0xc0000082
c001035a:	e8 8d ff ff ff       	call   c00102ec <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001035f:	53                   	push   ebx
c0010360:	6a 00                	push   0x0
c0010362:	6a 00                	push   0x0
c0010364:	68 82 00 00 c0       	push   0xc0000082
c0010369:	e8 62 ff ff ff       	call   c00102d0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001036e:	83 c4 18             	add    esp,0x18
c0010371:	83 c4 10             	add    esp,0x10
c0010374:	5b                   	pop    ebx
c0010375:	5e                   	pop    esi
c0010376:	c3                   	ret    
c0010377:	90                   	nop

c0010378 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0010378:	55                   	push   ebp
c0010379:	57                   	push   edi
c001037a:	56                   	push   esi
c001037b:	53                   	push   ebx
c001037c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010380:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010384:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010388:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001038c:	39 05 98 38 02 c0    	cmp    DWORD PTR ds:0xc0023898,eax
c0010392:	75 23                	jne    c00103b7 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0010394:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c0010399:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001039d:	89 06                	mov    DWORD PTR [esi],eax
c001039f:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00103a4:	89 07                	mov    DWORD PTR [edi],eax
c00103a6:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c00103ab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00103ae:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c00103b3:	89 02                	mov    DWORD PTR [edx],eax
c00103b5:	eb 3f                	jmp    c00103f6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00103b7:	31 c9                	xor    ecx,ecx
c00103b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103bd:	0f a2                	cpuid  
c00103bf:	89 06                	mov    DWORD PTR [esi],eax
c00103c1:	89 1f                	mov    DWORD PTR [edi],ebx
c00103c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00103c7:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00103ca:	89 10                	mov    DWORD PTR [eax],edx
c00103cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103d0:	a3 98 38 02 c0       	mov    ds:0xc0023898,eax
c00103d5:	8b 06                	mov    eax,DWORD PTR [esi]
c00103d7:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c00103dc:	8b 07                	mov    eax,DWORD PTR [edi]
c00103de:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c00103e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00103e6:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c00103eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00103ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00103f1:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c00103f6:	5b                   	pop    ebx
c00103f7:	5e                   	pop    esi
c00103f8:	5f                   	pop    edi
c00103f9:	5d                   	pop    ebp
c00103fa:	c3                   	ret    
c00103fb:	90                   	nop

c00103fc <CPU::cpuidCheckEDX(unsigned int)>:
c00103fc:	83 ec 10             	sub    esp,0x10
c00103ff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010403:	50                   	push   eax
c0010404:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010408:	50                   	push   eax
c0010409:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001040d:	50                   	push   eax
c001040e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010412:	50                   	push   eax
c0010413:	6a 01                	push   0x1
c0010415:	e8 5e ff ff ff       	call   c0010378 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001041a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001041e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0010422:	0f 95 c0             	setne  al
c0010425:	83 c4 24             	add    esp,0x24
c0010428:	c3                   	ret    
c0010429:	90                   	nop

c001042a <CPU::cpuidCheckECX(unsigned int)>:
c001042a:	83 ec 10             	sub    esp,0x10
c001042d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010431:	50                   	push   eax
c0010432:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010436:	50                   	push   eax
c0010437:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001043b:	50                   	push   eax
c001043c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010440:	50                   	push   eax
c0010441:	6a 01                	push   0x1
c0010443:	e8 30 ff ff ff       	call   c0010378 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010448:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001044c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010450:	0f 95 c0             	setne  al
c0010453:	83 c4 24             	add    esp,0x24
c0010456:	c3                   	ret    
c0010457:	90                   	nop

c0010458 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0010458:	83 ec 10             	sub    esp,0x10
c001045b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001045f:	50                   	push   eax
c0010460:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010464:	50                   	push   eax
c0010465:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010469:	50                   	push   eax
c001046a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001046e:	50                   	push   eax
c001046f:	6a 07                	push   0x7
c0010471:	e8 02 ff ff ff       	call   c0010378 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010476:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001047a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001047e:	0f 95 c0             	setne  al
c0010481:	83 c4 24             	add    esp,0x24
c0010484:	c3                   	ret    
c0010485:	90                   	nop

c0010486 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0010486:	83 ec 10             	sub    esp,0x10
c0010489:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001048d:	50                   	push   eax
c001048e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010492:	50                   	push   eax
c0010493:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010497:	50                   	push   eax
c0010498:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001049c:	50                   	push   eax
c001049d:	6a 07                	push   0x7
c001049f:	e8 d4 fe ff ff       	call   c0010378 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00104a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00104a8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00104ac:	0f 95 c0             	setne  al
c00104af:	83 c4 24             	add    esp,0x24
c00104b2:	c3                   	ret    
c00104b3:	90                   	nop

c00104b4 <CPU::CPU()>:
c00104b4:	83 ec 0c             	sub    esp,0xc
c00104b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104bb:	83 ec 08             	sub    esp,0x8
c00104be:	68 ed 23 02 c0       	push   0xc00223ed
c00104c3:	50                   	push   eax
c00104c4:	e8 63 c6 ff ff       	call   c000cb2c <Device::Device(char const*)>
c00104c9:	83 c4 10             	add    esp,0x10
c00104cc:	ba 80 24 02 c0       	mov    edx,0xc0022480
c00104d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d5:	89 10                	mov    DWORD PTR [eax],edx
c00104d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104db:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00104e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e9:	05 78 01 00 00       	add    eax,0x178
c00104ee:	83 ec 0c             	sub    esp,0xc
c00104f1:	50                   	push   eax
c00104f2:	e8 69 6e ff ff       	call   c0007360 <GDT::GDT()>
c00104f7:	83 c4 10             	add    esp,0x10
c00104fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fe:	05 7c 09 00 00       	add    eax,0x97c
c0010503:	83 ec 0c             	sub    esp,0xc
c0010506:	50                   	push   eax
c0010507:	e8 a4 70 ff ff       	call   c00075b0 <IDT::IDT()>
c001050c:	83 c4 10             	add    esp,0x10
c001050f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010513:	05 7c 11 00 00       	add    eax,0x117c
c0010518:	83 ec 0c             	sub    esp,0xc
c001051b:	50                   	push   eax
c001051c:	e8 27 8a ff ff       	call   c0008f48 <TSS::TSS()>
c0010521:	83 c4 10             	add    esp,0x10
c0010524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010528:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001052f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010533:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001053d:	90                   	nop
c001053e:	83 c4 0c             	add    esp,0xc
c0010541:	c3                   	ret    

c0010542 <CPU::displayFeatures()>:
c0010542:	c3                   	ret    
c0010543:	90                   	nop

c0010544 <CPU::detectFeatures()>:
c0010544:	55                   	push   ebp
c0010545:	57                   	push   edi
c0010546:	56                   	push   esi
c0010547:	53                   	push   ebx
c0010548:	83 ec 30             	sub    esp,0x30
c001054b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001054f:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010559:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010560:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0010566:	6a 0d                	push   0xd
c0010568:	6a 00                	push   0x0
c001056a:	55                   	push   ebp
c001056b:	e8 80 ff fe ff       	call   c00004f0 <memset>
c0010570:	83 c4 10             	add    esp,0x10
c0010573:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010578:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001057f:	0f 84 db 05 00 00    	je     c0010b60 <CPU::detectFeatures()+0x61c>
c0010585:	83 ec 0c             	sub    esp,0xc
c0010588:	89 ef                	mov    edi,ebp
c001058a:	6a 10                	push   0x10
c001058c:	e8 6b fe ff ff       	call   c00103fc <CPU::cpuidCheckEDX(unsigned int)>
c0010591:	83 e0 01             	and    eax,0x1
c0010594:	8d 14 00             	lea    edx,[eax+eax*1]
c0010597:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001059d:	83 e0 fd             	and    eax,0xfffffffd
c00105a0:	09 d0                	or     eax,edx
c00105a2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105a8:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00105af:	e8 48 fe ff ff       	call   c00103fc <CPU::cpuidCheckEDX(unsigned int)>
c00105b4:	83 e0 01             	and    eax,0x1
c00105b7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00105be:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105c4:	83 e0 fb             	and    eax,0xfffffffb
c00105c7:	09 d0                	or     eax,edx
c00105c9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105cf:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00105d6:	e8 21 fe ff ff       	call   c00103fc <CPU::cpuidCheckEDX(unsigned int)>
c00105db:	83 e0 01             	and    eax,0x1
c00105de:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00105e5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105eb:	83 e0 f7             	and    eax,0xfffffff7
c00105ee:	09 d0                	or     eax,edx
c00105f0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105f6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00105fd:	e8 fa fd ff ff       	call   c00103fc <CPU::cpuidCheckEDX(unsigned int)>
c0010602:	83 e0 01             	and    eax,0x1
c0010605:	c1 e0 04             	shl    eax,0x4
c0010608:	89 c2                	mov    edx,eax
c001060a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010610:	83 e0 ef             	and    eax,0xffffffef
c0010613:	09 d0                	or     eax,edx
c0010615:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001061b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010622:	e8 d5 fd ff ff       	call   c00103fc <CPU::cpuidCheckEDX(unsigned int)>
c0010627:	83 e0 01             	and    eax,0x1
c001062a:	c1 e0 05             	shl    eax,0x5
c001062d:	89 c2                	mov    edx,eax
c001062f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010635:	83 e0 df             	and    eax,0xffffffdf
c0010638:	09 d0                	or     eax,edx
c001063a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010640:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010647:	e8 b0 fd ff ff       	call   c00103fc <CPU::cpuidCheckEDX(unsigned int)>
c001064c:	83 e0 01             	and    eax,0x1
c001064f:	8d 14 00             	lea    edx,[eax+eax*1]
c0010652:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010658:	83 e0 fd             	and    eax,0xfffffffd
c001065b:	09 d0                	or     eax,edx
c001065d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010663:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001066a:	e8 8d fd ff ff       	call   c00103fc <CPU::cpuidCheckEDX(unsigned int)>
c001066f:	83 e0 01             	and    eax,0x1
c0010672:	c1 e0 06             	shl    eax,0x6
c0010675:	89 c2                	mov    edx,eax
c0010677:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001067d:	83 e0 bf             	and    eax,0xffffffbf
c0010680:	09 d0                	or     eax,edx
c0010682:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010688:	58                   	pop    eax
c0010689:	8d 44 24 28          	lea    eax,[esp+0x28]
c001068d:	50                   	push   eax
c001068e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010692:	50                   	push   eax
c0010693:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010697:	56                   	push   esi
c0010698:	8d 44 24 28          	lea    eax,[esp+0x28]
c001069c:	50                   	push   eax
c001069d:	6a 00                	push   0x0
c001069f:	e8 d4 fc ff ff       	call   c0010378 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00106a4:	b8 04 00 00 00       	mov    eax,0x4
c00106a9:	89 c1                	mov    ecx,eax
c00106ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106ad:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00106b3:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00106b7:	89 c1                	mov    ecx,eax
c00106b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106bb:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00106c1:	8d 74 24 38          	lea    esi,[esp+0x38]
c00106c5:	89 c1                	mov    ecx,eax
c00106c7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106c9:	83 c4 18             	add    esp,0x18
c00106cc:	68 fc 22 02 c0       	push   0xc00222fc
c00106d1:	55                   	push   ebp
c00106d2:	e8 79 00 ff ff       	call   c0000750 <strcmp>
c00106d7:	83 c4 10             	add    esp,0x10
c00106da:	85 c0                	test   eax,eax
c00106dc:	75 0f                	jne    c00106ed <CPU::detectFeatures()+0x1a9>
c00106de:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00106e8:	e9 22 02 00 00       	jmp    c001090f <CPU::detectFeatures()+0x3cb>
c00106ed:	50                   	push   eax
c00106ee:	50                   	push   eax
c00106ef:	68 09 23 02 c0       	push   0xc0022309
c00106f4:	55                   	push   ebp
c00106f5:	e8 56 00 ff ff       	call   c0000750 <strcmp>
c00106fa:	83 c4 10             	add    esp,0x10
c00106fd:	85 c0                	test   eax,eax
c00106ff:	74 dd                	je     c00106de <CPU::detectFeatures()+0x19a>
c0010701:	50                   	push   eax
c0010702:	50                   	push   eax
c0010703:	68 16 23 02 c0       	push   0xc0022316
c0010708:	55                   	push   ebp
c0010709:	e8 42 00 ff ff       	call   c0000750 <strcmp>
c001070e:	83 c4 10             	add    esp,0x10
c0010711:	85 c0                	test   eax,eax
c0010713:	74 2a                	je     c001073f <CPU::detectFeatures()+0x1fb>
c0010715:	50                   	push   eax
c0010716:	50                   	push   eax
c0010717:	68 23 23 02 c0       	push   0xc0022323
c001071c:	55                   	push   ebp
c001071d:	e8 2e 00 ff ff       	call   c0000750 <strcmp>
c0010722:	83 c4 10             	add    esp,0x10
c0010725:	85 c0                	test   eax,eax
c0010727:	74 16                	je     c001073f <CPU::detectFeatures()+0x1fb>
c0010729:	50                   	push   eax
c001072a:	50                   	push   eax
c001072b:	68 30 23 02 c0       	push   0xc0022330
c0010730:	55                   	push   ebp
c0010731:	e8 1a 00 ff ff       	call   c0000750 <strcmp>
c0010736:	83 c4 10             	add    esp,0x10
c0010739:	85 c0                	test   eax,eax
c001073b:	74 48                	je     c0010785 <CPU::detectFeatures()+0x241>
c001073d:	eb 0f                	jmp    c001074e <CPU::detectFeatures()+0x20a>
c001073f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010749:	e9 c1 01 00 00       	jmp    c001090f <CPU::detectFeatures()+0x3cb>
c001074e:	50                   	push   eax
c001074f:	50                   	push   eax
c0010750:	68 3d 23 02 c0       	push   0xc002233d
c0010755:	55                   	push   ebp
c0010756:	e8 f5 ff fe ff       	call   c0000750 <strcmp>
c001075b:	83 c4 10             	add    esp,0x10
c001075e:	85 c0                	test   eax,eax
c0010760:	74 23                	je     c0010785 <CPU::detectFeatures()+0x241>
c0010762:	57                   	push   edi
c0010763:	57                   	push   edi
c0010764:	68 4a 23 02 c0       	push   0xc002234a
c0010769:	55                   	push   ebp
c001076a:	e8 e1 ff fe ff       	call   c0000750 <strcmp>
c001076f:	83 c4 10             	add    esp,0x10
c0010772:	85 c0                	test   eax,eax
c0010774:	75 1e                	jne    c0010794 <CPU::detectFeatures()+0x250>
c0010776:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010780:	e9 8a 01 00 00       	jmp    c001090f <CPU::detectFeatures()+0x3cb>
c0010785:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001078f:	e9 7b 01 00 00       	jmp    c001090f <CPU::detectFeatures()+0x3cb>
c0010794:	56                   	push   esi
c0010795:	56                   	push   esi
c0010796:	68 57 23 02 c0       	push   0xc0022357
c001079b:	55                   	push   ebp
c001079c:	e8 af ff fe ff       	call   c0000750 <strcmp>
c00107a1:	83 c4 10             	add    esp,0x10
c00107a4:	85 c0                	test   eax,eax
c00107a6:	75 0f                	jne    c00107b7 <CPU::detectFeatures()+0x273>
c00107a8:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00107b2:	e9 58 01 00 00       	jmp    c001090f <CPU::detectFeatures()+0x3cb>
c00107b7:	51                   	push   ecx
c00107b8:	51                   	push   ecx
c00107b9:	68 16 23 02 c0       	push   0xc0022316
c00107be:	55                   	push   ebp
c00107bf:	e8 8c ff fe ff       	call   c0000750 <strcmp>
c00107c4:	83 c4 10             	add    esp,0x10
c00107c7:	85 c0                	test   eax,eax
c00107c9:	75 0f                	jne    c00107da <CPU::detectFeatures()+0x296>
c00107cb:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00107d5:	e9 35 01 00 00       	jmp    c001090f <CPU::detectFeatures()+0x3cb>
c00107da:	52                   	push   edx
c00107db:	52                   	push   edx
c00107dc:	68 64 23 02 c0       	push   0xc0022364
c00107e1:	55                   	push   ebp
c00107e2:	e8 69 ff fe ff       	call   c0000750 <strcmp>
c00107e7:	83 c4 10             	add    esp,0x10
c00107ea:	85 c0                	test   eax,eax
c00107ec:	75 0f                	jne    c00107fd <CPU::detectFeatures()+0x2b9>
c00107ee:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00107f8:	e9 12 01 00 00       	jmp    c001090f <CPU::detectFeatures()+0x3cb>
c00107fd:	50                   	push   eax
c00107fe:	50                   	push   eax
c00107ff:	68 71 23 02 c0       	push   0xc0022371
c0010804:	55                   	push   ebp
c0010805:	e8 46 ff fe ff       	call   c0000750 <strcmp>
c001080a:	83 c4 10             	add    esp,0x10
c001080d:	85 c0                	test   eax,eax
c001080f:	75 0f                	jne    c0010820 <CPU::detectFeatures()+0x2dc>
c0010811:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001081b:	e9 ef 00 00 00       	jmp    c001090f <CPU::detectFeatures()+0x3cb>
c0010820:	50                   	push   eax
c0010821:	50                   	push   eax
c0010822:	68 7e 23 02 c0       	push   0xc002237e
c0010827:	55                   	push   ebp
c0010828:	e8 23 ff fe ff       	call   c0000750 <strcmp>
c001082d:	83 c4 10             	add    esp,0x10
c0010830:	85 c0                	test   eax,eax
c0010832:	75 0f                	jne    c0010843 <CPU::detectFeatures()+0x2ff>
c0010834:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001083e:	e9 cc 00 00 00       	jmp    c001090f <CPU::detectFeatures()+0x3cb>
c0010843:	50                   	push   eax
c0010844:	50                   	push   eax
c0010845:	68 8b 23 02 c0       	push   0xc002238b
c001084a:	55                   	push   ebp
c001084b:	e8 00 ff fe ff       	call   c0000750 <strcmp>
c0010850:	83 c4 10             	add    esp,0x10
c0010853:	85 c0                	test   eax,eax
c0010855:	75 0f                	jne    c0010866 <CPU::detectFeatures()+0x322>
c0010857:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010861:	e9 a9 00 00 00       	jmp    c001090f <CPU::detectFeatures()+0x3cb>
c0010866:	50                   	push   eax
c0010867:	50                   	push   eax
c0010868:	68 98 23 02 c0       	push   0xc0022398
c001086d:	55                   	push   ebp
c001086e:	e8 dd fe fe ff       	call   c0000750 <strcmp>
c0010873:	83 c4 10             	add    esp,0x10
c0010876:	85 c0                	test   eax,eax
c0010878:	75 0f                	jne    c0010889 <CPU::detectFeatures()+0x345>
c001087a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0010884:	e9 86 00 00 00       	jmp    c001090f <CPU::detectFeatures()+0x3cb>
c0010889:	50                   	push   eax
c001088a:	50                   	push   eax
c001088b:	68 a5 23 02 c0       	push   0xc00223a5
c0010890:	55                   	push   ebp
c0010891:	e8 ba fe fe ff       	call   c0000750 <strcmp>
c0010896:	83 c4 10             	add    esp,0x10
c0010899:	85 c0                	test   eax,eax
c001089b:	75 0c                	jne    c00108a9 <CPU::detectFeatures()+0x365>
c001089d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00108a7:	eb 66                	jmp    c001090f <CPU::detectFeatures()+0x3cb>
c00108a9:	50                   	push   eax
c00108aa:	50                   	push   eax
c00108ab:	68 b2 23 02 c0       	push   0xc00223b2
c00108b0:	55                   	push   ebp
c00108b1:	e8 9a fe fe ff       	call   c0000750 <strcmp>
c00108b6:	83 c4 10             	add    esp,0x10
c00108b9:	85 c0                	test   eax,eax
c00108bb:	75 0c                	jne    c00108c9 <CPU::detectFeatures()+0x385>
c00108bd:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00108c7:	eb 46                	jmp    c001090f <CPU::detectFeatures()+0x3cb>
c00108c9:	57                   	push   edi
c00108ca:	57                   	push   edi
c00108cb:	68 bf 23 02 c0       	push   0xc00223bf
c00108d0:	55                   	push   ebp
c00108d1:	e8 7a fe fe ff       	call   c0000750 <strcmp>
c00108d6:	83 c4 10             	add    esp,0x10
c00108d9:	85 c0                	test   eax,eax
c00108db:	74 e0                	je     c00108bd <CPU::detectFeatures()+0x379>
c00108dd:	56                   	push   esi
c00108de:	56                   	push   esi
c00108df:	68 cc 23 02 c0       	push   0xc00223cc
c00108e4:	55                   	push   ebp
c00108e5:	e8 66 fe fe ff       	call   c0000750 <strcmp>
c00108ea:	83 c4 10             	add    esp,0x10
c00108ed:	85 c0                	test   eax,eax
c00108ef:	74 cc                	je     c00108bd <CPU::detectFeatures()+0x379>
c00108f1:	51                   	push   ecx
c00108f2:	51                   	push   ecx
c00108f3:	68 d9 23 02 c0       	push   0xc00223d9
c00108f8:	55                   	push   ebp
c00108f9:	e8 52 fe fe ff       	call   c0000750 <strcmp>
c00108fe:	83 c4 10             	add    esp,0x10
c0010901:	85 c0                	test   eax,eax
c0010903:	74 b8                	je     c00108bd <CPU::detectFeatures()+0x379>
c0010905:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001090f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0010914:	0f 86 be 00 00 00    	jbe    c00109d8 <CPU::detectFeatures()+0x494>
c001091a:	83 ec 0c             	sub    esp,0xc
c001091d:	68 80 00 00 00       	push   0x80
c0010922:	e8 31 fb ff ff       	call   c0010458 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010927:	83 e0 01             	and    eax,0x1
c001092a:	c1 e0 06             	shl    eax,0x6
c001092d:	89 c2                	mov    edx,eax
c001092f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010935:	83 e0 bf             	and    eax,0xffffffbf
c0010938:	09 d0                	or     eax,edx
c001093a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010940:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010947:	e8 0c fb ff ff       	call   c0010458 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001094c:	83 e0 01             	and    eax,0x1
c001094f:	c1 e0 04             	shl    eax,0x4
c0010952:	89 c2                	mov    edx,eax
c0010954:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001095a:	83 e0 ef             	and    eax,0xffffffef
c001095d:	09 d0                	or     eax,edx
c001095f:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010965:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001096c:	e8 e7 fa ff ff       	call   c0010458 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010971:	89 c2                	mov    edx,eax
c0010973:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010979:	c1 e2 07             	shl    edx,0x7
c001097c:	83 e0 7f             	and    eax,0x7f
c001097f:	09 d0                	or     eax,edx
c0010981:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010987:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001098e:	e8 f3 fa ff ff       	call   c0010486 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010993:	83 e0 01             	and    eax,0x1
c0010996:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001099d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00109a3:	83 e0 f7             	and    eax,0xfffffff7
c00109a6:	09 d0                	or     eax,edx
c00109a8:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00109ae:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00109b5:	e8 cc fa ff ff       	call   c0010486 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00109ba:	83 c4 10             	add    esp,0x10
c00109bd:	83 e0 01             	and    eax,0x1
c00109c0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00109c7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00109cd:	83 e0 fb             	and    eax,0xfffffffb
c00109d0:	09 d0                	or     eax,edx
c00109d2:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00109d8:	83 ec 0c             	sub    esp,0xc
c00109db:	8d 44 24 28          	lea    eax,[esp+0x28]
c00109df:	50                   	push   eax
c00109e0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00109e4:	50                   	push   eax
c00109e5:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00109e9:	57                   	push   edi
c00109ea:	8d 74 24 28          	lea    esi,[esp+0x28]
c00109ee:	56                   	push   esi
c00109ef:	6a 01                	push   0x1
c00109f1:	e8 82 f9 ff ff       	call   c0010378 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00109f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00109fa:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010a00:	89 c1                	mov    ecx,eax
c0010a02:	83 e2 f0             	and    edx,0xfffffff0
c0010a05:	83 e1 0f             	and    ecx,0xf
c0010a08:	09 ca                	or     edx,ecx
c0010a0a:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010a10:	89 c2                	mov    edx,eax
c0010a12:	c1 ea 04             	shr    edx,0x4
c0010a15:	83 e2 0f             	and    edx,0xf
c0010a18:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010a1c:	89 d1                	mov    ecx,edx
c0010a1e:	83 c4 20             	add    esp,0x20
c0010a21:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010a27:	c1 e1 06             	shl    ecx,0x6
c0010a2a:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010a30:	09 ca                	or     edx,ecx
c0010a32:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010a39:	89 c2                	mov    edx,eax
c0010a3b:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010a41:	c1 ea 08             	shr    edx,0x8
c0010a44:	83 e1 3f             	and    ecx,0x3f
c0010a47:	83 e2 0f             	and    edx,0xf
c0010a4a:	89 d5                	mov    ebp,edx
c0010a4c:	83 e5 03             	and    ebp,0x3
c0010a4f:	c1 e5 06             	shl    ebp,0x6
c0010a52:	09 e9                	or     ecx,ebp
c0010a54:	89 d5                	mov    ebp,edx
c0010a56:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010a5c:	c1 ed 02             	shr    ebp,0x2
c0010a5f:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010a65:	83 e1 c0             	and    ecx,0xffffffc0
c0010a68:	09 e9                	or     ecx,ebp
c0010a6a:	89 c5                	mov    ebp,eax
c0010a6c:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010a72:	c1 ed 08             	shr    ebp,0x8
c0010a75:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010a7b:	83 e5 30             	and    ebp,0x30
c0010a7e:	83 e1 cf             	and    ecx,0xffffffcf
c0010a81:	09 e9                	or     ecx,ebp
c0010a83:	83 fa 06             	cmp    edx,0x6
c0010a86:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010a8c:	74 05                	je     c0010a93 <CPU::detectFeatures()+0x54f>
c0010a8e:	83 fa 0f             	cmp    edx,0xf
c0010a91:	75 64                	jne    c0010af7 <CPU::detectFeatures()+0x5b3>
c0010a93:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010a99:	89 c1                	mov    ecx,eax
c0010a9b:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010aa1:	c1 e9 10             	shr    ecx,0x10
c0010aa4:	c1 e1 04             	shl    ecx,0x4
c0010aa7:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010aab:	0f b6 c9             	movzx  ecx,cl
c0010aae:	c1 e1 06             	shl    ecx,0x6
c0010ab1:	09 e9                	or     ecx,ebp
c0010ab3:	83 fa 0f             	cmp    edx,0xf
c0010ab6:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010abd:	75 38                	jne    c0010af7 <CPU::detectFeatures()+0x5b3>
c0010abf:	c1 e8 14             	shr    eax,0x14
c0010ac2:	83 c0 0f             	add    eax,0xf
c0010ac5:	0f b6 c0             	movzx  eax,al
c0010ac8:	89 c2                	mov    edx,eax
c0010aca:	c1 e8 02             	shr    eax,0x2
c0010acd:	83 e2 03             	and    edx,0x3
c0010ad0:	89 d1                	mov    ecx,edx
c0010ad2:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010ad8:	c1 e1 06             	shl    ecx,0x6
c0010adb:	83 e2 3f             	and    edx,0x3f
c0010ade:	09 ca                	or     edx,ecx
c0010ae0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010ae6:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010aec:	83 e2 c0             	and    edx,0xffffffc0
c0010aef:	09 d0                	or     eax,edx
c0010af1:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010af7:	83 ec 0c             	sub    esp,0xc
c0010afa:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010b00:	83 c8 07             	or     eax,0x7
c0010b03:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010b09:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010b0d:	50                   	push   eax
c0010b0e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010b12:	55                   	push   ebp
c0010b13:	57                   	push   edi
c0010b14:	56                   	push   esi
c0010b15:	68 00 00 00 80       	push   0x80000000
c0010b1a:	e8 59 f8 ff ff       	call   c0010378 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010b1f:	83 c4 20             	add    esp,0x20
c0010b22:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010b2a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010b2e:	76 1e                	jbe    c0010b4e <CPU::detectFeatures()+0x60a>
c0010b30:	83 ec 0c             	sub    esp,0xc
c0010b33:	50                   	push   eax
c0010b34:	55                   	push   ebp
c0010b35:	57                   	push   edi
c0010b36:	56                   	push   esi
c0010b37:	68 01 00 00 80       	push   0x80000001
c0010b3c:	e8 37 f8 ff ff       	call   c0010378 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010b41:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010b4b:	83 c4 20             	add    esp,0x20
c0010b4e:	52                   	push   edx
c0010b4f:	52                   	push   edx
c0010b50:	68 e5 23 02 c0       	push   0xc00223e5
c0010b55:	53                   	push   ebx
c0010b56:	e8 c3 bf ff ff       	call   c000cb1e <Device::setName(char const*)>
c0010b5b:	83 c4 10             	add    esp,0x10
c0010b5e:	eb 69                	jmp    c0010bc9 <CPU::detectFeatures()+0x685>
c0010b60:	50                   	push   eax
c0010b61:	50                   	push   eax
c0010b62:	68 4a 23 02 c0       	push   0xc002234a
c0010b67:	55                   	push   ebp
c0010b68:	e8 d3 fa fe ff       	call   c0000640 <strcpy>
c0010b6d:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010b77:	e8 47 f6 fe ff       	call   c00001c3 <is486>
c0010b7c:	83 c4 10             	add    esp,0x10
c0010b7f:	85 c0                	test   eax,eax
c0010b81:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010b87:	74 1f                	je     c0010ba8 <CPU::detectFeatures()+0x664>
c0010b89:	83 c8 07             	or     eax,0x7
c0010b8c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010b92:	0f 20 c0             	mov    eax,cr0
c0010b95:	83 e0 14             	and    eax,0x14
c0010b98:	83 f8 04             	cmp    eax,0x4
c0010b9b:	75 10                	jne    c0010bad <CPU::detectFeatures()+0x669>
c0010b9d:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010ba3:	83 e0 fd             	and    eax,0xfffffffd
c0010ba6:	eb 1b                	jmp    c0010bc3 <CPU::detectFeatures()+0x67f>
c0010ba8:	83 e0 f8             	and    eax,0xfffffff8
c0010bab:	eb df                	jmp    c0010b8c <CPU::detectFeatures()+0x648>
c0010bad:	e8 ec f5 fe ff       	call   c000019e <hasLegacyFPU>
c0010bb2:	83 e0 01             	and    eax,0x1
c0010bb5:	8d 14 00             	lea    edx,[eax+eax*1]
c0010bb8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010bbe:	83 e0 fd             	and    eax,0xfffffffd
c0010bc1:	09 d0                	or     eax,edx
c0010bc3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010bc9:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010bd0:	74 17                	je     c0010be9 <CPU::detectFeatures()+0x6a5>
c0010bd2:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010bd8:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010bde:	83 c8 10             	or     eax,0x10
c0010be1:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010be7:	eb 20                	jmp    c0010c09 <CPU::detectFeatures()+0x6c5>
c0010be9:	e8 b0 f5 fe ff       	call   c000019e <hasLegacyFPU>
c0010bee:	83 e0 01             	and    eax,0x1
c0010bf1:	8d 14 00             	lea    edx,[eax+eax*1]
c0010bf4:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010bfa:	83 e0 fd             	and    eax,0xfffffffd
c0010bfd:	09 d0                	or     eax,edx
c0010bff:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010c05:	a8 02                	test   al,0x2
c0010c07:	75 c9                	jne    c0010bd2 <CPU::detectFeatures()+0x68e>
c0010c09:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010c10:	83 c4 2c             	add    esp,0x2c
c0010c13:	5b                   	pop    ebx
c0010c14:	5e                   	pop    esi
c0010c15:	5f                   	pop    edi
c0010c16:	5d                   	pop    ebp
c0010c17:	c3                   	ret    

c0010c18 <CPU::setupSMEP()>:
c0010c18:	0f 20 e0             	mov    eax,cr4
c0010c1b:	0d 00 00 10 00       	or     eax,0x100000
c0010c20:	0f 22 e0             	mov    cr4,eax
c0010c23:	c3                   	ret    

c0010c24 <CPU::setupUMIP()>:
c0010c24:	0f 20 e0             	mov    eax,cr4
c0010c27:	80 cc 08             	or     ah,0x8
c0010c2a:	0f 22 e0             	mov    cr4,eax
c0010c2d:	c3                   	ret    

c0010c2e <CPU::setupTSC()>:
c0010c2e:	0f 20 e0             	mov    eax,cr4
c0010c31:	83 c8 04             	or     eax,0x4
c0010c34:	0f 22 e0             	mov    cr4,eax
c0010c37:	c3                   	ret    

c0010c38 <CPU::setupLargePages()>:
c0010c38:	0f 20 e0             	mov    eax,cr4
c0010c3b:	83 c8 10             	or     eax,0x10
c0010c3e:	0f 22 e0             	mov    cr4,eax
c0010c41:	c3                   	ret    

c0010c42 <CPU::setupPAT()>:
c0010c42:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010c47:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010c4e:	74 2c                	je     c0010c7c <CPU::setupPAT()+0x3a>
c0010c50:	53                   	push   ebx
c0010c51:	83 ec 10             	sub    esp,0x10
c0010c54:	68 77 02 00 00       	push   0x277
c0010c59:	50                   	push   eax
c0010c5a:	e8 65 64 ff ff       	call   c00070c4 <Computer::rdmsr(unsigned int)>
c0010c5f:	83 e2 f8             	and    edx,0xfffffff8
c0010c62:	83 ca 01             	or     edx,0x1
c0010c65:	52                   	push   edx
c0010c66:	50                   	push   eax
c0010c67:	68 77 02 00 00       	push   0x277
c0010c6c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010c72:	e8 79 64 ff ff       	call   c00070f0 <Computer::wrmsr(unsigned int, unsigned long long)>
c0010c77:	83 c4 28             	add    esp,0x28
c0010c7a:	5b                   	pop    ebx
c0010c7b:	c3                   	ret    
c0010c7c:	c3                   	ret    
c0010c7d:	90                   	nop

c0010c7e <CPU::setupMTRR()>:
c0010c7e:	c3                   	ret    
c0010c7f:	90                   	nop

c0010c80 <CPU::setupGlobalPages()>:
c0010c80:	0f 20 e0             	mov    eax,cr4
c0010c83:	0c 80                	or     al,0x80
c0010c85:	0f 22 e0             	mov    cr4,eax
c0010c88:	c3                   	ret    
c0010c89:	90                   	nop

c0010c8a <CPU::allowUsermodeDataAccess()>:
c0010c8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c8e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010c95:	74 03                	je     c0010c9a <CPU::allowUsermodeDataAccess()+0x10>
c0010c97:	0f 01 cb             	stac   
c0010c9a:	c3                   	ret    
c0010c9b:	90                   	nop

c0010c9c <CPU::prohibitUsermodeDataAccess()>:
c0010c9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ca0:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010ca7:	74 03                	je     c0010cac <CPU::prohibitUsermodeDataAccess()+0x10>
c0010ca9:	0f 01 ca             	clac   
c0010cac:	c3                   	ret    
c0010cad:	90                   	nop

c0010cae <CPU::setupSMAP()>:
c0010cae:	0f 20 e0             	mov    eax,cr4
c0010cb1:	0d 00 00 20 00       	or     eax,0x200000
c0010cb6:	0f 22 e0             	mov    cr4,eax
c0010cb9:	eb e1                	jmp    c0010c9c <CPU::prohibitUsermodeDataAccess()>
c0010cbb:	90                   	nop

c0010cbc <CPU::setupFeatures()>:
c0010cbc:	53                   	push   ebx
c0010cbd:	83 ec 08             	sub    esp,0x8
c0010cc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cc4:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010ccb:	74 18                	je     c0010ce5 <CPU::setupFeatures()+0x29>
c0010ccd:	83 ec 0c             	sub    esp,0xc
c0010cd0:	68 f1 23 02 c0       	push   0xc00223f1
c0010cd5:	e8 6f 9c ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0010cda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cdd:	e8 42 ff ff ff       	call   c0010c24 <CPU::setupUMIP()>
c0010ce2:	83 c4 10             	add    esp,0x10
c0010ce5:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010cec:	74 18                	je     c0010d06 <CPU::setupFeatures()+0x4a>
c0010cee:	83 ec 0c             	sub    esp,0xc
c0010cf1:	68 fb 23 02 c0       	push   0xc00223fb
c0010cf6:	e8 4e 9c ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0010cfb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cfe:	e8 2b ff ff ff       	call   c0010c2e <CPU::setupTSC()>
c0010d03:	83 c4 10             	add    esp,0x10
c0010d06:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010d0d:	74 18                	je     c0010d27 <CPU::setupFeatures()+0x6b>
c0010d0f:	83 ec 0c             	sub    esp,0xc
c0010d12:	68 04 24 02 c0       	push   0xc0022404
c0010d17:	e8 2d 9c ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0010d1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d1f:	e8 14 ff ff ff       	call   c0010c38 <CPU::setupLargePages()>
c0010d24:	83 c4 10             	add    esp,0x10
c0010d27:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010d2e:	74 18                	je     c0010d48 <CPU::setupFeatures()+0x8c>
c0010d30:	83 ec 0c             	sub    esp,0xc
c0010d33:	68 0d 24 02 c0       	push   0xc002240d
c0010d38:	e8 0c 9c ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0010d3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d40:	e8 3b ff ff ff       	call   c0010c80 <CPU::setupGlobalPages()>
c0010d45:	83 c4 10             	add    esp,0x10
c0010d48:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010d4f:	74 18                	je     c0010d69 <CPU::setupFeatures()+0xad>
c0010d51:	83 ec 0c             	sub    esp,0xc
c0010d54:	68 1f 24 02 c0       	push   0xc002241f
c0010d59:	e8 eb 9b ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0010d5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d61:	e8 dc fe ff ff       	call   c0010c42 <CPU::setupPAT()>
c0010d66:	83 c4 10             	add    esp,0x10
c0010d69:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010d70:	74 11                	je     c0010d83 <CPU::setupFeatures()+0xc7>
c0010d72:	c7 44 24 10 28 24 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022428
c0010d7a:	83 c4 08             	add    esp,0x8
c0010d7d:	5b                   	pop    ebx
c0010d7e:	e9 c6 9b ff ff       	jmp    c000a949 <Dbg::kprintf(char const*, ...)>
c0010d83:	83 c4 08             	add    esp,0x8
c0010d86:	5b                   	pop    ebx
c0010d87:	c3                   	ret    

c0010d88 <CPU::open(int, int, void*)>:
c0010d88:	55                   	push   ebp
c0010d89:	57                   	push   edi
c0010d8a:	56                   	push   esi
c0010d8b:	53                   	push   ebx
c0010d8c:	83 ec 18             	sub    esp,0x18
c0010d8f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d93:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010d97:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010d9b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010da1:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010da7:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010dad:	50                   	push   eax
c0010dae:	e8 0f 66 ff ff       	call   c00073c2 <GDT::setup()>
c0010db3:	83 c4 0c             	add    esp,0xc
c0010db6:	6a 00                	push   0x0
c0010db8:	68 ef be ad de       	push   0xdeadbeef
c0010dbd:	55                   	push   ebp
c0010dbe:	e8 c9 81 ff ff       	call   c0008f8c <TSS::setup(unsigned long, unsigned long)>
c0010dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010dc6:	e8 a1 81 ff ff       	call   c0008f6c <TSS::flush()>
c0010dcb:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010dd1:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dd4:	e8 4d 68 ff ff       	call   c0007626 <IDT::setup()>
c0010dd9:	b8 00 04 00 00       	mov    eax,0x400
c0010dde:	0f 23 f8             	mov    db7,eax
c0010de1:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010deb:	e8 d3 6f ff ff       	call   c0007dc3 <Phys::allocatePage()>
c0010df0:	83 c4 10             	add    esp,0x10
c0010df3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010df9:	85 f6                	test   esi,esi
c0010dfb:	89 38                	mov    DWORD PTR [eax],edi
c0010dfd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010e03:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010e06:	74 10                	je     c0010e18 <CPU::open(int, int, void*)+0x90>
c0010e08:	50                   	push   eax
c0010e09:	50                   	push   eax
c0010e0a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010e10:	56                   	push   esi
c0010e11:	e8 9c 8a ff ff       	call   c00098b2 <VAS::setCPUSpecific(unsigned long)>
c0010e16:	eb 0d                	jmp    c0010e25 <CPU::open(int, int, void*)+0x9d>
c0010e18:	83 ec 0c             	sub    esp,0xc
c0010e1b:	68 32 24 02 c0       	push   0xc0022432
c0010e20:	e8 9e 08 00 00       	call   c00116c3 <KePanic(char const*)>
c0010e25:	83 c4 10             	add    esp,0x10
c0010e28:	83 ec 0c             	sub    esp,0xc
c0010e2b:	68 40 24 02 c0       	push   0xc0022440
c0010e30:	e8 8e 01 00 00       	call   c0010fc3 <KeSetBootMessage(char const*)>
c0010e35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e38:	e8 07 f7 ff ff       	call   c0010544 <CPU::detectFeatures()>
c0010e3d:	c7 04 24 63 24 02 c0 	mov    DWORD PTR [esp],0xc0022463
c0010e44:	e8 7a 01 00 00       	call   c0010fc3 <KeSetBootMessage(char const*)>
c0010e49:	e8 2f 74 00 00       	call   c001827d <HalInitialise()>
c0010e4e:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010e53:	83 e0 10             	and    eax,0x10
c0010e56:	83 f8 01             	cmp    eax,0x1
c0010e59:	19 c0                	sbb    eax,eax
c0010e5b:	83 e0 46             	and    eax,0x46
c0010e5e:	83 c0 1e             	add    eax,0x1e
c0010e61:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e64:	e8 a0 d5 ff ff       	call   c000e409 <setupTimer(int)>
c0010e69:	83 c4 10             	add    esp,0x10
c0010e6c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010e72:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010e79:	74 0c                	je     c0010e87 <CPU::open(int, int, void*)+0xff>
c0010e7b:	83 ec 0c             	sub    esp,0xc
c0010e7e:	53                   	push   ebx
c0010e7f:	e8 38 fe ff ff       	call   c0010cbc <CPU::setupFeatures()>
c0010e84:	83 c4 10             	add    esp,0x10
c0010e87:	83 c4 0c             	add    esp,0xc
c0010e8a:	31 c0                	xor    eax,eax
c0010e8c:	5b                   	pop    ebx
c0010e8d:	5e                   	pop    esi
c0010e8e:	5f                   	pop    edi
c0010e8f:	5d                   	pop    ebp
c0010e90:	c3                   	ret    

c0010e91 <KeInitialiseAtexit()>:
c0010e91:	83 ec 10             	sub    esp,0x10
c0010e94:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010e9e:	6a 60                	push   0x60
c0010ea0:	6a 00                	push   0x0
c0010ea2:	68 20 be 02 c0       	push   0xc002be20
c0010ea7:	e8 44 f6 fe ff       	call   c00004f0 <memset>
c0010eac:	83 c4 1c             	add    esp,0x1c
c0010eaf:	c3                   	ret    

c0010eb0 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010eb0:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010eb5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010eb9:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ec4:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010ecb:	40                   	inc    eax
c0010ecc:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010ed1:	83 f8 17             	cmp    eax,0x17
c0010ed4:	7e 0d                	jle    c0010ee3 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010ed6:	c7 44 24 04 a4 24 02 c0 	mov    DWORD PTR [esp+0x4],0xc00224a4
c0010ede:	e9 e0 07 00 00       	jmp    c00116c3 <KePanic(char const*)>
c0010ee3:	c3                   	ret    

c0010ee4 <KeExecuteAtexit()>:
c0010ee4:	53                   	push   ebx
c0010ee5:	31 db                	xor    ebx,ebx
c0010ee7:	83 ec 08             	sub    esp,0x8
c0010eea:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010ef0:	7e 50                	jle    c0010f42 <KeExecuteAtexit()+0x5e>
c0010ef2:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010ef9:	85 c0                	test   eax,eax
c0010efb:	74 42                	je     c0010f3f <KeExecuteAtexit()+0x5b>
c0010efd:	51                   	push   ecx
c0010efe:	50                   	push   eax
c0010eff:	53                   	push   ebx
c0010f00:	68 bd 24 02 c0       	push   0xc00224bd
c0010f05:	e8 3f 9a ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0010f0a:	58                   	pop    eax
c0010f0b:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010f12:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010f19:	c7 04 24 df 24 02 c0 	mov    DWORD PTR [esp],0xc00224df
c0010f20:	e8 24 9a ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0010f25:	c7 04 24 3f 36 02 c0 	mov    DWORD PTR [esp],0xc002363f
c0010f2c:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010f37:	e8 0d 9a ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0010f3c:	83 c4 10             	add    esp,0x10
c0010f3f:	43                   	inc    ebx
c0010f40:	eb a8                	jmp    c0010eea <KeExecuteAtexit()+0x6>
c0010f42:	83 c4 08             	add    esp,0x8
c0010f45:	5b                   	pop    ebx
c0010f46:	c3                   	ret    

c0010f47 <KeDisplaySplashScreen()>:
c0010f47:	55                   	push   ebp
c0010f48:	bd 05 00 00 00       	mov    ebp,0x5
c0010f4d:	57                   	push   edi
c0010f4e:	bf 0a 00 00 00       	mov    edi,0xa
c0010f53:	56                   	push   esi
c0010f54:	31 f6                	xor    esi,esi
c0010f56:	53                   	push   ebx
c0010f57:	31 db                	xor    ebx,ebx
c0010f59:	83 ec 0c             	sub    esp,0xc
c0010f5c:	0f b6 96 a0 38 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc760]
c0010f63:	89 d0                	mov    eax,edx
c0010f65:	85 d2                	test   edx,edx
c0010f67:	74 52                	je     c0010fbb <KeDisplaySplashScreen()+0x74>
c0010f69:	80 bb d6 38 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc72a],0xdb
c0010f70:	75 13                	jne    c0010f85 <KeDisplaySplashScreen()+0x3e>
c0010f72:	0f b6 8b d5 38 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc72b]
c0010f79:	83 e1 fe             	and    ecx,0xfffffffe
c0010f7c:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010f82:	75 01                	jne    c0010f85 <KeDisplaySplashScreen()+0x3e>
c0010f84:	47                   	inc    edi
c0010f85:	83 fa 0d             	cmp    edx,0xd
c0010f88:	74 28                	je     c0010fb2 <KeDisplaySplashScreen()+0x6b>
c0010f8a:	83 fa 0a             	cmp    edx,0xa
c0010f8d:	75 0a                	jne    c0010f99 <KeDisplaySplashScreen()+0x52>
c0010f8f:	45                   	inc    ebp
c0010f90:	bf 0a 00 00 00       	mov    edi,0xa
c0010f95:	31 db                	xor    ebx,ebx
c0010f97:	eb 19                	jmp    c0010fb2 <KeDisplaySplashScreen()+0x6b>
c0010f99:	83 ec 0c             	sub    esp,0xc
c0010f9c:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010f9f:	55                   	push   ebp
c0010fa0:	0f be c0             	movsx  eax,al
c0010fa3:	52                   	push   edx
c0010fa4:	43                   	inc    ebx
c0010fa5:	6a 00                	push   0x0
c0010fa7:	6a 0e                	push   0xe
c0010fa9:	50                   	push   eax
c0010faa:	e8 4d 7f 00 00       	call   c0018efc <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010faf:	83 c4 20             	add    esp,0x20
c0010fb2:	46                   	inc    esi
c0010fb3:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010fb9:	75 a1                	jne    c0010f5c <KeDisplaySplashScreen()+0x15>
c0010fbb:	83 c4 0c             	add    esp,0xc
c0010fbe:	5b                   	pop    ebx
c0010fbf:	5e                   	pop    esi
c0010fc0:	5f                   	pop    edi
c0010fc1:	5d                   	pop    ebp
c0010fc2:	c3                   	ret    

c0010fc3 <KeSetBootMessage(char const*)>:
c0010fc3:	57                   	push   edi
c0010fc4:	56                   	push   esi
c0010fc5:	53                   	push   ebx
c0010fc6:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010fcc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010fd3:	68 9e 00 00 00       	push   0x9e
c0010fd8:	6a 00                	push   0x0
c0010fda:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010fde:	56                   	push   esi
c0010fdf:	e8 0c f5 fe ff       	call   c00004f0 <memset>
c0010fe4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fe7:	e8 84 f5 fe ff       	call   c0000570 <strlen>
c0010fec:	ba 50 00 00 00       	mov    edx,0x50
c0010ff1:	83 c4 10             	add    esp,0x10
c0010ff4:	29 c2                	sub    edx,eax
c0010ff6:	31 c9                	xor    ecx,ecx
c0010ff8:	83 e2 fe             	and    edx,0xfffffffe
c0010ffb:	01 f2                	add    edx,esi
c0010ffd:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0011002:	84 c0                	test   al,al
c0011004:	74 0a                	je     c0011010 <KeSetBootMessage(char const*)+0x4d>
c0011006:	80 cc 0f             	or     ah,0xf
c0011009:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001100d:	41                   	inc    ecx
c001100e:	eb ed                	jmp    c0010ffd <KeSetBootMessage(char const*)+0x3a>
c0011010:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0011015:	b9 9e 00 00 00       	mov    ecx,0x9e
c001101a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001101c:	81 c4 a0 00 00 00    	add    esp,0xa0
c0011022:	5b                   	pop    ebx
c0011023:	5e                   	pop    esi
c0011024:	5f                   	pop    edi
c0011025:	c3                   	ret    
c0011026:	66 90                	xchg   ax,ax

c0011028 <Krnl::handlePowerButton()>:
c0011028:	83 ec 0c             	sub    esp,0xc
c001102b:	e8 ee 06 00 00       	call   c001171e <KeHandlePowerButton()>
c0011030:	90                   	nop
c0011031:	83 c4 0c             	add    esp,0xc
c0011034:	c3                   	ret    
c0011035:	8d 76 00             	lea    esi,[esi+0x0]

c0011038 <Krnl::handleSleepButton()>:
c0011038:	83 ec 0c             	sub    esp,0xc
c001103b:	e8 13 07 00 00       	call   c0011753 <KeHandleSleepButton()>
c0011040:	90                   	nop
c0011041:	83 c4 0c             	add    esp,0xc
c0011044:	c3                   	ret    

c0011045 <KeCalculateCRC32(unsigned char*, int)>:
c0011045:	53                   	push   ebx
c0011046:	83 c8 ff             	or     eax,0xffffffff
c0011049:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001104d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011051:	01 cb                	add    ebx,ecx
c0011053:	39 d9                	cmp    ecx,ebx
c0011055:	74 15                	je     c001106c <KeCalculateCRC32(unsigned char*, int)+0x27>
c0011057:	41                   	inc    ecx
c0011058:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c001105b:	31 c2                	xor    edx,eax
c001105d:	c1 e8 08             	shr    eax,0x8
c0011060:	0f b6 d2             	movzx  edx,dl
c0011063:	33 04 95 00 3a 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc600]
c001106a:	eb e7                	jmp    c0011053 <KeCalculateCRC32(unsigned char*, int)+0xe>
c001106c:	f7 d0                	not    eax
c001106e:	5b                   	pop    ebx
c001106f:	c3                   	ret    

c0011070 <EnvVarContainer::getEnv(char const*)>:
c0011070:	57                   	push   edi
c0011071:	56                   	push   esi
c0011072:	53                   	push   ebx
c0011073:	31 db                	xor    ebx,ebx
c0011075:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011079:	39 1e                	cmp    DWORD PTR [esi],ebx
c001107b:	7e 2b                	jle    c00110a8 <EnvVarContainer::getEnv(char const*)+0x38>
c001107d:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0011084:	50                   	push   eax
c0011085:	50                   	push   eax
c0011086:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011089:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001108c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011090:	e8 bb f6 fe ff       	call   c0000750 <strcmp>
c0011095:	83 c4 10             	add    esp,0x10
c0011098:	85 c0                	test   eax,eax
c001109a:	75 09                	jne    c00110a5 <EnvVarContainer::getEnv(char const*)+0x35>
c001109c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001109f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00110a3:	eb 05                	jmp    c00110aa <EnvVarContainer::getEnv(char const*)+0x3a>
c00110a5:	43                   	inc    ebx
c00110a6:	eb d1                	jmp    c0011079 <EnvVarContainer::getEnv(char const*)+0x9>
c00110a8:	31 c0                	xor    eax,eax
c00110aa:	5b                   	pop    ebx
c00110ab:	5e                   	pop    esi
c00110ac:	5f                   	pop    edi
c00110ad:	c3                   	ret    

c00110ae <EnvVarContainer::setEnv(char const*, char const*)>:
c00110ae:	55                   	push   ebp
c00110af:	57                   	push   edi
c00110b0:	56                   	push   esi
c00110b1:	53                   	push   ebx
c00110b2:	83 ec 28             	sub    esp,0x28
c00110b5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00110b9:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00110bd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00110c1:	56                   	push   esi
c00110c2:	e8 a9 f4 fe ff       	call   c0000570 <strlen>
c00110c7:	40                   	inc    eax
c00110c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00110cb:	e8 ea 69 ff ff       	call   c0007aba <malloc>
c00110d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00110d7:	e8 94 f4 fe ff       	call   c0000570 <strlen>
c00110dc:	40                   	inc    eax
c00110dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00110e0:	e8 d5 69 ff ff       	call   c0007aba <malloc>
c00110e5:	89 34 24             	mov    DWORD PTR [esp],esi
c00110e8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110ec:	e8 7f f4 fe ff       	call   c0000570 <strlen>
c00110f1:	83 c4 0c             	add    esp,0xc
c00110f4:	40                   	inc    eax
c00110f5:	50                   	push   eax
c00110f6:	6a 00                	push   0x0
c00110f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00110fc:	e8 ef f3 fe ff       	call   c00004f0 <memset>
c0011101:	89 34 24             	mov    DWORD PTR [esp],esi
c0011104:	e8 67 f4 fe ff       	call   c0000570 <strlen>
c0011109:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001110d:	8d 48 01             	lea    ecx,[eax+0x1]
c0011110:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011112:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011115:	89 de                	mov    esi,ebx
c0011117:	e8 54 f4 fe ff       	call   c0000570 <strlen>
c001111c:	83 c4 0c             	add    esp,0xc
c001111f:	40                   	inc    eax
c0011120:	50                   	push   eax
c0011121:	6a 00                	push   0x0
c0011123:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011127:	e8 c4 f3 fe ff       	call   c00004f0 <memset>
c001112c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001112f:	e8 3c f4 fe ff       	call   c0000570 <strlen>
c0011134:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0011138:	8d 48 01             	lea    ecx,[eax+0x1]
c001113b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001113d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011140:	40                   	inc    eax
c0011141:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011144:	c1 e0 03             	shl    eax,0x3
c0011147:	5a                   	pop    edx
c0011148:	59                   	pop    ecx
c0011149:	50                   	push   eax
c001114a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001114d:	e8 54 69 ff ff       	call   c0007aa6 <realloc>
c0011152:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011156:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011159:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001115c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011160:	b9 08 00 00 00       	mov    ecx,0x8
c0011165:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011167:	83 c4 2c             	add    esp,0x2c
c001116a:	5b                   	pop    ebx
c001116b:	5e                   	pop    esi
c001116c:	5f                   	pop    edi
c001116d:	5d                   	pop    ebp
c001116e:	c3                   	ret    
c001116f:	90                   	nop

c0011170 <EnvVarContainer::deleteEnv(char const*)>:
c0011170:	c3                   	ret    
c0011171:	90                   	nop

c0011172 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0011172:	55                   	push   ebp
c0011173:	57                   	push   edi
c0011174:	56                   	push   esi
c0011175:	53                   	push   ebx
c0011176:	81 ec 38 01 00 00    	sub    esp,0x138
c001117c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0011183:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001118a:	68 14 01 00 00       	push   0x114
c001118f:	e8 26 69 ff ff       	call   c0007aba <malloc>
c0011194:	83 c4 0c             	add    esp,0xc
c0011197:	89 c3                	mov    ebx,eax
c0011199:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001119c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00111a3:	50                   	push   eax
c00111a4:	e8 a7 a9 ff ff       	call   c000bb50 <File::File(char const*, Process*)>
c00111a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111ac:	e8 81 ac ff ff       	call   c000be32 <File::exists()>
c00111b1:	83 c4 10             	add    esp,0x10
c00111b4:	84 c0                	test   al,al
c00111b6:	75 31                	jne    c00111e9 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00111b8:	50                   	push   eax
c00111b9:	50                   	push   eax
c00111ba:	6a 12                	push   0x12
c00111bc:	53                   	push   ebx
c00111bd:	e8 ac a9 ff ff       	call   c000bb6e <File::open(FileOpenMode)>
c00111c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111c4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00111c7:	89 34 24             	mov    DWORD PTR [esp],esi
c00111ca:	e8 a1 f3 fe ff       	call   c0000570 <strlen>
c00111cf:	5a                   	pop    edx
c00111d0:	31 d2                	xor    edx,edx
c00111d2:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00111d6:	51                   	push   ecx
c00111d7:	56                   	push   esi
c00111d8:	52                   	push   edx
c00111d9:	50                   	push   eax
c00111da:	53                   	push   ebx
c00111db:	ff d7                	call   edi
c00111dd:	83 c4 14             	add    esp,0x14
c00111e0:	53                   	push   ebx
c00111e1:	e8 e6 a9 ff ff       	call   c000bbcc <File::close()>
c00111e6:	83 c4 10             	add    esp,0x10
c00111e9:	56                   	push   esi
c00111ea:	31 f6                	xor    esi,esi
c00111ec:	68 00 01 00 00       	push   0x100
c00111f1:	6a 00                	push   0x0
c00111f3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00111f7:	50                   	push   eax
c00111f8:	e8 f3 f2 fe ff       	call   c00004f0 <memset>
c00111fd:	5f                   	pop    edi
c00111fe:	58                   	pop    eax
c00111ff:	6a 01                	push   0x1
c0011201:	53                   	push   ebx
c0011202:	e8 67 a9 ff ff       	call   c000bb6e <File::open(FileOpenMode)>
c0011207:	83 c4 10             	add    esp,0x10
c001120a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011212:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001121a:	83 ec 0c             	sub    esp,0xc
c001121d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001121f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0011223:	51                   	push   ecx
c0011224:	8d 54 24 23          	lea    edx,[esp+0x23]
c0011228:	52                   	push   edx
c0011229:	6a 00                	push   0x0
c001122b:	6a 01                	push   0x1
c001122d:	53                   	push   ebx
c001122e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011231:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0011236:	83 c4 20             	add    esp,0x20
c0011239:	89 c2                	mov    edx,eax
c001123b:	85 c0                	test   eax,eax
c001123d:	0f 84 36 01 00 00    	je     c0011379 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0011243:	83 f8 0d             	cmp    eax,0xd
c0011246:	0f 84 22 01 00 00    	je     c001136e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001124c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0011251:	0f 84 f0 00 00 00    	je     c0011347 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0011257:	83 f8 0a             	cmp    eax,0xa
c001125a:	74 13                	je     c001126f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001125c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011261:	74 0c                	je     c001126f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0011263:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011269:	0f 8e f6 00 00 00    	jle    c0011365 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c001126f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011273:	83 ec 0c             	sub    esp,0xc
c0011276:	8d 78 01             	lea    edi,[eax+0x1]
c0011279:	57                   	push   edi
c001127a:	e8 3b 68 ff ff       	call   c0007aba <malloc>
c001127f:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0011283:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011287:	8d 56 04             	lea    edx,[esi+0x4]
c001128a:	89 14 24             	mov    DWORD PTR [esp],edx
c001128d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0011291:	e8 24 68 ff ff       	call   c0007aba <malloc>
c0011296:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001129a:	83 c4 0c             	add    esp,0xc
c001129d:	57                   	push   edi
c001129e:	6a 00                	push   0x0
c00112a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00112a4:	e8 47 f2 fe ff       	call   c00004f0 <memset>
c00112a9:	8d 74 24 30          	lea    esi,[esp+0x30]
c00112ad:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00112b1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00112b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00112b7:	83 c4 0c             	add    esp,0xc
c00112ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00112be:	52                   	push   edx
c00112bf:	6a 00                	push   0x0
c00112c1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00112c5:	e8 26 f2 fe ff       	call   c00004f0 <memset>
c00112ca:	8d 74 24 30          	lea    esi,[esp+0x30]
c00112ce:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00112d2:	89 34 24             	mov    DWORD PTR [esp],esi
c00112d5:	e8 96 f2 fe ff       	call   c0000570 <strlen>
c00112da:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00112de:	89 c1                	mov    ecx,eax
c00112e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00112e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00112e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00112e8:	40                   	inc    eax
c00112e9:	83 c4 10             	add    esp,0x10
c00112ec:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00112ef:	85 d2                	test   edx,edx
c00112f1:	75 0c                	jne    c00112ff <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c00112f3:	83 ec 0c             	sub    esp,0xc
c00112f6:	6a 08                	push   0x8
c00112f8:	e8 bd 67 ff ff       	call   c0007aba <malloc>
c00112fd:	eb 0c                	jmp    c001130b <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c00112ff:	c1 e0 03             	shl    eax,0x3
c0011302:	51                   	push   ecx
c0011303:	51                   	push   ecx
c0011304:	50                   	push   eax
c0011305:	52                   	push   edx
c0011306:	e8 9b 67 ff ff       	call   c0007aa6 <realloc>
c001130b:	83 c4 10             	add    esp,0x10
c001130e:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011311:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011314:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0011317:	8d 74 24 18          	lea    esi,[esp+0x18]
c001131b:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001131f:	b9 08 00 00 00       	mov    ecx,0x8
c0011324:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011326:	31 f6                	xor    esi,esi
c0011328:	50                   	push   eax
c0011329:	68 00 01 00 00       	push   0x100
c001132e:	6a 00                	push   0x0
c0011330:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011334:	50                   	push   eax
c0011335:	e8 b6 f1 fe ff       	call   c00004f0 <memset>
c001133a:	83 c4 10             	add    esp,0x10
c001133d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011345:	eb 27                	jmp    c001136e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011347:	83 f8 3d             	cmp    eax,0x3d
c001134a:	74 1e                	je     c001136a <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c001134c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011352:	7f 07                	jg     c001135b <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0011354:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0011358:	46                   	inc    esi
c0011359:	eb 13                	jmp    c001136e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001135b:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0011363:	eb 09                	jmp    c001136e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011365:	83 f8 3d             	cmp    eax,0x3d
c0011368:	75 ea                	jne    c0011354 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c001136a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001136e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011373:	0f 85 99 fe ff ff    	jne    c0011212 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0011379:	83 ec 0c             	sub    esp,0xc
c001137c:	53                   	push   ebx
c001137d:	e8 4a a8 ff ff       	call   c000bbcc <File::close()>
c0011382:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011384:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011387:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001138a:	81 c4 3c 01 00 00    	add    esp,0x13c
c0011390:	5b                   	pop    ebx
c0011391:	5e                   	pop    esi
c0011392:	5f                   	pop    edi
c0011393:	5d                   	pop    ebp
c0011394:	c3                   	ret    
c0011395:	90                   	nop

c0011396 <EnvVarContainer::__loadSystem()>:
c0011396:	83 ec 10             	sub    esp,0x10
c0011399:	68 00 3e 02 c0       	push   0xc0023e00
c001139e:	68 e4 24 02 c0       	push   0xc00224e4
c00113a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113a7:	e8 c6 fd ff ff       	call   c0011172 <EnvVarContainer::loadFrom(char const*, char const*)>
c00113ac:	83 c4 1c             	add    esp,0x1c
c00113af:	c3                   	ret    

c00113b0 <EnvVarContainer::__loadUser()>:
c00113b0:	c3                   	ret    
c00113b1:	90                   	nop

c00113b2 <EnvVarContainer::EnvVarContainer(Process*)>:
c00113b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113b6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00113bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00113c4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00113c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00113d2:	90                   	nop
c00113d3:	c3                   	ret    

c00113d4 <EnvVarContainer::~EnvVarContainer()>:
c00113d4:	83 ec 0c             	sub    esp,0xc
c00113d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113de:	85 c0                	test   eax,eax
c00113e0:	74 1d                	je     c00113ff <EnvVarContainer::~EnvVarContainer()+0x2b>
c00113e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00113e8:	85 c0                	test   eax,eax
c00113ea:	74 13                	je     c00113ff <EnvVarContainer::~EnvVarContainer()+0x2b>
c00113ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113f3:	83 ec 0c             	sub    esp,0xc
c00113f6:	50                   	push   eax
c00113f7:	e8 ce 66 ff ff       	call   c0007aca <free>
c00113fc:	83 c4 10             	add    esp,0x10
c00113ff:	90                   	nop
c0011400:	83 c4 0c             	add    esp,0xc
c0011403:	c3                   	ret    

c0011404 <KeGetEnv(Process*, char const*)>:
c0011404:	53                   	push   ebx
c0011405:	83 ec 08             	sub    esp,0x8
c0011408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001140c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011410:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c0011416:	74 04                	je     c001141c <KeGetEnv(Process*, char const*)+0x18>
c0011418:	85 c0                	test   eax,eax
c001141a:	75 0b                	jne    c0011427 <KeGetEnv(Process*, char const*)+0x23>
c001141c:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011421:	85 c0                	test   eax,eax
c0011423:	75 19                	jne    c001143e <KeGetEnv(Process*, char const*)+0x3a>
c0011425:	eb 27                	jmp    c001144e <KeGetEnv(Process*, char const*)+0x4a>
c0011427:	52                   	push   edx
c0011428:	52                   	push   edx
c0011429:	53                   	push   ebx
c001142a:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0011430:	e8 3b fc ff ff       	call   c0011070 <EnvVarContainer::getEnv(char const*)>
c0011435:	83 c4 10             	add    esp,0x10
c0011438:	85 c0                	test   eax,eax
c001143a:	75 28                	jne    c0011464 <KeGetEnv(Process*, char const*)+0x60>
c001143c:	eb de                	jmp    c001141c <KeGetEnv(Process*, char const*)+0x18>
c001143e:	52                   	push   edx
c001143f:	52                   	push   edx
c0011440:	53                   	push   ebx
c0011441:	50                   	push   eax
c0011442:	e8 29 fc ff ff       	call   c0011070 <EnvVarContainer::getEnv(char const*)>
c0011447:	83 c4 10             	add    esp,0x10
c001144a:	85 c0                	test   eax,eax
c001144c:	75 16                	jne    c0011464 <KeGetEnv(Process*, char const*)+0x60>
c001144e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011452:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c0011457:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001145b:	83 c4 08             	add    esp,0x8
c001145e:	5b                   	pop    ebx
c001145f:	e9 0c fc ff ff       	jmp    c0011070 <EnvVarContainer::getEnv(char const*)>
c0011464:	83 c4 08             	add    esp,0x8
c0011467:	5b                   	pop    ebx
c0011468:	c3                   	ret    

c0011469 <KeSetEnvSystem(char const*, char const*)>:
c0011469:	83 ec 10             	sub    esp,0x10
c001146c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011470:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011474:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c001147a:	e8 2f fc ff ff       	call   c00110ae <EnvVarContainer::setEnv(char const*, char const*)>
c001147f:	83 c4 1c             	add    esp,0x1c
c0011482:	c3                   	ret    

c0011483 <KeSetEnvUser(char const*, char const*)>:
c0011483:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011488:	85 c0                	test   eax,eax
c001148a:	74 15                	je     c00114a1 <KeSetEnvUser(char const*, char const*)+0x1e>
c001148c:	83 ec 10             	sub    esp,0x10
c001148f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011493:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011497:	50                   	push   eax
c0011498:	e8 11 fc ff ff       	call   c00110ae <EnvVarContainer::setEnv(char const*, char const*)>
c001149d:	83 c4 1c             	add    esp,0x1c
c00114a0:	c3                   	ret    
c00114a1:	c3                   	ret    

c00114a2 <KeSetEnvProcess(Process*, char const*, char const*)>:
c00114a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114a6:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00114ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00114b0:	e9 f9 fb ff ff       	jmp    c00110ae <EnvVarContainer::setEnv(char const*, char const*)>

c00114b5 <KeDeleteEnvSystem(char const*)>:
c00114b5:	c3                   	ret    

c00114b6 <KeDeleteEnvUser(char const*)>:
c00114b6:	c3                   	ret    

c00114b7 <KeDeleteEnvProcess(Process*, char const*)>:
c00114b7:	c3                   	ret    

c00114b8 <KeNewProcessEnv(Process*)>:
c00114b8:	83 ec 28             	sub    esp,0x28
c00114bb:	6a 0c                	push   0xc
c00114bd:	e8 f8 65 ff ff       	call   c0007aba <malloc>
c00114c2:	5a                   	pop    edx
c00114c3:	59                   	pop    ecx
c00114c4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00114c8:	50                   	push   eax
c00114c9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114cd:	e8 e0 fe ff ff       	call   c00113b2 <EnvVarContainer::EnvVarContainer(Process*)>
c00114d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114d6:	83 c4 2c             	add    esp,0x2c
c00114d9:	c3                   	ret    

c00114da <KeCopyProcessEnv(Process*, Process*)>:
c00114da:	57                   	push   edi
c00114db:	56                   	push   esi
c00114dc:	53                   	push   ebx
c00114dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114e1:	83 ec 0c             	sub    esp,0xc
c00114e4:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00114ea:	6a 0c                	push   0xc
c00114ec:	e8 c9 65 ff ff       	call   c0007aba <malloc>
c00114f1:	89 c3                	mov    ebx,eax
c00114f3:	58                   	pop    eax
c00114f4:	5a                   	pop    edx
c00114f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114f9:	53                   	push   ebx
c00114fa:	e8 b3 fe ff ff       	call   c00113b2 <EnvVarContainer::EnvVarContainer(Process*)>
c00114ff:	8b 07                	mov    eax,DWORD PTR [edi]
c0011501:	89 03                	mov    DWORD PTR [ebx],eax
c0011503:	c1 e0 03             	shl    eax,0x3
c0011506:	89 04 24             	mov    DWORD PTR [esp],eax
c0011509:	e8 ac 65 ff ff       	call   c0007aba <malloc>
c001150e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0011511:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0011513:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0011516:	c1 e1 03             	shl    ecx,0x3
c0011519:	89 c7                	mov    edi,eax
c001151b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001151d:	83 c4 10             	add    esp,0x10
c0011520:	89 d8                	mov    eax,ebx
c0011522:	5b                   	pop    ebx
c0011523:	5e                   	pop    esi
c0011524:	5f                   	pop    edi
c0011525:	c3                   	ret    

c0011526 <KeLoadSystemEnv()>:
c0011526:	53                   	push   ebx
c0011527:	83 ec 14             	sub    esp,0x14
c001152a:	6a 0c                	push   0xc
c001152c:	e8 89 65 ff ff       	call   c0007aba <malloc>
c0011531:	89 c3                	mov    ebx,eax
c0011533:	58                   	pop    eax
c0011534:	5a                   	pop    edx
c0011535:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001153b:	53                   	push   ebx
c001153c:	e8 71 fe ff ff       	call   c00113b2 <EnvVarContainer::EnvVarContainer(Process*)>
c0011541:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011544:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c001154a:	e8 47 fe ff ff       	call   c0011396 <EnvVarContainer::__loadSystem()>
c001154f:	83 c4 18             	add    esp,0x18
c0011552:	5b                   	pop    ebx
c0011553:	c3                   	ret    

c0011554 <KeLoadUserEnv()>:
c0011554:	53                   	push   ebx
c0011555:	83 ec 14             	sub    esp,0x14
c0011558:	6a 0c                	push   0xc
c001155a:	e8 5b 65 ff ff       	call   c0007aba <malloc>
c001155f:	89 c3                	mov    ebx,eax
c0011561:	58                   	pop    eax
c0011562:	5a                   	pop    edx
c0011563:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011569:	53                   	push   ebx
c001156a:	e8 43 fe ff ff       	call   c00113b2 <EnvVarContainer::EnvVarContainer(Process*)>
c001156f:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c0011575:	83 c4 18             	add    esp,0x18
c0011578:	5b                   	pop    ebx
c0011579:	c3                   	ret    

c001157a <KeFlushEnv()>:
c001157a:	c3                   	ret    

c001157b <KeGetProcessTotalEnvCount(Process*)>:
c001157b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001157f:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c0011585:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001158b:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c0011590:	8b 00                	mov    eax,DWORD PTR [eax]
c0011592:	03 01                	add    eax,DWORD PTR [ecx]
c0011594:	85 d2                	test   edx,edx
c0011596:	74 02                	je     c001159a <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0011598:	03 02                	add    eax,DWORD PTR [edx]
c001159a:	c3                   	ret    

c001159b <KeGetProcessEnvPair(Process*, int)>:
c001159b:	57                   	push   edi
c001159c:	56                   	push   esi
c001159d:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c00115a3:	53                   	push   ebx
c00115a4:	85 f6                	test   esi,esi
c00115a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00115aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115ae:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00115b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00115b8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00115ba:	75 16                	jne    c00115d2 <KeGetProcessEnvPair(Process*, int)+0x37>
c00115bc:	39 c2                	cmp    edx,eax
c00115be:	7c 16                	jl     c00115d6 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00115c0:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c00115c6:	8b 31                	mov    esi,DWORD PTR [ecx]
c00115c8:	01 c6                	add    esi,eax
c00115ca:	39 d6                	cmp    esi,edx
c00115cc:	7e 3c                	jle    c001160a <KeGetProcessEnvPair(Process*, int)+0x6f>
c00115ce:	29 c2                	sub    edx,eax
c00115d0:	eb 04                	jmp    c00115d6 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00115d2:	39 c2                	cmp    edx,eax
c00115d4:	7d 05                	jge    c00115db <KeGetProcessEnvPair(Process*, int)+0x40>
c00115d6:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00115d9:	eb 20                	jmp    c00115fb <KeGetProcessEnvPair(Process*, int)+0x60>
c00115db:	8b 3e                	mov    edi,DWORD PTR [esi]
c00115dd:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00115e0:	39 d1                	cmp    ecx,edx
c00115e2:	7e 04                	jle    c00115e8 <KeGetProcessEnvPair(Process*, int)+0x4d>
c00115e4:	29 c2                	sub    edx,eax
c00115e6:	eb 10                	jmp    c00115f8 <KeGetProcessEnvPair(Process*, int)+0x5d>
c00115e8:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c00115ee:	03 0e                	add    ecx,DWORD PTR [esi]
c00115f0:	39 d1                	cmp    ecx,edx
c00115f2:	7e 16                	jle    c001160a <KeGetProcessEnvPair(Process*, int)+0x6f>
c00115f4:	29 c2                	sub    edx,eax
c00115f6:	29 fa                	sub    edx,edi
c00115f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00115fb:	8d 14 d0             	lea    edx,[eax+edx*8]
c00115fe:	8b 02                	mov    eax,DWORD PTR [edx]
c0011600:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011603:	89 03                	mov    DWORD PTR [ebx],eax
c0011605:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011608:	eb 1d                	jmp    c0011627 <KeGetProcessEnvPair(Process*, int)+0x8c>
c001160a:	83 ec 0c             	sub    esp,0xc
c001160d:	68 06 25 02 c0       	push   0xc0022506
c0011612:	e8 ac 00 00 00       	call   c00116c3 <KePanic(char const*)>
c0011617:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001161d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011624:	83 c4 10             	add    esp,0x10
c0011627:	89 d8                	mov    eax,ebx
c0011629:	5b                   	pop    ebx
c001162a:	5e                   	pop    esi
c001162b:	5f                   	pop    edi
c001162c:	c2 04 00             	ret    0x4

c001162f <CPU::current()>:
c001162f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011634:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001163a:	c3                   	ret    

c001163b <operator new(unsigned long)>:
c001163b:	e9 7a 64 ff ff       	jmp    c0007aba <malloc>

c0011640 <operator delete(void*)>:
c0011640:	e9 95 64 ff ff       	jmp    c0007ada <rfree>

c0011645 <disableIRQs()>:
c0011645:	fa                   	cli    
c0011646:	c3                   	ret    

c0011647 <enableIRQs()>:
c0011647:	fb                   	sti    
c0011648:	c3                   	ret    

c0011649 <lockScheduler()>:
c0011649:	fa                   	cli    
c001164a:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0011650:	c3                   	ret    

c0011651 <unlockScheduler()>:
c0011651:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0011656:	48                   	dec    eax
c0011657:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001165c:	75 01                	jne    c001165f <unlockScheduler()+0xe>
c001165e:	fb                   	sti    
c001165f:	c3                   	ret    

c0011660 <lockStuff()>:
c0011660:	fa                   	cli    
c0011661:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0011667:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c001166d:	c3                   	ret    

c001166e <unlockStuff()>:
c001166e:	83 ec 0c             	sub    esp,0xc
c0011671:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0011676:	48                   	dec    eax
c0011677:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c001167c:	75 18                	jne    c0011696 <unlockStuff()+0x28>
c001167e:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0011685:	74 0f                	je     c0011696 <unlockStuff()+0x28>
c0011687:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0011691:	e8 12 4b 00 00       	call   c00161a8 <schedule()>
c0011696:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001169b:	48                   	dec    eax
c001169c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00116a1:	75 01                	jne    c00116a4 <unlockStuff()+0x36>
c00116a3:	fb                   	sti    
c00116a4:	83 c4 0c             	add    esp,0xc
c00116a7:	c3                   	ret    

c00116a8 <Virt::getAKernelVAS()>:
c00116a8:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c00116ad:	c3                   	ret    

c00116ae <__not_memcpy>:
c00116ae:	57                   	push   edi
c00116af:	56                   	push   esi
c00116b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116b4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00116b8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00116bc:	89 c7                	mov    edi,eax
c00116be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00116c0:	5e                   	pop    esi
c00116c1:	5f                   	pop    edi
c00116c2:	c3                   	ret    

c00116c3 <KePanic(char const*)>:
c00116c3:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c00116ca:	e9 7f 6a 00 00       	jmp    c001814e <HalPanic(char const*)>

c00116cf <KePowerThread(void*)>:
c00116cf:	83 ec 0c             	sub    esp,0xc
c00116d2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00116d7:	48                   	dec    eax
c00116d8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00116dd:	75 01                	jne    c00116e0 <KePowerThread(void*)+0x11>
c00116df:	fb                   	sti    
c00116e0:	83 ec 0c             	sub    esp,0xc
c00116e3:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c00116ea:	6a 0a                	push   0xa
c00116ec:	e8 fb 4d 00 00       	call   c00164ec <sleep(unsigned int)>
c00116f1:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c00116f8:	83 c4 10             	add    esp,0x10
c00116fb:	eb e3                	jmp    c00116e0 <KePowerThread(void*)+0x11>

c00116fd <KeChangePowerSettings(PowerSettings)>:
c00116fd:	57                   	push   edi
c00116fe:	b9 09 00 00 00       	mov    ecx,0x9
c0011703:	56                   	push   esi
c0011704:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c0011709:	fc                   	cld    
c001170a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001170e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011710:	5e                   	pop    esi
c0011711:	5f                   	pop    edi
c0011712:	c3                   	ret    

c0011713 <KeUserIOReceived()>:
c0011713:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c001171d:	c3                   	ret    

c001171e <KeHandlePowerButton()>:
c001171e:	83 ec 0c             	sub    esp,0xc
c0011721:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c0011726:	83 f8 02             	cmp    eax,0x2
c0011729:	75 10                	jne    c001173b <KeHandlePowerButton()+0x1d>
c001172b:	83 ec 0c             	sub    esp,0xc
c001172e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011734:	e8 f3 59 ff ff       	call   c000712c <Computer::shutdown()>
c0011739:	eb 11                	jmp    c001174c <KeHandlePowerButton()+0x2e>
c001173b:	48                   	dec    eax
c001173c:	75 11                	jne    c001174f <KeHandlePowerButton()+0x31>
c001173e:	83 ec 0c             	sub    esp,0xc
c0011741:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011747:	e8 10 5a ff ff       	call   c000715c <Computer::sleep()>
c001174c:	83 c4 10             	add    esp,0x10
c001174f:	83 c4 0c             	add    esp,0xc
c0011752:	c3                   	ret    

c0011753 <KeHandleSleepButton()>:
c0011753:	83 ec 0c             	sub    esp,0xc
c0011756:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c001175b:	83 f8 02             	cmp    eax,0x2
c001175e:	75 10                	jne    c0011770 <KeHandleSleepButton()+0x1d>
c0011760:	83 ec 0c             	sub    esp,0xc
c0011763:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011769:	e8 be 59 ff ff       	call   c000712c <Computer::shutdown()>
c001176e:	eb 11                	jmp    c0011781 <KeHandleSleepButton()+0x2e>
c0011770:	48                   	dec    eax
c0011771:	75 11                	jne    c0011784 <KeHandleSleepButton()+0x31>
c0011773:	83 ec 0c             	sub    esp,0xc
c0011776:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001177c:	e8 db 59 ff ff       	call   c000715c <Computer::sleep()>
c0011781:	83 c4 10             	add    esp,0x10
c0011784:	83 c4 0c             	add    esp,0xc
c0011787:	c3                   	ret    

c0011788 <KeSetupPowerManager()>:
c0011788:	83 ec 0c             	sub    esp,0xc
c001178b:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011795:	68 f0 00 00 00       	push   0xf0
c001179a:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c00117a1:	6a 00                	push   0x0
c00117a3:	68 cf 16 01 c0       	push   0xc00116cf
c00117a8:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00117ae:	e8 a5 47 00 00       	call   c0015f58 <Process::createThread(void (*)(void*), void*, int)>
c00117b3:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c00117bd:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c00117c7:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c00117d1:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c00117db:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c00117e5:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c00117ef:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c00117f9:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c0011803:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c001180d:	83 c4 1c             	add    esp,0x1c
c0011810:	c3                   	ret    

c0011811 <KeRand()>:
c0011811:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c001181b:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c0011825:	53                   	push   ebx
c0011826:	01 c1                	add    ecx,eax
c0011828:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c001182d:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c0011833:	01 ca                	add    edx,ecx
c0011835:	05 ef 04 b5 00       	add    eax,0xb504ef
c001183a:	83 d2 00             	adc    edx,0x0
c001183d:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c0011842:	0f b7 da             	movzx  ebx,dx
c0011845:	89 da                	mov    edx,ebx
c0011847:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c001184d:	0f ac d0 0e          	shrd   eax,edx,0xe
c0011851:	5b                   	pop    ebx
c0011852:	c3                   	ret    

c0011853 <KeSeedRand(unsigned int)>:
c0011853:	53                   	push   ebx
c0011854:	83 ec 08             	sub    esp,0x8
c0011857:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001185b:	e8 0d 6c 00 00       	call   c001846d <HalGetRand()>
c0011860:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c001186a:	31 d8                	xor    eax,ebx
c001186c:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c0011871:	e8 9b ff ff ff       	call   c0011811 <KeRand()>
c0011876:	83 c4 08             	add    esp,0x8
c0011879:	5b                   	pop    ebx
c001187a:	eb 95                	jmp    c0011811 <KeRand()>

c001187c <KeInitRand()>:
c001187c:	83 ec 0c             	sub    esp,0xc
c001187f:	e8 de 69 00 00       	call   c0018262 <HalQueryPerformanceCounter()>
c0011884:	0f 20 da             	mov    edx,cr3
c0011887:	0f 22 da             	mov    cr3,edx
c001188a:	0f 20 da             	mov    edx,cr3
c001188d:	0f 22 da             	mov    cr3,edx
c0011890:	0f 20 da             	mov    edx,cr3
c0011893:	0f 22 da             	mov    cr3,edx
c0011896:	0f 20 da             	mov    edx,cr3
c0011899:	0f 22 da             	mov    cr3,edx
c001189c:	83 ec 0c             	sub    esp,0xc
c001189f:	35 03 8a 95 38       	xor    eax,0x38958a03
c00118a4:	50                   	push   eax
c00118a5:	e8 a9 ff ff ff       	call   c0011853 <KeSeedRand(unsigned int)>
c00118aa:	83 c4 1c             	add    esp,0x1c
c00118ad:	c3                   	ret    
c00118ae:	66 90                	xchg   ax,ax

c00118b0 <KeResolveCompatibilitySymbol(char*)>:
c00118b0:	83 ec 0c             	sub    esp,0xc
c00118b3:	83 ec 08             	sub    esp,0x8
c00118b6:	68 20 25 02 c0       	push   0xc0022520
c00118bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118bf:	e8 8c ee fe ff       	call   c0000750 <strcmp>
c00118c4:	83 c4 10             	add    esp,0x10
c00118c7:	85 c0                	test   eax,eax
c00118c9:	0f 94 c0             	sete   al
c00118cc:	0f b6 c0             	movzx  eax,al
c00118cf:	85 c0                	test   eax,eax
c00118d1:	74 0d                	je     c00118e0 <KeResolveCompatibilitySymbol(char*)+0x30>
c00118d3:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c00118d8:	e9 8b 01 00 00       	jmp    c0011a68 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118dd:	8d 76 00             	lea    esi,[esi+0x0]
c00118e0:	83 ec 08             	sub    esp,0x8
c00118e3:	68 29 25 02 c0       	push   0xc0022529
c00118e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118ec:	e8 5f ee fe ff       	call   c0000750 <strcmp>
c00118f1:	83 c4 10             	add    esp,0x10
c00118f4:	85 c0                	test   eax,eax
c00118f6:	0f 94 c0             	sete   al
c00118f9:	0f b6 c0             	movzx  eax,al
c00118fc:	85 c0                	test   eax,eax
c00118fe:	74 0c                	je     c001190c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011900:	b8 20 f8 01 c0       	mov    eax,0xc001f820
c0011905:	e9 5e 01 00 00       	jmp    c0011a68 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001190a:	66 90                	xchg   ax,ax
c001190c:	83 ec 08             	sub    esp,0x8
c001190f:	68 33 25 02 c0       	push   0xc0022533
c0011914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011918:	e8 33 ee fe ff       	call   c0000750 <strcmp>
c001191d:	83 c4 10             	add    esp,0x10
c0011920:	85 c0                	test   eax,eax
c0011922:	0f 94 c0             	sete   al
c0011925:	0f b6 c0             	movzx  eax,al
c0011928:	85 c0                	test   eax,eax
c001192a:	74 0c                	je     c0011938 <KeResolveCompatibilitySymbol(char*)+0x88>
c001192c:	b8 54 f5 01 c0       	mov    eax,0xc001f554
c0011931:	e9 32 01 00 00       	jmp    c0011a68 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011936:	66 90                	xchg   ax,ax
c0011938:	83 ec 08             	sub    esp,0x8
c001193b:	68 3c 25 02 c0       	push   0xc002253c
c0011940:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011944:	e8 07 ee fe ff       	call   c0000750 <strcmp>
c0011949:	83 c4 10             	add    esp,0x10
c001194c:	85 c0                	test   eax,eax
c001194e:	0f 94 c0             	sete   al
c0011951:	0f b6 c0             	movzx  eax,al
c0011954:	85 c0                	test   eax,eax
c0011956:	74 0c                	je     c0011964 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011958:	b8 c3 16 01 c0       	mov    eax,0xc00116c3
c001195d:	e9 06 01 00 00       	jmp    c0011a68 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011962:	66 90                	xchg   ax,ax
c0011964:	83 ec 08             	sub    esp,0x8
c0011967:	68 4f 25 02 c0       	push   0xc002254f
c001196c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011970:	e8 db ed fe ff       	call   c0000750 <strcmp>
c0011975:	83 c4 10             	add    esp,0x10
c0011978:	85 c0                	test   eax,eax
c001197a:	0f 94 c0             	sete   al
c001197d:	0f b6 c0             	movzx  eax,al
c0011980:	85 c0                	test   eax,eax
c0011982:	74 0c                	je     c0011990 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011984:	b8 c3 0f 01 c0       	mov    eax,0xc0010fc3
c0011989:	e9 da 00 00 00       	jmp    c0011a68 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001198e:	66 90                	xchg   ax,ax
c0011990:	83 ec 08             	sub    esp,0x8
c0011993:	68 6c 25 02 c0       	push   0xc002256c
c0011998:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001199c:	e8 af ed fe ff       	call   c0000750 <strcmp>
c00119a1:	83 c4 10             	add    esp,0x10
c00119a4:	85 c0                	test   eax,eax
c00119a6:	0f 94 c0             	sete   al
c00119a9:	0f b6 c0             	movzx  eax,al
c00119ac:	85 c0                	test   eax,eax
c00119ae:	74 0c                	je     c00119bc <KeResolveCompatibilitySymbol(char*)+0x10c>
c00119b0:	b8 20 f9 01 c0       	mov    eax,0xc001f920
c00119b5:	e9 ae 00 00 00       	jmp    c0011a68 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119ba:	66 90                	xchg   ax,ax
c00119bc:	83 ec 08             	sub    esp,0x8
c00119bf:	68 76 25 02 c0       	push   0xc0022576
c00119c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119c8:	e8 83 ed fe ff       	call   c0000750 <strcmp>
c00119cd:	83 c4 10             	add    esp,0x10
c00119d0:	85 c0                	test   eax,eax
c00119d2:	0f 94 c0             	sete   al
c00119d5:	0f b6 c0             	movzx  eax,al
c00119d8:	85 c0                	test   eax,eax
c00119da:	74 0c                	je     c00119e8 <KeResolveCompatibilitySymbol(char*)+0x138>
c00119dc:	b8 a0 f6 01 c0       	mov    eax,0xc001f6a0
c00119e1:	e9 82 00 00 00       	jmp    c0011a68 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119e6:	66 90                	xchg   ax,ax
c00119e8:	83 ec 08             	sub    esp,0x8
c00119eb:	68 7f 25 02 c0       	push   0xc002257f
c00119f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119f4:	e8 57 ed fe ff       	call   c0000750 <strcmp>
c00119f9:	83 c4 10             	add    esp,0x10
c00119fc:	85 c0                	test   eax,eax
c00119fe:	0f 94 c0             	sete   al
c0011a01:	0f b6 c0             	movzx  eax,al
c0011a04:	85 c0                	test   eax,eax
c0011a06:	74 08                	je     c0011a10 <KeResolveCompatibilitySymbol(char*)+0x160>
c0011a08:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011a0d:	eb 59                	jmp    c0011a68 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011a0f:	90                   	nop
c0011a10:	83 ec 08             	sub    esp,0x8
c0011a13:	68 97 25 02 c0       	push   0xc0022597
c0011a18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a1c:	e8 2f ed fe ff       	call   c0000750 <strcmp>
c0011a21:	83 c4 10             	add    esp,0x10
c0011a24:	85 c0                	test   eax,eax
c0011a26:	0f 94 c0             	sete   al
c0011a29:	0f b6 c0             	movzx  eax,al
c0011a2c:	85 c0                	test   eax,eax
c0011a2e:	74 08                	je     c0011a38 <KeResolveCompatibilitySymbol(char*)+0x188>
c0011a30:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011a35:	eb 31                	jmp    c0011a68 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011a37:	90                   	nop
c0011a38:	83 ec 08             	sub    esp,0x8
c0011a3b:	68 a4 25 02 c0       	push   0xc00225a4
c0011a40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a44:	e8 07 ed fe ff       	call   c0000750 <strcmp>
c0011a49:	83 c4 10             	add    esp,0x10
c0011a4c:	85 c0                	test   eax,eax
c0011a4e:	0f 94 c0             	sete   al
c0011a51:	0f b6 c0             	movzx  eax,al
c0011a54:	85 c0                	test   eax,eax
c0011a56:	74 08                	je     c0011a60 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011a58:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c0011a5d:	eb 09                	jmp    c0011a68 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011a5f:	90                   	nop
c0011a60:	b8 00 00 00 00       	mov    eax,0x0
c0011a65:	8d 76 00             	lea    esi,[esi+0x0]
c0011a68:	83 c4 0c             	add    esp,0xc
c0011a6b:	c3                   	ret    

c0011a6c <KiSigKill(int)>:
c0011a6c:	83 ec 0c             	sub    esp,0xc
c0011a6f:	6a 00                	push   0x0
c0011a71:	6a 00                	push   0x0
c0011a73:	6a ff                	push   0xffffffff
c0011a75:	6a 01                	push   0x1
c0011a77:	e8 d6 35 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a7c:	83 c4 1c             	add    esp,0x1c
c0011a7f:	c3                   	ret    

c0011a80 <KiDefaultSignalHandlerIgnore(int)>:
c0011a80:	c3                   	ret    

c0011a81 <KiDefaultSignalHandlerPause(int)>:
c0011a81:	57                   	push   edi
c0011a82:	b9 07 00 00 00       	mov    ecx,0x7
c0011a87:	56                   	push   esi
c0011a88:	be ed 25 02 c0       	mov    esi,0xc00225ed
c0011a8d:	83 ec 24             	sub    esp,0x24
c0011a90:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011a94:	fc                   	cld    
c0011a95:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011a97:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011a9b:	50                   	push   eax
c0011a9c:	6a 00                	push   0x0
c0011a9e:	6a 00                	push   0x0
c0011aa0:	6a 27                	push   0x27
c0011aa2:	e8 ab 35 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011aa7:	83 c4 34             	add    esp,0x34
c0011aaa:	5e                   	pop    esi
c0011aab:	5f                   	pop    edi
c0011aac:	c3                   	ret    

c0011aad <KiDefaultSignalHandlerResume(int)>:
c0011aad:	57                   	push   edi
c0011aae:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011ab3:	56                   	push   esi
c0011ab4:	be 09 26 02 c0       	mov    esi,0xc0022609
c0011ab9:	83 ec 24             	sub    esp,0x24
c0011abc:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011ac0:	fc                   	cld    
c0011ac1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011ac3:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011ac7:	50                   	push   eax
c0011ac8:	6a 00                	push   0x0
c0011aca:	6a 00                	push   0x0
c0011acc:	6a 27                	push   0x27
c0011ace:	e8 7f 35 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011ad3:	83 c4 34             	add    esp,0x34
c0011ad6:	5e                   	pop    esi
c0011ad7:	5f                   	pop    edi
c0011ad8:	c3                   	ret    

c0011ad9 <KeDeinitSignals(SigHandlerBlock*)>:
c0011ad9:	e9 ec 5f ff ff       	jmp    c0007aca <free>

c0011ade <KeInitSignals()>:
c0011ade:	53                   	push   ebx
c0011adf:	83 ec 14             	sub    esp,0x14
c0011ae2:	68 c8 00 00 00       	push   0xc8
c0011ae7:	e8 ce 5f ff ff       	call   c0007aba <malloc>
c0011aec:	83 c4 0c             	add    esp,0xc
c0011aef:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011af9:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011b03:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011b0a:	89 c3                	mov    ebx,eax
c0011b0c:	6a 20                	push   0x20
c0011b0e:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011b14:	6a 00                	push   0x0
c0011b16:	50                   	push   eax
c0011b17:	e8 d4 e9 fe ff       	call   c00004f0 <memset>
c0011b1c:	83 c4 0c             	add    esp,0xc
c0011b1f:	6a 44                	push   0x44
c0011b21:	6a 00                	push   0x0
c0011b23:	53                   	push   ebx
c0011b24:	e8 c7 e9 fe ff       	call   c00004f0 <memset>
c0011b29:	89 d8                	mov    eax,ebx
c0011b2b:	83 c4 18             	add    esp,0x18
c0011b2e:	5b                   	pop    ebx
c0011b2f:	c3                   	ret    

c0011b30 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011b30:	53                   	push   ebx
c0011b31:	b8 01 00 00 00       	mov    eax,0x1
c0011b36:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011b3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b3e:	83 f9 10             	cmp    ecx,0x10
c0011b41:	7f 21                	jg     c0011b64 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011b43:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b4a:	89 03                	mov    DWORD PTR [ebx],eax
c0011b4c:	b8 01 00 00 00       	mov    eax,0x1
c0011b51:	d3 e0                	shl    eax,cl
c0011b53:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011b57:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011b5a:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011b62:	31 c0                	xor    eax,eax
c0011b64:	5b                   	pop    ebx
c0011b65:	c3                   	ret    

c0011b66 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011b66:	55                   	push   ebp
c0011b67:	57                   	push   edi
c0011b68:	bf 08 00 00 00       	mov    edi,0x8
c0011b6d:	56                   	push   esi
c0011b6e:	53                   	push   ebx
c0011b6f:	83 ec 18             	sub    esp,0x18
c0011b72:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011b76:	68 26 26 02 c0       	push   0xc0022626
c0011b7b:	e8 c9 8d ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0011b80:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011b87:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011b8d:	83 c4 10             	add    esp,0x10
c0011b90:	31 c9                	xor    ecx,ecx
c0011b92:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011b96:	99                   	cdq    
c0011b97:	f7 ff                	idiv   edi
c0011b99:	8d 42 24             	lea    eax,[edx+0x24]
c0011b9c:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011ba0:	85 f6                	test   esi,esi
c0011ba2:	75 1a                	jne    c0011bbe <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011ba4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011ba8:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011bac:	50                   	push   eax
c0011bad:	50                   	push   eax
c0011bae:	52                   	push   edx
c0011baf:	68 37 26 02 c0       	push   0xc0022637
c0011bb4:	e8 90 8d ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0011bb9:	83 c4 10             	add    esp,0x10
c0011bbc:	eb 1b                	jmp    c0011bd9 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011bbe:	41                   	inc    ecx
c0011bbf:	83 f9 08             	cmp    ecx,0x8
c0011bc2:	75 ce                	jne    c0011b92 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011bc4:	83 ec 0c             	sub    esp,0xc
c0011bc7:	be 01 00 00 00       	mov    esi,0x1
c0011bcc:	68 58 26 02 c0       	push   0xc0022658
c0011bd1:	e8 73 8d ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0011bd6:	83 c4 10             	add    esp,0x10
c0011bd9:	83 c4 0c             	add    esp,0xc
c0011bdc:	89 f0                	mov    eax,esi
c0011bde:	5b                   	pop    ebx
c0011bdf:	5e                   	pop    esi
c0011be0:	5f                   	pop    edi
c0011be1:	5d                   	pop    ebp
c0011be2:	c3                   	ret    

c0011be3 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011be3:	55                   	push   ebp
c0011be4:	57                   	push   edi
c0011be5:	56                   	push   esi
c0011be6:	53                   	push   ebx
c0011be7:	51                   	push   ecx
c0011be8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011bec:	85 db                	test   ebx,ebx
c0011bee:	0f 84 bc 00 00 00    	je     c0011cb0 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011bf4:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011bfb:	0f 84 af 00 00 00    	je     c0011cb0 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011c01:	31 c9                	xor    ecx,ecx
c0011c03:	bf 08 00 00 00       	mov    edi,0x8
c0011c08:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011c0e:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011c11:	99                   	cdq    
c0011c12:	f7 ff                	idiv   edi
c0011c14:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011c1b:	85 ed                	test   ebp,ebp
c0011c1d:	0f 84 9e 00 00 00    	je     c0011cc1 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011c23:	89 e9                	mov    ecx,ebp
c0011c25:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011c2b:	bf 01 00 00 00       	mov    edi,0x1
c0011c30:	89 04 24             	mov    DWORD PTR [esp],eax
c0011c33:	d3 e7                	shl    edi,cl
c0011c35:	31 c9                	xor    ecx,ecx
c0011c37:	b8 01 00 00 00       	mov    eax,0x1
c0011c3c:	d3 e0                	shl    eax,cl
c0011c3e:	85 04 24             	test   DWORD PTR [esp],eax
c0011c41:	74 06                	je     c0011c49 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011c43:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011c47:	75 67                	jne    c0011cb0 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011c49:	41                   	inc    ecx
c0011c4a:	83 f9 11             	cmp    ecx,0x11
c0011c4d:	75 e8                	jne    c0011c37 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011c4f:	46                   	inc    esi
c0011c50:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011c53:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011c59:	09 f8                	or     eax,edi
c0011c5b:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011c66:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011c6c:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011c73:	31 c0                	xor    eax,eax
c0011c75:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011c7d:	74 09                	je     c0011c88 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011c7f:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011c86:	eb 06                	jmp    c0011c8e <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011c88:	40                   	inc    eax
c0011c89:	83 f8 08             	cmp    eax,0x8
c0011c8c:	75 e7                	jne    c0011c75 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011c8e:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011c91:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011c95:	83 fd 09             	cmp    ebp,0x9
c0011c98:	89 2a                	mov    DWORD PTR [edx],ebp
c0011c9a:	75 07                	jne    c0011ca3 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011c9c:	b8 6c 1a 01 c0       	mov    eax,0xc0011a6c
c0011ca1:	eb 31                	jmp    c0011cd4 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011ca3:	83 f8 01             	cmp    eax,0x1
c0011ca6:	75 0c                	jne    c0011cb4 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011ca8:	f7 d7                	not    edi
c0011caa:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011cb0:	31 c0                	xor    eax,eax
c0011cb2:	eb 20                	jmp    c0011cd4 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011cb4:	85 c0                	test   eax,eax
c0011cb6:	75 1c                	jne    c0011cd4 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011cb8:	8b 04 ad 60 3e 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc1a0]
c0011cbf:	eb 13                	jmp    c0011cd4 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011cc1:	46                   	inc    esi
c0011cc2:	41                   	inc    ecx
c0011cc3:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011cc9:	83 f9 08             	cmp    ecx,0x8
c0011ccc:	0f 85 36 ff ff ff    	jne    c0011c08 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011cd2:	eb dc                	jmp    c0011cb0 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011cd4:	5a                   	pop    edx
c0011cd5:	5b                   	pop    ebx
c0011cd6:	5e                   	pop    esi
c0011cd7:	5f                   	pop    edi
c0011cd8:	5d                   	pop    ebp
c0011cd9:	c3                   	ret    

c0011cda <KiCheckSignalZ>:
c0011cda:	83 ec 10             	sub    esp,0x10
c0011cdd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011ce1:	50                   	push   eax
c0011ce2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ce7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cea:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011cf0:	e8 ee fe ff ff       	call   c0011be3 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011cf5:	5a                   	pop    edx
c0011cf6:	31 d2                	xor    edx,edx
c0011cf8:	59                   	pop    ecx
c0011cf9:	85 c0                	test   eax,eax
c0011cfb:	74 19                	je     c0011d16 <KiCheckSignalZ+0x3c>
c0011cfd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011d03:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011d06:	89 02                	mov    DWORD PTR [edx],eax
c0011d08:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d13:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011d16:	89 d0                	mov    eax,edx
c0011d18:	83 c4 10             	add    esp,0x10
c0011d1b:	c3                   	ret    

c0011d1c <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011d1c:	56                   	push   esi
c0011d1d:	53                   	push   ebx
c0011d1e:	bb 01 00 00 00       	mov    ebx,0x1
c0011d23:	52                   	push   edx
c0011d24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011d28:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d2c:	d3 e3                	shl    ebx,cl
c0011d2e:	83 f9 10             	cmp    ecx,0x10
c0011d31:	7f 08                	jg     c0011d3b <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011d33:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011d39:	75 10                	jne    c0011d4b <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011d3b:	83 ec 0c             	sub    esp,0xc
c0011d3e:	68 69 26 02 c0       	push   0xc0022669
c0011d43:	e8 7b f9 ff ff       	call   c00116c3 <KePanic(char const*)>
c0011d48:	83 c4 10             	add    esp,0x10
c0011d4b:	f7 d3                	not    ebx
c0011d4d:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011d53:	58                   	pop    eax
c0011d54:	5b                   	pop    ebx
c0011d55:	5e                   	pop    esi
c0011d56:	c3                   	ret    

c0011d57 <KiFinishSignalZ>:
c0011d57:	53                   	push   ebx
c0011d58:	83 ec 10             	sub    esp,0x10
c0011d5b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011d5f:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011d62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d67:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d6a:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011d70:	e8 a7 ff ff ff       	call   c0011d1c <KeCompleteSignal(SigHandlerBlock*, int)>
c0011d75:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011d7b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011d82:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011d89:	83 c4 18             	add    esp,0x18
c0011d8c:	5b                   	pop    ebx
c0011d8d:	c3                   	ret    

c0011d8e <SysSeekDir(regs*)>:
c0011d8e:	31 c0                	xor    eax,eax
c0011d90:	31 d2                	xor    edx,edx
c0011d92:	c3                   	ret    

c0011d93 <SysTellDir(regs*)>:
c0011d93:	31 c0                	xor    eax,eax
c0011d95:	31 d2                	xor    edx,edx
c0011d97:	c3                   	ret    

c0011d98 <SysVerify(regs*)>:
c0011d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d9c:	31 d2                	xor    edx,edx
c0011d9e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011da1:	c3                   	ret    

c0011da2 <SysGetArgc(regs*)>:
c0011da2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011da7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011daa:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011db0:	89 c2                	mov    edx,eax
c0011db2:	c1 fa 1f             	sar    edx,0x1f
c0011db5:	c3                   	ret    

c0011db6 <SysTTYName(regs*)>:
c0011db6:	b8 01 00 00 00       	mov    eax,0x1
c0011dbb:	31 d2                	xor    edx,edx
c0011dbd:	c3                   	ret    

c0011dbe <SysFormatDisk(regs*)>:
c0011dbe:	56                   	push   esi
c0011dbf:	53                   	push   ebx
c0011dc0:	83 ec 04             	sub    esp,0x4
c0011dc3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011dc7:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011dcd:	eb 28                	jmp    c0011df7 <SysFormatDisk(regs*)+0x39>
c0011dcf:	83 ec 0c             	sub    esp,0xc
c0011dd2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011dd5:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011dd8:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011dda:	51                   	push   ecx
c0011ddb:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011dde:	51                   	push   ecx
c0011ddf:	50                   	push   eax
c0011de0:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011de7:	50                   	push   eax
c0011de8:	53                   	push   ebx
c0011de9:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011dec:	83 c4 20             	add    esp,0x20
c0011def:	83 f8 08             	cmp    eax,0x8
c0011df2:	75 14                	jne    c0011e08 <SysFormatDisk(regs*)+0x4a>
c0011df4:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011df7:	85 db                	test   ebx,ebx
c0011df9:	75 d4                	jne    c0011dcf <SysFormatDisk(regs*)+0x11>
c0011dfb:	83 c4 04             	add    esp,0x4
c0011dfe:	b8 03 00 00 00       	mov    eax,0x3
c0011e03:	31 d2                	xor    edx,edx
c0011e05:	5b                   	pop    ebx
c0011e06:	5e                   	pop    esi
c0011e07:	c3                   	ret    
c0011e08:	85 c0                	test   eax,eax
c0011e0a:	74 1f                	je     c0011e2b <SysFormatDisk(regs*)+0x6d>
c0011e0c:	83 f8 09             	cmp    eax,0x9
c0011e0f:	74 0d                	je     c0011e1e <SysFormatDisk(regs*)+0x60>
c0011e11:	83 c4 04             	add    esp,0x4
c0011e14:	b8 02 00 00 00       	mov    eax,0x2
c0011e19:	31 d2                	xor    edx,edx
c0011e1b:	5b                   	pop    ebx
c0011e1c:	5e                   	pop    esi
c0011e1d:	c3                   	ret    
c0011e1e:	83 c4 04             	add    esp,0x4
c0011e21:	b8 01 00 00 00       	mov    eax,0x1
c0011e26:	31 d2                	xor    edx,edx
c0011e28:	5b                   	pop    ebx
c0011e29:	5e                   	pop    esi
c0011e2a:	c3                   	ret    
c0011e2b:	83 c4 04             	add    esp,0x4
c0011e2e:	31 c0                	xor    eax,eax
c0011e30:	31 d2                	xor    edx,edx
c0011e32:	5b                   	pop    ebx
c0011e33:	5e                   	pop    esi
c0011e34:	c3                   	ret    

c0011e35 <SysSetDiskVolumeLabel(regs*)>:
c0011e35:	56                   	push   esi
c0011e36:	53                   	push   ebx
c0011e37:	83 ec 04             	sub    esp,0x4
c0011e3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011e3e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011e41:	83 f8 19             	cmp    eax,0x19
c0011e44:	77 33                	ja     c0011e79 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e46:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011e4d:	85 c9                	test   ecx,ecx
c0011e4f:	74 28                	je     c0011e79 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e51:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011e54:	85 db                	test   ebx,ebx
c0011e56:	74 21                	je     c0011e79 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e58:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011e5e:	85 d2                	test   edx,edx
c0011e60:	74 17                	je     c0011e79 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e62:	8b 32                	mov    esi,DWORD PTR [edx]
c0011e64:	53                   	push   ebx
c0011e65:	50                   	push   eax
c0011e66:	51                   	push   ecx
c0011e67:	52                   	push   edx
c0011e68:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011e6b:	83 c4 10             	add    esp,0x10
c0011e6e:	89 c2                	mov    edx,eax
c0011e70:	83 c4 04             	add    esp,0x4
c0011e73:	c1 fa 1f             	sar    edx,0x1f
c0011e76:	5b                   	pop    ebx
c0011e77:	5e                   	pop    esi
c0011e78:	c3                   	ret    
c0011e79:	83 c4 04             	add    esp,0x4
c0011e7c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011e81:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e86:	5b                   	pop    ebx
c0011e87:	5e                   	pop    esi
c0011e88:	c3                   	ret    

c0011e89 <SysGetDiskVolumeLabel(regs*)>:
c0011e89:	57                   	push   edi
c0011e8a:	56                   	push   esi
c0011e8b:	53                   	push   ebx
c0011e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e90:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011e93:	83 fa 19             	cmp    edx,0x19
c0011e96:	77 3c                	ja     c0011ed4 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e98:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011e9f:	85 c9                	test   ecx,ecx
c0011ea1:	74 31                	je     c0011ed4 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ea3:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011ea6:	85 db                	test   ebx,ebx
c0011ea8:	74 2a                	je     c0011ed4 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011eaa:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011ead:	85 f6                	test   esi,esi
c0011eaf:	74 23                	je     c0011ed4 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011eb1:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011eb7:	85 c0                	test   eax,eax
c0011eb9:	74 19                	je     c0011ed4 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ebb:	83 ec 0c             	sub    esp,0xc
c0011ebe:	8b 38                	mov    edi,DWORD PTR [eax]
c0011ec0:	56                   	push   esi
c0011ec1:	53                   	push   ebx
c0011ec2:	52                   	push   edx
c0011ec3:	51                   	push   ecx
c0011ec4:	50                   	push   eax
c0011ec5:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011ec8:	83 c4 20             	add    esp,0x20
c0011ecb:	89 c2                	mov    edx,eax
c0011ecd:	5b                   	pop    ebx
c0011ece:	c1 fa 1f             	sar    edx,0x1f
c0011ed1:	5e                   	pop    esi
c0011ed2:	5f                   	pop    edi
c0011ed3:	c3                   	ret    
c0011ed4:	5b                   	pop    ebx
c0011ed5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011eda:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011edf:	5e                   	pop    esi
c0011ee0:	5f                   	pop    edi
c0011ee1:	c3                   	ret    

c0011ee2 <SysShutdown(regs*)>:
c0011ee2:	83 ec 0c             	sub    esp,0xc
c0011ee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ee9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011eec:	85 c0                	test   eax,eax
c0011eee:	74 18                	je     c0011f08 <SysShutdown(regs*)+0x26>
c0011ef0:	83 f8 01             	cmp    eax,0x1
c0011ef3:	74 38                	je     c0011f2d <SysShutdown(regs*)+0x4b>
c0011ef5:	83 f8 02             	cmp    eax,0x2
c0011ef8:	74 24                	je     c0011f1e <SysShutdown(regs*)+0x3c>
c0011efa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011eff:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f04:	83 c4 0c             	add    esp,0xc
c0011f07:	c3                   	ret    
c0011f08:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011f0d:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f0f:	6a 00                	push   0x0
c0011f11:	6a 00                	push   0x0
c0011f13:	6a 00                	push   0x0
c0011f15:	50                   	push   eax
c0011f16:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f19:	83 c4 10             	add    esp,0x10
c0011f1c:	eb dc                	jmp    c0011efa <SysShutdown(regs*)+0x18>
c0011f1e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011f23:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f25:	6a 00                	push   0x0
c0011f27:	6a 00                	push   0x0
c0011f29:	6a 01                	push   0x1
c0011f2b:	eb e8                	jmp    c0011f15 <SysShutdown(regs*)+0x33>
c0011f2d:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011f32:	85 c0                	test   eax,eax
c0011f34:	74 02                	je     c0011f38 <SysShutdown(regs*)+0x56>
c0011f36:	ff d0                	call   eax
c0011f38:	31 c0                	xor    eax,eax
c0011f3a:	31 d2                	xor    edx,edx
c0011f3c:	83 c4 0c             	add    esp,0xc
c0011f3f:	c3                   	ret    

c0011f40 <SysRealpath(regs*)>:
c0011f40:	83 ec 0c             	sub    esp,0xc
c0011f43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f47:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011f4a:	85 d2                	test   edx,edx
c0011f4c:	74 07                	je     c0011f55 <SysRealpath(regs*)+0x15>
c0011f4e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011f51:	85 c0                	test   eax,eax
c0011f53:	75 0b                	jne    c0011f60 <SysRealpath(regs*)+0x20>
c0011f55:	b8 01 00 00 00       	mov    eax,0x1
c0011f5a:	31 d2                	xor    edx,edx
c0011f5c:	83 c4 0c             	add    esp,0xc
c0011f5f:	c3                   	ret    
c0011f60:	6a 00                	push   0x0
c0011f62:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011f68:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011f6b:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011f71:	51                   	push   ecx
c0011f72:	52                   	push   edx
c0011f73:	50                   	push   eax
c0011f74:	e8 df 98 ff ff       	call   c000b858 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011f79:	83 c4 10             	add    esp,0x10
c0011f7c:	31 c0                	xor    eax,eax
c0011f7e:	31 d2                	xor    edx,edx
c0011f80:	83 c4 0c             	add    esp,0xc
c0011f83:	c3                   	ret    

c0011f84 <SysReadDir(regs*)>:
c0011f84:	53                   	push   ebx
c0011f85:	83 ec 18             	sub    esp,0x18
c0011f88:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f8c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011f8f:	83 f8 02             	cmp    eax,0x2
c0011f92:	76 61                	jbe    c0011ff5 <SysReadDir(regs*)+0x71>
c0011f94:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011f9b:	77 49                	ja     c0011fe6 <SysReadDir(regs*)+0x62>
c0011f9d:	83 ec 0c             	sub    esp,0xc
c0011fa0:	50                   	push   eax
c0011fa1:	e8 11 75 ff ff       	call   c00094b7 <KeGetFileFromDescriptor(int)>
c0011fa6:	83 c4 10             	add    esp,0x10
c0011fa9:	85 c0                	test   eax,eax
c0011fab:	74 39                	je     c0011fe6 <SysReadDir(regs*)+0x62>
c0011fad:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011fb5:	83 ec 0c             	sub    esp,0xc
c0011fb8:	8b 10                	mov    edx,DWORD PTR [eax]
c0011fba:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011fbe:	51                   	push   ecx
c0011fbf:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011fc2:	51                   	push   ecx
c0011fc3:	6a 00                	push   0x0
c0011fc5:	68 10 01 00 00       	push   0x110
c0011fca:	50                   	push   eax
c0011fcb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011fce:	83 c4 20             	add    esp,0x20
c0011fd1:	85 c0                	test   eax,eax
c0011fd3:	74 29                	je     c0011ffe <SysReadDir(regs*)+0x7a>
c0011fd5:	83 f8 07             	cmp    eax,0x7
c0011fd8:	74 1b                	je     c0011ff5 <SysReadDir(regs*)+0x71>
c0011fda:	b8 02 00 00 00       	mov    eax,0x2
c0011fdf:	31 d2                	xor    edx,edx
c0011fe1:	83 c4 18             	add    esp,0x18
c0011fe4:	5b                   	pop    ebx
c0011fe5:	c3                   	ret    
c0011fe6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011feb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ff0:	83 c4 18             	add    esp,0x18
c0011ff3:	5b                   	pop    ebx
c0011ff4:	c3                   	ret    
c0011ff5:	b8 01 00 00 00       	mov    eax,0x1
c0011ffa:	31 d2                	xor    edx,edx
c0011ffc:	eb e3                	jmp    c0011fe1 <SysReadDir(regs*)+0x5d>
c0011ffe:	31 c0                	xor    eax,eax
c0012000:	31 d2                	xor    edx,edx
c0012002:	eb dd                	jmp    c0011fe1 <SysReadDir(regs*)+0x5d>

c0012004 <SysIsATTY(regs*)>:
c0012004:	83 ec 0c             	sub    esp,0xc
c0012007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001200b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001200e:	83 f8 02             	cmp    eax,0x2
c0012011:	76 07                	jbe    c001201a <SysIsATTY(regs*)+0x16>
c0012013:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012018:	75 26                	jne    c0012040 <SysIsATTY(regs*)+0x3c>
c001201a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001201f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012022:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012028:	85 c0                	test   eax,eax
c001202a:	74 24                	je     c0012050 <SysIsATTY(regs*)+0x4c>
c001202c:	83 ec 0c             	sub    esp,0xc
c001202f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012031:	50                   	push   eax
c0012032:	ff 12                	call   DWORD PTR [edx]
c0012034:	31 d2                	xor    edx,edx
c0012036:	0f b6 c0             	movzx  eax,al
c0012039:	83 c4 10             	add    esp,0x10
c001203c:	83 c4 0c             	add    esp,0xc
c001203f:	c3                   	ret    
c0012040:	83 ec 0c             	sub    esp,0xc
c0012043:	50                   	push   eax
c0012044:	e8 6e 74 ff ff       	call   c00094b7 <KeGetFileFromDescriptor(int)>
c0012049:	83 c4 10             	add    esp,0x10
c001204c:	85 c0                	test   eax,eax
c001204e:	75 dc                	jne    c001202c <SysIsATTY(regs*)+0x28>
c0012050:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012055:	ba ff ff ff ff       	mov    edx,0xffffffff
c001205a:	83 c4 0c             	add    esp,0xc
c001205d:	c3                   	ret    

c001205e <SysSeek(regs*)>:
c001205e:	53                   	push   ebx
c001205f:	83 ec 08             	sub    esp,0x8
c0012062:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012066:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012069:	8d 50 fd             	lea    edx,[eax-0x3]
c001206c:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0012072:	77 32                	ja     c00120a6 <SysSeek(regs*)+0x48>
c0012074:	83 ec 0c             	sub    esp,0xc
c0012077:	50                   	push   eax
c0012078:	e8 3a 74 ff ff       	call   c00094b7 <KeGetFileFromDescriptor(int)>
c001207d:	83 c4 0c             	add    esp,0xc
c0012080:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0012083:	31 db                	xor    ebx,ebx
c0012085:	53                   	push   ebx
c0012086:	51                   	push   ecx
c0012087:	50                   	push   eax
c0012088:	e8 9f 9b ff ff       	call   c000bc2c <File::seek(unsigned long long)>
c001208d:	83 c4 10             	add    esp,0x10
c0012090:	85 c0                	test   eax,eax
c0012092:	0f 95 c0             	setne  al
c0012095:	31 d2                	xor    edx,edx
c0012097:	0f b6 c0             	movzx  eax,al
c001209a:	f7 d8                	neg    eax
c001209c:	83 d2 00             	adc    edx,0x0
c001209f:	83 c4 08             	add    esp,0x8
c00120a2:	f7 da                	neg    edx
c00120a4:	5b                   	pop    ebx
c00120a5:	c3                   	ret    
c00120a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120ab:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120b0:	83 c4 08             	add    esp,0x8
c00120b3:	5b                   	pop    ebx
c00120b4:	c3                   	ret    

c00120b5 <SysTell(regs*)>:
c00120b5:	53                   	push   ebx
c00120b6:	83 ec 08             	sub    esp,0x8
c00120b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120bd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120c0:	83 f8 02             	cmp    eax,0x2
c00120c3:	76 4e                	jbe    c0012113 <SysTell(regs*)+0x5e>
c00120c5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00120ca:	76 19                	jbe    c00120e5 <SysTell(regs*)+0x30>
c00120cc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00120cf:	31 d2                	xor    edx,edx
c00120d1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00120d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120de:	31 c0                	xor    eax,eax
c00120e0:	83 c4 08             	add    esp,0x8
c00120e3:	5b                   	pop    ebx
c00120e4:	c3                   	ret    
c00120e5:	83 ec 0c             	sub    esp,0xc
c00120e8:	50                   	push   eax
c00120e9:	e8 c9 73 ff ff       	call   c00094b7 <KeGetFileFromDescriptor(int)>
c00120ee:	5a                   	pop    edx
c00120ef:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00120f2:	59                   	pop    ecx
c00120f3:	53                   	push   ebx
c00120f4:	50                   	push   eax
c00120f5:	e8 de 9b ff ff       	call   c000bcd8 <File::tell(unsigned long long*)>
c00120fa:	83 c4 10             	add    esp,0x10
c00120fd:	85 c0                	test   eax,eax
c00120ff:	0f 95 c0             	setne  al
c0012102:	31 d2                	xor    edx,edx
c0012104:	0f b6 c0             	movzx  eax,al
c0012107:	f7 d8                	neg    eax
c0012109:	83 d2 00             	adc    edx,0x0
c001210c:	83 c4 08             	add    esp,0x8
c001210f:	f7 da                	neg    edx
c0012111:	5b                   	pop    ebx
c0012112:	c3                   	ret    
c0012113:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012118:	ba ff ff ff ff       	mov    edx,0xffffffff
c001211d:	83 c4 08             	add    esp,0x8
c0012120:	5b                   	pop    ebx
c0012121:	c3                   	ret    

c0012122 <SysSize(regs*)>:
c0012122:	53                   	push   ebx
c0012123:	83 ec 18             	sub    esp,0x18
c0012126:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001212a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001212d:	83 f8 02             	cmp    eax,0x2
c0012130:	76 54                	jbe    c0012186 <SysSize(regs*)+0x64>
c0012132:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012137:	76 19                	jbe    c0012152 <SysSize(regs*)+0x30>
c0012139:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001213c:	31 d2                	xor    edx,edx
c001213e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012144:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001214b:	31 c0                	xor    eax,eax
c001214d:	83 c4 18             	add    esp,0x18
c0012150:	5b                   	pop    ebx
c0012151:	c3                   	ret    
c0012152:	83 ec 0c             	sub    esp,0xc
c0012155:	50                   	push   eax
c0012156:	e8 5c 73 ff ff       	call   c00094b7 <KeGetFileFromDescriptor(int)>
c001215b:	83 c4 0c             	add    esp,0xc
c001215e:	8d 54 24 13          	lea    edx,[esp+0x13]
c0012162:	52                   	push   edx
c0012163:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012166:	52                   	push   edx
c0012167:	50                   	push   eax
c0012168:	e8 03 9d ff ff       	call   c000be70 <File::stat(unsigned long long*, bool*)>
c001216d:	83 c4 10             	add    esp,0x10
c0012170:	85 c0                	test   eax,eax
c0012172:	0f 95 c0             	setne  al
c0012175:	31 d2                	xor    edx,edx
c0012177:	0f b6 c0             	movzx  eax,al
c001217a:	f7 d8                	neg    eax
c001217c:	83 d2 00             	adc    edx,0x0
c001217f:	83 c4 18             	add    esp,0x18
c0012182:	f7 da                	neg    edx
c0012184:	5b                   	pop    ebx
c0012185:	c3                   	ret    
c0012186:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001218b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012190:	83 c4 18             	add    esp,0x18
c0012193:	5b                   	pop    ebx
c0012194:	c3                   	ret    

c0012195 <SysSizeFromFilename(regs*)>:
c0012195:	55                   	push   ebp
c0012196:	57                   	push   edi
c0012197:	56                   	push   esi
c0012198:	53                   	push   ebx
c0012199:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001219f:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00121a6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00121a9:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00121ac:	85 f6                	test   esi,esi
c00121ae:	74 34                	je     c00121e4 <SysSizeFromFilename(regs*)+0x4f>
c00121b0:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00121b6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00121b9:	83 f8 02             	cmp    eax,0x2
c00121bc:	76 2d                	jbe    c00121eb <SysSizeFromFilename(regs*)+0x56>
c00121be:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00121c3:	76 3b                	jbe    c0012200 <SysSizeFromFilename(regs*)+0x6b>
c00121c5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00121c8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00121ce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121d5:	81 c4 5c 02 00 00    	add    esp,0x25c
c00121db:	31 c0                	xor    eax,eax
c00121dd:	5b                   	pop    ebx
c00121de:	31 d2                	xor    edx,edx
c00121e0:	5e                   	pop    esi
c00121e1:	5f                   	pop    edi
c00121e2:	5d                   	pop    ebp
c00121e3:	c3                   	ret    
c00121e4:	89 f8                	mov    eax,edi
c00121e6:	83 f8 02             	cmp    eax,0x2
c00121e9:	77 d3                	ja     c00121be <SysSizeFromFilename(regs*)+0x29>
c00121eb:	81 c4 5c 02 00 00    	add    esp,0x25c
c00121f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00121f6:	5b                   	pop    ebx
c00121f7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00121fc:	5e                   	pop    esi
c00121fd:	5f                   	pop    edi
c00121fe:	5d                   	pop    ebp
c00121ff:	c3                   	ret    
c0012200:	83 ec 0c             	sub    esp,0xc
c0012203:	68 14 01 00 00       	push   0x114
c0012208:	e8 ad 58 ff ff       	call   c0007aba <malloc>
c001220d:	6a 01                	push   0x1
c001220f:	89 c5                	mov    ebp,eax
c0012211:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012216:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012219:	51                   	push   ecx
c001221a:	57                   	push   edi
c001221b:	55                   	push   ebp
c001221c:	e8 51 98 ff ff       	call   c000ba72 <File::File(char const*, Process*, bool)>
c0012221:	83 c4 1c             	add    esp,0x1c
c0012224:	8d 44 24 23          	lea    eax,[esp+0x23]
c0012228:	50                   	push   eax
c0012229:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001222c:	53                   	push   ebx
c001222d:	55                   	push   ebp
c001222e:	e8 3d 9c ff ff       	call   c000be70 <File::stat(unsigned long long*, bool*)>
c0012233:	83 c4 10             	add    esp,0x10
c0012236:	85 ed                	test   ebp,ebp
c0012238:	74 15                	je     c001224f <SysSizeFromFilename(regs*)+0xba>
c001223a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001223e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012241:	83 ec 0c             	sub    esp,0xc
c0012244:	55                   	push   ebp
c0012245:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012248:	83 c4 10             	add    esp,0x10
c001224b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001224f:	85 c0                	test   eax,eax
c0012251:	75 98                	jne    c00121eb <SysSizeFromFilename(regs*)+0x56>
c0012253:	6a 00                	push   0x0
c0012255:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001225a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001225d:	05 0c 01 00 00       	add    eax,0x10c
c0012262:	50                   	push   eax
c0012263:	57                   	push   edi
c0012264:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c001226b:	53                   	push   ebx
c001226c:	e8 e7 95 ff ff       	call   c000b858 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012271:	58                   	pop    eax
c0012272:	5a                   	pop    edx
c0012273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012277:	50                   	push   eax
c0012278:	53                   	push   ebx
c0012279:	e8 42 90 ff ff       	call   c000b2c0 <KeDereferenceSymlink(char const*, char*)>
c001227e:	83 c4 10             	add    esp,0x10
c0012281:	83 f8 01             	cmp    eax,0x1
c0012284:	74 1a                	je     c00122a0 <SysSizeFromFilename(regs*)+0x10b>
c0012286:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001228b:	74 26                	je     c00122b3 <SysSizeFromFilename(regs*)+0x11e>
c001228d:	85 f6                	test   esi,esi
c001228f:	0f 84 40 ff ff ff    	je     c00121d5 <SysSizeFromFilename(regs*)+0x40>
c0012295:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001229b:	e9 35 ff ff ff       	jmp    c00121d5 <SysSizeFromFilename(regs*)+0x40>
c00122a0:	85 f6                	test   esi,esi
c00122a2:	0f 84 2d ff ff ff    	je     c00121d5 <SysSizeFromFilename(regs*)+0x40>
c00122a8:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00122ae:	e9 22 ff ff ff       	jmp    c00121d5 <SysSizeFromFilename(regs*)+0x40>
c00122b3:	85 f6                	test   esi,esi
c00122b5:	0f 84 1a ff ff ff    	je     c00121d5 <SysSizeFromFilename(regs*)+0x40>
c00122bb:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00122c1:	e9 0f ff ff ff       	jmp    c00121d5 <SysSizeFromFilename(regs*)+0x40>

c00122c6 <SysSizeFromFilenameNoSymlink(regs*)>:
c00122c6:	55                   	push   ebp
c00122c7:	57                   	push   edi
c00122c8:	56                   	push   esi
c00122c9:	53                   	push   ebx
c00122ca:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00122d0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00122d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00122da:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00122dd:	85 f6                	test   esi,esi
c00122df:	74 34                	je     c0012315 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c00122e1:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00122e7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00122ea:	83 f8 02             	cmp    eax,0x2
c00122ed:	76 2d                	jbe    c001231c <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00122ef:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00122f4:	76 3b                	jbe    c0012331 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c00122f6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00122f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00122ff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012306:	81 c4 5c 02 00 00    	add    esp,0x25c
c001230c:	31 c0                	xor    eax,eax
c001230e:	5b                   	pop    ebx
c001230f:	31 d2                	xor    edx,edx
c0012311:	5e                   	pop    esi
c0012312:	5f                   	pop    edi
c0012313:	5d                   	pop    ebp
c0012314:	c3                   	ret    
c0012315:	89 f8                	mov    eax,edi
c0012317:	83 f8 02             	cmp    eax,0x2
c001231a:	77 d3                	ja     c00122ef <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c001231c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012322:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012327:	5b                   	pop    ebx
c0012328:	ba ff ff ff ff       	mov    edx,0xffffffff
c001232d:	5e                   	pop    esi
c001232e:	5f                   	pop    edi
c001232f:	5d                   	pop    ebp
c0012330:	c3                   	ret    
c0012331:	83 ec 0c             	sub    esp,0xc
c0012334:	68 14 01 00 00       	push   0x114
c0012339:	e8 7c 57 ff ff       	call   c0007aba <malloc>
c001233e:	6a 00                	push   0x0
c0012340:	89 c5                	mov    ebp,eax
c0012342:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012347:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001234a:	51                   	push   ecx
c001234b:	57                   	push   edi
c001234c:	55                   	push   ebp
c001234d:	e8 20 97 ff ff       	call   c000ba72 <File::File(char const*, Process*, bool)>
c0012352:	83 c4 1c             	add    esp,0x1c
c0012355:	8d 44 24 23          	lea    eax,[esp+0x23]
c0012359:	50                   	push   eax
c001235a:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001235d:	53                   	push   ebx
c001235e:	55                   	push   ebp
c001235f:	e8 0c 9b ff ff       	call   c000be70 <File::stat(unsigned long long*, bool*)>
c0012364:	83 c4 10             	add    esp,0x10
c0012367:	85 ed                	test   ebp,ebp
c0012369:	74 15                	je     c0012380 <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c001236b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001236f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012372:	83 ec 0c             	sub    esp,0xc
c0012375:	55                   	push   ebp
c0012376:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012379:	83 c4 10             	add    esp,0x10
c001237c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012380:	85 c0                	test   eax,eax
c0012382:	75 98                	jne    c001231c <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0012384:	6a 00                	push   0x0
c0012386:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001238b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001238e:	05 0c 01 00 00       	add    eax,0x10c
c0012393:	50                   	push   eax
c0012394:	57                   	push   edi
c0012395:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c001239c:	53                   	push   ebx
c001239d:	e8 b6 94 ff ff       	call   c000b858 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00123a2:	58                   	pop    eax
c00123a3:	5a                   	pop    edx
c00123a4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00123a8:	50                   	push   eax
c00123a9:	53                   	push   ebx
c00123aa:	e8 11 8f ff ff       	call   c000b2c0 <KeDereferenceSymlink(char const*, char*)>
c00123af:	83 c4 10             	add    esp,0x10
c00123b2:	83 f8 01             	cmp    eax,0x1
c00123b5:	74 1a                	je     c00123d1 <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c00123b7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00123bc:	74 26                	je     c00123e4 <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c00123be:	85 f6                	test   esi,esi
c00123c0:	0f 84 40 ff ff ff    	je     c0012306 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123c6:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00123cc:	e9 35 ff ff ff       	jmp    c0012306 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123d1:	85 f6                	test   esi,esi
c00123d3:	0f 84 2d ff ff ff    	je     c0012306 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123d9:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00123df:	e9 22 ff ff ff       	jmp    c0012306 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123e4:	85 f6                	test   esi,esi
c00123e6:	0f 84 1a ff ff ff    	je     c0012306 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123ec:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00123f2:	e9 0f ff ff ff       	jmp    c0012306 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c00123f7 <SysClose(regs*)>:
c00123f7:	53                   	push   ebx
c00123f8:	83 ec 08             	sub    esp,0x8
c00123fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123ff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012402:	83 f8 02             	cmp    eax,0x2
c0012405:	76 41                	jbe    c0012448 <SysClose(regs*)+0x51>
c0012407:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001240d:	83 fa 01             	cmp    edx,0x1
c0012410:	76 2d                	jbe    c001243f <SysClose(regs*)+0x48>
c0012412:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012417:	77 2f                	ja     c0012448 <SysClose(regs*)+0x51>
c0012419:	83 ec 0c             	sub    esp,0xc
c001241c:	50                   	push   eax
c001241d:	e8 95 70 ff ff       	call   c00094b7 <KeGetFileFromDescriptor(int)>
c0012422:	89 c3                	mov    ebx,eax
c0012424:	89 04 24             	mov    DWORD PTR [esp],eax
c0012427:	e8 a0 97 ff ff       	call   c000bbcc <File::close()>
c001242c:	83 c4 10             	add    esp,0x10
c001242f:	85 db                	test   ebx,ebx
c0012431:	74 0c                	je     c001243f <SysClose(regs*)+0x48>
c0012433:	83 ec 0c             	sub    esp,0xc
c0012436:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012438:	53                   	push   ebx
c0012439:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001243c:	83 c4 10             	add    esp,0x10
c001243f:	31 c0                	xor    eax,eax
c0012441:	31 d2                	xor    edx,edx
c0012443:	83 c4 08             	add    esp,0x8
c0012446:	5b                   	pop    ebx
c0012447:	c3                   	ret    
c0012448:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001244d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012452:	83 c4 08             	add    esp,0x8
c0012455:	5b                   	pop    ebx
c0012456:	c3                   	ret    

c0012457 <SysOpenDir(regs*)>:
c0012457:	56                   	push   esi
c0012458:	53                   	push   ebx
c0012459:	83 ec 04             	sub    esp,0x4
c001245c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012460:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012463:	85 c9                	test   ecx,ecx
c0012465:	74 5d                	je     c00124c4 <SysOpenDir(regs*)+0x6d>
c0012467:	83 ec 0c             	sub    esp,0xc
c001246a:	68 14 01 00 00       	push   0x114
c001246f:	e8 46 56 ff ff       	call   c0007aba <malloc>
c0012474:	83 c4 0c             	add    esp,0xc
c0012477:	89 c6                	mov    esi,eax
c0012479:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001247e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012481:	50                   	push   eax
c0012482:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012485:	52                   	push   edx
c0012486:	56                   	push   esi
c0012487:	e8 a4 9b ff ff       	call   c000c030 <Directory::Directory(char const*, Process*)>
c001248c:	83 c4 10             	add    esp,0x10
c001248f:	85 f6                	test   esi,esi
c0012491:	74 31                	je     c00124c4 <SysOpenDir(regs*)+0x6d>
c0012493:	83 ec 0c             	sub    esp,0xc
c0012496:	56                   	push   esi
c0012497:	e8 5c 9c ff ff       	call   c000c0f8 <Directory::open()>
c001249c:	83 c4 10             	add    esp,0x10
c001249f:	85 c0                	test   eax,eax
c00124a1:	75 21                	jne    c00124c4 <SysOpenDir(regs*)+0x6d>
c00124a3:	83 ec 0c             	sub    esp,0xc
c00124a6:	56                   	push   esi
c00124a7:	e8 0e 6d ff ff       	call   c00091ba <UnixFile::getFileDescriptor()>
c00124ac:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00124af:	83 c4 10             	add    esp,0x10
c00124b2:	89 02                	mov    DWORD PTR [edx],eax
c00124b4:	c1 f8 1f             	sar    eax,0x1f
c00124b7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00124ba:	83 c4 04             	add    esp,0x4
c00124bd:	31 c0                	xor    eax,eax
c00124bf:	31 d2                	xor    edx,edx
c00124c1:	5b                   	pop    ebx
c00124c2:	5e                   	pop    esi
c00124c3:	c3                   	ret    
c00124c4:	83 c4 04             	add    esp,0x4
c00124c7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124cc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124d1:	5b                   	pop    ebx
c00124d2:	5e                   	pop    esi
c00124d3:	c3                   	ret    

c00124d4 <SysMakeDir(regs*)>:
c00124d4:	56                   	push   esi
c00124d5:	53                   	push   ebx
c00124d6:	83 ec 10             	sub    esp,0x10
c00124d9:	68 14 01 00 00       	push   0x114
c00124de:	e8 d7 55 ff ff       	call   c0007aba <malloc>
c00124e3:	83 c4 0c             	add    esp,0xc
c00124e6:	89 c3                	mov    ebx,eax
c00124e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124ed:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124f0:	50                   	push   eax
c00124f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124f5:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00124f8:	52                   	push   edx
c00124f9:	53                   	push   ebx
c00124fa:	e8 31 9b ff ff       	call   c000c030 <Directory::Directory(char const*, Process*)>
c00124ff:	83 c4 10             	add    esp,0x10
c0012502:	85 db                	test   ebx,ebx
c0012504:	74 2c                	je     c0012532 <SysMakeDir(regs*)+0x5e>
c0012506:	83 ec 0c             	sub    esp,0xc
c0012509:	53                   	push   ebx
c001250a:	e8 c9 9d ff ff       	call   c000c2d8 <Directory::create()>
c001250f:	89 c6                	mov    esi,eax
c0012511:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012513:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012516:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012519:	83 c4 10             	add    esp,0x10
c001251c:	31 c0                	xor    eax,eax
c001251e:	85 f6                	test   esi,esi
c0012520:	0f 95 c0             	setne  al
c0012523:	31 d2                	xor    edx,edx
c0012525:	f7 d8                	neg    eax
c0012527:	83 d2 00             	adc    edx,0x0
c001252a:	83 c4 04             	add    esp,0x4
c001252d:	f7 da                	neg    edx
c001252f:	5b                   	pop    ebx
c0012530:	5e                   	pop    esi
c0012531:	c3                   	ret    
c0012532:	83 c4 04             	add    esp,0x4
c0012535:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001253a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001253f:	5b                   	pop    ebx
c0012540:	5e                   	pop    esi
c0012541:	c3                   	ret    

c0012542 <SysCloseDir(regs*)>:
c0012542:	53                   	push   ebx
c0012543:	83 ec 08             	sub    esp,0x8
c0012546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001254a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001254d:	8d 50 fd             	lea    edx,[eax-0x3]
c0012550:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0012556:	77 2f                	ja     c0012587 <SysCloseDir(regs*)+0x45>
c0012558:	83 ec 0c             	sub    esp,0xc
c001255b:	50                   	push   eax
c001255c:	e8 56 6f ff ff       	call   c00094b7 <KeGetFileFromDescriptor(int)>
c0012561:	89 c3                	mov    ebx,eax
c0012563:	89 04 24             	mov    DWORD PTR [esp],eax
c0012566:	e8 e9 9b ff ff       	call   c000c154 <Directory::close()>
c001256b:	83 c4 10             	add    esp,0x10
c001256e:	85 db                	test   ebx,ebx
c0012570:	74 0c                	je     c001257e <SysCloseDir(regs*)+0x3c>
c0012572:	83 ec 0c             	sub    esp,0xc
c0012575:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012577:	53                   	push   ebx
c0012578:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001257b:	83 c4 10             	add    esp,0x10
c001257e:	31 c0                	xor    eax,eax
c0012580:	31 d2                	xor    edx,edx
c0012582:	83 c4 08             	add    esp,0x8
c0012585:	5b                   	pop    ebx
c0012586:	c3                   	ret    
c0012587:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001258c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012591:	83 c4 08             	add    esp,0x8
c0012594:	5b                   	pop    ebx
c0012595:	c3                   	ret    

c0012596 <SysWait(regs*)>:
c0012596:	83 ec 10             	sub    esp,0x10
c0012599:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001259d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00125a0:	52                   	push   edx
c00125a1:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00125a4:	51                   	push   ecx
c00125a5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00125a8:	50                   	push   eax
c00125a9:	e8 46 3e 00 00       	call   c00163f4 <waitTask(int, int*, int)>
c00125ae:	83 c4 1c             	add    esp,0x1c
c00125b1:	89 c2                	mov    edx,eax
c00125b3:	c1 fa 1f             	sar    edx,0x1f
c00125b6:	c3                   	ret    

c00125b7 <SysNotImpl(regs*)>:
c00125b7:	83 ec 18             	sub    esp,0x18
c00125ba:	68 7a 26 02 c0       	push   0xc002267a
c00125bf:	e8 ff f0 ff ff       	call   c00116c3 <KePanic(char const*)>
c00125c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00125c9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00125ce:	83 c4 1c             	add    esp,0x1c
c00125d1:	c3                   	ret    

c00125d2 <SysPanic(regs*)>:
c00125d2:	83 ec 18             	sub    esp,0x18
c00125d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00125d9:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00125dc:	50                   	push   eax
c00125dd:	e8 e1 f0 ff ff       	call   c00116c3 <KePanic(char const*)>
c00125e2:	b8 01 00 00 00       	mov    eax,0x1
c00125e7:	31 d2                	xor    edx,edx
c00125e9:	83 c4 1c             	add    esp,0x1c
c00125ec:	c3                   	ret    

c00125ed <SysRmdir(regs*)>:
c00125ed:	56                   	push   esi
c00125ee:	53                   	push   ebx
c00125ef:	83 ec 20             	sub    esp,0x20
c00125f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00125f6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00125f9:	68 14 01 00 00       	push   0x114
c00125fe:	e8 b7 54 ff ff       	call   c0007aba <malloc>
c0012603:	6a 00                	push   0x0
c0012605:	89 c3                	mov    ebx,eax
c0012607:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001260c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001260f:	50                   	push   eax
c0012610:	56                   	push   esi
c0012611:	53                   	push   ebx
c0012612:	e8 5b 94 ff ff       	call   c000ba72 <File::File(char const*, Process*, bool)>
c0012617:	83 c4 14             	add    esp,0x14
c001261a:	53                   	push   ebx
c001261b:	e8 1c 97 ff ff       	call   c000bd3c <File::unlink()>
c0012620:	83 c4 10             	add    esp,0x10
c0012623:	85 db                	test   ebx,ebx
c0012625:	74 14                	je     c001263b <SysRmdir(regs*)+0x4e>
c0012627:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001262b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001262d:	83 ec 0c             	sub    esp,0xc
c0012630:	53                   	push   ebx
c0012631:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012634:	83 c4 10             	add    esp,0x10
c0012637:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001263b:	85 c0                	test   eax,eax
c001263d:	0f 95 c0             	setne  al
c0012640:	31 d2                	xor    edx,edx
c0012642:	0f b6 c0             	movzx  eax,al
c0012645:	f7 d8                	neg    eax
c0012647:	83 d2 00             	adc    edx,0x0
c001264a:	83 c4 14             	add    esp,0x14
c001264d:	f7 da                	neg    edx
c001264f:	5b                   	pop    ebx
c0012650:	5e                   	pop    esi
c0012651:	c3                   	ret    

c0012652 <SysUnlink(regs*)>:
c0012652:	56                   	push   esi
c0012653:	53                   	push   ebx
c0012654:	83 ec 20             	sub    esp,0x20
c0012657:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001265b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001265e:	68 14 01 00 00       	push   0x114
c0012663:	e8 52 54 ff ff       	call   c0007aba <malloc>
c0012668:	6a 00                	push   0x0
c001266a:	89 c3                	mov    ebx,eax
c001266c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012671:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012674:	50                   	push   eax
c0012675:	56                   	push   esi
c0012676:	53                   	push   ebx
c0012677:	e8 f6 93 ff ff       	call   c000ba72 <File::File(char const*, Process*, bool)>
c001267c:	83 c4 14             	add    esp,0x14
c001267f:	53                   	push   ebx
c0012680:	e8 b7 96 ff ff       	call   c000bd3c <File::unlink()>
c0012685:	83 c4 10             	add    esp,0x10
c0012688:	85 db                	test   ebx,ebx
c001268a:	74 14                	je     c00126a0 <SysUnlink(regs*)+0x4e>
c001268c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012690:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012692:	83 ec 0c             	sub    esp,0xc
c0012695:	53                   	push   ebx
c0012696:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012699:	83 c4 10             	add    esp,0x10
c001269c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00126a0:	85 c0                	test   eax,eax
c00126a2:	0f 95 c0             	setne  al
c00126a5:	31 d2                	xor    edx,edx
c00126a7:	0f b6 c0             	movzx  eax,al
c00126aa:	f7 d8                	neg    eax
c00126ac:	83 d2 00             	adc    edx,0x0
c00126af:	83 c4 14             	add    esp,0x14
c00126b2:	f7 da                	neg    edx
c00126b4:	5b                   	pop    ebx
c00126b5:	5e                   	pop    esi
c00126b6:	c3                   	ret    

c00126b7 <SysGetArgv(regs*)>:
c00126b7:	83 ec 0c             	sub    esp,0xc
c00126ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00126be:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00126c1:	85 c0                	test   eax,eax
c00126c3:	78 2c                	js     c00126f1 <SysGetArgv(regs*)+0x3a>
c00126c5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00126cb:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00126ce:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00126d4:	7d 1b                	jge    c00126f1 <SysGetArgv(regs*)+0x3a>
c00126d6:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00126dd:	85 c0                	test   eax,eax
c00126df:	74 18                	je     c00126f9 <SysGetArgv(regs*)+0x42>
c00126e1:	83 ec 08             	sub    esp,0x8
c00126e4:	50                   	push   eax
c00126e5:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00126e8:	50                   	push   eax
c00126e9:	e8 52 df fe ff       	call   c0000640 <strcpy>
c00126ee:	83 c4 10             	add    esp,0x10
c00126f1:	31 c0                	xor    eax,eax
c00126f3:	31 d2                	xor    edx,edx
c00126f5:	83 c4 0c             	add    esp,0xc
c00126f8:	c3                   	ret    
c00126f9:	b8 01 00 00 00       	mov    eax,0x1
c00126fe:	31 d2                	xor    edx,edx
c0012700:	83 c4 0c             	add    esp,0xc
c0012703:	c3                   	ret    

c0012704 <SysUSleep(regs*)>:
c0012704:	83 ec 1c             	sub    esp,0x1c
c0012707:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001270b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001270e:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012711:	6a 00                	push   0x0
c0012713:	6a 64                	push   0x64
c0012715:	52                   	push   edx
c0012716:	50                   	push   eax
c0012717:	e8 04 d1 00 00       	call   c001f820 <__udivdi3>
c001271c:	83 c4 14             	add    esp,0x14
c001271f:	50                   	push   eax
c0012720:	e8 b3 3d 00 00       	call   c00164d8 <milliTenthSleep(unsigned int)>
c0012725:	31 c0                	xor    eax,eax
c0012727:	31 d2                	xor    edx,edx
c0012729:	83 c4 1c             	add    esp,0x1c
c001272c:	c3                   	ret    

c001272d <SysSpawn(regs*)>:
c001272d:	56                   	push   esi
c001272e:	53                   	push   ebx
c001272f:	83 ec 04             	sub    esp,0x4
c0012732:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012736:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012739:	85 f6                	test   esi,esi
c001273b:	75 0a                	jne    c0012747 <SysSpawn(regs*)+0x1a>
c001273d:	83 c4 04             	add    esp,0x4
c0012740:	31 c0                	xor    eax,eax
c0012742:	31 d2                	xor    edx,edx
c0012744:	5b                   	pop    ebx
c0012745:	5e                   	pop    esi
c0012746:	c3                   	ret    
c0012747:	83 ec 0c             	sub    esp,0xc
c001274a:	68 24 07 00 00       	push   0x724
c001274f:	e8 66 53 ff ff       	call   c0007aba <malloc>
c0012754:	83 c4 10             	add    esp,0x10
c0012757:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001275a:	89 c6                	mov    esi,eax
c001275c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001275f:	85 c9                	test   ecx,ecx
c0012761:	75 39                	jne    c001279c <SysSpawn(regs*)+0x6f>
c0012763:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012768:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001276b:	52                   	push   edx
c001276c:	50                   	push   eax
c001276d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012770:	50                   	push   eax
c0012771:	56                   	push   esi
c0012772:	e8 b1 33 00 00       	call   c0015b28 <Process::Process(char const*, Process*, char**)>
c0012777:	83 c4 10             	add    esp,0x10
c001277a:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0012781:	75 ba                	jne    c001273d <SysSpawn(regs*)+0x10>
c0012783:	83 ec 0c             	sub    esp,0xc
c0012786:	56                   	push   esi
c0012787:	e8 d8 38 00 00       	call   c0016064 <Process::createUserThread()>
c001278c:	8b 06                	mov    eax,DWORD PTR [esi]
c001278e:	83 c4 10             	add    esp,0x10
c0012791:	89 c2                	mov    edx,eax
c0012793:	83 c4 04             	add    esp,0x4
c0012796:	c1 fa 1f             	sar    edx,0x1f
c0012799:	5b                   	pop    ebx
c001279a:	5e                   	pop    esi
c001279b:	c3                   	ret    
c001279c:	31 c0                	xor    eax,eax
c001279e:	eb cb                	jmp    c001276b <SysSpawn(regs*)+0x3e>

c00127a0 <SysGetEnv(regs*)>:
c00127a0:	57                   	push   edi
c00127a1:	56                   	push   esi
c00127a2:	53                   	push   ebx
c00127a3:	83 ec 1c             	sub    esp,0x1c
c00127a6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00127aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00127af:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00127b2:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00127b5:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00127b8:	51                   	push   ecx
c00127b9:	e8 bd ed ff ff       	call   c001157b <KeGetProcessTotalEnvCount(Process*)>
c00127be:	83 c4 10             	add    esp,0x10
c00127c1:	39 c7                	cmp    edi,eax
c00127c3:	7c 14                	jl     c00127d9 <SysGetEnv(regs*)+0x39>
c00127c5:	85 f6                	test   esi,esi
c00127c7:	75 0b                	jne    c00127d4 <SysGetEnv(regs*)+0x34>
c00127c9:	83 c4 10             	add    esp,0x10
c00127cc:	31 c0                	xor    eax,eax
c00127ce:	5b                   	pop    ebx
c00127cf:	31 d2                	xor    edx,edx
c00127d1:	5e                   	pop    esi
c00127d2:	5f                   	pop    edi
c00127d3:	c3                   	ret    
c00127d4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00127d7:	eb f0                	jmp    c00127c9 <SysGetEnv(regs*)+0x29>
c00127d9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00127dd:	83 ec 04             	sub    esp,0x4
c00127e0:	57                   	push   edi
c00127e1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00127e7:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00127ea:	57                   	push   edi
c00127eb:	50                   	push   eax
c00127ec:	e8 aa ed ff ff       	call   c001159b <KeGetProcessEnvPair(Process*, int)>
c00127f1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00127f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127f8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00127fc:	83 c4 0c             	add    esp,0xc
c00127ff:	85 d2                	test   edx,edx
c0012801:	75 23                	jne    c0012826 <SysGetEnv(regs*)+0x86>
c0012803:	83 ec 0c             	sub    esp,0xc
c0012806:	50                   	push   eax
c0012807:	e8 64 dd fe ff       	call   c0000570 <strlen>
c001280c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001280f:	89 c3                	mov    ebx,eax
c0012811:	e8 5a dd fe ff       	call   c0000570 <strlen>
c0012816:	83 c4 10             	add    esp,0x10
c0012819:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001281d:	83 c4 10             	add    esp,0x10
c0012820:	31 d2                	xor    edx,edx
c0012822:	5b                   	pop    ebx
c0012823:	5e                   	pop    esi
c0012824:	5f                   	pop    edi
c0012825:	c3                   	ret    
c0012826:	83 ec 08             	sub    esp,0x8
c0012829:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001282c:	50                   	push   eax
c001282d:	56                   	push   esi
c001282e:	e8 0d de fe ff       	call   c0000640 <strcpy>
c0012833:	58                   	pop    eax
c0012834:	5a                   	pop    edx
c0012835:	68 94 26 02 c0       	push   0xc0022694
c001283a:	56                   	push   esi
c001283b:	e8 00 e0 fe ff       	call   c0000840 <strcat>
c0012840:	59                   	pop    ecx
c0012841:	5b                   	pop    ebx
c0012842:	57                   	push   edi
c0012843:	56                   	push   esi
c0012844:	e8 f7 df fe ff       	call   c0000840 <strcat>
c0012849:	83 c4 10             	add    esp,0x10
c001284c:	e9 78 ff ff ff       	jmp    c00127c9 <SysGetEnv(regs*)+0x29>

c0012851 <SysSetFatAttrib(regs*)>:
c0012851:	57                   	push   edi
c0012852:	56                   	push   esi
c0012853:	53                   	push   ebx
c0012854:	83 ec 1c             	sub    esp,0x1c
c0012857:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001285b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001285e:	68 14 01 00 00       	push   0x114
c0012863:	e8 52 52 ff ff       	call   c0007aba <malloc>
c0012868:	83 c4 0c             	add    esp,0xc
c001286b:	89 c3                	mov    ebx,eax
c001286d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012872:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012875:	50                   	push   eax
c0012876:	57                   	push   edi
c0012877:	53                   	push   ebx
c0012878:	e8 d3 92 ff ff       	call   c000bb50 <File::File(char const*, Process*)>
c001287d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012880:	83 c4 0c             	add    esp,0xc
c0012883:	0f b6 d4             	movzx  edx,ah
c0012886:	0f b6 c0             	movzx  eax,al
c0012889:	52                   	push   edx
c001288a:	50                   	push   eax
c001288b:	53                   	push   ebx
c001288c:	e8 45 95 ff ff       	call   c000bdd6 <File::chfatattr(unsigned char, unsigned char)>
c0012891:	83 c4 10             	add    esp,0x10
c0012894:	85 db                	test   ebx,ebx
c0012896:	74 14                	je     c00128ac <SysSetFatAttrib(regs*)+0x5b>
c0012898:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001289c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001289e:	83 ec 0c             	sub    esp,0xc
c00128a1:	53                   	push   ebx
c00128a2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00128a5:	83 c4 10             	add    esp,0x10
c00128a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00128ac:	85 c0                	test   eax,eax
c00128ae:	0f 95 c0             	setne  al
c00128b1:	31 d2                	xor    edx,edx
c00128b3:	0f b6 c0             	movzx  eax,al
c00128b6:	f7 d8                	neg    eax
c00128b8:	83 d2 00             	adc    edx,0x0
c00128bb:	83 c4 10             	add    esp,0x10
c00128be:	f7 da                	neg    edx
c00128c0:	5b                   	pop    ebx
c00128c1:	5e                   	pop    esi
c00128c2:	5f                   	pop    edi
c00128c3:	c3                   	ret    

c00128c4 <SysPipe(regs*)>:
c00128c4:	57                   	push   edi
c00128c5:	56                   	push   esi
c00128c6:	53                   	push   ebx
c00128c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128cb:	83 ec 0c             	sub    esp,0xc
c00128ce:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00128d1:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00128d4:	6a 20                	push   0x20
c00128d6:	e8 df 51 ff ff       	call   c0007aba <malloc>
c00128db:	89 c3                	mov    ebx,eax
c00128dd:	58                   	pop    eax
c00128de:	5a                   	pop    edx
c00128df:	68 00 50 00 00       	push   0x5000
c00128e4:	53                   	push   ebx
c00128e5:	e8 42 5b ff ff       	call   c000842c <Pipe::Pipe(int)>
c00128ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00128ed:	e8 c8 68 ff ff       	call   c00091ba <UnixFile::getFileDescriptor()>
c00128f2:	89 07                	mov    DWORD PTR [edi],eax
c00128f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00128f7:	e8 be 68 ff ff       	call   c00091ba <UnixFile::getFileDescriptor()>
c00128fc:	83 c4 10             	add    esp,0x10
c00128ff:	89 06                	mov    DWORD PTR [esi],eax
c0012901:	31 d2                	xor    edx,edx
c0012903:	5b                   	pop    ebx
c0012904:	31 c0                	xor    eax,eax
c0012906:	5e                   	pop    esi
c0012907:	5f                   	pop    edi
c0012908:	c3                   	ret    

c0012909 <SysGetUnixTime(regs*)>:
c0012909:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001290e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012914:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012918:	e9 01 9c ff ff       	jmp    c000c51e <Clock::timeInSecondsLocal()>

c001291d <string_ends_with(char const*, char const*)>:
c001291d:	57                   	push   edi
c001291e:	56                   	push   esi
c001291f:	53                   	push   ebx
c0012920:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012924:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012928:	83 ec 0c             	sub    esp,0xc
c001292b:	53                   	push   ebx
c001292c:	e8 3f dc fe ff       	call   c0000570 <strlen>
c0012931:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012934:	89 c6                	mov    esi,eax
c0012936:	e8 35 dc fe ff       	call   c0000570 <strlen>
c001293b:	83 c4 10             	add    esp,0x10
c001293e:	39 c6                	cmp    esi,eax
c0012940:	7d 06                	jge    c0012948 <string_ends_with(char const*, char const*)+0x2b>
c0012942:	5b                   	pop    ebx
c0012943:	31 c0                	xor    eax,eax
c0012945:	5e                   	pop    esi
c0012946:	5f                   	pop    edi
c0012947:	c3                   	ret    
c0012948:	83 ec 08             	sub    esp,0x8
c001294b:	29 c6                	sub    esi,eax
c001294d:	57                   	push   edi
c001294e:	01 f3                	add    ebx,esi
c0012950:	53                   	push   ebx
c0012951:	e8 fa dd fe ff       	call   c0000750 <strcmp>
c0012956:	83 c4 10             	add    esp,0x10
c0012959:	85 c0                	test   eax,eax
c001295b:	5b                   	pop    ebx
c001295c:	0f 94 c0             	sete   al
c001295f:	5e                   	pop    esi
c0012960:	0f b6 c0             	movzx  eax,al
c0012963:	5f                   	pop    edi
c0012964:	c3                   	ret    

c0012965 <SysOpen(regs*)>:
c0012965:	56                   	push   esi
c0012966:	53                   	push   ebx
c0012967:	81 ec 04 01 00 00    	sub    esp,0x104
c001296d:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012974:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012977:	85 c0                	test   eax,eax
c0012979:	0f 84 bc 01 00 00    	je     c0012b3b <SysOpen(regs*)+0x1d6>
c001297f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012982:	85 c0                	test   eax,eax
c0012984:	0f 84 b1 01 00 00    	je     c0012b3b <SysOpen(regs*)+0x1d6>
c001298a:	6a 00                	push   0x0
c001298c:	68 96 26 02 c0       	push   0xc0022696
c0012991:	50                   	push   eax
c0012992:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012996:	56                   	push   esi
c0012997:	e8 bc 8e ff ff       	call   c000b858 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001299c:	89 34 24             	mov    DWORD PTR [esp],esi
c001299f:	e8 cc db fe ff       	call   c0000570 <strlen>
c00129a4:	83 c4 10             	add    esp,0x10
c00129a7:	83 e8 01             	sub    eax,0x1
c00129aa:	74 21                	je     c00129cd <SysOpen(regs*)+0x68>
c00129ac:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00129b0:	eb 12                	jmp    c00129c4 <SysOpen(regs*)+0x5f>
c00129b2:	83 fa 3a             	cmp    edx,0x3a
c00129b5:	74 12                	je     c00129c9 <SysOpen(regs*)+0x64>
c00129b7:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00129bb:	83 e8 01             	sub    eax,0x1
c00129be:	74 0d                	je     c00129cd <SysOpen(regs*)+0x68>
c00129c0:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00129c4:	83 fa 2e             	cmp    edx,0x2e
c00129c7:	75 e9                	jne    c00129b2 <SysOpen(regs*)+0x4d>
c00129c9:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00129cd:	83 ec 08             	sub    esp,0x8
c00129d0:	68 9a 26 02 c0       	push   0xc002269a
c00129d5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129d8:	50                   	push   eax
c00129d9:	e8 3f ff ff ff       	call   c001291d <string_ends_with(char const*, char const*)>
c00129de:	83 c4 10             	add    esp,0x10
c00129e1:	85 c0                	test   eax,eax
c00129e3:	74 1d                	je     c0012a02 <SysOpen(regs*)+0x9d>
c00129e5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00129e8:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00129ee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00129f5:	81 c4 04 01 00 00    	add    esp,0x104
c00129fb:	31 c0                	xor    eax,eax
c00129fd:	31 d2                	xor    edx,edx
c00129ff:	5b                   	pop    ebx
c0012a00:	5e                   	pop    esi
c0012a01:	c3                   	ret    
c0012a02:	83 ec 08             	sub    esp,0x8
c0012a05:	68 9f 26 02 c0       	push   0xc002269f
c0012a0a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a0d:	50                   	push   eax
c0012a0e:	e8 0a ff ff ff       	call   c001291d <string_ends_with(char const*, char const*)>
c0012a13:	83 c4 10             	add    esp,0x10
c0012a16:	85 c0                	test   eax,eax
c0012a18:	75 cb                	jne    c00129e5 <SysOpen(regs*)+0x80>
c0012a1a:	83 ec 08             	sub    esp,0x8
c0012a1d:	68 9b 26 02 c0       	push   0xc002269b
c0012a22:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a25:	50                   	push   eax
c0012a26:	e8 25 dd fe ff       	call   c0000750 <strcmp>
c0012a2b:	83 c4 10             	add    esp,0x10
c0012a2e:	85 c0                	test   eax,eax
c0012a30:	74 b3                	je     c00129e5 <SysOpen(regs*)+0x80>
c0012a32:	83 ec 08             	sub    esp,0x8
c0012a35:	68 9a 26 02 c0       	push   0xc002269a
c0012a3a:	56                   	push   esi
c0012a3b:	e8 dd fe ff ff       	call   c001291d <string_ends_with(char const*, char const*)>
c0012a40:	83 c4 10             	add    esp,0x10
c0012a43:	85 c0                	test   eax,eax
c0012a45:	75 9e                	jne    c00129e5 <SysOpen(regs*)+0x80>
c0012a47:	83 ec 08             	sub    esp,0x8
c0012a4a:	68 a4 26 02 c0       	push   0xc00226a4
c0012a4f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a52:	50                   	push   eax
c0012a53:	e8 c5 fe ff ff       	call   c001291d <string_ends_with(char const*, char const*)>
c0012a58:	83 c4 10             	add    esp,0x10
c0012a5b:	85 c0                	test   eax,eax
c0012a5d:	0f 85 eb 00 00 00    	jne    c0012b4e <SysOpen(regs*)+0x1e9>
c0012a63:	83 ec 08             	sub    esp,0x8
c0012a66:	68 a9 26 02 c0       	push   0xc00226a9
c0012a6b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a6e:	50                   	push   eax
c0012a6f:	e8 a9 fe ff ff       	call   c001291d <string_ends_with(char const*, char const*)>
c0012a74:	83 c4 10             	add    esp,0x10
c0012a77:	85 c0                	test   eax,eax
c0012a79:	0f 85 cf 00 00 00    	jne    c0012b4e <SysOpen(regs*)+0x1e9>
c0012a7f:	83 ec 08             	sub    esp,0x8
c0012a82:	68 a5 26 02 c0       	push   0xc00226a5
c0012a87:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012a8a:	51                   	push   ecx
c0012a8b:	e8 c0 dc fe ff       	call   c0000750 <strcmp>
c0012a90:	83 c4 10             	add    esp,0x10
c0012a93:	85 c0                	test   eax,eax
c0012a95:	0f 84 b3 00 00 00    	je     c0012b4e <SysOpen(regs*)+0x1e9>
c0012a9b:	83 ec 08             	sub    esp,0x8
c0012a9e:	68 a4 26 02 c0       	push   0xc00226a4
c0012aa3:	56                   	push   esi
c0012aa4:	e8 74 fe ff ff       	call   c001291d <string_ends_with(char const*, char const*)>
c0012aa9:	83 c4 10             	add    esp,0x10
c0012aac:	85 c0                	test   eax,eax
c0012aae:	0f 85 9a 00 00 00    	jne    c0012b4e <SysOpen(regs*)+0x1e9>
c0012ab4:	83 ec 0c             	sub    esp,0xc
c0012ab7:	68 14 01 00 00       	push   0x114
c0012abc:	e8 f9 4f ff ff       	call   c0007aba <malloc>
c0012ac1:	83 c4 0c             	add    esp,0xc
c0012ac4:	89 c6                	mov    esi,eax
c0012ac6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012acb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012ace:	50                   	push   eax
c0012acf:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012ad2:	52                   	push   edx
c0012ad3:	56                   	push   esi
c0012ad4:	e8 77 90 ff ff       	call   c000bb50 <File::File(char const*, Process*)>
c0012ad9:	83 c4 10             	add    esp,0x10
c0012adc:	85 f6                	test   esi,esi
c0012ade:	74 5b                	je     c0012b3b <SysOpen(regs*)+0x1d6>
c0012ae0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012ae3:	0f b6 c2             	movzx  eax,dl
c0012ae6:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012ae9:	89 d0                	mov    eax,edx
c0012aeb:	83 e0 01             	and    eax,0x1
c0012aee:	f6 c2 02             	test   dl,0x2
c0012af1:	74 03                	je     c0012af6 <SysOpen(regs*)+0x191>
c0012af3:	83 c8 02             	or     eax,0x2
c0012af6:	f6 c2 04             	test   dl,0x4
c0012af9:	74 03                	je     c0012afe <SysOpen(regs*)+0x199>
c0012afb:	83 c8 04             	or     eax,0x4
c0012afe:	f6 c2 08             	test   dl,0x8
c0012b01:	74 03                	je     c0012b06 <SysOpen(regs*)+0x1a1>
c0012b03:	83 c8 0a             	or     eax,0xa
c0012b06:	80 e2 10             	and    dl,0x10
c0012b09:	74 03                	je     c0012b0e <SysOpen(regs*)+0x1a9>
c0012b0b:	83 c8 12             	or     eax,0x12
c0012b0e:	83 ec 08             	sub    esp,0x8
c0012b11:	50                   	push   eax
c0012b12:	56                   	push   esi
c0012b13:	e8 56 90 ff ff       	call   c000bb6e <File::open(FileOpenMode)>
c0012b18:	83 c4 10             	add    esp,0x10
c0012b1b:	85 c0                	test   eax,eax
c0012b1d:	75 1c                	jne    c0012b3b <SysOpen(regs*)+0x1d6>
c0012b1f:	83 ec 0c             	sub    esp,0xc
c0012b22:	56                   	push   esi
c0012b23:	e8 92 66 ff ff       	call   c00091ba <UnixFile::getFileDescriptor()>
c0012b28:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012b2b:	83 c4 10             	add    esp,0x10
c0012b2e:	89 02                	mov    DWORD PTR [edx],eax
c0012b30:	c1 f8 1f             	sar    eax,0x1f
c0012b33:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012b36:	e9 ba fe ff ff       	jmp    c00129f5 <SysOpen(regs*)+0x90>
c0012b3b:	81 c4 04 01 00 00    	add    esp,0x104
c0012b41:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012b46:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012b4b:	5b                   	pop    ebx
c0012b4c:	5e                   	pop    esi
c0012b4d:	c3                   	ret    
c0012b4e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b51:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012b57:	e9 92 fe ff ff       	jmp    c00129ee <SysOpen(regs*)+0x89>

c0012b5c <KeSystemCall(regs*, void*)>:
c0012b5c:	53                   	push   ebx
c0012b5d:	83 ec 08             	sub    esp,0x8
c0012b60:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b64:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012b67:	83 f8 3e             	cmp    eax,0x3e
c0012b6a:	77 16                	ja     c0012b82 <KeSystemCall(regs*, void*)+0x26>
c0012b6c:	8b 14 85 c0 3e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc140]
c0012b73:	85 d2                	test   edx,edx
c0012b75:	74 0b                	je     c0012b82 <KeSystemCall(regs*, void*)+0x26>
c0012b77:	83 ec 0c             	sub    esp,0xc
c0012b7a:	53                   	push   ebx
c0012b7b:	ff d2                	call   edx
c0012b7d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012b80:	eb 0d                	jmp    c0012b8f <KeSystemCall(regs*, void*)+0x33>
c0012b82:	52                   	push   edx
c0012b83:	52                   	push   edx
c0012b84:	50                   	push   eax
c0012b85:	68 ae 26 02 c0       	push   0xc00226ae
c0012b8a:	e8 ba 7d ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0012b8f:	83 c4 10             	add    esp,0x10
c0012b92:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012b97:	31 d2                	xor    edx,edx
c0012b99:	83 c4 08             	add    esp,0x8
c0012b9c:	5b                   	pop    ebx
c0012b9d:	c3                   	ret    
c0012b9e:	66 90                	xchg   ax,ax

c0012ba0 <KeSwitchEndian16(unsigned short)>:
c0012ba0:	83 ec 04             	sub    esp,0x4
c0012ba3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012ba7:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012bab:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012baf:	c1 f8 08             	sar    eax,0x8
c0012bb2:	89 c2                	mov    edx,eax
c0012bb4:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012bb8:	c1 e0 08             	shl    eax,0x8
c0012bbb:	09 d0                	or     eax,edx
c0012bbd:	83 c4 04             	add    esp,0x4
c0012bc0:	c3                   	ret    
c0012bc1:	8d 76 00             	lea    esi,[esi+0x0]

c0012bc4 <KeSwitchEndian32(unsigned int)>:
c0012bc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bc8:	c1 e8 18             	shr    eax,0x18
c0012bcb:	89 c2                	mov    edx,eax
c0012bcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bd1:	c1 e0 08             	shl    eax,0x8
c0012bd4:	25 00 00 ff 00       	and    eax,0xff0000
c0012bd9:	09 c2                	or     edx,eax
c0012bdb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bdf:	c1 e8 08             	shr    eax,0x8
c0012be2:	25 00 ff 00 00       	and    eax,0xff00
c0012be7:	09 c2                	or     edx,eax
c0012be9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bed:	c1 e0 18             	shl    eax,0x18
c0012bf0:	09 d0                	or     eax,edx
c0012bf2:	c3                   	ret    
c0012bf3:	90                   	nop

c0012bf4 <EthernetCRC32(unsigned char*, int)>:
c0012bf4:	83 ec 10             	sub    esp,0x10
c0012bf7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012bfc:	75 0a                	jne    c0012c08 <EthernetCRC32(unsigned char*, int)+0x14>
c0012bfe:	b8 00 00 00 00       	mov    eax,0x0
c0012c03:	e9 8c 00 00 00       	jmp    c0012c94 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012c08:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012c0d:	7f 09                	jg     c0012c18 <EthernetCRC32(unsigned char*, int)+0x24>
c0012c0f:	b8 00 00 00 00       	mov    eax,0x0
c0012c14:	eb 7e                	jmp    c0012c94 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012c16:	66 90                	xchg   ax,ax
c0012c18:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012c20:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012c28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012c2c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012c30:	7d 5a                	jge    c0012c8c <EthernetCRC32(unsigned char*, int)+0x98>
c0012c32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c3a:	01 d0                	add    eax,edx
c0012c3c:	8a 00                	mov    al,BYTE PTR [eax]
c0012c3e:	0f b6 c0             	movzx  eax,al
c0012c41:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012c45:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0012c50:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012c55:	7f 2d                	jg     c0012c84 <EthernetCRC32(unsigned char*, int)+0x90>
c0012c57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c5b:	83 e0 01             	and    eax,0x1
c0012c5e:	74 10                	je     c0012c70 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012c60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c64:	d1 e8                	shr    eax,1
c0012c66:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012c6b:	eb 0b                	jmp    c0012c78 <EthernetCRC32(unsigned char*, int)+0x84>
c0012c6d:	8d 76 00             	lea    esi,[esi+0x0]
c0012c70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c74:	d1 e8                	shr    eax,1
c0012c76:	66 90                	xchg   ax,ax
c0012c78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012c7c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012c81:	eb cd                	jmp    c0012c50 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012c83:	90                   	nop
c0012c84:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012c89:	eb 9d                	jmp    c0012c28 <EthernetCRC32(unsigned char*, int)+0x34>
c0012c8b:	90                   	nop
c0012c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c90:	f7 d0                	not    eax
c0012c92:	66 90                	xchg   ax,ax
c0012c94:	83 c4 10             	add    esp,0x10
c0012c97:	c3                   	ret    

c0012c98 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012c98:	83 ec 2c             	sub    esp,0x2c
c0012c9b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012c9f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012ca4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ca8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012cac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012cb0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012cb3:	0f b7 c0             	movzx  eax,ax
c0012cb6:	3d 06 08 00 00       	cmp    eax,0x806
c0012cbb:	75 13                	jne    c0012cd0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012cbd:	83 ec 0c             	sub    esp,0xc
c0012cc0:	68 c2 26 02 c0       	push   0xc00226c2
c0012cc5:	e8 7f 7c ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0012cca:	83 c4 10             	add    esp,0x10
c0012ccd:	eb 25                	jmp    c0012cf4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012ccf:	90                   	nop
c0012cd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012cd4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012cd7:	0f b7 c0             	movzx  eax,ax
c0012cda:	3d 00 08 00 00       	cmp    eax,0x800
c0012cdf:	75 13                	jne    c0012cf4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012ce1:	83 ec 0c             	sub    esp,0xc
c0012ce4:	68 d8 26 02 c0       	push   0xc00226d8
c0012ce9:	e8 5b 7c ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0012cee:	83 c4 10             	add    esp,0x10
c0012cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0012cf4:	90                   	nop
c0012cf5:	83 c4 2c             	add    esp,0x2c
c0012cf8:	c3                   	ret    

c0012cf9 <CmOpen(char const*)>:
c0012cf9:	57                   	push   edi
c0012cfa:	56                   	push   esi
c0012cfb:	53                   	push   ebx
c0012cfc:	83 ec 1c             	sub    esp,0x1c
c0012cff:	6a 30                	push   0x30
c0012d01:	e8 b4 4d ff ff       	call   c0007aba <malloc>
c0012d06:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012d0d:	89 c3                	mov    ebx,eax
c0012d0f:	e8 a6 4d ff ff       	call   c0007aba <malloc>
c0012d14:	83 c4 0c             	add    esp,0xc
c0012d17:	89 c6                	mov    esi,eax
c0012d19:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012d1f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012d23:	50                   	push   eax
c0012d24:	e8 27 8e ff ff       	call   c000bb50 <File::File(char const*, Process*)>
c0012d29:	83 c4 0c             	add    esp,0xc
c0012d2c:	89 33                	mov    DWORD PTR [ebx],esi
c0012d2e:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012d32:	50                   	push   eax
c0012d33:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012d37:	50                   	push   eax
c0012d38:	56                   	push   esi
c0012d39:	e8 32 91 ff ff       	call   c000be70 <File::stat(unsigned long long*, bool*)>
c0012d3e:	5a                   	pop    edx
c0012d3f:	59                   	pop    ecx
c0012d40:	6a 01                	push   0x1
c0012d42:	ff 33                	push   DWORD PTR [ebx]
c0012d44:	e8 25 8e ff ff       	call   c000bb6e <File::open(FileOpenMode)>
c0012d49:	5e                   	pop    esi
c0012d4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d4e:	e8 67 4d ff ff       	call   c0007aba <malloc>
c0012d53:	5a                   	pop    edx
c0012d54:	89 c7                	mov    edi,eax
c0012d56:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012d5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d5c:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d5e:	56                   	push   esi
c0012d5f:	57                   	push   edi
c0012d60:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d64:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d68:	50                   	push   eax
c0012d69:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d6c:	83 c4 14             	add    esp,0x14
c0012d6f:	ff 33                	push   DWORD PTR [ebx]
c0012d71:	e8 56 8e ff ff       	call   c000bbcc <File::close()>
c0012d76:	59                   	pop    ecx
c0012d77:	58                   	pop    eax
c0012d78:	6a 13                	push   0x13
c0012d7a:	ff 33                	push   DWORD PTR [ebx]
c0012d7c:	e8 ed 8d ff ff       	call   c000bb6e <File::open(FileOpenMode)>
c0012d81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d83:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d85:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d88:	57                   	push   edi
c0012d89:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d8d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d91:	50                   	push   eax
c0012d92:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012d95:	83 c4 14             	add    esp,0x14
c0012d98:	57                   	push   edi
c0012d99:	e8 2c 4d ff ff       	call   c0007aca <free>
c0012d9e:	83 c4 10             	add    esp,0x10
c0012da1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012da4:	75 10                	jne    c0012db6 <CmOpen(char const*)+0xbd>
c0012da6:	83 ec 0c             	sub    esp,0xc
c0012da9:	68 ed 26 02 c0       	push   0xc00226ed
c0012dae:	e8 10 e9 ff ff       	call   c00116c3 <KePanic(char const*)>
c0012db3:	83 c4 10             	add    esp,0x10
c0012db6:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012db9:	50                   	push   eax
c0012dba:	6a 00                	push   0x0
c0012dbc:	6a 00                	push   0x0
c0012dbe:	ff 33                	push   DWORD PTR [ebx]
c0012dc0:	e8 67 8e ff ff       	call   c000bc2c <File::seek(unsigned long long)>
c0012dc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012dc7:	8b 10                	mov    edx,DWORD PTR [eax]
c0012dc9:	89 34 24             	mov    DWORD PTR [esp],esi
c0012dcc:	57                   	push   edi
c0012dcd:	6a 00                	push   0x0
c0012dcf:	6a 2b                	push   0x2b
c0012dd1:	50                   	push   eax
c0012dd2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012dd5:	83 c4 1c             	add    esp,0x1c
c0012dd8:	6a 00                	push   0x0
c0012dda:	6a 00                	push   0x0
c0012ddc:	ff 33                	push   DWORD PTR [ebx]
c0012dde:	e8 49 8e ff ff       	call   c000bc2c <File::seek(unsigned long long)>
c0012de3:	83 c4 0c             	add    esp,0xc
c0012de6:	6a 08                	push   0x8
c0012de8:	68 fe 26 02 c0       	push   0xc00226fe
c0012ded:	57                   	push   edi
c0012dee:	e8 8d d5 fe ff       	call   c0000380 <memcmp>
c0012df3:	83 c4 10             	add    esp,0x10
c0012df6:	85 c0                	test   eax,eax
c0012df8:	74 10                	je     c0012e0a <CmOpen(char const*)+0x111>
c0012dfa:	83 ec 0c             	sub    esp,0xc
c0012dfd:	68 07 27 02 c0       	push   0xc0022707
c0012e02:	e8 bc e8 ff ff       	call   c00116c3 <KePanic(char const*)>
c0012e07:	83 c4 10             	add    esp,0x10
c0012e0a:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012e0e:	89 d8                	mov    eax,ebx
c0012e10:	83 c4 10             	add    esp,0x10
c0012e13:	5b                   	pop    ebx
c0012e14:	5e                   	pop    esi
c0012e15:	5f                   	pop    edi
c0012e16:	c3                   	ret    

c0012e17 <CmClose(Reghive_Tag*)>:
c0012e17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e1b:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012e1f:	74 0b                	je     c0012e2c <CmClose(Reghive_Tag*)+0x15>
c0012e21:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e27:	e9 a0 8d ff ff       	jmp    c000bbcc <File::close()>
c0012e2c:	c3                   	ret    

c0012e2d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012e2d:	53                   	push   ebx
c0012e2e:	83 ec 18             	sub    esp,0x18
c0012e31:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012e35:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012e39:	74 29                	je     c0012e64 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012e3b:	50                   	push   eax
c0012e3c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012e41:	99                   	cdq    
c0012e42:	52                   	push   edx
c0012e43:	50                   	push   eax
c0012e44:	ff 33                	push   DWORD PTR [ebx]
c0012e46:	e8 e1 8d ff ff       	call   c000bc2c <File::seek(unsigned long long)>
c0012e4b:	5a                   	pop    edx
c0012e4c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e4e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012e52:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e54:	51                   	push   ecx
c0012e55:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e59:	6a 00                	push   0x0
c0012e5b:	6a 2b                	push   0x2b
c0012e5d:	50                   	push   eax
c0012e5e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012e61:	83 c4 20             	add    esp,0x20
c0012e64:	83 c4 18             	add    esp,0x18
c0012e67:	5b                   	pop    ebx
c0012e68:	c3                   	ret    

c0012e69 <CmGetString(Reghive_Tag*, int, char*)>:
c0012e69:	55                   	push   ebp
c0012e6a:	57                   	push   edi
c0012e6b:	56                   	push   esi
c0012e6c:	53                   	push   ebx
c0012e6d:	31 db                	xor    ebx,ebx
c0012e6f:	83 ec 70             	sub    esp,0x70
c0012e72:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012e79:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012e7d:	50                   	push   eax
c0012e7e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012e85:	55                   	push   ebp
c0012e86:	e8 a2 ff ff ff       	call   c0012e2d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e8b:	83 c4 10             	add    esp,0x10
c0012e8e:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012e93:	c1 e0 08             	shl    eax,0x8
c0012e96:	89 c2                	mov    edx,eax
c0012e98:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012e9d:	09 d0                	or     eax,edx
c0012e9f:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012ea4:	c1 e0 08             	shl    eax,0x8
c0012ea7:	09 d0                	or     eax,edx
c0012ea9:	74 25                	je     c0012ed0 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012eab:	6b fb 0d             	imul   edi,ebx,0xd
c0012eae:	52                   	push   edx
c0012eaf:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012eb3:	52                   	push   edx
c0012eb4:	50                   	push   eax
c0012eb5:	55                   	push   ebp
c0012eb6:	e8 72 ff ff ff       	call   c0012e2d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ebb:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012ebf:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012ec6:	b9 27 00 00 00       	mov    ecx,0x27
c0012ecb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ecd:	83 c4 10             	add    esp,0x10
c0012ed0:	83 c3 03             	add    ebx,0x3
c0012ed3:	83 fb 15             	cmp    ebx,0x15
c0012ed6:	75 b6                	jne    c0012e8e <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012ed8:	83 c4 6c             	add    esp,0x6c
c0012edb:	5b                   	pop    ebx
c0012edc:	5e                   	pop    esi
c0012edd:	5f                   	pop    edi
c0012ede:	5d                   	pop    ebp
c0012edf:	c3                   	ret    

c0012ee0 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012ee0:	83 ec 40             	sub    esp,0x40
c0012ee3:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012ee7:	50                   	push   eax
c0012ee8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012eec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ef0:	e8 38 ff ff ff       	call   c0012e2d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ef5:	83 c4 10             	add    esp,0x10
c0012ef8:	83 c8 ff             	or     eax,0xffffffff
c0012efb:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012f00:	75 19                	jne    c0012f1b <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012f02:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012f07:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012f0c:	c1 e0 08             	shl    eax,0x8
c0012f0f:	09 c2                	or     edx,eax
c0012f11:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012f16:	c1 e0 10             	shl    eax,0x10
c0012f19:	09 d0                	or     eax,edx
c0012f1b:	83 c4 3c             	add    esp,0x3c
c0012f1e:	c3                   	ret    

c0012f1f <CmGetNext(Reghive_Tag*, int)>:
c0012f1f:	83 ec 40             	sub    esp,0x40
c0012f22:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012f26:	50                   	push   eax
c0012f27:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f2b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f2f:	e8 f9 fe ff ff       	call   c0012e2d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f34:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012f39:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012f3e:	c1 e0 08             	shl    eax,0x8
c0012f41:	09 c2                	or     edx,eax
c0012f43:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012f48:	83 c4 4c             	add    esp,0x4c
c0012f4b:	c1 e0 10             	shl    eax,0x10
c0012f4e:	09 d0                	or     eax,edx
c0012f50:	c3                   	ret    

c0012f51 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012f51:	53                   	push   ebx
c0012f52:	83 ec 18             	sub    esp,0x18
c0012f55:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012f59:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012f5d:	74 29                	je     c0012f88 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012f5f:	50                   	push   eax
c0012f60:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012f65:	99                   	cdq    
c0012f66:	52                   	push   edx
c0012f67:	50                   	push   eax
c0012f68:	ff 33                	push   DWORD PTR [ebx]
c0012f6a:	e8 bd 8c ff ff       	call   c000bc2c <File::seek(unsigned long long)>
c0012f6f:	5a                   	pop    edx
c0012f70:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f72:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012f76:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f78:	51                   	push   ecx
c0012f79:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012f7d:	6a 00                	push   0x0
c0012f7f:	6a 2b                	push   0x2b
c0012f81:	50                   	push   eax
c0012f82:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012f85:	83 c4 20             	add    esp,0x20
c0012f88:	83 c4 18             	add    esp,0x18
c0012f8b:	5b                   	pop    ebx
c0012f8c:	c3                   	ret    

c0012f8d <CmFreeExtent(Reghive_Tag*, int)>:
c0012f8d:	53                   	push   ebx
c0012f8e:	83 ec 3c             	sub    esp,0x3c
c0012f91:	6a 2b                	push   0x2b
c0012f93:	6a 00                	push   0x0
c0012f95:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012f99:	53                   	push   ebx
c0012f9a:	e8 51 d5 fe ff       	call   c00004f0 <memset>
c0012f9f:	83 c4 0c             	add    esp,0xc
c0012fa2:	53                   	push   ebx
c0012fa3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012fa7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012fab:	e8 a1 ff ff ff       	call   c0012f51 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012fb0:	83 c4 48             	add    esp,0x48
c0012fb3:	5b                   	pop    ebx
c0012fb4:	c3                   	ret    

c0012fb5 <CmUpdateHeader(Reghive_Tag*)>:
c0012fb5:	83 ec 0c             	sub    esp,0xc
c0012fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fbc:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012fc0:	74 10                	je     c0012fd2 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012fc2:	52                   	push   edx
c0012fc3:	8d 50 05             	lea    edx,[eax+0x5]
c0012fc6:	52                   	push   edx
c0012fc7:	6a 00                	push   0x0
c0012fc9:	50                   	push   eax
c0012fca:	e8 82 ff ff ff       	call   c0012f51 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012fcf:	83 c4 10             	add    esp,0x10
c0012fd2:	83 c4 0c             	add    esp,0xc
c0012fd5:	c3                   	ret    

c0012fd6 <CmExpand(Reghive_Tag*, int)>:
c0012fd6:	57                   	push   edi
c0012fd7:	56                   	push   esi
c0012fd8:	83 ce ff             	or     esi,0xffffffff
c0012fdb:	53                   	push   ebx
c0012fdc:	83 ec 30             	sub    esp,0x30
c0012fdf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012fe3:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012fe7:	74 5f                	je     c0013048 <CmExpand(Reghive_Tag*, int)+0x72>
c0012fe9:	31 d2                	xor    edx,edx
c0012feb:	31 f6                	xor    esi,esi
c0012fed:	50                   	push   eax
c0012fee:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012ff2:	52                   	push   edx
c0012ff3:	50                   	push   eax
c0012ff4:	ff 33                	push   DWORD PTR [ebx]
c0012ff6:	e8 31 8c ff ff       	call   c000bc2c <File::seek(unsigned long long)>
c0012ffb:	83 c4 0c             	add    esp,0xc
c0012ffe:	6a 2b                	push   0x2b
c0013000:	6a 00                	push   0x0
c0013002:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0013006:	57                   	push   edi
c0013007:	e8 e4 d4 fe ff       	call   c00004f0 <memset>
c001300c:	83 c4 10             	add    esp,0x10
c001300f:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0013013:	7d 1b                	jge    c0013030 <CmExpand(Reghive_Tag*, int)+0x5a>
c0013015:	83 ec 0c             	sub    esp,0xc
c0013018:	8b 03                	mov    eax,DWORD PTR [ebx]
c001301a:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c001301e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013020:	46                   	inc    esi
c0013021:	51                   	push   ecx
c0013022:	57                   	push   edi
c0013023:	6a 00                	push   0x0
c0013025:	6a 2b                	push   0x2b
c0013027:	50                   	push   eax
c0013028:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001302b:	83 c4 20             	add    esp,0x20
c001302e:	eb df                	jmp    c001300f <CmExpand(Reghive_Tag*, int)+0x39>
c0013030:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013034:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0013037:	83 ec 0c             	sub    esp,0xc
c001303a:	01 f2                	add    edx,esi
c001303c:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c001303f:	53                   	push   ebx
c0013040:	e8 70 ff ff ff       	call   c0012fb5 <CmUpdateHeader(Reghive_Tag*)>
c0013045:	83 c4 10             	add    esp,0x10
c0013048:	83 c4 30             	add    esp,0x30
c001304b:	89 f0                	mov    eax,esi
c001304d:	5b                   	pop    ebx
c001304e:	5e                   	pop    esi
c001304f:	5f                   	pop    edi
c0013050:	c3                   	ret    

c0013051 <CmFindUnusedExtent(Reghive_Tag*)>:
c0013051:	55                   	push   ebp
c0013052:	57                   	push   edi
c0013053:	56                   	push   esi
c0013054:	53                   	push   ebx
c0013055:	83 cb ff             	or     ebx,0xffffffff
c0013058:	83 ec 1c             	sub    esp,0x1c
c001305b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001305f:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0013063:	74 68                	je     c00130cd <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0013065:	be 2b 00 00 00       	mov    esi,0x2b
c001306a:	51                   	push   ecx
c001306b:	31 ff                	xor    edi,edi
c001306d:	6a 00                	push   0x0
c001306f:	31 db                	xor    ebx,ebx
c0013071:	6a 00                	push   0x0
c0013073:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0013076:	e8 b1 8b ff ff       	call   c000bc2c <File::seek(unsigned long long)>
c001307b:	83 c4 10             	add    esp,0x10
c001307e:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0013081:	76 3b                	jbe    c00130be <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0013083:	83 ec 0c             	sub    esp,0xc
c0013086:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013089:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001308d:	8b 10                	mov    edx,DWORD PTR [eax]
c001308f:	51                   	push   ecx
c0013090:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0013094:	51                   	push   ecx
c0013095:	6a 00                	push   0x0
c0013097:	6a 01                	push   0x1
c0013099:	50                   	push   eax
c001309a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001309d:	83 c4 20             	add    esp,0x20
c00130a0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00130a5:	74 26                	je     c00130cd <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00130a7:	43                   	inc    ebx
c00130a8:	52                   	push   edx
c00130a9:	57                   	push   edi
c00130aa:	56                   	push   esi
c00130ab:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00130ae:	e8 79 8b ff ff       	call   c000bc2c <File::seek(unsigned long long)>
c00130b3:	83 c6 2b             	add    esi,0x2b
c00130b6:	83 d7 00             	adc    edi,0x0
c00130b9:	83 c4 10             	add    esp,0x10
c00130bc:	eb c0                	jmp    c001307e <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c00130be:	50                   	push   eax
c00130bf:	50                   	push   eax
c00130c0:	6a 40                	push   0x40
c00130c2:	55                   	push   ebp
c00130c3:	e8 0e ff ff ff       	call   c0012fd6 <CmExpand(Reghive_Tag*, int)>
c00130c8:	83 c4 10             	add    esp,0x10
c00130cb:	89 c3                	mov    ebx,eax
c00130cd:	83 c4 1c             	add    esp,0x1c
c00130d0:	89 d8                	mov    eax,ebx
c00130d2:	5b                   	pop    ebx
c00130d3:	5e                   	pop    esi
c00130d4:	5f                   	pop    edi
c00130d5:	5d                   	pop    ebp
c00130d6:	c3                   	ret    

c00130d7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00130d7:	55                   	push   ebp
c00130d8:	57                   	push   edi
c00130d9:	56                   	push   esi
c00130da:	53                   	push   ebx
c00130db:	81 ec 88 00 00 00    	sub    esp,0x88
c00130e1:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00130e8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130ef:	e8 5d ff ff ff       	call   c0013051 <CmFindUnusedExtent(Reghive_Tag*)>
c00130f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00130f8:	83 c4 0c             	add    esp,0xc
c00130fb:	6a 2b                	push   0x2b
c00130fd:	6a 00                	push   0x0
c00130ff:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0013103:	55                   	push   ebp
c0013104:	e8 e7 d3 fe ff       	call   c00004f0 <memset>
c0013109:	83 c4 10             	add    esp,0x10
c001310c:	85 db                	test   ebx,ebx
c001310e:	74 12                	je     c0013122 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0013110:	51                   	push   ecx
c0013111:	55                   	push   ebp
c0013112:	53                   	push   ebx
c0013113:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001311a:	e8 0e fd ff ff       	call   c0012e2d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001311f:	83 c4 10             	add    esp,0x10
c0013122:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0013126:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c001312d:	b9 2b 00 00 00       	mov    ecx,0x2b
c0013132:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013134:	85 db                	test   ebx,ebx
c0013136:	74 49                	je     c0013181 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0013138:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c001313d:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0013142:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013146:	c1 e0 08             	shl    eax,0x8
c0013149:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001314f:	09 c8                	or     eax,ecx
c0013151:	74 11                	je     c0013164 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0013153:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0013157:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c001315b:	c1 e8 10             	shr    eax,0x10
c001315e:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0013162:	eb 0f                	jmp    c0013173 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0013164:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0013169:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001316e:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0013173:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0013177:	c1 ea 08             	shr    edx,0x8
c001317a:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001317f:	eb 0f                	jmp    c0013190 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0013181:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0013186:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001318b:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0013190:	52                   	push   edx
c0013191:	8d 44 24 49          	lea    eax,[esp+0x49]
c0013195:	50                   	push   eax
c0013196:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001319a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00131a1:	e8 ab fd ff ff       	call   c0012f51 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00131a6:	83 c4 10             	add    esp,0x10
c00131a9:	85 db                	test   ebx,ebx
c00131ab:	74 12                	je     c00131bf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c00131ad:	50                   	push   eax
c00131ae:	55                   	push   ebp
c00131af:	53                   	push   ebx
c00131b0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00131b7:	e8 95 fd ff ff       	call   c0012f51 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00131bc:	83 c4 10             	add    esp,0x10
c00131bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00131c3:	83 c4 7c             	add    esp,0x7c
c00131c6:	5b                   	pop    ebx
c00131c7:	5e                   	pop    esi
c00131c8:	5f                   	pop    edi
c00131c9:	5d                   	pop    ebp
c00131ca:	c3                   	ret    

c00131cb <CmSetString(Reghive_Tag*, int, char const*)>:
c00131cb:	55                   	push   ebp
c00131cc:	57                   	push   edi
c00131cd:	56                   	push   esi
c00131ce:	53                   	push   ebx
c00131cf:	bb 27 00 00 00       	mov    ebx,0x27
c00131d4:	81 ec 88 00 00 00    	sub    esp,0x88
c00131da:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00131e1:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00131e8:	e8 83 d3 fe ff       	call   c0000570 <strlen>
c00131ed:	8d 48 26             	lea    ecx,[eax+0x26]
c00131f0:	89 c8                	mov    eax,ecx
c00131f2:	99                   	cdq    
c00131f3:	f7 fb                	idiv   ebx
c00131f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00131f9:	83 c4 10             	add    esp,0x10
c00131fc:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0013202:	7e 10                	jle    c0013214 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0013204:	83 ec 0c             	sub    esp,0xc
c0013207:	68 18 27 02 c0       	push   0xc0022718
c001320c:	e8 b2 e4 ff ff       	call   c00116c3 <KePanic(char const*)>
c0013211:	83 c4 10             	add    esp,0x10
c0013214:	31 ff                	xor    edi,edi
c0013216:	50                   	push   eax
c0013217:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c001321b:	53                   	push   ebx
c001321c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013223:	56                   	push   esi
c0013224:	e8 04 fc ff ff       	call   c0012e2d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013229:	83 c4 10             	add    esp,0x10
c001322c:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0013230:	89 d0                	mov    eax,edx
c0013232:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0013236:	c1 e0 08             	shl    eax,0x8
c0013239:	09 c2                	or     edx,eax
c001323b:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c001323f:	c1 e2 08             	shl    edx,0x8
c0013242:	09 c2                	or     edx,eax
c0013244:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0013248:	7e 76                	jle    c00132c0 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c001324a:	85 d2                	test   edx,edx
c001324c:	75 25                	jne    c0013273 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c001324e:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0013253:	8d 44 24 45          	lea    eax,[esp+0x45]
c0013257:	50                   	push   eax
c0013258:	6a 00                	push   0x0
c001325a:	6a 00                	push   0x0
c001325c:	56                   	push   esi
c001325d:	e8 75 fe ff ff       	call   c00130d7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013262:	83 c4 10             	add    esp,0x10
c0013265:	89 c2                	mov    edx,eax
c0013267:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c001326a:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c001326d:	c1 f8 10             	sar    eax,0x10
c0013270:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0013273:	55                   	push   ebp
c0013274:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0013278:	55                   	push   ebp
c0013279:	52                   	push   edx
c001327a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001327e:	56                   	push   esi
c001327f:	e8 a9 fb ff ff       	call   c0012e2d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013284:	83 c4 0c             	add    esp,0xc
c0013287:	6a 27                	push   0x27
c0013289:	6a 00                	push   0x0
c001328b:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001328f:	51                   	push   ecx
c0013290:	e8 5b d2 fe ff       	call   c00004f0 <memset>
c0013295:	83 c4 0c             	add    esp,0xc
c0013298:	6b c7 27             	imul   eax,edi,0x27
c001329b:	6a 27                	push   0x27
c001329d:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c00132a4:	50                   	push   eax
c00132a5:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00132a9:	51                   	push   ecx
c00132aa:	e8 d1 d3 fe ff       	call   c0000680 <strncpy>
c00132af:	83 c4 0c             	add    esp,0xc
c00132b2:	55                   	push   ebp
c00132b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00132b7:	52                   	push   edx
c00132b8:	56                   	push   esi
c00132b9:	e8 93 fc ff ff       	call   c0012f51 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00132be:	eb 19                	jmp    c00132d9 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c00132c0:	85 d2                	test   edx,edx
c00132c2:	74 18                	je     c00132dc <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c00132c4:	51                   	push   ecx
c00132c5:	51                   	push   ecx
c00132c6:	52                   	push   edx
c00132c7:	56                   	push   esi
c00132c8:	e8 c0 fc ff ff       	call   c0012f8d <CmFreeExtent(Reghive_Tag*, int)>
c00132cd:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c00132d1:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00132d5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00132d9:	83 c4 10             	add    esp,0x10
c00132dc:	47                   	inc    edi
c00132dd:	83 c3 03             	add    ebx,0x3
c00132e0:	83 ff 07             	cmp    edi,0x7
c00132e3:	0f 85 43 ff ff ff    	jne    c001322c <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00132e9:	50                   	push   eax
c00132ea:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00132ee:	50                   	push   eax
c00132ef:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00132f6:	56                   	push   esi
c00132f7:	e8 55 fc ff ff       	call   c0012f51 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00132fc:	81 c4 8c 00 00 00    	add    esp,0x8c
c0013302:	5b                   	pop    ebx
c0013303:	5e                   	pop    esi
c0013304:	5f                   	pop    edi
c0013305:	5d                   	pop    ebp
c0013306:	c3                   	ret    

c0013307 <CmGetMatch(char*, char*, bool, bool*)>:
c0013307:	56                   	push   esi
c0013308:	53                   	push   ebx
c0013309:	50                   	push   eax
c001330a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001330e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013313:	74 25                	je     c001333a <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0013315:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013318:	31 db                	xor    ebx,ebx
c001331a:	50                   	push   eax
c001331b:	50                   	push   eax
c001331c:	8d 04 9d c0 3f 02 c0 	lea    eax,[ebx*4-0x3ffdc040]
c0013323:	50                   	push   eax
c0013324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013328:	e8 23 d4 fe ff       	call   c0000750 <strcmp>
c001332d:	83 c4 10             	add    esp,0x10
c0013330:	85 c0                	test   eax,eax
c0013332:	74 2e                	je     c0013362 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013334:	43                   	inc    ebx
c0013335:	83 fb 3f             	cmp    ebx,0x3f
c0013338:	75 e0                	jne    c001331a <CmGetMatch(char*, char*, bool, bool*)+0x13>
c001333a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001333d:	31 db                	xor    ebx,ebx
c001333f:	8d 04 9d c0 3f 02 c0 	lea    eax,[ebx*4-0x3ffdc040]
c0013346:	51                   	push   ecx
c0013347:	51                   	push   ecx
c0013348:	50                   	push   eax
c0013349:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001334d:	e8 fe d3 fe ff       	call   c0000750 <strcmp>
c0013352:	83 c4 10             	add    esp,0x10
c0013355:	85 c0                	test   eax,eax
c0013357:	74 09                	je     c0013362 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013359:	43                   	inc    ebx
c001335a:	83 fb 3f             	cmp    ebx,0x3f
c001335d:	75 e0                	jne    c001333f <CmGetMatch(char*, char*, bool, bool*)+0x38>
c001335f:	83 cb ff             	or     ebx,0xffffffff
c0013362:	89 d8                	mov    eax,ebx
c0013364:	5a                   	pop    edx
c0013365:	5b                   	pop    ebx
c0013366:	5e                   	pop    esi
c0013367:	c3                   	ret    

c0013368 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0013368:	55                   	push   ebp
c0013369:	31 c0                	xor    eax,eax
c001336b:	57                   	push   edi
c001336c:	56                   	push   esi
c001336d:	53                   	push   ebx
c001336e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013372:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013376:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013378:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001337c:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c001337f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013383:	83 fd 1f             	cmp    ebp,0x1f
c0013386:	7f 0b                	jg     c0013393 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0013388:	0f b6 c2             	movzx  eax,dl
c001338b:	d3 e0                	shl    eax,cl
c001338d:	09 07                	or     DWORD PTR [edi],eax
c001338f:	b0 01                	mov    al,0x1
c0013391:	01 33                	add    DWORD PTR [ebx],esi
c0013393:	5b                   	pop    ebx
c0013394:	5e                   	pop    esi
c0013395:	5f                   	pop    edi
c0013396:	5d                   	pop    ebp
c0013397:	c3                   	ret    

c0013398 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0013398:	57                   	push   edi
c0013399:	56                   	push   esi
c001339a:	53                   	push   ebx
c001339b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001339f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00133a3:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00133a7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00133ab:	39 0b                	cmp    DWORD PTR [ebx],ecx
c00133ad:	7c 17                	jl     c00133c6 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c00133af:	8b 17                	mov    edx,DWORD PTR [edi]
c00133b1:	b8 01 00 00 00       	mov    eax,0x1
c00133b6:	d3 e0                	shl    eax,cl
c00133b8:	48                   	dec    eax
c00133b9:	21 d0                	and    eax,edx
c00133bb:	d3 ea                	shr    edx,cl
c00133bd:	89 17                	mov    DWORD PTR [edi],edx
c00133bf:	29 0b                	sub    DWORD PTR [ebx],ecx
c00133c1:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00133c4:	eb 05                	jmp    c00133cb <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c00133c6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00133c9:	31 c0                	xor    eax,eax
c00133cb:	5b                   	pop    ebx
c00133cc:	5e                   	pop    esi
c00133cd:	5f                   	pop    edi
c00133ce:	c3                   	ret    

c00133cf <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c00133cf:	83 ec 40             	sub    esp,0x40
c00133d2:	8d 44 24 09          	lea    eax,[esp+0x9]
c00133d6:	50                   	push   eax
c00133d7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00133db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00133df:	e8 49 fa ff ff       	call   c0012e2d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00133e4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00133e8:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00133ec:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00133f0:	89 10                	mov    DWORD PTR [eax],edx
c00133f2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00133f5:	83 c4 4c             	add    esp,0x4c
c00133f8:	c3                   	ret    

c00133f9 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00133f9:	55                   	push   ebp
c00133fa:	57                   	push   edi
c00133fb:	56                   	push   esi
c00133fc:	53                   	push   ebx
c00133fd:	83 ec 40             	sub    esp,0x40
c0013400:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0013404:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0013408:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c001340c:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0013410:	53                   	push   ebx
c0013411:	56                   	push   esi
c0013412:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013416:	e8 12 fa ff ff       	call   c0012e2d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001341b:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c001341f:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0013423:	83 c4 0c             	add    esp,0xc
c0013426:	53                   	push   ebx
c0013427:	56                   	push   esi
c0013428:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001342c:	e8 20 fb ff ff       	call   c0012f51 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013431:	83 c4 4c             	add    esp,0x4c
c0013434:	5b                   	pop    ebx
c0013435:	5e                   	pop    esi
c0013436:	5f                   	pop    edi
c0013437:	5d                   	pop    ebp
c0013438:	c3                   	ret    

c0013439 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0013439:	55                   	push   ebp
c001343a:	57                   	push   edi
c001343b:	56                   	push   esi
c001343c:	31 f6                	xor    esi,esi
c001343e:	53                   	push   ebx
c001343f:	31 db                	xor    ebx,ebx
c0013441:	83 ec 40             	sub    esp,0x40
c0013444:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001344c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013454:	6a 12                	push   0x12
c0013456:	68 ee 00 00 00       	push   0xee
c001345b:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001345f:	e8 8c d0 fe ff       	call   c00004f0 <memset>
c0013464:	83 c4 10             	add    esp,0x10
c0013467:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001346b:	6a 08                	push   0x8
c001346d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013471:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0013475:	50                   	push   eax
c0013476:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001347a:	55                   	push   ebp
c001347b:	57                   	push   edi
c001347c:	e8 e7 fe ff ff       	call   c0013368 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013481:	83 c4 10             	add    esp,0x10
c0013484:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013488:	50                   	push   eax
c0013489:	6a 06                	push   0x6
c001348b:	55                   	push   ebp
c001348c:	57                   	push   edi
c001348d:	e8 06 ff ff ff       	call   c0013398 <CmGetShift(unsigned int*, int*, int, bool*)>
c0013492:	83 c4 10             	add    esp,0x10
c0013495:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001349a:	74 07                	je     c00134a3 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c001349c:	46                   	inc    esi
c001349d:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c00134a1:	eb e1                	jmp    c0013484 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c00134a3:	43                   	inc    ebx
c00134a4:	83 fb 12             	cmp    ebx,0x12
c00134a7:	75 c2                	jne    c001346b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c00134a9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00134ad:	31 db                	xor    ebx,ebx
c00134af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00134b2:	50                   	push   eax
c00134b3:	50                   	push   eax
c00134b4:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c00134b9:	43                   	inc    ebx
c00134ba:	8d 04 85 c0 3f 02 c0 	lea    eax,[eax*4-0x3ffdc040]
c00134c1:	50                   	push   eax
c00134c2:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00134c6:	e8 75 d3 fe ff       	call   c0000840 <strcat>
c00134cb:	83 c4 10             	add    esp,0x10
c00134ce:	83 fb 18             	cmp    ebx,0x18
c00134d1:	75 df                	jne    c00134b2 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c00134d3:	83 c4 3c             	add    esp,0x3c
c00134d6:	31 c0                	xor    eax,eax
c00134d8:	5b                   	pop    ebx
c00134d9:	5e                   	pop    esi
c00134da:	5f                   	pop    edi
c00134db:	5d                   	pop    ebp
c00134dc:	c3                   	ret    

c00134dd <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00134dd:	83 ec 40             	sub    esp,0x40
c00134e0:	8d 44 24 09          	lea    eax,[esp+0x9]
c00134e4:	50                   	push   eax
c00134e5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00134e9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00134ed:	e8 3b f9 ff ff       	call   c0012e2d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00134f2:	58                   	pop    eax
c00134f3:	5a                   	pop    edx
c00134f4:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00134f8:	8d 44 24 15          	lea    eax,[esp+0x15]
c00134fc:	50                   	push   eax
c00134fd:	e8 37 ff ff ff       	call   c0013439 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0013502:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0013507:	83 c4 4c             	add    esp,0x4c
c001350a:	c3                   	ret    

c001350b <CmConvertToInternalFilename(char const*, unsigned char*)>:
c001350b:	55                   	push   ebp
c001350c:	57                   	push   edi
c001350d:	56                   	push   esi
c001350e:	53                   	push   ebx
c001350f:	31 db                	xor    ebx,ebx
c0013511:	83 ec 70             	sub    esp,0x70
c0013514:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c001351b:	6a 30                	push   0x30
c001351d:	6a 00                	push   0x0
c001351f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013523:	56                   	push   esi
c0013524:	e8 c7 cf fe ff       	call   c00004f0 <memset>
c0013529:	83 c4 10             	add    esp,0x10
c001352c:	83 ec 0c             	sub    esp,0xc
c001352f:	57                   	push   edi
c0013530:	e8 3b d0 fe ff       	call   c0000570 <strlen>
c0013535:	83 c4 10             	add    esp,0x10
c0013538:	39 d8                	cmp    eax,ebx
c001353a:	76 16                	jbe    c0013552 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c001353c:	83 ec 0c             	sub    esp,0xc
c001353f:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0013543:	50                   	push   eax
c0013544:	e8 e7 d3 fe ff       	call   c0000930 <toupper>
c0013549:	83 c4 10             	add    esp,0x10
c001354c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001354f:	43                   	inc    ebx
c0013550:	eb da                	jmp    c001352c <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0013552:	31 f6                	xor    esi,esi
c0013554:	52                   	push   edx
c0013555:	31 ff                	xor    edi,edi
c0013557:	6a 18                	push   0x18
c0013559:	6a 3f                	push   0x3f
c001355b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001355f:	50                   	push   eax
c0013560:	e8 8b cf fe ff       	call   c00004f0 <memset>
c0013565:	83 c4 10             	add    esp,0x10
c0013568:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c001356c:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0013570:	84 c0                	test   al,al
c0013572:	0f 84 b0 00 00 00    	je     c0013628 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0013578:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c001357c:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0013581:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013585:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c001358a:	8d 6e 01             	lea    ebp,[esi+0x1]
c001358d:	83 ec 0c             	sub    esp,0xc
c0013590:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0013594:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0013598:	53                   	push   ebx
c0013599:	e8 d2 cf fe ff       	call   c0000570 <strlen>
c001359e:	83 c4 10             	add    esp,0x10
c00135a1:	85 c0                	test   eax,eax
c00135a3:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00135a7:	74 0b                	je     c00135b4 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00135a9:	50                   	push   eax
c00135aa:	6a 01                	push   0x1
c00135ac:	53                   	push   ebx
c00135ad:	8d 44 24 20          	lea    eax,[esp+0x20]
c00135b1:	50                   	push   eax
c00135b2:	eb 0a                	jmp    c00135be <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00135b4:	50                   	push   eax
c00135b5:	6a 00                	push   0x0
c00135b7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00135bb:	50                   	push   eax
c00135bc:	6a 00                	push   0x0
c00135be:	e8 44 fd ff ff       	call   c0013307 <CmGetMatch(char*, char*, bool, bool*)>
c00135c3:	83 c4 10             	add    esp,0x10
c00135c6:	83 f8 ff             	cmp    eax,0xffffffff
c00135c9:	75 1a                	jne    c00135e5 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00135cb:	83 ec 0c             	sub    esp,0xc
c00135ce:	68 2d 27 02 c0       	push   0xc002272d
c00135d3:	e8 eb e0 ff ff       	call   c00116c3 <KePanic(char const*)>
c00135d8:	83 c4 10             	add    esp,0x10
c00135db:	b8 02 00 00 00       	mov    eax,0x2
c00135e0:	e9 bc 00 00 00       	jmp    c00136a1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00135e5:	83 ff 18             	cmp    edi,0x18
c00135e8:	75 1a                	jne    c0013604 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00135ea:	83 ec 0c             	sub    esp,0xc
c00135ed:	68 42 27 02 c0       	push   0xc0022742
c00135f2:	e8 cc e0 ff ff       	call   c00116c3 <KePanic(char const*)>
c00135f7:	83 c4 10             	add    esp,0x10
c00135fa:	b8 01 00 00 00       	mov    eax,0x1
c00135ff:	e9 9d 00 00 00       	jmp    c00136a1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013604:	47                   	inc    edi
c0013605:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001360a:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c001360e:	74 02                	je     c0013612 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0013610:	89 ee                	mov    esi,ebp
c0013612:	83 ec 0c             	sub    esp,0xc
c0013615:	53                   	push   ebx
c0013616:	e8 55 cf fe ff       	call   c0000570 <strlen>
c001361b:	83 c4 10             	add    esp,0x10
c001361e:	85 c0                	test   eax,eax
c0013620:	74 06                	je     c0013628 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0013622:	46                   	inc    esi
c0013623:	e9 40 ff ff ff       	jmp    c0013568 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0013628:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013630:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013638:	31 f6                	xor    esi,esi
c001363a:	50                   	push   eax
c001363b:	31 ff                	xor    edi,edi
c001363d:	6a 12                	push   0x12
c001363f:	68 ee 00 00 00       	push   0xee
c0013644:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001364b:	e8 a0 ce fe ff       	call   c00004f0 <memset>
c0013650:	83 c4 10             	add    esp,0x10
c0013653:	83 fe 17             	cmp    esi,0x17
c0013656:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001365a:	7e 26                	jle    c0013682 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c001365c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013660:	50                   	push   eax
c0013661:	6a 08                	push   0x8
c0013663:	55                   	push   ebp
c0013664:	53                   	push   ebx
c0013665:	e8 2e fd ff ff       	call   c0013398 <CmGetShift(unsigned int*, int*, int, bool*)>
c001366a:	83 c4 10             	add    esp,0x10
c001366d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013672:	74 26                	je     c001369a <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0013674:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c001367b:	4e                   	dec    esi
c001367c:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c001367f:	47                   	inc    edi
c0013680:	eb 1c                	jmp    c001369e <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0013682:	6a 06                	push   0x6
c0013684:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0013689:	50                   	push   eax
c001368a:	55                   	push   ebp
c001368b:	53                   	push   ebx
c001368c:	e8 d7 fc ff ff       	call   c0013368 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013691:	83 c4 10             	add    esp,0x10
c0013694:	84 c0                	test   al,al
c0013696:	75 06                	jne    c001369e <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0013698:	eb c2                	jmp    c001365c <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c001369a:	31 c0                	xor    eax,eax
c001369c:	eb 03                	jmp    c00136a1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001369e:	46                   	inc    esi
c001369f:	eb b2                	jmp    c0013653 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c00136a1:	83 c4 6c             	add    esp,0x6c
c00136a4:	5b                   	pop    ebx
c00136a5:	5e                   	pop    esi
c00136a6:	5f                   	pop    edi
c00136a7:	5d                   	pop    ebp
c00136a8:	c3                   	ret    

c00136a9 <CmCreateString(Reghive_Tag*, int, char const*)>:
c00136a9:	53                   	push   ebx
c00136aa:	83 ec 3c             	sub    esp,0x3c
c00136ad:	6a 2b                	push   0x2b
c00136af:	6a 00                	push   0x0
c00136b1:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00136b5:	53                   	push   ebx
c00136b6:	e8 35 ce fe ff       	call   c00004f0 <memset>
c00136bb:	58                   	pop    eax
c00136bc:	5a                   	pop    edx
c00136bd:	8d 44 24 11          	lea    eax,[esp+0x11]
c00136c1:	50                   	push   eax
c00136c2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00136c6:	e8 40 fe ff ff       	call   c001350b <CmConvertToInternalFilename(char const*, unsigned char*)>
c00136cb:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00136d0:	83 c4 0c             	add    esp,0xc
c00136d3:	6a 15                	push   0x15
c00136d5:	6a 00                	push   0x0
c00136d7:	8d 44 24 27          	lea    eax,[esp+0x27]
c00136db:	50                   	push   eax
c00136dc:	e8 0f ce fe ff       	call   c00004f0 <memset>
c00136e1:	53                   	push   ebx
c00136e2:	6a 00                	push   0x0
c00136e4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136e8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136ec:	e8 e6 f9 ff ff       	call   c00130d7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00136f1:	83 c4 58             	add    esp,0x58
c00136f4:	5b                   	pop    ebx
c00136f5:	c3                   	ret    

c00136f6 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00136f6:	56                   	push   esi
c00136f7:	53                   	push   ebx
c00136f8:	83 ec 48             	sub    esp,0x48
c00136fb:	6a 12                	push   0x12
c00136fd:	68 ff 00 00 00       	push   0xff
c0013702:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013706:	56                   	push   esi
c0013707:	e8 e4 cd fe ff       	call   c00004f0 <memset>
c001370c:	5a                   	pop    edx
c001370d:	59                   	pop    ecx
c001370e:	56                   	push   esi
c001370f:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013713:	e8 f3 fd ff ff       	call   c001350b <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013718:	83 c4 10             	add    esp,0x10
c001371b:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001371f:	85 db                	test   ebx,ebx
c0013721:	74 42                	je     c0013765 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0013723:	50                   	push   eax
c0013724:	8d 44 24 19          	lea    eax,[esp+0x19]
c0013728:	50                   	push   eax
c0013729:	53                   	push   ebx
c001372a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001372e:	e8 fa f6 ff ff       	call   c0012e2d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013733:	83 c4 0c             	add    esp,0xc
c0013736:	6a 12                	push   0x12
c0013738:	8d 44 24 21          	lea    eax,[esp+0x21]
c001373c:	50                   	push   eax
c001373d:	56                   	push   esi
c001373e:	e8 3d cc fe ff       	call   c0000380 <memcmp>
c0013743:	83 c4 10             	add    esp,0x10
c0013746:	85 c0                	test   eax,eax
c0013748:	74 1e                	je     c0013768 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c001374a:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001374f:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013754:	c1 e3 08             	shl    ebx,0x8
c0013757:	09 d8                	or     eax,ebx
c0013759:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001375e:	c1 e3 10             	shl    ebx,0x10
c0013761:	09 c3                	or     ebx,eax
c0013763:	eb ba                	jmp    c001371f <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013765:	83 cb ff             	or     ebx,0xffffffff
c0013768:	89 d8                	mov    eax,ebx
c001376a:	83 c4 44             	add    esp,0x44
c001376d:	5b                   	pop    ebx
c001376e:	5e                   	pop    esi
c001376f:	c3                   	ret    

c0013770 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0013770:	57                   	push   edi
c0013771:	56                   	push   esi
c0013772:	53                   	push   ebx
c0013773:	83 ec 34             	sub    esp,0x34
c0013776:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001377a:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001377e:	6a 2b                	push   0x2b
c0013780:	6a 00                	push   0x0
c0013782:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013786:	53                   	push   ebx
c0013787:	e8 64 cd fe ff       	call   c00004f0 <memset>
c001378c:	58                   	pop    eax
c001378d:	5a                   	pop    edx
c001378e:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013792:	50                   	push   eax
c0013793:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013797:	e8 6f fd ff ff       	call   c001350b <CmConvertToInternalFilename(char const*, unsigned char*)>
c001379c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00137a0:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00137a4:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00137a8:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00137ac:	53                   	push   ebx
c00137ad:	6a 00                	push   0x0
c00137af:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00137b3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00137b7:	e8 1b f9 ff ff       	call   c00130d7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00137bc:	83 c4 50             	add    esp,0x50
c00137bf:	5b                   	pop    ebx
c00137c0:	5e                   	pop    esi
c00137c1:	5f                   	pop    edi
c00137c2:	c3                   	ret    

c00137c3 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00137c3:	55                   	push   ebp
c00137c4:	57                   	push   edi
c00137c5:	56                   	push   esi
c00137c6:	53                   	push   ebx
c00137c7:	83 ec 40             	sub    esp,0x40
c00137ca:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00137ce:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00137d2:	6a 2b                	push   0x2b
c00137d4:	6a 00                	push   0x0
c00137d6:	8d 74 24 11          	lea    esi,[esp+0x11]
c00137da:	56                   	push   esi
c00137db:	e8 10 cd fe ff       	call   c00004f0 <memset>
c00137e0:	5f                   	pop    edi
c00137e1:	89 ef                	mov    edi,ebp
c00137e3:	58                   	pop    eax
c00137e4:	8d 44 24 11          	lea    eax,[esp+0x11]
c00137e8:	50                   	push   eax
c00137e9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00137ed:	e8 19 fd ff ff       	call   c001350b <CmConvertToInternalFilename(char const*, unsigned char*)>
c00137f2:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00137f7:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00137fc:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0013801:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013806:	83 c4 10             	add    esp,0x10
c0013809:	85 ed                	test   ebp,ebp
c001380b:	74 14                	je     c0013821 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c001380d:	51                   	push   ecx
c001380e:	51                   	push   ecx
c001380f:	57                   	push   edi
c0013810:	53                   	push   ebx
c0013811:	e8 09 f7 ff ff       	call   c0012f1f <CmGetNext(Reghive_Tag*, int)>
c0013816:	83 c4 10             	add    esp,0x10
c0013819:	85 c0                	test   eax,eax
c001381b:	74 04                	je     c0013821 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c001381d:	89 c7                	mov    edi,eax
c001381f:	eb e8                	jmp    c0013809 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013821:	56                   	push   esi
c0013822:	6a 00                	push   0x0
c0013824:	57                   	push   edi
c0013825:	53                   	push   ebx
c0013826:	e8 ac f8 ff ff       	call   c00130d7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001382b:	83 c4 0c             	add    esp,0xc
c001382e:	89 c7                	mov    edi,eax
c0013830:	56                   	push   esi
c0013831:	50                   	push   eax
c0013832:	53                   	push   ebx
c0013833:	e8 f5 f5 ff ff       	call   c0012e2d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013838:	58                   	pop    eax
c0013839:	5a                   	pop    edx
c001383a:	6a 6c                	push   0x6c
c001383c:	6a 00                	push   0x0
c001383e:	6a 00                	push   0x0
c0013840:	68 53 27 02 c0       	push   0xc0022753
c0013845:	57                   	push   edi
c0013846:	53                   	push   ebx
c0013847:	e8 24 ff ff ff       	call   c0013770 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c001384c:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013850:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0013854:	c1 e8 10             	shr    eax,0x10
c0013857:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001385b:	83 c4 1c             	add    esp,0x1c
c001385e:	56                   	push   esi
c001385f:	57                   	push   edi
c0013860:	53                   	push   ebx
c0013861:	e8 eb f6 ff ff       	call   c0012f51 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013866:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c001386b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0013870:	c1 e0 08             	shl    eax,0x8
c0013873:	09 c2                	or     edx,eax
c0013875:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001387a:	83 c4 4c             	add    esp,0x4c
c001387d:	c1 e0 10             	shl    eax,0x10
c0013880:	5b                   	pop    ebx
c0013881:	09 d0                	or     eax,edx
c0013883:	5e                   	pop    esi
c0013884:	5f                   	pop    edi
c0013885:	5d                   	pop    ebp
c0013886:	c3                   	ret    

c0013887 <zStrtok(char*, char const*)>:
c0013887:	55                   	push   ebp
c0013888:	57                   	push   edi
c0013889:	56                   	push   esi
c001388a:	53                   	push   ebx
c001388b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001388f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013893:	85 db                	test   ebx,ebx
c0013895:	74 2f                	je     c00138c6 <zStrtok(char*, char const*)+0x3f>
c0013897:	85 c0                	test   eax,eax
c0013899:	75 09                	jne    c00138a4 <zStrtok(char*, char const*)+0x1d>
c001389b:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c00138a0:	85 c0                	test   eax,eax
c00138a2:	74 50                	je     c00138f4 <zStrtok(char*, char const*)+0x6d>
c00138a4:	31 c9                	xor    ecx,ecx
c00138a6:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00138aa:	74 03                	je     c00138af <zStrtok(char*, char const*)+0x28>
c00138ac:	41                   	inc    ecx
c00138ad:	eb f7                	jmp    c00138a6 <zStrtok(char*, char const*)+0x1f>
c00138af:	31 d2                	xor    edx,edx
c00138b1:	39 ca                	cmp    edx,ecx
c00138b3:	74 15                	je     c00138ca <zStrtok(char*, char const*)+0x43>
c00138b5:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00138b9:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00138bc:	8d 3c 10             	lea    edi,[eax+edx*1]
c00138bf:	39 ee                	cmp    esi,ebp
c00138c1:	74 13                	je     c00138d6 <zStrtok(char*, char const*)+0x4f>
c00138c3:	42                   	inc    edx
c00138c4:	eb eb                	jmp    c00138b1 <zStrtok(char*, char const*)+0x2a>
c00138c6:	31 c0                	xor    eax,eax
c00138c8:	eb 2a                	jmp    c00138f4 <zStrtok(char*, char const*)+0x6d>
c00138ca:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c00138d4:	eb 1e                	jmp    c00138f4 <zStrtok(char*, char const*)+0x6d>
c00138d6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00138d9:	39 ce                	cmp    esi,ecx
c00138db:	75 0a                	jne    c00138e7 <zStrtok(char*, char const*)+0x60>
c00138dd:	40                   	inc    eax
c00138de:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c00138e3:	89 d8                	mov    eax,ebx
c00138e5:	eb 0d                	jmp    c00138f4 <zStrtok(char*, char const*)+0x6d>
c00138e7:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00138eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00138ee:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c00138f4:	5b                   	pop    ebx
c00138f5:	5e                   	pop    esi
c00138f6:	5f                   	pop    edi
c00138f7:	5d                   	pop    ebp
c00138f8:	c3                   	ret    

c00138f9 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00138f9:	57                   	push   edi
c00138fa:	56                   	push   esi
c00138fb:	53                   	push   ebx
c00138fc:	81 ec 08 01 00 00    	sub    esp,0x108
c0013902:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013909:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0013910:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013914:	53                   	push   ebx
c0013915:	e8 26 cd fe ff       	call   c0000640 <strcpy>
c001391a:	59                   	pop    ecx
c001391b:	5e                   	pop    esi
c001391c:	68 b7 2a 02 c0       	push   0xc0022ab7
c0013921:	53                   	push   ebx
c0013922:	bb 01 00 00 00       	mov    ebx,0x1
c0013927:	e8 5b ff ff ff       	call   c0013887 <zStrtok(char*, char const*)>
c001392c:	83 c4 10             	add    esp,0x10
c001392f:	85 c0                	test   eax,eax
c0013931:	74 3b                	je     c001396e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013933:	52                   	push   edx
c0013934:	50                   	push   eax
c0013935:	6a 01                	push   0x1
c0013937:	57                   	push   edi
c0013938:	e8 b9 fd ff ff       	call   c00136f6 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c001393d:	59                   	pop    ecx
c001393e:	89 c3                	mov    ebx,eax
c0013940:	5e                   	pop    esi
c0013941:	68 b7 2a 02 c0       	push   0xc0022ab7
c0013946:	6a 00                	push   0x0
c0013948:	e8 3a ff ff ff       	call   c0013887 <zStrtok(char*, char const*)>
c001394d:	83 c4 10             	add    esp,0x10
c0013950:	89 c6                	mov    esi,eax
c0013952:	85 c0                	test   eax,eax
c0013954:	74 18                	je     c001396e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013956:	52                   	push   edx
c0013957:	52                   	push   edx
c0013958:	53                   	push   ebx
c0013959:	57                   	push   edi
c001395a:	e8 81 f5 ff ff       	call   c0012ee0 <CmEnterDirectory(Reghive_Tag*, int)>
c001395f:	83 c4 10             	add    esp,0x10
c0013962:	89 c3                	mov    ebx,eax
c0013964:	83 f8 ff             	cmp    eax,0xffffffff
c0013967:	74 05                	je     c001396e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013969:	50                   	push   eax
c001396a:	56                   	push   esi
c001396b:	53                   	push   ebx
c001396c:	eb c9                	jmp    c0013937 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c001396e:	81 c4 00 01 00 00    	add    esp,0x100
c0013974:	89 d8                	mov    eax,ebx
c0013976:	5b                   	pop    ebx
c0013977:	5e                   	pop    esi
c0013978:	5f                   	pop    edi
c0013979:	c3                   	ret    

c001397a <CmDisplayTree(Reghive_Tag*, int, int)>:
c001397a:	55                   	push   ebp
c001397b:	57                   	push   edi
c001397c:	56                   	push   esi
c001397d:	53                   	push   ebx
c001397e:	83 ec 5c             	sub    esp,0x5c
c0013981:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013985:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013989:	85 db                	test   ebx,ebx
c001398b:	0f 8e 84 00 00 00    	jle    c0013a15 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0013991:	31 ed                	xor    ebp,ebp
c0013993:	57                   	push   edi
c0013994:	6a 32                	push   0x32
c0013996:	6a 00                	push   0x0
c0013998:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c001399c:	57                   	push   edi
c001399d:	e8 4e cb fe ff       	call   c00004f0 <memset>
c00139a2:	83 c4 0c             	add    esp,0xc
c00139a5:	57                   	push   edi
c00139a6:	53                   	push   ebx
c00139a7:	56                   	push   esi
c00139a8:	e8 30 fb ff ff       	call   c00134dd <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00139ad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00139b1:	83 c4 10             	add    esp,0x10
c00139b4:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00139b8:	7d 13                	jge    c00139cd <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00139ba:	83 ec 0c             	sub    esp,0xc
c00139bd:	45                   	inc    ebp
c00139be:	68 5b 2e 02 c0       	push   0xc0022e5b
c00139c3:	e8 81 6f ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00139c8:	83 c4 10             	add    esp,0x10
c00139cb:	eb e7                	jmp    c00139b4 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00139cd:	51                   	push   ecx
c00139ce:	57                   	push   edi
c00139cf:	53                   	push   ebx
c00139d0:	68 59 27 02 c0       	push   0xc0022759
c00139d5:	e8 6f 6f ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00139da:	83 c4 10             	add    esp,0x10
c00139dd:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00139e2:	75 1e                	jne    c0013a02 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00139e4:	52                   	push   edx
c00139e5:	52                   	push   edx
c00139e6:	53                   	push   ebx
c00139e7:	56                   	push   esi
c00139e8:	e8 f3 f4 ff ff       	call   c0012ee0 <CmEnterDirectory(Reghive_Tag*, int)>
c00139ed:	83 c4 0c             	add    esp,0xc
c00139f0:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00139f4:	8d 51 04             	lea    edx,[ecx+0x4]
c00139f7:	52                   	push   edx
c00139f8:	50                   	push   eax
c00139f9:	56                   	push   esi
c00139fa:	e8 7b ff ff ff       	call   c001397a <CmDisplayTree(Reghive_Tag*, int, int)>
c00139ff:	83 c4 10             	add    esp,0x10
c0013a02:	50                   	push   eax
c0013a03:	50                   	push   eax
c0013a04:	53                   	push   ebx
c0013a05:	56                   	push   esi
c0013a06:	e8 14 f5 ff ff       	call   c0012f1f <CmGetNext(Reghive_Tag*, int)>
c0013a0b:	83 c4 10             	add    esp,0x10
c0013a0e:	89 c3                	mov    ebx,eax
c0013a10:	e9 74 ff ff ff       	jmp    c0013989 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013a15:	83 c4 5c             	add    esp,0x5c
c0013a18:	5b                   	pop    ebx
c0013a19:	5e                   	pop    esi
c0013a1a:	5f                   	pop    edi
c0013a1b:	5d                   	pop    ebp
c0013a1c:	c3                   	ret    

c0013a1d <CmSplitFinalSlashInPlace(char*)>:
c0013a1d:	53                   	push   ebx
c0013a1e:	83 ec 14             	sub    esp,0x14
c0013a21:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a25:	53                   	push   ebx
c0013a26:	e8 45 cb fe ff       	call   c0000570 <strlen>
c0013a2b:	83 c4 10             	add    esp,0x10
c0013a2e:	48                   	dec    eax
c0013a2f:	85 c0                	test   eax,eax
c0013a31:	74 15                	je     c0013a48 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0013a33:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013a36:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013a3a:	75 09                	jne    c0013a45 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013a3c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013a3f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0013a43:	eb 05                	jmp    c0013a4a <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013a45:	48                   	dec    eax
c0013a46:	eb e7                	jmp    c0013a2f <CmSplitFinalSlashInPlace(char*)+0x12>
c0013a48:	31 c0                	xor    eax,eax
c0013a4a:	83 c4 08             	add    esp,0x8
c0013a4d:	5b                   	pop    ebx
c0013a4e:	c3                   	ret    

c0013a4f <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0013a4f:	55                   	push   ebp
c0013a50:	57                   	push   edi
c0013a51:	56                   	push   esi
c0013a52:	53                   	push   ebx
c0013a53:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013a59:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0013a60:	8a 13                	mov    dl,BYTE PTR [ebx]
c0013a62:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013a65:	80 fa 40             	cmp    dl,0x40
c0013a68:	75 1c                	jne    c0013a86 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0013a6a:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0013a6d:	85 c9                	test   ecx,ecx
c0013a6f:	0f 84 09 01 00 00    	je     c0013b7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a75:	8d 43 01             	lea    eax,[ebx+0x1]
c0013a78:	83 f9 3a             	cmp    ecx,0x3a
c0013a7b:	74 04                	je     c0013a81 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0013a7d:	89 c3                	mov    ebx,eax
c0013a7f:	eb e9                	jmp    c0013a6a <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0013a81:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013a84:	89 c3                	mov    ebx,eax
c0013a86:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013a8a:	50                   	push   eax
c0013a8b:	6a 40                	push   0x40
c0013a8d:	6a 00                	push   0x0
c0013a8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013a93:	50                   	push   eax
c0013a94:	e8 57 ca fe ff       	call   c00004f0 <memset>
c0013a99:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0013aa0:	31 c0                	xor    eax,eax
c0013aa2:	83 c4 10             	add    esp,0x10
c0013aa5:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0013aaa:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013aad:	89 d1                	mov    ecx,edx
c0013aaf:	85 d2                	test   edx,edx
c0013ab1:	0f 84 c7 00 00 00    	je     c0013b7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013ab7:	3d c7 00 00 00       	cmp    eax,0xc7
c0013abc:	0f 8f bc 00 00 00    	jg     c0013b7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013ac2:	83 fa 0a             	cmp    edx,0xa
c0013ac5:	0f 85 a4 00 00 00    	jne    c0013b6f <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0013acb:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013ad0:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013ad5:	89 c8                	mov    eax,ecx
c0013ad7:	a8 df                	test   al,0xdf
c0013ad9:	0f 94 c2             	sete   dl
c0013adc:	83 f9 23             	cmp    ecx,0x23
c0013adf:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013ae4:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0013ae8:	80 e2 01             	and    dl,0x1
c0013aeb:	75 4a                	jne    c0013b37 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013aed:	83 e8 09             	sub    eax,0x9
c0013af0:	3c 01                	cmp    al,0x1
c0013af2:	76 43                	jbe    c0013b37 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013af4:	83 f9 5b             	cmp    ecx,0x5b
c0013af7:	75 42                	jne    c0013b3b <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0013af9:	83 fe 40             	cmp    esi,0x40
c0013afc:	75 39                	jne    c0013b37 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013afe:	83 ec 0c             	sub    esp,0xc
c0013b01:	8d 54 24 65          	lea    edx,[esp+0x65]
c0013b05:	52                   	push   edx
c0013b06:	e8 65 ca fe ff       	call   c0000570 <strlen>
c0013b0b:	83 c4 10             	add    esp,0x10
c0013b0e:	83 f8 3f             	cmp    eax,0x3f
c0013b11:	77 6b                	ja     c0013b7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013b13:	50                   	push   eax
c0013b14:	50                   	push   eax
c0013b15:	8d 54 24 61          	lea    edx,[esp+0x61]
c0013b19:	52                   	push   edx
c0013b1a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013b1e:	52                   	push   edx
c0013b1f:	e8 1c cb fe ff       	call   c0000640 <strcpy>
c0013b24:	58                   	pop    eax
c0013b25:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013b29:	52                   	push   edx
c0013b2a:	e8 41 ca fe ff       	call   c0000570 <strlen>
c0013b2f:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013b34:	83 c4 10             	add    esp,0x10
c0013b37:	31 d2                	xor    edx,edx
c0013b39:	eb 3b                	jmp    c0013b76 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0013b3b:	83 fe 40             	cmp    esi,0x40
c0013b3e:	74 06                	je     c0013b46 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0013b40:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013b44:	eb 20                	jmp    c0013b66 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0013b46:	50                   	push   eax
c0013b47:	50                   	push   eax
c0013b48:	55                   	push   ebp
c0013b49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013b4d:	50                   	push   eax
c0013b4e:	e8 fd cb fe ff       	call   c0000750 <strcmp>
c0013b53:	83 c4 10             	add    esp,0x10
c0013b56:	85 c0                	test   eax,eax
c0013b58:	75 dd                	jne    c0013b37 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013b5a:	eb e4                	jmp    c0013b40 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013b5c:	8d 50 01             	lea    edx,[eax+0x1]
c0013b5f:	83 f9 3d             	cmp    ecx,0x3d
c0013b62:	74 1e                	je     c0013b82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0013b64:	89 d0                	mov    eax,edx
c0013b66:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013b69:	85 c9                	test   ecx,ecx
c0013b6b:	75 ef                	jne    c0013b5c <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0013b6d:	eb 0f                	jmp    c0013b7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013b6f:	8d 50 01             	lea    edx,[eax+0x1]
c0013b72:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013b76:	47                   	inc    edi
c0013b77:	89 d0                	mov    eax,edx
c0013b79:	e9 2c ff ff ff       	jmp    c0013aaa <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0013b7e:	31 c0                	xor    eax,eax
c0013b80:	eb 33                	jmp    c0013bb5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0013b82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013b86:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013b89:	50                   	push   eax
c0013b8a:	50                   	push   eax
c0013b8b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013b8f:	50                   	push   eax
c0013b90:	53                   	push   ebx
c0013b91:	e8 ba cb fe ff       	call   c0000750 <strcmp>
c0013b96:	83 c4 10             	add    esp,0x10
c0013b99:	85 c0                	test   eax,eax
c0013b9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013b9f:	75 96                	jne    c0013b37 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013ba1:	51                   	push   ecx
c0013ba2:	51                   	push   ecx
c0013ba3:	52                   	push   edx
c0013ba4:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013bab:	e8 90 ca fe ff       	call   c0000640 <strcpy>
c0013bb0:	83 c4 10             	add    esp,0x10
c0013bb3:	b0 01                	mov    al,0x1
c0013bb5:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013bbb:	5b                   	pop    ebx
c0013bbc:	5e                   	pop    esi
c0013bbd:	5f                   	pop    edi
c0013bbe:	5d                   	pop    ebp
c0013bbf:	c3                   	ret    

c0013bc0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013bc0:	57                   	push   edi
c0013bc1:	56                   	push   esi
c0013bc2:	53                   	push   ebx
c0013bc3:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013bc9:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013bd0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013bd7:	53                   	push   ebx
c0013bd8:	e8 93 c9 fe ff       	call   c0000570 <strlen>
c0013bdd:	89 34 24             	mov    DWORD PTR [esp],esi
c0013be0:	89 c7                	mov    edi,eax
c0013be2:	e8 89 c9 fe ff       	call   c0000570 <strlen>
c0013be7:	83 c4 10             	add    esp,0x10
c0013bea:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013bee:	3d ff 00 00 00       	cmp    eax,0xff
c0013bf3:	0f 87 d3 00 00 00    	ja     c0013ccc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013bf9:	57                   	push   edi
c0013bfa:	57                   	push   edi
c0013bfb:	56                   	push   esi
c0013bfc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013c00:	56                   	push   esi
c0013c01:	e8 3a ca fe ff       	call   c0000640 <strcpy>
c0013c06:	58                   	pop    eax
c0013c07:	5a                   	pop    edx
c0013c08:	68 b7 2a 02 c0       	push   0xc0022ab7
c0013c0d:	56                   	push   esi
c0013c0e:	e8 2d cc fe ff       	call   c0000840 <strcat>
c0013c13:	59                   	pop    ecx
c0013c14:	5f                   	pop    edi
c0013c15:	53                   	push   ebx
c0013c16:	56                   	push   esi
c0013c17:	e8 24 cc fe ff       	call   c0000840 <strcat>
c0013c1c:	58                   	pop    eax
c0013c1d:	5a                   	pop    edx
c0013c1e:	68 63 27 02 c0       	push   0xc0022763
c0013c23:	56                   	push   esi
c0013c24:	e8 17 cc fe ff       	call   c0000840 <strcat>
c0013c29:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013c30:	e8 85 3e ff ff       	call   c0007aba <malloc>
c0013c35:	83 c4 0c             	add    esp,0xc
c0013c38:	89 c3                	mov    ebx,eax
c0013c3a:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013c40:	56                   	push   esi
c0013c41:	50                   	push   eax
c0013c42:	e8 09 7f ff ff       	call   c000bb50 <File::File(char const*, Process*)>
c0013c47:	83 c4 10             	add    esp,0x10
c0013c4a:	85 db                	test   ebx,ebx
c0013c4c:	74 7e                	je     c0013ccc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013c4e:	51                   	push   ecx
c0013c4f:	51                   	push   ecx
c0013c50:	6a 01                	push   0x1
c0013c52:	53                   	push   ebx
c0013c53:	e8 16 7f ff ff       	call   c000bb6e <File::open(FileOpenMode)>
c0013c58:	83 c4 10             	add    esp,0x10
c0013c5b:	85 c0                	test   eax,eax
c0013c5d:	74 08                	je     c0013c67 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013c5f:	83 ec 0c             	sub    esp,0xc
c0013c62:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c64:	53                   	push   ebx
c0013c65:	eb 5f                	jmp    c0013cc6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013c67:	52                   	push   edx
c0013c68:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013c6c:	50                   	push   eax
c0013c6d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013c71:	50                   	push   eax
c0013c72:	53                   	push   ebx
c0013c73:	e8 f8 81 ff ff       	call   c000be70 <File::stat(unsigned long long*, bool*)>
c0013c78:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c7c:	83 c4 10             	add    esp,0x10
c0013c7f:	89 c1                	mov    ecx,eax
c0013c81:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013c85:	74 31                	je     c0013cb8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013c87:	83 ec 0c             	sub    esp,0xc
c0013c8a:	50                   	push   eax
c0013c8b:	e8 2a 3e ff ff       	call   c0007aba <malloc>
c0013c90:	89 c6                	mov    esi,eax
c0013c92:	58                   	pop    eax
c0013c93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c95:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013c99:	52                   	push   edx
c0013c9a:	56                   	push   esi
c0013c9b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013c9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013ca3:	53                   	push   ebx
c0013ca4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ca7:	83 c4 20             	add    esp,0x20
c0013caa:	85 c0                	test   eax,eax
c0013cac:	75 0a                	jne    c0013cb8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013cae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cb2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013cb6:	74 18                	je     c0013cd0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013cb8:	83 ec 0c             	sub    esp,0xc
c0013cbb:	53                   	push   ebx
c0013cbc:	e8 0b 7f ff ff       	call   c000bbcc <File::close()>
c0013cc1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cc6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013cc9:	83 c4 10             	add    esp,0x10
c0013ccc:	31 c0                	xor    eax,eax
c0013cce:	eb 3b                	jmp    c0013d0b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013cd0:	83 ec 0c             	sub    esp,0xc
c0013cd3:	53                   	push   ebx
c0013cd4:	e8 f3 7e ff ff       	call   c000bbcc <File::close()>
c0013cd9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cdb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cde:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013ce1:	83 c4 0c             	add    esp,0xc
c0013ce4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013ceb:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013cf2:	56                   	push   esi
c0013cf3:	e8 57 fd ff ff       	call   c0013a4f <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013cf8:	89 34 24             	mov    DWORD PTR [esp],esi
c0013cfb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013cff:	e8 c6 3d ff ff       	call   c0007aca <free>
c0013d04:	83 c4 10             	add    esp,0x10
c0013d07:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013d0b:	81 c4 20 01 00 00    	add    esp,0x120
c0013d11:	5b                   	pop    ebx
c0013d12:	5e                   	pop    esi
c0013d13:	5f                   	pop    edi
c0013d14:	c3                   	ret    

c0013d15 <Reg::getLine(char*, char*, char*)>:
c0013d15:	57                   	push   edi
c0013d16:	56                   	push   esi
c0013d17:	53                   	push   ebx
c0013d18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d1c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d20:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d24:	57                   	push   edi
c0013d25:	56                   	push   esi
c0013d26:	53                   	push   ebx
c0013d27:	68 68 27 02 c0       	push   0xc0022768
c0013d2c:	e8 8f fe ff ff       	call   c0013bc0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013d31:	83 c4 10             	add    esp,0x10
c0013d34:	84 c0                	test   al,al
c0013d36:	75 10                	jne    c0013d48 <Reg::getLine(char*, char*, char*)+0x33>
c0013d38:	57                   	push   edi
c0013d39:	56                   	push   esi
c0013d3a:	53                   	push   ebx
c0013d3b:	68 8d 27 02 c0       	push   0xc002278d
c0013d40:	e8 7b fe ff ff       	call   c0013bc0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013d45:	83 c4 10             	add    esp,0x10
c0013d48:	5b                   	pop    ebx
c0013d49:	5e                   	pop    esi
c0013d4a:	5f                   	pop    edi
c0013d4b:	c3                   	ret    

c0013d4c <Reg::readInt(char*, char*, int*)>:
c0013d4c:	55                   	push   ebp
c0013d4d:	57                   	push   edi
c0013d4e:	56                   	push   esi
c0013d4f:	53                   	push   ebx
c0013d50:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013d56:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013d5a:	55                   	push   ebp
c0013d5b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013d62:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013d69:	e8 a7 ff ff ff       	call   c0013d15 <Reg::getLine(char*, char*, char*)>
c0013d6e:	83 c4 10             	add    esp,0x10
c0013d71:	84 c0                	test   al,al
c0013d73:	0f 84 b6 00 00 00    	je     c0013e2f <Reg::readInt(char*, char*, int*)+0xe3>
c0013d79:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013d7e:	83 fa 2b             	cmp    edx,0x2b
c0013d81:	74 0c                	je     c0013d8f <Reg::readInt(char*, char*, int*)+0x43>
c0013d83:	83 fa 2d             	cmp    edx,0x2d
c0013d86:	75 0e                	jne    c0013d96 <Reg::readInt(char*, char*, int*)+0x4a>
c0013d88:	ba 01 00 00 00       	mov    edx,0x1
c0013d8d:	eb 0b                	jmp    c0013d9a <Reg::readInt(char*, char*, int*)+0x4e>
c0013d8f:	ba 01 00 00 00       	mov    edx,0x1
c0013d94:	eb 02                	jmp    c0013d98 <Reg::readInt(char*, char*, int*)+0x4c>
c0013d96:	31 d2                	xor    edx,edx
c0013d98:	31 c0                	xor    eax,eax
c0013d9a:	be 0a 00 00 00       	mov    esi,0xa
c0013d9f:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013da4:	75 21                	jne    c0013dc7 <Reg::readInt(char*, char*, int*)+0x7b>
c0013da6:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013dab:	83 f9 78             	cmp    ecx,0x78
c0013dae:	75 0a                	jne    c0013dba <Reg::readInt(char*, char*, int*)+0x6e>
c0013db0:	83 c2 02             	add    edx,0x2
c0013db3:	be 10 00 00 00       	mov    esi,0x10
c0013db8:	eb 0d                	jmp    c0013dc7 <Reg::readInt(char*, char*, int*)+0x7b>
c0013dba:	83 f9 62             	cmp    ecx,0x62
c0013dbd:	75 08                	jne    c0013dc7 <Reg::readInt(char*, char*, int*)+0x7b>
c0013dbf:	83 c2 02             	add    edx,0x2
c0013dc2:	be 02 00 00 00       	mov    esi,0x2
c0013dc7:	01 d5                	add    ebp,edx
c0013dc9:	31 d2                	xor    edx,edx
c0013dcb:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013dcf:	83 f9 0d             	cmp    ecx,0xd
c0013dd2:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013dd6:	0f 94 c3             	sete   bl
c0013dd9:	85 c9                	test   ecx,ecx
c0013ddb:	89 df                	mov    edi,ebx
c0013ddd:	0f 94 c3             	sete   bl
c0013de0:	09 df                	or     edi,ebx
c0013de2:	89 fb                	mov    ebx,edi
c0013de4:	83 e7 01             	and    edi,0x1
c0013de7:	75 35                	jne    c0013e1e <Reg::readInt(char*, char*, int*)+0xd2>
c0013de9:	0f af d6             	imul   edx,esi
c0013dec:	83 fe 10             	cmp    esi,0x10
c0013def:	75 26                	jne    c0013e17 <Reg::readInt(char*, char*, int*)+0xcb>
c0013df1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013df5:	83 ef 41             	sub    edi,0x41
c0013df8:	89 fb                	mov    ebx,edi
c0013dfa:	80 fb 05             	cmp    bl,0x5
c0013dfd:	77 06                	ja     c0013e05 <Reg::readInt(char*, char*, int*)+0xb9>
c0013dff:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013e03:	eb 16                	jmp    c0013e1b <Reg::readInt(char*, char*, int*)+0xcf>
c0013e05:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013e09:	83 eb 61             	sub    ebx,0x61
c0013e0c:	80 fb 05             	cmp    bl,0x5
c0013e0f:	77 06                	ja     c0013e17 <Reg::readInt(char*, char*, int*)+0xcb>
c0013e11:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013e15:	eb 04                	jmp    c0013e1b <Reg::readInt(char*, char*, int*)+0xcf>
c0013e17:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013e1b:	45                   	inc    ebp
c0013e1c:	eb ad                	jmp    c0013dcb <Reg::readInt(char*, char*, int*)+0x7f>
c0013e1e:	84 c0                	test   al,al
c0013e20:	74 02                	je     c0013e24 <Reg::readInt(char*, char*, int*)+0xd8>
c0013e22:	f7 da                	neg    edx
c0013e24:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013e2b:	89 10                	mov    DWORD PTR [eax],edx
c0013e2d:	88 d8                	mov    al,bl
c0013e2f:	81 c4 ec 00 00 00    	add    esp,0xec
c0013e35:	5b                   	pop    ebx
c0013e36:	5e                   	pop    esi
c0013e37:	5f                   	pop    edi
c0013e38:	5d                   	pop    ebp
c0013e39:	c3                   	ret    

c0013e3a <Reg::readString(char*, char*, char*, int)>:
c0013e3a:	57                   	push   edi
c0013e3b:	56                   	push   esi
c0013e3c:	53                   	push   ebx
c0013e3d:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013e43:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013e4a:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013e4e:	57                   	push   edi
c0013e4f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013e56:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013e5d:	e8 b3 fe ff ff       	call   c0013d15 <Reg::getLine(char*, char*, char*)>
c0013e62:	83 c4 10             	add    esp,0x10
c0013e65:	89 c6                	mov    esi,eax
c0013e67:	84 c0                	test   al,al
c0013e69:	74 44                	je     c0013eaf <Reg::readString(char*, char*, char*, int)+0x75>
c0013e6b:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013e72:	31 c0                	xor    eax,eax
c0013e74:	4a                   	dec    edx
c0013e75:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013e78:	84 c9                	test   cl,cl
c0013e7a:	74 0f                	je     c0013e8b <Reg::readString(char*, char*, char*, int)+0x51>
c0013e7c:	39 c2                	cmp    edx,eax
c0013e7e:	7e 0b                	jle    c0013e8b <Reg::readString(char*, char*, char*, int)+0x51>
c0013e80:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013e83:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013e88:	40                   	inc    eax
c0013e89:	eb ea                	jmp    c0013e75 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013e8b:	83 ec 0c             	sub    esp,0xc
c0013e8e:	53                   	push   ebx
c0013e8f:	e8 dc c6 fe ff       	call   c0000570 <strlen>
c0013e94:	83 c4 10             	add    esp,0x10
c0013e97:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013e9c:	75 11                	jne    c0013eaf <Reg::readString(char*, char*, char*, int)+0x75>
c0013e9e:	83 ec 0c             	sub    esp,0xc
c0013ea1:	53                   	push   ebx
c0013ea2:	e8 c9 c6 fe ff       	call   c0000570 <strlen>
c0013ea7:	83 c4 10             	add    esp,0x10
c0013eaa:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013eaf:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013eb5:	89 f0                	mov    eax,esi
c0013eb7:	5b                   	pop    ebx
c0013eb8:	5e                   	pop    esi
c0013eb9:	5f                   	pop    edi
c0013eba:	c3                   	ret    

c0013ebb <Reg::readBool(char*, char*, bool*)>:
c0013ebb:	83 ec 20             	sub    esp,0x20
c0013ebe:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013ec2:	50                   	push   eax
c0013ec3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ec7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ecb:	e8 7c fe ff ff       	call   c0013d4c <Reg::readInt(char*, char*, int*)>
c0013ed0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013ed5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013ed9:	0f 95 02             	setne  BYTE PTR [edx]
c0013edc:	83 c4 2c             	add    esp,0x2c
c0013edf:	c3                   	ret    

c0013ee0 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013ee0:	53                   	push   ebx
c0013ee1:	83 ec 1c             	sub    esp,0x1c
c0013ee4:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013ee8:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013eec:	50                   	push   eax
c0013eed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ef1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ef5:	e8 c1 ff ff ff       	call   c0013ebb <Reg::readBool(char*, char*, bool*)>
c0013efa:	83 c4 10             	add    esp,0x10
c0013efd:	84 c0                	test   al,al
c0013eff:	74 04                	je     c0013f05 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013f01:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013f05:	88 d8                	mov    al,bl
c0013f07:	83 c4 18             	add    esp,0x18
c0013f0a:	5b                   	pop    ebx
c0013f0b:	c3                   	ret    

c0013f0c <Reg::readIntWithDefault(char*, char*, int)>:
c0013f0c:	53                   	push   ebx
c0013f0d:	83 ec 1c             	sub    esp,0x1c
c0013f10:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013f14:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013f18:	50                   	push   eax
c0013f19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f21:	e8 26 fe ff ff       	call   c0013d4c <Reg::readInt(char*, char*, int*)>
c0013f26:	83 c4 10             	add    esp,0x10
c0013f29:	84 c0                	test   al,al
c0013f2b:	74 04                	je     c0013f31 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013f2d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013f31:	89 d8                	mov    eax,ebx
c0013f33:	83 c4 18             	add    esp,0x18
c0013f36:	5b                   	pop    ebx
c0013f37:	c3                   	ret    

c0013f38 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013f38:	57                   	push   edi
c0013f39:	56                   	push   esi
c0013f3a:	56                   	push   esi
c0013f3b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f3f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013f43:	56                   	push   esi
c0013f44:	57                   	push   edi
c0013f45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f4d:	e8 e8 fe ff ff       	call   c0013e3a <Reg::readString(char*, char*, char*, int)>
c0013f52:	83 c4 10             	add    esp,0x10
c0013f55:	84 c0                	test   al,al
c0013f57:	75 1a                	jne    c0013f73 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013f59:	51                   	push   ecx
c0013f5a:	56                   	push   esi
c0013f5b:	6a 00                	push   0x0
c0013f5d:	57                   	push   edi
c0013f5e:	e8 8d c5 fe ff       	call   c00004f0 <memset>
c0013f63:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013f66:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013f6a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f6c:	83 c4 10             	add    esp,0x10
c0013f6f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013f73:	89 f8                	mov    eax,edi
c0013f75:	5a                   	pop    edx
c0013f76:	5e                   	pop    esi
c0013f77:	5f                   	pop    edi
c0013f78:	c3                   	ret    

c0013f79 <SysEject(regs*)>:
c0013f79:	83 ec 0c             	sub    esp,0xc
c0013f7c:	83 ca ff             	or     edx,0xffffffff
c0013f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f83:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013f86:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013f8b:	83 e9 41             	sub    ecx,0x41
c0013f8e:	83 f9 19             	cmp    ecx,0x19
c0013f91:	77 18                	ja     c0013fab <SysEject(regs*)+0x32>
c0013f93:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013f9a:	85 c9                	test   ecx,ecx
c0013f9c:	74 0d                	je     c0013fab <SysEject(regs*)+0x32>
c0013f9e:	83 ec 0c             	sub    esp,0xc
c0013fa1:	51                   	push   ecx
c0013fa2:	e8 b3 9d ff ff       	call   c000dd5a <LogicalDisk::eject()>
c0013fa7:	83 c4 10             	add    esp,0x10
c0013faa:	99                   	cdq    
c0013fab:	83 c4 0c             	add    esp,0xc
c0013fae:	c3                   	ret    

c0013faf <SysExit(regs*)>:
c0013faf:	83 ec 18             	sub    esp,0x18
c0013fb2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013fb6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013fb9:	e8 8a 2b 00 00       	call   c0016b48 <terminateTask(int)>
c0013fbe:	83 c8 ff             	or     eax,0xffffffff
c0013fc1:	83 c4 1c             	add    esp,0x1c
c0013fc4:	89 c2                	mov    edx,eax
c0013fc6:	c3                   	ret    

c0013fc7 <SysGetCwd(regs*)>:
c0013fc7:	83 ec 10             	sub    esp,0x10
c0013fca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fce:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013fd1:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013fd4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fd9:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013fdc:	e8 23 78 ff ff       	call   c000b804 <Fs::getcwd(Process*, char*, int)>
c0013fe1:	83 c4 1c             	add    esp,0x1c
c0013fe4:	99                   	cdq    
c0013fe5:	c3                   	ret    

c0013fe6 <SysGetPID(regs*)>:
c0013fe6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013feb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013fee:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ff0:	99                   	cdq    
c0013ff1:	c3                   	ret    

c0013ff2 <SysGetRAMData(regs*)>:
c0013ff2:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013ff8:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0014002:	99                   	cdq    
c0014003:	f7 f9                	idiv   ecx
c0014005:	c1 e0 18             	shl    eax,0x18
c0014008:	09 c8                	or     eax,ecx
c001400a:	99                   	cdq    
c001400b:	c3                   	ret    

c001400c <SysGetVGAPtr(regs*)>:
c001400c:	55                   	push   ebp
c001400d:	57                   	push   edi
c001400e:	56                   	push   esi
c001400f:	53                   	push   ebx
c0014010:	83 ec 18             	sub    esp,0x18
c0014013:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0014017:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001401a:	e8 f5 25 00 00       	call   c0016614 <Thr::processFromPID(int)>
c001401f:	83 c4 10             	add    esp,0x10
c0014022:	89 c1                	mov    ecx,eax
c0014024:	b8 01 00 00 00       	mov    eax,0x1
c0014029:	85 c9                	test   ecx,ecx
c001402b:	74 57                	je     c0014084 <SysGetVGAPtr(regs*)+0x78>
c001402d:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0014033:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0014037:	74 0c                	je     c0014045 <SysGetVGAPtr(regs*)+0x39>
c0014039:	83 ec 0c             	sub    esp,0xc
c001403c:	55                   	push   ebp
c001403d:	e8 1b 47 ff ff       	call   c000875d <setActiveTerminal(VgaText*)>
c0014042:	83 c4 10             	add    esp,0x10
c0014045:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014048:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001404b:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014050:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014052:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0014055:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014058:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001405e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014061:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0014064:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001406a:	50                   	push   eax
c001406b:	50                   	push   eax
c001406c:	68 a8 27 02 c0       	push   0xc00227a8
c0014071:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014074:	05 a8 0f 00 00       	add    eax,0xfa8
c0014079:	50                   	push   eax
c001407a:	e8 c1 c5 fe ff       	call   c0000640 <strcpy>
c001407f:	83 c4 10             	add    esp,0x10
c0014082:	31 c0                	xor    eax,eax
c0014084:	83 c4 0c             	add    esp,0xc
c0014087:	31 d2                	xor    edx,edx
c0014089:	5b                   	pop    ebx
c001408a:	5e                   	pop    esi
c001408b:	5f                   	pop    edi
c001408c:	5d                   	pop    ebp
c001408d:	c3                   	ret    
c001408e:	66 90                	xchg   ax,ax

c0014090 <SysKill(regs*)>:
c0014090:	53                   	push   ebx
c0014091:	83 ec 08             	sub    esp,0x8
c0014094:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014098:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c001409c:	75 16                	jne    c00140b4 <SysKill(regs*)+0x24>
c001409e:	83 ec 0c             	sub    esp,0xc
c00140a1:	68 b2 27 02 c0       	push   0xc00227b2
c00140a6:	e8 18 d6 ff ff       	call   c00116c3 <KePanic(char const*)>
c00140ab:	83 c4 10             	add    esp,0x10
c00140ae:	e9 89 00 00 00       	jmp    c001413c <SysKill(regs*)+0xac>
c00140b3:	90                   	nop
c00140b4:	83 ec 0c             	sub    esp,0xc
c00140b7:	68 e4 c6 02 c0       	push   0xc002c6e4
c00140bc:	e8 4b bd 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140c1:	8d 76 00             	lea    esi,[esi+0x0]
c00140c4:	83 c4 10             	add    esp,0x10
c00140c7:	85 c0                	test   eax,eax
c00140c9:	74 19                	je     c00140e4 <SysKill(regs*)+0x54>
c00140cb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00140ce:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00140d1:	39 0a                	cmp    DWORD PTR [edx],ecx
c00140d3:	74 33                	je     c0014108 <SysKill(regs*)+0x78>
c00140d5:	52                   	push   edx
c00140d6:	52                   	push   edx
c00140d7:	50                   	push   eax
c00140d8:	68 e4 c6 02 c0       	push   0xc002c6e4
c00140dd:	e8 4a c0 00 00       	call   c002012c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00140e2:	eb e0                	jmp    c00140c4 <SysKill(regs*)+0x34>
c00140e4:	83 ec 0c             	sub    esp,0xc
c00140e7:	68 d8 c6 02 c0       	push   0xc002c6d8
c00140ec:	e8 1b bd 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140f1:	8d 76 00             	lea    esi,[esi+0x0]
c00140f4:	83 c4 10             	add    esp,0x10
c00140f7:	85 c0                	test   eax,eax
c00140f9:	74 41                	je     c001413c <SysKill(regs*)+0xac>
c00140fb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00140fe:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014101:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014103:	75 27                	jne    c001412c <SysKill(regs*)+0x9c>
c0014105:	8d 76 00             	lea    esi,[esi+0x0]
c0014108:	51                   	push   ecx
c0014109:	51                   	push   ecx
c001410a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001410d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014112:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014115:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001411b:	e8 46 da ff ff       	call   c0011b66 <KeRaiseSignal(SigHandlerBlock*, int)>
c0014120:	83 c4 10             	add    esp,0x10
c0014123:	31 c0                	xor    eax,eax
c0014125:	31 d2                	xor    edx,edx
c0014127:	eb 1b                	jmp    c0014144 <SysKill(regs*)+0xb4>
c0014129:	8d 76 00             	lea    esi,[esi+0x0]
c001412c:	52                   	push   edx
c001412d:	52                   	push   edx
c001412e:	50                   	push   eax
c001412f:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014134:	e8 f3 bf 00 00       	call   c002012c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014139:	eb b9                	jmp    c00140f4 <SysKill(regs*)+0x64>
c001413b:	90                   	nop
c001413c:	83 c8 ff             	or     eax,0xffffffff
c001413f:	89 c2                	mov    edx,eax
c0014141:	8d 76 00             	lea    esi,[esi+0x0]
c0014144:	83 c4 08             	add    esp,0x8
c0014147:	5b                   	pop    ebx
c0014148:	c3                   	ret    

c0014149 <SysLoadDLL(regs*)>:
c0014149:	56                   	push   esi
c001414a:	53                   	push   ebx
c001414b:	31 d2                	xor    edx,edx
c001414d:	51                   	push   ecx
c001414e:	b8 01 00 00 00       	mov    eax,0x1
c0014153:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014157:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001415b:	0f 84 8c 00 00 00    	je     c00141ed <SysLoadDLL(regs*)+0xa4>
c0014161:	83 ec 0c             	sub    esp,0xc
c0014164:	68 14 01 00 00       	push   0x114
c0014169:	e8 4c 39 ff ff       	call   c0007aba <malloc>
c001416e:	83 c4 0c             	add    esp,0xc
c0014171:	89 c3                	mov    ebx,eax
c0014173:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014178:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001417b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001417e:	53                   	push   ebx
c001417f:	e8 cc 79 ff ff       	call   c000bb50 <File::File(char const*, Process*)>
c0014184:	83 c4 10             	add    esp,0x10
c0014187:	31 d2                	xor    edx,edx
c0014189:	b8 02 00 00 00       	mov    eax,0x2
c001418e:	85 db                	test   ebx,ebx
c0014190:	74 5b                	je     c00141ed <SysLoadDLL(regs*)+0xa4>
c0014192:	83 ec 0c             	sub    esp,0xc
c0014195:	53                   	push   ebx
c0014196:	e8 97 7c ff ff       	call   c000be32 <File::exists()>
c001419b:	83 c4 10             	add    esp,0x10
c001419e:	84 c0                	test   al,al
c00141a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00141a2:	75 11                	jne    c00141b5 <SysLoadDLL(regs*)+0x6c>
c00141a4:	83 ec 0c             	sub    esp,0xc
c00141a7:	53                   	push   ebx
c00141a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00141ab:	83 c4 10             	add    esp,0x10
c00141ae:	b8 03 00 00 00       	mov    eax,0x3
c00141b3:	eb 36                	jmp    c00141eb <SysLoadDLL(regs*)+0xa2>
c00141b5:	83 ec 0c             	sub    esp,0xc
c00141b8:	53                   	push   ebx
c00141b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00141bc:	58                   	pop    eax
c00141bd:	5a                   	pop    edx
c00141be:	6a 00                	push   0x0
c00141c0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00141c3:	e8 81 15 00 00       	call   c0015749 <Thr::loadDLL(char const*, bool)>
c00141c8:	83 c4 10             	add    esp,0x10
c00141cb:	89 c1                	mov    ecx,eax
c00141cd:	31 d2                	xor    edx,edx
c00141cf:	b8 04 00 00 00       	mov    eax,0x4
c00141d4:	85 c9                	test   ecx,ecx
c00141d6:	74 15                	je     c00141ed <SysLoadDLL(regs*)+0xa4>
c00141d8:	53                   	push   ebx
c00141d9:	53                   	push   ebx
c00141da:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00141e0:	51                   	push   ecx
c00141e1:	e8 94 17 00 00       	call   c001597a <Thr::executeDLL(unsigned long, void*)>
c00141e6:	83 c4 10             	add    esp,0x10
c00141e9:	31 c0                	xor    eax,eax
c00141eb:	31 d2                	xor    edx,edx
c00141ed:	59                   	pop    ecx
c00141ee:	5b                   	pop    ebx
c00141ef:	5e                   	pop    esi
c00141f0:	c3                   	ret    

c00141f1 <SysRead(regs*)>:
c00141f1:	57                   	push   edi
c00141f2:	56                   	push   esi
c00141f3:	53                   	push   ebx
c00141f4:	83 ec 10             	sub    esp,0x10
c00141f7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00141fb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00141fe:	83 f8 02             	cmp    eax,0x2
c0014201:	77 10                	ja     c0014213 <SysRead(regs*)+0x22>
c0014203:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014208:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001420b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014211:	eb 0e                	jmp    c0014221 <SysRead(regs*)+0x30>
c0014213:	83 ec 0c             	sub    esp,0xc
c0014216:	50                   	push   eax
c0014217:	e8 9b 52 ff ff       	call   c00094b7 <KeGetFileFromDescriptor(int)>
c001421c:	83 c4 10             	add    esp,0x10
c001421f:	89 c1                	mov    ecx,eax
c0014221:	83 c8 ff             	or     eax,0xffffffff
c0014224:	85 c9                	test   ecx,ecx
c0014226:	89 c2                	mov    edx,eax
c0014228:	74 28                	je     c0014252 <SysRead(regs*)+0x61>
c001422a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014232:	31 ff                	xor    edi,edi
c0014234:	83 ec 0c             	sub    esp,0xc
c0014237:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014239:	8d 54 24 18          	lea    edx,[esp+0x18]
c001423d:	52                   	push   edx
c001423e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014241:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014244:	57                   	push   edi
c0014245:	56                   	push   esi
c0014246:	51                   	push   ecx
c0014247:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001424a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001424e:	83 c4 20             	add    esp,0x20
c0014251:	99                   	cdq    
c0014252:	83 c4 10             	add    esp,0x10
c0014255:	5b                   	pop    ebx
c0014256:	5e                   	pop    esi
c0014257:	5f                   	pop    edi
c0014258:	c3                   	ret    

c0014259 <SysRegisterSignal(regs*)>:
c0014259:	83 ec 18             	sub    esp,0x18
c001425c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014260:	6a 00                	push   0x0
c0014262:	6a 00                	push   0x0
c0014264:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014267:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001426a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001426f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014272:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0014278:	e8 b3 d8 ff ff       	call   c0011b30 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c001427d:	83 c4 2c             	add    esp,0x2c
c0014280:	99                   	cdq    
c0014281:	c3                   	ret    

c0014282 <SysRegistryGetTypeFromPath(regs*)>:
c0014282:	57                   	push   edi
c0014283:	56                   	push   esi
c0014284:	53                   	push   ebx
c0014285:	81 ec 38 01 00 00    	sub    esp,0x138
c001428b:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014292:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014295:	68 d3 27 02 c0       	push   0xc00227d3
c001429a:	e8 aa 66 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001429f:	5a                   	pop    edx
c00142a0:	59                   	pop    ecx
c00142a1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142a4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142a7:	e8 4d f6 ff ff       	call   c00138f9 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00142ac:	5f                   	pop    edi
c00142ad:	89 c6                	mov    esi,eax
c00142af:	5a                   	pop    edx
c00142b0:	50                   	push   eax
c00142b1:	68 f3 27 02 c0       	push   0xc00227f3
c00142b6:	e8 8e 66 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00142bb:	83 c4 10             	add    esp,0x10
c00142be:	85 f6                	test   esi,esi
c00142c0:	74 28                	je     c00142ea <SysRegistryGetTypeFromPath(regs*)+0x68>
c00142c2:	50                   	push   eax
c00142c3:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00142c7:	57                   	push   edi
c00142c8:	56                   	push   esi
c00142c9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142cc:	e8 0c f2 ff ff       	call   c00134dd <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00142d1:	83 c4 0c             	add    esp,0xc
c00142d4:	89 c3                	mov    ebx,eax
c00142d6:	57                   	push   edi
c00142d7:	50                   	push   eax
c00142d8:	68 fb 27 02 c0       	push   0xc00227fb
c00142dd:	e8 67 66 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00142e2:	89 d8                	mov    eax,ebx
c00142e4:	83 c4 10             	add    esp,0x10
c00142e7:	99                   	cdq    
c00142e8:	eb 05                	jmp    c00142ef <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00142ea:	83 c8 ff             	or     eax,0xffffffff
c00142ed:	89 c2                	mov    edx,eax
c00142ef:	81 c4 30 01 00 00    	add    esp,0x130
c00142f5:	5b                   	pop    ebx
c00142f6:	5e                   	pop    esi
c00142f7:	5f                   	pop    edi
c00142f8:	c3                   	ret    

c00142f9 <SysRegistryReadExtent(regs*)>:
c00142f9:	83 ec 1c             	sub    esp,0x1c
c00142fc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014300:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014303:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014306:	85 c0                	test   eax,eax
c0014308:	79 1f                	jns    c0014329 <SysRegistryReadExtent(regs*)+0x30>
c001430a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001430f:	52                   	push   edx
c0014310:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014314:	52                   	push   edx
c0014315:	50                   	push   eax
c0014316:	51                   	push   ecx
c0014317:	e8 b3 f0 ff ff       	call   c00133cf <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c001431c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014320:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014324:	83 c4 10             	add    esp,0x10
c0014327:	eb 14                	jmp    c001433d <SysRegistryReadExtent(regs*)+0x44>
c0014329:	83 ec 04             	sub    esp,0x4
c001432c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001432f:	50                   	push   eax
c0014330:	51                   	push   ecx
c0014331:	e8 33 eb ff ff       	call   c0012e69 <CmGetString(Reghive_Tag*, int, char*)>
c0014336:	83 c4 10             	add    esp,0x10
c0014339:	31 c0                	xor    eax,eax
c001433b:	31 d2                	xor    edx,edx
c001433d:	83 c4 1c             	add    esp,0x1c
c0014340:	c3                   	ret    

c0014341 <SysRegistryPathToExtentLookup(regs*)>:
c0014341:	53                   	push   ebx
c0014342:	83 ec 10             	sub    esp,0x10
c0014345:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014349:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001434c:	68 11 28 02 c0       	push   0xc0022811
c0014351:	e8 f3 65 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0014356:	58                   	pop    eax
c0014357:	5a                   	pop    edx
c0014358:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001435b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001435e:	e8 96 f5 ff ff       	call   c00138f9 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014363:	83 c4 18             	add    esp,0x18
c0014366:	99                   	cdq    
c0014367:	5b                   	pop    ebx
c0014368:	c3                   	ret    

c0014369 <SysRegistryEnterDirectory(regs*)>:
c0014369:	53                   	push   ebx
c001436a:	83 ec 10             	sub    esp,0x10
c001436d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014371:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014374:	68 34 28 02 c0       	push   0xc0022834
c0014379:	e8 cb 65 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001437e:	58                   	pop    eax
c001437f:	5a                   	pop    edx
c0014380:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014383:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014386:	e8 55 eb ff ff       	call   c0012ee0 <CmEnterDirectory(Reghive_Tag*, int)>
c001438b:	83 c4 18             	add    esp,0x18
c001438e:	99                   	cdq    
c001438f:	5b                   	pop    ebx
c0014390:	c3                   	ret    

c0014391 <SysRegistryGetNext(regs*)>:
c0014391:	53                   	push   ebx
c0014392:	83 ec 10             	sub    esp,0x10
c0014395:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014399:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001439c:	68 52 28 02 c0       	push   0xc0022852
c00143a1:	e8 a3 65 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00143a6:	58                   	pop    eax
c00143a7:	5a                   	pop    edx
c00143a8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00143ab:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00143ae:	e8 6c eb ff ff       	call   c0012f1f <CmGetNext(Reghive_Tag*, int)>
c00143b3:	83 c4 18             	add    esp,0x18
c00143b6:	99                   	cdq    
c00143b7:	5b                   	pop    ebx
c00143b8:	c3                   	ret    

c00143b9 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00143b9:	57                   	push   edi
c00143ba:	56                   	push   esi
c00143bb:	53                   	push   ebx
c00143bc:	81 ec 34 01 00 00    	sub    esp,0x134
c00143c2:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00143c9:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00143cd:	57                   	push   edi
c00143ce:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00143d1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00143d4:	e8 04 f1 ff ff       	call   c00134dd <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00143d9:	89 c3                	mov    ebx,eax
c00143db:	58                   	pop    eax
c00143dc:	5a                   	pop    edx
c00143dd:	57                   	push   edi
c00143de:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00143e1:	e8 5a c2 fe ff       	call   c0000640 <strcpy>
c00143e6:	89 d8                	mov    eax,ebx
c00143e8:	81 c4 40 01 00 00    	add    esp,0x140
c00143ee:	99                   	cdq    
c00143ef:	5b                   	pop    ebx
c00143f0:	5e                   	pop    esi
c00143f1:	5f                   	pop    edi
c00143f2:	c3                   	ret    

c00143f3 <SysRegistryOpen(regs*)>:
c00143f3:	83 ec 18             	sub    esp,0x18
c00143f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143fa:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00143fd:	e8 f7 e8 ff ff       	call   c0012cf9 <CmOpen(char const*)>
c0014402:	83 c4 1c             	add    esp,0x1c
c0014405:	99                   	cdq    
c0014406:	c3                   	ret    

c0014407 <SysRegistryClose(regs*)>:
c0014407:	83 ec 18             	sub    esp,0x18
c001440a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001440e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014411:	e8 01 ea ff ff       	call   c0012e17 <CmClose(Reghive_Tag*)>
c0014416:	31 c0                	xor    eax,eax
c0014418:	31 d2                	xor    edx,edx
c001441a:	83 c4 1c             	add    esp,0x1c
c001441d:	c3                   	ret    

c001441e <SysSbrk(regs*)>:
c001441e:	56                   	push   esi
c001441f:	53                   	push   ebx
c0014420:	50                   	push   eax
c0014421:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014426:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001442a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001442d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014430:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0014436:	85 db                	test   ebx,ebx
c0014438:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001443b:	74 02                	je     c001443f <SysSbrk(regs*)+0x21>
c001443d:	79 06                	jns    c0014445 <SysSbrk(regs*)+0x27>
c001443f:	89 f0                	mov    eax,esi
c0014441:	31 d2                	xor    edx,edx
c0014443:	eb 2a                	jmp    c001446f <SysSbrk(regs*)+0x51>
c0014445:	83 c8 ff             	or     eax,0xffffffff
c0014448:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001444e:	89 c2                	mov    edx,eax
c0014450:	77 1d                	ja     c001446f <SysSbrk(regs*)+0x51>
c0014452:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014458:	50                   	push   eax
c0014459:	c1 ea 0c             	shr    edx,0xc
c001445c:	68 07 0c 00 00       	push   0xc07
c0014461:	52                   	push   edx
c0014462:	51                   	push   ecx
c0014463:	e8 c0 59 ff ff       	call   c0009e28 <VAS::allocatePages(int, int)>
c0014468:	89 f0                	mov    eax,esi
c001446a:	31 d2                	xor    edx,edx
c001446c:	83 c4 10             	add    esp,0x10
c001446f:	59                   	pop    ecx
c0014470:	5b                   	pop    ebx
c0014471:	5e                   	pop    esi
c0014472:	c3                   	ret    

c0014473 <SysSetCwd(regs*)>:
c0014473:	83 ec 14             	sub    esp,0x14
c0014476:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001447a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001447d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014482:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014485:	e8 47 7a ff ff       	call   c000bed1 <Fs::setcwd(Process*, char*)>
c001448a:	83 c4 1c             	add    esp,0x1c
c001448d:	99                   	cdq    
c001448e:	c3                   	ret    

c001448f <SysSetTime(regs*)>:
c001448f:	55                   	push   ebp
c0014490:	31 c9                	xor    ecx,ecx
c0014492:	57                   	push   edi
c0014493:	bd 0c 00 00 00       	mov    ebp,0xc
c0014498:	56                   	push   esi
c0014499:	53                   	push   ebx
c001449a:	31 db                	xor    ebx,ebx
c001449c:	83 ec 10             	sub    esp,0x10
c001449f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00144a3:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00144a6:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00144a9:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00144ac:	89 c2                	mov    edx,eax
c00144ae:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00144b4:	83 e2 1f             	and    edx,0x1f
c00144b7:	c1 e7 10             	shl    edi,0x10
c00144ba:	42                   	inc    edx
c00144bb:	c1 e8 05             	shr    eax,0x5
c00144be:	88 d1                	mov    cl,dl
c00144c0:	31 d2                	xor    edx,edx
c00144c2:	f7 f5                	div    ebp
c00144c4:	89 dd                	mov    ebp,ebx
c00144c6:	88 d5                	mov    ch,dl
c00144c8:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00144ce:	0f b7 c1             	movzx  eax,cx
c00144d1:	31 d2                	xor    edx,edx
c00144d3:	09 f8                	or     eax,edi
c00144d5:	bf 3c 00 00 00       	mov    edi,0x3c
c00144da:	89 c1                	mov    ecx,eax
c00144dc:	89 f0                	mov    eax,esi
c00144de:	f7 f7                	div    edi
c00144e0:	c1 e2 10             	shl    edx,0x10
c00144e3:	09 d5                	or     ebp,edx
c00144e5:	31 d2                	xor    edx,edx
c00144e7:	89 eb                	mov    ebx,ebp
c00144e9:	f7 f7                	div    edi
c00144eb:	bf 10 0e 00 00       	mov    edi,0xe10
c00144f0:	88 d7                	mov    bh,dl
c00144f2:	89 f0                	mov    eax,esi
c00144f4:	31 d2                	xor    edx,edx
c00144f6:	f7 f7                	div    edi
c00144f8:	bf 18 00 00 00       	mov    edi,0x18
c00144fd:	31 d2                	xor    edx,edx
c00144ff:	f7 f7                	div    edi
c0014501:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0014506:	88 d3                	mov    bl,dl
c0014508:	53                   	push   ebx
c0014509:	51                   	push   ecx
c001450a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0014510:	e8 c9 81 ff ff       	call   c000c6de <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014515:	83 c4 1c             	add    esp,0x1c
c0014518:	83 f0 01             	xor    eax,0x1
c001451b:	5b                   	pop    ebx
c001451c:	0f b6 c0             	movzx  eax,al
c001451f:	5e                   	pop    esi
c0014520:	31 d2                	xor    edx,edx
c0014522:	5f                   	pop    edi
c0014523:	5d                   	pop    ebp
c0014524:	c3                   	ret    

c0014525 <SysSymlink(regs*)>:
c0014525:	56                   	push   esi
c0014526:	83 c8 ff             	or     eax,0xffffffff
c0014529:	53                   	push   ebx
c001452a:	89 c2                	mov    edx,eax
c001452c:	81 ec 34 02 00 00    	sub    esp,0x234
c0014532:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0014539:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001453d:	74 50                	je     c001458f <SysSymlink(regs*)+0x6a>
c001453f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014542:	85 c9                	test   ecx,ecx
c0014544:	74 49                	je     c001458f <SysSymlink(regs*)+0x6a>
c0014546:	6a 01                	push   0x1
c0014548:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001454d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014550:	05 0c 01 00 00       	add    eax,0x10c
c0014555:	50                   	push   eax
c0014556:	51                   	push   ecx
c0014557:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001455b:	56                   	push   esi
c001455c:	e8 f7 72 ff ff       	call   c000b858 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014561:	6a 01                	push   0x1
c0014563:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014568:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001456b:	05 0c 01 00 00       	add    eax,0x10c
c0014570:	50                   	push   eax
c0014571:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014574:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c001457b:	53                   	push   ebx
c001457c:	e8 d7 72 ff ff       	call   c000b858 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014581:	83 c4 18             	add    esp,0x18
c0014584:	56                   	push   esi
c0014585:	53                   	push   ebx
c0014586:	e8 dc 6e ff ff       	call   c000b467 <KeCreateSymlink(char const*, char const*)>
c001458b:	83 c4 10             	add    esp,0x10
c001458e:	99                   	cdq    
c001458f:	81 c4 34 02 00 00    	add    esp,0x234
c0014595:	5b                   	pop    ebx
c0014596:	5e                   	pop    esi
c0014597:	c3                   	ret    

c0014598 <SysTimezone(regs*)>:
c0014598:	53                   	push   ebx
c0014599:	83 ec 08             	sub    esp,0x8
c001459c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145a0:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00145a4:	75 17                	jne    c00145bd <SysTimezone(regs*)+0x25>
c00145a6:	83 ec 0c             	sub    esp,0xc
c00145a9:	68 69 28 02 c0       	push   0xc0022869
c00145ae:	e8 96 63 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00145b3:	83 c8 ff             	or     eax,0xffffffff
c00145b6:	83 c4 10             	add    esp,0x10
c00145b9:	89 c2                	mov    edx,eax
c00145bb:	eb 20                	jmp    c00145dd <SysTimezone(regs*)+0x45>
c00145bd:	83 ec 0c             	sub    esp,0xc
c00145c0:	68 7e 28 02 c0       	push   0xc002287e
c00145c5:	e8 7f 63 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00145ca:	58                   	pop    eax
c00145cb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00145ce:	e8 75 7e ff ff       	call   c000c448 <User::loadClockSettings(int)>
c00145d3:	83 c4 10             	add    esp,0x10
c00145d6:	b8 01 00 00 00       	mov    eax,0x1
c00145db:	31 d2                	xor    edx,edx
c00145dd:	83 c4 08             	add    esp,0x8
c00145e0:	5b                   	pop    ebx
c00145e1:	c3                   	ret    

c00145e2 <SysTruncate(regs*)>:
c00145e2:	55                   	push   ebp
c00145e3:	57                   	push   edi
c00145e4:	31 ff                	xor    edi,edi
c00145e6:	56                   	push   esi
c00145e7:	53                   	push   ebx
c00145e8:	83 ec 0c             	sub    esp,0xc
c00145eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ef:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00145f2:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00145f5:	89 ce                	mov    esi,ecx
c00145f7:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00145fb:	0f 84 9a 00 00 00    	je     c001469b <SysTruncate(regs*)+0xb9>
c0014601:	83 ec 0c             	sub    esp,0xc
c0014604:	68 14 01 00 00       	push   0x114
c0014609:	e8 ac 34 ff ff       	call   c0007aba <malloc>
c001460e:	83 c4 0c             	add    esp,0xc
c0014611:	89 c3                	mov    ebx,eax
c0014613:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014618:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001461b:	55                   	push   ebp
c001461c:	53                   	push   ebx
c001461d:	e8 2e 75 ff ff       	call   c000bb50 <File::File(char const*, Process*)>
c0014622:	83 c4 10             	add    esp,0x10
c0014625:	31 d2                	xor    edx,edx
c0014627:	b8 03 00 00 00       	mov    eax,0x3
c001462c:	85 db                	test   ebx,ebx
c001462e:	0f 84 a2 00 00 00    	je     c00146d6 <SysTruncate(regs*)+0xf4>
c0014634:	51                   	push   ecx
c0014635:	51                   	push   ecx
c0014636:	6a 02                	push   0x2
c0014638:	53                   	push   ebx
c0014639:	e8 30 75 ff ff       	call   c000bb6e <File::open(FileOpenMode)>
c001463e:	83 c4 10             	add    esp,0x10
c0014641:	85 c0                	test   eax,eax
c0014643:	74 13                	je     c0014658 <SysTruncate(regs*)+0x76>
c0014645:	83 ec 0c             	sub    esp,0xc
c0014648:	8b 03                	mov    eax,DWORD PTR [ebx]
c001464a:	53                   	push   ebx
c001464b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001464e:	83 c4 10             	add    esp,0x10
c0014651:	b8 04 00 00 00       	mov    eax,0x4
c0014656:	eb 7c                	jmp    c00146d4 <SysTruncate(regs*)+0xf2>
c0014658:	52                   	push   edx
c0014659:	57                   	push   edi
c001465a:	56                   	push   esi
c001465b:	53                   	push   ebx
c001465c:	e8 21 76 ff ff       	call   c000bc82 <File::truncate(unsigned long long)>
c0014661:	83 c4 10             	add    esp,0x10
c0014664:	85 c0                	test   eax,eax
c0014666:	74 1b                	je     c0014683 <SysTruncate(regs*)+0xa1>
c0014668:	83 ec 0c             	sub    esp,0xc
c001466b:	53                   	push   ebx
c001466c:	e8 5b 75 ff ff       	call   c000bbcc <File::close()>
c0014671:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014673:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014676:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014679:	83 c4 10             	add    esp,0x10
c001467c:	b8 05 00 00 00       	mov    eax,0x5
c0014681:	eb 51                	jmp    c00146d4 <SysTruncate(regs*)+0xf2>
c0014683:	83 ec 0c             	sub    esp,0xc
c0014686:	53                   	push   ebx
c0014687:	e8 40 75 ff ff       	call   c000bbcc <File::close()>
c001468c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001468e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014691:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014694:	83 c4 10             	add    esp,0x10
c0014697:	31 c0                	xor    eax,eax
c0014699:	eb 39                	jmp    c00146d4 <SysTruncate(regs*)+0xf2>
c001469b:	31 d2                	xor    edx,edx
c001469d:	b8 01 00 00 00       	mov    eax,0x1
c00146a2:	83 fd 02             	cmp    ebp,0x2
c00146a5:	7e 2f                	jle    c00146d6 <SysTruncate(regs*)+0xf4>
c00146a7:	83 ec 0c             	sub    esp,0xc
c00146aa:	51                   	push   ecx
c00146ab:	e8 07 4e ff ff       	call   c00094b7 <KeGetFileFromDescriptor(int)>
c00146b0:	83 c4 10             	add    esp,0x10
c00146b3:	89 c1                	mov    ecx,eax
c00146b5:	31 d2                	xor    edx,edx
c00146b7:	b8 02 00 00 00       	mov    eax,0x2
c00146bc:	85 c9                	test   ecx,ecx
c00146be:	74 16                	je     c00146d6 <SysTruncate(regs*)+0xf4>
c00146c0:	50                   	push   eax
c00146c1:	57                   	push   edi
c00146c2:	56                   	push   esi
c00146c3:	51                   	push   ecx
c00146c4:	e8 b9 75 ff ff       	call   c000bc82 <File::truncate(unsigned long long)>
c00146c9:	83 c4 10             	add    esp,0x10
c00146cc:	85 c0                	test   eax,eax
c00146ce:	0f 95 c0             	setne  al
c00146d1:	0f b6 c0             	movzx  eax,al
c00146d4:	31 d2                	xor    edx,edx
c00146d6:	83 c4 0c             	add    esp,0xc
c00146d9:	5b                   	pop    ebx
c00146da:	5e                   	pop    esi
c00146db:	5f                   	pop    edi
c00146dc:	5d                   	pop    ebp
c00146dd:	c3                   	ret    

c00146de <SysWrite(regs*)>:
c00146de:	57                   	push   edi
c00146df:	56                   	push   esi
c00146e0:	53                   	push   ebx
c00146e1:	83 ec 10             	sub    esp,0x10
c00146e4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00146e8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00146eb:	83 f8 02             	cmp    eax,0x2
c00146ee:	77 10                	ja     c0014700 <SysWrite(regs*)+0x22>
c00146f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00146f8:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00146fe:	eb 0e                	jmp    c001470e <SysWrite(regs*)+0x30>
c0014700:	83 ec 0c             	sub    esp,0xc
c0014703:	50                   	push   eax
c0014704:	e8 ae 4d ff ff       	call   c00094b7 <KeGetFileFromDescriptor(int)>
c0014709:	83 c4 10             	add    esp,0x10
c001470c:	89 c1                	mov    ecx,eax
c001470e:	83 c8 ff             	or     eax,0xffffffff
c0014711:	85 c9                	test   ecx,ecx
c0014713:	89 c2                	mov    edx,eax
c0014715:	74 28                	je     c001473f <SysWrite(regs*)+0x61>
c0014717:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001471f:	31 ff                	xor    edi,edi
c0014721:	83 ec 0c             	sub    esp,0xc
c0014724:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014726:	8d 54 24 18          	lea    edx,[esp+0x18]
c001472a:	52                   	push   edx
c001472b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001472e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014731:	57                   	push   edi
c0014732:	56                   	push   esi
c0014733:	51                   	push   ecx
c0014734:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014737:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001473b:	83 c4 20             	add    esp,0x20
c001473e:	99                   	cdq    
c001473f:	83 c4 10             	add    esp,0x10
c0014742:	5b                   	pop    ebx
c0014743:	5e                   	pop    esi
c0014744:	5f                   	pop    edi
c0014745:	c3                   	ret    

c0014746 <SysWsbe(regs*)>:
c0014746:	57                   	push   edi
c0014747:	b9 0b 00 00 00       	mov    ecx,0xb
c001474c:	56                   	push   esi
c001474d:	be bd 28 02 c0       	mov    esi,0xc00228bd
c0014752:	53                   	push   ebx
c0014753:	83 ec 30             	sub    esp,0x30
c0014756:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001475a:	fc                   	cld    
c001475b:	83 ec 0c             	sub    esp,0xc
c001475e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014760:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014764:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014769:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001476c:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014772:	8b 06                	mov    eax,DWORD PTR [esi]
c0014774:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014777:	57                   	push   edi
c0014778:	e8 f3 bd fe ff       	call   c0000570 <strlen>
c001477d:	5a                   	pop    edx
c001477e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014782:	52                   	push   edx
c0014783:	31 d2                	xor    edx,edx
c0014785:	57                   	push   edi
c0014786:	52                   	push   edx
c0014787:	50                   	push   eax
c0014788:	56                   	push   esi
c0014789:	ff d3                	call   ebx
c001478b:	83 c4 14             	add    esp,0x14
c001478e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014792:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014795:	e8 ae 23 00 00       	call   c0016b48 <terminateTask(int)>
c001479a:	83 c4 40             	add    esp,0x40
c001479d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00147a2:	5b                   	pop    ebx
c00147a3:	31 d2                	xor    edx,edx
c00147a5:	5e                   	pop    esi
c00147a6:	5f                   	pop    edi
c00147a7:	c3                   	ret    

c00147a8 <SysYield(regs*)>:
c00147a8:	83 ec 0c             	sub    esp,0xc
c00147ab:	fa                   	cli    
c00147ac:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00147b2:	e8 f1 19 00 00       	call   c00161a8 <schedule()>
c00147b7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00147bc:	48                   	dec    eax
c00147bd:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00147c2:	75 01                	jne    c00147c5 <SysYield(regs*)+0x1d>
c00147c4:	fb                   	sti    
c00147c5:	31 c0                	xor    eax,eax
c00147c7:	31 d2                	xor    edx,edx
c00147c9:	83 c4 0c             	add    esp,0xc
c00147cc:	c3                   	ret    

c00147cd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00147cd:	55                   	push   ebp
c00147ce:	57                   	push   edi
c00147cf:	56                   	push   esi
c00147d0:	53                   	push   ebx
c00147d1:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00147d7:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00147df:	0f 95 c0             	setne  al
c00147e2:	31 d2                	xor    edx,edx
c00147e4:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00147ec:	0f 94 c2             	sete   dl
c00147ef:	85 c2                	test   edx,eax
c00147f1:	74 34                	je     c0014827 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00147f3:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00147fe:	74 27                	je     c0014827 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014800:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014807:	05 00 10 00 00       	add    eax,0x1000
c001480c:	89 c1                	mov    ecx,eax
c001480e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014813:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0014819:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014820:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0014827:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001482e:	83 ec 0c             	sub    esp,0xc
c0014831:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014837:	6a 01                	push   0x1
c0014839:	e8 d3 4d ff ff       	call   c0009611 <Virt::allocateKernelVirtualPages(int)>
c001483e:	83 c4 10             	add    esp,0x10
c0014841:	89 c3                	mov    ebx,eax
c0014843:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014849:	0f 86 25 01 00 00    	jbe    c0014974 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c001484f:	c1 ee 0c             	shr    esi,0xc
c0014852:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014859:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001485d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014865:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001486c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014870:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014877:	29 ef                	sub    edi,ebp
c0014879:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001487d:	0f 83 f8 00 00 00    	jae    c001497b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0014883:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0014889:	76 05                	jbe    c0014890 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c001488b:	bf 00 10 00 00       	mov    edi,0x1000
c0014890:	83 ec 0c             	sub    esp,0xc
c0014893:	31 d2                	xor    edx,edx
c0014895:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001489c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001489e:	8d 44 24 28          	lea    eax,[esp+0x28]
c00148a2:	50                   	push   eax
c00148a3:	8d 74 24 30          	lea    esi,[esp+0x30]
c00148a7:	56                   	push   esi
c00148a8:	52                   	push   edx
c00148a9:	57                   	push   edi
c00148aa:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00148b1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00148b4:	83 c4 20             	add    esp,0x20
c00148b7:	85 c0                	test   eax,eax
c00148b9:	75 06                	jne    c00148c1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c00148bb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00148bf:	74 13                	je     c00148d4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c00148c1:	83 ec 0c             	sub    esp,0xc
c00148c4:	53                   	push   ebx
c00148c5:	e8 65 50 ff ff       	call   c000992f <Virt::freeKernelVirtualPages(unsigned long)>
c00148ca:	83 c4 10             	add    esp,0x10
c00148cd:	31 c0                	xor    eax,eax
c00148cf:	e9 7c 01 00 00       	jmp    c0014a50 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00148d4:	fa                   	cli    
c00148d5:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00148db:	e8 e3 34 ff ff       	call   c0007dc3 <Phys::allocatePage()>
c00148e0:	6a 07                	push   0x7
c00148e2:	89 c7                	mov    edi,eax
c00148e4:	53                   	push   ebx
c00148e5:	50                   	push   eax
c00148e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148eb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148ee:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148f4:	e8 2b 54 ff ff       	call   c0009d24 <VAS::mapPage(unsigned long, unsigned long, int)>
c00148f9:	83 c4 0c             	add    esp,0xc
c00148fc:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014903:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014909:	6a 00                	push   0x0
c001490b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014910:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014913:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014919:	e8 6c 52 ff ff       	call   c0009b8a <VAS::mapOtherVASIn(bool, VAS*)>
c001491e:	58                   	pop    eax
c001491f:	5a                   	pop    edx
c0014920:	68 07 0c 00 00       	push   0xc07
c0014925:	55                   	push   ebp
c0014926:	57                   	push   edi
c0014927:	89 df                	mov    edi,ebx
c0014929:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014930:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014936:	6a 00                	push   0x0
c0014938:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001493d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014940:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014946:	e8 2b 56 ff ff       	call   c0009f76 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001494b:	b9 00 10 00 00       	mov    ecx,0x1000
c0014950:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014952:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014957:	83 c4 20             	add    esp,0x20
c001495a:	48                   	dec    eax
c001495b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014960:	85 c0                	test   eax,eax
c0014962:	75 01                	jne    c0014965 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0014964:	fb                   	sti    
c0014965:	81 c5 00 10 00 00    	add    ebp,0x1000
c001496b:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001496f:	e9 f1 fe ff ff       	jmp    c0014865 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0014974:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001497b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014982:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014988:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001498e:	0f 86 ae 00 00 00    	jbe    c0014a42 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0014994:	fa                   	cli    
c0014995:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001499b:	c1 ee 0c             	shr    esi,0xc
c001499e:	51                   	push   ecx
c001499f:	31 ff                	xor    edi,edi
c00149a1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00149a8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00149ae:	6a 00                	push   0x0
c00149b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149b5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00149b8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00149be:	e8 c7 51 ff ff       	call   c0009b8a <VAS::mapOtherVASIn(bool, VAS*)>
c00149c3:	83 c4 10             	add    esp,0x10
c00149c6:	e8 f8 33 ff ff       	call   c0007dc3 <Phys::allocatePage()>
c00149cb:	47                   	inc    edi
c00149cc:	6a 07                	push   0x7
c00149ce:	53                   	push   ebx
c00149cf:	50                   	push   eax
c00149d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00149d4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00149da:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00149dd:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00149e3:	e8 3c 53 ff ff       	call   c0009d24 <VAS::mapPage(unsigned long, unsigned long, int)>
c00149e8:	58                   	pop    eax
c00149e9:	5a                   	pop    edx
c00149ea:	68 07 0c 00 00       	push   0xc07
c00149ef:	55                   	push   ebp
c00149f0:	81 c5 00 10 00 00    	add    ebp,0x1000
c00149f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149fa:	50                   	push   eax
c00149fb:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014a02:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014a08:	6a 00                	push   0x0
c0014a0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a0f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a12:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014a18:	e8 59 55 ff ff       	call   c0009f76 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014a1d:	83 c4 1c             	add    esp,0x1c
c0014a20:	68 00 10 00 00       	push   0x1000
c0014a25:	6a 00                	push   0x0
c0014a27:	53                   	push   ebx
c0014a28:	e8 c3 ba fe ff       	call   c00004f0 <memset>
c0014a2d:	83 c4 10             	add    esp,0x10
c0014a30:	39 fe                	cmp    esi,edi
c0014a32:	77 92                	ja     c00149c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0014a34:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014a39:	48                   	dec    eax
c0014a3a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014a3f:	75 01                	jne    c0014a42 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0014a41:	fb                   	sti    
c0014a42:	83 ec 0c             	sub    esp,0xc
c0014a45:	53                   	push   ebx
c0014a46:	e8 e4 4e ff ff       	call   c000992f <Virt::freeKernelVirtualPages(unsigned long)>
c0014a4b:	83 c4 10             	add    esp,0x10
c0014a4e:	b0 01                	mov    al,0x1
c0014a50:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014a56:	5b                   	pop    ebx
c0014a57:	5e                   	pop    esi
c0014a58:	5f                   	pop    edi
c0014a59:	5d                   	pop    ebp
c0014a5a:	c3                   	ret    

c0014a5b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014a5b:	55                   	push   ebp
c0014a5c:	57                   	push   edi
c0014a5d:	56                   	push   esi
c0014a5e:	53                   	push   ebx
c0014a5f:	83 ec 48             	sub    esp,0x48
c0014a62:	68 14 01 00 00       	push   0x114
c0014a67:	e8 4e 30 ff ff       	call   c0007aba <malloc>
c0014a6c:	83 c4 0c             	add    esp,0xc
c0014a6f:	89 c6                	mov    esi,eax
c0014a71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014a75:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014a79:	50                   	push   eax
c0014a7a:	e8 d1 70 ff ff       	call   c000bb50 <File::File(char const*, Process*)>
c0014a7f:	58                   	pop    eax
c0014a80:	5a                   	pop    edx
c0014a81:	6a 01                	push   0x1
c0014a83:	56                   	push   esi
c0014a84:	e8 e5 70 ff ff       	call   c000bb6e <File::open(FileOpenMode)>
c0014a89:	83 c4 10             	add    esp,0x10
c0014a8c:	85 c0                	test   eax,eax
c0014a8e:	0f 85 43 01 00 00    	jne    c0014bd7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a94:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014a9c:	83 ec 0c             	sub    esp,0xc
c0014a9f:	6a 34                	push   0x34
c0014aa1:	e8 14 30 ff ff       	call   c0007aba <malloc>
c0014aa6:	89 c3                	mov    ebx,eax
c0014aa8:	58                   	pop    eax
c0014aa9:	8b 06                	mov    eax,DWORD PTR [esi]
c0014aab:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014aaf:	57                   	push   edi
c0014ab0:	53                   	push   ebx
c0014ab1:	6a 00                	push   0x0
c0014ab3:	6a 34                	push   0x34
c0014ab5:	56                   	push   esi
c0014ab6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ab9:	83 c4 20             	add    esp,0x20
c0014abc:	85 c0                	test   eax,eax
c0014abe:	0f 85 13 01 00 00    	jne    c0014bd7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014ac4:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014aca:	0f 85 07 01 00 00    	jne    c0014bd7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014ad0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014ad3:	85 c0                	test   eax,eax
c0014ad5:	0f 84 fc 00 00 00    	je     c0014bd7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014adb:	31 d2                	xor    edx,edx
c0014add:	55                   	push   ebp
c0014ade:	52                   	push   edx
c0014adf:	50                   	push   eax
c0014ae0:	56                   	push   esi
c0014ae1:	e8 46 71 ff ff       	call   c000bc2c <File::seek(unsigned long long)>
c0014ae6:	83 c4 10             	add    esp,0x10
c0014ae9:	85 c0                	test   eax,eax
c0014aeb:	0f 85 e6 00 00 00    	jne    c0014bd7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014af1:	83 ec 0c             	sub    esp,0xc
c0014af4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014af7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014afb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014aff:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014b03:	0f af c2             	imul   eax,edx
c0014b06:	50                   	push   eax
c0014b07:	e8 ae 2f ff ff       	call   c0007aba <malloc>
c0014b0c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014b0e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014b12:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014b15:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014b19:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014b1d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014b21:	0f af c2             	imul   eax,edx
c0014b24:	99                   	cdq    
c0014b25:	52                   	push   edx
c0014b26:	50                   	push   eax
c0014b27:	56                   	push   esi
c0014b28:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b2b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014b2e:	83 c4 20             	add    esp,0x20
c0014b31:	85 c0                	test   eax,eax
c0014b33:	0f 84 9e 00 00 00    	je     c0014bd7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014b39:	31 d2                	xor    edx,edx
c0014b3b:	51                   	push   ecx
c0014b3c:	52                   	push   edx
c0014b3d:	50                   	push   eax
c0014b3e:	56                   	push   esi
c0014b3f:	e8 e8 70 ff ff       	call   c000bc2c <File::seek(unsigned long long)>
c0014b44:	83 c4 10             	add    esp,0x10
c0014b47:	85 c0                	test   eax,eax
c0014b49:	0f 85 88 00 00 00    	jne    c0014bd7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014b4f:	83 ec 0c             	sub    esp,0xc
c0014b52:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014b56:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014b5a:	31 ed                	xor    ebp,ebp
c0014b5c:	0f af c2             	imul   eax,edx
c0014b5f:	50                   	push   eax
c0014b60:	e8 55 2f ff ff       	call   c0007aba <malloc>
c0014b65:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014b67:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014b6b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014b6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b72:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014b76:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014b7a:	0f af c2             	imul   eax,edx
c0014b7d:	99                   	cdq    
c0014b7e:	52                   	push   edx
c0014b7f:	50                   	push   eax
c0014b80:	56                   	push   esi
c0014b81:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b84:	83 c4 20             	add    esp,0x20
c0014b87:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014b8f:	0f b7 fd             	movzx  edi,bp
c0014b92:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0014b96:	73 7d                	jae    c0014c15 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0014b98:	c1 e7 05             	shl    edi,0x5
c0014b9b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014b9f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014ba2:	75 6b                	jne    c0014c0f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014ba4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014ba7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014bab:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014bae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014bb2:	52                   	push   edx
c0014bb3:	31 d2                	xor    edx,edx
c0014bb5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014bb8:	52                   	push   edx
c0014bb9:	50                   	push   eax
c0014bba:	56                   	push   esi
c0014bbb:	e8 6c 70 ff ff       	call   c000bc2c <File::seek(unsigned long long)>
c0014bc0:	83 c4 10             	add    esp,0x10
c0014bc3:	85 c0                	test   eax,eax
c0014bc5:	74 17                	je     c0014bde <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014bc7:	83 ec 0c             	sub    esp,0xc
c0014bca:	68 e9 28 02 c0       	push   0xc00228e9
c0014bcf:	e8 75 5d ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0014bd4:	83 c4 10             	add    esp,0x10
c0014bd7:	31 c0                	xor    eax,eax
c0014bd9:	e9 87 00 00 00       	jmp    c0014c65 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0014bde:	83 ec 0c             	sub    esp,0xc
c0014be1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014be4:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014be7:	50                   	push   eax
c0014be8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014bec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bf0:	56                   	push   esi
c0014bf1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014bf5:	e8 d3 fb ff ff       	call   c00147cd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014bfa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014bfe:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014c02:	83 c4 20             	add    esp,0x20
c0014c05:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014c09:	73 04                	jae    c0014c0f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014c0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014c0f:	45                   	inc    ebp
c0014c10:	e9 7a ff ff ff       	jmp    c0014b8f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014c15:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014c19:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014c1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014c21:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014c27:	83 ec 0c             	sub    esp,0xc
c0014c2a:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014c30:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014c35:	05 00 10 00 00       	add    eax,0x1000
c0014c3a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014c3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c41:	e8 84 2e ff ff       	call   c0007aca <free>
c0014c46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c49:	e8 7c 2e ff ff       	call   c0007aca <free>
c0014c4e:	58                   	pop    eax
c0014c4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c53:	e8 72 2e ff ff       	call   c0007aca <free>
c0014c58:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c5b:	e8 6c 6f ff ff       	call   c000bbcc <File::close()>
c0014c60:	83 c4 10             	add    esp,0x10
c0014c63:	b0 01                	mov    al,0x1
c0014c65:	83 c4 3c             	add    esp,0x3c
c0014c68:	5b                   	pop    ebx
c0014c69:	5e                   	pop    esi
c0014c6a:	5f                   	pop    edi
c0014c6b:	5d                   	pop    ebp
c0014c6c:	c3                   	ret    

c0014c6d <Thr::runtimeReferenceHelper()>:
c0014c6d:	83 ec 18             	sub    esp,0x18
c0014c70:	68 f1 28 02 c0       	push   0xc00228f1
c0014c75:	e8 cf 5c ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0014c7a:	fa                   	cli    
c0014c7b:	83 c4 10             	add    esp,0x10
c0014c7e:	eb fe                	jmp    c0014c7e <Thr::runtimeReferenceHelper()+0x11>

c0014c80 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014c80:	57                   	push   edi
c0014c81:	56                   	push   esi
c0014c82:	53                   	push   ebx
c0014c83:	31 db                	xor    ebx,ebx
c0014c85:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014c8b:	7e 3c                	jle    c0014cc9 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014c8d:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014c94:	31 ff                	xor    edi,edi
c0014c96:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014c9d:	7e 27                	jle    c0014cc6 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014c9f:	50                   	push   eax
c0014ca0:	50                   	push   eax
c0014ca1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ca5:	8b 06                	mov    eax,DWORD PTR [esi]
c0014ca7:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014cae:	50                   	push   eax
c0014caf:	e8 9c ba fe ff       	call   c0000750 <strcmp>
c0014cb4:	83 c4 10             	add    esp,0x10
c0014cb7:	85 c0                	test   eax,eax
c0014cb9:	75 05                	jne    c0014cc0 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014cbb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014cbe:	eb 0b                	jmp    c0014ccb <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014cc0:	83 c6 10             	add    esi,0x10
c0014cc3:	47                   	inc    edi
c0014cc4:	eb d0                	jmp    c0014c96 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014cc6:	43                   	inc    ebx
c0014cc7:	eb bc                	jmp    c0014c85 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014cc9:	31 c0                	xor    eax,eax
c0014ccb:	5b                   	pop    ebx
c0014ccc:	5e                   	pop    esi
c0014ccd:	5f                   	pop    edi
c0014cce:	c3                   	ret    

c0014ccf <Thr::loadKernelSymbolTable(char const*)>:
c0014ccf:	55                   	push   ebp
c0014cd0:	57                   	push   edi
c0014cd1:	56                   	push   esi
c0014cd2:	53                   	push   ebx
c0014cd3:	83 ec 68             	sub    esp,0x68
c0014cd6:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014cdc:	68 14 01 00 00       	push   0x114
c0014ce1:	e8 d4 2d ff ff       	call   c0007aba <malloc>
c0014ce6:	83 c4 0c             	add    esp,0xc
c0014ce9:	89 c3                	mov    ebx,eax
c0014ceb:	56                   	push   esi
c0014cec:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014cf0:	50                   	push   eax
c0014cf1:	e8 5a 6e ff ff       	call   c000bb50 <File::File(char const*, Process*)>
c0014cf6:	5e                   	pop    esi
c0014cf7:	5f                   	pop    edi
c0014cf8:	6a 01                	push   0x1
c0014cfa:	53                   	push   ebx
c0014cfb:	e8 6e 6e ff ff       	call   c000bb6e <File::open(FileOpenMode)>
c0014d00:	83 c4 10             	add    esp,0x10
c0014d03:	85 c0                	test   eax,eax
c0014d05:	74 0a                	je     c0014d11 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014d07:	83 ec 0c             	sub    esp,0xc
c0014d0a:	68 13 29 02 c0       	push   0xc0022913
c0014d0f:	eb 34                	jmp    c0014d45 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014d11:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014d19:	83 ec 0c             	sub    esp,0xc
c0014d1c:	6a 34                	push   0x34
c0014d1e:	e8 97 2d ff ff       	call   c0007aba <malloc>
c0014d23:	59                   	pop    ecx
c0014d24:	89 c7                	mov    edi,eax
c0014d26:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014d2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d2c:	56                   	push   esi
c0014d2d:	57                   	push   edi
c0014d2e:	6a 00                	push   0x0
c0014d30:	6a 34                	push   0x34
c0014d32:	53                   	push   ebx
c0014d33:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d36:	83 c4 20             	add    esp,0x20
c0014d39:	85 c0                	test   eax,eax
c0014d3b:	74 17                	je     c0014d54 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014d3d:	83 ec 0c             	sub    esp,0xc
c0014d40:	68 2a 29 02 c0       	push   0xc002292a
c0014d45:	e8 79 c9 ff ff       	call   c00116c3 <KePanic(char const*)>
c0014d4a:	83 c4 10             	add    esp,0x10
c0014d4d:	31 c0                	xor    eax,eax
c0014d4f:	e9 31 02 00 00       	jmp    c0014f85 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014d54:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014d5a:	75 e1                	jne    c0014d3d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d5c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014d5f:	85 c0                	test   eax,eax
c0014d61:	74 da                	je     c0014d3d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d63:	52                   	push   edx
c0014d64:	31 d2                	xor    edx,edx
c0014d66:	52                   	push   edx
c0014d67:	50                   	push   eax
c0014d68:	53                   	push   ebx
c0014d69:	e8 be 6e ff ff       	call   c000bc2c <File::seek(unsigned long long)>
c0014d6e:	83 c4 10             	add    esp,0x10
c0014d71:	85 c0                	test   eax,eax
c0014d73:	75 c8                	jne    c0014d3d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d75:	83 ec 0c             	sub    esp,0xc
c0014d78:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014d7c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014d80:	31 ed                	xor    ebp,ebp
c0014d82:	0f af c2             	imul   eax,edx
c0014d85:	50                   	push   eax
c0014d86:	e8 2f 2d ff ff       	call   c0007aba <malloc>
c0014d8b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014d8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d91:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d94:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014d98:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014d9c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014da0:	0f af c2             	imul   eax,edx
c0014da3:	99                   	cdq    
c0014da4:	52                   	push   edx
c0014da5:	50                   	push   eax
c0014da6:	53                   	push   ebx
c0014da7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014daa:	83 c4 20             	add    esp,0x20
c0014dad:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014db5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014dbd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014dc5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014dcd:	0f b7 f5             	movzx  esi,bp
c0014dd0:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014dd4:	0f 83 a7 00 00 00    	jae    c0014e81 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014dda:	6b f6 28             	imul   esi,esi,0x28
c0014ddd:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014de1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014de4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014de8:	50                   	push   eax
c0014de9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014ded:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014df1:	8b 16                	mov    edx,DWORD PTR [esi]
c0014df3:	6b c0 28             	imul   eax,eax,0x28
c0014df6:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014dfa:	89 d0                	mov    eax,edx
c0014dfc:	31 d2                	xor    edx,edx
c0014dfe:	52                   	push   edx
c0014dff:	50                   	push   eax
c0014e00:	53                   	push   ebx
c0014e01:	e8 26 6e ff ff       	call   c000bc2c <File::seek(unsigned long long)>
c0014e06:	83 c4 0c             	add    esp,0xc
c0014e09:	6a 20                	push   0x20
c0014e0b:	6a 00                	push   0x0
c0014e0d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014e11:	52                   	push   edx
c0014e12:	e8 d9 b6 fe ff       	call   c00004f0 <memset>
c0014e17:	58                   	pop    eax
c0014e18:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e1a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014e1e:	51                   	push   ecx
c0014e1f:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014e23:	52                   	push   edx
c0014e24:	6a 00                	push   0x0
c0014e26:	6a 1f                	push   0x1f
c0014e28:	53                   	push   ebx
c0014e29:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e2c:	83 c4 18             	add    esp,0x18
c0014e2f:	68 41 29 02 c0       	push   0xc0022941
c0014e34:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014e38:	52                   	push   edx
c0014e39:	e8 12 b9 fe ff       	call   c0000750 <strcmp>
c0014e3e:	83 c4 10             	add    esp,0x10
c0014e41:	85 c0                	test   eax,eax
c0014e43:	75 0f                	jne    c0014e54 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014e45:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014e48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014e54:	50                   	push   eax
c0014e55:	50                   	push   eax
c0014e56:	68 49 29 02 c0       	push   0xc0022949
c0014e5b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014e5f:	50                   	push   eax
c0014e60:	e8 eb b8 fe ff       	call   c0000750 <strcmp>
c0014e65:	83 c4 10             	add    esp,0x10
c0014e68:	85 c0                	test   eax,eax
c0014e6a:	75 0f                	jne    c0014e7b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014e6c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014e6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014e73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e7b:	45                   	inc    ebp
c0014e7c:	e9 4c ff ff ff       	jmp    c0014dcd <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014e81:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014e86:	75 10                	jne    c0014e98 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014e88:	83 ec 0c             	sub    esp,0xc
c0014e8b:	68 51 29 02 c0       	push   0xc0022951
c0014e90:	e8 2e c8 ff ff       	call   c00116c3 <KePanic(char const*)>
c0014e95:	83 c4 10             	add    esp,0x10
c0014e98:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014e9d:	75 10                	jne    c0014eaf <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014e9f:	83 ec 0c             	sub    esp,0xc
c0014ea2:	68 51 29 02 c0       	push   0xc0022951
c0014ea7:	e8 17 c8 ff ff       	call   c00116c3 <KePanic(char const*)>
c0014eac:	83 c4 10             	add    esp,0x10
c0014eaf:	31 d2                	xor    edx,edx
c0014eb1:	50                   	push   eax
c0014eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014eb6:	52                   	push   edx
c0014eb7:	50                   	push   eax
c0014eb8:	53                   	push   ebx
c0014eb9:	e8 6e 6d ff ff       	call   c000bc2c <File::seek(unsigned long long)>
c0014ebe:	5a                   	pop    edx
c0014ebf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014ec3:	e8 f2 2b ff ff       	call   c0007aba <malloc>
c0014ec8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014ecc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014ed0:	31 c9                	xor    ecx,ecx
c0014ed2:	5e                   	pop    esi
c0014ed3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ed5:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014ed9:	55                   	push   ebp
c0014eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ede:	51                   	push   ecx
c0014edf:	52                   	push   edx
c0014ee0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014ee4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014ee8:	53                   	push   ebx
c0014ee9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014eec:	83 c4 14             	add    esp,0x14
c0014eef:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014ef3:	e8 c2 2b ff ff       	call   c0007aba <malloc>
c0014ef8:	89 c6                	mov    esi,eax
c0014efa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014efc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014eff:	56                   	push   esi
c0014f00:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014f04:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014f08:	51                   	push   ecx
c0014f09:	52                   	push   edx
c0014f0a:	53                   	push   ebx
c0014f0b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f0e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014f12:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014f18:	83 c4 1c             	add    esp,0x1c
c0014f1b:	c1 e8 04             	shr    eax,0x4
c0014f1e:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014f25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f29:	31 d2                	xor    edx,edx
c0014f2b:	52                   	push   edx
c0014f2c:	50                   	push   eax
c0014f2d:	53                   	push   ebx
c0014f2e:	e8 f9 6c ff ff       	call   c000bc2c <File::seek(unsigned long long)>
c0014f33:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014f35:	31 d2                	xor    edx,edx
c0014f37:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f3a:	56                   	push   esi
c0014f3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014f3f:	52                   	push   edx
c0014f40:	50                   	push   eax
c0014f41:	53                   	push   ebx
c0014f42:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f45:	83 c4 14             	add    esp,0x14
c0014f48:	53                   	push   ebx
c0014f49:	e8 7e 6c ff ff       	call   c000bbcc <File::close()>
c0014f4e:	5d                   	pop    ebp
c0014f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f53:	e8 72 2b ff ff       	call   c0007aca <free>
c0014f58:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014f5b:	e8 6a 2b ff ff       	call   c0007aca <free>
c0014f60:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014f65:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014f69:	8d 50 01             	lea    edx,[eax+0x1]
c0014f6c:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014f73:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014f7a:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014f80:	83 c4 10             	add    esp,0x10
c0014f83:	b0 01                	mov    al,0x1
c0014f85:	83 c4 5c             	add    esp,0x5c
c0014f88:	5b                   	pop    ebx
c0014f89:	5e                   	pop    esi
c0014f8a:	5f                   	pop    edi
c0014f8b:	5d                   	pop    ebp
c0014f8c:	c3                   	ret    

c0014f8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014f8d:	55                   	push   ebp
c0014f8e:	57                   	push   edi
c0014f8f:	56                   	push   esi
c0014f90:	53                   	push   ebx
c0014f91:	81 ec 68 03 00 00    	sub    esp,0x368
c0014f97:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014f9e:	8b 1d f0 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6f0
c0014fa4:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014fa8:	68 14 01 00 00       	push   0x114
c0014fad:	e8 08 2b ff ff       	call   c0007aba <malloc>
c0014fb2:	83 c4 0c             	add    esp,0xc
c0014fb5:	89 c5                	mov    ebp,eax
c0014fb7:	53                   	push   ebx
c0014fb8:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014fbf:	50                   	push   eax
c0014fc0:	e8 8b 6b ff ff       	call   c000bb50 <File::File(char const*, Process*)>
c0014fc5:	5e                   	pop    esi
c0014fc6:	5f                   	pop    edi
c0014fc7:	6a 01                	push   0x1
c0014fc9:	55                   	push   ebp
c0014fca:	e8 9f 6b ff ff       	call   c000bb6e <File::open(FileOpenMode)>
c0014fcf:	83 c4 10             	add    esp,0x10
c0014fd2:	85 c0                	test   eax,eax
c0014fd4:	0f 85 aa 06 00 00    	jne    c0015684 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014fda:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014fe2:	83 ec 0c             	sub    esp,0xc
c0014fe5:	6a 34                	push   0x34
c0014fe7:	e8 ce 2a ff ff       	call   c0007aba <malloc>
c0014fec:	5b                   	pop    ebx
c0014fed:	89 c7                	mov    edi,eax
c0014fef:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014ff3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014ff6:	53                   	push   ebx
c0014ff7:	57                   	push   edi
c0014ff8:	6a 00                	push   0x0
c0014ffa:	6a 34                	push   0x34
c0014ffc:	55                   	push   ebp
c0014ffd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015000:	83 c4 20             	add    esp,0x20
c0015003:	85 c0                	test   eax,eax
c0015005:	0f 85 79 06 00 00    	jne    c0015684 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001500b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015011:	0f 85 6d 06 00 00    	jne    c0015684 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015017:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001501a:	85 c0                	test   eax,eax
c001501c:	0f 84 62 06 00 00    	je     c0015684 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015022:	31 d2                	xor    edx,edx
c0015024:	51                   	push   ecx
c0015025:	52                   	push   edx
c0015026:	50                   	push   eax
c0015027:	55                   	push   ebp
c0015028:	e8 ff 6b ff ff       	call   c000bc2c <File::seek(unsigned long long)>
c001502d:	83 c4 10             	add    esp,0x10
c0015030:	85 c0                	test   eax,eax
c0015032:	0f 85 4c 06 00 00    	jne    c0015684 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015038:	83 ec 0c             	sub    esp,0xc
c001503b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001503e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015042:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015046:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001504a:	0f af c2             	imul   eax,edx
c001504d:	50                   	push   eax
c001504e:	e8 67 2a ff ff       	call   c0007aba <malloc>
c0015053:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015056:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001505a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001505d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015061:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015065:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015069:	0f af c2             	imul   eax,edx
c001506c:	99                   	cdq    
c001506d:	52                   	push   edx
c001506e:	50                   	push   eax
c001506f:	55                   	push   ebp
c0015070:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015073:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0015076:	83 c4 20             	add    esp,0x20
c0015079:	85 c0                	test   eax,eax
c001507b:	0f 84 03 06 00 00    	je     c0015684 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015081:	52                   	push   edx
c0015082:	31 d2                	xor    edx,edx
c0015084:	52                   	push   edx
c0015085:	50                   	push   eax
c0015086:	55                   	push   ebp
c0015087:	e8 a0 6b ff ff       	call   c000bc2c <File::seek(unsigned long long)>
c001508c:	83 c4 10             	add    esp,0x10
c001508f:	85 c0                	test   eax,eax
c0015091:	0f 85 ed 05 00 00    	jne    c0015684 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015097:	83 ec 0c             	sub    esp,0xc
c001509a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001509e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00150a2:	31 f6                	xor    esi,esi
c00150a4:	0f af c2             	imul   eax,edx
c00150a7:	50                   	push   eax
c00150a8:	e8 0d 2a ff ff       	call   c0007aba <malloc>
c00150ad:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00150b0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00150b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00150bb:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00150bf:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00150c3:	0f af c2             	imul   eax,edx
c00150c6:	99                   	cdq    
c00150c7:	52                   	push   edx
c00150c8:	50                   	push   eax
c00150c9:	55                   	push   ebp
c00150ca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00150cd:	83 c4 20             	add    esp,0x20
c00150d0:	0f b7 de             	movzx  ebx,si
c00150d3:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c00150d7:	0f 83 87 00 00 00    	jae    c0015164 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00150dd:	c1 e3 05             	shl    ebx,0x5
c00150e0:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00150e4:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00150e7:	75 75                	jne    c001515e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00150e9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00150ec:	31 d2                	xor    edx,edx
c00150ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00150f2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00150f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00150f9:	50                   	push   eax
c00150fa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00150fd:	52                   	push   edx
c00150fe:	50                   	push   eax
c00150ff:	55                   	push   ebp
c0015100:	e8 27 6b ff ff       	call   c000bc2c <File::seek(unsigned long long)>
c0015105:	83 c4 10             	add    esp,0x10
c0015108:	85 c0                	test   eax,eax
c001510a:	0f 85 74 05 00 00    	jne    c0015684 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015110:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015117:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001511a:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c001511e:	31 d2                	xor    edx,edx
c0015120:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0015124:	83 ec 0c             	sub    esp,0xc
c0015127:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001512b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015132:	50                   	push   eax
c0015133:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015137:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001513b:	52                   	push   edx
c001513c:	50                   	push   eax
c001513d:	55                   	push   ebp
c001513e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015141:	83 c4 1c             	add    esp,0x1c
c0015144:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015147:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001514a:	50                   	push   eax
c001514b:	6a 00                	push   0x0
c001514d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015151:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0015155:	50                   	push   eax
c0015156:	e8 95 b3 fe ff       	call   c00004f0 <memset>
c001515b:	83 c4 10             	add    esp,0x10
c001515e:	46                   	inc    esi
c001515f:	e9 6c ff ff ff       	jmp    c00150d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0015164:	53                   	push   ebx
c0015165:	31 db                	xor    ebx,ebx
c0015167:	68 00 01 00 00       	push   0x100
c001516c:	6a 00                	push   0x0
c001516e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015172:	50                   	push   eax
c0015173:	e8 78 b3 fe ff       	call   c00004f0 <memset>
c0015178:	83 c4 0c             	add    esp,0xc
c001517b:	68 00 01 00 00       	push   0x100
c0015180:	6a 00                	push   0x0
c0015182:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0015189:	50                   	push   eax
c001518a:	e8 61 b3 fe ff       	call   c00004f0 <memset>
c001518f:	83 c4 10             	add    esp,0x10
c0015192:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001519a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00151a2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00151aa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00151b2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00151ba:	0f b7 f3             	movzx  esi,bx
c00151bd:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c00151c1:	0f 83 2d 01 00 00    	jae    c00152f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00151c7:	6b f6 28             	imul   esi,esi,0x28
c00151ca:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00151ce:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00151d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00151d5:	52                   	push   edx
c00151d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00151da:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00151de:	8b 06                	mov    eax,DWORD PTR [esi]
c00151e0:	6b d2 28             	imul   edx,edx,0x28
c00151e3:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00151e7:	31 d2                	xor    edx,edx
c00151e9:	52                   	push   edx
c00151ea:	50                   	push   eax
c00151eb:	55                   	push   ebp
c00151ec:	e8 3b 6a ff ff       	call   c000bc2c <File::seek(unsigned long long)>
c00151f1:	83 c4 0c             	add    esp,0xc
c00151f4:	6a 20                	push   0x20
c00151f6:	6a 00                	push   0x0
c00151f8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00151ff:	51                   	push   ecx
c0015200:	e8 eb b2 fe ff       	call   c00004f0 <memset>
c0015205:	59                   	pop    ecx
c0015206:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015209:	8d 54 24 58          	lea    edx,[esp+0x58]
c001520d:	52                   	push   edx
c001520e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015215:	51                   	push   ecx
c0015216:	6a 00                	push   0x0
c0015218:	6a 1f                	push   0x1f
c001521a:	55                   	push   ebp
c001521b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001521e:	83 c4 1c             	add    esp,0x1c
c0015221:	6a 09                	push   0x9
c0015223:	68 6b 29 02 c0       	push   0xc002296b
c0015228:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001522f:	51                   	push   ecx
c0015230:	e8 4b b1 fe ff       	call   c0000380 <memcmp>
c0015235:	83 c4 10             	add    esp,0x10
c0015238:	85 c0                	test   eax,eax
c001523a:	75 21                	jne    c001525d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001523c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015240:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015244:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0015248:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001524c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001524f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015256:	89 d0                	mov    eax,edx
c0015258:	40                   	inc    eax
c0015259:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001525d:	50                   	push   eax
c001525e:	6a 09                	push   0x9
c0015260:	68 75 29 02 c0       	push   0xc0022975
c0015265:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001526c:	50                   	push   eax
c001526d:	e8 0e b1 fe ff       	call   c0000380 <memcmp>
c0015272:	83 c4 10             	add    esp,0x10
c0015275:	85 c0                	test   eax,eax
c0015277:	75 21                	jne    c001529a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0015279:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001527d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015281:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015285:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0015289:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001528c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015293:	89 d0                	mov    eax,edx
c0015295:	40                   	inc    eax
c0015296:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001529a:	50                   	push   eax
c001529b:	50                   	push   eax
c001529c:	68 41 29 02 c0       	push   0xc0022941
c00152a1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00152a8:	50                   	push   eax
c00152a9:	e8 a2 b4 fe ff       	call   c0000750 <strcmp>
c00152ae:	83 c4 10             	add    esp,0x10
c00152b1:	85 c0                	test   eax,eax
c00152b3:	75 0f                	jne    c00152c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00152b5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00152b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00152bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00152c4:	50                   	push   eax
c00152c5:	50                   	push   eax
c00152c6:	68 49 29 02 c0       	push   0xc0022949
c00152cb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00152d2:	50                   	push   eax
c00152d3:	e8 78 b4 fe ff       	call   c0000750 <strcmp>
c00152d8:	83 c4 10             	add    esp,0x10
c00152db:	85 c0                	test   eax,eax
c00152dd:	75 0f                	jne    c00152ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00152df:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00152e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00152e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00152ee:	43                   	inc    ebx
c00152ef:	e9 c6 fe ff ff       	jmp    c00151ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00152f4:	31 d2                	xor    edx,edx
c00152f6:	50                   	push   eax
c00152f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152fb:	52                   	push   edx
c00152fc:	50                   	push   eax
c00152fd:	55                   	push   ebp
c00152fe:	e8 29 69 ff ff       	call   c000bc2c <File::seek(unsigned long long)>
c0015303:	58                   	pop    eax
c0015304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015308:	e8 ad 27 ff ff       	call   c0007aba <malloc>
c001530d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015310:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015314:	31 d2                	xor    edx,edx
c0015316:	58                   	pop    eax
c0015317:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001531b:	53                   	push   ebx
c001531c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0015320:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015324:	52                   	push   edx
c0015325:	50                   	push   eax
c0015326:	55                   	push   ebp
c0015327:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001532a:	83 c4 14             	add    esp,0x14
c001532d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015331:	e8 84 27 ff ff       	call   c0007aba <malloc>
c0015336:	31 d2                	xor    edx,edx
c0015338:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001533c:	83 c4 0c             	add    esp,0xc
c001533f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015343:	52                   	push   edx
c0015344:	50                   	push   eax
c0015345:	55                   	push   ebp
c0015346:	e8 e1 68 ff ff       	call   c000bc2c <File::seek(unsigned long long)>
c001534b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001534e:	31 d2                	xor    edx,edx
c0015350:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015353:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015357:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001535b:	52                   	push   edx
c001535c:	50                   	push   eax
c001535d:	55                   	push   ebp
c001535e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015361:	83 c4 20             	add    esp,0x20
c0015364:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0015369:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015371:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015375:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015379:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001537d:	0f 84 05 03 00 00    	je     c0015688 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0015383:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001538a:	31 d2                	xor    edx,edx
c001538c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015390:	c1 e8 03             	shr    eax,0x3
c0015393:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015397:	51                   	push   ecx
c0015398:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001539c:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00153a0:	52                   	push   edx
c00153a1:	50                   	push   eax
c00153a2:	55                   	push   ebp
c00153a3:	e8 84 68 ff ff       	call   c000bc2c <File::seek(unsigned long long)>
c00153a8:	5b                   	pop    ebx
c00153a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153ad:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00153b4:	e8 01 27 ff ff       	call   c0007aba <malloc>
c00153b9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00153bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00153c0:	31 d2                	xor    edx,edx
c00153c2:	5e                   	pop    esi
c00153c3:	8d 44 24 58          	lea    eax,[esp+0x58]
c00153c7:	50                   	push   eax
c00153c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00153d0:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00153d7:	52                   	push   edx
c00153d8:	50                   	push   eax
c00153d9:	55                   	push   ebp
c00153da:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00153dd:	83 c4 20             	add    esp,0x20
c00153e0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00153e8:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00153ec:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c00153f0:	0f 8d 76 02 00 00    	jge    c001566c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c00153f6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00153fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00153fe:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0015403:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0015406:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001540a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001540e:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0015412:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015416:	c1 e8 08             	shr    eax,0x8
c0015419:	89 c6                	mov    esi,eax
c001541b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001541f:	c1 e6 04             	shl    esi,0x4
c0015422:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0015426:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0015429:	85 db                	test   ebx,ebx
c001542b:	0f 85 b3 00 00 00    	jne    c00154e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015431:	83 ec 0c             	sub    esp,0xc
c0015434:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015438:	03 06                	add    eax,DWORD PTR [esi]
c001543a:	50                   	push   eax
c001543b:	e8 40 f8 ff ff       	call   c0014c80 <Thr::getAddressOfKernelSymbol(char const*)>
c0015440:	83 c4 10             	add    esp,0x10
c0015443:	89 c3                	mov    ebx,eax
c0015445:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c001544a:	85 c0                	test   eax,eax
c001544c:	0f 85 92 00 00 00    	jne    c00154e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015452:	83 ec 0c             	sub    esp,0xc
c0015455:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015459:	03 06                	add    eax,DWORD PTR [esi]
c001545b:	50                   	push   eax
c001545c:	e8 4f c4 ff ff       	call   c00118b0 <KeResolveCompatibilitySymbol(char*)>
c0015461:	83 c4 10             	add    esp,0x10
c0015464:	89 c3                	mov    ebx,eax
c0015466:	85 c0                	test   eax,eax
c0015468:	75 7a                	jne    c00154e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001546a:	51                   	push   ecx
c001546b:	51                   	push   ecx
c001546c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015470:	03 06                	add    eax,DWORD PTR [esi]
c0015472:	50                   	push   eax
c0015473:	68 7f 29 02 c0       	push   0xc002297f
c0015478:	e8 cc 54 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001547d:	58                   	pop    eax
c001547e:	5a                   	pop    edx
c001547f:	68 99 29 02 c0       	push   0xc0022999
c0015484:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001548b:	50                   	push   eax
c001548c:	e8 af b1 fe ff       	call   c0000640 <strcpy>
c0015491:	59                   	pop    ecx
c0015492:	58                   	pop    eax
c0015493:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015497:	03 06                	add    eax,DWORD PTR [esi]
c0015499:	50                   	push   eax
c001549a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00154a1:	50                   	push   eax
c00154a2:	e8 99 b3 fe ff       	call   c0000840 <strcat>
c00154a7:	58                   	pop    eax
c00154a8:	5a                   	pop    edx
c00154a9:	68 2f 2a 02 c0       	push   0xc0022a2f
c00154ae:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00154b5:	50                   	push   eax
c00154b6:	e8 85 b3 fe ff       	call   c0000840 <strcat>
c00154bb:	83 c4 10             	add    esp,0x10
c00154be:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00154c3:	0f 84 5d 01 00 00    	je     c0015626 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00154c9:	83 ec 0c             	sub    esp,0xc
c00154cc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00154d3:	50                   	push   eax
c00154d4:	e8 ea c1 ff ff       	call   c00116c3 <KePanic(char const*)>
c00154d9:	83 c4 10             	add    esp,0x10
c00154dc:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00154e0:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c00154e4:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00154e9:	83 f8 01             	cmp    eax,0x1
c00154ec:	0f 85 8f 00 00 00    	jne    c0015581 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c00154f2:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00154f9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00154fd:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0015501:	01 ce                	add    esi,ecx
c0015503:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001550b:	0f 94 c0             	sete   al
c001550e:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0015516:	0f 94 c2             	sete   dl
c0015519:	09 c2                	or     edx,eax
c001551b:	8b 06                	mov    eax,DWORD PTR [esi]
c001551d:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0015522:	0f b6 d2             	movzx  edx,dl
c0015525:	74 41                	je     c0015568 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0015527:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c001552a:	85 d2                	test   edx,edx
c001552c:	75 15                	jne    c0015543 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c001552e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015532:	66 83 f8 0c          	cmp    ax,0xc
c0015536:	76 05                	jbe    c001553d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0015538:	b8 0c 00 00 00       	mov    eax,0xc
c001553d:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015541:	76 37                	jbe    c001557a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015543:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015547:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001554c:	0f 84 d4 00 00 00    	je     c0015626 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015552:	83 ec 0c             	sub    esp,0xc
c0015555:	68 b0 29 02 c0       	push   0xc00229b0
c001555a:	e8 64 c1 ff ff       	call   c00116c3 <KePanic(char const*)>
c001555f:	83 c4 10             	add    esp,0x10
c0015562:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015566:	eb 12                	jmp    c001557a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015568:	01 c1                	add    ecx,eax
c001556a:	85 d2                	test   edx,edx
c001556c:	75 0c                	jne    c001557a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001556e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015572:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015576:	77 02                	ja     c001557a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015578:	01 d9                	add    ecx,ebx
c001557a:	89 0e                	mov    DWORD PTR [esi],ecx
c001557c:	e9 e2 00 00 00       	jmp    c0015663 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015581:	83 f8 02             	cmp    eax,0x2
c0015584:	75 77                	jne    c00155fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0015586:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001558d:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0015591:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0015595:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001559d:	74 21                	je     c00155c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c001559f:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00155a7:	74 17                	je     c00155c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00155a9:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c00155ad:	b8 0a 00 00 00       	mov    eax,0xa
c00155b2:	83 fa 0e             	cmp    edx,0xe
c00155b5:	77 03                	ja     c00155ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c00155b7:	8d 42 fc             	lea    eax,[edx-0x4]
c00155ba:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00155be:	76 17                	jbe    c00155d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c00155c0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00155c5:	74 5f                	je     c0015626 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00155c7:	83 ec 0c             	sub    esp,0xc
c00155ca:	68 cc 29 02 c0       	push   0xc00229cc
c00155cf:	e8 ef c0 ff ff       	call   c00116c3 <KePanic(char const*)>
c00155d4:	83 c4 10             	add    esp,0x10
c00155d7:	8b 06                	mov    eax,DWORD PTR [esi]
c00155d9:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00155de:	74 13                	je     c00155f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c00155e0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00155e4:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c00155eb:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c00155ef:	01 d0                	add    eax,edx
c00155f1:	eb 04                	jmp    c00155f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00155f3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00155f7:	01 c3                	add    ebx,eax
c00155f9:	89 1e                	mov    DWORD PTR [esi],ebx
c00155fb:	eb 66                	jmp    c0015663 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00155fd:	52                   	push   edx
c00155fe:	52                   	push   edx
c00155ff:	50                   	push   eax
c0015600:	68 e8 29 02 c0       	push   0xc00229e8
c0015605:	e8 3f 53 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001560a:	83 c4 10             	add    esp,0x10
c001560d:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015612:	74 12                	je     c0015626 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015614:	83 ec 0c             	sub    esp,0xc
c0015617:	68 f3 29 02 c0       	push   0xc00229f3
c001561c:	e8 a2 c0 ff ff       	call   c00116c3 <KePanic(char const*)>
c0015621:	83 c4 10             	add    esp,0x10
c0015624:	eb 3d                	jmp    c0015663 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015626:	83 ec 0c             	sub    esp,0xc
c0015629:	55                   	push   ebp
c001562a:	e8 9d 65 ff ff       	call   c000bbcc <File::close()>
c001562f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015632:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015635:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015638:	59                   	pop    ecx
c0015639:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001563d:	e8 88 24 ff ff       	call   c0007aca <free>
c0015642:	5b                   	pop    ebx
c0015643:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015647:	e8 7e 24 ff ff       	call   c0007aca <free>
c001564c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001564f:	e8 76 24 ff ff       	call   c0007aca <free>
c0015654:	5e                   	pop    esi
c0015655:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015659:	e8 6c 24 ff ff       	call   c0007aca <free>
c001565e:	83 c4 10             	add    esp,0x10
c0015661:	eb 21                	jmp    c0015684 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015663:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0015667:	e9 7c fd ff ff       	jmp    c00153e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c001566c:	83 ec 0c             	sub    esp,0xc
c001566f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015673:	e8 52 24 ff ff       	call   c0007aca <free>
c0015678:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001567c:	83 c4 10             	add    esp,0x10
c001567f:	e9 f1 fc ff ff       	jmp    c0015375 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0015684:	31 c0                	xor    eax,eax
c0015686:	eb 33                	jmp    c00156bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0015688:	83 ec 0c             	sub    esp,0xc
c001568b:	55                   	push   ebp
c001568c:	e8 3b 65 ff ff       	call   c000bbcc <File::close()>
c0015691:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015694:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015697:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001569a:	58                   	pop    eax
c001569b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001569f:	e8 26 24 ff ff       	call   c0007aca <free>
c00156a4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00156a7:	e8 1e 24 ff ff       	call   c0007aca <free>
c00156ac:	5a                   	pop    edx
c00156ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00156b1:	e8 14 24 ff ff       	call   c0007aca <free>
c00156b6:	83 c4 10             	add    esp,0x10
c00156b9:	b0 01                	mov    al,0x1
c00156bb:	81 c4 5c 03 00 00    	add    esp,0x35c
c00156c1:	5b                   	pop    ebx
c00156c2:	5e                   	pop    esi
c00156c3:	5f                   	pop    edi
c00156c4:	5d                   	pop    ebp
c00156c5:	c3                   	ret    

c00156c6 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00156c6:	56                   	push   esi
c00156c7:	31 d2                	xor    edx,edx
c00156c9:	53                   	push   ebx
c00156ca:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c00156d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00156d4:	39 d3                	cmp    ebx,edx
c00156d6:	7e 1b                	jle    c00156f3 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00156d8:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c00156df:	39 c8                	cmp    eax,ecx
c00156e1:	77 0d                	ja     c00156f0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00156e3:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c00156ea:	01 c6                	add    esi,eax
c00156ec:	39 ce                	cmp    esi,ecx
c00156ee:	77 05                	ja     c00156f5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00156f0:	42                   	inc    edx
c00156f1:	eb e1                	jmp    c00156d4 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00156f3:	31 c0                	xor    eax,eax
c00156f5:	5b                   	pop    ebx
c00156f6:	5e                   	pop    esi
c00156f7:	c3                   	ret    

c00156f8 <Thr::getDriverNameFromAddress(unsigned long)>:
c00156f8:	53                   	push   ebx
c00156f9:	31 c0                	xor    eax,eax
c00156fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00156ff:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c0015705:	39 c3                	cmp    ebx,eax
c0015707:	7e 22                	jle    c001572b <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015709:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c0015710:	39 ca                	cmp    edx,ecx
c0015712:	77 14                	ja     c0015728 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015714:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c001571b:	39 ca                	cmp    edx,ecx
c001571d:	76 09                	jbe    c0015728 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001571f:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c0015726:	eb 05                	jmp    c001572d <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015728:	40                   	inc    eax
c0015729:	eb da                	jmp    c0015705 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001572b:	31 c0                	xor    eax,eax
c001572d:	5b                   	pop    ebx
c001572e:	c3                   	ret    

c001572f <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001572f:	53                   	push   ebx
c0015730:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015734:	53                   	push   ebx
c0015735:	e8 8c ff ff ff       	call   c00156c6 <Thr::getDriverBaseFromAddress(unsigned long)>
c001573a:	5a                   	pop    edx
c001573b:	31 d2                	xor    edx,edx
c001573d:	85 c0                	test   eax,eax
c001573f:	74 04                	je     c0015745 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015741:	89 da                	mov    edx,ebx
c0015743:	29 c2                	sub    edx,eax
c0015745:	89 d0                	mov    eax,edx
c0015747:	5b                   	pop    ebx
c0015748:	c3                   	ret    

c0015749 <Thr::loadDLL(char const*, bool)>:
c0015749:	55                   	push   ebp
c001574a:	57                   	push   edi
c001574b:	56                   	push   esi
c001574c:	53                   	push   ebx
c001574d:	81 ec 34 01 00 00    	sub    esp,0x134
c0015753:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001575a:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015761:	56                   	push   esi
c0015762:	68 0b 2a 02 c0       	push   0xc0022a0b
c0015767:	e8 dd 51 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001576c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015773:	e8 42 23 ff ff       	call   c0007aba <malloc>
c0015778:	83 c4 0c             	add    esp,0xc
c001577b:	89 c3                	mov    ebx,eax
c001577d:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0015783:	56                   	push   esi
c0015784:	50                   	push   eax
c0015785:	e8 c6 63 ff ff       	call   c000bb50 <File::File(char const*, Process*)>
c001578a:	83 c4 10             	add    esp,0x10
c001578d:	85 db                	test   ebx,ebx
c001578f:	75 3c                	jne    c00157cd <Thr::loadDLL(char const*, bool)+0x84>
c0015791:	89 f8                	mov    eax,edi
c0015793:	84 c0                	test   al,al
c0015795:	0f 84 d2 01 00 00    	je     c001596d <Thr::loadDLL(char const*, bool)+0x224>
c001579b:	55                   	push   ebp
c001579c:	55                   	push   ebp
c001579d:	68 1c 2a 02 c0       	push   0xc0022a1c
c00157a2:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00157a6:	55                   	push   ebp
c00157a7:	e8 94 ae fe ff       	call   c0000640 <strcpy>
c00157ac:	58                   	pop    eax
c00157ad:	5a                   	pop    edx
c00157ae:	56                   	push   esi
c00157af:	55                   	push   ebp
c00157b0:	e8 8b b0 fe ff       	call   c0000840 <strcat>
c00157b5:	59                   	pop    ecx
c00157b6:	58                   	pop    eax
c00157b7:	68 2f 2a 02 c0       	push   0xc0022a2f
c00157bc:	55                   	push   ebp
c00157bd:	e8 7e b0 fe ff       	call   c0000840 <strcat>
c00157c2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00157c5:	e8 f9 be ff ff       	call   c00116c3 <KePanic(char const*)>
c00157ca:	83 c4 10             	add    esp,0x10
c00157cd:	51                   	push   ecx
c00157ce:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00157d2:	50                   	push   eax
c00157d3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00157d7:	50                   	push   eax
c00157d8:	53                   	push   ebx
c00157d9:	e8 92 66 ff ff       	call   c000be70 <File::stat(unsigned long long*, bool*)>
c00157de:	83 c4 10             	add    esp,0x10
c00157e1:	85 db                	test   ebx,ebx
c00157e3:	74 0c                	je     c00157f1 <Thr::loadDLL(char const*, bool)+0xa8>
c00157e5:	83 ec 0c             	sub    esp,0xc
c00157e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00157ea:	53                   	push   ebx
c00157eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157ee:	83 c4 10             	add    esp,0x10
c00157f1:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00157f6:	75 0a                	jne    c0015802 <Thr::loadDLL(char const*, bool)+0xb9>
c00157f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00157fc:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015800:	75 3c                	jne    c001583e <Thr::loadDLL(char const*, bool)+0xf5>
c0015802:	89 f8                	mov    eax,edi
c0015804:	84 c0                	test   al,al
c0015806:	0f 84 49 01 00 00    	je     c0015955 <Thr::loadDLL(char const*, bool)+0x20c>
c001580c:	51                   	push   ecx
c001580d:	51                   	push   ecx
c001580e:	68 1c 2a 02 c0       	push   0xc0022a1c
c0015813:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015817:	53                   	push   ebx
c0015818:	e8 23 ae fe ff       	call   c0000640 <strcpy>
c001581d:	5d                   	pop    ebp
c001581e:	58                   	pop    eax
c001581f:	56                   	push   esi
c0015820:	53                   	push   ebx
c0015821:	e8 1a b0 fe ff       	call   c0000840 <strcat>
c0015826:	58                   	pop    eax
c0015827:	5a                   	pop    edx
c0015828:	68 2f 2a 02 c0       	push   0xc0022a2f
c001582d:	53                   	push   ebx
c001582e:	e8 0d b0 fe ff       	call   c0000840 <strcat>
c0015833:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015836:	e8 88 be ff ff       	call   c00116c3 <KePanic(char const*)>
c001583b:	83 c4 10             	add    esp,0x10
c001583e:	52                   	push   edx
c001583f:	6a 03                	push   0x3
c0015841:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015845:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015849:	05 ff 0f 00 00       	add    eax,0xfff
c001584e:	83 d2 00             	adc    edx,0x0
c0015851:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015855:	50                   	push   eax
c0015856:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001585c:	e8 c7 45 ff ff       	call   c0009e28 <VAS::allocatePages(int, int)>
c0015861:	59                   	pop    ecx
c0015862:	89 c3                	mov    ebx,eax
c0015864:	5d                   	pop    ebp
c0015865:	50                   	push   eax
c0015866:	68 ca 0e 02 c0       	push   0xc0020eca
c001586b:	e8 d9 50 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0015870:	89 34 24             	mov    DWORD PTR [esp],esi
c0015873:	e8 f8 ac fe ff       	call   c0000570 <strlen>
c0015878:	8b 2d 00 bf 02 c0    	mov    ebp,DWORD PTR ds:0xc002bf00
c001587e:	40                   	inc    eax
c001587f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015882:	e8 33 22 ff ff       	call   c0007aba <malloc>
c0015887:	89 04 ad 20 c3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd3ce0],eax
c001588e:	58                   	pop    eax
c001588f:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c0015894:	5a                   	pop    edx
c0015895:	56                   	push   esi
c0015896:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c001589d:	e8 9e ad fe ff       	call   c0000640 <strcpy>
c00158a2:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c00158a7:	8d 50 01             	lea    edx,[eax+0x1]
c00158aa:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c00158b1:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c00158b7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00158bb:	83 c4 0c             	add    esp,0xc
c00158be:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c00158c5:	6a 01                	push   0x1
c00158c7:	53                   	push   ebx
c00158c8:	56                   	push   esi
c00158c9:	e8 bf f6 ff ff       	call   c0014f8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00158ce:	83 c4 10             	add    esp,0x10
c00158d1:	0f b6 c0             	movzx  eax,al
c00158d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00158d8:	85 c0                	test   eax,eax
c00158da:	0f 85 89 00 00 00    	jne    c0015969 <Thr::loadDLL(char const*, bool)+0x220>
c00158e0:	89 f8                	mov    eax,edi
c00158e2:	84 c0                	test   al,al
c00158e4:	74 73                	je     c0015959 <Thr::loadDLL(char const*, bool)+0x210>
c00158e6:	83 ec 0c             	sub    esp,0xc
c00158e9:	68 31 2a 02 c0       	push   0xc0022a31
c00158ee:	e8 d0 bd ff ff       	call   c00116c3 <KePanic(char const*)>
c00158f3:	83 c4 10             	add    esp,0x10
c00158f6:	eb 61                	jmp    c0015959 <Thr::loadDLL(char const*, bool)+0x210>
c00158f8:	50                   	push   eax
c00158f9:	50                   	push   eax
c00158fa:	89 e8                	mov    eax,ebp
c00158fc:	c1 e0 0c             	shl    eax,0xc
c00158ff:	01 d8                	add    eax,ebx
c0015901:	50                   	push   eax
c0015902:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0015908:	e8 03 40 ff ff       	call   c0009910 <VAS::getPageTableEntry(unsigned long)>
c001590d:	83 c4 10             	add    esp,0x10
c0015910:	8b 00                	mov    eax,DWORD PTR [eax]
c0015912:	a8 60                	test   al,0x60
c0015914:	75 11                	jne    c0015927 <Thr::loadDLL(char const*, bool)+0x1de>
c0015916:	83 ec 0c             	sub    esp,0xc
c0015919:	25 00 f0 ff ff       	and    eax,0xfffff000
c001591e:	50                   	push   eax
c001591f:	e8 36 24 ff ff       	call   c0007d5a <Phys::freePage(unsigned long)>
c0015924:	83 c4 10             	add    esp,0x10
c0015927:	45                   	inc    ebp
c0015928:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001592c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015930:	05 ff 0f 00 00       	add    eax,0xfff
c0015935:	bf 00 00 00 00       	mov    edi,0x0
c001593a:	83 d2 00             	adc    edx,0x0
c001593d:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015941:	c1 ea 0c             	shr    edx,0xc
c0015944:	39 c5                	cmp    ebp,eax
c0015946:	89 d1                	mov    ecx,edx
c0015948:	89 f8                	mov    eax,edi
c001594a:	19 c8                	sbb    eax,ecx
c001594c:	72 aa                	jb     c00158f8 <Thr::loadDLL(char const*, bool)+0x1af>
c001594e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015953:	75 18                	jne    c001596d <Thr::loadDLL(char const*, bool)+0x224>
c0015955:	31 db                	xor    ebx,ebx
c0015957:	eb 14                	jmp    c001596d <Thr::loadDLL(char const*, bool)+0x224>
c0015959:	83 ec 0c             	sub    esp,0xc
c001595c:	68 50 2a 02 c0       	push   0xc0022a50
c0015961:	e8 5d bd ff ff       	call   c00116c3 <KePanic(char const*)>
c0015966:	83 c4 10             	add    esp,0x10
c0015969:	31 ed                	xor    ebp,ebp
c001596b:	eb bb                	jmp    c0015928 <Thr::loadDLL(char const*, bool)+0x1df>
c001596d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015973:	89 d8                	mov    eax,ebx
c0015975:	5b                   	pop    ebx
c0015976:	5e                   	pop    esi
c0015977:	5f                   	pop    edi
c0015978:	5d                   	pop    ebp
c0015979:	c3                   	ret    

c001597a <Thr::executeDLL(unsigned long, void*)>:
c001597a:	56                   	push   esi
c001597b:	53                   	push   ebx
c001597c:	52                   	push   edx
c001597d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015981:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015985:	85 db                	test   ebx,ebx
c0015987:	75 10                	jne    c0015999 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015989:	83 ec 0c             	sub    esp,0xc
c001598c:	68 6c 2a 02 c0       	push   0xc0022a6c
c0015991:	e8 2d bd ff ff       	call   c00116c3 <KePanic(char const*)>
c0015996:	83 c4 10             	add    esp,0x10
c0015999:	50                   	push   eax
c001599a:	50                   	push   eax
c001599b:	53                   	push   ebx
c001599c:	68 96 2a 02 c0       	push   0xc0022a96
c00159a1:	e8 a3 4f ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00159a6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00159aa:	89 d8                	mov    eax,ebx
c00159ac:	83 c4 14             	add    esp,0x14
c00159af:	5b                   	pop    ebx
c00159b0:	5e                   	pop    esi
c00159b1:	ff e0                	jmp    eax
c00159b3:	90                   	nop

c00159b4 <userModeEntryPoint(void*)>:
c00159b4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00159b9:	83 e8 01             	sub    eax,0x1
c00159bc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00159c1:	75 01                	jne    c00159c4 <userModeEntryPoint(void*)+0x10>
c00159c3:	fb                   	sti    
c00159c4:	fb                   	sti    
c00159c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159ca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00159cd:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00159d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00159d7:	e9 63 a8 fe ff       	jmp    c000023f <goToUsermode>

c00159dc <changeTSS>:
c00159dc:	83 ec 14             	sub    esp,0x14
c00159df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159e4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00159e7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00159ec:	c1 e2 15             	shl    edx,0x15
c00159ef:	29 d0                	sub    eax,edx
c00159f1:	50                   	push   eax
c00159f2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00159f7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00159fd:	05 7c 11 00 00       	add    eax,0x117c
c0015a02:	50                   	push   eax
c0015a03:	e8 50 35 ff ff       	call   c0008f58 <TSS::setESP(unsigned long)>
c0015a08:	83 c4 1c             	add    esp,0x1c
c0015a0b:	c3                   	ret    

c0015a0c <switchToThread(ThreadControlBlock*)>:
c0015a0c:	57                   	push   edi
c0015a0d:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0015a13:	56                   	push   esi
c0015a14:	85 c9                	test   ecx,ecx
c0015a16:	53                   	push   ebx
c0015a17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015a1b:	0f 85 8b 00 00 00    	jne    c0015aac <switchToThread(ThreadControlBlock*)+0xa0>
c0015a21:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015a25:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015a2b:	74 7b                	je     c0015aa8 <switchToThread(ThreadControlBlock*)+0x9c>
c0015a2d:	b8 00 04 00 00       	mov    eax,0x400
c0015a32:	29 d0                	sub    eax,edx
c0015a34:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015a37:	d1 f8                	sar    eax,1
c0015a39:	01 d0                	add    eax,edx
c0015a3b:	90                   	nop
c0015a3c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015a3f:	e8 1e 28 00 00       	call   c0018262 <HalQueryPerformanceCounter()>
c0015a44:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c0015a49:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c0015a4f:	89 c6                	mov    esi,eax
c0015a51:	89 d7                	mov    edi,edx
c0015a53:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c0015a59:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c0015a5e:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c0015a64:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c0015a6a:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c0015a70:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015a76:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c0015a7c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015a7f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015a82:	01 c6                	add    esi,eax
c0015a84:	11 d7                	adc    edi,edx
c0015a86:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015a89:	83 ec 0c             	sub    esp,0xc
c0015a8c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015a8f:	53                   	push   ebx
c0015a90:	e8 e2 a7 fe ff       	call   c0000277 <switchToThreadASM>
c0015a95:	0f 20 c0             	mov    eax,cr0
c0015a98:	83 c8 08             	or     eax,0x8
c0015a9b:	0f 22 c0             	mov    cr0,eax
c0015a9e:	83 c4 10             	add    esp,0x10
c0015aa1:	5b                   	pop    ebx
c0015aa2:	5e                   	pop    esi
c0015aa3:	5f                   	pop    edi
c0015aa4:	c3                   	ret    
c0015aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0015aa8:	31 c0                	xor    eax,eax
c0015aaa:	eb 90                	jmp    c0015a3c <switchToThread(ThreadControlBlock*)+0x30>
c0015aac:	5b                   	pop    ebx
c0015aad:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0015ab7:	5e                   	pop    esi
c0015ab8:	5f                   	pop    edi
c0015ab9:	c3                   	ret    
c0015aba:	66 90                	xchg   ax,ax

c0015abc <Process::addArgs(char**)>:
c0015abc:	57                   	push   edi
c0015abd:	56                   	push   esi
c0015abe:	53                   	push   ebx
c0015abf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ac3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0015ac7:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015ad1:	85 ff                	test   edi,edi
c0015ad3:	74 4f                	je     c0015b24 <Process::addArgs(char**)+0x68>
c0015ad5:	8b 07                	mov    eax,DWORD PTR [edi]
c0015ad7:	85 c0                	test   eax,eax
c0015ad9:	74 49                	je     c0015b24 <Process::addArgs(char**)+0x68>
c0015adb:	31 db                	xor    ebx,ebx
c0015add:	8d 76 00             	lea    esi,[esi+0x0]
c0015ae0:	83 ec 0c             	sub    esp,0xc
c0015ae3:	50                   	push   eax
c0015ae4:	e8 87 aa fe ff       	call   c0000570 <strlen>
c0015ae9:	83 c0 01             	add    eax,0x1
c0015aec:	89 04 24             	mov    DWORD PTR [esp],eax
c0015aef:	e8 c6 1f ff ff       	call   c0007aba <malloc>
c0015af4:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0015afb:	5a                   	pop    edx
c0015afc:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0015aff:	59                   	pop    ecx
c0015b00:	83 c3 01             	add    ebx,0x1
c0015b03:	52                   	push   edx
c0015b04:	50                   	push   eax
c0015b05:	e8 36 ab fe ff       	call   c0000640 <strcpy>
c0015b0a:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0015b10:	83 c4 10             	add    esp,0x10
c0015b13:	83 c1 01             	add    ecx,0x1
c0015b16:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0015b1c:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015b1f:	85 c0                	test   eax,eax
c0015b21:	75 bd                	jne    c0015ae0 <Process::addArgs(char**)+0x24>
c0015b23:	90                   	nop
c0015b24:	5b                   	pop    ebx
c0015b25:	5e                   	pop    esi
c0015b26:	5f                   	pop    edi
c0015b27:	c3                   	ret    

c0015b28 <Process::Process(char const*, Process*, char**)>:
c0015b28:	56                   	push   esi
c0015b29:	53                   	push   ebx
c0015b2a:	83 ec 14             	sub    esp,0x14
c0015b2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b31:	05 0c 02 00 00       	add    eax,0x20c
c0015b36:	bb 07 00 00 00       	mov    ebx,0x7
c0015b3b:	89 c6                	mov    esi,eax
c0015b3d:	8d 76 00             	lea    esi,[esi+0x0]
c0015b40:	85 db                	test   ebx,ebx
c0015b42:	78 14                	js     c0015b58 <Process::Process(char const*, Process*, char**)+0x30>
c0015b44:	83 ec 0c             	sub    esp,0xc
c0015b47:	56                   	push   esi
c0015b48:	e8 eb a5 00 00       	call   c0020138 <ThreadControlBlock::ThreadControlBlock()>
c0015b4d:	83 c4 10             	add    esp,0x10
c0015b50:	83 c6 5f             	add    esi,0x5f
c0015b53:	83 eb 01             	sub    ebx,0x1
c0015b56:	eb e8                	jmp    c0015b40 <Process::Process(char const*, Process*, char**)+0x18>
c0015b58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b5c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015b63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b67:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015b6e:	83 ec 0c             	sub    esp,0xc
c0015b71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b75:	e8 3e b9 ff ff       	call   c00114b8 <KeNewProcessEnv(Process*)>
c0015b7a:	83 c4 10             	add    esp,0x10
c0015b7d:	89 c2                	mov    edx,eax
c0015b7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b83:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015b89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b8d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015b96:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c0015b9b:	8d 50 01             	lea    edx,[eax+0x1]
c0015b9e:	89 15 c0 40 02 c0    	mov    DWORD PTR ds:0xc00240c0,edx
c0015ba4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015ba8:	89 02                	mov    DWORD PTR [edx],eax
c0015baa:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015bb2:	83 ec 0c             	sub    esp,0xc
c0015bb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015bb9:	e8 fc 1e ff ff       	call   c0007aba <malloc>
c0015bbe:	83 c4 10             	add    esp,0x10
c0015bc1:	89 c3                	mov    ebx,eax
c0015bc3:	83 ec 08             	sub    esp,0x8
c0015bc6:	6a 00                	push   0x0
c0015bc8:	53                   	push   ebx
c0015bc9:	e8 9e 44 ff ff       	call   c000a06c <VAS::VAS(bool)>
c0015bce:	83 c4 10             	add    esp,0x10
c0015bd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bd5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015bdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bdf:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015be9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015bf1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015bf7:	e8 e2 be ff ff       	call   c0011ade <KeInitSignals()>
c0015bfc:	89 c2                	mov    edx,eax
c0015bfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c02:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015c08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c0c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c12:	85 c0                	test   eax,eax
c0015c14:	74 42                	je     c0015c58 <Process::Process(char const*, Process*, char**)+0x130>
c0015c16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c1a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c20:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015c26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c2a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015c30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c34:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c3a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015c40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c44:	05 0c 01 00 00       	add    eax,0x10c
c0015c49:	83 ec 08             	sub    esp,0x8
c0015c4c:	52                   	push   edx
c0015c4d:	50                   	push   eax
c0015c4e:	e8 ed a9 fe ff       	call   c0000640 <strcpy>
c0015c53:	83 c4 10             	add    esp,0x10
c0015c56:	eb 64                	jmp    c0015cbc <Process::Process(char const*, Process*, char**)+0x194>
c0015c58:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015c60:	83 ec 0c             	sub    esp,0xc
c0015c63:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015c67:	e8 4e 1e ff ff       	call   c0007aba <malloc>
c0015c6c:	83 c4 10             	add    esp,0x10
c0015c6f:	89 c3                	mov    ebx,eax
c0015c71:	83 ec 08             	sub    esp,0x8
c0015c74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c78:	53                   	push   ebx
c0015c79:	e8 ec 2f ff ff       	call   c0008c6a <VgaText::VgaText(char const*)>
c0015c7e:	83 c4 10             	add    esp,0x10
c0015c81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c85:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015c8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c8f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015c95:	83 ec 0c             	sub    esp,0xc
c0015c98:	50                   	push   eax
c0015c99:	e8 6a 28 ff ff       	call   c0008508 <addToTerminalCycle(VgaText*)>
c0015c9e:	83 c4 10             	add    esp,0x10
c0015ca1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ca5:	05 0c 01 00 00       	add    eax,0x10c
c0015caa:	83 ec 08             	sub    esp,0x8
c0015cad:	68 b5 2a 02 c0       	push   0xc0022ab5
c0015cb2:	50                   	push   eax
c0015cb3:	e8 88 a9 fe ff       	call   c0000640 <strcpy>
c0015cb8:	83 c4 10             	add    esp,0x10
c0015cbb:	90                   	nop
c0015cbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cc0:	83 c0 0c             	add    eax,0xc
c0015cc3:	83 ec 08             	sub    esp,0x8
c0015cc6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cca:	50                   	push   eax
c0015ccb:	e8 70 a9 fe ff       	call   c0000640 <strcpy>
c0015cd0:	83 c4 10             	add    esp,0x10
c0015cd3:	83 ec 08             	sub    esp,0x8
c0015cd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015cda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cde:	e8 d9 fd ff ff       	call   c0015abc <Process::addArgs(char**)>
c0015ce3:	83 c4 10             	add    esp,0x10
c0015ce6:	83 ec 08             	sub    esp,0x8
c0015ce9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ced:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cf1:	e8 65 ed ff ff       	call   c0014a5b <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015cf6:	83 c4 10             	add    esp,0x10
c0015cf9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015cfd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015d01:	83 f0 01             	xor    eax,0x1
c0015d04:	88 c2                	mov    dl,al
c0015d06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d0a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015d10:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015d15:	83 ec 04             	sub    esp,0x4
c0015d18:	50                   	push   eax
c0015d19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d1d:	68 0c 2b 02 c0       	push   0xc0022b0c
c0015d22:	e8 22 4c ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0015d27:	83 c4 10             	add    esp,0x10
c0015d2a:	90                   	nop
c0015d2b:	83 c4 14             	add    esp,0x14
c0015d2e:	5b                   	pop    ebx
c0015d2f:	5e                   	pop    esi
c0015d30:	c3                   	ret    
c0015d31:	90                   	nop
c0015d32:	66 90                	xchg   ax,ax

c0015d34 <Process::Process(bool, char const*, Process*, char**)>:
c0015d34:	56                   	push   esi
c0015d35:	53                   	push   ebx
c0015d36:	83 ec 24             	sub    esp,0x24
c0015d39:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015d3d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015d41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d45:	05 0c 02 00 00       	add    eax,0x20c
c0015d4a:	bb 07 00 00 00       	mov    ebx,0x7
c0015d4f:	89 c6                	mov    esi,eax
c0015d51:	8d 76 00             	lea    esi,[esi+0x0]
c0015d54:	85 db                	test   ebx,ebx
c0015d56:	78 14                	js     c0015d6c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015d58:	83 ec 0c             	sub    esp,0xc
c0015d5b:	56                   	push   esi
c0015d5c:	e8 d7 a3 00 00       	call   c0020138 <ThreadControlBlock::ThreadControlBlock()>
c0015d61:	83 c4 10             	add    esp,0x10
c0015d64:	83 c6 5f             	add    esi,0x5f
c0015d67:	83 eb 01             	sub    ebx,0x1
c0015d6a:	eb e8                	jmp    c0015d54 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015d6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d70:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015d77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d7b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015d82:	83 ec 0c             	sub    esp,0xc
c0015d85:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015d89:	e8 2a b7 ff ff       	call   c00114b8 <KeNewProcessEnv(Process*)>
c0015d8e:	83 c4 10             	add    esp,0x10
c0015d91:	89 c2                	mov    edx,eax
c0015d93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d97:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015d9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015da1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015daa:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c0015daf:	8d 50 01             	lea    edx,[eax+0x1]
c0015db2:	89 15 c0 40 02 c0    	mov    DWORD PTR ds:0xc00240c0,edx
c0015db8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015dbc:	89 02                	mov    DWORD PTR [edx],eax
c0015dbe:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015dc6:	83 ec 0c             	sub    esp,0xc
c0015dc9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015dcd:	e8 e8 1c ff ff       	call   c0007aba <malloc>
c0015dd2:	83 c4 10             	add    esp,0x10
c0015dd5:	89 c3                	mov    ebx,eax
c0015dd7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015ddc:	83 ec 08             	sub    esp,0x8
c0015ddf:	50                   	push   eax
c0015de0:	53                   	push   ebx
c0015de1:	e8 86 42 ff ff       	call   c000a06c <VAS::VAS(bool)>
c0015de6:	83 c4 10             	add    esp,0x10
c0015de9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ded:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015df3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015df7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015e01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e05:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015e09:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015e0f:	e8 ca bc ff ff       	call   c0011ade <KeInitSignals()>
c0015e14:	89 c2                	mov    edx,eax
c0015e16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e1a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015e20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e24:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015e2a:	85 c0                	test   eax,eax
c0015e2c:	74 42                	je     c0015e70 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015e2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e32:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015e38:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015e3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e42:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015e48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e4c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015e52:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015e58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e5c:	05 0c 01 00 00       	add    eax,0x10c
c0015e61:	83 ec 08             	sub    esp,0x8
c0015e64:	52                   	push   edx
c0015e65:	50                   	push   eax
c0015e66:	e8 d5 a7 fe ff       	call   c0000640 <strcpy>
c0015e6b:	83 c4 10             	add    esp,0x10
c0015e6e:	eb 64                	jmp    c0015ed4 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015e70:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015e78:	83 ec 0c             	sub    esp,0xc
c0015e7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015e7f:	e8 36 1c ff ff       	call   c0007aba <malloc>
c0015e84:	83 c4 10             	add    esp,0x10
c0015e87:	89 c3                	mov    ebx,eax
c0015e89:	83 ec 08             	sub    esp,0x8
c0015e8c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e90:	53                   	push   ebx
c0015e91:	e8 d4 2d ff ff       	call   c0008c6a <VgaText::VgaText(char const*)>
c0015e96:	83 c4 10             	add    esp,0x10
c0015e99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e9d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015ea3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ea7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015ead:	83 ec 0c             	sub    esp,0xc
c0015eb0:	50                   	push   eax
c0015eb1:	e8 52 26 ff ff       	call   c0008508 <addToTerminalCycle(VgaText*)>
c0015eb6:	83 c4 10             	add    esp,0x10
c0015eb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ebd:	05 0c 01 00 00       	add    eax,0x10c
c0015ec2:	83 ec 08             	sub    esp,0x8
c0015ec5:	68 b5 2a 02 c0       	push   0xc0022ab5
c0015eca:	50                   	push   eax
c0015ecb:	e8 70 a7 fe ff       	call   c0000640 <strcpy>
c0015ed0:	83 c4 10             	add    esp,0x10
c0015ed3:	90                   	nop
c0015ed4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ed8:	83 c0 0c             	add    eax,0xc
c0015edb:	83 ec 08             	sub    esp,0x8
c0015ede:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015ee2:	50                   	push   eax
c0015ee3:	e8 58 a7 fe ff       	call   c0000640 <strcpy>
c0015ee8:	83 c4 10             	add    esp,0x10
c0015eeb:	83 ec 08             	sub    esp,0x8
c0015eee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015ef2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015ef6:	e8 c1 fb ff ff       	call   c0015abc <Process::addArgs(char**)>
c0015efb:	83 c4 10             	add    esp,0x10
c0015efe:	90                   	nop
c0015eff:	83 c4 24             	add    esp,0x24
c0015f02:	5b                   	pop    ebx
c0015f03:	5e                   	pop    esi
c0015f04:	c3                   	ret    
c0015f05:	8d 76 00             	lea    esi,[esi+0x0]

c0015f08 <taskStartupFunction>:
c0015f08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f0d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015f10:	c3                   	ret    
c0015f11:	90                   	nop
c0015f12:	66 90                	xchg   ax,ax

c0015f14 <Semaphore::Semaphore(int)>:
c0015f14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015f1c:	89 10                	mov    DWORD PTR [eax],edx
c0015f1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f22:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015f29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f2d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015f34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f38:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015f3f:	90                   	nop
c0015f40:	c3                   	ret    
c0015f41:	90                   	nop
c0015f42:	66 90                	xchg   ax,ax

c0015f44 <Mutex::Mutex()>:
c0015f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f48:	6a 01                	push   0x1
c0015f4a:	50                   	push   eax
c0015f4b:	e8 c4 ff ff ff       	call   c0015f14 <Semaphore::Semaphore(int)>
c0015f50:	83 c4 08             	add    esp,0x8
c0015f53:	90                   	nop
c0015f54:	c3                   	ret    
c0015f55:	90                   	nop
c0015f56:	66 90                	xchg   ax,ax

c0015f58 <Process::createThread(void (*)(void*), void*, int)>:
c0015f58:	57                   	push   edi
c0015f59:	31 c9                	xor    ecx,ecx
c0015f5b:	56                   	push   esi
c0015f5c:	53                   	push   ebx
c0015f5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f61:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015f68:	89 f2                	mov    edx,esi
c0015f6a:	66 90                	xchg   ax,ax
c0015f6c:	0f b7 c2             	movzx  eax,dx
c0015f6f:	80 e2 01             	and    dl,0x1
c0015f72:	74 14                	je     c0015f88 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015f74:	d1 f8                	sar    eax,1
c0015f76:	83 c1 01             	add    ecx,0x1
c0015f79:	89 c2                	mov    edx,eax
c0015f7b:	83 f9 10             	cmp    ecx,0x10
c0015f7e:	75 ec                	jne    c0015f6c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015f80:	31 db                	xor    ebx,ebx
c0015f82:	89 d8                	mov    eax,ebx
c0015f84:	5b                   	pop    ebx
c0015f85:	5e                   	pop    esi
c0015f86:	5f                   	pop    edi
c0015f87:	c3                   	ret    
c0015f88:	b8 01 00 00 00       	mov    eax,0x1
c0015f8d:	d3 e0                	shl    eax,cl
c0015f8f:	09 c6                	or     esi,eax
c0015f91:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015f94:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015f9b:	01 c0                	add    eax,eax
c0015f9d:	01 c8                	add    eax,ecx
c0015f9f:	8d 04 80             	lea    eax,[eax+eax*4]
c0015fa2:	01 d8                	add    eax,ebx
c0015fa4:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015fab:	75 0b                	jne    c0015fb8 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015fad:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015fb7:	90                   	nop
c0015fb8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015fbe:	83 ec 0c             	sub    esp,0xc
c0015fc1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015fc4:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015fc7:	01 c0                	add    eax,eax
c0015fc9:	01 c8                	add    eax,ecx
c0015fcb:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015fce:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015fd1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015fd7:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015fdd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015fe1:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015fe7:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015fed:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015ff3:	89 ca                	mov    edx,ecx
c0015ff5:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015ffc:	f7 da                	neg    edx
c0015ffe:	c1 e2 15             	shl    edx,0x15
c0016001:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0016007:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001600d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016011:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001601b:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0016021:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016025:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001602b:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016035:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001603f:	68 00 01 00 00       	push   0x100
c0016044:	e8 71 1a ff ff       	call   c0007aba <malloc>
c0016049:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001604c:	58                   	pop    eax
c001604d:	5a                   	pop    edx
c001604e:	53                   	push   ebx
c001604f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016054:	e8 77 9e 00 00       	call   c001fed0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016059:	83 c4 10             	add    esp,0x10
c001605c:	89 d8                	mov    eax,ebx
c001605e:	5b                   	pop    ebx
c001605f:	5e                   	pop    esi
c0016060:	5f                   	pop    edi
c0016061:	c3                   	ret    
c0016062:	66 90                	xchg   ax,ax

c0016064 <Process::createUserThread()>:
c0016064:	83 ec 0c             	sub    esp,0xc
c0016067:	68 80 00 00 00       	push   0x80
c001606c:	6a 00                	push   0x0
c001606e:	68 b4 59 01 c0       	push   0xc00159b4
c0016073:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016077:	50                   	push   eax
c0016078:	e8 db fe ff ff       	call   c0015f58 <Process::createThread(void (*)(void*), void*, int)>
c001607d:	83 c4 1c             	add    esp,0x1c
c0016080:	c3                   	ret    
c0016081:	8d 76 00             	lea    esi,[esi+0x0]

c0016084 <setupMultitasking(void (*)())>:
c0016084:	56                   	push   esi
c0016085:	53                   	push   ebx
c0016086:	83 ec 04             	sub    esp,0x4
c0016089:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001608d:	eb 11                	jmp    c00160a0 <setupMultitasking(void (*)())+0x1c>
c001608f:	90                   	nop
c0016090:	83 ec 0c             	sub    esp,0xc
c0016093:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016098:	e8 77 9d 00 00       	call   c001fe14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001609d:	83 c4 10             	add    esp,0x10
c00160a0:	83 ec 0c             	sub    esp,0xc
c00160a3:	68 e4 c6 02 c0       	push   0xc002c6e4
c00160a8:	e8 43 9d 00 00       	call   c001fdf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00160ad:	83 c4 10             	add    esp,0x10
c00160b0:	84 c0                	test   al,al
c00160b2:	74 dc                	je     c0016090 <setupMultitasking(void (*)())+0xc>
c00160b4:	83 ec 0c             	sub    esp,0xc
c00160b7:	68 24 07 00 00       	push   0x724
c00160bc:	e8 f9 19 ff ff       	call   c0007aba <malloc>
c00160c1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00160c8:	89 c3                	mov    ebx,eax
c00160ca:	6a 00                	push   0x0
c00160cc:	68 b9 2a 02 c0       	push   0xc0022ab9
c00160d1:	6a 01                	push   0x1
c00160d3:	50                   	push   eax
c00160d4:	e8 5b fc ff ff       	call   c0015d34 <Process::Process(bool, char const*, Process*, char**)>
c00160d9:	83 c4 14             	add    esp,0x14
c00160dc:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00160e2:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c00160e8:	50                   	push   eax
c00160e9:	e8 6f 26 ff ff       	call   c000875d <setActiveTerminal(VgaText*)>
c00160ee:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00160f5:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00160ff:	83 c8 01             	or     eax,0x1
c0016102:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0016109:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001610f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016112:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001611c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016122:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0016128:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016132:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001613c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016146:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001614c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016156:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001615c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0016166:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c001616d:	e8 48 19 ff ff       	call   c0007aba <malloc>
c0016172:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016178:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001617e:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016184:	5a                   	pop    edx
c0016185:	59                   	pop    ecx
c0016186:	68 b5 2a 02 c0       	push   0xc0022ab5
c001618b:	50                   	push   eax
c001618c:	e8 af a4 fe ff       	call   c0000640 <strcpy>
c0016191:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0016198:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001619c:	83 c4 14             	add    esp,0x14
c001619f:	5b                   	pop    ebx
c00161a0:	5e                   	pop    esi
c00161a1:	e9 c3 a0 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00161a6:	66 90                	xchg   ax,ax

c00161a8 <schedule()>:
c00161a8:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c00161ae:	85 d2                	test   edx,edx
c00161b0:	74 0e                	je     c00161c0 <schedule()+0x18>
c00161b2:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c00161bc:	c3                   	ret    
c00161bd:	8d 76 00             	lea    esi,[esi+0x0]
c00161c0:	53                   	push   ebx
c00161c1:	83 ec 14             	sub    esp,0x14
c00161c4:	68 e4 c6 02 c0       	push   0xc002c6e4
c00161c9:	e8 22 9c 00 00       	call   c001fdf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00161ce:	83 c4 10             	add    esp,0x10
c00161d1:	84 c0                	test   al,al
c00161d3:	75 3f                	jne    c0016214 <schedule()+0x6c>
c00161d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161da:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00161dd:	83 fa 01             	cmp    edx,0x1
c00161e0:	74 3a                	je     c001621c <schedule()+0x74>
c00161e2:	66 90                	xchg   ax,ax
c00161e4:	83 ec 0c             	sub    esp,0xc
c00161e7:	68 e4 c6 02 c0       	push   0xc002c6e4
c00161ec:	e8 1b 9c 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161f1:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00161f8:	89 c3                	mov    ebx,eax
c00161fa:	e8 15 9c 00 00       	call   c001fe14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00161ff:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016206:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016209:	e8 fe f7 ff ff       	call   c0015a0c <switchToThread(ThreadControlBlock*)>
c001620e:	83 c4 10             	add    esp,0x10
c0016211:	8d 76 00             	lea    esi,[esi+0x0]
c0016214:	83 c4 08             	add    esp,0x8
c0016217:	5b                   	pop    ebx
c0016218:	c3                   	ret    
c0016219:	8d 76 00             	lea    esi,[esi+0x0]
c001621c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016223:	83 ec 08             	sub    esp,0x8
c0016226:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001622b:	50                   	push   eax
c001622c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016231:	e8 9a 9c 00 00       	call   c001fed0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016236:	83 c4 10             	add    esp,0x10
c0016239:	eb a9                	jmp    c00161e4 <schedule()+0x3c>
c001623b:	90                   	nop

c001623c <Semaphore::tryAcquire()>:
c001623c:	53                   	push   ebx
c001623d:	83 ec 08             	sub    esp,0x8
c0016240:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016244:	fa                   	cli    
c0016245:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001624a:	8d 50 01             	lea    edx,[eax+0x1]
c001624d:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016253:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c0016259:	8d 5a 01             	lea    ebx,[edx+0x1]
c001625c:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c0016262:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0016265:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0016267:	7c 33                	jl     c001629c <Semaphore::tryAcquire()+0x60>
c0016269:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c001626f:	85 d2                	test   edx,edx
c0016271:	75 0d                	jne    c0016280 <Semaphore::tryAcquire()+0x44>
c0016273:	8b 15 c0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c0
c0016279:	85 d2                	test   edx,edx
c001627b:	75 6f                	jne    c00162ec <Semaphore::tryAcquire()+0xb0>
c001627d:	8d 76 00             	lea    esi,[esi+0x0]
c0016280:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016285:	85 c0                	test   eax,eax
c0016287:	74 0b                	je     c0016294 <Semaphore::tryAcquire()+0x58>
c0016289:	8d 76 00             	lea    esi,[esi+0x0]
c001628c:	31 c0                	xor    eax,eax
c001628e:	83 c4 08             	add    esp,0x8
c0016291:	5b                   	pop    ebx
c0016292:	c3                   	ret    
c0016293:	90                   	nop
c0016294:	fb                   	sti    
c0016295:	83 c4 08             	add    esp,0x8
c0016298:	5b                   	pop    ebx
c0016299:	c3                   	ret    
c001629a:	66 90                	xchg   ax,ax
c001629c:	83 c3 01             	add    ebx,0x1
c001629f:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c00162a5:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00162a8:	85 d2                	test   edx,edx
c00162aa:	75 24                	jne    c00162d0 <Semaphore::tryAcquire()+0x94>
c00162ac:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c00162b2:	85 c9                	test   ecx,ecx
c00162b4:	74 1a                	je     c00162d0 <Semaphore::tryAcquire()+0x94>
c00162b6:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00162c0:	e8 e3 fe ff ff       	call   c00161a8 <schedule()>
c00162c5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162ca:	83 e8 01             	sub    eax,0x1
c00162cd:	8d 76 00             	lea    esi,[esi+0x0]
c00162d0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162d5:	85 c0                	test   eax,eax
c00162d7:	75 0b                	jne    c00162e4 <Semaphore::tryAcquire()+0xa8>
c00162d9:	fb                   	sti    
c00162da:	b0 01                	mov    al,0x1
c00162dc:	83 c4 08             	add    esp,0x8
c00162df:	5b                   	pop    ebx
c00162e0:	c3                   	ret    
c00162e1:	8d 76 00             	lea    esi,[esi+0x0]
c00162e4:	b0 01                	mov    al,0x1
c00162e6:	83 c4 08             	add    esp,0x8
c00162e9:	5b                   	pop    ebx
c00162ea:	c3                   	ret    
c00162eb:	90                   	nop
c00162ec:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00162f6:	e8 ad fe ff ff       	call   c00161a8 <schedule()>
c00162fb:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016300:	83 e8 01             	sub    eax,0x1
c0016303:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016308:	85 c0                	test   eax,eax
c001630a:	75 80                	jne    c001628c <Semaphore::tryAcquire()+0x50>
c001630c:	eb 86                	jmp    c0016294 <Semaphore::tryAcquire()+0x58>
c001630e:	66 90                	xchg   ax,ax

c0016310 <Semaphore::assertLocked(char const*)>:
c0016310:	83 ec 0c             	sub    esp,0xc
c0016313:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016317:	fa                   	cli    
c0016318:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c001631e:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016323:	83 c1 01             	add    ecx,0x1
c0016326:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c001632c:	8d 48 01             	lea    ecx,[eax+0x1]
c001632f:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016335:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0016337:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001633a:	7c 28                	jl     c0016364 <Semaphore::assertLocked(char const*)+0x54>
c001633c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016341:	85 c0                	test   eax,eax
c0016343:	75 0b                	jne    c0016350 <Semaphore::assertLocked(char const*)+0x40>
c0016345:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001634a:	85 c0                	test   eax,eax
c001634c:	75 32                	jne    c0016380 <Semaphore::assertLocked(char const*)+0x70>
c001634e:	66 90                	xchg   ax,ax
c0016350:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016355:	83 e8 01             	sub    eax,0x1
c0016358:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001635d:	75 01                	jne    c0016360 <Semaphore::assertLocked(char const*)+0x50>
c001635f:	fb                   	sti    
c0016360:	83 c4 0c             	add    esp,0xc
c0016363:	c3                   	ret    
c0016364:	83 ec 0c             	sub    esp,0xc
c0016367:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001636b:	52                   	push   edx
c001636c:	e8 52 b3 ff ff       	call   c00116c3 <KePanic(char const*)>
c0016371:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016376:	83 c4 10             	add    esp,0x10
c0016379:	83 e8 01             	sub    eax,0x1
c001637c:	eb be                	jmp    c001633c <Semaphore::assertLocked(char const*)+0x2c>
c001637e:	66 90                	xchg   ax,ax
c0016380:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001638a:	e8 19 fe ff ff       	call   c00161a8 <schedule()>
c001638f:	eb bf                	jmp    c0016350 <Semaphore::assertLocked(char const*)+0x40>
c0016391:	8d 76 00             	lea    esi,[esi+0x0]

c0016394 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016394:	83 ec 0c             	sub    esp,0xc
c0016397:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001639c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163a0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00163a3:	e8 00 fe ff ff       	call   c00161a8 <schedule()>
c00163a8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163ad:	83 e8 01             	sub    eax,0x1
c00163b0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163b5:	75 01                	jne    c00163b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00163b7:	fb                   	sti    
c00163b8:	83 c4 0c             	add    esp,0xc
c00163bb:	c3                   	ret    

c00163bc <blockTask(TaskState)>:
c00163bc:	83 ec 0c             	sub    esp,0xc
c00163bf:	fa                   	cli    
c00163c0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163c9:	83 c0 01             	add    eax,0x1
c00163cc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163d6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00163d9:	e8 ca fd ff ff       	call   c00161a8 <schedule()>
c00163de:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163e3:	83 e8 01             	sub    eax,0x1
c00163e6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163eb:	75 03                	jne    c00163f0 <blockTask(TaskState)+0x34>
c00163ed:	fb                   	sti    
c00163ee:	66 90                	xchg   ax,ax
c00163f0:	83 c4 0c             	add    esp,0xc
c00163f3:	c3                   	ret    

c00163f4 <waitTask(int, int*, int)>:
c00163f4:	83 ec 18             	sub    esp,0x18
c00163f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016400:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0016403:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016407:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001640c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001640f:	6a 07                	push   0x7
c0016411:	e8 a6 ff ff ff       	call   c00163bc <blockTask(TaskState)>
c0016416:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001641b:	83 c4 10             	add    esp,0x10
c001641e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016421:	85 d2                	test   edx,edx
c0016423:	74 0b                	je     c0016430 <waitTask(int, int*, int)+0x3c>
c0016425:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0016428:	89 02                	mov    DWORD PTR [edx],eax
c001642a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001642f:	90                   	nop
c0016430:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016433:	83 c4 0c             	add    esp,0xc
c0016436:	c3                   	ret    
c0016437:	90                   	nop

c0016438 <milliTenthSleepUntil(unsigned int)>:
c0016438:	83 ec 0c             	sub    esp,0xc
c001643b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001643f:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c0016445:	76 05                	jbe    c001644c <milliTenthSleepUntil(unsigned int)+0x14>
c0016447:	90                   	nop
c0016448:	83 c4 0c             	add    esp,0xc
c001644b:	c3                   	ret    
c001644c:	fa                   	cli    
c001644d:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016453:	83 ec 08             	sub    esp,0x8
c0016456:	83 c2 01             	add    edx,0x1
c0016459:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c001645f:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016465:	83 c1 01             	add    ecx,0x1
c0016468:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001646e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016474:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0016477:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001647c:	50                   	push   eax
c001647d:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016482:	e8 49 9a 00 00       	call   c001fed0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016487:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001648e:	e8 29 ff ff ff       	call   c00163bc <blockTask(TaskState)>
c0016493:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016498:	83 c4 10             	add    esp,0x10
c001649b:	83 e8 01             	sub    eax,0x1
c001649e:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00164a3:	85 c0                	test   eax,eax
c00164a5:	75 09                	jne    c00164b0 <milliTenthSleepUntil(unsigned int)+0x78>
c00164a7:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00164ac:	85 c0                	test   eax,eax
c00164ae:	75 14                	jne    c00164c4 <milliTenthSleepUntil(unsigned int)+0x8c>
c00164b0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164b5:	83 e8 01             	sub    eax,0x1
c00164b8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164bd:	75 89                	jne    c0016448 <milliTenthSleepUntil(unsigned int)+0x10>
c00164bf:	fb                   	sti    
c00164c0:	83 c4 0c             	add    esp,0xc
c00164c3:	c3                   	ret    
c00164c4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00164ce:	e8 d5 fc ff ff       	call   c00161a8 <schedule()>
c00164d3:	eb db                	jmp    c00164b0 <milliTenthSleepUntil(unsigned int)+0x78>
c00164d5:	8d 76 00             	lea    esi,[esi+0x0]

c00164d8 <milliTenthSleep(unsigned int)>:
c00164d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00164dc:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c00164e1:	01 c2                	add    edx,eax
c00164e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00164e7:	e9 4c ff ff ff       	jmp    c0016438 <milliTenthSleepUntil(unsigned int)>

c00164ec <sleep(unsigned int)>:
c00164ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00164f0:	8d 04 80             	lea    eax,[eax+eax*4]
c00164f3:	8d 04 80             	lea    eax,[eax+eax*4]
c00164f6:	8d 04 80             	lea    eax,[eax+eax*4]
c00164f9:	8d 04 80             	lea    eax,[eax+eax*4]
c00164fc:	c1 e0 04             	shl    eax,0x4
c00164ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016503:	eb d3                	jmp    c00164d8 <milliTenthSleep(unsigned int)>
c0016505:	90                   	nop
c0016506:	66 90                	xchg   ax,ax

c0016508 <Semaphore::acquire()>:
c0016508:	83 ec 0c             	sub    esp,0xc
c001650b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001650f:	fa                   	cli    
c0016510:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016515:	83 c0 01             	add    eax,0x1
c0016518:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001651d:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016522:	8d 48 01             	lea    ecx,[eax+0x1]
c0016525:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001652b:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001652e:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016530:	7d 2e                	jge    c0016560 <Semaphore::acquire()+0x58>
c0016532:	83 c1 01             	add    ecx,0x1
c0016535:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016538:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c001653d:	85 c0                	test   eax,eax
c001653f:	75 0b                	jne    c001654c <Semaphore::acquire()+0x44>
c0016541:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016546:	85 c0                	test   eax,eax
c0016548:	75 66                	jne    c00165b0 <Semaphore::acquire()+0xa8>
c001654a:	66 90                	xchg   ax,ax
c001654c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016551:	83 e8 01             	sub    eax,0x1
c0016554:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016559:	75 01                	jne    c001655c <Semaphore::acquire()+0x54>
c001655b:	fb                   	sti    
c001655c:	83 c4 0c             	add    esp,0xc
c001655f:	c3                   	ret    
c0016560:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016565:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001656c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001656f:	85 c9                	test   ecx,ecx
c0016571:	74 51                	je     c00165c4 <Semaphore::acquire()+0xbc>
c0016573:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0016576:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001657c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001657f:	90                   	nop
c0016580:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016585:	83 ec 0c             	sub    esp,0xc
c0016588:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001658b:	68 38 2b 02 c0       	push   0xc0022b38
c0016590:	e8 b4 43 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0016595:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001659c:	e8 1b fe ff ff       	call   c00163bc <blockTask(TaskState)>
c00165a1:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00165a6:	83 c4 10             	add    esp,0x10
c00165a9:	83 e8 01             	sub    eax,0x1
c00165ac:	eb 8a                	jmp    c0016538 <Semaphore::acquire()+0x30>
c00165ae:	66 90                	xchg   ax,ax
c00165b0:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00165ba:	e8 e9 fb ff ff       	call   c00161a8 <schedule()>
c00165bf:	eb 8b                	jmp    c001654c <Semaphore::acquire()+0x44>
c00165c1:	8d 76 00             	lea    esi,[esi+0x0]
c00165c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165c9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00165cc:	eb b2                	jmp    c0016580 <Semaphore::acquire()+0x78>
c00165ce:	66 90                	xchg   ax,ax

c00165d0 <taskReturned>:
c00165d0:	83 ec 18             	sub    esp,0x18
c00165d3:	68 58 2b 02 c0       	push   0xc0022b58
c00165d8:	e8 e6 b0 ff ff       	call   c00116c3 <KePanic(char const*)>
c00165dd:	83 c4 10             	add    esp,0x10
c00165e0:	83 ec 0c             	sub    esp,0xc
c00165e3:	6a 02                	push   0x2
c00165e5:	e8 d2 fd ff ff       	call   c00163bc <blockTask(TaskState)>
c00165ea:	fa                   	cli    
c00165eb:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165f0:	83 c0 01             	add    eax,0x1
c00165f3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165f8:	e8 ab fb ff ff       	call   c00161a8 <schedule()>
c00165fd:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016602:	83 c4 10             	add    esp,0x10
c0016605:	83 e8 01             	sub    eax,0x1
c0016608:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001660d:	85 c0                	test   eax,eax
c001660f:	75 cf                	jne    c00165e0 <taskReturned+0x10>
c0016611:	fb                   	sti    
c0016612:	eb cc                	jmp    c00165e0 <taskReturned+0x10>

c0016614 <Thr::processFromPID(int)>:
c0016614:	57                   	push   edi
c0016615:	56                   	push   esi
c0016616:	53                   	push   ebx
c0016617:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001661b:	fa                   	cli    
c001661c:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0016622:	83 ec 0c             	sub    esp,0xc
c0016625:	83 c1 01             	add    ecx,0x1
c0016628:	68 e4 c6 02 c0       	push   0xc002c6e4
c001662d:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0016633:	e8 d4 97 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016638:	83 c4 10             	add    esp,0x10
c001663b:	89 c7                	mov    edi,eax
c001663d:	eb 15                	jmp    c0016654 <Thr::processFromPID(int)+0x40>
c001663f:	90                   	nop
c0016640:	83 ec 0c             	sub    esp,0xc
c0016643:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016648:	e8 bf 97 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001664d:	83 c4 10             	add    esp,0x10
c0016650:	39 f8                	cmp    eax,edi
c0016652:	74 50                	je     c00166a4 <Thr::processFromPID(int)+0x90>
c0016654:	83 ec 0c             	sub    esp,0xc
c0016657:	68 e4 c6 02 c0       	push   0xc002c6e4
c001665c:	e8 ab 97 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016661:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016668:	89 c3                	mov    ebx,eax
c001666a:	e8 a5 97 00 00       	call   c001fe14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001666f:	58                   	pop    eax
c0016670:	5a                   	pop    edx
c0016671:	53                   	push   ebx
c0016672:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016677:	e8 54 98 00 00       	call   c001fed0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001667c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001667f:	83 c4 10             	add    esp,0x10
c0016682:	39 30                	cmp    DWORD PTR [eax],esi
c0016684:	75 ba                	jne    c0016640 <Thr::processFromPID(int)+0x2c>
c0016686:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001668b:	83 e8 01             	sub    eax,0x1
c001668e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016693:	74 0b                	je     c00166a0 <Thr::processFromPID(int)+0x8c>
c0016695:	8d 76 00             	lea    esi,[esi+0x0]
c0016698:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001669b:	5b                   	pop    ebx
c001669c:	5e                   	pop    esi
c001669d:	5f                   	pop    edi
c001669e:	c3                   	ret    
c001669f:	90                   	nop
c00166a0:	fb                   	sti    
c00166a1:	eb f5                	jmp    c0016698 <Thr::processFromPID(int)+0x84>
c00166a3:	90                   	nop
c00166a4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00166a9:	83 e8 01             	sub    eax,0x1
c00166ac:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00166b1:	75 05                	jne    c00166b8 <Thr::processFromPID(int)+0xa4>
c00166b3:	fb                   	sti    
c00166b4:	5b                   	pop    ebx
c00166b5:	5e                   	pop    esi
c00166b6:	5f                   	pop    edi
c00166b7:	c3                   	ret    
c00166b8:	5b                   	pop    ebx
c00166b9:	31 c0                	xor    eax,eax
c00166bb:	5e                   	pop    esi
c00166bc:	5f                   	pop    edi
c00166bd:	c3                   	ret    
c00166be:	66 90                	xchg   ax,ax

c00166c0 <unblockTask(ThreadControlBlock*)>:
c00166c0:	53                   	push   ebx
c00166c1:	83 ec 08             	sub    esp,0x8
c00166c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00166c8:	fa                   	cli    
c00166c9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00166ce:	83 c0 01             	add    eax,0x1
c00166d1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00166d6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00166d9:	85 c0                	test   eax,eax
c00166db:	74 67                	je     c0016744 <unblockTask(ThreadControlBlock*)+0x84>
c00166dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00166e0:	83 f8 01             	cmp    eax,0x1
c00166e3:	74 37                	je     c001671c <unblockTask(ThreadControlBlock*)+0x5c>
c00166e5:	83 ec 0c             	sub    esp,0xc
c00166e8:	68 e4 c6 02 c0       	push   0xc002c6e4
c00166ed:	e8 1a 97 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166f2:	83 c4 10             	add    esp,0x10
c00166f5:	85 c0                	test   eax,eax
c00166f7:	75 1b                	jne    c0016714 <unblockTask(ThreadControlBlock*)+0x54>
c00166f9:	eb 5d                	jmp    c0016758 <unblockTask(ThreadControlBlock*)+0x98>
c00166fb:	90                   	nop
c00166fc:	83 ec 08             	sub    esp,0x8
c00166ff:	50                   	push   eax
c0016700:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016705:	e8 22 9a 00 00       	call   c002012c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001670a:	83 c4 10             	add    esp,0x10
c001670d:	85 c0                	test   eax,eax
c001670f:	74 47                	je     c0016758 <unblockTask(ThreadControlBlock*)+0x98>
c0016711:	8d 76 00             	lea    esi,[esi+0x0]
c0016714:	39 c3                	cmp    ebx,eax
c0016716:	75 e4                	jne    c00166fc <unblockTask(ThreadControlBlock*)+0x3c>
c0016718:	eb 12                	jmp    c001672c <unblockTask(ThreadControlBlock*)+0x6c>
c001671a:	66 90                	xchg   ax,ax
c001671c:	83 ec 0c             	sub    esp,0xc
c001671f:	68 d7 2a 02 c0       	push   0xc0022ad7
c0016724:	e8 20 42 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0016729:	83 c4 10             	add    esp,0x10
c001672c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016731:	83 e8 01             	sub    eax,0x1
c0016734:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016739:	75 01                	jne    c001673c <unblockTask(ThreadControlBlock*)+0x7c>
c001673b:	fb                   	sti    
c001673c:	83 c4 08             	add    esp,0x8
c001673f:	5b                   	pop    ebx
c0016740:	c3                   	ret    
c0016741:	8d 76 00             	lea    esi,[esi+0x0]
c0016744:	83 ec 0c             	sub    esp,0xc
c0016747:	68 c0 2a 02 c0       	push   0xc0022ac0
c001674c:	e8 f8 41 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0016751:	83 c4 10             	add    esp,0x10
c0016754:	eb d6                	jmp    c001672c <unblockTask(ThreadControlBlock*)+0x6c>
c0016756:	66 90                	xchg   ax,ax
c0016758:	83 ec 08             	sub    esp,0x8
c001675b:	53                   	push   ebx
c001675c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016761:	e8 6a 97 00 00       	call   c001fed0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016766:	83 c4 10             	add    esp,0x10
c0016769:	eb c1                	jmp    c001672c <unblockTask(ThreadControlBlock*)+0x6c>
c001676b:	90                   	nop

c001676c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001676c:	55                   	push   ebp
c001676d:	57                   	push   edi
c001676e:	56                   	push   esi
c001676f:	53                   	push   ebx
c0016770:	83 ec 1c             	sub    esp,0x1c
c0016773:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016777:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001677a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016780:	85 ed                	test   ebp,ebp
c0016782:	7e 28                	jle    c00167ac <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016784:	31 f6                	xor    esi,esi
c0016786:	66 90                	xchg   ax,ax
c0016788:	83 ec 0c             	sub    esp,0xc
c001678b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0016792:	83 c6 01             	add    esi,0x1
c0016795:	57                   	push   edi
c0016796:	e8 2f 13 ff ff       	call   c0007aca <free>
c001679b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001679e:	83 c4 10             	add    esp,0x10
c00167a1:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00167a7:	7f df                	jg     c0016788 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00167a9:	8d 76 00             	lea    esi,[esi+0x0]
c00167ac:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00167b6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00167bb:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00167be:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00167c1:	d3 c0                	rol    eax,cl
c00167c3:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00167ca:	21 c8                	and    eax,ecx
c00167cc:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00167d3:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00167d6:	89 f7                	mov    edi,esi
c00167d8:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00167e0:	0f 85 72 01 00 00    	jne    c0016958 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00167e6:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00167ec:	85 ed                	test   ebp,ebp
c00167ee:	74 1c                	je     c001680c <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00167f0:	83 ec 0c             	sub    esp,0xc
c00167f3:	55                   	push   ebp
c00167f4:	e8 db ab ff ff       	call   c00113d4 <EnvVarContainer::~EnvVarContainer()>
c00167f9:	59                   	pop    ecx
c00167fa:	5e                   	pop    esi
c00167fb:	6a 0c                	push   0xc
c00167fd:	55                   	push   ebp
c00167fe:	e8 19 40 ff ff       	call   c000a81c <operator delete(void*, unsigned long)>
c0016803:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016806:	83 c4 10             	add    esp,0x10
c0016809:	89 f7                	mov    edi,esi
c001680b:	90                   	nop
c001680c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016812:	85 c0                	test   eax,eax
c0016814:	0f 84 b2 00 00 00    	je     c00168cc <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001681a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c001681d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016821:	31 c9                	xor    ecx,ecx
c0016823:	eb 17                	jmp    c001683c <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016825:	8d 76 00             	lea    esi,[esi+0x0]
c0016828:	83 c1 01             	add    ecx,0x1
c001682b:	83 f9 10             	cmp    ecx,0x10
c001682e:	0f 84 98 00 00 00    	je     c00168cc <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016834:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001683a:	66 90                	xchg   ax,ax
c001683c:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0016843:	d3 fa                	sar    edx,cl
c0016845:	80 e2 01             	and    dl,0x1
c0016848:	74 de                	je     c0016828 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001684a:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c001684d:	01 d2                	add    edx,edx
c001684f:	01 ca                	add    edx,ecx
c0016851:	8d 14 92             	lea    edx,[edx+edx*4]
c0016854:	01 d0                	add    eax,edx
c0016856:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001685c:	83 fd 07             	cmp    ebp,0x7
c001685f:	75 c7                	jne    c0016828 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016861:	05 40 02 00 00       	add    eax,0x240
c0016866:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016869:	83 fd ff             	cmp    ebp,0xffffffff
c001686c:	0f 8c ee 00 00 00    	jl     c0016960 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016872:	0f 84 ac 01 00 00    	je     c0016a24 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0016878:	85 ed                	test   ebp,ebp
c001687a:	0f 84 90 01 00 00    	je     c0016a10 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016880:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016882:	75 a4                	jne    c0016828 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016884:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001688a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001688e:	01 d0                	add    eax,edx
c0016890:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016894:	83 ec 0c             	sub    esp,0xc
c0016897:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c001689d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00168a0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00168a6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00168ad:	50                   	push   eax
c00168ae:	e8 0d fe ff ff       	call   c00166c0 <unblockTask(ThreadControlBlock*)>
c00168b3:	83 c4 10             	add    esp,0x10
c00168b6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00168b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00168bd:	89 f7                	mov    edi,esi
c00168bf:	83 c1 01             	add    ecx,0x1
c00168c2:	83 f9 10             	cmp    ecx,0x10
c00168c5:	0f 85 69 ff ff ff    	jne    c0016834 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00168cb:	90                   	nop
c00168cc:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00168d2:	85 c0                	test   eax,eax
c00168d4:	74 62                	je     c0016938 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00168d6:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00168dc:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00168e2:	74 54                	je     c0016938 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00168e4:	83 ec 0c             	sub    esp,0xc
c00168e7:	68 e4 c6 02 c0       	push   0xc002c6e4
c00168ec:	e8 1b 95 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168f1:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00168f8:	89 c7                	mov    edi,eax
c00168fa:	e8 f1 94 00 00       	call   c001fdf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00168ff:	83 c4 10             	add    esp,0x10
c0016902:	84 c0                	test   al,al
c0016904:	0f 84 ce 00 00 00    	je     c00169d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001690a:	66 90                	xchg   ax,ax
c001690c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001690f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016915:	85 d2                	test   edx,edx
c0016917:	74 0f                	je     c0016928 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016919:	83 ec 0c             	sub    esp,0xc
c001691c:	8b 02                	mov    eax,DWORD PTR [edx]
c001691e:	52                   	push   edx
c001691f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016922:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016925:	83 c4 10             	add    esp,0x10
c0016928:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0016932:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016935:	8d 76 00             	lea    esi,[esi+0x0]
c0016938:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001693e:	85 db                	test   ebx,ebx
c0016940:	74 16                	je     c0016958 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016942:	83 ec 0c             	sub    esp,0xc
c0016945:	53                   	push   ebx
c0016946:	e8 6b 32 ff ff       	call   c0009bb6 <VAS::~VAS()>
c001694b:	58                   	pop    eax
c001694c:	5a                   	pop    edx
c001694d:	6a 14                	push   0x14
c001694f:	53                   	push   ebx
c0016950:	e8 c7 3e ff ff       	call   c000a81c <operator delete(void*, unsigned long)>
c0016955:	83 c4 10             	add    esp,0x10
c0016958:	83 c4 1c             	add    esp,0x1c
c001695b:	5b                   	pop    ebx
c001695c:	5e                   	pop    esi
c001695d:	5f                   	pop    edi
c001695e:	5d                   	pop    ebp
c001695f:	c3                   	ret    
c0016960:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016964:	83 ec 0c             	sub    esp,0xc
c0016967:	68 8c 2b 02 c0       	push   0xc0022b8c
c001696c:	e8 52 ad ff ff       	call   c00116c3 <KePanic(char const*)>
c0016971:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016974:	83 c4 10             	add    esp,0x10
c0016977:	89 f7                	mov    edi,esi
c0016979:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001697d:	e9 a6 fe ff ff       	jmp    c0016828 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016982:	66 90                	xchg   ax,ax
c0016984:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001698a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016990:	75 1e                	jne    c00169b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016992:	83 ec 0c             	sub    esp,0xc
c0016995:	68 f4 2b 02 c0       	push   0xc0022bf4
c001699a:	e8 aa 3f ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001699f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00169a6:	e8 11 fa ff ff       	call   c00163bc <blockTask(TaskState)>
c00169ab:	83 c4 10             	add    esp,0x10
c00169ae:	66 90                	xchg   ax,ax
c00169b0:	83 ec 08             	sub    esp,0x8
c00169b3:	56                   	push   esi
c00169b4:	68 e4 c6 02 c0       	push   0xc002c6e4
c00169b9:	e8 12 95 00 00       	call   c001fed0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00169be:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00169c5:	e8 42 94 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169ca:	83 c4 10             	add    esp,0x10
c00169cd:	39 f8                	cmp    eax,edi
c00169cf:	0f 84 37 ff ff ff    	je     c001690c <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00169d5:	8d 76 00             	lea    esi,[esi+0x0]
c00169d8:	83 ec 0c             	sub    esp,0xc
c00169db:	68 e4 c6 02 c0       	push   0xc002c6e4
c00169e0:	e8 27 94 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169e5:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00169ec:	89 c6                	mov    esi,eax
c00169ee:	e8 21 94 00 00       	call   c001fe14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00169f3:	83 c4 10             	add    esp,0x10
c00169f6:	39 f3                	cmp    ebx,esi
c00169f8:	74 b6                	je     c00169b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00169fa:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00169fd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016a00:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0016a06:	75 a8                	jne    c00169b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016a08:	e9 77 ff ff ff       	jmp    c0016984 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a10:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016a14:	83 ec 0c             	sub    esp,0xc
c0016a17:	68 c0 2b 02 c0       	push   0xc0022bc0
c0016a1c:	e9 4b ff ff ff       	jmp    c001696c <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016a21:	8d 76 00             	lea    esi,[esi+0x0]
c0016a24:	8b 36                	mov    esi,DWORD PTR [esi]
c0016a26:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016a2a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016a2d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016a30:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0016a36:	01 d7                	add    edi,edx
c0016a38:	89 f8                	mov    eax,edi
c0016a3a:	e9 51 fe ff ff       	jmp    c0016890 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016a3f:	90                   	nop

c0016a40 <cleanerTaskFunction(void*)>:
c0016a40:	53                   	push   ebx
c0016a41:	83 ec 08             	sub    esp,0x8
c0016a44:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a49:	83 e8 01             	sub    eax,0x1
c0016a4c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a51:	75 01                	jne    c0016a54 <cleanerTaskFunction(void*)+0x14>
c0016a53:	fb                   	sti    
c0016a54:	fa                   	cli    
c0016a55:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a5a:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c0016a61:	8d 50 01             	lea    edx,[eax+0x1]
c0016a64:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a6a:	0f 84 c4 00 00 00    	je     c0016b34 <cleanerTaskFunction(void*)+0xf4>
c0016a70:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a75:	85 c0                	test   eax,eax
c0016a77:	75 03                	jne    c0016a7c <cleanerTaskFunction(void*)+0x3c>
c0016a79:	fb                   	sti    
c0016a7a:	66 90                	xchg   ax,ax
c0016a7c:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c0016a83:	fa                   	cli    
c0016a84:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016a8a:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016a90:	83 c2 01             	add    edx,0x1
c0016a93:	83 c1 01             	add    ecx,0x1
c0016a96:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a9c:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016aa2:	fa                   	cli    
c0016aa3:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c0016aa9:	83 c3 01             	add    ebx,0x1
c0016aac:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c0016ab2:	eb 28                	jmp    c0016adc <cleanerTaskFunction(void*)+0x9c>
c0016ab4:	83 ec 0c             	sub    esp,0xc
c0016ab7:	68 cc c6 02 c0       	push   0xc002c6cc
c0016abc:	e8 4b 93 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ac1:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0016ac8:	89 c3                	mov    ebx,eax
c0016aca:	e8 45 93 00 00       	call   c001fe14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016acf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ad2:	e8 95 fc ff ff       	call   c001676c <cleanupTerminatedTask(ThreadControlBlock*)>
c0016ad7:	83 c4 10             	add    esp,0x10
c0016ada:	66 90                	xchg   ax,ax
c0016adc:	83 ec 0c             	sub    esp,0xc
c0016adf:	68 cc c6 02 c0       	push   0xc002c6cc
c0016ae4:	e8 07 93 00 00       	call   c001fdf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016ae9:	83 c4 10             	add    esp,0x10
c0016aec:	84 c0                	test   al,al
c0016aee:	74 c4                	je     c0016ab4 <cleanerTaskFunction(void*)+0x74>
c0016af0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016af5:	83 e8 01             	sub    eax,0x1
c0016af8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016afd:	75 01                	jne    c0016b00 <cleanerTaskFunction(void*)+0xc0>
c0016aff:	fb                   	sti    
c0016b00:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b05:	83 e8 01             	sub    eax,0x1
c0016b08:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016b0d:	0f 85 31 ff ff ff    	jne    c0016a44 <cleanerTaskFunction(void*)+0x4>
c0016b13:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016b18:	85 c0                	test   eax,eax
c0016b1a:	0f 84 24 ff ff ff    	je     c0016a44 <cleanerTaskFunction(void*)+0x4>
c0016b20:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016b2a:	e8 79 f6 ff ff       	call   c00161a8 <schedule()>
c0016b2f:	e9 10 ff ff ff       	jmp    c0016a44 <cleanerTaskFunction(void*)+0x4>
c0016b34:	83 ec 0c             	sub    esp,0xc
c0016b37:	6a 02                	push   0x2
c0016b39:	e8 56 f8 ff ff       	call   c0016394 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016b3e:	83 c4 10             	add    esp,0x10
c0016b41:	e9 36 ff ff ff       	jmp    c0016a7c <cleanerTaskFunction(void*)+0x3c>
c0016b46:	66 90                	xchg   ax,ax

c0016b48 <terminateTask(int)>:
c0016b48:	83 ec 14             	sub    esp,0x14
c0016b4b:	fa                   	cli    
c0016b4c:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016b52:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016b58:	83 c2 01             	add    edx,0x1
c0016b5b:	83 c1 01             	add    ecx,0x1
c0016b5e:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016b64:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016b6a:	fa                   	cli    
c0016b6b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b70:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b74:	83 c0 01             	add    eax,0x1
c0016b77:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b81:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016b84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b89:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016b8c:	50                   	push   eax
c0016b8d:	68 cc c6 02 c0       	push   0xc002c6cc
c0016b92:	e8 39 93 00 00       	call   c001fed0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016b97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b9c:	83 c4 10             	add    esp,0x10
c0016b9f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016ba6:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016bab:	85 c0                	test   eax,eax
c0016bad:	74 65                	je     c0016c14 <terminateTask(int)+0xcc>
c0016baf:	83 ec 0c             	sub    esp,0xc
c0016bb2:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016bb9:	50                   	push   eax
c0016bba:	e8 01 fb ff ff       	call   c00166c0 <unblockTask(ThreadControlBlock*)>
c0016bbf:	83 c4 10             	add    esp,0x10
c0016bc2:	66 90                	xchg   ax,ax
c0016bc4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016bc9:	83 e8 01             	sub    eax,0x1
c0016bcc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bd1:	75 01                	jne    c0016bd4 <terminateTask(int)+0x8c>
c0016bd3:	fb                   	sti    
c0016bd4:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016bd9:	83 e8 01             	sub    eax,0x1
c0016bdc:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016be1:	75 09                	jne    c0016bec <terminateTask(int)+0xa4>
c0016be3:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016bea:	75 3c                	jne    c0016c28 <terminateTask(int)+0xe0>
c0016bec:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016bf1:	83 e8 01             	sub    eax,0x1
c0016bf4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bf9:	75 01                	jne    c0016bfc <terminateTask(int)+0xb4>
c0016bfb:	fb                   	sti    
c0016bfc:	fa                   	cli    
c0016bfd:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c02:	83 c0 01             	add    eax,0x1
c0016c05:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c0a:	66 90                	xchg   ax,ax
c0016c0c:	e8 97 f5 ff ff       	call   c00161a8 <schedule()>
c0016c11:	eb d9                	jmp    c0016bec <terminateTask(int)+0xa4>
c0016c13:	90                   	nop
c0016c14:	83 ec 0c             	sub    esp,0xc
c0016c17:	68 ee 2a 02 c0       	push   0xc0022aee
c0016c1c:	e8 28 3d ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0016c21:	83 c4 10             	add    esp,0x10
c0016c24:	eb 9e                	jmp    c0016bc4 <terminateTask(int)+0x7c>
c0016c26:	66 90                	xchg   ax,ax
c0016c28:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016c32:	eb d8                	jmp    c0016c0c <terminateTask(int)+0xc4>

c0016c34 <Thr::terminateFromIRQ(int)>:
c0016c34:	83 ec 18             	sub    esp,0x18
c0016c37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c3b:	50                   	push   eax
c0016c3c:	e8 07 ff ff ff       	call   c0016b48 <terminateTask(int)>
c0016c41:	90                   	nop
c0016c42:	66 90                	xchg   ax,ax

c0016c44 <Semaphore::release()>:
c0016c44:	83 ec 0c             	sub    esp,0xc
c0016c47:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c4b:	fa                   	cli    
c0016c4c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c51:	83 c0 01             	add    eax,0x1
c0016c54:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c59:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016c5e:	8d 48 01             	lea    ecx,[eax+0x1]
c0016c61:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016c67:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016c6a:	85 c9                	test   ecx,ecx
c0016c6c:	74 42                	je     c0016cb0 <Semaphore::release()+0x6c>
c0016c6e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016c71:	83 ec 0c             	sub    esp,0xc
c0016c74:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016c77:	51                   	push   ecx
c0016c78:	e8 43 fa ff ff       	call   c00166c0 <unblockTask(ThreadControlBlock*)>
c0016c7d:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016c82:	83 c4 10             	add    esp,0x10
c0016c85:	83 e8 01             	sub    eax,0x1
c0016c88:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016c8d:	85 c0                	test   eax,eax
c0016c8f:	75 0b                	jne    c0016c9c <Semaphore::release()+0x58>
c0016c91:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016c96:	85 c0                	test   eax,eax
c0016c98:	75 22                	jne    c0016cbc <Semaphore::release()+0x78>
c0016c9a:	66 90                	xchg   ax,ax
c0016c9c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ca1:	83 e8 01             	sub    eax,0x1
c0016ca4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ca9:	75 01                	jne    c0016cac <Semaphore::release()+0x68>
c0016cab:	fb                   	sti    
c0016cac:	83 c4 0c             	add    esp,0xc
c0016caf:	c3                   	ret    
c0016cb0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016cb3:	83 e9 01             	sub    ecx,0x1
c0016cb6:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016cb9:	eb cd                	jmp    c0016c88 <Semaphore::release()+0x44>
c0016cbb:	90                   	nop
c0016cbc:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016cc6:	e8 dd f4 ff ff       	call   c00161a8 <schedule()>
c0016ccb:	eb cf                	jmp    c0016c9c <Semaphore::release()+0x58>
c0016ccd:	8d 76 00             	lea    esi,[esi+0x0]

c0016cd0 <__static_initialization_and_destruction_0(int, int)>:
c0016cd0:	83 ec 0c             	sub    esp,0xc
c0016cd3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016cd8:	0f 85 8e 00 00 00    	jne    c0016d6c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016cde:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016ce6:	0f 85 80 00 00 00    	jne    c0016d6c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016cec:	83 ec 0c             	sub    esp,0xc
c0016cef:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016cf4:	e8 8b 94 00 00       	call   c0020184 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016cf9:	83 c4 10             	add    esp,0x10
c0016cfc:	83 ec 04             	sub    esp,0x4
c0016cff:	68 c4 37 02 c0       	push   0xc00237c4
c0016d04:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016d09:	68 34 01 02 c0       	push   0xc0020134
c0016d0e:	e8 b9 3a ff ff       	call   c000a7cc <__cxa_atexit>
c0016d13:	83 c4 10             	add    esp,0x10
c0016d16:	83 ec 0c             	sub    esp,0xc
c0016d19:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016d1e:	e8 61 94 00 00       	call   c0020184 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016d23:	83 c4 10             	add    esp,0x10
c0016d26:	83 ec 04             	sub    esp,0x4
c0016d29:	68 c4 37 02 c0       	push   0xc00237c4
c0016d2e:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016d33:	68 34 01 02 c0       	push   0xc0020134
c0016d38:	e8 8f 3a ff ff       	call   c000a7cc <__cxa_atexit>
c0016d3d:	83 c4 10             	add    esp,0x10
c0016d40:	83 ec 0c             	sub    esp,0xc
c0016d43:	68 cc c6 02 c0       	push   0xc002c6cc
c0016d48:	e8 37 94 00 00       	call   c0020184 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016d4d:	83 c4 10             	add    esp,0x10
c0016d50:	83 ec 04             	sub    esp,0x4
c0016d53:	68 c4 37 02 c0       	push   0xc00237c4
c0016d58:	68 cc c6 02 c0       	push   0xc002c6cc
c0016d5d:	68 34 01 02 c0       	push   0xc0020134
c0016d62:	e8 65 3a ff ff       	call   c000a7cc <__cxa_atexit>
c0016d67:	83 c4 10             	add    esp,0x10
c0016d6a:	66 90                	xchg   ax,ax
c0016d6c:	90                   	nop
c0016d6d:	83 c4 0c             	add    esp,0xc
c0016d70:	c3                   	ret    
c0016d71:	8d 76 00             	lea    esi,[esi+0x0]

c0016d74 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016d74:	83 ec 0c             	sub    esp,0xc
c0016d77:	83 ec 08             	sub    esp,0x8
c0016d7a:	68 ff ff 00 00       	push   0xffff
c0016d7f:	6a 01                	push   0x1
c0016d81:	e8 4a ff ff ff       	call   c0016cd0 <__static_initialization_and_destruction_0(int, int)>
c0016d86:	83 c4 10             	add    esp,0x10
c0016d89:	83 c4 0c             	add    esp,0xc
c0016d8c:	c3                   	ret    

c0016d8d <Vm::inbv(unsigned short)>:
c0016d8d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016d91:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016d96:	75 06                	jne    c0016d9e <Vm::inbv(unsigned short)+0x11>
c0016d98:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016d9d:	c3                   	ret    
c0016d9e:	ec                   	in     al,dx
c0016d9f:	c3                   	ret    

c0016da0 <Vm::outbv(unsigned short, unsigned char)>:
c0016da0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016da4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016da8:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016dad:	75 25                	jne    c0016dd4 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016daf:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016db5:	8d 51 01             	lea    edx,[ecx+0x1]
c0016db8:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016dbe:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016dc4:	83 fa 20             	cmp    edx,0x20
c0016dc7:	75 0c                	jne    c0016dd5 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016dc9:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016dd3:	c3                   	ret    
c0016dd4:	ee                   	out    dx,al
c0016dd5:	c3                   	ret    

c0016dd6 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016dd6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016ddb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016de0:	c1 e0 04             	shl    eax,0x4
c0016de3:	01 d0                	add    eax,edx
c0016de5:	c3                   	ret    

c0016de6 <Vm::getSegment(unsigned int)>:
c0016de6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dea:	c1 e8 10             	shr    eax,0x10
c0016ded:	c3                   	ret    

c0016dee <Vm::getOffset(unsigned int)>:
c0016dee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016df2:	c3                   	ret    

c0016df3 <Vm::mainloop2()>:
c0016df3:	83 ec 18             	sub    esp,0x18
c0016df6:	fa                   	cli    
c0016df7:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016dfd:	6a 02                	push   0x2
c0016dff:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016e06:	e8 89 f5 ff ff       	call   c0016394 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016e0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e10:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016e14:	52                   	push   edx
c0016e15:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016e19:	52                   	push   edx
c0016e1a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016e1e:	52                   	push   edx
c0016e1f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016e23:	50                   	push   eax
c0016e24:	e8 e6 93 fe ff       	call   c000020f <goToVM86>
c0016e29:	83 c4 2c             	add    esp,0x2c
c0016e2c:	c3                   	ret    

c0016e2d <Vm::mainVm8086Loop(void*)>:
c0016e2d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e32:	48                   	dec    eax
c0016e33:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e38:	75 01                	jne    c0016e3b <Vm::mainVm8086Loop(void*)+0xe>
c0016e3a:	fb                   	sti    
c0016e3b:	eb b6                	jmp    c0016df3 <Vm::mainloop2()>

c0016e3d <Vm::mainloop3(unsigned long)>:
c0016e3d:	83 ec 18             	sub    esp,0x18
c0016e40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016e44:	fa                   	cli    
c0016e45:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e4b:	6a 02                	push   0x2
c0016e4d:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016e54:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016e59:	e8 36 f5 ff ff       	call   c0016394 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016e5e:	83 c4 1c             	add    esp,0x1c
c0016e61:	eb 90                	jmp    c0016df3 <Vm::mainloop2()>

c0016e63 <Vm::initialise8086()>:
c0016e63:	83 ec 0c             	sub    esp,0xc
c0016e66:	68 80 00 00 00       	push   0x80
c0016e6b:	6a 00                	push   0x0
c0016e6d:	68 2d 6e 01 c0       	push   0xc0016e2d
c0016e72:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016e78:	e8 db f0 ff ff       	call   c0015f58 <Process::createThread(void (*)(void*), void*, int)>
c0016e7d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016e84:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016e89:	68 00 01 00 00       	push   0x100
c0016e8e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016e93:	6a 00                	push   0x0
c0016e95:	6a 00                	push   0x0
c0016e97:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016e9d:	e8 7c 30 ff ff       	call   c0009f1e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016ea2:	83 c4 2c             	add    esp,0x2c
c0016ea5:	c3                   	ret    

c0016ea6 <Vm::finish8086()>:
c0016ea6:	53                   	push   ebx
c0016ea7:	83 ec 08             	sub    esp,0x8
c0016eaa:	fa                   	cli    
c0016eab:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016eb1:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016eb8:	75 15                	jne    c0016ecf <Vm::finish8086()+0x29>
c0016eba:	e8 e9 f2 ff ff       	call   c00161a8 <schedule()>
c0016ebf:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ec4:	48                   	dec    eax
c0016ec5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016eca:	75 de                	jne    c0016eaa <Vm::finish8086()+0x4>
c0016ecc:	fb                   	sti    
c0016ecd:	eb db                	jmp    c0016eaa <Vm::finish8086()+0x4>
c0016ecf:	83 ec 0c             	sub    esp,0xc
c0016ed2:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016ed8:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016ede:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016ee5:	e8 d6 f7 ff ff       	call   c00166c0 <unblockTask(ThreadControlBlock*)>
c0016eea:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016eef:	83 c4 10             	add    esp,0x10
c0016ef2:	8d 50 ff             	lea    edx,[eax-0x1]
c0016ef5:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016efb:	85 d2                	test   edx,edx
c0016efd:	75 01                	jne    c0016f00 <Vm::finish8086()+0x5a>
c0016eff:	fb                   	sti    
c0016f00:	89 d8                	mov    eax,ebx
c0016f02:	83 c4 08             	add    esp,0x8
c0016f05:	5b                   	pop    ebx
c0016f06:	c3                   	ret    

c0016f07 <Vm::getOutput8086(unsigned char*)>:
c0016f07:	57                   	push   edi
c0016f08:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016f0e:	56                   	push   esi
c0016f0f:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016f14:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016f18:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f1a:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016f1f:	5e                   	pop    esi
c0016f20:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016f2a:	5f                   	pop    edi
c0016f2b:	c3                   	ret    

c0016f2c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016f2c:	55                   	push   ebp
c0016f2d:	57                   	push   edi
c0016f2e:	56                   	push   esi
c0016f2f:	53                   	push   ebx
c0016f30:	83 ec 0c             	sub    esp,0xc
c0016f33:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016f37:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016f3b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016f3f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016f43:	fa                   	cli    
c0016f44:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016f4a:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016f51:	75 15                	jne    c0016f68 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016f53:	e8 50 f2 ff ff       	call   c00161a8 <schedule()>
c0016f58:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f5d:	48                   	dec    eax
c0016f5e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f63:	75 de                	jne    c0016f43 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016f65:	fb                   	sti    
c0016f66:	eb db                	jmp    c0016f43 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016f68:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016f6d:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016f77:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016f7b:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016f7f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016f83:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016f87:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016f8b:	0f b7 ff             	movzx  edi,di
c0016f8e:	0f b7 f6             	movzx  esi,si
c0016f91:	50                   	push   eax
c0016f92:	6a 20                	push   0x20
c0016f94:	6a 00                	push   0x0
c0016f96:	68 40 c7 02 c0       	push   0xc002c740
c0016f9b:	e8 50 95 fe ff       	call   c00004f0 <memset>
c0016fa0:	5a                   	pop    edx
c0016fa1:	59                   	pop    ecx
c0016fa2:	57                   	push   edi
c0016fa3:	56                   	push   esi
c0016fa4:	e8 2d fe ff ff       	call   c0016dd6 <Vm::realToLinear(unsigned short, unsigned short)>
c0016fa9:	83 c4 10             	add    esp,0x10
c0016fac:	89 c7                	mov    edi,eax
c0016fae:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016fb2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016fb6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016fb8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016fbd:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016fc4:	48                   	dec    eax
c0016fc5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016fca:	75 01                	jne    c0016fcd <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016fcc:	fb                   	sti    
c0016fcd:	83 ec 0c             	sub    esp,0xc
c0016fd0:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016fd6:	e8 e5 f6 ff ff       	call   c00166c0 <unblockTask(ThreadControlBlock*)>
c0016fdb:	83 c4 1c             	add    esp,0x1c
c0016fde:	b0 01                	mov    al,0x1
c0016fe0:	5b                   	pop    ebx
c0016fe1:	5e                   	pop    esi
c0016fe2:	5f                   	pop    edi
c0016fe3:	5d                   	pop    ebp
c0016fe4:	c3                   	ret    

c0016fe5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016fe5:	55                   	push   ebp
c0016fe6:	57                   	push   edi
c0016fe7:	56                   	push   esi
c0016fe8:	53                   	push   ebx
c0016fe9:	83 ec 34             	sub    esp,0x34
c0016fec:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016ff0:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016ff4:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016ff8:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016ffc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017000:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017004:	68 1c 2c 02 c0       	push   0xc0022c1c
c0017009:	e8 3b 39 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001700e:	83 c4 10             	add    esp,0x10
c0017011:	fa                   	cli    
c0017012:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0017018:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c001701e:	84 db                	test   bl,bl
c0017020:	75 15                	jne    c0017037 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0017022:	e8 81 f1 ff ff       	call   c00161a8 <schedule()>
c0017027:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001702c:	48                   	dec    eax
c001702d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017032:	75 dd                	jne    c0017011 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0017034:	fb                   	sti    
c0017035:	eb da                	jmp    c0017011 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0017037:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001703b:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0017040:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c001704a:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c001704e:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0017052:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0017056:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001705a:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001705e:	50                   	push   eax
c001705f:	6a 20                	push   0x20
c0017061:	6a 00                	push   0x0
c0017063:	68 40 c7 02 c0       	push   0xc002c740
c0017068:	e8 83 94 fe ff       	call   c00004f0 <memset>
c001706d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017074:	e8 41 0a ff ff       	call   c0007aba <malloc>
c0017079:	83 c4 0c             	add    esp,0xc
c001707c:	89 c5                	mov    ebp,eax
c001707e:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0017084:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017088:	50                   	push   eax
c0017089:	e8 c2 4a ff ff       	call   c000bb50 <File::File(char const*, Process*)>
c001708e:	83 c4 10             	add    esp,0x10
c0017091:	85 ed                	test   ebp,ebp
c0017093:	75 0a                	jne    c001709f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0017095:	83 ec 0c             	sub    esp,0xc
c0017098:	68 3e 2c 02 c0       	push   0xc0022c3e
c001709d:	eb 2b                	jmp    c00170ca <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c001709f:	50                   	push   eax
c00170a0:	8d 44 24 17          	lea    eax,[esp+0x17]
c00170a4:	50                   	push   eax
c00170a5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00170a9:	50                   	push   eax
c00170aa:	55                   	push   ebp
c00170ab:	e8 c0 4d ff ff       	call   c000be70 <File::stat(unsigned long long*, bool*)>
c00170b0:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00170b4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00170b8:	83 c4 10             	add    esp,0x10
c00170bb:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00170c0:	74 27                	je     c00170e9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c00170c2:	83 ec 0c             	sub    esp,0xc
c00170c5:	68 52 2c 02 c0       	push   0xc0022c52
c00170ca:	e8 f4 a5 ff ff       	call   c00116c3 <KePanic(char const*)>
c00170cf:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00170d4:	83 c4 10             	add    esp,0x10
c00170d7:	48                   	dec    eax
c00170d8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00170dd:	85 c0                	test   eax,eax
c00170df:	75 01                	jne    c00170e2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c00170e1:	fb                   	sti    
c00170e2:	31 db                	xor    ebx,ebx
c00170e4:	e9 90 00 00 00       	jmp    c0017179 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00170e9:	51                   	push   ecx
c00170ea:	51                   	push   ecx
c00170eb:	6a 01                	push   0x1
c00170ed:	55                   	push   ebp
c00170ee:	e8 7b 4a ff ff       	call   c000bb6e <File::open(FileOpenMode)>
c00170f3:	83 c4 10             	add    esp,0x10
c00170f6:	85 c0                	test   eax,eax
c00170f8:	74 26                	je     c0017120 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c00170fa:	83 ec 0c             	sub    esp,0xc
c00170fd:	68 6b 2c 02 c0       	push   0xc0022c6b
c0017102:	e8 bc a5 ff ff       	call   c00116c3 <KePanic(char const*)>
c0017107:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001710c:	83 c4 10             	add    esp,0x10
c001710f:	48                   	dec    eax
c0017110:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017115:	85 c0                	test   eax,eax
c0017117:	75 c9                	jne    c00170e2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0017119:	fb                   	sti    
c001711a:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c001711e:	eb 59                	jmp    c0017179 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0017120:	0f b7 ff             	movzx  edi,di
c0017123:	50                   	push   eax
c0017124:	0f b7 f6             	movzx  esi,si
c0017127:	50                   	push   eax
c0017128:	57                   	push   edi
c0017129:	56                   	push   esi
c001712a:	e8 a7 fc ff ff       	call   c0016dd6 <Vm::realToLinear(unsigned short, unsigned short)>
c001712f:	5a                   	pop    edx
c0017130:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0017133:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0017137:	51                   	push   ecx
c0017138:	50                   	push   eax
c0017139:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001713d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017141:	55                   	push   ebp
c0017142:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0017145:	83 c4 14             	add    esp,0x14
c0017148:	55                   	push   ebp
c0017149:	e8 7e 4a ff ff       	call   c000bbcc <File::close()>
c001714e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017153:	83 c4 10             	add    esp,0x10
c0017156:	48                   	dec    eax
c0017157:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c001715e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017163:	85 c0                	test   eax,eax
c0017165:	75 01                	jne    c0017168 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0017167:	fb                   	sti    
c0017168:	83 ec 0c             	sub    esp,0xc
c001716b:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0017171:	e8 4a f5 ff ff       	call   c00166c0 <unblockTask(ThreadControlBlock*)>
c0017176:	83 c4 10             	add    esp,0x10
c0017179:	83 c4 2c             	add    esp,0x2c
c001717c:	88 d8                	mov    al,bl
c001717e:	5b                   	pop    ebx
c001717f:	5e                   	pop    esi
c0017180:	5f                   	pop    edi
c0017181:	5d                   	pop    ebp
c0017182:	c3                   	ret    

c0017183 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017183:	57                   	push   edi
c0017184:	56                   	push   esi
c0017185:	53                   	push   ebx
c0017186:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001718a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001718e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017192:	83 e8 06             	sub    eax,0x6
c0017195:	0f b7 c0             	movzx  eax,ax
c0017198:	50                   	push   eax
c0017199:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001719e:	50                   	push   eax
c001719f:	e8 32 fc ff ff       	call   c0016dd6 <Vm::realToLinear(unsigned short, unsigned short)>
c00171a4:	5a                   	pop    edx
c00171a5:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c00171a8:	59                   	pop    ecx
c00171a9:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00171ac:	8d 51 fa             	lea    edx,[ecx-0x6]
c00171af:	81 e2 ff ff 00 00    	and    edx,0xffff
c00171b5:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00171b8:	8d 56 02             	lea    edx,[esi+0x2]
c00171bb:	66 89 10             	mov    WORD PTR [eax],dx
c00171be:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c00171c2:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00171c6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00171c9:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c00171cd:	0f b6 f1             	movzx  esi,cl
c00171d0:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00171d4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00171da:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c00171de:	0f b6 d5             	movzx  edx,ch
c00171e1:	74 0a                	je     c00171ed <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c00171e3:	c1 e2 08             	shl    edx,0x8
c00171e6:	09 f2                	or     edx,esi
c00171e8:	80 ce 02             	or     dh,0x2
c00171eb:	eb 08                	jmp    c00171f5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c00171ed:	c1 e2 08             	shl    edx,0x8
c00171f0:	09 f2                	or     edx,esi
c00171f2:	80 e6 fd             	and    dh,0xfd
c00171f5:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00171f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171fe:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017202:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c001720a:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c001720d:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017215:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017218:	5b                   	pop    ebx
c0017219:	5e                   	pop    esi
c001721a:	5f                   	pop    edi
c001721b:	c3                   	ret    

c001721c <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001721c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017221:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017226:	c1 e0 04             	shl    eax,0x4
c0017229:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001722c:	c3                   	ret    

c001722d <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001722d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017232:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017237:	c1 e0 04             	shl    eax,0x4
c001723a:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001723e:	c3                   	ret    

c001723f <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001723f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017244:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017249:	c1 e0 04             	shl    eax,0x4
c001724c:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001724f:	c3                   	ret    

c0017250 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017250:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017255:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001725a:	c1 e0 04             	shl    eax,0x4
c001725d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017261:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017264:	c3                   	ret    

c0017265 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017265:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001726a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001726f:	c1 e0 04             	shl    eax,0x4
c0017272:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017276:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001727a:	c3                   	ret    

c001727b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001727b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017280:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017285:	c1 e0 04             	shl    eax,0x4
c0017288:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001728c:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001728f:	c3                   	ret    

c0017290 <Vm::faultHandler(regs*)>:
c0017290:	55                   	push   ebp
c0017291:	57                   	push   edi
c0017292:	56                   	push   esi
c0017293:	53                   	push   ebx
c0017294:	83 ec 2c             	sub    esp,0x2c
c0017297:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001729b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001729e:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00172a2:	0f b7 f8             	movzx  edi,ax
c00172a5:	52                   	push   edx
c00172a6:	0f b7 c0             	movzx  eax,ax
c00172a9:	50                   	push   eax
c00172aa:	e8 27 fb ff ff       	call   c0016dd6 <Vm::realToLinear(unsigned short, unsigned short)>
c00172af:	5a                   	pop    edx
c00172b0:	59                   	pop    ecx
c00172b1:	89 c1                	mov    ecx,eax
c00172b3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00172b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00172ba:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00172bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00172c3:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00172c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00172ca:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00172cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00172d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172d7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00172db:	e8 f6 fa ff ff       	call   c0016dd6 <Vm::realToLinear(unsigned short, unsigned short)>
c00172e0:	5e                   	pop    esi
c00172e1:	be 06 00 00 00       	mov    esi,0x6
c00172e6:	5d                   	pop    ebp
c00172e7:	31 ed                	xor    ebp,ebp
c00172e9:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00172ee:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00172f1:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00172f7:	0f 84 74 02 00 00    	je     c0017571 <Vm::faultHandler(regs*)+0x2e1>
c00172fd:	0f 87 94 00 00 00    	ja     c0017397 <Vm::faultHandler(regs*)+0x107>
c0017303:	83 fa 66             	cmp    edx,0x66
c0017306:	0f 84 e2 01 00 00    	je     c00174ee <Vm::faultHandler(regs*)+0x25e>
c001730c:	77 47                	ja     c0017355 <Vm::faultHandler(regs*)+0xc5>
c001730e:	83 fa 36             	cmp    edx,0x36
c0017311:	0f 84 ca 01 00 00    	je     c00174e1 <Vm::faultHandler(regs*)+0x251>
c0017317:	77 1a                	ja     c0017333 <Vm::faultHandler(regs*)+0xa3>
c0017319:	83 fa 26             	cmp    edx,0x26
c001731c:	0f 84 98 01 00 00    	je     c00174ba <Vm::faultHandler(regs*)+0x22a>
c0017322:	83 fa 2e             	cmp    edx,0x2e
c0017325:	0f 85 21 06 00 00    	jne    c001794c <Vm::faultHandler(regs*)+0x6bc>
c001732b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001732e:	31 f6                	xor    esi,esi
c0017330:	41                   	inc    ecx
c0017331:	eb bb                	jmp    c00172ee <Vm::faultHandler(regs*)+0x5e>
c0017333:	83 fa 64             	cmp    edx,0x64
c0017336:	0f 84 8b 01 00 00    	je     c00174c7 <Vm::faultHandler(regs*)+0x237>
c001733c:	0f 87 92 01 00 00    	ja     c00174d4 <Vm::faultHandler(regs*)+0x244>
c0017342:	83 fa 3e             	cmp    edx,0x3e
c0017345:	0f 85 01 06 00 00    	jne    c001794c <Vm::faultHandler(regs*)+0x6bc>
c001734b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001734e:	be 01 00 00 00       	mov    esi,0x1
c0017353:	eb db                	jmp    c0017330 <Vm::faultHandler(regs*)+0xa0>
c0017355:	83 fa 6d             	cmp    edx,0x6d
c0017358:	0f 84 34 03 00 00    	je     c0017692 <Vm::faultHandler(regs*)+0x402>
c001735e:	77 17                	ja     c0017377 <Vm::faultHandler(regs*)+0xe7>
c0017360:	83 fa 67             	cmp    edx,0x67
c0017363:	0f 84 92 01 00 00    	je     c00174fb <Vm::faultHandler(regs*)+0x26b>
c0017369:	83 fa 6c             	cmp    edx,0x6c
c001736c:	0f 84 b1 02 00 00    	je     c0017623 <Vm::faultHandler(regs*)+0x393>
c0017372:	e9 d5 05 00 00       	jmp    c001794c <Vm::faultHandler(regs*)+0x6bc>
c0017377:	83 fa 6f             	cmp    edx,0x6f
c001737a:	0f 84 3d 04 00 00    	je     c00177bd <Vm::faultHandler(regs*)+0x52d>
c0017380:	0f 82 9f 03 00 00    	jb     c0017725 <Vm::faultHandler(regs*)+0x495>
c0017386:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c001738c:	0f 84 76 01 00 00    	je     c0017508 <Vm::faultHandler(regs*)+0x278>
c0017392:	e9 b5 05 00 00       	jmp    c001794c <Vm::faultHandler(regs*)+0x6bc>
c0017397:	81 fa ec 00 00 00    	cmp    edx,0xec
c001739d:	0f 84 51 05 00 00    	je     c00178f4 <Vm::faultHandler(regs*)+0x664>
c00173a3:	0f 87 a9 00 00 00    	ja     c0017452 <Vm::faultHandler(regs*)+0x1c2>
c00173a9:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00173af:	0f 84 d0 04 00 00    	je     c0017885 <Vm::faultHandler(regs*)+0x5f5>
c00173b5:	77 78                	ja     c001742f <Vm::faultHandler(regs*)+0x19f>
c00173b7:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00173bd:	0f 84 0e 02 00 00    	je     c00175d1 <Vm::faultHandler(regs*)+0x341>
c00173c3:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00173c9:	0f 85 7d 05 00 00    	jne    c001794c <Vm::faultHandler(regs*)+0x6bc>
c00173cf:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00173d3:	89 d1                	mov    ecx,edx
c00173d5:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00173d8:	c1 e1 08             	shl    ecx,0x8
c00173db:	09 ca                	or     edx,ecx
c00173dd:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00173e0:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00173e4:	89 d1                	mov    ecx,edx
c00173e6:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00173ea:	c1 e1 08             	shl    ecx,0x8
c00173ed:	09 ca                	or     edx,ecx
c00173ef:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00173f2:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00173f6:	89 d1                	mov    ecx,edx
c00173f8:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00173fc:	c1 e1 08             	shl    ecx,0x8
c00173ff:	09 ca                	or     edx,ecx
c0017401:	81 ca 00 02 02 00    	or     edx,0x20200
c0017407:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001740a:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c001740e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017414:	d1 e8                	shr    eax,1
c0017416:	83 e0 01             	and    eax,0x1
c0017419:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001741c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001741f:	83 c0 06             	add    eax,0x6
c0017422:	25 ff ff 00 00       	and    eax,0xffff
c0017427:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001742a:	e9 19 05 00 00       	jmp    c0017948 <Vm::faultHandler(regs*)+0x6b8>
c001742f:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0017435:	0f 84 8f 04 00 00    	je     c00178ca <Vm::faultHandler(regs*)+0x63a>
c001743b:	0f 82 60 04 00 00    	jb     c00178a1 <Vm::faultHandler(regs*)+0x611>
c0017441:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0017447:	0f 84 94 04 00 00    	je     c00178e1 <Vm::faultHandler(regs*)+0x651>
c001744d:	e9 fa 04 00 00       	jmp    c001794c <Vm::faultHandler(regs*)+0x6bc>
c0017452:	81 fa ef 00 00 00    	cmp    edx,0xef
c0017458:	0f 84 d7 04 00 00    	je     c0017935 <Vm::faultHandler(regs*)+0x6a5>
c001745e:	77 2e                	ja     c001748e <Vm::faultHandler(regs*)+0x1fe>
c0017460:	81 fa ed 00 00 00    	cmp    edx,0xed
c0017466:	0f 84 a4 04 00 00    	je     c0017910 <Vm::faultHandler(regs*)+0x680>
c001746c:	81 fa ee 00 00 00    	cmp    edx,0xee
c0017472:	0f 85 d4 04 00 00    	jne    c001794c <Vm::faultHandler(regs*)+0x6bc>
c0017478:	50                   	push   eax
c0017479:	50                   	push   eax
c001747a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001747e:	50                   	push   eax
c001747f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017483:	50                   	push   eax
c0017484:	e8 17 f9 ff ff       	call   c0016da0 <Vm::outbv(unsigned short, unsigned char)>
c0017489:	e9 9f 04 00 00       	jmp    c001792d <Vm::faultHandler(regs*)+0x69d>
c001748e:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0017494:	0f 84 6d 01 00 00    	je     c0017607 <Vm::faultHandler(regs*)+0x377>
c001749a:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00174a0:	0f 84 6f 01 00 00    	je     c0017615 <Vm::faultHandler(regs*)+0x385>
c00174a6:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00174ac:	0f 85 9a 04 00 00    	jne    c001794c <Vm::faultHandler(regs*)+0x6bc>
c00174b2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174b5:	e9 76 fe ff ff       	jmp    c0017330 <Vm::faultHandler(regs*)+0xa0>
c00174ba:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174bd:	be 02 00 00 00       	mov    esi,0x2
c00174c2:	e9 69 fe ff ff       	jmp    c0017330 <Vm::faultHandler(regs*)+0xa0>
c00174c7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174ca:	be 03 00 00 00       	mov    esi,0x3
c00174cf:	e9 5c fe ff ff       	jmp    c0017330 <Vm::faultHandler(regs*)+0xa0>
c00174d4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174d7:	be 04 00 00 00       	mov    esi,0x4
c00174dc:	e9 4f fe ff ff       	jmp    c0017330 <Vm::faultHandler(regs*)+0xa0>
c00174e1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174e4:	be 05 00 00 00       	mov    esi,0x5
c00174e9:	e9 42 fe ff ff       	jmp    c0017330 <Vm::faultHandler(regs*)+0xa0>
c00174ee:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174f1:	bd 01 00 00 00       	mov    ebp,0x1
c00174f6:	e9 35 fe ff ff       	jmp    c0017330 <Vm::faultHandler(regs*)+0xa0>
c00174fb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174fe:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0017503:	e9 28 fe ff ff       	jmp    c0017330 <Vm::faultHandler(regs*)+0xa0>
c0017508:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001750b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001750f:	83 e5 01             	and    ebp,0x1
c0017512:	74 30                	je     c0017544 <Vm::faultHandler(regs*)+0x2b4>
c0017514:	83 e9 04             	sub    ecx,0x4
c0017517:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001751d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017523:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017526:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017529:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001752f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017533:	0f 84 0c 04 00 00    	je     c0017945 <Vm::faultHandler(regs*)+0x6b5>
c0017539:	80 ce 02             	or     dh,0x2
c001753c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001753f:	e9 01 04 00 00       	jmp    c0017945 <Vm::faultHandler(regs*)+0x6b5>
c0017544:	83 e9 02             	sub    ecx,0x2
c0017547:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001754d:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017550:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017554:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001755a:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001755e:	74 05                	je     c0017565 <Vm::faultHandler(regs*)+0x2d5>
c0017560:	80 ce 02             	or     dh,0x2
c0017563:	eb 03                	jmp    c0017568 <Vm::faultHandler(regs*)+0x2d8>
c0017565:	80 e6 fd             	and    dh,0xfd
c0017568:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001756c:	e9 d4 03 00 00       	jmp    c0017945 <Vm::faultHandler(regs*)+0x6b5>
c0017571:	83 e5 01             	and    ebp,0x1
c0017574:	74 2a                	je     c00175a0 <Vm::faultHandler(regs*)+0x310>
c0017576:	8b 10                	mov    edx,DWORD PTR [eax]
c0017578:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001757e:	81 ca 00 02 02 00    	or     edx,0x20200
c0017584:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017587:	8b 00                	mov    eax,DWORD PTR [eax]
c0017589:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001758f:	c1 e8 09             	shr    eax,0x9
c0017592:	83 e0 01             	and    eax,0x1
c0017595:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017598:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001759b:	83 c0 04             	add    eax,0x4
c001759e:	eb 24                	jmp    c00175c4 <Vm::faultHandler(regs*)+0x334>
c00175a0:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00175a3:	81 ca 00 02 02 00    	or     edx,0x20200
c00175a9:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00175ac:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00175af:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00175b5:	c1 e8 09             	shr    eax,0x9
c00175b8:	83 e0 01             	and    eax,0x1
c00175bb:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00175be:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00175c1:	83 c0 02             	add    eax,0x2
c00175c4:	25 ff ff 00 00       	and    eax,0xffff
c00175c9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00175cc:	e9 74 03 00 00       	jmp    c0017945 <Vm::faultHandler(regs*)+0x6b5>
c00175d1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00175d5:	3d ee 00 00 00       	cmp    eax,0xee
c00175da:	75 10                	jne    c00175ec <Vm::faultHandler(regs*)+0x35c>
c00175dc:	83 ec 0c             	sub    esp,0xc
c00175df:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00175e2:	e8 56 f8 ff ff       	call   c0016e3d <Vm::mainloop3(unsigned long)>
c00175e7:	e9 44 03 00 00       	jmp    c0017930 <Vm::faultHandler(regs*)+0x6a0>
c00175ec:	83 ec 0c             	sub    esp,0xc
c00175ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00175f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175f7:	51                   	push   ecx
c00175f8:	50                   	push   eax
c00175f9:	53                   	push   ebx
c00175fa:	e8 84 fb ff ff       	call   c0017183 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00175ff:	83 c4 20             	add    esp,0x20
c0017602:	e9 41 03 00 00       	jmp    c0017948 <Vm::faultHandler(regs*)+0x6b8>
c0017607:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001760c:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017610:	e9 30 03 00 00       	jmp    c0017945 <Vm::faultHandler(regs*)+0x6b5>
c0017615:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001761a:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001761e:	e9 22 03 00 00       	jmp    c0017945 <Vm::faultHandler(regs*)+0x6b5>
c0017623:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017626:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001762b:	74 2b                	je     c0017658 <Vm::faultHandler(regs*)+0x3c8>
c001762d:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017634:	76 22                	jbe    c0017658 <Vm::faultHandler(regs*)+0x3c8>
c0017636:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001763a:	50                   	push   eax
c001763b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001763f:	50                   	push   eax
c0017640:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017644:	50                   	push   eax
c0017645:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017649:	50                   	push   eax
c001764a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001764e:	50                   	push   eax
c001764f:	6a 6c                	push   0x6c
c0017651:	6a 6c                	push   0x6c
c0017653:	e9 bd 01 00 00       	jmp    c0017815 <Vm::faultHandler(regs*)+0x585>
c0017658:	83 ec 0c             	sub    esp,0xc
c001765b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001765f:	0f b7 f6             	movzx  esi,si
c0017662:	50                   	push   eax
c0017663:	e8 25 f7 ff ff       	call   c0016d8d <Vm::inbv(unsigned short)>
c0017668:	83 c4 0c             	add    esp,0xc
c001766b:	0f b6 c0             	movzx  eax,al
c001766e:	50                   	push   eax
c001766f:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017673:	50                   	push   eax
c0017674:	56                   	push   esi
c0017675:	e8 d6 fb ff ff       	call   c0017250 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001767a:	83 c4 10             	add    esp,0x10
c001767d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017680:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017684:	74 03                	je     c0017689 <Vm::faultHandler(regs*)+0x3f9>
c0017686:	48                   	dec    eax
c0017687:	eb 01                	jmp    c001768a <Vm::faultHandler(regs*)+0x3fa>
c0017689:	40                   	inc    eax
c001768a:	0f b7 c0             	movzx  eax,ax
c001768d:	e9 8b 00 00 00       	jmp    c001771d <Vm::faultHandler(regs*)+0x48d>
c0017692:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017695:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017698:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001769d:	74 29                	je     c00176c8 <Vm::faultHandler(regs*)+0x438>
c001769f:	3d ff ff 00 00       	cmp    eax,0xffff
c00176a4:	76 22                	jbe    c00176c8 <Vm::faultHandler(regs*)+0x438>
c00176a6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00176aa:	50                   	push   eax
c00176ab:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00176af:	50                   	push   eax
c00176b0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00176b4:	50                   	push   eax
c00176b5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00176b9:	50                   	push   eax
c00176ba:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00176be:	50                   	push   eax
c00176bf:	6a 6d                	push   0x6d
c00176c1:	6a 6d                	push   0x6d
c00176c3:	e9 4d 01 00 00       	jmp    c0017815 <Vm::faultHandler(regs*)+0x585>
c00176c8:	0f b7 c8             	movzx  ecx,ax
c00176cb:	0f b7 f6             	movzx  esi,si
c00176ce:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00176d1:	83 e5 01             	and    ebp,0x1
c00176d4:	74 20                	je     c00176f6 <Vm::faultHandler(regs*)+0x466>
c00176d6:	ed                   	in     eax,dx
c00176d7:	55                   	push   ebp
c00176d8:	50                   	push   eax
c00176d9:	51                   	push   ecx
c00176da:	56                   	push   esi
c00176db:	e8 9b fb ff ff       	call   c001727b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00176e0:	83 c4 10             	add    esp,0x10
c00176e3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00176e6:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00176ea:	74 05                	je     c00176f1 <Vm::faultHandler(regs*)+0x461>
c00176ec:	83 e8 04             	sub    eax,0x4
c00176ef:	eb 27                	jmp    c0017718 <Vm::faultHandler(regs*)+0x488>
c00176f1:	83 c0 04             	add    eax,0x4
c00176f4:	eb 22                	jmp    c0017718 <Vm::faultHandler(regs*)+0x488>
c00176f6:	66 ed                	in     ax,dx
c00176f8:	0f b7 c0             	movzx  eax,ax
c00176fb:	57                   	push   edi
c00176fc:	50                   	push   eax
c00176fd:	51                   	push   ecx
c00176fe:	56                   	push   esi
c00176ff:	e8 61 fb ff ff       	call   c0017265 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017704:	83 c4 10             	add    esp,0x10
c0017707:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001770a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001770e:	74 05                	je     c0017715 <Vm::faultHandler(regs*)+0x485>
c0017710:	83 e8 02             	sub    eax,0x2
c0017713:	eb 03                	jmp    c0017718 <Vm::faultHandler(regs*)+0x488>
c0017715:	83 c0 02             	add    eax,0x2
c0017718:	25 ff ff 00 00       	and    eax,0xffff
c001771d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017720:	e9 20 02 00 00       	jmp    c0017945 <Vm::faultHandler(regs*)+0x6b5>
c0017725:	8d 46 ff             	lea    eax,[esi-0x1]
c0017728:	0f b6 f0             	movzx  esi,al
c001772b:	83 fe 05             	cmp    esi,0x5
c001772e:	77 23                	ja     c0017753 <Vm::faultHandler(regs*)+0x4c3>
c0017730:	ff 24 b5 e0 2c 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd320]
c0017737:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001773c:	eb 15                	jmp    c0017753 <Vm::faultHandler(regs*)+0x4c3>
c001773e:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017742:	eb 0f                	jmp    c0017753 <Vm::faultHandler(regs*)+0x4c3>
c0017744:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017748:	eb 09                	jmp    c0017753 <Vm::faultHandler(regs*)+0x4c3>
c001774a:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001774e:	eb 03                	jmp    c0017753 <Vm::faultHandler(regs*)+0x4c3>
c0017750:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017753:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017756:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001775b:	74 29                	je     c0017786 <Vm::faultHandler(regs*)+0x4f6>
c001775d:	3d ff ff 00 00       	cmp    eax,0xffff
c0017762:	76 22                	jbe    c0017786 <Vm::faultHandler(regs*)+0x4f6>
c0017764:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017768:	50                   	push   eax
c0017769:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001776d:	50                   	push   eax
c001776e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017772:	50                   	push   eax
c0017773:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017777:	50                   	push   eax
c0017778:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001777c:	50                   	push   eax
c001777d:	6a 6e                	push   0x6e
c001777f:	6a 6e                	push   0x6e
c0017781:	e9 8f 00 00 00       	jmp    c0017815 <Vm::faultHandler(regs*)+0x585>
c0017786:	0f b7 c0             	movzx  eax,ax
c0017789:	52                   	push   edx
c001778a:	52                   	push   edx
c001778b:	50                   	push   eax
c001778c:	57                   	push   edi
c001778d:	e8 8a fa ff ff       	call   c001721c <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017792:	59                   	pop    ecx
c0017793:	0f b6 c0             	movzx  eax,al
c0017796:	5e                   	pop    esi
c0017797:	50                   	push   eax
c0017798:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001779c:	50                   	push   eax
c001779d:	e8 fe f5 ff ff       	call   c0016da0 <Vm::outbv(unsigned short, unsigned char)>
c00177a2:	83 c4 10             	add    esp,0x10
c00177a5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00177a8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00177ac:	74 03                	je     c00177b1 <Vm::faultHandler(regs*)+0x521>
c00177ae:	48                   	dec    eax
c00177af:	eb 01                	jmp    c00177b2 <Vm::faultHandler(regs*)+0x522>
c00177b1:	40                   	inc    eax
c00177b2:	0f b7 c0             	movzx  eax,ax
c00177b5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00177b8:	e9 88 01 00 00       	jmp    c0017945 <Vm::faultHandler(regs*)+0x6b5>
c00177bd:	8d 46 ff             	lea    eax,[esi-0x1]
c00177c0:	0f b6 f0             	movzx  esi,al
c00177c3:	83 fe 05             	cmp    esi,0x5
c00177c6:	77 1e                	ja     c00177e6 <Vm::faultHandler(regs*)+0x556>
c00177c8:	ff 24 b5 f8 2c 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd308]
c00177cf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00177d3:	eb 11                	jmp    c00177e6 <Vm::faultHandler(regs*)+0x556>
c00177d5:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00177d8:	eb 0c                	jmp    c00177e6 <Vm::faultHandler(regs*)+0x556>
c00177da:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00177dd:	eb 07                	jmp    c00177e6 <Vm::faultHandler(regs*)+0x556>
c00177df:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00177e2:	eb 02                	jmp    c00177e6 <Vm::faultHandler(regs*)+0x556>
c00177e4:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00177e6:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00177e9:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00177ee:	74 37                	je     c0017827 <Vm::faultHandler(regs*)+0x597>
c00177f0:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00177f6:	76 2f                	jbe    c0017827 <Vm::faultHandler(regs*)+0x597>
c00177f8:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00177fc:	50                   	push   eax
c00177fd:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017801:	50                   	push   eax
c0017802:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017806:	50                   	push   eax
c0017807:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001780b:	50                   	push   eax
c001780c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017810:	50                   	push   eax
c0017811:	6a 6f                	push   0x6f
c0017813:	6a 6f                	push   0x6f
c0017815:	68 84 2c 02 c0       	push   0xc0022c84
c001781a:	e8 2a 31 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001781f:	83 c4 20             	add    esp,0x20
c0017822:	e9 83 01 00 00       	jmp    c00179aa <Vm::faultHandler(regs*)+0x71a>
c0017827:	0f b7 d7             	movzx  edx,di
c001782a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001782d:	0f b7 c6             	movzx  eax,si
c0017830:	81 e1 00 04 00 00    	and    ecx,0x400
c0017836:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017839:	83 e5 01             	and    ebp,0x1
c001783c:	74 1d                	je     c001785b <Vm::faultHandler(regs*)+0x5cb>
c001783e:	55                   	push   ebp
c001783f:	55                   	push   ebp
c0017840:	50                   	push   eax
c0017841:	52                   	push   edx
c0017842:	e8 f8 f9 ff ff       	call   c001723f <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0017847:	83 c4 10             	add    esp,0x10
c001784a:	89 fa                	mov    edx,edi
c001784c:	ef                   	out    dx,eax
c001784d:	85 c9                	test   ecx,ecx
c001784f:	74 05                	je     c0017856 <Vm::faultHandler(regs*)+0x5c6>
c0017851:	83 ee 04             	sub    esi,0x4
c0017854:	eb 21                	jmp    c0017877 <Vm::faultHandler(regs*)+0x5e7>
c0017856:	83 c6 04             	add    esi,0x4
c0017859:	eb 1c                	jmp    c0017877 <Vm::faultHandler(regs*)+0x5e7>
c001785b:	55                   	push   ebp
c001785c:	55                   	push   ebp
c001785d:	50                   	push   eax
c001785e:	52                   	push   edx
c001785f:	e8 c9 f9 ff ff       	call   c001722d <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017864:	83 c4 10             	add    esp,0x10
c0017867:	89 fa                	mov    edx,edi
c0017869:	66 ef                	out    dx,ax
c001786b:	85 c9                	test   ecx,ecx
c001786d:	74 05                	je     c0017874 <Vm::faultHandler(regs*)+0x5e4>
c001786f:	83 ee 02             	sub    esi,0x2
c0017872:	eb 03                	jmp    c0017877 <Vm::faultHandler(regs*)+0x5e7>
c0017874:	83 c6 02             	add    esi,0x2
c0017877:	81 e6 ff ff 00 00    	and    esi,0xffff
c001787d:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017880:	e9 c0 00 00 00       	jmp    c0017945 <Vm::faultHandler(regs*)+0x6b5>
c0017885:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001788c:	83 ec 0c             	sub    esp,0xc
c001788f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017893:	50                   	push   eax
c0017894:	e8 f4 f4 ff ff       	call   c0016d8d <Vm::inbv(unsigned short)>
c0017899:	0f b6 c0             	movzx  eax,al
c001789c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001789f:	eb 3a                	jmp    c00178db <Vm::faultHandler(regs*)+0x64b>
c00178a1:	83 e5 01             	and    ebp,0x1
c00178a4:	74 07                	je     c00178ad <Vm::faultHandler(regs*)+0x61d>
c00178a6:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00178aa:	ed                   	in     eax,dx
c00178ab:	eb 14                	jmp    c00178c1 <Vm::faultHandler(regs*)+0x631>
c00178ad:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00178b0:	66 31 f6             	xor    si,si
c00178b3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00178b6:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00178ba:	66 ed                	in     ax,dx
c00178bc:	0f b7 c0             	movzx  eax,ax
c00178bf:	09 f0                	or     eax,esi
c00178c1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00178c4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00178c8:	eb 7e                	jmp    c0017948 <Vm::faultHandler(regs*)+0x6b8>
c00178ca:	52                   	push   edx
c00178cb:	52                   	push   edx
c00178cc:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00178d0:	50                   	push   eax
c00178d1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00178d5:	50                   	push   eax
c00178d6:	e8 c5 f4 ff ff       	call   c0016da0 <Vm::outbv(unsigned short, unsigned char)>
c00178db:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00178df:	eb 4f                	jmp    c0017930 <Vm::faultHandler(regs*)+0x6a0>
c00178e1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00178e4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00178e8:	83 e5 01             	and    ebp,0x1
c00178eb:	74 03                	je     c00178f0 <Vm::faultHandler(regs*)+0x660>
c00178ed:	ef                   	out    dx,eax
c00178ee:	eb d4                	jmp    c00178c4 <Vm::faultHandler(regs*)+0x634>
c00178f0:	66 ef                	out    dx,ax
c00178f2:	eb d0                	jmp    c00178c4 <Vm::faultHandler(regs*)+0x634>
c00178f4:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00178fb:	83 ec 0c             	sub    esp,0xc
c00178fe:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017902:	50                   	push   eax
c0017903:	e8 85 f4 ff ff       	call   c0016d8d <Vm::inbv(unsigned short)>
c0017908:	0f b6 c0             	movzx  eax,al
c001790b:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001790e:	eb 1d                	jmp    c001792d <Vm::faultHandler(regs*)+0x69d>
c0017910:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017913:	83 e5 01             	and    ebp,0x1
c0017916:	74 03                	je     c001791b <Vm::faultHandler(regs*)+0x68b>
c0017918:	ed                   	in     eax,dx
c0017919:	eb 0d                	jmp    c0017928 <Vm::faultHandler(regs*)+0x698>
c001791b:	66 ed                	in     ax,dx
c001791d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017920:	0f b7 c0             	movzx  eax,ax
c0017923:	66 31 d2             	xor    dx,dx
c0017926:	09 d0                	or     eax,edx
c0017928:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001792b:	eb 18                	jmp    c0017945 <Vm::faultHandler(regs*)+0x6b5>
c001792d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017930:	83 c4 10             	add    esp,0x10
c0017933:	eb 13                	jmp    c0017948 <Vm::faultHandler(regs*)+0x6b8>
c0017935:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017938:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001793b:	83 e5 01             	and    ebp,0x1
c001793e:	74 03                	je     c0017943 <Vm::faultHandler(regs*)+0x6b3>
c0017940:	ef                   	out    dx,eax
c0017941:	eb 02                	jmp    c0017945 <Vm::faultHandler(regs*)+0x6b5>
c0017943:	66 ef                	out    dx,ax
c0017945:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017948:	b0 01                	mov    al,0x1
c001794a:	eb 60                	jmp    c00179ac <Vm::faultHandler(regs*)+0x71c>
c001794c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017950:	50                   	push   eax
c0017951:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017955:	50                   	push   eax
c0017956:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001795a:	50                   	push   eax
c001795b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001795f:	50                   	push   eax
c0017960:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017964:	50                   	push   eax
c0017965:	52                   	push   edx
c0017966:	52                   	push   edx
c0017967:	68 b1 2c 02 c0       	push   0xc0022cb1
c001796c:	e8 d8 2f ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0017971:	83 c4 20             	add    esp,0x20
c0017974:	83 ec 0c             	sub    esp,0xc
c0017977:	6a 60                	push   0x60
c0017979:	e8 0f f4 ff ff       	call   c0016d8d <Vm::inbv(unsigned short)>
c001797e:	83 c4 10             	add    esp,0x10
c0017981:	0f b6 d0             	movzx  edx,al
c0017984:	83 fa 1c             	cmp    edx,0x1c
c0017987:	74 05                	je     c001798e <Vm::faultHandler(regs*)+0x6fe>
c0017989:	83 fa 5a             	cmp    edx,0x5a
c001798c:	75 e6                	jne    c0017974 <Vm::faultHandler(regs*)+0x6e4>
c001798e:	0f b6 c0             	movzx  eax,al
c0017991:	83 f8 1c             	cmp    eax,0x1c
c0017994:	74 05                	je     c001799b <Vm::faultHandler(regs*)+0x70b>
c0017996:	83 f8 5a             	cmp    eax,0x5a
c0017999:	75 0f                	jne    c00179aa <Vm::faultHandler(regs*)+0x71a>
c001799b:	83 ec 0c             	sub    esp,0xc
c001799e:	6a 60                	push   0x60
c00179a0:	e8 e8 f3 ff ff       	call   c0016d8d <Vm::inbv(unsigned short)>
c00179a5:	83 c4 10             	add    esp,0x10
c00179a8:	eb e4                	jmp    c001798e <Vm::faultHandler(regs*)+0x6fe>
c00179aa:	31 c0                	xor    eax,eax
c00179ac:	83 c4 2c             	add    esp,0x2c
c00179af:	5b                   	pop    ebx
c00179b0:	5e                   	pop    esi
c00179b1:	5f                   	pop    edi
c00179b2:	5d                   	pop    ebp
c00179b3:	c3                   	ret    

c00179b4 <noCopro(unsigned long)>:
c00179b4:	c3                   	ret    

c00179b5 <nmiHandler(regs*, void*)>:
c00179b5:	83 ec 0c             	sub    esp,0xc
c00179b8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00179bd:	83 ec 0c             	sub    esp,0xc
c00179c0:	50                   	push   eax
c00179c1:	e8 f4 f8 fe ff       	call   c00072ba <Computer::handleNMI()>
c00179c6:	83 c4 10             	add    esp,0x10
c00179c9:	90                   	nop
c00179ca:	83 c4 0c             	add    esp,0xc
c00179cd:	c3                   	ret    

c00179ce <doubleFault(regs*, void*)>:
c00179ce:	55                   	push   ebp
c00179cf:	89 e5                	mov    ebp,esp
c00179d1:	83 ec 08             	sub    esp,0x8
c00179d4:	83 ec 0c             	sub    esp,0xc
c00179d7:	68 10 2d 02 c0       	push   0xc0022d10
c00179dc:	e8 e2 9c ff ff       	call   c00116c3 <KePanic(char const*)>
c00179e1:	83 c4 10             	add    esp,0x10
c00179e4:	90                   	nop
c00179e5:	c9                   	leave  
c00179e6:	c3                   	ret    

c00179e7 <displayDebugInfo(regs*)>:
c00179e7:	83 ec 1c             	sub    esp,0x1c
c00179ea:	0f 20 c0             	mov    eax,cr0
c00179ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00179f1:	0f 20 d0             	mov    eax,cr2
c00179f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00179f8:	0f 20 d8             	mov    eax,cr3
c00179fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179ff:	0f 20 e0             	mov    eax,cr4
c0017a02:	89 04 24             	mov    DWORD PTR [esp],eax
c0017a05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a09:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017a0c:	83 ec 08             	sub    esp,0x8
c0017a0f:	50                   	push   eax
c0017a10:	68 2c 2d 02 c0       	push   0xc0022d2c
c0017a15:	e8 2f 2f ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0017a1a:	83 c4 10             	add    esp,0x10
c0017a1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a21:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017a24:	83 ec 08             	sub    esp,0x8
c0017a27:	50                   	push   eax
c0017a28:	68 1d 2d 02 c0       	push   0xc0022d1d
c0017a2d:	e8 17 2f ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0017a32:	83 c4 10             	add    esp,0x10
c0017a35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a39:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017a3c:	83 ec 08             	sub    esp,0x8
c0017a3f:	50                   	push   eax
c0017a40:	68 28 2d 02 c0       	push   0xc0022d28
c0017a45:	e8 ff 2e ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0017a4a:	83 c4 10             	add    esp,0x10
c0017a4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a51:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017a54:	83 ec 08             	sub    esp,0x8
c0017a57:	50                   	push   eax
c0017a58:	68 37 2d 02 c0       	push   0xc0022d37
c0017a5d:	e8 e7 2e ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0017a62:	83 c4 10             	add    esp,0x10
c0017a65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a69:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017a6c:	83 ec 08             	sub    esp,0x8
c0017a6f:	50                   	push   eax
c0017a70:	68 42 2d 02 c0       	push   0xc0022d42
c0017a75:	e8 cf 2e ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0017a7a:	83 c4 10             	add    esp,0x10
c0017a7d:	83 ec 08             	sub    esp,0x8
c0017a80:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a84:	68 4d 2d 02 c0       	push   0xc0022d4d
c0017a89:	e8 bb 2e ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0017a8e:	83 c4 10             	add    esp,0x10
c0017a91:	83 ec 08             	sub    esp,0x8
c0017a94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017a98:	68 58 2d 02 c0       	push   0xc0022d58
c0017a9d:	e8 a7 2e ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0017aa2:	83 c4 10             	add    esp,0x10
c0017aa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aa9:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017aac:	c1 e0 05             	shl    eax,0x5
c0017aaf:	8d 90 e0 40 02 c0    	lea    edx,[eax-0x3ffdbf20]
c0017ab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ab9:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017abc:	83 ec 04             	sub    esp,0x4
c0017abf:	52                   	push   edx
c0017ac0:	50                   	push   eax
c0017ac1:	68 63 2d 02 c0       	push   0xc0022d63
c0017ac6:	e8 7e 2e ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0017acb:	83 c4 10             	add    esp,0x10
c0017ace:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ad3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ad9:	83 ec 0c             	sub    esp,0xc
c0017adc:	50                   	push   eax
c0017add:	e8 7b 0c ff ff       	call   c000875d <setActiveTerminal(VgaText*)>
c0017ae2:	83 c4 10             	add    esp,0x10
c0017ae5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017aea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017af0:	83 ec 08             	sub    esp,0x8
c0017af3:	68 72 2d 02 c0       	push   0xc0022d72
c0017af8:	50                   	push   eax
c0017af9:	e8 ac 0f ff ff       	call   c0008aaa <VgaText::puts(char const*)>
c0017afe:	83 c4 10             	add    esp,0x10
c0017b01:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b06:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b0c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b10:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017b13:	83 ec 08             	sub    esp,0x8
c0017b16:	52                   	push   edx
c0017b17:	50                   	push   eax
c0017b18:	e8 47 0f ff ff       	call   c0008a64 <VgaText::putx(unsigned int)>
c0017b1d:	83 c4 10             	add    esp,0x10
c0017b20:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b25:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b2b:	83 ec 08             	sub    esp,0x8
c0017b2e:	68 80 2d 02 c0       	push   0xc0022d80
c0017b33:	50                   	push   eax
c0017b34:	e8 71 0f ff ff       	call   c0008aaa <VgaText::puts(char const*)>
c0017b39:	83 c4 10             	add    esp,0x10
c0017b3c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b41:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b47:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017b4c:	8b 12                	mov    edx,DWORD PTR [edx]
c0017b4e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017b51:	83 c2 0c             	add    edx,0xc
c0017b54:	83 ec 08             	sub    esp,0x8
c0017b57:	52                   	push   edx
c0017b58:	50                   	push   eax
c0017b59:	e8 4c 0f ff ff       	call   c0008aaa <VgaText::puts(char const*)>
c0017b5e:	83 c4 10             	add    esp,0x10
c0017b61:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b66:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b6c:	83 ec 08             	sub    esp,0x8
c0017b6f:	68 89 2d 02 c0       	push   0xc0022d89
c0017b74:	50                   	push   eax
c0017b75:	e8 30 0f ff ff       	call   c0008aaa <VgaText::puts(char const*)>
c0017b7a:	83 c4 10             	add    esp,0x10
c0017b7d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b82:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b88:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b8c:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017b8f:	83 ec 08             	sub    esp,0x8
c0017b92:	52                   	push   edx
c0017b93:	50                   	push   eax
c0017b94:	e8 cb 0e ff ff       	call   c0008a64 <VgaText::putx(unsigned int)>
c0017b99:	83 c4 10             	add    esp,0x10
c0017b9c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ba1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ba7:	83 ec 08             	sub    esp,0x8
c0017baa:	68 91 2d 02 c0       	push   0xc0022d91
c0017baf:	50                   	push   eax
c0017bb0:	e8 f5 0e ff ff       	call   c0008aaa <VgaText::puts(char const*)>
c0017bb5:	83 c4 10             	add    esp,0x10
c0017bb8:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bbd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bc3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bc7:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017bca:	83 ec 08             	sub    esp,0x8
c0017bcd:	52                   	push   edx
c0017bce:	50                   	push   eax
c0017bcf:	e8 90 0e ff ff       	call   c0008a64 <VgaText::putx(unsigned int)>
c0017bd4:	83 c4 10             	add    esp,0x10
c0017bd7:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bdc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017be2:	83 ec 08             	sub    esp,0x8
c0017be5:	68 99 2d 02 c0       	push   0xc0022d99
c0017bea:	50                   	push   eax
c0017beb:	e8 ba 0e ff ff       	call   c0008aaa <VgaText::puts(char const*)>
c0017bf0:	83 c4 10             	add    esp,0x10
c0017bf3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bf8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bfe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c02:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017c05:	83 ec 08             	sub    esp,0x8
c0017c08:	52                   	push   edx
c0017c09:	50                   	push   eax
c0017c0a:	e8 55 0e ff ff       	call   c0008a64 <VgaText::putx(unsigned int)>
c0017c0f:	83 c4 10             	add    esp,0x10
c0017c12:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c17:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c1d:	83 ec 08             	sub    esp,0x8
c0017c20:	68 a1 2d 02 c0       	push   0xc0022da1
c0017c25:	50                   	push   eax
c0017c26:	e8 7f 0e ff ff       	call   c0008aaa <VgaText::puts(char const*)>
c0017c2b:	83 c4 10             	add    esp,0x10
c0017c2e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c33:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c39:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c3d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017c40:	83 ec 08             	sub    esp,0x8
c0017c43:	52                   	push   edx
c0017c44:	50                   	push   eax
c0017c45:	e8 1a 0e ff ff       	call   c0008a64 <VgaText::putx(unsigned int)>
c0017c4a:	83 c4 10             	add    esp,0x10
c0017c4d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c52:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c58:	83 ec 08             	sub    esp,0x8
c0017c5b:	68 a9 2d 02 c0       	push   0xc0022da9
c0017c60:	50                   	push   eax
c0017c61:	e8 44 0e ff ff       	call   c0008aaa <VgaText::puts(char const*)>
c0017c66:	83 c4 10             	add    esp,0x10
c0017c69:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c6e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c74:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c78:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017c7b:	83 ec 08             	sub    esp,0x8
c0017c7e:	52                   	push   edx
c0017c7f:	50                   	push   eax
c0017c80:	e8 df 0d ff ff       	call   c0008a64 <VgaText::putx(unsigned int)>
c0017c85:	83 c4 10             	add    esp,0x10
c0017c88:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c8d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c93:	83 ec 08             	sub    esp,0x8
c0017c96:	68 b1 2d 02 c0       	push   0xc0022db1
c0017c9b:	50                   	push   eax
c0017c9c:	e8 09 0e ff ff       	call   c0008aaa <VgaText::puts(char const*)>
c0017ca1:	83 c4 10             	add    esp,0x10
c0017ca4:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ca9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017caf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017cb3:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017cb6:	83 ec 08             	sub    esp,0x8
c0017cb9:	52                   	push   edx
c0017cba:	50                   	push   eax
c0017cbb:	e8 a4 0d ff ff       	call   c0008a64 <VgaText::putx(unsigned int)>
c0017cc0:	83 c4 10             	add    esp,0x10
c0017cc3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cc8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cce:	83 ec 08             	sub    esp,0x8
c0017cd1:	68 b9 2d 02 c0       	push   0xc0022db9
c0017cd6:	50                   	push   eax
c0017cd7:	e8 ce 0d ff ff       	call   c0008aaa <VgaText::puts(char const*)>
c0017cdc:	83 c4 10             	add    esp,0x10
c0017cdf:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ce4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cea:	83 ec 08             	sub    esp,0x8
c0017ced:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017cf1:	50                   	push   eax
c0017cf2:	e8 6d 0d ff ff       	call   c0008a64 <VgaText::putx(unsigned int)>
c0017cf7:	83 c4 10             	add    esp,0x10
c0017cfa:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cff:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d05:	83 ec 08             	sub    esp,0x8
c0017d08:	68 c2 2d 02 c0       	push   0xc0022dc2
c0017d0d:	50                   	push   eax
c0017d0e:	e8 97 0d ff ff       	call   c0008aaa <VgaText::puts(char const*)>
c0017d13:	83 c4 10             	add    esp,0x10
c0017d16:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017d1b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d21:	83 ec 08             	sub    esp,0x8
c0017d24:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d28:	50                   	push   eax
c0017d29:	e8 36 0d ff ff       	call   c0008a64 <VgaText::putx(unsigned int)>
c0017d2e:	83 c4 10             	add    esp,0x10
c0017d31:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017d36:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d3c:	83 ec 08             	sub    esp,0x8
c0017d3f:	68 ca 2d 02 c0       	push   0xc0022dca
c0017d44:	50                   	push   eax
c0017d45:	e8 60 0d ff ff       	call   c0008aaa <VgaText::puts(char const*)>
c0017d4a:	83 c4 10             	add    esp,0x10
c0017d4d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017d52:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d58:	83 ec 08             	sub    esp,0x8
c0017d5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d5f:	50                   	push   eax
c0017d60:	e8 ff 0c ff ff       	call   c0008a64 <VgaText::putx(unsigned int)>
c0017d65:	83 c4 10             	add    esp,0x10
c0017d68:	fa                   	cli    
c0017d69:	f4                   	hlt    
c0017d6a:	eb fe                	jmp    c0017d6a <displayDebugInfo(regs*)+0x383>

c0017d6c <HalSystemIdle()>:
c0017d6c:	56                   	push   esi
c0017d6d:	53                   	push   ebx
c0017d6e:	83 ec 14             	sub    esp,0x14
c0017d71:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d76:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017d7c:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017d82:	83 e0 04             	and    eax,0x4
c0017d85:	0f b6 c0             	movzx  eax,al
c0017d88:	85 c0                	test   eax,eax
c0017d8a:	0f 95 c0             	setne  al
c0017d8d:	0f b6 c0             	movzx  eax,al
c0017d90:	85 c0                	test   eax,eax
c0017d92:	74 4c                	je     c0017de0 <HalSystemIdle()+0x74>
c0017d94:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d99:	83 ec 08             	sub    esp,0x8
c0017d9c:	68 e1 00 00 00       	push   0xe1
c0017da1:	50                   	push   eax
c0017da2:	e8 1d f3 fe ff       	call   c00070c4 <Computer::rdmsr(unsigned int)>
c0017da7:	83 c4 10             	add    esp,0x10
c0017daa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017dae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017db2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017db7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017dbb:	83 e2 02             	and    edx,0x2
c0017dbe:	89 d3                	mov    ebx,edx
c0017dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017dc4:	83 e2 00             	and    edx,0x0
c0017dc7:	89 d6                	mov    esi,edx
c0017dc9:	56                   	push   esi
c0017dca:	53                   	push   ebx
c0017dcb:	68 e1 00 00 00       	push   0xe1
c0017dd0:	50                   	push   eax
c0017dd1:	e8 1a f3 fe ff       	call   c00070f0 <Computer::wrmsr(unsigned int, unsigned long long)>
c0017dd6:	83 c4 10             	add    esp,0x10
c0017dd9:	e8 b6 83 fe ff       	call   c0000194 <doTPAUSE>
c0017dde:	eb 01                	jmp    c0017de1 <HalSystemIdle()+0x75>
c0017de0:	f4                   	hlt    
c0017de1:	90                   	nop
c0017de2:	83 c4 14             	add    esp,0x14
c0017de5:	5b                   	pop    ebx
c0017de6:	5e                   	pop    esi
c0017de7:	c3                   	ret    

c0017de8 <displayProgramFault(char const*)>:
c0017de8:	83 ec 0c             	sub    esp,0xc
c0017deb:	83 ec 0c             	sub    esp,0xc
c0017dee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017df2:	e8 52 2b ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0017df7:	83 c4 10             	add    esp,0x10
c0017dfa:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017dff:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e01:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017e04:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e0a:	85 c0                	test   eax,eax
c0017e0c:	74 21                	je     c0017e2f <displayProgramFault(char const*)+0x47>
c0017e0e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017e13:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e15:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017e18:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e1e:	6a 04                	push   0x4
c0017e20:	6a 0f                	push   0xf
c0017e22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e26:	50                   	push   eax
c0017e27:	e8 f0 0c ff ff       	call   c0008b1c <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017e2c:	83 c4 10             	add    esp,0x10
c0017e2f:	90                   	nop
c0017e30:	83 c4 0c             	add    esp,0xc
c0017e33:	c3                   	ret    

c0017e34 <gpFault(regs*, void*)>:
c0017e34:	83 ec 1c             	sub    esp,0x1c
c0017e37:	c7 05 74 c7 02 c0 90 72 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc0017290
c0017e41:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017e46:	85 c0                	test   eax,eax
c0017e48:	74 1e                	je     c0017e68 <gpFault(regs*, void*)+0x34>
c0017e4a:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017e4f:	83 ec 0c             	sub    esp,0xc
c0017e52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e56:	ff d0                	call   eax
c0017e58:	83 c4 10             	add    esp,0x10
c0017e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017e5f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017e64:	85 c0                	test   eax,eax
c0017e66:	75 2e                	jne    c0017e96 <gpFault(regs*, void*)+0x62>
c0017e68:	83 ec 0c             	sub    esp,0xc
c0017e6b:	68 d2 2d 02 c0       	push   0xc0022dd2
c0017e70:	e8 73 ff ff ff       	call   c0017de8 <displayProgramFault(char const*)>
c0017e75:	83 c4 10             	add    esp,0x10
c0017e78:	83 ec 0c             	sub    esp,0xc
c0017e7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e7f:	e8 63 fb ff ff       	call   c00179e7 <displayDebugInfo(regs*)>
c0017e84:	83 c4 10             	add    esp,0x10
c0017e87:	83 ec 0c             	sub    esp,0xc
c0017e8a:	6a 00                	push   0x0
c0017e8c:	e8 a3 ed ff ff       	call   c0016c34 <Thr::terminateFromIRQ(int)>
c0017e91:	83 c4 10             	add    esp,0x10
c0017e94:	eb 01                	jmp    c0017e97 <gpFault(regs*, void*)+0x63>
c0017e96:	90                   	nop
c0017e97:	83 c4 1c             	add    esp,0x1c
c0017e9a:	c3                   	ret    

c0017e9b <pgFault(regs*, void*)>:
c0017e9b:	83 ec 1c             	sub    esp,0x1c
c0017e9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ea2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017ea5:	0f 20 d0             	mov    eax,cr2
c0017ea8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017eac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017eb0:	83 ec 04             	sub    esp,0x4
c0017eb3:	52                   	push   edx
c0017eb4:	50                   	push   eax
c0017eb5:	68 b0 2e 02 c0       	push   0xc0022eb0
c0017eba:	e8 8a 2a ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0017ebf:	83 c4 10             	add    esp,0x10
c0017ec2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017ec7:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ec9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017ecc:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017ed2:	0f 20 d2             	mov    edx,cr2
c0017ed5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017ed9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017edd:	83 ec 08             	sub    esp,0x8
c0017ee0:	52                   	push   edx
c0017ee1:	50                   	push   eax
c0017ee2:	e8 ad 24 ff ff       	call   c000a394 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017ee7:	83 c4 10             	add    esp,0x10
c0017eea:	0f b6 c0             	movzx  eax,al
c0017eed:	85 c0                	test   eax,eax
c0017eef:	75 2e                	jne    c0017f1f <pgFault(regs*, void*)+0x84>
c0017ef1:	83 ec 0c             	sub    esp,0xc
c0017ef4:	68 eb 2d 02 c0       	push   0xc0022deb
c0017ef9:	e8 ea fe ff ff       	call   c0017de8 <displayProgramFault(char const*)>
c0017efe:	83 c4 10             	add    esp,0x10
c0017f01:	83 ec 0c             	sub    esp,0xc
c0017f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f08:	e8 da fa ff ff       	call   c00179e7 <displayDebugInfo(regs*)>
c0017f0d:	83 c4 10             	add    esp,0x10
c0017f10:	83 ec 0c             	sub    esp,0xc
c0017f13:	6a 00                	push   0x0
c0017f15:	e8 1a ed ff ff       	call   c0016c34 <Thr::terminateFromIRQ(int)>
c0017f1a:	83 c4 10             	add    esp,0x10
c0017f1d:	eb 01                	jmp    c0017f20 <pgFault(regs*, void*)+0x85>
c0017f1f:	90                   	nop
c0017f20:	83 c4 1c             	add    esp,0x1c
c0017f23:	c3                   	ret    

c0017f24 <otherISRHandler(regs*, void*)>:
c0017f24:	83 ec 0c             	sub    esp,0xc
c0017f27:	83 ec 0c             	sub    esp,0xc
c0017f2a:	68 d8 2e 02 c0       	push   0xc0022ed8
c0017f2f:	e8 b4 fe ff ff       	call   c0017de8 <displayProgramFault(char const*)>
c0017f34:	83 c4 10             	add    esp,0x10
c0017f37:	83 ec 0c             	sub    esp,0xc
c0017f3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f3e:	e8 a4 fa ff ff       	call   c00179e7 <displayDebugInfo(regs*)>
c0017f43:	83 c4 10             	add    esp,0x10
c0017f46:	83 ec 0c             	sub    esp,0xc
c0017f49:	6a 00                	push   0x0
c0017f4b:	e8 e4 ec ff ff       	call   c0016c34 <Thr::terminateFromIRQ(int)>
c0017f50:	83 c4 10             	add    esp,0x10
c0017f53:	90                   	nop
c0017f54:	83 c4 0c             	add    esp,0xc
c0017f57:	c3                   	ret    

c0017f58 <opcodeFault(regs*, void*)>:
c0017f58:	55                   	push   ebp
c0017f59:	89 e5                	mov    ebp,esp
c0017f5b:	83 ec 08             	sub    esp,0x8
c0017f5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f61:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f64:	83 ec 08             	sub    esp,0x8
c0017f67:	50                   	push   eax
c0017f68:	68 f6 2d 02 c0       	push   0xc0022df6
c0017f6d:	e8 d7 29 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0017f72:	83 c4 10             	add    esp,0x10
c0017f75:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017f7a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017f80:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017f86:	0f b6 c0             	movzx  eax,al
c0017f89:	85 c0                	test   eax,eax
c0017f8b:	74 21                	je     c0017fae <opcodeFault(regs*, void*)+0x56>
c0017f8d:	83 ec 0c             	sub    esp,0xc
c0017f90:	68 00 2f 02 c0       	push   0xc0022f00
c0017f95:	e8 af 29 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0017f9a:	83 c4 10             	add    esp,0x10
c0017f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017fa0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017fa3:	8d 50 19             	lea    edx,[eax+0x19]
c0017fa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017fa9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017fac:	eb 2b                	jmp    c0017fd9 <opcodeFault(regs*, void*)+0x81>
c0017fae:	83 ec 0c             	sub    esp,0xc
c0017fb1:	68 04 2e 02 c0       	push   0xc0022e04
c0017fb6:	e8 2d fe ff ff       	call   c0017de8 <displayProgramFault(char const*)>
c0017fbb:	83 c4 10             	add    esp,0x10
c0017fbe:	83 ec 0c             	sub    esp,0xc
c0017fc1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017fc4:	e8 1e fa ff ff       	call   c00179e7 <displayDebugInfo(regs*)>
c0017fc9:	83 c4 10             	add    esp,0x10
c0017fcc:	83 ec 0c             	sub    esp,0xc
c0017fcf:	6a 00                	push   0x0
c0017fd1:	e8 5e ec ff ff       	call   c0016c34 <Thr::terminateFromIRQ(int)>
c0017fd6:	83 c4 10             	add    esp,0x10
c0017fd9:	c9                   	leave  
c0017fda:	c3                   	ret    

c0017fdb <i386SaveCoprocessor(void*)>:
c0017fdb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017fdf:	83 c0 3f             	add    eax,0x3f
c0017fe2:	83 e0 c0             	and    eax,0xffffffc0
c0017fe5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017fe9:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017fef <i386LoadCoprocessor(void*)>:
c0017fef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ff3:	83 c0 3f             	add    eax,0x3f
c0017ff6:	83 e0 c0             	and    eax,0xffffffc0
c0017ff9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ffd:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0018003 <x87EmulHandler(regs*, void*)>:
c0018003:	53                   	push   ebx
c0018004:	83 ec 08             	sub    esp,0x8
c0018007:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001800c:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0018010:	74 10                	je     c0018022 <x87EmulHandler(regs*, void*)+0x1f>
c0018012:	83 ec 0c             	sub    esp,0xc
c0018015:	68 11 2e 02 c0       	push   0xc0022e11
c001801a:	e8 a4 96 ff ff       	call   c00116c3 <KePanic(char const*)>
c001801f:	83 c4 10             	add    esp,0x10
c0018022:	0f 20 c0             	mov    eax,cr0
c0018025:	a8 08                	test   al,0x8
c0018027:	74 59                	je     c0018082 <x87EmulHandler(regs*, void*)+0x7f>
c0018029:	0f 06                	clts   
c001802b:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0018030:	85 c0                	test   eax,eax
c0018032:	74 0e                	je     c0018042 <x87EmulHandler(regs*, void*)+0x3f>
c0018034:	83 ec 0c             	sub    esp,0xc
c0018037:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001803a:	e8 9c ff ff ff       	call   c0017fdb <i386SaveCoprocessor(void*)>
c001803f:	83 c4 10             	add    esp,0x10
c0018042:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018048:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001804c:	75 12                	jne    c0018060 <x87EmulHandler(regs*, void*)+0x5d>
c001804e:	83 ec 0c             	sub    esp,0xc
c0018051:	68 40 02 00 00       	push   0x240
c0018056:	e8 5f fa fe ff       	call   c0007aba <malloc>
c001805b:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001805e:	eb 10                	jmp    c0018070 <x87EmulHandler(regs*, void*)+0x6d>
c0018060:	83 ec 0c             	sub    esp,0xc
c0018063:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0018068:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001806b:	e8 7f ff ff ff       	call   c0017fef <i386LoadCoprocessor(void*)>
c0018070:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018075:	83 c4 10             	add    esp,0x10
c0018078:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c001807d:	83 c4 08             	add    esp,0x8
c0018080:	5b                   	pop    ebx
c0018081:	c3                   	ret    
c0018082:	83 ec 0c             	sub    esp,0xc
c0018085:	68 25 2e 02 c0       	push   0xc0022e25
c001808a:	e8 ba 28 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001808f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018097:	83 c4 18             	add    esp,0x18
c001809a:	5b                   	pop    ebx
c001809b:	e9 94 eb ff ff       	jmp    c0016c34 <Thr::terminateFromIRQ(int)>

c00180a0 <HalInitialiseCoprocessor()>:
c00180a0:	83 ec 10             	sub    esp,0x10
c00180a3:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c00180ad:	6a 00                	push   0x0
c00180af:	68 03 80 01 c0       	push   0xc0018003
c00180b4:	6a 07                	push   0x7
c00180b6:	e8 5b 4e ff ff       	call   c000cf16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00180bb:	e8 50 70 00 00       	call   c001f110 <avxDetect>
c00180c0:	83 c4 10             	add    esp,0x10
c00180c3:	85 c0                	test   eax,eax
c00180c5:	74 1c                	je     c00180e3 <HalInitialiseCoprocessor()+0x43>
c00180c7:	c7 05 70 c7 02 c0 3a f1 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f13a
c00180d1:	c7 05 6c c7 02 c0 4b f1 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f14b
c00180db:	83 c4 0c             	add    esp,0xc
c00180de:	e9 79 70 00 00       	jmp    c001f15c <avxInit>
c00180e3:	e8 b8 73 00 00       	call   c001f4a0 <absolutelyNoChanceInHell>
c00180e8:	85 c0                	test   eax,eax
c00180ea:	74 1c                	je     c0018108 <HalInitialiseCoprocessor()+0x68>
c00180ec:	c7 05 70 c7 02 c0 b8 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f4b8
c00180f6:	c7 05 6c c7 02 c0 c0 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f4c0
c0018100:	83 c4 0c             	add    esp,0xc
c0018103:	e9 c0 73 00 00       	jmp    c001f4c8 <sseInit>
c0018108:	e8 d9 73 00 00       	call   c001f4e6 <x87Detect>
c001810d:	85 c0                	test   eax,eax
c001810f:	74 1c                	je     c001812d <HalInitialiseCoprocessor()+0x8d>
c0018111:	c7 05 70 c7 02 c0 01 f5 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f501
c001811b:	c7 05 6c c7 02 c0 08 f5 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f508
c0018125:	83 c4 0c             	add    esp,0xc
c0018128:	e9 e2 73 00 00       	jmp    c001f50f <x87Init>
c001812d:	c7 05 70 c7 02 c0 b4 79 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc00179b4
c0018137:	c7 05 6c c7 02 c0 b4 79 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc00179b4
c0018141:	0f 20 c0             	mov    eax,cr0
c0018144:	83 c8 04             	or     eax,0x4
c0018147:	0f 22 c0             	mov    cr0,eax
c001814a:	83 c4 0c             	add    esp,0xc
c001814d:	c3                   	ret    

c001814e <HalPanic(char const*)>:
c001814e:	53                   	push   ebx
c001814f:	83 ec 10             	sub    esp,0x10
c0018152:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018156:	fa                   	cli    
c0018157:	53                   	push   ebx
c0018158:	68 3b 2e 02 c0       	push   0xc0022e3b
c001815d:	e8 e7 27 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0018162:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c0018167:	83 c4 10             	add    esp,0x10
c001816a:	85 c0                	test   eax,eax
c001816c:	74 09                	je     c0018177 <HalPanic(char const*)+0x29>
c001816e:	83 ec 0c             	sub    esp,0xc
c0018171:	53                   	push   ebx
c0018172:	ff d0                	call   eax
c0018174:	83 c4 10             	add    esp,0x10
c0018177:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c001817c:	85 c0                	test   eax,eax
c001817e:	0f 84 dc 00 00 00    	je     c0018260 <HalPanic(char const*)+0x112>
c0018184:	52                   	push   edx
c0018185:	6a 01                	push   0x1
c0018187:	6a 0f                	push   0xf
c0018189:	50                   	push   eax
c001818a:	e8 29 04 ff ff       	call   c00085b8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001818f:	59                   	pop    ecx
c0018190:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018196:	e8 0d 06 ff ff       	call   c00087a8 <VgaText::clearScreen()>
c001819b:	58                   	pop    eax
c001819c:	5a                   	pop    edx
c001819d:	68 7c 0f 02 c0       	push   0xc0020f7c
c00181a2:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181a8:	e8 43 04 ff ff       	call   c00085f0 <VgaText::setTitle(char*)>
c00181ad:	83 c4 0c             	add    esp,0xc
c00181b0:	6a 01                	push   0x1
c00181b2:	6a 0f                	push   0xf
c00181b4:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181ba:	e8 f9 03 ff ff       	call   c00085b8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00181bf:	59                   	pop    ecx
c00181c0:	58                   	pop    eax
c00181c1:	68 54 2e 02 c0       	push   0xc0022e54
c00181c6:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181cc:	e8 d9 08 ff ff       	call   c0008aaa <VgaText::puts(char const*)>
c00181d1:	83 c4 0c             	add    esp,0xc
c00181d4:	6a 0f                	push   0xf
c00181d6:	6a 01                	push   0x1
c00181d8:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181de:	e8 d5 03 ff ff       	call   c00085b8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00181e3:	58                   	pop    eax
c00181e4:	5a                   	pop    edx
c00181e5:	68 5d 2e 02 c0       	push   0xc0022e5d
c00181ea:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181f0:	e8 b5 08 ff ff       	call   c0008aaa <VgaText::puts(char const*)>
c00181f5:	83 c4 0c             	add    esp,0xc
c00181f8:	6a 01                	push   0x1
c00181fa:	6a 0f                	push   0xf
c00181fc:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018202:	e8 b1 03 ff ff       	call   c00085b8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018207:	59                   	pop    ecx
c0018208:	58                   	pop    eax
c0018209:	68 a1 2e 02 c0       	push   0xc0022ea1
c001820e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018214:	e8 91 08 ff ff       	call   c0008aaa <VgaText::puts(char const*)>
c0018219:	58                   	pop    eax
c001821a:	5a                   	pop    edx
c001821b:	68 6a 2e 02 c0       	push   0xc0022e6a
c0018220:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018226:	e8 7f 08 ff ff       	call   c0008aaa <VgaText::puts(char const*)>
c001822b:	59                   	pop    ecx
c001822c:	58                   	pop    eax
c001822d:	68 a4 2e 02 c0       	push   0xc0022ea4
c0018232:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018238:	e8 6d 08 ff ff       	call   c0008aaa <VgaText::puts(char const*)>
c001823d:	58                   	pop    eax
c001823e:	5a                   	pop    edx
c001823f:	53                   	push   ebx
c0018240:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018246:	e8 5f 08 ff ff       	call   c0008aaa <VgaText::puts(char const*)>
c001824b:	59                   	pop    ecx
c001824c:	5b                   	pop    ebx
c001824d:	68 a1 2e 02 c0       	push   0xc0022ea1
c0018252:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018258:	e8 4d 08 ff ff       	call   c0008aaa <VgaText::puts(char const*)>
c001825d:	83 c4 10             	add    esp,0x10
c0018260:	eb fe                	jmp    c0018260 <HalPanic(char const*)+0x112>

c0018262 <HalQueryPerformanceCounter()>:
c0018262:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018267:	31 d2                	xor    edx,edx
c0018269:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001826f:	31 c0                	xor    eax,eax
c0018271:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0018278:	74 02                	je     c001827c <HalQueryPerformanceCounter()+0x1a>
c001827a:	0f 31                	rdtsc  
c001827c:	c3                   	ret    

c001827d <HalInitialise()>:
c001827d:	53                   	push   ebx
c001827e:	83 ec 08             	sub    esp,0x8
c0018281:	e8 c0 4e ff ff       	call   c000d146 <setupINTS()>
c0018286:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c001828d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018292:	75 0f                	jne    c00182a3 <HalInitialise()+0x26>
c0018294:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001829a:	83 e2 fe             	and    edx,0xfffffffe
c001829d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00182a3:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00182a9:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c00182b0:	83 e2 fe             	and    edx,0xfffffffe
c00182b3:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00182b9:	e8 9e 02 00 00       	call   c001855c <picOpen()>
c00182be:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c00182c5:	74 0a                	je     c00182d1 <HalInitialise()+0x54>
c00182c7:	e8 e0 01 00 00       	call   c00184ac <picDisable()>
c00182cc:	e8 ad 67 00 00       	call   c001ea7e <apicOpen()>
c00182d1:	bb 0f 00 00 00       	mov    ebx,0xf
c00182d6:	50                   	push   eax
c00182d7:	6a 00                	push   0x0
c00182d9:	68 24 7f 01 c0       	push   0xc0017f24
c00182de:	6a 00                	push   0x0
c00182e0:	e8 31 4c ff ff       	call   c000cf16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182e5:	83 c4 0c             	add    esp,0xc
c00182e8:	6a 00                	push   0x0
c00182ea:	68 24 7f 01 c0       	push   0xc0017f24
c00182ef:	6a 01                	push   0x1
c00182f1:	e8 20 4c ff ff       	call   c000cf16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182f6:	83 c4 0c             	add    esp,0xc
c00182f9:	6a 00                	push   0x0
c00182fb:	68 b5 79 01 c0       	push   0xc00179b5
c0018300:	6a 02                	push   0x2
c0018302:	e8 0f 4c ff ff       	call   c000cf16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018307:	83 c4 0c             	add    esp,0xc
c001830a:	6a 00                	push   0x0
c001830c:	68 24 7f 01 c0       	push   0xc0017f24
c0018311:	6a 03                	push   0x3
c0018313:	e8 fe 4b ff ff       	call   c000cf16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018318:	83 c4 0c             	add    esp,0xc
c001831b:	6a 00                	push   0x0
c001831d:	68 24 7f 01 c0       	push   0xc0017f24
c0018322:	6a 04                	push   0x4
c0018324:	e8 ed 4b ff ff       	call   c000cf16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018329:	83 c4 0c             	add    esp,0xc
c001832c:	6a 00                	push   0x0
c001832e:	68 24 7f 01 c0       	push   0xc0017f24
c0018333:	6a 05                	push   0x5
c0018335:	e8 dc 4b ff ff       	call   c000cf16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001833a:	83 c4 0c             	add    esp,0xc
c001833d:	6a 00                	push   0x0
c001833f:	68 58 7f 01 c0       	push   0xc0017f58
c0018344:	6a 06                	push   0x6
c0018346:	e8 cb 4b ff ff       	call   c000cf16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001834b:	83 c4 0c             	add    esp,0xc
c001834e:	6a 00                	push   0x0
c0018350:	68 ce 79 01 c0       	push   0xc00179ce
c0018355:	6a 08                	push   0x8
c0018357:	e8 ba 4b ff ff       	call   c000cf16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001835c:	83 c4 0c             	add    esp,0xc
c001835f:	6a 00                	push   0x0
c0018361:	68 24 7f 01 c0       	push   0xc0017f24
c0018366:	6a 09                	push   0x9
c0018368:	e8 a9 4b ff ff       	call   c000cf16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001836d:	83 c4 0c             	add    esp,0xc
c0018370:	6a 00                	push   0x0
c0018372:	68 24 7f 01 c0       	push   0xc0017f24
c0018377:	6a 0a                	push   0xa
c0018379:	e8 98 4b ff ff       	call   c000cf16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001837e:	83 c4 0c             	add    esp,0xc
c0018381:	6a 00                	push   0x0
c0018383:	68 24 7f 01 c0       	push   0xc0017f24
c0018388:	6a 0b                	push   0xb
c001838a:	e8 87 4b ff ff       	call   c000cf16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001838f:	83 c4 0c             	add    esp,0xc
c0018392:	6a 00                	push   0x0
c0018394:	68 34 7e 01 c0       	push   0xc0017e34
c0018399:	6a 0d                	push   0xd
c001839b:	e8 76 4b ff ff       	call   c000cf16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00183a0:	83 c4 0c             	add    esp,0xc
c00183a3:	6a 00                	push   0x0
c00183a5:	68 9b 7e 01 c0       	push   0xc0017e9b
c00183aa:	6a 0e                	push   0xe
c00183ac:	e8 65 4b ff ff       	call   c000cf16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00183b1:	83 c4 10             	add    esp,0x10
c00183b4:	50                   	push   eax
c00183b5:	6a 00                	push   0x0
c00183b7:	68 24 7f 01 c0       	push   0xc0017f24
c00183bc:	53                   	push   ebx
c00183bd:	43                   	inc    ebx
c00183be:	e8 53 4b ff ff       	call   c000cf16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00183c3:	83 c4 10             	add    esp,0x10
c00183c6:	83 fb 1e             	cmp    ebx,0x1e
c00183c9:	75 e9                	jne    c00183b4 <HalInitialise()+0x137>
c00183cb:	50                   	push   eax
c00183cc:	6a 00                	push   0x0
c00183ce:	68 5c 2b 01 c0       	push   0xc0012b5c
c00183d3:	6a 60                	push   0x60
c00183d5:	e8 3c 4b ff ff       	call   c000cf16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00183da:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00183df:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00183e9:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00183f0:	e8 c5 f6 fe ff       	call   c0007aba <malloc>
c00183f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00183f8:	89 c3                	mov    ebx,eax
c00183fa:	e8 3b 09 00 00       	call   c0018d3a <RTC::RTC()>
c00183ff:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0018409:	5a                   	pop    edx
c001840a:	59                   	pop    ecx
c001840b:	53                   	push   ebx
c001840c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018412:	e8 b3 45 ff ff       	call   c000c9ca <Device::addChild(Device*)>
c0018417:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018419:	6a 00                	push   0x0
c001841b:	6a 00                	push   0x0
c001841d:	6a 00                	push   0x0
c001841f:	53                   	push   ebx
c0018420:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018423:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018428:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001842e:	83 c4 28             	add    esp,0x28
c0018431:	5b                   	pop    ebx
c0018432:	c3                   	ret    

c0018433 <HalMakeBeep(int)>:
c0018433:	53                   	push   ebx
c0018434:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018438:	85 db                	test   ebx,ebx
c001843a:	75 07                	jne    c0018443 <HalMakeBeep(int)+0x10>
c001843c:	e4 61                	in     al,0x61
c001843e:	83 e0 fc             	and    eax,0xfffffffc
c0018441:	eb 26                	jmp    c0018469 <HalMakeBeep(int)+0x36>
c0018443:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0018448:	99                   	cdq    
c0018449:	f7 fb                	idiv   ebx
c001844b:	89 c1                	mov    ecx,eax
c001844d:	b0 b6                	mov    al,0xb6
c001844f:	e6 43                	out    0x43,al
c0018451:	88 c8                	mov    al,cl
c0018453:	e6 42                	out    0x42,al
c0018455:	89 c8                	mov    eax,ecx
c0018457:	c1 e8 08             	shr    eax,0x8
c001845a:	e6 42                	out    0x42,al
c001845c:	e4 61                	in     al,0x61
c001845e:	89 c2                	mov    edx,eax
c0018460:	83 ca 03             	or     edx,0x3
c0018463:	38 d0                	cmp    al,dl
c0018465:	74 04                	je     c001846b <HalMakeBeep(int)+0x38>
c0018467:	88 d0                	mov    al,dl
c0018469:	e6 61                	out    0x61,al
c001846b:	5b                   	pop    ebx
c001846c:	c3                   	ret    

c001846d <HalGetRand()>:
c001846d:	31 c0                	xor    eax,eax
c001846f:	c3                   	ret    

c0018470 <HalEndOfInterrupt(int)>:
c0018470:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c0018477:	74 23                	je     c001849c <HalEndOfInterrupt(int)+0x2c>
c0018479:	83 ec 14             	sub    esp,0x14
c001847c:	6a 1b                	push   0x1b
c001847e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018484:	e8 3b ec fe ff       	call   c00070c4 <Computer::rdmsr(unsigned int)>
c0018489:	25 00 f0 ff ff       	and    eax,0xfffff000
c001848e:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0018498:	83 c4 1c             	add    esp,0x1c
c001849b:	c3                   	ret    
c001849c:	e9 3f 02 00 00       	jmp    c00186e0 <picEOI(int)>

c00184a1 <HalRestart()>:
c00184a1:	c3                   	ret    

c00184a2 <HalShutdown()>:
c00184a2:	c3                   	ret    

c00184a3 <HalSleep()>:
c00184a3:	c3                   	ret    

c00184a4 <picIoWait()>:
c00184a4:	eb 00                	jmp    c00184a6 <picIoWait()+0x2>
c00184a6:	eb 00                	jmp    c00184a8 <picIoWait()+0x4>
c00184a8:	90                   	nop
c00184a9:	c3                   	ret    
c00184aa:	66 90                	xchg   ax,ax

c00184ac <picDisable()>:
c00184ac:	83 ec 10             	sub    esp,0x10
c00184af:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00184b6:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00184bb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00184bf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00184c4:	ee                   	out    dx,al
c00184c5:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00184cc:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00184d1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00184d5:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00184da:	ee                   	out    dx,al
c00184db:	90                   	nop
c00184dc:	83 c4 10             	add    esp,0x10
c00184df:	c3                   	ret    

c00184e0 <picGetIRQReg(int)>:
c00184e0:	83 ec 10             	sub    esp,0x10
c00184e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00184e7:	0f b6 c0             	movzx  eax,al
c00184ea:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00184f1:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00184f5:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00184f9:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00184fe:	ee                   	out    dx,al
c00184ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018503:	0f b6 c0             	movzx  eax,al
c0018506:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001850d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018511:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018515:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001851a:	ee                   	out    dx,al
c001851b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018522:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0018527:	89 c2                	mov    edx,eax
c0018529:	ec                   	in     al,dx
c001852a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001852e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018532:	0f b6 c0             	movzx  eax,al
c0018535:	c1 e0 08             	shl    eax,0x8
c0018538:	89 c1                	mov    ecx,eax
c001853a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018541:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0018546:	89 c2                	mov    edx,eax
c0018548:	ec                   	in     al,dx
c0018549:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001854d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018551:	0f b6 c0             	movzx  eax,al
c0018554:	09 c8                	or     eax,ecx
c0018556:	83 c4 10             	add    esp,0x10
c0018559:	c3                   	ret    
c001855a:	66 90                	xchg   ax,ax

c001855c <picOpen()>:
c001855c:	83 ec 50             	sub    esp,0x50
c001855f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0018566:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001856b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001856f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018573:	ee                   	out    dx,al
c0018574:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001857b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018580:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018584:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018588:	ee                   	out    dx,al
c0018589:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018591:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018599:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00185a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185a4:	89 c2                	mov    edx,eax
c00185a6:	ec                   	in     al,dx
c00185a7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00185ab:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00185af:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00185b3:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00185ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00185be:	89 c2                	mov    edx,eax
c00185c0:	ec                   	in     al,dx
c00185c1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00185c5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00185c9:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00185cd:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00185d4:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00185d9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00185dd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00185e1:	ee                   	out    dx,al
c00185e2:	e8 bd fe ff ff       	call   c00184a4 <picIoWait()>
c00185e7:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00185ee:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00185f3:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00185f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00185fb:	ee                   	out    dx,al
c00185fc:	e8 a3 fe ff ff       	call   c00184a4 <picIoWait()>
c0018601:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018605:	0f b6 c0             	movzx  eax,al
c0018608:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001860f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018613:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0018617:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001861b:	ee                   	out    dx,al
c001861c:	e8 83 fe ff ff       	call   c00184a4 <picIoWait()>
c0018621:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018625:	0f b6 c0             	movzx  eax,al
c0018628:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001862f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018633:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0018637:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001863b:	ee                   	out    dx,al
c001863c:	e8 63 fe ff ff       	call   c00184a4 <picIoWait()>
c0018641:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018648:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001864d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018651:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018655:	ee                   	out    dx,al
c0018656:	e8 49 fe ff ff       	call   c00184a4 <picIoWait()>
c001865b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0018662:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0018667:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001866b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001866f:	ee                   	out    dx,al
c0018670:	e8 2f fe ff ff       	call   c00184a4 <picIoWait()>
c0018675:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001867c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018681:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018685:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018689:	ee                   	out    dx,al
c001868a:	e8 15 fe ff ff       	call   c00184a4 <picIoWait()>
c001868f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0018696:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001869b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001869f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00186a3:	ee                   	out    dx,al
c00186a4:	e8 fb fd ff ff       	call   c00184a4 <picIoWait()>
c00186a9:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00186ae:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00186b5:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00186b9:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00186bd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00186c1:	ee                   	out    dx,al
c00186c2:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00186c7:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00186ce:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00186d2:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00186d6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00186da:	ee                   	out    dx,al
c00186db:	90                   	nop
c00186dc:	83 c4 50             	add    esp,0x50
c00186df:	c3                   	ret    

c00186e0 <picEOI(int)>:
c00186e0:	83 ec 10             	sub    esp,0x10
c00186e3:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00186e8:	75 1e                	jne    c0018708 <picEOI(int)+0x28>
c00186ea:	6a 0b                	push   0xb
c00186ec:	e8 ef fd ff ff       	call   c00184e0 <picGetIRQReg(int)>
c00186f1:	83 c4 04             	add    esp,0x4
c00186f4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00186f9:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00186fe:	25 80 00 00 00       	and    eax,0x80
c0018703:	74 73                	je     c0018778 <picEOI(int)+0x98>
c0018705:	8d 76 00             	lea    esi,[esi+0x0]
c0018708:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001870d:	75 31                	jne    c0018740 <picEOI(int)+0x60>
c001870f:	6a 0b                	push   0xb
c0018711:	e8 ca fd ff ff       	call   c00184e0 <picGetIRQReg(int)>
c0018716:	83 c4 04             	add    esp,0x4
c0018719:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001871e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018722:	98                   	cwde   
c0018723:	85 c0                	test   eax,eax
c0018725:	78 19                	js     c0018740 <picEOI(int)+0x60>
c0018727:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001872e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018733:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018737:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001873c:	ee                   	out    dx,al
c001873d:	eb 3d                	jmp    c001877c <picEOI(int)+0x9c>
c001873f:	90                   	nop
c0018740:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018745:	7e 19                	jle    c0018760 <picEOI(int)+0x80>
c0018747:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001874e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018753:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018757:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001875c:	ee                   	out    dx,al
c001875d:	8d 76 00             	lea    esi,[esi+0x0]
c0018760:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018767:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001876c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018770:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018775:	ee                   	out    dx,al
c0018776:	eb 04                	jmp    c001877c <picEOI(int)+0x9c>
c0018778:	90                   	nop
c0018779:	8d 76 00             	lea    esi,[esi+0x0]
c001877c:	83 c4 10             	add    esp,0x10
c001877f:	c3                   	ret    

c0018780 <RTC::open(int, int, void*)>:
c0018780:	31 c0                	xor    eax,eax
c0018782:	c3                   	ret    
c0018783:	90                   	nop

c0018784 <RTC::close(int, int, void*)>:
c0018784:	31 c0                	xor    eax,eax
c0018786:	c3                   	ret    
c0018787:	90                   	nop

c0018788 <RTC::timeInSecondsUTC()>:
c0018788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001878c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018792:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018798:	c3                   	ret    
c0018799:	90                   	nop

c001879a <RTC::timeInDatetimeUTC()>:
c001879a:	53                   	push   ebx
c001879b:	83 ec 14             	sub    esp,0x14
c001879e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00187a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187a6:	8b 10                	mov    edx,DWORD PTR [eax]
c00187a8:	50                   	push   eax
c00187a9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00187ac:	83 c4 0c             	add    esp,0xc
c00187af:	52                   	push   edx
c00187b0:	50                   	push   eax
c00187b1:	53                   	push   ebx
c00187b2:	e8 87 3f ff ff       	call   c000c73e <secondsToDatetime(unsigned long long)>
c00187b7:	89 d8                	mov    eax,ebx
c00187b9:	83 c4 14             	add    esp,0x14
c00187bc:	5b                   	pop    ebx
c00187bd:	c2 04 00             	ret    0x4

c00187c0 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00187c0:	56                   	push   esi
c00187c1:	53                   	push   ebx
c00187c2:	83 ec 14             	sub    esp,0x14
c00187c5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00187c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00187cb:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00187ce:	8d 44 24 08          	lea    eax,[esp+0x8]
c00187d2:	52                   	push   edx
c00187d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187db:	50                   	push   eax
c00187dc:	e8 5d 3f ff ff       	call   c000c73e <secondsToDatetime(unsigned long long)>
c00187e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187e5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00187e9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00187ed:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00187f1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00187f5:	89 f0                	mov    eax,esi
c00187f7:	83 c4 20             	add    esp,0x20
c00187fa:	5b                   	pop    ebx
c00187fb:	5e                   	pop    esi
c00187fc:	ff e0                	jmp    eax

c00187fe <RTC::~RTC()>:
c00187fe:	83 ec 0c             	sub    esp,0xc
c0018801:	ba 40 2f 02 c0       	mov    edx,0xc0022f40
c0018806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001880a:	89 10                	mov    DWORD PTR [eax],edx
c001880c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018810:	83 ec 0c             	sub    esp,0xc
c0018813:	50                   	push   eax
c0018814:	e8 b7 3c ff ff       	call   c000c4d0 <Clock::~Clock()>
c0018819:	83 c4 10             	add    esp,0x10
c001881c:	90                   	nop
c001881d:	83 c4 0c             	add    esp,0xc
c0018820:	c3                   	ret    
c0018821:	90                   	nop

c0018822 <RTC::~RTC()>:
c0018822:	83 ec 0c             	sub    esp,0xc
c0018825:	83 ec 0c             	sub    esp,0xc
c0018828:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001882c:	e8 cd ff ff ff       	call   c00187fe <RTC::~RTC()>
c0018831:	83 c4 10             	add    esp,0x10
c0018834:	83 ec 08             	sub    esp,0x8
c0018837:	68 60 01 00 00       	push   0x160
c001883c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018840:	e8 d7 1f ff ff       	call   c000a81c <operator delete(void*, unsigned long)>
c0018845:	83 c4 10             	add    esp,0x10
c0018848:	83 c4 0c             	add    esp,0xc
c001884b:	c3                   	ret    

c001884c <RTC::get_update_in_progress_flag()>:
c001884c:	83 ec 14             	sub    esp,0x14
c001884f:	6a 0a                	push   0xa
c0018851:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018857:	e8 20 e9 fe ff       	call   c000717c <Computer::readCMOS(unsigned char)>
c001885c:	83 c4 1c             	add    esp,0x1c
c001885f:	0f b6 c0             	movzx  eax,al
c0018862:	c1 e8 07             	shr    eax,0x7
c0018865:	c3                   	ret    

c0018866 <RTC::completeRTCRefresh()>:
c0018866:	55                   	push   ebp
c0018867:	57                   	push   edi
c0018868:	56                   	push   esi
c0018869:	53                   	push   ebx
c001886a:	83 ec 3c             	sub    esp,0x3c
c001886d:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018873:	83 ec 0c             	sub    esp,0xc
c0018876:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001887a:	e8 cd ff ff ff       	call   c001884c <RTC::get_update_in_progress_flag()>
c001887f:	83 c4 10             	add    esp,0x10
c0018882:	84 c0                	test   al,al
c0018884:	74 0e                	je     c0018894 <RTC::completeRTCRefresh()+0x2e>
c0018886:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001888c:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c0018892:	73 df                	jae    c0018873 <RTC::completeRTCRefresh()+0xd>
c0018894:	51                   	push   ecx
c0018895:	51                   	push   ecx
c0018896:	6a 00                	push   0x0
c0018898:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001889e:	e8 d9 e8 fe ff       	call   c000717c <Computer::readCMOS(unsigned char)>
c00188a3:	5b                   	pop    ebx
c00188a4:	89 c7                	mov    edi,eax
c00188a6:	5e                   	pop    esi
c00188a7:	6a 02                	push   0x2
c00188a9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188af:	e8 c8 e8 fe ff       	call   c000717c <Computer::readCMOS(unsigned char)>
c00188b4:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00188b8:	5d                   	pop    ebp
c00188b9:	58                   	pop    eax
c00188ba:	6a 04                	push   0x4
c00188bc:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188c2:	e8 b5 e8 fe ff       	call   c000717c <Computer::readCMOS(unsigned char)>
c00188c7:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00188cb:	58                   	pop    eax
c00188cc:	5a                   	pop    edx
c00188cd:	6a 07                	push   0x7
c00188cf:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188d5:	e8 a2 e8 fe ff       	call   c000717c <Computer::readCMOS(unsigned char)>
c00188da:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00188de:	59                   	pop    ecx
c00188df:	5b                   	pop    ebx
c00188e0:	6a 08                	push   0x8
c00188e2:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188e8:	e8 8f e8 fe ff       	call   c000717c <Computer::readCMOS(unsigned char)>
c00188ed:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00188f1:	5e                   	pop    esi
c00188f2:	5d                   	pop    ebp
c00188f3:	6a 09                	push   0x9
c00188f5:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188fb:	e8 7c e8 fe ff       	call   c000717c <Computer::readCMOS(unsigned char)>
c0018900:	0f b6 c0             	movzx  eax,al
c0018903:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0018907:	83 c4 10             	add    esp,0x10
c001890a:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018910:	83 ec 0c             	sub    esp,0xc
c0018913:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018917:	e8 30 ff ff ff       	call   c001884c <RTC::get_update_in_progress_flag()>
c001891c:	83 c4 10             	add    esp,0x10
c001891f:	84 c0                	test   al,al
c0018921:	74 0e                	je     c0018931 <RTC::completeRTCRefresh()+0xcb>
c0018923:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018929:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c001892f:	73 df                	jae    c0018910 <RTC::completeRTCRefresh()+0xaa>
c0018931:	51                   	push   ecx
c0018932:	51                   	push   ecx
c0018933:	6a 00                	push   0x0
c0018935:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001893b:	e8 3c e8 fe ff       	call   c000717c <Computer::readCMOS(unsigned char)>
c0018940:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018944:	5b                   	pop    ebx
c0018945:	5e                   	pop    esi
c0018946:	6a 02                	push   0x2
c0018948:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001894e:	e8 29 e8 fe ff       	call   c000717c <Computer::readCMOS(unsigned char)>
c0018953:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018957:	5d                   	pop    ebp
c0018958:	58                   	pop    eax
c0018959:	6a 04                	push   0x4
c001895b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018961:	e8 16 e8 fe ff       	call   c000717c <Computer::readCMOS(unsigned char)>
c0018966:	88 c3                	mov    bl,al
c0018968:	58                   	pop    eax
c0018969:	5a                   	pop    edx
c001896a:	6a 07                	push   0x7
c001896c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018972:	e8 05 e8 fe ff       	call   c000717c <Computer::readCMOS(unsigned char)>
c0018977:	59                   	pop    ecx
c0018978:	89 c6                	mov    esi,eax
c001897a:	5d                   	pop    ebp
c001897b:	6a 08                	push   0x8
c001897d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018983:	e8 f4 e7 fe ff       	call   c000717c <Computer::readCMOS(unsigned char)>
c0018988:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001898c:	58                   	pop    eax
c001898d:	5a                   	pop    edx
c001898e:	6a 09                	push   0x9
c0018990:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018996:	e8 e1 e7 fe ff       	call   c000717c <Computer::readCMOS(unsigned char)>
c001899b:	89 f9                	mov    ecx,edi
c001899d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00189a1:	0f b6 e8             	movzx  ebp,al
c00189a4:	83 c4 10             	add    esp,0x10
c00189a7:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00189ab:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189b0:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c00189b5:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00189b9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00189bd:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00189c1:	0f 94 c0             	sete   al
c00189c4:	0f b6 fb             	movzx  edi,bl
c00189c7:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c00189cb:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00189d0:	0f 94 c2             	sete   dl
c00189d3:	21 d0                	and    eax,edx
c00189d5:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00189d9:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00189dd:	0f 94 c2             	sete   dl
c00189e0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00189e4:	21 c2                	and    edx,eax
c00189e6:	89 f0                	mov    eax,esi
c00189e8:	0f b6 c0             	movzx  eax,al
c00189eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00189ef:	89 f0                	mov    eax,esi
c00189f1:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00189f5:	0f 94 c0             	sete   al
c00189f8:	21 d0                	and    eax,edx
c00189fa:	31 d2                	xor    edx,edx
c00189fc:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018a00:	0f 94 c2             	sete   dl
c0018a03:	85 c2                	test   edx,eax
c0018a05:	75 27                	jne    c0018a2e <RTC::completeRTCRefresh()+0x1c8>
c0018a07:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018a0b:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0018a0f:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018a13:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0018a17:	89 f0                	mov    eax,esi
c0018a19:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018a1d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018a21:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018a25:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018a29:	e9 dc fe ff ff       	jmp    c001890a <RTC::completeRTCRefresh()+0xa4>
c0018a2e:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018a32:	75 d3                	jne    c0018a07 <RTC::completeRTCRefresh()+0x1a1>
c0018a34:	52                   	push   edx
c0018a35:	52                   	push   edx
c0018a36:	6a 0b                	push   0xb
c0018a38:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a3e:	e8 39 e7 fe ff       	call   c000717c <Computer::readCMOS(unsigned char)>
c0018a43:	83 c4 10             	add    esp,0x10
c0018a46:	a8 04                	test   al,0x4
c0018a48:	75 7a                	jne    c0018ac4 <RTC::completeRTCRefresh()+0x25e>
c0018a4a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018a4e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a52:	83 e1 0f             	and    ecx,0xf
c0018a55:	c1 ea 04             	shr    edx,0x4
c0018a58:	c1 ef 04             	shr    edi,0x4
c0018a5b:	6b d2 0a             	imul   edx,edx,0xa
c0018a5e:	83 e6 0f             	and    esi,0xf
c0018a61:	01 d1                	add    ecx,edx
c0018a63:	c1 ed 04             	shr    ebp,0x4
c0018a66:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0018a6a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018a6e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a72:	c1 ea 04             	shr    edx,0x4
c0018a75:	83 e1 0f             	and    ecx,0xf
c0018a78:	6b d2 0a             	imul   edx,edx,0xa
c0018a7b:	6b ed 0a             	imul   ebp,ebp,0xa
c0018a7e:	01 d1                	add    ecx,edx
c0018a80:	89 fa                	mov    edx,edi
c0018a82:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018a86:	83 e2 07             	and    edx,0x7
c0018a89:	89 d9                	mov    ecx,ebx
c0018a8b:	6b d2 0a             	imul   edx,edx,0xa
c0018a8e:	83 e1 0f             	and    ecx,0xf
c0018a91:	83 e3 80             	and    ebx,0xffffff80
c0018a94:	01 d1                	add    ecx,edx
c0018a96:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a9a:	09 cb                	or     ebx,ecx
c0018a9c:	c1 ea 04             	shr    edx,0x4
c0018a9f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018aa3:	6b d2 0a             	imul   edx,edx,0xa
c0018aa6:	83 e1 0f             	and    ecx,0xf
c0018aa9:	01 d6                	add    esi,edx
c0018aab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018aaf:	c1 ea 04             	shr    edx,0x4
c0018ab2:	6b d2 0a             	imul   edx,edx,0xa
c0018ab5:	01 d1                	add    ecx,edx
c0018ab7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018abb:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018abf:	83 e2 0f             	and    edx,0xf
c0018ac2:	01 d5                	add    ebp,edx
c0018ac4:	a8 02                	test   al,0x2
c0018ac6:	75 15                	jne    c0018add <RTC::completeRTCRefresh()+0x277>
c0018ac8:	f6 c3 80             	test   bl,0x80
c0018acb:	74 10                	je     c0018add <RTC::completeRTCRefresh()+0x277>
c0018acd:	83 e3 7f             	and    ebx,0x7f
c0018ad0:	b9 18 00 00 00       	mov    ecx,0x18
c0018ad5:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018ad8:	99                   	cdq    
c0018ad9:	f7 f9                	idiv   ecx
c0018adb:	88 d3                	mov    bl,dl
c0018add:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018ae3:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018ae9:	77 06                	ja     c0018af1 <RTC::completeRTCRefresh()+0x28b>
c0018aeb:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018af1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018af6:	31 c9                	xor    ecx,ecx
c0018af8:	c1 e0 10             	shl    eax,0x10
c0018afb:	89 cd                	mov    ebp,ecx
c0018afd:	c1 e7 10             	shl    edi,0x10
c0018b00:	31 d2                	xor    edx,edx
c0018b02:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018b08:	09 c5                	or     ebp,eax
c0018b0a:	89 f0                	mov    eax,esi
c0018b0c:	89 e9                	mov    ecx,ebp
c0018b0e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018b12:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018b16:	88 c2                	mov    dl,al
c0018b18:	88 d9                	mov    cl,bl
c0018b1a:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0018b1e:	0f b7 c2             	movzx  eax,dx
c0018b21:	09 f8                	or     eax,edi
c0018b23:	89 c2                	mov    edx,eax
c0018b25:	50                   	push   eax
c0018b26:	50                   	push   eax
c0018b27:	51                   	push   ecx
c0018b28:	52                   	push   edx
c0018b29:	e8 91 3a ff ff       	call   c000c5bf <datetimeToSeconds(datetime_t)>
c0018b2e:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018b32:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018b38:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018b3e:	83 c4 4c             	add    esp,0x4c
c0018b41:	5b                   	pop    ebx
c0018b42:	5e                   	pop    esi
c0018b43:	5f                   	pop    edi
c0018b44:	5d                   	pop    ebp
c0018b45:	c3                   	ret    

c0018b46 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018b46:	55                   	push   ebp
c0018b47:	57                   	push   edi
c0018b48:	56                   	push   esi
c0018b49:	53                   	push   ebx
c0018b4a:	83 ec 30             	sub    esp,0x30
c0018b4d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018b51:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018b55:	6a 00                	push   0x0
c0018b57:	6a 00                	push   0x0
c0018b59:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b5f:	e8 32 e7 fe ff       	call   c0007296 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b64:	83 c4 0c             	add    esp,0xc
c0018b67:	6a 00                	push   0x0
c0018b69:	6a 02                	push   0x2
c0018b6b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b71:	e8 20 e7 fe ff       	call   c0007296 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b76:	31 d2                	xor    edx,edx
c0018b78:	89 f9                	mov    ecx,edi
c0018b7a:	89 f8                	mov    eax,edi
c0018b7c:	c1 e9 10             	shr    ecx,0x10
c0018b7f:	0f b6 c4             	movzx  eax,ah
c0018b82:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018b86:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018b8a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018b8e:	b9 64 00 00 00       	mov    ecx,0x64
c0018b93:	89 f0                	mov    eax,esi
c0018b95:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018b99:	89 f0                	mov    eax,esi
c0018b9b:	0f b6 c4             	movzx  eax,ah
c0018b9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018ba2:	89 f0                	mov    eax,esi
c0018ba4:	c1 e8 10             	shr    eax,0x10
c0018ba7:	f7 f1                	div    ecx
c0018ba9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018bad:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018bb1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018bb5:	59                   	pop    ecx
c0018bb6:	5b                   	pop    ebx
c0018bb7:	89 fb                	mov    ebx,edi
c0018bb9:	6a 0b                	push   0xb
c0018bbb:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bc1:	e8 b6 e5 fe ff       	call   c000717c <Computer::readCMOS(unsigned char)>
c0018bc6:	83 c4 10             	add    esp,0x10
c0018bc9:	89 c5                	mov    ebp,eax
c0018bcb:	a8 04                	test   al,0x4
c0018bcd:	75 6e                	jne    c0018c3d <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018bcf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018bd3:	31 d2                	xor    edx,edx
c0018bd5:	0f b6 c1             	movzx  eax,cl
c0018bd8:	b9 0a 00 00 00       	mov    ecx,0xa
c0018bdd:	f7 f1                	div    ecx
c0018bdf:	c1 e0 04             	shl    eax,0x4
c0018be2:	09 d0                	or     eax,edx
c0018be4:	31 d2                	xor    edx,edx
c0018be6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018bea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018bef:	f7 f1                	div    ecx
c0018bf1:	c1 e0 04             	shl    eax,0x4
c0018bf4:	09 d0                	or     eax,edx
c0018bf6:	31 d2                	xor    edx,edx
c0018bf8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018bfc:	0f b6 c3             	movzx  eax,bl
c0018bff:	f7 f1                	div    ecx
c0018c01:	c1 e0 04             	shl    eax,0x4
c0018c04:	09 d0                	or     eax,edx
c0018c06:	31 d2                	xor    edx,edx
c0018c08:	89 c3                	mov    ebx,eax
c0018c0a:	89 f0                	mov    eax,esi
c0018c0c:	0f b6 c0             	movzx  eax,al
c0018c0f:	f7 f1                	div    ecx
c0018c11:	c1 e0 04             	shl    eax,0x4
c0018c14:	09 d0                	or     eax,edx
c0018c16:	31 d2                	xor    edx,edx
c0018c18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018c1c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018c21:	f7 f1                	div    ecx
c0018c23:	c1 e0 04             	shl    eax,0x4
c0018c26:	09 d0                	or     eax,edx
c0018c28:	31 d2                	xor    edx,edx
c0018c2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018c2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c32:	f7 f1                	div    ecx
c0018c34:	c1 e0 04             	shl    eax,0x4
c0018c37:	09 d0                	or     eax,edx
c0018c39:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018c3d:	83 e5 02             	and    ebp,0x2
c0018c40:	75 1e                	jne    c0018c60 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018c42:	0f b6 c3             	movzx  eax,bl
c0018c45:	83 f8 0b             	cmp    eax,0xb
c0018c48:	76 10                	jbe    c0018c5a <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018c4a:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018c4d:	88 d3                	mov    bl,dl
c0018c4f:	84 d2                	test   dl,dl
c0018c51:	75 02                	jne    c0018c55 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018c53:	b3 0c                	mov    bl,0xc
c0018c55:	83 cb 80             	or     ebx,0xffffff80
c0018c58:	eb 06                	jmp    c0018c60 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018c5a:	85 c0                	test   eax,eax
c0018c5c:	75 02                	jne    c0018c60 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018c5e:	b3 0c                	mov    bl,0xc
c0018c60:	0f b6 db             	movzx  ebx,bl
c0018c63:	50                   	push   eax
c0018c64:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018c69:	52                   	push   edx
c0018c6a:	6a 00                	push   0x0
c0018c6c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c72:	e8 1f e6 fe ff       	call   c0007296 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c77:	83 c4 0c             	add    esp,0xc
c0018c7a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018c7f:	50                   	push   eax
c0018c80:	6a 02                	push   0x2
c0018c82:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c88:	e8 09 e6 fe ff       	call   c0007296 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c8d:	83 c4 0c             	add    esp,0xc
c0018c90:	53                   	push   ebx
c0018c91:	6a 04                	push   0x4
c0018c93:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c99:	e8 f8 e5 fe ff       	call   c0007296 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c9e:	83 c4 0c             	add    esp,0xc
c0018ca1:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018ca6:	52                   	push   edx
c0018ca7:	6a 07                	push   0x7
c0018ca9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018caf:	e8 e2 e5 fe ff       	call   c0007296 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018cb4:	83 c4 0c             	add    esp,0xc
c0018cb7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018cbc:	50                   	push   eax
c0018cbd:	6a 08                	push   0x8
c0018cbf:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018cc5:	e8 cc e5 fe ff       	call   c0007296 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018cca:	83 c4 0c             	add    esp,0xc
c0018ccd:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018cd2:	55                   	push   ebp
c0018cd3:	6a 09                	push   0x9
c0018cd5:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018cdb:	e8 b6 e5 fe ff       	call   c0007296 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ce0:	5a                   	pop    edx
c0018ce1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018ce5:	e8 7c fb ff ff       	call   c0018866 <RTC::completeRTCRefresh()>
c0018cea:	83 c4 3c             	add    esp,0x3c
c0018ced:	b0 01                	mov    al,0x1
c0018cef:	5b                   	pop    ebx
c0018cf0:	5e                   	pop    esi
c0018cf1:	5f                   	pop    edi
c0018cf2:	5d                   	pop    ebp
c0018cf3:	c3                   	ret    

c0018cf4 <rtcIRQHandler(regs*, void*)>:
c0018cf4:	53                   	push   ebx
c0018cf5:	83 ec 10             	sub    esp,0x10
c0018cf8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018cfc:	6a 0c                	push   0xc
c0018cfe:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018d04:	e8 73 e4 fe ff       	call   c000717c <Computer::readCMOS(unsigned char)>
c0018d09:	83 c4 10             	add    esp,0x10
c0018d0c:	a8 80                	test   al,0x80
c0018d0e:	74 24                	je     c0018d34 <rtcIRQHandler(regs*, void*)+0x40>
c0018d10:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018d17:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018d1e:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018d25:	75 0d                	jne    c0018d34 <rtcIRQHandler(regs*, void*)+0x40>
c0018d27:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018d2b:	83 c4 08             	add    esp,0x8
c0018d2e:	5b                   	pop    ebx
c0018d2f:	e9 32 fb ff ff       	jmp    c0018866 <RTC::completeRTCRefresh()>
c0018d34:	83 c4 08             	add    esp,0x8
c0018d37:	5b                   	pop    ebx
c0018d38:	c3                   	ret    
c0018d39:	90                   	nop

c0018d3a <RTC::RTC()>:
c0018d3a:	83 ec 1c             	sub    esp,0x1c
c0018d3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d41:	83 ec 08             	sub    esp,0x8
c0018d44:	68 23 2f 02 c0       	push   0xc0022f23
c0018d49:	50                   	push   eax
c0018d4a:	e8 4b 37 ff ff       	call   c000c49a <Clock::Clock(char const*)>
c0018d4f:	83 c4 10             	add    esp,0x10
c0018d52:	ba 40 2f 02 c0       	mov    edx,0xc0022f40
c0018d57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d5b:	89 10                	mov    DWORD PTR [eax],edx
c0018d5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d61:	83 ec 0c             	sub    esp,0xc
c0018d64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018d68:	6a 01                	push   0x1
c0018d6a:	68 f4 8c 01 c0       	push   0xc0018cf4
c0018d6f:	6a 08                	push   0x8
c0018d71:	50                   	push   eax
c0018d72:	e8 ff 3b ff ff       	call   c000c976 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018d77:	83 c4 20             	add    esp,0x20
c0018d7a:	89 c2                	mov    edx,eax
c0018d7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d80:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018d86:	fa                   	cli    
c0018d87:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d8c:	83 c0 01             	add    eax,0x1
c0018d8f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018d94:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018d99:	83 ec 08             	sub    esp,0x8
c0018d9c:	6a 0b                	push   0xb
c0018d9e:	50                   	push   eax
c0018d9f:	e8 d8 e3 fe ff       	call   c000717c <Computer::readCMOS(unsigned char)>
c0018da4:	83 c4 10             	add    esp,0x10
c0018da7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018dab:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018db0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018db4:	83 ca 10             	or     edx,0x10
c0018db7:	0f b6 d2             	movzx  edx,dl
c0018dba:	83 ec 04             	sub    esp,0x4
c0018dbd:	52                   	push   edx
c0018dbe:	6a 0b                	push   0xb
c0018dc0:	50                   	push   eax
c0018dc1:	e8 d0 e4 fe ff       	call   c0007296 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018dc6:	83 c4 10             	add    esp,0x10
c0018dc9:	83 ec 0c             	sub    esp,0xc
c0018dcc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018dd0:	e8 91 fa ff ff       	call   c0018866 <RTC::completeRTCRefresh()>
c0018dd5:	83 c4 10             	add    esp,0x10
c0018dd8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018ddd:	83 e8 01             	sub    eax,0x1
c0018de0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018de5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018dea:	85 c0                	test   eax,eax
c0018dec:	75 01                	jne    c0018def <RTC::RTC()+0xb5>
c0018dee:	fb                   	sti    
c0018def:	90                   	nop
c0018df0:	83 c4 1c             	add    esp,0x1c
c0018df3:	c3                   	ret    

c0018df4 <HalConsoleScroll(int, int)>:
c0018df4:	83 ec 10             	sub    esp,0x10
c0018df7:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018dff:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018e07:	90                   	nop
c0018e08:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018e0d:	0f 8f e1 00 00 00    	jg     c0018ef4 <HalConsoleScroll(int, int)+0x100>
c0018e13:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018e1b:	90                   	nop
c0018e1c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018e24:	0f 8f be 00 00 00    	jg     c0018ee8 <HalConsoleScroll(int, int)+0xf4>
c0018e2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e2e:	89 d0                	mov    eax,edx
c0018e30:	c1 e0 02             	shl    eax,0x2
c0018e33:	01 d0                	add    eax,edx
c0018e35:	c1 e0 05             	shl    eax,0x5
c0018e38:	89 c2                	mov    edx,eax
c0018e3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e3e:	01 d0                	add    eax,edx
c0018e40:	89 c2                	mov    edx,eax
c0018e42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e46:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018e49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e4d:	89 d0                	mov    eax,edx
c0018e4f:	c1 e0 02             	shl    eax,0x2
c0018e52:	01 d0                	add    eax,edx
c0018e54:	c1 e0 05             	shl    eax,0x5
c0018e57:	89 c2                	mov    edx,eax
c0018e59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e5d:	01 d0                	add    eax,edx
c0018e5f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018e65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e69:	01 c2                	add    edx,eax
c0018e6b:	8a 01                	mov    al,BYTE PTR [ecx]
c0018e6d:	88 02                	mov    BYTE PTR [edx],al
c0018e6f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018e74:	75 66                	jne    c0018edc <HalConsoleScroll(int, int)+0xe8>
c0018e76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e7a:	83 e0 01             	and    eax,0x1
c0018e7d:	74 39                	je     c0018eb8 <HalConsoleScroll(int, int)+0xc4>
c0018e7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e83:	83 e0 0f             	and    eax,0xf
c0018e86:	88 c2                	mov    dl,al
c0018e88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e8c:	c1 e0 04             	shl    eax,0x4
c0018e8f:	09 d0                	or     eax,edx
c0018e91:	88 c1                	mov    cl,al
c0018e93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e97:	89 d0                	mov    eax,edx
c0018e99:	c1 e0 02             	shl    eax,0x2
c0018e9c:	01 d0                	add    eax,edx
c0018e9e:	c1 e0 05             	shl    eax,0x5
c0018ea1:	89 c2                	mov    edx,eax
c0018ea3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ea7:	01 d0                	add    eax,edx
c0018ea9:	89 c2                	mov    edx,eax
c0018eab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018eaf:	01 d0                	add    eax,edx
c0018eb1:	88 ca                	mov    dl,cl
c0018eb3:	88 10                	mov    BYTE PTR [eax],dl
c0018eb5:	eb 25                	jmp    c0018edc <HalConsoleScroll(int, int)+0xe8>
c0018eb7:	90                   	nop
c0018eb8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ebc:	89 d0                	mov    eax,edx
c0018ebe:	c1 e0 02             	shl    eax,0x2
c0018ec1:	01 d0                	add    eax,edx
c0018ec3:	c1 e0 05             	shl    eax,0x5
c0018ec6:	89 c2                	mov    edx,eax
c0018ec8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ecc:	01 d0                	add    eax,edx
c0018ece:	89 c2                	mov    edx,eax
c0018ed0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ed4:	01 d0                	add    eax,edx
c0018ed6:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0018edc:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018ee1:	e9 36 ff ff ff       	jmp    c0018e1c <HalConsoleScroll(int, int)+0x28>
c0018ee6:	66 90                	xchg   ax,ax
c0018ee8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018eed:	e9 16 ff ff ff       	jmp    c0018e08 <HalConsoleScroll(int, int)+0x14>
c0018ef2:	66 90                	xchg   ax,ax
c0018ef4:	90                   	nop
c0018ef5:	83 c4 10             	add    esp,0x10
c0018ef8:	c3                   	ret    
c0018ef9:	8d 76 00             	lea    esi,[esi+0x0]

c0018efc <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018efc:	83 ec 14             	sub    esp,0x14
c0018eff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018f03:	88 04 24             	mov    BYTE PTR [esp],al
c0018f06:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018f09:	0f b6 c0             	movzx  eax,al
c0018f0c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f10:	89 d1                	mov    ecx,edx
c0018f12:	83 e1 0f             	and    ecx,0xf
c0018f15:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018f19:	c1 e2 04             	shl    edx,0x4
c0018f1c:	0f b6 d2             	movzx  edx,dl
c0018f1f:	09 ca                	or     edx,ecx
c0018f21:	c1 e2 08             	shl    edx,0x8
c0018f24:	09 d0                	or     eax,edx
c0018f26:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018f2b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018f33:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f37:	89 d0                	mov    eax,edx
c0018f39:	c1 e0 02             	shl    eax,0x2
c0018f3c:	01 d0                	add    eax,edx
c0018f3e:	c1 e0 04             	shl    eax,0x4
c0018f41:	89 c2                	mov    edx,eax
c0018f43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f47:	01 d0                	add    eax,edx
c0018f49:	01 c0                	add    eax,eax
c0018f4b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018f4f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018f53:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018f58:	66 89 02             	mov    WORD PTR [edx],ax
c0018f5b:	90                   	nop
c0018f5c:	83 c4 14             	add    esp,0x14
c0018f5f:	c3                   	ret    

c0018f60 <HalConsoleCursorUpdate(int, int)>:
c0018f60:	83 ec 20             	sub    esp,0x20
c0018f63:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f67:	89 c2                	mov    edx,eax
c0018f69:	c1 e2 02             	shl    edx,0x2
c0018f6c:	01 d0                	add    eax,edx
c0018f6e:	c1 e0 04             	shl    eax,0x4
c0018f71:	89 c2                	mov    edx,eax
c0018f73:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f77:	01 d0                	add    eax,edx
c0018f79:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018f7e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018f85:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018f8a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018f8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f92:	ee                   	out    dx,al
c0018f93:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f98:	0f b6 c0             	movzx  eax,al
c0018f9b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018fa2:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018fa6:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018faa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018fae:	ee                   	out    dx,al
c0018faf:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018fb6:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018fbb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018fbf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018fc3:	ee                   	out    dx,al
c0018fc4:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018fc9:	c1 e8 08             	shr    eax,0x8
c0018fcc:	0f b6 c0             	movzx  eax,al
c0018fcf:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018fd6:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018fda:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018fde:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018fe2:	ee                   	out    dx,al
c0018fe3:	90                   	nop
c0018fe4:	83 c4 20             	add    esp,0x20
c0018fe7:	c3                   	ret    

c0018fe8 <FAT::getName()>:
c0018fe8:	b8 74 2f 02 c0       	mov    eax,0xc0022f74
c0018fed:	c3                   	ret    
c0018fee:	66 90                	xchg   ax,ax

c0018ff0 <FAT::tell(void*, unsigned long long*)>:
c0018ff0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018ff5:	75 09                	jne    c0019000 <FAT::tell(void*, unsigned long long*)+0x10>
c0018ff7:	b8 04 00 00 00       	mov    eax,0x4
c0018ffc:	c3                   	ret    
c0018ffd:	8d 76 00             	lea    esi,[esi+0x0]
c0019000:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019005:	75 09                	jne    c0019010 <FAT::tell(void*, unsigned long long*)+0x20>
c0019007:	b8 04 00 00 00       	mov    eax,0x4
c001900c:	c3                   	ret    
c001900d:	8d 76 00             	lea    esi,[esi+0x0]
c0019010:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019014:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019017:	ba 00 00 00 00       	mov    edx,0x0
c001901c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019020:	89 01                	mov    DWORD PTR [ecx],eax
c0019022:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019025:	b8 00 00 00 00       	mov    eax,0x0
c001902a:	c3                   	ret    
c001902b:	90                   	nop

c001902c <FAT::stat(void*, unsigned long long*)>:
c001902c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019031:	75 09                	jne    c001903c <FAT::stat(void*, unsigned long long*)+0x10>
c0019033:	b8 04 00 00 00       	mov    eax,0x4
c0019038:	c3                   	ret    
c0019039:	8d 76 00             	lea    esi,[esi+0x0]
c001903c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019041:	75 09                	jne    c001904c <FAT::stat(void*, unsigned long long*)+0x20>
c0019043:	b8 04 00 00 00       	mov    eax,0x4
c0019048:	c3                   	ret    
c0019049:	8d 76 00             	lea    esi,[esi+0x0]
c001904c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019050:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019053:	ba 00 00 00 00       	mov    edx,0x0
c0019058:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001905c:	89 01                	mov    DWORD PTR [ecx],eax
c001905e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019061:	b8 00 00 00 00       	mov    eax,0x0
c0019066:	c3                   	ret    
c0019067:	90                   	nop

c0019068 <FAT::~FAT()>:
c0019068:	83 ec 0c             	sub    esp,0xc
c001906b:	ba c0 2f 02 c0       	mov    edx,0xc0022fc0
c0019070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019074:	89 10                	mov    DWORD PTR [eax],edx
c0019076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001907a:	83 ec 0c             	sub    esp,0xc
c001907d:	50                   	push   eax
c001907e:	e8 4f 27 ff ff       	call   c000b7d2 <Filesystem::~Filesystem()>
c0019083:	83 c4 10             	add    esp,0x10
c0019086:	90                   	nop
c0019087:	83 c4 0c             	add    esp,0xc
c001908a:	c3                   	ret    
c001908b:	90                   	nop

c001908c <FAT::~FAT()>:
c001908c:	83 ec 0c             	sub    esp,0xc
c001908f:	83 ec 0c             	sub    esp,0xc
c0019092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019096:	e8 cd ff ff ff       	call   c0019068 <FAT::~FAT()>
c001909b:	83 c4 10             	add    esp,0x10
c001909e:	83 ec 08             	sub    esp,0x8
c00190a1:	6a 08                	push   0x8
c00190a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00190a7:	e8 70 17 ff ff       	call   c000a81c <operator delete(void*, unsigned long)>
c00190ac:	83 c4 10             	add    esp,0x10
c00190af:	83 c4 0c             	add    esp,0xc
c00190b2:	c3                   	ret    
c00190b3:	90                   	nop

c00190b4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00190b4:	83 ec 1c             	sub    esp,0x1c
c00190b7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00190be:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00190c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00190c7:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00190ce:	83 f8 ff             	cmp    eax,0xffffffff
c00190d1:	75 35                	jne    c0019108 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00190d3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00190d7:	88 c2                	mov    dl,al
c00190d9:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00190de:	01 d0                	add    eax,edx
c00190e0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00190e4:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00190ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00190ee:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00190f5:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00190fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00190fe:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019105:	eb 19                	jmp    c0019120 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0019107:	90                   	nop
c0019108:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001910c:	88 c2                	mov    dl,al
c001910e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019112:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019119:	01 d0                	add    eax,edx
c001911b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001911f:	90                   	nop
c0019120:	83 ec 04             	sub    esp,0x4
c0019123:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019127:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001912b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001912f:	50                   	push   eax
c0019130:	e8 9a be fe ff       	call   c0004fcf <f_getlabel>
c0019135:	83 c4 10             	add    esp,0x10
c0019138:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001913c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019141:	75 09                	jne    c001914c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019143:	b8 00 00 00 00       	mov    eax,0x0
c0019148:	eb 0a                	jmp    c0019154 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001914a:	66 90                	xchg   ax,ax
c001914c:	b8 01 00 00 00       	mov    eax,0x1
c0019151:	8d 76 00             	lea    esi,[esi+0x0]
c0019154:	83 c4 1c             	add    esp,0x1c
c0019157:	c3                   	ret    

c0019158 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019158:	57                   	push   edi
c0019159:	83 ec 58             	sub    esp,0x58
c001915c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019164:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019168:	b8 00 00 00 00       	mov    eax,0x0
c001916d:	b9 0f 00 00 00       	mov    ecx,0xf
c0019172:	fc                   	cld    
c0019173:	89 d7                	mov    edi,edx
c0019175:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019177:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001917b:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019182:	83 f8 ff             	cmp    eax,0xffffffff
c0019185:	75 35                	jne    c00191bc <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0019187:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001918b:	88 c2                	mov    dl,al
c001918d:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019192:	01 d0                	add    eax,edx
c0019194:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019198:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001919e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00191a2:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00191a9:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00191ae:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00191b2:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00191b9:	eb 19                	jmp    c00191d4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00191bb:	90                   	nop
c00191bc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00191c0:	88 c2                	mov    dl,al
c00191c2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00191c6:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00191cd:	01 d0                	add    eax,edx
c00191cf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00191d3:	90                   	nop
c00191d4:	83 ec 08             	sub    esp,0x8
c00191d7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00191db:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191df:	50                   	push   eax
c00191e0:	e8 5b 76 fe ff       	call   c0000840 <strcat>
c00191e5:	83 c4 10             	add    esp,0x10
c00191e8:	83 ec 0c             	sub    esp,0xc
c00191eb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191ef:	50                   	push   eax
c00191f0:	e8 2b bf fe ff       	call   c0005120 <f_setlabel>
c00191f5:	83 c4 10             	add    esp,0x10
c00191f8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00191fc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019201:	75 09                	jne    c001920c <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0019203:	b8 00 00 00 00       	mov    eax,0x0
c0019208:	eb 0a                	jmp    c0019214 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001920a:	66 90                	xchg   ax,ax
c001920c:	b8 01 00 00 00       	mov    eax,0x1
c0019211:	8d 76 00             	lea    esi,[esi+0x0]
c0019214:	83 c4 58             	add    esp,0x58
c0019217:	5f                   	pop    edi
c0019218:	c3                   	ret    
c0019219:	90                   	nop
c001921a:	66 90                	xchg   ax,ax

c001921c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001921c:	83 ec 2c             	sub    esp,0x2c
c001921f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019227:	83 ec 08             	sub    esp,0x8
c001922a:	68 98 2f 02 c0       	push   0xc0022f98
c001922f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019233:	e8 18 75 fe ff       	call   c0000750 <strcmp>
c0019238:	83 c4 10             	add    esp,0x10
c001923b:	85 c0                	test   eax,eax
c001923d:	0f 94 c0             	sete   al
c0019240:	0f b6 c0             	movzx  eax,al
c0019243:	85 c0                	test   eax,eax
c0019245:	74 0d                	je     c0019254 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0019247:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001924f:	e9 c0 00 00 00       	jmp    c0019314 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019254:	83 ec 08             	sub    esp,0x8
c0019257:	68 8a 2f 02 c0       	push   0xc0022f8a
c001925c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019260:	e8 eb 74 fe ff       	call   c0000750 <strcmp>
c0019265:	83 c4 10             	add    esp,0x10
c0019268:	85 c0                	test   eax,eax
c001926a:	0f 94 c0             	sete   al
c001926d:	0f b6 c0             	movzx  eax,al
c0019270:	85 c0                	test   eax,eax
c0019272:	74 10                	je     c0019284 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0019274:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001927c:	e9 93 00 00 00       	jmp    c0019314 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019281:	8d 76 00             	lea    esi,[esi+0x0]
c0019284:	83 ec 08             	sub    esp,0x8
c0019287:	68 90 2f 02 c0       	push   0xc0022f90
c001928c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019290:	e8 bb 74 fe ff       	call   c0000750 <strcmp>
c0019295:	83 c4 10             	add    esp,0x10
c0019298:	85 c0                	test   eax,eax
c001929a:	0f 94 c0             	sete   al
c001929d:	0f b6 c0             	movzx  eax,al
c00192a0:	85 c0                	test   eax,eax
c00192a2:	74 0c                	je     c00192b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00192a4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00192ac:	eb 66                	jmp    c0019314 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00192ae:	66 90                	xchg   ax,ax
c00192b0:	83 ec 08             	sub    esp,0x8
c00192b3:	68 1c 06 02 c0       	push   0xc002061c
c00192b8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00192bc:	e8 8f 74 fe ff       	call   c0000750 <strcmp>
c00192c1:	83 c4 10             	add    esp,0x10
c00192c4:	85 c0                	test   eax,eax
c00192c6:	0f 94 c0             	sete   al
c00192c9:	0f b6 c0             	movzx  eax,al
c00192cc:	85 c0                	test   eax,eax
c00192ce:	74 0c                	je     c00192dc <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00192d0:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00192d8:	eb 3a                	jmp    c0019314 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00192da:	66 90                	xchg   ax,ax
c00192dc:	83 ec 08             	sub    esp,0x8
c00192df:	68 96 2f 02 c0       	push   0xc0022f96
c00192e4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00192e8:	e8 63 74 fe ff       	call   c0000750 <strcmp>
c00192ed:	83 c4 10             	add    esp,0x10
c00192f0:	85 c0                	test   eax,eax
c00192f2:	0f 94 c0             	sete   al
c00192f5:	0f b6 c0             	movzx  eax,al
c00192f8:	85 c0                	test   eax,eax
c00192fa:	74 0c                	je     c0019308 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00192fc:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019304:	eb 0e                	jmp    c0019314 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019306:	66 90                	xchg   ax,ax
c0019308:	b8 08 00 00 00       	mov    eax,0x8
c001930d:	e9 ea 00 00 00       	jmp    c00193fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019312:	66 90                	xchg   ax,ax
c0019314:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001931b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019320:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019324:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001932b:	83 f8 ff             	cmp    eax,0xffffffff
c001932e:	75 34                	jne    c0019364 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019330:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019334:	88 c2                	mov    dl,al
c0019336:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001933b:	01 d0                	add    eax,edx
c001933d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019341:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001934b:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019352:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019357:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001935b:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019362:	eb 18                	jmp    c001937c <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0019364:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019368:	88 c2                	mov    dl,al
c001936a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001936e:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019375:	01 d0                	add    eax,edx
c0019377:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001937b:	90                   	nop
c001937c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019380:	88 04 24             	mov    BYTE PTR [esp],al
c0019383:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001938b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019393:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019398:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00193a0:	83 ec 0c             	sub    esp,0xc
c00193a3:	68 00 20 00 00       	push   0x2000
c00193a8:	e8 0d e7 fe ff       	call   c0007aba <malloc>
c00193ad:	83 c4 10             	add    esp,0x10
c00193b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00193b4:	68 00 20 00 00       	push   0x2000
c00193b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00193bd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00193c1:	50                   	push   eax
c00193c2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00193c6:	50                   	push   eax
c00193c7:	e8 51 c0 fe ff       	call   c000541d <f_mkfs>
c00193cc:	83 c4 10             	add    esp,0x10
c00193cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00193d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00193d8:	75 0a                	jne    c00193e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00193da:	b8 00 00 00 00       	mov    eax,0x0
c00193df:	eb 1b                	jmp    c00193fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00193e1:	8d 76 00             	lea    esi,[esi+0x0]
c00193e4:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00193e9:	75 09                	jne    c00193f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00193eb:	b8 09 00 00 00       	mov    eax,0x9
c00193f0:	eb 0a                	jmp    c00193fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00193f2:	66 90                	xchg   ax,ax
c00193f4:	b8 01 00 00 00       	mov    eax,0x1
c00193f9:	8d 76 00             	lea    esi,[esi+0x0]
c00193fc:	83 c4 2c             	add    esp,0x2c
c00193ff:	c3                   	ret    

c0019400 <FAT::tryMount(LogicalDisk*, int)>:
c0019400:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019406:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001940b:	83 f8 14             	cmp    eax,0x14
c001940e:	75 18                	jne    c0019428 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019410:	83 ec 0c             	sub    esp,0xc
c0019413:	68 9c 2f 02 c0       	push   0xc0022f9c
c0019418:	e8 a6 82 ff ff       	call   c00116c3 <KePanic(char const*)>
c001941d:	83 c4 10             	add    esp,0x10
c0019420:	b0 00                	mov    al,0x0
c0019422:	e9 ed 01 00 00       	jmp    c0019614 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019427:	90                   	nop
c0019428:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001942f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019435:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001943b:	3d 00 02 00 00       	cmp    eax,0x200
c0019440:	74 0a                	je     c001944c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019442:	b0 00                	mov    al,0x0
c0019444:	e9 cb 01 00 00       	jmp    c0019614 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019449:	8d 76 00             	lea    esi,[esi+0x0]
c001944c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019454:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001945b:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019462:	83 f8 ff             	cmp    eax,0xffffffff
c0019465:	74 09                	je     c0019470 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0019467:	b0 01                	mov    al,0x1
c0019469:	e9 a6 01 00 00       	jmp    c0019614 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001946e:	66 90                	xchg   ax,ax
c0019470:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001947a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019482:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019489:	88 c2                	mov    dl,al
c001948b:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019490:	01 d0                	add    eax,edx
c0019492:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019499:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001949f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00194a6:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00194ad:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00194b2:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00194b9:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00194c0:	83 ec 0c             	sub    esp,0xc
c00194c3:	68 34 02 00 00       	push   0x234
c00194c8:	e8 ed e5 fe ff       	call   c0007aba <malloc>
c00194cd:	83 c4 10             	add    esp,0x10
c00194d0:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00194d7:	83 ec 04             	sub    esp,0x4
c00194da:	6a 00                	push   0x0
c00194dc:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00194e3:	50                   	push   eax
c00194e4:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00194eb:	e8 08 a7 fe ff       	call   c0003bf8 <f_mount>
c00194f0:	83 c4 10             	add    esp,0x10
c00194f3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00194fa:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019502:	74 1c                	je     c0019520 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019504:	83 ec 0c             	sub    esp,0xc
c0019507:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001950e:	e8 c7 e5 fe ff       	call   c0007ada <rfree>
c0019513:	83 c4 10             	add    esp,0x10
c0019516:	b0 00                	mov    al,0x0
c0019518:	e9 f7 00 00 00       	jmp    c0019614 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001951d:	8d 76 00             	lea    esi,[esi+0x0]
c0019520:	83 ec 04             	sub    esp,0x4
c0019523:	68 00 01 00 00       	push   0x100
c0019528:	6a 00                	push   0x0
c001952a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019531:	50                   	push   eax
c0019532:	e8 b9 6f fe ff       	call   c00004f0 <memset>
c0019537:	83 c4 10             	add    esp,0x10
c001953a:	83 ec 08             	sub    esp,0x8
c001953d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019544:	50                   	push   eax
c0019545:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001954c:	50                   	push   eax
c001954d:	e8 ee 72 fe ff       	call   c0000840 <strcat>
c0019552:	83 c4 10             	add    esp,0x10
c0019555:	83 ec 08             	sub    esp,0x8
c0019558:	68 aa 2f 02 c0       	push   0xc0022faa
c001955d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019564:	50                   	push   eax
c0019565:	e8 d6 72 fe ff       	call   c0000840 <strcat>
c001956a:	83 c4 10             	add    esp,0x10
c001956d:	83 ec 04             	sub    esp,0x4
c0019570:	6a 01                	push   0x1
c0019572:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019579:	50                   	push   eax
c001957a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001957e:	50                   	push   eax
c001957f:	e8 d6 a6 fe ff       	call   c0003c5a <f_open>
c0019584:	83 c4 10             	add    esp,0x10
c0019587:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001958e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019595:	85 c0                	test   eax,eax
c0019597:	74 0b                	je     c00195a4 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019599:	78 31                	js     c00195cc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001959b:	83 e8 04             	sub    eax,0x4
c001959e:	83 f8 01             	cmp    eax,0x1
c00195a1:	77 29                	ja     c00195cc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00195a3:	90                   	nop
c00195a4:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00195ac:	83 ec 0c             	sub    esp,0xc
c00195af:	8d 44 24 14          	lea    eax,[esp+0x14]
c00195b3:	50                   	push   eax
c00195b4:	e8 70 ae fe ff       	call   c0004429 <f_close>
c00195b9:	83 c4 10             	add    esp,0x10
c00195bc:	90                   	nop
c00195bd:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00195c5:	85 c0                	test   eax,eax
c00195c7:	74 43                	je     c001960c <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00195c9:	eb 31                	jmp    c00195fc <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00195cb:	90                   	nop
c00195cc:	83 ec 0c             	sub    esp,0xc
c00195cf:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00195d6:	e8 ff e4 fe ff       	call   c0007ada <rfree>
c00195db:	83 c4 10             	add    esp,0x10
c00195de:	83 ec 04             	sub    esp,0x4
c00195e1:	6a 00                	push   0x0
c00195e3:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00195ea:	50                   	push   eax
c00195eb:	6a 00                	push   0x0
c00195ed:	e8 06 a6 fe ff       	call   c0003bf8 <f_mount>
c00195f2:	83 c4 10             	add    esp,0x10
c00195f5:	b0 00                	mov    al,0x0
c00195f7:	eb 1b                	jmp    c0019614 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00195f9:	8d 76 00             	lea    esi,[esi+0x0]
c00195fc:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019601:	83 c0 01             	add    eax,0x1
c0019604:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c0019609:	8d 76 00             	lea    esi,[esi+0x0]
c001960c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0019613:	90                   	nop
c0019614:	81 c4 4c 03 00 00    	add    esp,0x34c
c001961a:	c3                   	ret    
c001961b:	90                   	nop

c001961c <FAT::allocateSwapfile(char const*, int)>:
c001961c:	55                   	push   ebp
c001961d:	57                   	push   edi
c001961e:	56                   	push   esi
c001961f:	53                   	push   ebx
c0019620:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019626:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019631:	83 ec 0c             	sub    esp,0xc
c0019634:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001963b:	e8 7a e4 fe ff       	call   c0007aba <malloc>
c0019640:	83 c4 10             	add    esp,0x10
c0019643:	89 c7                	mov    edi,eax
c0019645:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001964a:	83 ec 04             	sub    esp,0x4
c001964d:	50                   	push   eax
c001964e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019655:	57                   	push   edi
c0019656:	e8 f5 24 ff ff       	call   c000bb50 <File::File(char const*, Process*)>
c001965b:	83 c4 10             	add    esp,0x10
c001965e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019665:	83 ec 04             	sub    esp,0x4
c0019668:	8d 44 24 13          	lea    eax,[esp+0x13]
c001966c:	50                   	push   eax
c001966d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019671:	50                   	push   eax
c0019672:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019679:	e8 f2 27 ff ff       	call   c000be70 <File::stat(unsigned long long*, bool*)>
c001967e:	83 c4 10             	add    esp,0x10
c0019681:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019688:	c1 e0 14             	shl    eax,0x14
c001968b:	89 c7                	mov    edi,eax
c001968d:	89 c5                	mov    ebp,eax
c001968f:	c1 fd 1f             	sar    ebp,0x1f
c0019692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019696:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001969a:	89 f9                	mov    ecx,edi
c001969c:	31 c1                	xor    ecx,eax
c001969e:	89 cb                	mov    ebx,ecx
c00196a0:	89 e9                	mov    ecx,ebp
c00196a2:	31 d1                	xor    ecx,edx
c00196a4:	89 ce                	mov    esi,ecx
c00196a6:	89 f0                	mov    eax,esi
c00196a8:	09 d8                	or     eax,ebx
c00196aa:	0f 84 9c 00 00 00    	je     c001974c <FAT::allocateSwapfile(char const*, int)+0x130>
c00196b0:	83 ec 0c             	sub    esp,0xc
c00196b3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196ba:	e8 7d 26 ff ff       	call   c000bd3c <File::unlink()>
c00196bf:	83 c4 10             	add    esp,0x10
c00196c2:	83 ec 08             	sub    esp,0x8
c00196c5:	6a 12                	push   0x12
c00196c7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196ce:	e8 9b 24 ff ff       	call   c000bb6e <File::open(FileOpenMode)>
c00196d3:	83 c4 10             	add    esp,0x10
c00196d6:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196dd:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00196e3:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00196ea:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00196f1:	c1 e0 14             	shl    eax,0x14
c00196f4:	83 ec 04             	sub    esp,0x4
c00196f7:	6a 01                	push   0x1
c00196f9:	50                   	push   eax
c00196fa:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019701:	e8 aa bb fe ff       	call   c00052b0 <f_expand>
c0019706:	83 c4 10             	add    esp,0x10
c0019709:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019710:	8b 00                	mov    eax,DWORD PTR [eax]
c0019712:	83 c0 10             	add    eax,0x10
c0019715:	8b 00                	mov    eax,DWORD PTR [eax]
c0019717:	83 ec 0c             	sub    esp,0xc
c001971a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001971e:	52                   	push   edx
c001971f:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019723:	52                   	push   edx
c0019724:	6a 00                	push   0x0
c0019726:	68 00 04 00 00       	push   0x400
c001972b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019732:	ff d0                	call   eax
c0019734:	83 c4 20             	add    esp,0x20
c0019737:	83 ec 0c             	sub    esp,0xc
c001973a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019741:	e8 86 24 ff ff       	call   c000bbcc <File::close()>
c0019746:	83 c4 10             	add    esp,0x10
c0019749:	8d 76 00             	lea    esi,[esi+0x0]
c001974c:	83 ec 08             	sub    esp,0x8
c001974f:	6a 01                	push   0x1
c0019751:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019758:	e8 11 24 ff ff       	call   c000bb6e <File::open(FileOpenMode)>
c001975d:	83 c4 10             	add    esp,0x10
c0019760:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019767:	8b 00                	mov    eax,DWORD PTR [eax]
c0019769:	83 c0 0c             	add    eax,0xc
c001976c:	8b 00                	mov    eax,DWORD PTR [eax]
c001976e:	83 ec 0c             	sub    esp,0xc
c0019771:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019775:	52                   	push   edx
c0019776:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001977a:	52                   	push   edx
c001977b:	6a 00                	push   0x0
c001977d:	6a 04                	push   0x4
c001977f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019786:	ff d0                	call   eax
c0019788:	83 c4 20             	add    esp,0x20
c001978b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019792:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019798:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001979f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00197a6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00197a9:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00197b0:	83 ec 0c             	sub    esp,0xc
c00197b3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00197ba:	e8 0d 24 ff ff       	call   c000bbcc <File::close()>
c00197bf:	83 c4 10             	add    esp,0x10
c00197c2:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00197c9:	ba 00 00 00 00       	mov    edx,0x0
c00197ce:	81 c4 3c 04 00 00    	add    esp,0x43c
c00197d4:	5b                   	pop    ebx
c00197d5:	5e                   	pop    esi
c00197d6:	5f                   	pop    edi
c00197d7:	5d                   	pop    ebp
c00197d8:	c3                   	ret    
c00197d9:	90                   	nop
c00197da:	66 90                	xchg   ax,ax

c00197dc <FAT::readDir(void*, unsigned long, void*, int*)>:
c00197dc:	57                   	push   edi
c00197dd:	56                   	push   esi
c00197de:	53                   	push   ebx
c00197df:	81 ec 50 02 00 00    	sub    esp,0x250
c00197e5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00197ed:	74 0d                	je     c00197fc <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00197ef:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00197f7:	75 0f                	jne    c0019808 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00197f9:	8d 76 00             	lea    esi,[esi+0x0]
c00197fc:	b8 04 00 00 00       	mov    eax,0x4
c0019801:	e9 3a 01 00 00       	jmp    c0019940 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019806:	66 90                	xchg   ax,ax
c0019808:	83 ec 08             	sub    esp,0x8
c001980b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019812:	50                   	push   eax
c0019813:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001981a:	e8 d7 ae fe ff       	call   c00046f6 <f_readdir>
c001981f:	83 c4 10             	add    esp,0x10
c0019822:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019829:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019830:	83 ec 0c             	sub    esp,0xc
c0019833:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001983a:	83 c0 16             	add    eax,0x16
c001983d:	50                   	push   eax
c001983e:	e8 2d 6d fe ff       	call   c0000570 <strlen>
c0019843:	83 c4 10             	add    esp,0x10
c0019846:	ba 00 00 00 00       	mov    edx,0x0
c001984b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001984f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019853:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001985a:	0f b6 c0             	movzx  eax,al
c001985d:	83 e0 10             	and    eax,0x10
c0019860:	74 0a                	je     c001986c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019862:	b8 02 00 00 00       	mov    eax,0x2
c0019867:	eb 0b                	jmp    c0019874 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019869:	8d 76 00             	lea    esi,[esi+0x0]
c001986c:	b8 01 00 00 00       	mov    eax,0x1
c0019871:	8d 76 00             	lea    esi,[esi+0x0]
c0019874:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019878:	83 ec 08             	sub    esp,0x8
c001987b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019882:	83 c0 16             	add    eax,0x16
c0019885:	50                   	push   eax
c0019886:	8d 44 24 14          	lea    eax,[esp+0x14]
c001988a:	83 c0 10             	add    eax,0x10
c001988d:	50                   	push   eax
c001988e:	e8 ad 6d fe ff       	call   c0000640 <strcpy>
c0019893:	83 c4 10             	add    esp,0x10
c0019896:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001989d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00198a4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00198a8:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00198af:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00198b6:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00198bd:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00198c4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00198cb:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00198d2:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00198d9:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00198e0:	89 c6                	mov    esi,eax
c00198e2:	89 d7                	mov    edi,edx
c00198e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00198e6:	89 c8                	mov    eax,ecx
c00198e8:	89 fa                	mov    edx,edi
c00198ea:	89 f3                	mov    ebx,esi
c00198ec:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00198f3:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00198fa:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019901:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019908:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001990e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019915:	0f be c0             	movsx  eax,al
c0019918:	85 c0                	test   eax,eax
c001991a:	75 08                	jne    c0019924 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001991c:	b8 07 00 00 00       	mov    eax,0x7
c0019921:	eb 1d                	jmp    c0019940 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019923:	90                   	nop
c0019924:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001992b:	85 c0                	test   eax,eax
c001992d:	75 09                	jne    c0019938 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001992f:	b8 00 00 00 00       	mov    eax,0x0
c0019934:	eb 0a                	jmp    c0019940 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019936:	66 90                	xchg   ax,ax
c0019938:	b8 01 00 00 00       	mov    eax,0x1
c001993d:	8d 76 00             	lea    esi,[esi+0x0]
c0019940:	81 c4 50 02 00 00    	add    esp,0x250
c0019946:	5b                   	pop    ebx
c0019947:	5e                   	pop    esi
c0019948:	5f                   	pop    edi
c0019949:	c3                   	ret    
c001994a:	66 90                	xchg   ax,ax

c001994c <FAT::read(void*, unsigned long, void*, int*)>:
c001994c:	83 ec 1c             	sub    esp,0x1c
c001994f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019954:	74 0a                	je     c0019960 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0019956:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001995b:	75 0b                	jne    c0019968 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001995d:	8d 76 00             	lea    esi,[esi+0x0]
c0019960:	b8 04 00 00 00       	mov    eax,0x4
c0019965:	eb 41                	jmp    c00199a8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019967:	90                   	nop
c0019968:	8d 44 24 08          	lea    eax,[esp+0x8]
c001996c:	50                   	push   eax
c001996d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019971:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019975:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019979:	e8 9f a5 fe ff       	call   c0003f1d <f_read>
c001997e:	83 c4 10             	add    esp,0x10
c0019981:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019985:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019989:	89 c2                	mov    edx,eax
c001998b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001998f:	89 10                	mov    DWORD PTR [eax],edx
c0019991:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019995:	85 c0                	test   eax,eax
c0019997:	75 07                	jne    c00199a0 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019999:	b8 00 00 00 00       	mov    eax,0x0
c001999e:	eb 08                	jmp    c00199a8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00199a0:	b8 01 00 00 00       	mov    eax,0x1
c00199a5:	8d 76 00             	lea    esi,[esi+0x0]
c00199a8:	83 c4 1c             	add    esp,0x1c
c00199ab:	c3                   	ret    

c00199ac <FAT::write(void*, unsigned long, void*, int*)>:
c00199ac:	83 ec 1c             	sub    esp,0x1c
c00199af:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00199b4:	74 0a                	je     c00199c0 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00199b6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00199bb:	75 0b                	jne    c00199c8 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00199bd:	8d 76 00             	lea    esi,[esi+0x0]
c00199c0:	b8 04 00 00 00       	mov    eax,0x4
c00199c5:	eb 41                	jmp    c0019a08 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00199c7:	90                   	nop
c00199c8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00199cc:	50                   	push   eax
c00199cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00199d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00199d5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199d9:	e8 3e a7 fe ff       	call   c000411c <f_write>
c00199de:	83 c4 10             	add    esp,0x10
c00199e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199e9:	89 c2                	mov    edx,eax
c00199eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00199ef:	89 10                	mov    DWORD PTR [eax],edx
c00199f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199f5:	85 c0                	test   eax,eax
c00199f7:	75 07                	jne    c0019a00 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00199f9:	b8 00 00 00 00       	mov    eax,0x0
c00199fe:	eb 08                	jmp    c0019a08 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019a00:	b8 01 00 00 00       	mov    eax,0x1
c0019a05:	8d 76 00             	lea    esi,[esi+0x0]
c0019a08:	83 c4 1c             	add    esp,0x1c
c0019a0b:	c3                   	ret    

c0019a0c <FAT::close(void*)>:
c0019a0c:	83 ec 1c             	sub    esp,0x1c
c0019a0f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a14:	75 0a                	jne    c0019a20 <FAT::close(void*)+0x14>
c0019a16:	b8 04 00 00 00       	mov    eax,0x4
c0019a1b:	eb 3f                	jmp    c0019a5c <FAT::close(void*)+0x50>
c0019a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a20:	83 ec 0c             	sub    esp,0xc
c0019a23:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a27:	e8 fd a9 fe ff       	call   c0004429 <f_close>
c0019a2c:	83 c4 10             	add    esp,0x10
c0019a2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a33:	83 ec 0c             	sub    esp,0xc
c0019a36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a3a:	e8 8b e0 fe ff       	call   c0007aca <free>
c0019a3f:	83 c4 10             	add    esp,0x10
c0019a42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a46:	85 c0                	test   eax,eax
c0019a48:	75 0a                	jne    c0019a54 <FAT::close(void*)+0x48>
c0019a4a:	b8 00 00 00 00       	mov    eax,0x0
c0019a4f:	eb 0b                	jmp    c0019a5c <FAT::close(void*)+0x50>
c0019a51:	8d 76 00             	lea    esi,[esi+0x0]
c0019a54:	b8 01 00 00 00       	mov    eax,0x1
c0019a59:	8d 76 00             	lea    esi,[esi+0x0]
c0019a5c:	83 c4 1c             	add    esp,0x1c
c0019a5f:	c3                   	ret    

c0019a60 <FAT::closeDir(void*)>:
c0019a60:	83 ec 1c             	sub    esp,0x1c
c0019a63:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a68:	75 0a                	jne    c0019a74 <FAT::closeDir(void*)+0x14>
c0019a6a:	b8 04 00 00 00       	mov    eax,0x4
c0019a6f:	eb 3f                	jmp    c0019ab0 <FAT::closeDir(void*)+0x50>
c0019a71:	8d 76 00             	lea    esi,[esi+0x0]
c0019a74:	83 ec 0c             	sub    esp,0xc
c0019a77:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a7b:	e8 54 ac fe ff       	call   c00046d4 <f_closedir>
c0019a80:	83 c4 10             	add    esp,0x10
c0019a83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a87:	83 ec 0c             	sub    esp,0xc
c0019a8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a8e:	e8 37 e0 fe ff       	call   c0007aca <free>
c0019a93:	83 c4 10             	add    esp,0x10
c0019a96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a9a:	85 c0                	test   eax,eax
c0019a9c:	75 0a                	jne    c0019aa8 <FAT::closeDir(void*)+0x48>
c0019a9e:	b8 00 00 00 00       	mov    eax,0x0
c0019aa3:	eb 0b                	jmp    c0019ab0 <FAT::closeDir(void*)+0x50>
c0019aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0019aa8:	b8 01 00 00 00       	mov    eax,0x1
c0019aad:	8d 76 00             	lea    esi,[esi+0x0]
c0019ab0:	83 c4 1c             	add    esp,0x1c
c0019ab3:	c3                   	ret    

c0019ab4 <FAT::truncate(void*, unsigned long long)>:
c0019ab4:	83 ec 2c             	sub    esp,0x2c
c0019ab7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019abb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019abf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019ac3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ac7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019acc:	75 0a                	jne    c0019ad8 <FAT::truncate(void*, unsigned long long)+0x24>
c0019ace:	b8 04 00 00 00       	mov    eax,0x4
c0019ad3:	eb 47                	jmp    c0019b1c <FAT::truncate(void*, unsigned long long)+0x68>
c0019ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ad8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019adc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019adf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019ae3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019aeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019aef:	83 ec 08             	sub    esp,0x8
c0019af2:	50                   	push   eax
c0019af3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019af7:	e8 5c a9 fe ff       	call   c0004458 <f_lseek>
c0019afc:	83 c4 10             	add    esp,0x10
c0019aff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019b03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b07:	85 c0                	test   eax,eax
c0019b09:	75 09                	jne    c0019b14 <FAT::truncate(void*, unsigned long long)+0x60>
c0019b0b:	b8 00 00 00 00       	mov    eax,0x0
c0019b10:	eb 0a                	jmp    c0019b1c <FAT::truncate(void*, unsigned long long)+0x68>
c0019b12:	66 90                	xchg   ax,ax
c0019b14:	b8 01 00 00 00       	mov    eax,0x1
c0019b19:	8d 76 00             	lea    esi,[esi+0x0]
c0019b1c:	83 c4 2c             	add    esp,0x2c
c0019b1f:	c3                   	ret    

c0019b20 <FAT::seek(void*, unsigned long long)>:
c0019b20:	83 ec 2c             	sub    esp,0x2c
c0019b23:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019b2b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019b2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b33:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019b38:	75 0a                	jne    c0019b44 <FAT::seek(void*, unsigned long long)+0x24>
c0019b3a:	b8 04 00 00 00       	mov    eax,0x4
c0019b3f:	eb 33                	jmp    c0019b74 <FAT::seek(void*, unsigned long long)+0x54>
c0019b41:	8d 76 00             	lea    esi,[esi+0x0]
c0019b44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b48:	83 ec 08             	sub    esp,0x8
c0019b4b:	50                   	push   eax
c0019b4c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019b50:	e8 03 a9 fe ff       	call   c0004458 <f_lseek>
c0019b55:	83 c4 10             	add    esp,0x10
c0019b58:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b60:	85 c0                	test   eax,eax
c0019b62:	75 08                	jne    c0019b6c <FAT::seek(void*, unsigned long long)+0x4c>
c0019b64:	b8 00 00 00 00       	mov    eax,0x0
c0019b69:	eb 09                	jmp    c0019b74 <FAT::seek(void*, unsigned long long)+0x54>
c0019b6b:	90                   	nop
c0019b6c:	b8 01 00 00 00       	mov    eax,0x1
c0019b71:	8d 76 00             	lea    esi,[esi+0x0]
c0019b74:	83 c4 2c             	add    esp,0x2c
c0019b77:	c3                   	ret    

c0019b78 <fatWrapperReadDisk>:
c0019b78:	53                   	push   ebx
c0019b79:	83 ec 18             	sub    esp,0x18
c0019b7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b80:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b84:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b89:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019b90:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019b94:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b98:	ba 00 00 00 00       	mov    edx,0x0
c0019b9d:	83 ec 0c             	sub    esp,0xc
c0019ba0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019ba4:	53                   	push   ebx
c0019ba5:	52                   	push   edx
c0019ba6:	50                   	push   eax
c0019ba7:	51                   	push   ecx
c0019ba8:	e8 17 42 ff ff       	call   c000ddc4 <LogicalDisk::read(unsigned long long, int, void*)>
c0019bad:	83 c4 20             	add    esp,0x20
c0019bb0:	83 c4 18             	add    esp,0x18
c0019bb3:	5b                   	pop    ebx
c0019bb4:	c3                   	ret    
c0019bb5:	8d 76 00             	lea    esi,[esi+0x0]

c0019bb8 <fatWrapperWriteDisk>:
c0019bb8:	53                   	push   ebx
c0019bb9:	83 ec 18             	sub    esp,0x18
c0019bbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bc0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019bc4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bc9:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019bd0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019bd4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019bd8:	ba 00 00 00 00       	mov    edx,0x0
c0019bdd:	83 ec 0c             	sub    esp,0xc
c0019be0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019be4:	53                   	push   ebx
c0019be5:	52                   	push   edx
c0019be6:	50                   	push   eax
c0019be7:	51                   	push   ecx
c0019be8:	e8 43 42 ff ff       	call   c000de30 <LogicalDisk::write(unsigned long long, int, void*)>
c0019bed:	83 c4 20             	add    esp,0x20
c0019bf0:	83 c4 18             	add    esp,0x18
c0019bf3:	5b                   	pop    ebx
c0019bf4:	c3                   	ret    
c0019bf5:	8d 76 00             	lea    esi,[esi+0x0]

c0019bf8 <fatWrapperIoctl>:
c0019bf8:	53                   	push   ebx
c0019bf9:	83 ec 28             	sub    esp,0x28
c0019bfc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019c00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019c04:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019c08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019c0c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c11:	83 f8 02             	cmp    eax,0x2
c0019c14:	75 32                	jne    c0019c48 <fatWrapperIoctl+0x50>
c0019c16:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019c1e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c23:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019c2a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019c30:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019c36:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c3a:	66 89 02             	mov    WORD PTR [edx],ax
c0019c3d:	b8 00 00 00 00       	mov    eax,0x0
c0019c42:	e9 c5 00 00 00       	jmp    c0019d0c <fatWrapperIoctl+0x114>
c0019c47:	90                   	nop
c0019c48:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c4d:	83 f8 01             	cmp    eax,0x1
c0019c50:	75 6a                	jne    c0019cbc <fatWrapperIoctl+0xc4>
c0019c52:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019c5a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c5f:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019c66:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019c6c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019c72:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019c78:	89 c8                	mov    eax,ecx
c0019c7a:	89 da                	mov    edx,ebx
c0019c7c:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019c80:	c1 e0 0a             	shl    eax,0xa
c0019c83:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019c88:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019c8f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019c95:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019c9b:	89 cb                	mov    ebx,ecx
c0019c9d:	c1 fb 1f             	sar    ebx,0x1f
c0019ca0:	53                   	push   ebx
c0019ca1:	51                   	push   ecx
c0019ca2:	52                   	push   edx
c0019ca3:	50                   	push   eax
c0019ca4:	e8 77 5b 00 00       	call   c001f820 <__udivdi3>
c0019ca9:	83 c4 10             	add    esp,0x10
c0019cac:	89 c2                	mov    edx,eax
c0019cae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019cb2:	89 10                	mov    DWORD PTR [eax],edx
c0019cb4:	b8 00 00 00 00       	mov    eax,0x0
c0019cb9:	eb 51                	jmp    c0019d0c <fatWrapperIoctl+0x114>
c0019cbb:	90                   	nop
c0019cbc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019cc1:	85 c0                	test   eax,eax
c0019cc3:	75 07                	jne    c0019ccc <fatWrapperIoctl+0xd4>
c0019cc5:	b8 00 00 00 00       	mov    eax,0x0
c0019cca:	eb 40                	jmp    c0019d0c <fatWrapperIoctl+0x114>
c0019ccc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019cd1:	83 f8 03             	cmp    eax,0x3
c0019cd4:	75 1a                	jne    c0019cf0 <fatWrapperIoctl+0xf8>
c0019cd6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019cde:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019ce2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019ce8:	b8 00 00 00 00       	mov    eax,0x0
c0019ced:	eb 1d                	jmp    c0019d0c <fatWrapperIoctl+0x114>
c0019cef:	90                   	nop
c0019cf0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019cf5:	83 f8 04             	cmp    eax,0x4
c0019cf8:	75 0a                	jne    c0019d04 <fatWrapperIoctl+0x10c>
c0019cfa:	b8 00 00 00 00       	mov    eax,0x0
c0019cff:	eb 0b                	jmp    c0019d0c <fatWrapperIoctl+0x114>
c0019d01:	8d 76 00             	lea    esi,[esi+0x0]
c0019d04:	b8 04 00 00 00       	mov    eax,0x4
c0019d09:	8d 76 00             	lea    esi,[esi+0x0]
c0019d0c:	83 c4 28             	add    esp,0x28
c0019d0f:	5b                   	pop    ebx
c0019d10:	c3                   	ret    
c0019d11:	90                   	nop
c0019d12:	66 90                	xchg   ax,ax

c0019d14 <FAT::FAT()>:
c0019d14:	83 ec 1c             	sub    esp,0x1c
c0019d17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d1b:	83 ec 0c             	sub    esp,0xc
c0019d1e:	50                   	push   eax
c0019d1f:	e8 8a 1a ff ff       	call   c000b7ae <Filesystem::Filesystem()>
c0019d24:	83 c4 10             	add    esp,0x10
c0019d27:	ba c0 2f 02 c0       	mov    edx,0xc0022fc0
c0019d2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d30:	89 10                	mov    DWORD PTR [eax],edx
c0019d32:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019d3c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019d44:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019d49:	7f 19                	jg     c0019d64 <FAT::FAT()+0x50>
c0019d4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d4f:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019d5a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019d5f:	eb e3                	jmp    c0019d44 <FAT::FAT()+0x30>
c0019d61:	8d 76 00             	lea    esi,[esi+0x0]
c0019d64:	90                   	nop
c0019d65:	83 c4 1c             	add    esp,0x1c
c0019d68:	c3                   	ret    
c0019d69:	90                   	nop
c0019d6a:	66 90                	xchg   ax,ax

c0019d6c <FAT::fixFilepath(char*)>:
c0019d6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d70:	8a 00                	mov    al,BYTE PTR [eax]
c0019d72:	0f be c0             	movsx  eax,al
c0019d75:	83 f8 40             	cmp    eax,0x40
c0019d78:	7e 2e                	jle    c0019da8 <FAT::fixFilepath(char*)+0x3c>
c0019d7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d7e:	8a 00                	mov    al,BYTE PTR [eax]
c0019d80:	83 e8 41             	sub    eax,0x41
c0019d83:	88 c2                	mov    dl,al
c0019d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d89:	88 10                	mov    BYTE PTR [eax],dl
c0019d8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d8f:	8a 00                	mov    al,BYTE PTR [eax]
c0019d91:	0f be c0             	movsx  eax,al
c0019d94:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019d9b:	83 c0 30             	add    eax,0x30
c0019d9e:	88 c2                	mov    dl,al
c0019da0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019da4:	88 10                	mov    BYTE PTR [eax],dl
c0019da6:	66 90                	xchg   ax,ax
c0019da8:	90                   	nop
c0019da9:	c3                   	ret    
c0019daa:	66 90                	xchg   ax,ax

c0019dac <FAT::open(char const*, void**, FileOpenMode)>:
c0019dac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019db2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019dba:	74 0c                	je     c0019dc8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019dbc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019dc4:	75 0e                	jne    c0019dd4 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019dc6:	66 90                	xchg   ax,ax
c0019dc8:	b8 04 00 00 00       	mov    eax,0x4
c0019dcd:	e9 46 01 00 00       	jmp    c0019f18 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019dd2:	66 90                	xchg   ax,ax
c0019dd4:	83 ec 08             	sub    esp,0x8
c0019dd7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019dde:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019de2:	50                   	push   eax
c0019de3:	e8 58 68 fe ff       	call   c0000640 <strcpy>
c0019de8:	83 c4 10             	add    esp,0x10
c0019deb:	83 ec 08             	sub    esp,0x8
c0019dee:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019df2:	50                   	push   eax
c0019df3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019dfa:	e8 6d ff ff ff       	call   c0019d6c <FAT::fixFilepath(char*)>
c0019dff:	83 c4 10             	add    esp,0x10
c0019e02:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019e0a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e11:	83 e0 01             	and    eax,0x1
c0019e14:	74 12                	je     c0019e28 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019e16:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e1d:	83 c8 01             	or     eax,0x1
c0019e20:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e27:	90                   	nop
c0019e28:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e2f:	83 e0 04             	and    eax,0x4
c0019e32:	74 24                	je     c0019e58 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019e34:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e3b:	83 c8 30             	or     eax,0x30
c0019e3e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e45:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e4c:	83 c8 02             	or     eax,0x2
c0019e4f:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e56:	66 90                	xchg   ax,ax
c0019e58:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e5f:	83 e0 02             	and    eax,0x2
c0019e62:	74 14                	je     c0019e78 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019e64:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e6b:	83 c8 02             	or     eax,0x2
c0019e6e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e75:	8d 76 00             	lea    esi,[esi+0x0]
c0019e78:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e7f:	83 e0 08             	and    eax,0x8
c0019e82:	74 14                	je     c0019e98 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019e84:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e8b:	83 c8 04             	or     eax,0x4
c0019e8e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e95:	8d 76 00             	lea    esi,[esi+0x0]
c0019e98:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e9f:	83 e0 10             	and    eax,0x10
c0019ea2:	74 14                	je     c0019eb8 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019ea4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019eab:	83 c8 08             	or     eax,0x8
c0019eae:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0019eb8:	83 ec 0c             	sub    esp,0xc
c0019ebb:	68 28 02 00 00       	push   0x228
c0019ec0:	e8 f5 db fe ff       	call   c0007aba <malloc>
c0019ec5:	83 c4 10             	add    esp,0x10
c0019ec8:	89 c2                	mov    edx,eax
c0019eca:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019ed1:	89 10                	mov    DWORD PTR [eax],edx
c0019ed3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019edb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019ee2:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ee4:	83 ec 04             	sub    esp,0x4
c0019ee7:	52                   	push   edx
c0019ee8:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019eec:	52                   	push   edx
c0019eed:	50                   	push   eax
c0019eee:	e8 67 9d fe ff       	call   c0003c5a <f_open>
c0019ef3:	83 c4 10             	add    esp,0x10
c0019ef6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019efd:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019f05:	74 09                	je     c0019f10 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019f07:	b8 01 00 00 00       	mov    eax,0x1
c0019f0c:	eb 0a                	jmp    c0019f18 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019f0e:	66 90                	xchg   ax,ax
c0019f10:	b8 00 00 00 00       	mov    eax,0x0
c0019f15:	8d 76 00             	lea    esi,[esi+0x0]
c0019f18:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f1e:	c3                   	ret    
c0019f1f:	90                   	nop

c0019f20 <FAT::openDir(char const*, void**)>:
c0019f20:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019f26:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019f2e:	74 0c                	je     c0019f3c <FAT::openDir(char const*, void**)+0x1c>
c0019f30:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019f38:	75 0e                	jne    c0019f48 <FAT::openDir(char const*, void**)+0x28>
c0019f3a:	66 90                	xchg   ax,ax
c0019f3c:	b8 04 00 00 00       	mov    eax,0x4
c0019f41:	e9 82 00 00 00       	jmp    c0019fc8 <FAT::openDir(char const*, void**)+0xa8>
c0019f46:	66 90                	xchg   ax,ax
c0019f48:	83 ec 08             	sub    esp,0x8
c0019f4b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f52:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f56:	50                   	push   eax
c0019f57:	e8 e4 66 fe ff       	call   c0000640 <strcpy>
c0019f5c:	83 c4 10             	add    esp,0x10
c0019f5f:	83 ec 08             	sub    esp,0x8
c0019f62:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f66:	50                   	push   eax
c0019f67:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f6e:	e8 f9 fd ff ff       	call   c0019d6c <FAT::fixFilepath(char*)>
c0019f73:	83 c4 10             	add    esp,0x10
c0019f76:	83 ec 0c             	sub    esp,0xc
c0019f79:	6a 30                	push   0x30
c0019f7b:	e8 3a db fe ff       	call   c0007aba <malloc>
c0019f80:	83 c4 10             	add    esp,0x10
c0019f83:	89 c2                	mov    edx,eax
c0019f85:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f8c:	89 10                	mov    DWORD PTR [eax],edx
c0019f8e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f95:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f97:	83 ec 08             	sub    esp,0x8
c0019f9a:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019f9e:	52                   	push   edx
c0019f9f:	50                   	push   eax
c0019fa0:	e8 64 a6 fe ff       	call   c0004609 <f_opendir>
c0019fa5:	83 c4 10             	add    esp,0x10
c0019fa8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019faf:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019fb7:	74 07                	je     c0019fc0 <FAT::openDir(char const*, void**)+0xa0>
c0019fb9:	b8 01 00 00 00       	mov    eax,0x1
c0019fbe:	eb 08                	jmp    c0019fc8 <FAT::openDir(char const*, void**)+0xa8>
c0019fc0:	b8 00 00 00 00       	mov    eax,0x0
c0019fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0019fc8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019fce:	c3                   	ret    
c0019fcf:	90                   	nop

c0019fd0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019fd0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019fd6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019fde:	75 0c                	jne    c0019fec <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019fe0:	b8 04 00 00 00       	mov    eax,0x4
c0019fe5:	e9 d6 00 00 00       	jmp    c001a0c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019fea:	66 90                	xchg   ax,ax
c0019fec:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019ff4:	75 0a                	jne    c001a000 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019ff6:	b8 04 00 00 00       	mov    eax,0x4
c0019ffb:	e9 c0 00 00 00       	jmp    c001a0c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a000:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a008:	75 0a                	jne    c001a014 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001a00a:	b8 04 00 00 00       	mov    eax,0x4
c001a00f:	e9 ac 00 00 00       	jmp    c001a0c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a014:	83 ec 08             	sub    esp,0x8
c001a017:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a01e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a025:	50                   	push   eax
c001a026:	e8 15 66 fe ff       	call   c0000640 <strcpy>
c001a02b:	83 c4 10             	add    esp,0x10
c001a02e:	83 ec 08             	sub    esp,0x8
c001a031:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a038:	50                   	push   eax
c001a039:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a040:	e8 27 fd ff ff       	call   c0019d6c <FAT::fixFilepath(char*)>
c001a045:	83 c4 10             	add    esp,0x10
c001a048:	83 ec 08             	sub    esp,0x8
c001a04b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a04f:	50                   	push   eax
c001a050:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a057:	50                   	push   eax
c001a058:	e8 2b a7 fe ff       	call   c0004788 <f_stat>
c001a05d:	83 c4 10             	add    esp,0x10
c001a060:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a067:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a06e:	85 c0                	test   eax,eax
c001a070:	74 0a                	je     c001a07c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001a072:	83 f8 04             	cmp    eax,0x4
c001a075:	74 39                	je     c001a0b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a077:	eb 3f                	jmp    c001a0b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001a079:	8d 76 00             	lea    esi,[esi+0x0]
c001a07c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a080:	0f b6 c0             	movzx  eax,al
c001a083:	83 e0 10             	and    eax,0x10
c001a086:	0f 95 c2             	setne  dl
c001a089:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a090:	88 10                	mov    BYTE PTR [eax],dl
c001a092:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a096:	ba 00 00 00 00       	mov    edx,0x0
c001a09b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a0a2:	89 01                	mov    DWORD PTR [ecx],eax
c001a0a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a0a7:	b8 00 00 00 00       	mov    eax,0x0
c001a0ac:	eb 12                	jmp    c001a0c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a0ae:	66 90                	xchg   ax,ax
c001a0b0:	b8 02 00 00 00       	mov    eax,0x2
c001a0b5:	eb 09                	jmp    c001a0c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a0b7:	90                   	nop
c001a0b8:	b8 01 00 00 00       	mov    eax,0x1
c001a0bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a0c0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a0c6:	c3                   	ret    
c001a0c7:	90                   	nop

c001a0c8 <FAT::unlink(char const*)>:
c001a0c8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a0ce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a0d6:	75 08                	jne    c001a0e0 <FAT::unlink(char const*)+0x18>
c001a0d8:	b8 04 00 00 00       	mov    eax,0x4
c001a0dd:	eb 61                	jmp    c001a140 <FAT::unlink(char const*)+0x78>
c001a0df:	90                   	nop
c001a0e0:	83 ec 08             	sub    esp,0x8
c001a0e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a0ea:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a0ee:	50                   	push   eax
c001a0ef:	e8 4c 65 fe ff       	call   c0000640 <strcpy>
c001a0f4:	83 c4 10             	add    esp,0x10
c001a0f7:	83 ec 08             	sub    esp,0x8
c001a0fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a0fe:	50                   	push   eax
c001a0ff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a106:	e8 61 fc ff ff       	call   c0019d6c <FAT::fixFilepath(char*)>
c001a10b:	83 c4 10             	add    esp,0x10
c001a10e:	83 ec 0c             	sub    esp,0xc
c001a111:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a115:	50                   	push   eax
c001a116:	e8 df a8 fe ff       	call   c00049fa <f_unlink>
c001a11b:	83 c4 10             	add    esp,0x10
c001a11e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a125:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a12c:	85 c0                	test   eax,eax
c001a12e:	75 08                	jne    c001a138 <FAT::unlink(char const*)+0x70>
c001a130:	b8 00 00 00 00       	mov    eax,0x0
c001a135:	eb 09                	jmp    c001a140 <FAT::unlink(char const*)+0x78>
c001a137:	90                   	nop
c001a138:	b8 01 00 00 00       	mov    eax,0x1
c001a13d:	8d 76 00             	lea    esi,[esi+0x0]
c001a140:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a146:	c3                   	ret    
c001a147:	90                   	nop

c001a148 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a148:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a14e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a155:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a15c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a160:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a164:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a16c:	75 0a                	jne    c001a178 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a16e:	b8 04 00 00 00       	mov    eax,0x4
c001a173:	e9 7c 01 00 00       	jmp    c001a2f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a178:	83 ec 08             	sub    esp,0x8
c001a17b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a182:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a186:	50                   	push   eax
c001a187:	e8 b4 64 fe ff       	call   c0000640 <strcpy>
c001a18c:	83 c4 10             	add    esp,0x10
c001a18f:	83 ec 08             	sub    esp,0x8
c001a192:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a196:	50                   	push   eax
c001a197:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a19e:	e8 c9 fb ff ff       	call   c0019d6c <FAT::fixFilepath(char*)>
c001a1a3:	83 c4 10             	add    esp,0x10
c001a1a6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a1ae:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a1b6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a1bb:	83 e0 01             	and    eax,0x1
c001a1be:	74 14                	je     c001a1d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001a1c0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1c7:	83 c8 01             	or     eax,0x1
c001a1ca:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a1d1:	8d 76 00             	lea    esi,[esi+0x0]
c001a1d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a1d9:	83 e0 02             	and    eax,0x2
c001a1dc:	74 12                	je     c001a1f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001a1de:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1e5:	83 c8 20             	or     eax,0x20
c001a1e8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a1ef:	90                   	nop
c001a1f0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a1f5:	83 e0 04             	and    eax,0x4
c001a1f8:	74 12                	je     c001a20c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001a1fa:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a201:	83 c8 04             	or     eax,0x4
c001a204:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a20b:	90                   	nop
c001a20c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a211:	83 e0 08             	and    eax,0x8
c001a214:	74 12                	je     c001a228 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001a216:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a21d:	83 c8 02             	or     eax,0x2
c001a220:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a227:	90                   	nop
c001a228:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a22d:	83 e0 01             	and    eax,0x1
c001a230:	74 12                	je     c001a244 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001a232:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a239:	83 c8 01             	or     eax,0x1
c001a23c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a243:	90                   	nop
c001a244:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a249:	83 e0 02             	and    eax,0x2
c001a24c:	74 12                	je     c001a260 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001a24e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a255:	83 c8 20             	or     eax,0x20
c001a258:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a25f:	90                   	nop
c001a260:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a265:	83 e0 04             	and    eax,0x4
c001a268:	74 12                	je     c001a27c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001a26a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a271:	83 c8 04             	or     eax,0x4
c001a274:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a27b:	90                   	nop
c001a27c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a281:	83 e0 08             	and    eax,0x8
c001a284:	74 12                	je     c001a298 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001a286:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a28d:	83 c8 02             	or     eax,0x2
c001a290:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a297:	90                   	nop
c001a298:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a29f:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a2a6:	09 d0                	or     eax,edx
c001a2a8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a2af:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a2b7:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a2bf:	83 ec 04             	sub    esp,0x4
c001a2c2:	52                   	push   edx
c001a2c3:	50                   	push   eax
c001a2c4:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a2c8:	50                   	push   eax
c001a2c9:	e8 a1 ab fe ff       	call   c0004e6f <f_chmod>
c001a2ce:	83 c4 10             	add    esp,0x10
c001a2d1:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a2d8:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a2df:	85 c0                	test   eax,eax
c001a2e1:	75 09                	jne    c001a2ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001a2e3:	b8 00 00 00 00       	mov    eax,0x0
c001a2e8:	eb 0a                	jmp    c001a2f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a2ea:	66 90                	xchg   ax,ax
c001a2ec:	b8 01 00 00 00       	mov    eax,0x1
c001a2f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a2f4:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a2fa:	c3                   	ret    
c001a2fb:	90                   	nop

c001a2fc <FAT::rename(char const*, char const*)>:
c001a2fc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a302:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a30a:	74 0c                	je     c001a318 <FAT::rename(char const*, char const*)+0x1c>
c001a30c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a314:	75 0e                	jne    c001a324 <FAT::rename(char const*, char const*)+0x28>
c001a316:	66 90                	xchg   ax,ax
c001a318:	b8 04 00 00 00       	mov    eax,0x4
c001a31d:	e9 9e 00 00 00       	jmp    c001a3c0 <FAT::rename(char const*, char const*)+0xc4>
c001a322:	66 90                	xchg   ax,ax
c001a324:	83 ec 08             	sub    esp,0x8
c001a327:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a32e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a335:	50                   	push   eax
c001a336:	e8 05 63 fe ff       	call   c0000640 <strcpy>
c001a33b:	83 c4 10             	add    esp,0x10
c001a33e:	83 ec 08             	sub    esp,0x8
c001a341:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a348:	50                   	push   eax
c001a349:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a350:	e8 17 fa ff ff       	call   c0019d6c <FAT::fixFilepath(char*)>
c001a355:	83 c4 10             	add    esp,0x10
c001a358:	83 ec 08             	sub    esp,0x8
c001a35b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a362:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a366:	50                   	push   eax
c001a367:	e8 d4 62 fe ff       	call   c0000640 <strcpy>
c001a36c:	83 c4 10             	add    esp,0x10
c001a36f:	83 ec 08             	sub    esp,0x8
c001a372:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a376:	50                   	push   eax
c001a377:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a37e:	e8 e9 f9 ff ff       	call   c0019d6c <FAT::fixFilepath(char*)>
c001a383:	83 c4 10             	add    esp,0x10
c001a386:	83 ec 08             	sub    esp,0x8
c001a389:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a38d:	50                   	push   eax
c001a38e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a395:	50                   	push   eax
c001a396:	e8 1c a9 fe ff       	call   c0004cb7 <f_rename>
c001a39b:	83 c4 10             	add    esp,0x10
c001a39e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a3a5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a3ac:	85 c0                	test   eax,eax
c001a3ae:	75 08                	jne    c001a3b8 <FAT::rename(char const*, char const*)+0xbc>
c001a3b0:	b8 00 00 00 00       	mov    eax,0x0
c001a3b5:	eb 09                	jmp    c001a3c0 <FAT::rename(char const*, char const*)+0xc4>
c001a3b7:	90                   	nop
c001a3b8:	b8 01 00 00 00       	mov    eax,0x1
c001a3bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a3c0:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a3c6:	c3                   	ret    
c001a3c7:	90                   	nop

c001a3c8 <FAT::mkdir(char const*)>:
c001a3c8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a3ce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a3d6:	75 08                	jne    c001a3e0 <FAT::mkdir(char const*)+0x18>
c001a3d8:	b8 04 00 00 00       	mov    eax,0x4
c001a3dd:	eb 61                	jmp    c001a440 <FAT::mkdir(char const*)+0x78>
c001a3df:	90                   	nop
c001a3e0:	83 ec 08             	sub    esp,0x8
c001a3e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a3ea:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a3ee:	50                   	push   eax
c001a3ef:	e8 4c 62 fe ff       	call   c0000640 <strcpy>
c001a3f4:	83 c4 10             	add    esp,0x10
c001a3f7:	83 ec 08             	sub    esp,0x8
c001a3fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a3fe:	50                   	push   eax
c001a3ff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a406:	e8 61 f9 ff ff       	call   c0019d6c <FAT::fixFilepath(char*)>
c001a40b:	83 c4 10             	add    esp,0x10
c001a40e:	83 ec 0c             	sub    esp,0xc
c001a411:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a415:	50                   	push   eax
c001a416:	e8 01 a7 fe ff       	call   c0004b1c <f_mkdir>
c001a41b:	83 c4 10             	add    esp,0x10
c001a41e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a425:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a42c:	85 c0                	test   eax,eax
c001a42e:	75 08                	jne    c001a438 <FAT::mkdir(char const*)+0x70>
c001a430:	b8 00 00 00 00       	mov    eax,0x0
c001a435:	eb 09                	jmp    c001a440 <FAT::mkdir(char const*)+0x78>
c001a437:	90                   	nop
c001a438:	b8 01 00 00 00       	mov    eax,0x1
c001a43d:	8d 76 00             	lea    esi,[esi+0x0]
c001a440:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a446:	c3                   	ret    
c001a447:	90                   	nop

c001a448 <FAT::exists(char const*)>:
c001a448:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a44e:	83 ec 08             	sub    esp,0x8
c001a451:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a458:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a45c:	50                   	push   eax
c001a45d:	e8 de 61 fe ff       	call   c0000640 <strcpy>
c001a462:	83 c4 10             	add    esp,0x10
c001a465:	83 ec 08             	sub    esp,0x8
c001a468:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a46c:	50                   	push   eax
c001a46d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a474:	e8 f3 f8 ff ff       	call   c0019d6c <FAT::fixFilepath(char*)>
c001a479:	83 c4 10             	add    esp,0x10
c001a47c:	83 ec 08             	sub    esp,0x8
c001a47f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a486:	50                   	push   eax
c001a487:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a48b:	50                   	push   eax
c001a48c:	e8 f7 a2 fe ff       	call   c0004788 <f_stat>
c001a491:	83 c4 10             	add    esp,0x10
c001a494:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a49b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a4a2:	85 c0                	test   eax,eax
c001a4a4:	75 06                	jne    c001a4ac <FAT::exists(char const*)+0x64>
c001a4a6:	b0 01                	mov    al,0x1
c001a4a8:	eb 06                	jmp    c001a4b0 <FAT::exists(char const*)+0x68>
c001a4aa:	66 90                	xchg   ax,ax
c001a4ac:	b0 00                	mov    al,0x0
c001a4ae:	66 90                	xchg   ax,ax
c001a4b0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a4b6:	c3                   	ret    
c001a4b7:	90                   	nop

c001a4b8 <isoReadDiscSectorHelper>:
c001a4b8:	83 ec 2c             	sub    esp,0x2c
c001a4bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a4bf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a4c3:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a4c8:	83 e8 41             	sub    eax,0x41
c001a4cb:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a4d2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a4d6:	ba 00 00 00 00       	mov    edx,0x0
c001a4db:	83 ec 0c             	sub    esp,0xc
c001a4de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a4e2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a4e6:	52                   	push   edx
c001a4e7:	50                   	push   eax
c001a4e8:	51                   	push   ecx
c001a4e9:	e8 d6 38 ff ff       	call   c000ddc4 <LogicalDisk::read(unsigned long long, int, void*)>
c001a4ee:	83 c4 20             	add    esp,0x20
c001a4f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a4f5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a4fa:	74 0c                	je     c001a508 <isoReadDiscSectorHelper+0x50>
c001a4fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a500:	c1 e0 0b             	shl    eax,0xb
c001a503:	eb 0b                	jmp    c001a510 <isoReadDiscSectorHelper+0x58>
c001a505:	8d 76 00             	lea    esi,[esi+0x0]
c001a508:	b8 00 00 00 00       	mov    eax,0x0
c001a50d:	8d 76 00             	lea    esi,[esi+0x0]
c001a510:	83 c4 2c             	add    esp,0x2c
c001a513:	c3                   	ret    

c001a514 <iso_kprintf>:
c001a514:	83 ec 0c             	sub    esp,0xc
c001a517:	83 ec 08             	sub    esp,0x8
c001a51a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a51e:	68 6e 2d 02 c0       	push   0xc0022d6e
c001a523:	e8 21 04 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001a528:	83 c4 10             	add    esp,0x10
c001a52b:	90                   	nop
c001a52c:	83 c4 0c             	add    esp,0xc
c001a52f:	c3                   	ret    

c001a530 <iso_kprintfd>:
c001a530:	83 ec 0c             	sub    esp,0xc
c001a533:	83 ec 08             	sub    esp,0x8
c001a536:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a53a:	68 12 14 02 c0       	push   0xc0021412
c001a53f:	e8 05 04 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001a544:	83 c4 10             	add    esp,0x10
c001a547:	90                   	nop
c001a548:	83 c4 0c             	add    esp,0xc
c001a54b:	c3                   	ret    

c001a54c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a54c:	b8 08 00 00 00       	mov    eax,0x8
c001a551:	c3                   	ret    

c001a552 <ISO9660::truncate(void*, unsigned long long)>:
c001a552:	b8 01 00 00 00       	mov    eax,0x1
c001a557:	c3                   	ret    

c001a558 <ISO9660::getName()>:
c001a558:	b8 24 30 02 c0       	mov    eax,0xc0023024
c001a55d:	c3                   	ret    

c001a55e <ISO9660::closeDir(void*)>:
c001a55e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a562:	8b 00                	mov    eax,DWORD PTR [eax]
c001a564:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a567:	90                   	nop

c001a568 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a568:	b8 01 00 00 00       	mov    eax,0x1
c001a56d:	c3                   	ret    

c001a56e <ISO9660::unlink(char const*)>:
c001a56e:	b8 01 00 00 00       	mov    eax,0x1
c001a573:	c3                   	ret    

c001a574 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a574:	b8 03 00 00 00       	mov    eax,0x3
c001a579:	c3                   	ret    

c001a57a <ISO9660::rename(char const*, char const*)>:
c001a57a:	b8 01 00 00 00       	mov    eax,0x1
c001a57f:	c3                   	ret    

c001a580 <ISO9660::mkdir(char const*)>:
c001a580:	b8 01 00 00 00       	mov    eax,0x1
c001a585:	c3                   	ret    

c001a586 <ISO9660::~ISO9660()>:
c001a586:	83 ec 0c             	sub    esp,0xc
c001a589:	ba 64 31 02 c0       	mov    edx,0xc0023164
c001a58e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a592:	89 10                	mov    DWORD PTR [eax],edx
c001a594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a598:	83 ec 0c             	sub    esp,0xc
c001a59b:	50                   	push   eax
c001a59c:	e8 31 12 ff ff       	call   c000b7d2 <Filesystem::~Filesystem()>
c001a5a1:	83 c4 10             	add    esp,0x10
c001a5a4:	90                   	nop
c001a5a5:	83 c4 0c             	add    esp,0xc
c001a5a8:	c3                   	ret    
c001a5a9:	90                   	nop

c001a5aa <ISO9660::~ISO9660()>:
c001a5aa:	83 ec 0c             	sub    esp,0xc
c001a5ad:	83 ec 0c             	sub    esp,0xc
c001a5b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5b4:	e8 cd ff ff ff       	call   c001a586 <ISO9660::~ISO9660()>
c001a5b9:	83 c4 10             	add    esp,0x10
c001a5bc:	83 ec 08             	sub    esp,0x8
c001a5bf:	6a 08                	push   0x8
c001a5c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5c5:	e8 52 02 ff ff       	call   c000a81c <operator delete(void*, unsigned long)>
c001a5ca:	83 c4 10             	add    esp,0x10
c001a5cd:	83 c4 0c             	add    esp,0xc
c001a5d0:	c3                   	ret    
c001a5d1:	90                   	nop

c001a5d2 <ISO9660::exists(char const*)>:
c001a5d2:	83 ec 18             	sub    esp,0x18
c001a5d5:	68 3f 30 02 c0       	push   0xc002303f
c001a5da:	e8 e4 70 ff ff       	call   c00116c3 <KePanic(char const*)>
c001a5df:	31 c0                	xor    eax,eax
c001a5e1:	83 c4 1c             	add    esp,0x1c
c001a5e4:	c3                   	ret    
c001a5e5:	90                   	nop

c001a5e6 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a5e6:	56                   	push   esi
c001a5e7:	53                   	push   ebx
c001a5e8:	53                   	push   ebx
c001a5e9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a5ed:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a5f1:	85 db                	test   ebx,ebx
c001a5f3:	0f 84 ca 00 00 00    	je     c001a6c3 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a5f9:	85 f6                	test   esi,esi
c001a5fb:	0f 84 c2 00 00 00    	je     c001a6c3 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a601:	b8 03 00 00 00       	mov    eax,0x3
c001a606:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a60b:	0f 85 b7 00 00 00    	jne    c001a6c8 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a611:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a613:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a61a:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a620:	74 1b                	je     c001a63d <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a622:	85 c0                	test   eax,eax
c001a624:	74 10                	je     c001a636 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a626:	83 ec 0c             	sub    esp,0xc
c001a629:	68 5d 30 02 c0       	push   0xc002305d
c001a62e:	e8 90 70 ff ff       	call   c00116c3 <KePanic(char const*)>
c001a633:	83 c4 10             	add    esp,0x10
c001a636:	8a 03                	mov    al,BYTE PTR [ebx]
c001a638:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a63d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a640:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a647:	85 c0                	test   eax,eax
c001a649:	74 09                	je     c001a654 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a64b:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a652:	74 48                	je     c001a69c <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a654:	83 ec 0c             	sub    esp,0xc
c001a657:	68 6d 30 02 c0       	push   0xc002306d
c001a65c:	e8 e8 02 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001a661:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a664:	83 c4 10             	add    esp,0x10
c001a667:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a66e:	85 c0                	test   eax,eax
c001a670:	74 17                	je     c001a689 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a672:	83 ec 0c             	sub    esp,0xc
c001a675:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a67c:	68 8d 30 02 c0       	push   0xc002308d
c001a681:	e8 c3 02 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001a686:	83 c4 10             	add    esp,0x10
c001a689:	83 ec 0c             	sub    esp,0xc
c001a68c:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a693:	50                   	push   eax
c001a694:	e8 ad c3 fe ff       	call   c0006a46 <init_percd>
c001a699:	83 c4 10             	add    esp,0x10
c001a69c:	83 c3 03             	add    ebx,0x3
c001a69f:	51                   	push   ecx
c001a6a0:	51                   	push   ecx
c001a6a1:	6a 00                	push   0x0
c001a6a3:	53                   	push   ebx
c001a6a4:	e8 64 be fe ff       	call   c000650d <iso_open>
c001a6a9:	83 c4 10             	add    esp,0x10
c001a6ac:	89 c2                	mov    edx,eax
c001a6ae:	b8 01 00 00 00       	mov    eax,0x1
c001a6b3:	83 fa ff             	cmp    edx,0xffffffff
c001a6b6:	74 10                	je     c001a6c8 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a6b8:	83 c2 32             	add    edx,0x32
c001a6bb:	31 c0                	xor    eax,eax
c001a6bd:	01 d2                	add    edx,edx
c001a6bf:	89 16                	mov    DWORD PTR [esi],edx
c001a6c1:	eb 05                	jmp    c001a6c8 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a6c3:	b8 04 00 00 00       	mov    eax,0x4
c001a6c8:	5a                   	pop    edx
c001a6c9:	5b                   	pop    ebx
c001a6ca:	5e                   	pop    esi
c001a6cb:	c3                   	ret    

c001a6cc <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a6cc:	53                   	push   ebx
c001a6cd:	83 ec 08             	sub    esp,0x8
c001a6d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a6d8:	85 c0                	test   eax,eax
c001a6da:	74 2d                	je     c001a709 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a6dc:	85 db                	test   ebx,ebx
c001a6de:	74 29                	je     c001a709 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a6e0:	b9 02 00 00 00       	mov    ecx,0x2
c001a6e5:	52                   	push   edx
c001a6e6:	99                   	cdq    
c001a6e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6eb:	f7 f9                	idiv   ecx
c001a6ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a6f1:	83 e8 32             	sub    eax,0x32
c001a6f4:	50                   	push   eax
c001a6f5:	e8 bb be fe ff       	call   c00065b5 <iso_read>
c001a6fa:	83 c4 10             	add    esp,0x10
c001a6fd:	89 03                	mov    DWORD PTR [ebx],eax
c001a6ff:	09 d0                	or     eax,edx
c001a701:	0f 94 c0             	sete   al
c001a704:	0f b6 c0             	movzx  eax,al
c001a707:	eb 05                	jmp    c001a70e <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a709:	b8 04 00 00 00       	mov    eax,0x4
c001a70e:	83 c4 08             	add    esp,0x8
c001a711:	5b                   	pop    ebx
c001a712:	c3                   	ret    
c001a713:	90                   	nop

c001a714 <ISO9660::seek(void*, unsigned long long)>:
c001a714:	57                   	push   edi
c001a715:	56                   	push   esi
c001a716:	b8 04 00 00 00       	mov    eax,0x4
c001a71b:	51                   	push   ecx
c001a71c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a720:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a724:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a728:	85 d2                	test   edx,edx
c001a72a:	74 26                	je     c001a752 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a72c:	6a 00                	push   0x0
c001a72e:	b9 02 00 00 00       	mov    ecx,0x2
c001a733:	57                   	push   edi
c001a734:	89 d0                	mov    eax,edx
c001a736:	56                   	push   esi
c001a737:	99                   	cdq    
c001a738:	f7 f9                	idiv   ecx
c001a73a:	83 e8 32             	sub    eax,0x32
c001a73d:	50                   	push   eax
c001a73e:	e8 88 bf fe ff       	call   c00066cb <iso_seek>
c001a743:	83 c4 10             	add    esp,0x10
c001a746:	31 f0                	xor    eax,esi
c001a748:	31 fa                	xor    edx,edi
c001a74a:	09 d0                	or     eax,edx
c001a74c:	0f 95 c0             	setne  al
c001a74f:	0f b6 c0             	movzx  eax,al
c001a752:	5a                   	pop    edx
c001a753:	5e                   	pop    esi
c001a754:	5f                   	pop    edi
c001a755:	c3                   	ret    

c001a756 <ISO9660::tell(void*, unsigned long long*)>:
c001a756:	53                   	push   ebx
c001a757:	83 ec 08             	sub    esp,0x8
c001a75a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a75e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a762:	85 c0                	test   eax,eax
c001a764:	74 24                	je     c001a78a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a766:	85 db                	test   ebx,ebx
c001a768:	74 20                	je     c001a78a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a76a:	83 ec 0c             	sub    esp,0xc
c001a76d:	b9 02 00 00 00       	mov    ecx,0x2
c001a772:	99                   	cdq    
c001a773:	f7 f9                	idiv   ecx
c001a775:	83 e8 32             	sub    eax,0x32
c001a778:	50                   	push   eax
c001a779:	e8 d1 bf fe ff       	call   c000674f <iso_tell>
c001a77e:	83 c4 10             	add    esp,0x10
c001a781:	89 03                	mov    DWORD PTR [ebx],eax
c001a783:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a786:	31 c0                	xor    eax,eax
c001a788:	eb 05                	jmp    c001a78f <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a78a:	b8 04 00 00 00       	mov    eax,0x4
c001a78f:	83 c4 08             	add    esp,0x8
c001a792:	5b                   	pop    ebx
c001a793:	c3                   	ret    

c001a794 <ISO9660::stat(void*, unsigned long long*)>:
c001a794:	53                   	push   ebx
c001a795:	83 ec 14             	sub    esp,0x14
c001a798:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a79c:	68 b1 30 02 c0       	push   0xc00230b1
c001a7a1:	e8 a3 01 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001a7a6:	83 c4 10             	add    esp,0x10
c001a7a9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a7ae:	74 2c                	je     c001a7dc <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a7b0:	85 db                	test   ebx,ebx
c001a7b2:	74 28                	je     c001a7dc <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a7b4:	83 ec 0c             	sub    esp,0xc
c001a7b7:	b9 02 00 00 00       	mov    ecx,0x2
c001a7bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7c0:	99                   	cdq    
c001a7c1:	f7 f9                	idiv   ecx
c001a7c3:	83 e8 32             	sub    eax,0x32
c001a7c6:	50                   	push   eax
c001a7c7:	e8 b4 bf fe ff       	call   c0006780 <iso_total>
c001a7cc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a7d3:	89 03                	mov    DWORD PTR [ebx],eax
c001a7d5:	83 c4 10             	add    esp,0x10
c001a7d8:	31 c0                	xor    eax,eax
c001a7da:	eb 05                	jmp    c001a7e1 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a7dc:	b8 04 00 00 00       	mov    eax,0x4
c001a7e1:	83 c4 08             	add    esp,0x8
c001a7e4:	5b                   	pop    ebx
c001a7e5:	c3                   	ret    

c001a7e6 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a7e6:	55                   	push   ebp
c001a7e7:	57                   	push   edi
c001a7e8:	56                   	push   esi
c001a7e9:	53                   	push   ebx
c001a7ea:	83 ec 18             	sub    esp,0x18
c001a7ed:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a7f1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a7f5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a7f9:	68 b9 30 02 c0       	push   0xc00230b9
c001a7fe:	e8 46 01 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001a803:	83 c4 10             	add    esp,0x10
c001a806:	85 ff                	test   edi,edi
c001a808:	0f 94 c0             	sete   al
c001a80b:	85 f6                	test   esi,esi
c001a80d:	0f 94 c2             	sete   dl
c001a810:	09 d0                	or     eax,edx
c001a812:	a8 01                	test   al,0x1
c001a814:	0f 85 dd 00 00 00    	jne    c001a8f7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a81a:	85 db                	test   ebx,ebx
c001a81c:	0f 84 d5 00 00 00    	je     c001a8f7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a822:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a825:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a82b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a832:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a839:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a83b:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a841:	74 1b                	je     c001a85e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a843:	85 c0                	test   eax,eax
c001a845:	74 10                	je     c001a857 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a847:	83 ec 0c             	sub    esp,0xc
c001a84a:	68 5d 30 02 c0       	push   0xc002305d
c001a84f:	e8 6f 6e ff ff       	call   c00116c3 <KePanic(char const*)>
c001a854:	83 c4 10             	add    esp,0x10
c001a857:	8a 03                	mov    al,BYTE PTR [ebx]
c001a859:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a85e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a861:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a868:	85 c0                	test   eax,eax
c001a86a:	74 09                	je     c001a875 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a86c:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a873:	74 51                	je     c001a8c6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a875:	83 ec 0c             	sub    esp,0xc
c001a878:	68 c1 30 02 c0       	push   0xc00230c1
c001a87d:	e8 c7 00 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001a882:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a885:	83 c4 10             	add    esp,0x10
c001a888:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a890:	74 21                	je     c001a8b3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a892:	83 ec 0c             	sub    esp,0xc
c001a895:	68 e1 30 02 c0       	push   0xc00230e1
c001a89a:	e8 aa 00 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001a89f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a8a2:	83 c4 10             	add    esp,0x10
c001a8a5:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a8ac:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a8b3:	83 ec 0c             	sub    esp,0xc
c001a8b6:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a8bd:	50                   	push   eax
c001a8be:	e8 83 c1 fe ff       	call   c0006a46 <init_percd>
c001a8c3:	83 c4 10             	add    esp,0x10
c001a8c6:	83 c3 03             	add    ebx,0x3
c001a8c9:	52                   	push   edx
c001a8ca:	52                   	push   edx
c001a8cb:	6a 00                	push   0x0
c001a8cd:	53                   	push   ebx
c001a8ce:	e8 3a bc fe ff       	call   c000650d <iso_open>
c001a8d3:	83 c4 10             	add    esp,0x10
c001a8d6:	89 c5                	mov    ebp,eax
c001a8d8:	83 f8 ff             	cmp    eax,0xffffffff
c001a8db:	75 21                	jne    c001a8fe <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a8dd:	50                   	push   eax
c001a8de:	50                   	push   eax
c001a8df:	6a 01                	push   0x1
c001a8e1:	53                   	push   ebx
c001a8e2:	e8 26 bc fe ff       	call   c000650d <iso_open>
c001a8e7:	83 c4 10             	add    esp,0x10
c001a8ea:	ba 02 00 00 00       	mov    edx,0x2
c001a8ef:	40                   	inc    eax
c001a8f0:	74 2b                	je     c001a91d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a8f2:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a8f5:	eb 24                	jmp    c001a91b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a8f7:	ba 04 00 00 00       	mov    edx,0x4
c001a8fc:	eb 1f                	jmp    c001a91d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a8fe:	83 ec 0c             	sub    esp,0xc
c001a901:	50                   	push   eax
c001a902:	e8 79 be fe ff       	call   c0006780 <iso_total>
c001a907:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a90e:	89 07                	mov    DWORD PTR [edi],eax
c001a910:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a913:	e8 7f bc fe ff       	call   c0006597 <iso_close>
c001a918:	83 c4 10             	add    esp,0x10
c001a91b:	31 d2                	xor    edx,edx
c001a91d:	83 c4 0c             	add    esp,0xc
c001a920:	89 d0                	mov    eax,edx
c001a922:	5b                   	pop    ebx
c001a923:	5e                   	pop    esi
c001a924:	5f                   	pop    edi
c001a925:	5d                   	pop    ebp
c001a926:	c3                   	ret    
c001a927:	90                   	nop

c001a928 <ISO9660::close(void*)>:
c001a928:	83 ec 0c             	sub    esp,0xc
c001a92b:	b8 04 00 00 00       	mov    eax,0x4
c001a930:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a934:	85 d2                	test   edx,edx
c001a936:	74 1b                	je     c001a953 <ISO9660::close(void*)+0x2b>
c001a938:	83 ec 0c             	sub    esp,0xc
c001a93b:	b9 02 00 00 00       	mov    ecx,0x2
c001a940:	89 d0                	mov    eax,edx
c001a942:	99                   	cdq    
c001a943:	f7 f9                	idiv   ecx
c001a945:	83 e8 32             	sub    eax,0x32
c001a948:	50                   	push   eax
c001a949:	e8 49 bc fe ff       	call   c0006597 <iso_close>
c001a94e:	83 c4 10             	add    esp,0x10
c001a951:	31 c0                	xor    eax,eax
c001a953:	83 c4 0c             	add    esp,0xc
c001a956:	c3                   	ret    
c001a957:	90                   	nop

c001a958 <ISO9660::openDir(char const*, void**)>:
c001a958:	56                   	push   esi
c001a959:	53                   	push   ebx
c001a95a:	50                   	push   eax
c001a95b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a95f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a963:	85 db                	test   ebx,ebx
c001a965:	0f 84 bd 00 00 00    	je     c001aa28 <ISO9660::openDir(char const*, void**)+0xd0>
c001a96b:	85 f6                	test   esi,esi
c001a96d:	0f 84 b5 00 00 00    	je     c001aa28 <ISO9660::openDir(char const*, void**)+0xd0>
c001a973:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a975:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a97c:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a982:	74 1b                	je     c001a99f <ISO9660::openDir(char const*, void**)+0x47>
c001a984:	85 c0                	test   eax,eax
c001a986:	74 10                	je     c001a998 <ISO9660::openDir(char const*, void**)+0x40>
c001a988:	83 ec 0c             	sub    esp,0xc
c001a98b:	68 5d 30 02 c0       	push   0xc002305d
c001a990:	e8 2e 6d ff ff       	call   c00116c3 <KePanic(char const*)>
c001a995:	83 c4 10             	add    esp,0x10
c001a998:	8a 03                	mov    al,BYTE PTR [ebx]
c001a99a:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a99f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a9a2:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a9a9:	85 c0                	test   eax,eax
c001a9ab:	74 10                	je     c001a9bd <ISO9660::openDir(char const*, void**)+0x65>
c001a9ad:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a9b4:	74 1a                	je     c001a9d0 <ISO9660::openDir(char const*, void**)+0x78>
c001a9b6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a9bd:	83 ec 0c             	sub    esp,0xc
c001a9c0:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a9c7:	50                   	push   eax
c001a9c8:	e8 79 c0 fe ff       	call   c0006a46 <init_percd>
c001a9cd:	83 c4 10             	add    esp,0x10
c001a9d0:	83 c3 03             	add    ebx,0x3
c001a9d3:	50                   	push   eax
c001a9d4:	50                   	push   eax
c001a9d5:	6a 01                	push   0x1
c001a9d7:	53                   	push   ebx
c001a9d8:	e8 30 bb fe ff       	call   c000650d <iso_open>
c001a9dd:	83 c4 10             	add    esp,0x10
c001a9e0:	89 c3                	mov    ebx,eax
c001a9e2:	83 f8 ff             	cmp    eax,0xffffffff
c001a9e5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a9ea:	75 1c                	jne    c001aa08 <ISO9660::openDir(char const*, void**)+0xb0>
c001a9ec:	53                   	push   ebx
c001a9ed:	53                   	push   ebx
c001a9ee:	68 05 31 02 c0       	push   0xc0023105
c001a9f3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a9f9:	e8 ac e0 fe ff       	call   c0008aaa <VgaText::puts(char const*)>
c001a9fe:	83 c4 10             	add    esp,0x10
c001aa01:	b8 01 00 00 00       	mov    eax,0x1
c001aa06:	eb 25                	jmp    c001aa2d <ISO9660::openDir(char const*, void**)+0xd5>
c001aa08:	01 db                	add    ebx,ebx
c001aa0a:	51                   	push   ecx
c001aa0b:	83 c3 65             	add    ebx,0x65
c001aa0e:	51                   	push   ecx
c001aa0f:	68 18 31 02 c0       	push   0xc0023118
c001aa14:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa1a:	e8 8b e0 fe ff       	call   c0008aaa <VgaText::puts(char const*)>
c001aa1f:	89 1e                	mov    DWORD PTR [esi],ebx
c001aa21:	83 c4 10             	add    esp,0x10
c001aa24:	31 c0                	xor    eax,eax
c001aa26:	eb 05                	jmp    c001aa2d <ISO9660::openDir(char const*, void**)+0xd5>
c001aa28:	b8 04 00 00 00       	mov    eax,0x4
c001aa2d:	5a                   	pop    edx
c001aa2e:	5b                   	pop    ebx
c001aa2f:	5e                   	pop    esi
c001aa30:	c3                   	ret    
c001aa31:	90                   	nop

c001aa32 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001aa32:	55                   	push   ebp
c001aa33:	57                   	push   edi
c001aa34:	56                   	push   esi
c001aa35:	53                   	push   ebx
c001aa36:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa3c:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001aa43:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aa4a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001aa52:	0f 84 e7 00 00 00    	je     c001ab3f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001aa58:	85 db                	test   ebx,ebx
c001aa5a:	0f 84 df 00 00 00    	je     c001ab3f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001aa60:	83 ec 0c             	sub    esp,0xc
c001aa63:	68 2b 31 02 c0       	push   0xc002312b
c001aa68:	e8 dc fe fe ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001aa6d:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001aa74:	b9 02 00 00 00       	mov    ecx,0x2
c001aa79:	99                   	cdq    
c001aa7a:	f7 f9                	idiv   ecx
c001aa7c:	83 e8 32             	sub    eax,0x32
c001aa7f:	89 04 24             	mov    DWORD PTR [esp],eax
c001aa82:	e8 4b bd fe ff       	call   c00067d2 <iso_readdir>
c001aa87:	83 c4 10             	add    esp,0x10
c001aa8a:	89 c6                	mov    esi,eax
c001aa8c:	85 c0                	test   eax,eax
c001aa8e:	75 37                	jne    c001aac7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001aa90:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aa95:	56                   	push   esi
c001aa96:	56                   	push   esi
c001aa97:	68 36 31 02 c0       	push   0xc0023136
c001aa9c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aaa2:	e8 03 e0 fe ff       	call   c0008aaa <VgaText::puts(char const*)>
c001aaa7:	83 c4 0c             	add    esp,0xc
c001aaaa:	68 10 01 00 00       	push   0x110
c001aaaf:	6a 00                	push   0x0
c001aab1:	57                   	push   edi
c001aab2:	e8 39 5a fe ff       	call   c00004f0 <memset>
c001aab7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001aabd:	83 c4 10             	add    esp,0x10
c001aac0:	b8 01 00 00 00       	mov    eax,0x1
c001aac5:	eb 7d                	jmp    c001ab44 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001aac7:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001aacd:	8d 68 08             	lea    ebp,[eax+0x8]
c001aad0:	83 ec 0c             	sub    esp,0xc
c001aad3:	55                   	push   ebp
c001aad4:	e8 97 5a fe ff       	call   c0000570 <strlen>
c001aad9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001aae1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aae5:	83 c4 10             	add    esp,0x10
c001aae8:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001aaec:	75 0a                	jne    c001aaf8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001aaee:	b8 02 00 00 00       	mov    eax,0x2
c001aaf3:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001aaf6:	74 05                	je     c001aafd <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001aaf8:	b8 01 00 00 00       	mov    eax,0x1
c001aafd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab01:	50                   	push   eax
c001ab02:	50                   	push   eax
c001ab03:	55                   	push   ebp
c001ab04:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ab08:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001ab0c:	50                   	push   eax
c001ab0d:	e8 2e 5b fe ff       	call   c0000640 <strcpy>
c001ab12:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001ab19:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab1b:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001ab21:	5a                   	pop    edx
c001ab22:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001ab27:	59                   	pop    ecx
c001ab28:	68 49 31 02 c0       	push   0xc0023149
c001ab2d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001ab33:	e8 72 df fe ff       	call   c0008aaa <VgaText::puts(char const*)>
c001ab38:	83 c4 10             	add    esp,0x10
c001ab3b:	31 c0                	xor    eax,eax
c001ab3d:	eb 05                	jmp    c001ab44 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001ab3f:	b8 04 00 00 00       	mov    eax,0x4
c001ab44:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ab4a:	5b                   	pop    ebx
c001ab4b:	5e                   	pop    esi
c001ab4c:	5f                   	pop    edi
c001ab4d:	5d                   	pop    ebp
c001ab4e:	c3                   	ret    

c001ab4f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ab4f:	57                   	push   edi
c001ab50:	56                   	push   esi
c001ab51:	53                   	push   ebx
c001ab52:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab56:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ab5a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ab5e:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001ab64:	0f be cb             	movsx  ecx,bl
c001ab67:	75 0b                	jne    c001ab74 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001ab69:	0f be 05 80 43 02 c0 	movsx  eax,BYTE PTR ds:0xc0024380
c001ab70:	39 c8                	cmp    eax,ecx
c001ab72:	74 47                	je     c001abbb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001ab74:	83 ec 0c             	sub    esp,0xc
c001ab77:	31 d2                	xor    edx,edx
c001ab79:	68 a0 c8 02 c0       	push   0xc002c8a0
c001ab7e:	6a 01                	push   0x1
c001ab80:	52                   	push   edx
c001ab81:	56                   	push   esi
c001ab82:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001ab89:	e8 36 32 ff ff       	call   c000ddc4 <LogicalDisk::read(unsigned long long, int, void*)>
c001ab8e:	83 c4 20             	add    esp,0x20
c001ab91:	85 c0                	test   eax,eax
c001ab93:	75 0e                	jne    c001aba3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001ab95:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001ab9b:	88 1d 80 43 02 c0    	mov    BYTE PTR ds:0xc0024380,bl
c001aba1:	eb 18                	jmp    c001abbb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aba3:	50                   	push   eax
c001aba4:	68 00 08 00 00       	push   0x800
c001aba9:	6a 00                	push   0x0
c001abab:	57                   	push   edi
c001abac:	e8 3f 59 fe ff       	call   c00004f0 <memset>
c001abb1:	83 c4 10             	add    esp,0x10
c001abb4:	b8 01 00 00 00       	mov    eax,0x1
c001abb9:	eb 0e                	jmp    c001abc9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001abbb:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001abc0:	b9 00 08 00 00       	mov    ecx,0x800
c001abc5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001abc7:	31 c0                	xor    eax,eax
c001abc9:	5b                   	pop    ebx
c001abca:	5e                   	pop    esi
c001abcb:	5f                   	pop    edi
c001abcc:	c3                   	ret    
c001abcd:	90                   	nop

c001abce <ISO9660::tryMount(LogicalDisk*, int)>:
c001abce:	53                   	push   ebx
c001abcf:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001abd5:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001abdf:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001abe6:	8d 58 41             	lea    ebx,[eax+0x41]
c001abe9:	0f be db             	movsx  ebx,bl
c001abec:	53                   	push   ebx
c001abed:	8d 44 24 08          	lea    eax,[esp+0x8]
c001abf1:	50                   	push   eax
c001abf2:	6a 10                	push   0x10
c001abf4:	e8 56 ff ff ff       	call   c001ab4f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001abf9:	83 c4 10             	add    esp,0x10
c001abfc:	31 d2                	xor    edx,edx
c001abfe:	85 c0                	test   eax,eax
c001ac00:	75 33                	jne    c001ac35 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac02:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001ac07:	75 2c                	jne    c001ac35 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac09:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ac0e:	75 25                	jne    c001ac35 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac10:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ac15:	75 1e                	jne    c001ac35 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac17:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ac1c:	75 17                	jne    c001ac35 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac1e:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ac23:	75 10                	jne    c001ac35 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac25:	83 ec 0c             	sub    esp,0xc
c001ac28:	53                   	push   ebx
c001ac29:	e8 18 be fe ff       	call   c0006a46 <init_percd>
c001ac2e:	83 c4 10             	add    esp,0x10
c001ac31:	40                   	inc    eax
c001ac32:	0f 95 c2             	setne  dl
c001ac35:	88 d0                	mov    al,dl
c001ac37:	81 c4 08 08 00 00    	add    esp,0x808
c001ac3d:	5b                   	pop    ebx
c001ac3e:	c3                   	ret    
c001ac3f:	90                   	nop

c001ac40 <ISO9660::ISO9660()>:
c001ac40:	83 ec 0c             	sub    esp,0xc
c001ac43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac47:	83 ec 0c             	sub    esp,0xc
c001ac4a:	50                   	push   eax
c001ac4b:	e8 5e 0b ff ff       	call   c000b7ae <Filesystem::Filesystem()>
c001ac50:	83 c4 10             	add    esp,0x10
c001ac53:	ba 64 31 02 c0       	mov    edx,0xc0023164
c001ac58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac5c:	89 10                	mov    DWORD PTR [eax],edx
c001ac5e:	e8 f5 be fe ff       	call   c0006b58 <fs_iso9660_init>
c001ac63:	90                   	nop
c001ac64:	83 c4 0c             	add    esp,0xc
c001ac67:	c3                   	ret    

c001ac68 <SoundCard::beginPlayback()>:
c001ac68:	c7 44 24 04 c8 31 02 c0 	mov    DWORD PTR [esp+0x4],0xc00231c8
c001ac70:	e9 4e 6a ff ff       	jmp    c00116c3 <KePanic(char const*)>
c001ac75:	90                   	nop

c001ac76 <SoundCard::stopPlayback()>:
c001ac76:	c7 44 24 04 c8 31 02 c0 	mov    DWORD PTR [esp+0x4],0xc00231c8
c001ac7e:	e9 40 6a ff ff       	jmp    c00116c3 <KePanic(char const*)>
c001ac83:	90                   	nop

c001ac84 <SoundCard::SoundCard(char const*)>:
c001ac84:	83 ec 1c             	sub    esp,0x1c
c001ac87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac8b:	83 ec 08             	sub    esp,0x8
c001ac8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac92:	50                   	push   eax
c001ac93:	e8 94 1e ff ff       	call   c000cb2c <Device::Device(char const*)>
c001ac98:	83 c4 10             	add    esp,0x10
c001ac9b:	ba 14 32 02 c0       	mov    edx,0xc0023214
c001aca0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aca4:	89 10                	mov    DWORD PTR [eax],edx
c001aca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acaa:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001acb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acb5:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001acbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acc3:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001accd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acd1:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001acdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acdf:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ace9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001acf1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001acf6:	7f 1a                	jg     c001ad12 <SoundCard::SoundCard(char const*)+0x8e>
c001acf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acfc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad00:	83 c2 54             	add    edx,0x54
c001ad03:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001ad0b:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ad10:	eb df                	jmp    c001acf1 <SoundCard::SoundCard(char const*)+0x6d>
c001ad12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad16:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ad1d:	90                   	nop
c001ad1e:	83 c4 1c             	add    esp,0x1c
c001ad21:	c3                   	ret    

c001ad22 <SoundCard::~SoundCard()>:
c001ad22:	83 ec 0c             	sub    esp,0xc
c001ad25:	ba 14 32 02 c0       	mov    edx,0xc0023214
c001ad2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad2e:	89 10                	mov    DWORD PTR [eax],edx
c001ad30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad34:	83 ec 0c             	sub    esp,0xc
c001ad37:	50                   	push   eax
c001ad38:	e8 8f 1b ff ff       	call   c000c8cc <Device::~Device()>
c001ad3d:	83 c4 10             	add    esp,0x10
c001ad40:	90                   	nop
c001ad41:	83 c4 0c             	add    esp,0xc
c001ad44:	c3                   	ret    
c001ad45:	90                   	nop

c001ad46 <SoundCard::~SoundCard()>:
c001ad46:	83 ec 0c             	sub    esp,0xc
c001ad49:	83 ec 0c             	sub    esp,0xc
c001ad4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad50:	e8 cd ff ff ff       	call   c001ad22 <SoundCard::~SoundCard()>
c001ad55:	83 c4 10             	add    esp,0x10
c001ad58:	83 ec 08             	sub    esp,0x8
c001ad5b:	68 e8 01 00 00       	push   0x1e8
c001ad60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad64:	e8 b3 fa fe ff       	call   c000a81c <operator delete(void*, unsigned long)>
c001ad69:	83 c4 10             	add    esp,0x10
c001ad6c:	83 c4 0c             	add    esp,0xc
c001ad6f:	c3                   	ret    

c001ad70 <SoundCard::configureRates(int, int, int)>:
c001ad70:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ad74:	31 c0                	xor    eax,eax
c001ad76:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ad7d:	75 20                	jne    c001ad9f <SoundCard::configureRates(int, int, int)+0x2f>
c001ad7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad83:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ad89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad8d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ad93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad97:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ad9d:	b0 01                	mov    al,0x1
c001ad9f:	c3                   	ret    

c001ada0 <SoundCard::getSamples16(int, short*)>:
c001ada0:	55                   	push   ebp
c001ada1:	57                   	push   edi
c001ada2:	31 ff                	xor    edi,edi
c001ada4:	56                   	push   esi
c001ada5:	53                   	push   ebx
c001ada6:	31 db                	xor    ebx,ebx
c001ada8:	83 ec 10             	sub    esp,0x10
c001adab:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001adaf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001adb3:	8d 04 36             	lea    eax,[esi+esi*1]
c001adb6:	50                   	push   eax
c001adb7:	6a 00                	push   0x0
c001adb9:	55                   	push   ebp
c001adba:	e8 31 57 fe ff       	call   c00004f0 <memset>
c001adbf:	83 c4 10             	add    esp,0x10
c001adc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001adc6:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001adcd:	85 c0                	test   eax,eax
c001adcf:	74 1b                	je     c001adec <SoundCard::getSamples16(int, short*)+0x4c>
c001add1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001add5:	75 15                	jne    c001adec <SoundCard::getSamples16(int, short*)+0x4c>
c001add7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001addb:	55                   	push   ebp
c001addc:	56                   	push   esi
c001addd:	50                   	push   eax
c001adde:	e8 f1 02 00 00       	call   c001b0d4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ade3:	83 c4 10             	add    esp,0x10
c001ade6:	39 c7                	cmp    edi,eax
c001ade8:	7d 02                	jge    c001adec <SoundCard::getSamples16(int, short*)+0x4c>
c001adea:	89 c7                	mov    edi,eax
c001adec:	43                   	inc    ebx
c001aded:	83 fb 20             	cmp    ebx,0x20
c001adf0:	75 d0                	jne    c001adc2 <SoundCard::getSamples16(int, short*)+0x22>
c001adf2:	83 c4 0c             	add    esp,0xc
c001adf5:	89 f8                	mov    eax,edi
c001adf7:	5b                   	pop    ebx
c001adf8:	5e                   	pop    esi
c001adf9:	5f                   	pop    edi
c001adfa:	5d                   	pop    ebp
c001adfb:	c3                   	ret    

c001adfc <SoundCard::getSamples32(int, int*)>:
c001adfc:	55                   	push   ebp
c001adfd:	57                   	push   edi
c001adfe:	31 ff                	xor    edi,edi
c001ae00:	56                   	push   esi
c001ae01:	31 f6                	xor    esi,esi
c001ae03:	53                   	push   ebx
c001ae04:	83 ec 10             	sub    esp,0x10
c001ae07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae0b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ae0f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ae13:	c1 e0 02             	shl    eax,0x2
c001ae16:	50                   	push   eax
c001ae17:	6a 00                	push   0x0
c001ae19:	55                   	push   ebp
c001ae1a:	e8 d1 56 fe ff       	call   c00004f0 <memset>
c001ae1f:	83 c4 10             	add    esp,0x10
c001ae22:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ae29:	85 c0                	test   eax,eax
c001ae2b:	74 1b                	je     c001ae48 <SoundCard::getSamples32(int, int*)+0x4c>
c001ae2d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ae31:	75 15                	jne    c001ae48 <SoundCard::getSamples32(int, int*)+0x4c>
c001ae33:	53                   	push   ebx
c001ae34:	55                   	push   ebp
c001ae35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae39:	50                   	push   eax
c001ae3a:	e8 61 03 00 00       	call   c001b1a0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ae3f:	83 c4 10             	add    esp,0x10
c001ae42:	39 c6                	cmp    esi,eax
c001ae44:	7d 02                	jge    c001ae48 <SoundCard::getSamples32(int, int*)+0x4c>
c001ae46:	89 c6                	mov    esi,eax
c001ae48:	47                   	inc    edi
c001ae49:	83 ff 20             	cmp    edi,0x20
c001ae4c:	75 d4                	jne    c001ae22 <SoundCard::getSamples32(int, int*)+0x26>
c001ae4e:	85 f6                	test   esi,esi
c001ae50:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001ae57:	75 0f                	jne    c001ae68 <SoundCard::getSamples32(int, int*)+0x6c>
c001ae59:	85 c0                	test   eax,eax
c001ae5b:	74 1b                	je     c001ae78 <SoundCard::getSamples32(int, int*)+0x7c>
c001ae5d:	83 ec 0c             	sub    esp,0xc
c001ae60:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae62:	53                   	push   ebx
c001ae63:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ae66:	eb 0d                	jmp    c001ae75 <SoundCard::getSamples32(int, int*)+0x79>
c001ae68:	85 c0                	test   eax,eax
c001ae6a:	75 0c                	jne    c001ae78 <SoundCard::getSamples32(int, int*)+0x7c>
c001ae6c:	83 ec 0c             	sub    esp,0xc
c001ae6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae71:	53                   	push   ebx
c001ae72:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ae75:	83 c4 10             	add    esp,0x10
c001ae78:	83 c4 0c             	add    esp,0xc
c001ae7b:	89 f0                	mov    eax,esi
c001ae7d:	5b                   	pop    ebx
c001ae7e:	5e                   	pop    esi
c001ae7f:	5f                   	pop    edi
c001ae80:	5d                   	pop    ebp
c001ae81:	c3                   	ret    

c001ae82 <SoundCard::addChannel(SoundPort*)>:
c001ae82:	83 ec 0c             	sub    esp,0xc
c001ae85:	31 c0                	xor    eax,eax
c001ae87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae8b:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ae93:	74 1b                	je     c001aeb0 <SoundCard::addChannel(SoundPort*)+0x2e>
c001ae95:	40                   	inc    eax
c001ae96:	83 f8 20             	cmp    eax,0x20
c001ae99:	75 f0                	jne    c001ae8b <SoundCard::addChannel(SoundPort*)+0x9>
c001ae9b:	83 ec 0c             	sub    esp,0xc
c001ae9e:	68 ed 31 02 c0       	push   0xc00231ed
c001aea3:	e8 1b 68 ff ff       	call   c00116c3 <KePanic(char const*)>
c001aea8:	83 c4 10             	add    esp,0x10
c001aeab:	83 c8 ff             	or     eax,0xffffffff
c001aeae:	eb 0b                	jmp    c001aebb <SoundCard::addChannel(SoundPort*)+0x39>
c001aeb0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001aeb4:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001aebb:	83 c4 0c             	add    esp,0xc
c001aebe:	c3                   	ret    
c001aebf:	90                   	nop

c001aec0 <SoundCard::removeChannel(int)>:
c001aec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aec4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aec8:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001aed3:	c3                   	ret    

c001aed4 <SoundPort::SoundPort(int, int, int, int)>:
c001aed4:	83 ec 0c             	sub    esp,0xc
c001aed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aedb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001aee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aee6:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001aeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aef2:	89 10                	mov    DWORD PTR [eax],edx
c001aef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aef8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aefc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001aeff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001af07:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001af0a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001af0f:	75 13                	jne    c001af24 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001af11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af15:	8b 00                	mov    eax,DWORD PTR [eax]
c001af17:	05 a0 0f 00 00       	add    eax,0xfa0
c001af1c:	01 c0                	add    eax,eax
c001af1e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af22:	66 90                	xchg   ax,ax
c001af24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af28:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001af2c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001af2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af33:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001af3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af3e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001af41:	c1 e0 02             	shl    eax,0x2
c001af44:	83 ec 0c             	sub    esp,0xc
c001af47:	50                   	push   eax
c001af48:	e8 6d cb fe ff       	call   c0007aba <malloc>
c001af4d:	83 c4 10             	add    esp,0x10
c001af50:	89 c2                	mov    edx,eax
c001af52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af56:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001af59:	90                   	nop
c001af5a:	83 c4 0c             	add    esp,0xc
c001af5d:	c3                   	ret    
c001af5e:	66 90                	xchg   ax,ax

c001af60 <SoundPort::~SoundPort()>:
c001af60:	83 ec 0c             	sub    esp,0xc
c001af63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af67:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001af6a:	85 c0                	test   eax,eax
c001af6c:	74 1e                	je     c001af8c <SoundPort::~SoundPort()+0x2c>
c001af6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af72:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001af75:	83 ec 0c             	sub    esp,0xc
c001af78:	50                   	push   eax
c001af79:	e8 4c cb fe ff       	call   c0007aca <free>
c001af7e:	83 c4 10             	add    esp,0x10
c001af81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af85:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001af8c:	90                   	nop
c001af8d:	83 c4 0c             	add    esp,0xc
c001af90:	c3                   	ret    
c001af91:	90                   	nop
c001af92:	66 90                	xchg   ax,ax

c001af94 <SoundPort::unpause()>:
c001af94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af98:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001af9c:	c3                   	ret    
c001af9d:	90                   	nop
c001af9e:	66 90                	xchg   ax,ax

c001afa0 <SoundPort::pause()>:
c001afa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afa4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001afa8:	c3                   	ret    
c001afa9:	90                   	nop
c001afaa:	66 90                	xchg   ax,ax

c001afac <SoundPort::getBufferUsed()>:
c001afac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afb0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001afb3:	c3                   	ret    

c001afb4 <SoundPort::getBufferSize()>:
c001afb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afb8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001afbb:	c3                   	ret    

c001afbc <SoundPort::buffer16(short*, int)>:
c001afbc:	55                   	push   ebp
c001afbd:	57                   	push   edi
c001afbe:	56                   	push   esi
c001afbf:	53                   	push   ebx
c001afc0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001afc4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001afc8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001afcb:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001afce:	74 68                	je     c001b038 <SoundPort::buffer16(short*, int)+0x7c>
c001afd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001afd4:	85 c9                	test   ecx,ecx
c001afd6:	7e 60                	jle    c001b038 <SoundPort::buffer16(short*, int)+0x7c>
c001afd8:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001afdc:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001afdf:	c1 e1 0f             	shl    ecx,0xf
c001afe2:	8d 70 01             	lea    esi,[eax+0x1]
c001afe5:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001afe8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001afeb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afee:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aff1:	74 4d                	je     c001b040 <SoundPort::buffer16(short*, int)+0x84>
c001aff3:	31 f6                	xor    esi,esi
c001aff5:	eb 21                	jmp    c001b018 <SoundPort::buffer16(short*, int)+0x5c>
c001aff7:	90                   	nop
c001aff8:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001affd:	8d 79 01             	lea    edi,[ecx+0x1]
c001b000:	c1 e3 0f             	shl    ebx,0xf
c001b003:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001b006:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001b009:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001b00c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b00f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b012:	74 1c                	je     c001b030 <SoundPort::buffer16(short*, int)+0x74>
c001b014:	89 c6                	mov    esi,eax
c001b016:	66 90                	xchg   ax,ax
c001b018:	8d 46 01             	lea    eax,[esi+0x1]
c001b01b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001b01f:	75 d7                	jne    c001aff8 <SoundPort::buffer16(short*, int)+0x3c>
c001b021:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b025:	8d 76 00             	lea    esi,[esi+0x0]
c001b028:	5b                   	pop    ebx
c001b029:	5e                   	pop    esi
c001b02a:	5f                   	pop    edi
c001b02b:	5d                   	pop    ebp
c001b02c:	c3                   	ret    
c001b02d:	8d 76 00             	lea    esi,[esi+0x0]
c001b030:	5b                   	pop    ebx
c001b031:	8d 46 02             	lea    eax,[esi+0x2]
c001b034:	5e                   	pop    esi
c001b035:	5f                   	pop    edi
c001b036:	5d                   	pop    ebp
c001b037:	c3                   	ret    
c001b038:	5b                   	pop    ebx
c001b039:	31 c0                	xor    eax,eax
c001b03b:	5e                   	pop    esi
c001b03c:	5f                   	pop    edi
c001b03d:	5d                   	pop    ebp
c001b03e:	c3                   	ret    
c001b03f:	90                   	nop
c001b040:	b8 01 00 00 00       	mov    eax,0x1
c001b045:	eb e1                	jmp    c001b028 <SoundPort::buffer16(short*, int)+0x6c>
c001b047:	90                   	nop

c001b048 <SoundPort::buffer32(int*, int)>:
c001b048:	55                   	push   ebp
c001b049:	57                   	push   edi
c001b04a:	56                   	push   esi
c001b04b:	53                   	push   ebx
c001b04c:	83 ec 04             	sub    esp,0x4
c001b04f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b053:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b057:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b05a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b05e:	89 04 24             	mov    DWORD PTR [esp],eax
c001b061:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b064:	74 5a                	je     c001b0c0 <SoundPort::buffer32(int*, int)+0x78>
c001b066:	85 c0                	test   eax,eax
c001b068:	7e 56                	jle    c001b0c0 <SoundPort::buffer32(int*, int)+0x78>
c001b06a:	8d 71 01             	lea    esi,[ecx+0x1]
c001b06d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b070:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b073:	8b 37                	mov    esi,DWORD PTR [edi]
c001b075:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001b078:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b07b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b07e:	74 4c                	je     c001b0cc <SoundPort::buffer32(int*, int)+0x84>
c001b080:	31 f6                	xor    esi,esi
c001b082:	eb 1c                	jmp    c001b0a0 <SoundPort::buffer32(int*, int)+0x58>
c001b084:	8d 69 01             	lea    ebp,[ecx+0x1]
c001b087:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001b08a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001b08d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b090:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001b094:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b097:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b09a:	74 18                	je     c001b0b4 <SoundPort::buffer32(int*, int)+0x6c>
c001b09c:	89 de                	mov    esi,ebx
c001b09e:	66 90                	xchg   ax,ax
c001b0a0:	8d 5e 01             	lea    ebx,[esi+0x1]
c001b0a3:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001b0a6:	75 dc                	jne    c001b084 <SoundPort::buffer32(int*, int)+0x3c>
c001b0a8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b0ab:	90                   	nop
c001b0ac:	83 c4 04             	add    esp,0x4
c001b0af:	5b                   	pop    ebx
c001b0b0:	5e                   	pop    esi
c001b0b1:	5f                   	pop    edi
c001b0b2:	5d                   	pop    ebp
c001b0b3:	c3                   	ret    
c001b0b4:	83 c4 04             	add    esp,0x4
c001b0b7:	8d 46 02             	lea    eax,[esi+0x2]
c001b0ba:	5b                   	pop    ebx
c001b0bb:	5e                   	pop    esi
c001b0bc:	5f                   	pop    edi
c001b0bd:	5d                   	pop    ebp
c001b0be:	c3                   	ret    
c001b0bf:	90                   	nop
c001b0c0:	83 c4 04             	add    esp,0x4
c001b0c3:	31 c0                	xor    eax,eax
c001b0c5:	5b                   	pop    ebx
c001b0c6:	5e                   	pop    esi
c001b0c7:	5f                   	pop    edi
c001b0c8:	5d                   	pop    ebp
c001b0c9:	c3                   	ret    
c001b0ca:	66 90                	xchg   ax,ax
c001b0cc:	b8 01 00 00 00       	mov    eax,0x1
c001b0d1:	eb d9                	jmp    c001b0ac <SoundPort::buffer32(int*, int)+0x64>
c001b0d3:	90                   	nop

c001b0d4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b0d4:	57                   	push   edi
c001b0d5:	56                   	push   esi
c001b0d6:	53                   	push   ebx
c001b0d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b0db:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b0df:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001b0e5:	39 03                	cmp    DWORD PTR [ebx],eax
c001b0e7:	74 13                	je     c001b0fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001b0e9:	83 ec 0c             	sub    esp,0xc
c001b0ec:	68 40 32 02 c0       	push   0xc0023240
c001b0f1:	e8 cd 65 ff ff       	call   c00116c3 <KePanic(char const*)>
c001b0f6:	83 c4 10             	add    esp,0x10
c001b0f9:	8d 76 00             	lea    esi,[esi+0x0]
c001b0fc:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001b102:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b105:	74 11                	je     c001b118 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001b107:	83 ec 0c             	sub    esp,0xc
c001b10a:	68 7f 32 02 c0       	push   0xc002327f
c001b10f:	e8 af 65 ff ff       	call   c00116c3 <KePanic(char const*)>
c001b114:	83 c4 10             	add    esp,0x10
c001b117:	90                   	nop
c001b118:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001b11e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b121:	74 11                	je     c001b134 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001b123:	83 ec 0c             	sub    esp,0xc
c001b126:	68 7f 32 02 c0       	push   0xc002327f
c001b12b:	e8 93 65 ff ff       	call   c00116c3 <KePanic(char const*)>
c001b130:	83 c4 10             	add    esp,0x10
c001b133:	90                   	nop
c001b134:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001b137:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001b13b:	7e 07                	jle    c001b144 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001b13d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b141:	8d 76 00             	lea    esi,[esi+0x0]
c001b144:	85 f6                	test   esi,esi
c001b146:	7e 2c                	jle    c001b174 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001b148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b14c:	8d 3c 36             	lea    edi,[esi+esi*1]
c001b14f:	31 c9                	xor    ecx,ecx
c001b151:	01 d7                	add    edi,edx
c001b153:	90                   	nop
c001b154:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001b157:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001b15a:	85 c0                	test   eax,eax
c001b15c:	79 06                	jns    c001b164 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001b15e:	05 ff 7f 00 00       	add    eax,0x7fff
c001b163:	90                   	nop
c001b164:	c1 f8 0f             	sar    eax,0xf
c001b167:	83 c1 04             	add    ecx,0x4
c001b16a:	66 01 02             	add    WORD PTR [edx],ax
c001b16d:	83 c2 02             	add    edx,0x2
c001b170:	39 d7                	cmp    edi,edx
c001b172:	75 e0                	jne    c001b154 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001b174:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b177:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b17a:	83 ec 04             	sub    esp,0x4
c001b17d:	29 f0                	sub    eax,esi
c001b17f:	c1 e0 02             	shl    eax,0x2
c001b182:	50                   	push   eax
c001b183:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b186:	50                   	push   eax
c001b187:	52                   	push   edx
c001b188:	e8 43 52 fe ff       	call   c00003d0 <memmove>
c001b18d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b190:	83 c4 10             	add    esp,0x10
c001b193:	29 f0                	sub    eax,esi
c001b195:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b198:	89 f0                	mov    eax,esi
c001b19a:	5b                   	pop    ebx
c001b19b:	5e                   	pop    esi
c001b19c:	5f                   	pop    edi
c001b19d:	c3                   	ret    
c001b19e:	66 90                	xchg   ax,ax

c001b1a0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b1a0:	57                   	push   edi
c001b1a1:	56                   	push   esi
c001b1a2:	53                   	push   ebx
c001b1a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b1a7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b1ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b1af:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001b1b5:	39 06                	cmp    DWORD PTR [esi],eax
c001b1b7:	74 13                	je     c001b1cc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001b1b9:	83 ec 0c             	sub    esp,0xc
c001b1bc:	68 60 32 02 c0       	push   0xc0023260
c001b1c1:	e8 fd 64 ff ff       	call   c00116c3 <KePanic(char const*)>
c001b1c6:	83 c4 10             	add    esp,0x10
c001b1c9:	8d 76 00             	lea    esi,[esi+0x0]
c001b1cc:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001b1d2:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001b1d5:	74 11                	je     c001b1e8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001b1d7:	83 ec 0c             	sub    esp,0xc
c001b1da:	68 9b 32 02 c0       	push   0xc002329b
c001b1df:	e8 df 64 ff ff       	call   c00116c3 <KePanic(char const*)>
c001b1e4:	83 c4 10             	add    esp,0x10
c001b1e7:	90                   	nop
c001b1e8:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001b1ee:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001b1f1:	74 11                	je     c001b204 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001b1f3:	83 ec 0c             	sub    esp,0xc
c001b1f6:	68 9b 32 02 c0       	push   0xc002329b
c001b1fb:	e8 c3 64 ff ff       	call   c00116c3 <KePanic(char const*)>
c001b200:	83 c4 10             	add    esp,0x10
c001b203:	90                   	nop
c001b204:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001b207:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001b20b:	7e 07                	jle    c001b214 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001b20d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b211:	8d 76 00             	lea    esi,[esi+0x0]
c001b214:	85 ff                	test   edi,edi
c001b216:	7e 1c                	jle    c001b234 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001b218:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b21f:	31 c0                	xor    eax,eax
c001b221:	8d 76 00             	lea    esi,[esi+0x0]
c001b224:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b227:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b22a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001b22d:	83 c0 04             	add    eax,0x4
c001b230:	39 c1                	cmp    ecx,eax
c001b232:	75 f0                	jne    c001b224 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001b234:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b237:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b23a:	83 ec 04             	sub    esp,0x4
c001b23d:	29 f8                	sub    eax,edi
c001b23f:	c1 e0 02             	shl    eax,0x2
c001b242:	50                   	push   eax
c001b243:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b246:	50                   	push   eax
c001b247:	52                   	push   edx
c001b248:	e8 83 51 fe ff       	call   c00003d0 <memmove>
c001b24d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b250:	83 c4 10             	add    esp,0x10
c001b253:	29 f8                	sub    eax,edi
c001b255:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001b258:	89 f8                	mov    eax,edi
c001b25a:	5b                   	pop    ebx
c001b25b:	5e                   	pop    esi
c001b25c:	5f                   	pop    edi
c001b25d:	c3                   	ret    

c001b25e <PCI::open(int, int, void*)>:
c001b25e:	83 ec 18             	sub    esp,0x18
c001b261:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b265:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b269:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b26f:	8b 10                	mov    edx,DWORD PTR [eax]
c001b271:	50                   	push   eax
c001b272:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b275:	31 c0                	xor    eax,eax
c001b277:	83 c4 1c             	add    esp,0x1c
c001b27a:	c3                   	ret    
c001b27b:	90                   	nop

c001b27c <PCI::close(int, int, void*)>:
c001b27c:	31 c0                	xor    eax,eax
c001b27e:	c3                   	ret    
c001b27f:	90                   	nop

c001b280 <PCI::PCI()>:
c001b280:	83 ec 0c             	sub    esp,0xc
c001b283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b287:	83 ec 08             	sub    esp,0x8
c001b28a:	68 b7 32 02 c0       	push   0xc00232b7
c001b28f:	50                   	push   eax
c001b290:	e8 97 10 ff ff       	call   c000c32c <Bus::Bus(char const*)>
c001b295:	83 c4 10             	add    esp,0x10
c001b298:	ba 60 33 02 c0       	mov    edx,0xc0023360
c001b29d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2a1:	89 10                	mov    DWORD PTR [eax],edx
c001b2a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2a7:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b2b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2b5:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b2ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b2c4:	0f b6 d0             	movzx  edx,al
c001b2c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2cb:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b2d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2d6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b2dc:	0f b6 d0             	movzx  edx,al
c001b2df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2e3:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b2e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2ec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b2f2:	8d 50 01             	lea    edx,[eax+0x1]
c001b2f5:	88 d1                	mov    cl,dl
c001b2f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b2fb:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b301:	0f b6 d0             	movzx  edx,al
c001b304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b308:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b30c:	83 c9 c0             	or     ecx,0xffffffc0
c001b30f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b313:	90                   	nop
c001b314:	83 c4 0c             	add    esp,0xc
c001b317:	c3                   	ret    

c001b318 <PCI::readBAR8(unsigned int, int)>:
c001b318:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b31c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b320:	f6 c2 01             	test   dl,0x1
c001b323:	74 07                	je     c001b32c <PCI::readBAR8(unsigned int, int)+0x14>
c001b325:	83 e2 fc             	and    edx,0xfffffffc
c001b328:	01 c2                	add    edx,eax
c001b32a:	ec                   	in     al,dx
c001b32b:	c3                   	ret    
c001b32c:	83 e2 f0             	and    edx,0xfffffff0
c001b32f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b332:	c3                   	ret    
c001b333:	90                   	nop

c001b334 <PCI::readBAR16(unsigned int, int)>:
c001b334:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b338:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b33c:	f6 c2 01             	test   dl,0x1
c001b33f:	74 08                	je     c001b349 <PCI::readBAR16(unsigned int, int)+0x15>
c001b341:	83 e2 fc             	and    edx,0xfffffffc
c001b344:	01 c2                	add    edx,eax
c001b346:	66 ed                	in     ax,dx
c001b348:	c3                   	ret    
c001b349:	83 e2 f0             	and    edx,0xfffffff0
c001b34c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b350:	c3                   	ret    
c001b351:	90                   	nop

c001b352 <PCI::readBAR32(unsigned int, int)>:
c001b352:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b356:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b35a:	f6 c2 01             	test   dl,0x1
c001b35d:	74 07                	je     c001b366 <PCI::readBAR32(unsigned int, int)+0x14>
c001b35f:	83 e2 fc             	and    edx,0xfffffffc
c001b362:	01 c2                	add    edx,eax
c001b364:	ed                   	in     eax,dx
c001b365:	c3                   	ret    
c001b366:	83 e2 f0             	and    edx,0xfffffff0
c001b369:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b36c:	c3                   	ret    
c001b36d:	90                   	nop

c001b36e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b36e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b372:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b376:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b37a:	f6 c2 01             	test   dl,0x1
c001b37d:	74 07                	je     c001b386 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b37f:	83 e2 fc             	and    edx,0xfffffffc
c001b382:	01 ca                	add    edx,ecx
c001b384:	ee                   	out    dx,al
c001b385:	c3                   	ret    
c001b386:	83 e2 f0             	and    edx,0xfffffff0
c001b389:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b38c:	c3                   	ret    
c001b38d:	90                   	nop

c001b38e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b38e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b392:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b396:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b39a:	f6 c2 01             	test   dl,0x1
c001b39d:	74 08                	je     c001b3a7 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b39f:	83 e2 fc             	and    edx,0xfffffffc
c001b3a2:	01 ca                	add    edx,ecx
c001b3a4:	66 ef                	out    dx,ax
c001b3a6:	c3                   	ret    
c001b3a7:	83 e2 f0             	and    edx,0xfffffff0
c001b3aa:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b3ae:	c3                   	ret    
c001b3af:	90                   	nop

c001b3b0 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b3b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b3b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b3bc:	f6 c2 01             	test   dl,0x1
c001b3bf:	74 07                	je     c001b3c8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b3c1:	83 e2 fc             	and    edx,0xfffffffc
c001b3c4:	01 ca                	add    edx,ecx
c001b3c6:	ef                   	out    dx,eax
c001b3c7:	c3                   	ret    
c001b3c8:	83 e2 f0             	and    edx,0xfffffff0
c001b3cb:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b3ce:	c3                   	ret    
c001b3cf:	90                   	nop

c001b3d0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b3d0:	55                   	push   ebp
c001b3d1:	57                   	push   edi
c001b3d2:	56                   	push   esi
c001b3d3:	53                   	push   ebx
c001b3d4:	83 ec 0c             	sub    esp,0xc
c001b3d7:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b3dc:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b3e0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b3e4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b3e8:	83 fe 07             	cmp    esi,0x7
c001b3eb:	76 10                	jbe    c001b3fd <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b3ed:	83 ec 0c             	sub    esp,0xc
c001b3f0:	68 bf 32 02 c0       	push   0xc00232bf
c001b3f5:	e8 c9 62 ff ff       	call   c00116c3 <KePanic(char const*)>
c001b3fa:	83 c4 10             	add    esp,0x10
c001b3fd:	0f b6 db             	movzx  ebx,bl
c001b400:	83 fb 0f             	cmp    ebx,0xf
c001b403:	76 10                	jbe    c001b415 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b405:	83 ec 0c             	sub    esp,0xc
c001b408:	68 ef 32 02 c0       	push   0xc00232ef
c001b40d:	e8 b1 62 ff ff       	call   c00116c3 <KePanic(char const*)>
c001b412:	83 c4 10             	add    esp,0x10
c001b415:	8d 04 36             	lea    eax,[esi+esi*1]
c001b418:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b41d:	83 c8 f0             	or     eax,0xfffffff0
c001b420:	ee                   	out    dx,al
c001b421:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b426:	89 e8                	mov    eax,ebp
c001b428:	ee                   	out    dx,al
c001b429:	83 c4 0c             	add    esp,0xc
c001b42c:	89 d8                	mov    eax,ebx
c001b42e:	89 f9                	mov    ecx,edi
c001b430:	c1 e0 08             	shl    eax,0x8
c001b433:	0f b6 d9             	movzx  ebx,cl
c001b436:	83 e3 fc             	and    ebx,0xfffffffc
c001b439:	09 d8                	or     eax,ebx
c001b43b:	5b                   	pop    ebx
c001b43c:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b441:	5e                   	pop    esi
c001b442:	5f                   	pop    edi
c001b443:	5d                   	pop    ebp
c001b444:	c3                   	ret    
c001b445:	90                   	nop

c001b446 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b446:	57                   	push   edi
c001b447:	56                   	push   esi
c001b448:	53                   	push   ebx
c001b449:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b44d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b451:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b457:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b45b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b45f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b463:	83 ff 01             	cmp    edi,0x1
c001b466:	75 3f                	jne    c001b4a7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b468:	89 de                	mov    esi,ebx
c001b46a:	0f b6 c0             	movzx  eax,al
c001b46d:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b473:	c1 e0 10             	shl    eax,0x10
c001b476:	0f b6 c9             	movzx  ecx,cl
c001b479:	09 f0                	or     eax,esi
c001b47b:	c1 e1 08             	shl    ecx,0x8
c001b47e:	0f b6 d2             	movzx  edx,dl
c001b481:	09 c8                	or     eax,ecx
c001b483:	c1 e2 0b             	shl    edx,0xb
c001b486:	09 d0                	or     eax,edx
c001b488:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b48d:	0d 00 00 00 80       	or     eax,0x80000000
c001b492:	ef                   	out    dx,eax
c001b493:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b498:	ed                   	in     eax,dx
c001b499:	83 e3 02             	and    ebx,0x2
c001b49c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b4a3:	d3 e8                	shr    eax,cl
c001b4a5:	eb 44                	jmp    c001b4eb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b4a7:	83 ff 02             	cmp    edi,0x2
c001b4aa:	75 2d                	jne    c001b4d9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b4ac:	83 ec 0c             	sub    esp,0xc
c001b4af:	0f b6 c9             	movzx  ecx,cl
c001b4b2:	0f b6 d2             	movzx  edx,dl
c001b4b5:	0f b6 fb             	movzx  edi,bl
c001b4b8:	0f b6 c0             	movzx  eax,al
c001b4bb:	57                   	push   edi
c001b4bc:	51                   	push   ecx
c001b4bd:	52                   	push   edx
c001b4be:	50                   	push   eax
c001b4bf:	56                   	push   esi
c001b4c0:	e8 0b ff ff ff       	call   c001b3d0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4c5:	89 c2                	mov    edx,eax
c001b4c7:	ed                   	in     eax,dx
c001b4c8:	83 e3 02             	and    ebx,0x2
c001b4cb:	83 c4 20             	add    esp,0x20
c001b4ce:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b4d5:	d3 e8                	shr    eax,cl
c001b4d7:	eb 12                	jmp    c001b4eb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b4d9:	83 ec 0c             	sub    esp,0xc
c001b4dc:	68 1f 33 02 c0       	push   0xc002331f
c001b4e1:	e8 dd 61 ff ff       	call   c00116c3 <KePanic(char const*)>
c001b4e6:	83 c4 10             	add    esp,0x10
c001b4e9:	31 c0                	xor    eax,eax
c001b4eb:	5b                   	pop    ebx
c001b4ec:	5e                   	pop    esi
c001b4ed:	5f                   	pop    edi
c001b4ee:	c3                   	ret    
c001b4ef:	90                   	nop

c001b4f0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b4f0:	83 ec 18             	sub    esp,0x18
c001b4f3:	6a 00                	push   0x0
c001b4f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4fa:	50                   	push   eax
c001b4fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b500:	50                   	push   eax
c001b501:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b506:	50                   	push   eax
c001b507:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b50b:	e8 36 ff ff ff       	call   c001b446 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b510:	83 c4 2c             	add    esp,0x2c
c001b513:	c3                   	ret    

c001b514 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b514:	83 ec 18             	sub    esp,0x18
c001b517:	6a 0e                	push   0xe
c001b519:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b51e:	50                   	push   eax
c001b51f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b524:	50                   	push   eax
c001b525:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b52a:	50                   	push   eax
c001b52b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b52f:	e8 12 ff ff ff       	call   c001b446 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b534:	83 c4 2c             	add    esp,0x2c
c001b537:	0f b6 c0             	movzx  eax,al
c001b53a:	c3                   	ret    
c001b53b:	90                   	nop

c001b53c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b53c:	55                   	push   ebp
c001b53d:	57                   	push   edi
c001b53e:	56                   	push   esi
c001b53f:	53                   	push   ebx
c001b540:	83 ec 18             	sub    esp,0x18
c001b543:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b548:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b54d:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b552:	6a 0a                	push   0xa
c001b554:	56                   	push   esi
c001b555:	55                   	push   ebp
c001b556:	57                   	push   edi
c001b557:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b55b:	e8 e6 fe ff ff       	call   c001b446 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b560:	83 c4 14             	add    esp,0x14
c001b563:	89 c3                	mov    ebx,eax
c001b565:	6a 0a                	push   0xa
c001b567:	0f b6 db             	movzx  ebx,bl
c001b56a:	56                   	push   esi
c001b56b:	55                   	push   ebp
c001b56c:	57                   	push   edi
c001b56d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b571:	e8 d0 fe ff ff       	call   c001b446 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b576:	83 c4 2c             	add    esp,0x2c
c001b579:	25 00 ff 00 00       	and    eax,0xff00
c001b57e:	09 d8                	or     eax,ebx
c001b580:	5b                   	pop    ebx
c001b581:	5e                   	pop    esi
c001b582:	5f                   	pop    edi
c001b583:	5d                   	pop    ebp
c001b584:	c3                   	ret    
c001b585:	90                   	nop

c001b586 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b586:	83 ec 18             	sub    esp,0x18
c001b589:	6a 08                	push   0x8
c001b58b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b590:	50                   	push   eax
c001b591:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b596:	50                   	push   eax
c001b597:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b59c:	50                   	push   eax
c001b59d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5a1:	e8 a0 fe ff ff       	call   c001b446 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5a6:	83 c4 2c             	add    esp,0x2c
c001b5a9:	0f b6 c4             	movzx  eax,ah
c001b5ac:	c3                   	ret    
c001b5ad:	90                   	nop

c001b5ae <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b5ae:	83 ec 18             	sub    esp,0x18
c001b5b1:	6a 08                	push   0x8
c001b5b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5b8:	50                   	push   eax
c001b5b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5be:	50                   	push   eax
c001b5bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5c4:	50                   	push   eax
c001b5c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5c9:	e8 78 fe ff ff       	call   c001b446 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5ce:	83 c4 2c             	add    esp,0x2c
c001b5d1:	c3                   	ret    

c001b5d2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b5d2:	83 ec 18             	sub    esp,0x18
c001b5d5:	6a 3c                	push   0x3c
c001b5d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5dc:	50                   	push   eax
c001b5dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5e2:	50                   	push   eax
c001b5e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5e8:	50                   	push   eax
c001b5e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5ed:	e8 54 fe ff ff       	call   c001b446 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5f2:	83 c4 2c             	add    esp,0x2c
c001b5f5:	c3                   	ret    

c001b5f6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b5f6:	83 ec 18             	sub    esp,0x18
c001b5f9:	6a 18                	push   0x18
c001b5fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b600:	50                   	push   eax
c001b601:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b606:	50                   	push   eax
c001b607:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b60c:	50                   	push   eax
c001b60d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b611:	e8 30 fe ff ff       	call   c001b446 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b616:	83 c4 2c             	add    esp,0x2c
c001b619:	0f b6 c4             	movzx  eax,ah
c001b61c:	c3                   	ret    
c001b61d:	90                   	nop

c001b61e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b61e:	55                   	push   ebp
c001b61f:	57                   	push   edi
c001b620:	56                   	push   esi
c001b621:	53                   	push   ebx
c001b622:	83 ec 28             	sub    esp,0x28
c001b625:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b629:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b62e:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b633:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b638:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b63f:	8d 43 12             	lea    eax,[ebx+0x12]
c001b642:	83 c3 10             	add    ebx,0x10
c001b645:	0f b6 c0             	movzx  eax,al
c001b648:	0f b6 db             	movzx  ebx,bl
c001b64b:	50                   	push   eax
c001b64c:	51                   	push   ecx
c001b64d:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b651:	57                   	push   edi
c001b652:	55                   	push   ebp
c001b653:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b657:	e8 ea fd ff ff       	call   c001b446 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b65c:	83 c4 14             	add    esp,0x14
c001b65f:	89 c6                	mov    esi,eax
c001b661:	53                   	push   ebx
c001b662:	c1 e6 10             	shl    esi,0x10
c001b665:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b669:	51                   	push   ecx
c001b66a:	57                   	push   edi
c001b66b:	55                   	push   ebp
c001b66c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b670:	e8 d1 fd ff ff       	call   c001b446 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b675:	83 c4 3c             	add    esp,0x3c
c001b678:	0f b7 c0             	movzx  eax,ax
c001b67b:	5b                   	pop    ebx
c001b67c:	09 f0                	or     eax,esi
c001b67e:	5e                   	pop    esi
c001b67f:	5f                   	pop    edi
c001b680:	5d                   	pop    ebp
c001b681:	c3                   	ret    

c001b682 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b682:	55                   	push   ebp
c001b683:	57                   	push   edi
c001b684:	56                   	push   esi
c001b685:	53                   	push   ebx
c001b686:	83 ec 0c             	sub    esp,0xc
c001b689:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b68d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b691:	89 f5                	mov    ebp,esi
c001b693:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b699:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b69d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b6a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b6a5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b6a9:	83 f9 01             	cmp    ecx,0x1
c001b6ac:	75 5d                	jne    c001b70b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b6ae:	0f b6 c8             	movzx  ecx,al
c001b6b1:	0f b6 d2             	movzx  edx,dl
c001b6b4:	c1 e1 10             	shl    ecx,0x10
c001b6b7:	c1 e2 0b             	shl    edx,0xb
c001b6ba:	89 f0                	mov    eax,esi
c001b6bc:	25 fc 00 00 00       	and    eax,0xfc
c001b6c1:	09 c1                	or     ecx,eax
c001b6c3:	89 e8                	mov    eax,ebp
c001b6c5:	0f b6 c0             	movzx  eax,al
c001b6c8:	c1 e0 08             	shl    eax,0x8
c001b6cb:	09 c1                	or     ecx,eax
c001b6cd:	09 d1                	or     ecx,edx
c001b6cf:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b6d4:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b6da:	89 c8                	mov    eax,ecx
c001b6dc:	ef                   	out    dx,eax
c001b6dd:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b6e2:	ed                   	in     eax,dx
c001b6e3:	0f b7 db             	movzx  ebx,bx
c001b6e6:	83 e6 02             	and    esi,0x2
c001b6e9:	74 0a                	je     c001b6f5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b6eb:	0f b7 d0             	movzx  edx,ax
c001b6ee:	c1 e3 10             	shl    ebx,0x10
c001b6f1:	09 d3                	or     ebx,edx
c001b6f3:	eb 05                	jmp    c001b6fa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b6f5:	66 31 c0             	xor    ax,ax
c001b6f8:	09 c3                	or     ebx,eax
c001b6fa:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b6ff:	89 c8                	mov    eax,ecx
c001b701:	ef                   	out    dx,eax
c001b702:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b707:	89 d8                	mov    eax,ebx
c001b709:	eb 41                	jmp    c001b74c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b70b:	83 f9 02             	cmp    ecx,0x2
c001b70e:	75 45                	jne    c001b755 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b710:	83 ec 0c             	sub    esp,0xc
c001b713:	0f b6 d2             	movzx  edx,dl
c001b716:	89 f1                	mov    ecx,esi
c001b718:	0f b6 c0             	movzx  eax,al
c001b71b:	0f b6 f1             	movzx  esi,cl
c001b71e:	89 e9                	mov    ecx,ebp
c001b720:	56                   	push   esi
c001b721:	0f b6 c9             	movzx  ecx,cl
c001b724:	51                   	push   ecx
c001b725:	52                   	push   edx
c001b726:	50                   	push   eax
c001b727:	57                   	push   edi
c001b728:	e8 a3 fc ff ff       	call   c001b3d0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b72d:	89 c2                	mov    edx,eax
c001b72f:	ed                   	in     eax,dx
c001b730:	83 c4 20             	add    esp,0x20
c001b733:	0f b7 db             	movzx  ebx,bx
c001b736:	f6 c2 02             	test   dl,0x2
c001b739:	74 0c                	je     c001b747 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b73b:	0f b7 c8             	movzx  ecx,ax
c001b73e:	89 d8                	mov    eax,ebx
c001b740:	c1 e0 10             	shl    eax,0x10
c001b743:	09 c8                	or     eax,ecx
c001b745:	eb 05                	jmp    c001b74c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b747:	66 31 c0             	xor    ax,ax
c001b74a:	09 d8                	or     eax,ebx
c001b74c:	ef                   	out    dx,eax
c001b74d:	83 c4 0c             	add    esp,0xc
c001b750:	5b                   	pop    ebx
c001b751:	5e                   	pop    esi
c001b752:	5f                   	pop    edi
c001b753:	5d                   	pop    ebp
c001b754:	c3                   	ret    
c001b755:	c7 44 24 20 1f 33 02 c0 	mov    DWORD PTR [esp+0x20],0xc002331f
c001b75d:	83 c4 0c             	add    esp,0xc
c001b760:	5b                   	pop    ebx
c001b761:	5e                   	pop    esi
c001b762:	5f                   	pop    edi
c001b763:	5d                   	pop    ebp
c001b764:	e9 5a 5f ff ff       	jmp    c00116c3 <KePanic(char const*)>
c001b769:	90                   	nop

c001b76a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b76a:	55                   	push   ebp
c001b76b:	57                   	push   edi
c001b76c:	56                   	push   esi
c001b76d:	53                   	push   ebx
c001b76e:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b774:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b77b:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b782:	0f 85 bd 00 00 00    	jne    c001b845 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b788:	83 ec 0c             	sub    esp,0xc
c001b78b:	68 14 01 00 00       	push   0x114
c001b790:	e8 25 c3 fe ff       	call   c0007aba <malloc>
c001b795:	83 c4 0c             	add    esp,0xc
c001b798:	89 c3                	mov    ebx,eax
c001b79a:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b7a0:	68 25 33 02 c0       	push   0xc0023325
c001b7a5:	50                   	push   eax
c001b7a6:	e8 a5 03 ff ff       	call   c000bb50 <File::File(char const*, Process*)>
c001b7ab:	83 c4 10             	add    esp,0x10
c001b7ae:	85 db                	test   ebx,ebx
c001b7b0:	0f 84 67 02 00 00    	je     c001ba1d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b7b6:	56                   	push   esi
c001b7b7:	56                   	push   esi
c001b7b8:	6a 01                	push   0x1
c001b7ba:	53                   	push   ebx
c001b7bb:	e8 ae 03 ff ff       	call   c000bb6e <File::open(FileOpenMode)>
c001b7c0:	83 c4 10             	add    esp,0x10
c001b7c3:	85 c0                	test   eax,eax
c001b7c5:	0f 85 52 02 00 00    	jne    c001ba1d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b7cb:	52                   	push   edx
c001b7cc:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b7d0:	50                   	push   eax
c001b7d1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b7d5:	50                   	push   eax
c001b7d6:	53                   	push   ebx
c001b7d7:	e8 94 06 ff ff       	call   c000be70 <File::stat(unsigned long long*, bool*)>
c001b7dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b7e0:	40                   	inc    eax
c001b7e1:	89 04 24             	mov    DWORD PTR [esp],eax
c001b7e4:	e8 d1 c2 fe ff       	call   c0007aba <malloc>
c001b7e9:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b7ed:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b7f2:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b7f6:	59                   	pop    ecx
c001b7f7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7f9:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b7fd:	51                   	push   ecx
c001b7fe:	50                   	push   eax
c001b7ff:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b803:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b807:	53                   	push   ebx
c001b808:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b80b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b80f:	83 c4 20             	add    esp,0x20
c001b812:	89 c8                	mov    eax,ecx
c001b814:	99                   	cdq    
c001b815:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b819:	0f 85 fe 01 00 00    	jne    c001ba1d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b81f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b823:	0f 85 f4 01 00 00    	jne    c001ba1d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b829:	83 ec 0c             	sub    esp,0xc
c001b82c:	53                   	push   ebx
c001b82d:	e8 9a 03 ff ff       	call   c000bbcc <File::close()>
c001b832:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b836:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b83d:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b842:	83 c4 10             	add    esp,0x10
c001b845:	a1 a4 d0 02 c0       	mov    eax,ds:0xc002d0a4
c001b84a:	8b 1d a8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0a8
c001b850:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b854:	31 f6                	xor    esi,esi
c001b856:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b85e:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b865:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b86a:	31 c9                	xor    ecx,ecx
c001b86c:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b874:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b879:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b881:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b885:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b88d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b891:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b895:	0f 8e 82 01 00 00    	jle    c001ba1d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b89b:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b89e:	d4 40                	aam    0x40
c001b8a0:	d5 39                	aad    0x39
c001b8a2:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b8a6:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b8aa:	d4 40                	aam    0x40
c001b8ac:	d5 39                	aad    0x39
c001b8ae:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b8b2:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b8b6:	d4 40                	aam    0x40
c001b8b8:	d5 39                	aad    0x39
c001b8ba:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b8be:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b8c2:	d4 40                	aam    0x40
c001b8c4:	d5 39                	aad    0x39
c001b8c6:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b8ca:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b8ce:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b8d2:	3c 56                	cmp    al,0x56
c001b8d4:	74 43                	je     c001b919 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b8d6:	d4 40                	aam    0x40
c001b8d8:	d5 39                	aad    0x39
c001b8da:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b8dd:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b8e1:	0f b6 c9             	movzx  ecx,cl
c001b8e4:	c1 e1 04             	shl    ecx,0x4
c001b8e7:	d4 40                	aam    0x40
c001b8e9:	d5 39                	aad    0x39
c001b8eb:	83 e8 30             	sub    eax,0x30
c001b8ee:	0f b6 c0             	movzx  eax,al
c001b8f1:	09 c1                	or     ecx,eax
c001b8f3:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b8f7:	c1 e1 04             	shl    ecx,0x4
c001b8fa:	d4 40                	aam    0x40
c001b8fc:	d5 39                	aad    0x39
c001b8fe:	83 e8 30             	sub    eax,0x30
c001b901:	0f b6 c0             	movzx  eax,al
c001b904:	09 c1                	or     ecx,eax
c001b906:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b90a:	c1 e1 04             	shl    ecx,0x4
c001b90d:	d4 40                	aam    0x40
c001b90f:	d5 39                	aad    0x39
c001b911:	83 e8 30             	sub    eax,0x30
c001b914:	0f b6 c0             	movzx  eax,al
c001b917:	09 c1                	or     ecx,eax
c001b919:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b91d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b921:	3c 58                	cmp    al,0x58
c001b923:	74 47                	je     c001b96c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b925:	d4 40                	aam    0x40
c001b927:	d5 39                	aad    0x39
c001b929:	8d 50 d0             	lea    edx,[eax-0x30]
c001b92c:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b930:	0f b6 d2             	movzx  edx,dl
c001b933:	c1 e2 04             	shl    edx,0x4
c001b936:	d4 40                	aam    0x40
c001b938:	d5 39                	aad    0x39
c001b93a:	83 e8 30             	sub    eax,0x30
c001b93d:	0f b6 c0             	movzx  eax,al
c001b940:	09 c2                	or     edx,eax
c001b942:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b946:	c1 e2 04             	shl    edx,0x4
c001b949:	d4 40                	aam    0x40
c001b94b:	d5 39                	aad    0x39
c001b94d:	83 e8 30             	sub    eax,0x30
c001b950:	0f b6 c0             	movzx  eax,al
c001b953:	09 c2                	or     edx,eax
c001b955:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b959:	c1 e2 04             	shl    edx,0x4
c001b95c:	d4 40                	aam    0x40
c001b95e:	d5 39                	aad    0x39
c001b960:	83 e8 30             	sub    eax,0x30
c001b963:	0f b6 c0             	movzx  eax,al
c001b966:	09 c2                	or     edx,eax
c001b968:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b96c:	83 c6 10             	add    esi,0x10
c001b96f:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b973:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b977:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b97b:	83 fa 0a             	cmp    edx,0xa
c001b97e:	74 0b                	je     c001b98b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b980:	47                   	inc    edi
c001b981:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b985:	75 19                	jne    c001b9a0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b987:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b98b:	31 c0                	xor    eax,eax
c001b98d:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b992:	0f 94 c0             	sete   al
c001b995:	01 c6                	add    esi,eax
c001b997:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b99c:	75 0b                	jne    c001b9a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b99e:	eb 14                	jmp    c001b9b4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b9a0:	46                   	inc    esi
c001b9a1:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b9a4:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b9a7:	eb ca                	jmp    c001b973 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b9a9:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b9ae:	0f 85 dd fe ff ff    	jne    c001b891 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b9b4:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b9b9:	74 10                	je     c001b9cb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b9bb:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b9c0:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b9c5:	0f 85 c6 fe ff ff    	jne    c001b891 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b9cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9cf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b9d3:	83 e8 30             	sub    eax,0x30
c001b9d6:	83 ef 30             	sub    edi,0x30
c001b9d9:	c1 e0 04             	shl    eax,0x4
c001b9dc:	09 f8                	or     eax,edi
c001b9de:	0f b6 c0             	movzx  eax,al
c001b9e1:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b9e5:	0f 85 a6 fe ff ff    	jne    c001b891 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b9eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9ef:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b9f3:	83 e8 30             	sub    eax,0x30
c001b9f6:	83 ef 30             	sub    edi,0x30
c001b9f9:	c1 e0 04             	shl    eax,0x4
c001b9fc:	09 f8                	or     eax,edi
c001b9fe:	0f b6 c0             	movzx  eax,al
c001ba01:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001ba05:	0f 85 86 fe ff ff    	jne    c001b891 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ba0b:	50                   	push   eax
c001ba0c:	50                   	push   eax
c001ba0d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001ba11:	50                   	push   eax
c001ba12:	55                   	push   ebp
c001ba13:	e8 28 4c fe ff       	call   c0000640 <strcpy>
c001ba18:	83 c4 10             	add    esp,0x10
c001ba1b:	eb 06                	jmp    c001ba23 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001ba1d:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001ba21:	31 ed                	xor    ebp,ebp
c001ba23:	81 c4 4c 01 00 00    	add    esp,0x14c
c001ba29:	89 e8                	mov    eax,ebp
c001ba2b:	5b                   	pop    ebx
c001ba2c:	5e                   	pop    esi
c001ba2d:	5f                   	pop    edi
c001ba2e:	5d                   	pop    ebp
c001ba2f:	c3                   	ret    

c001ba30 <PCI::checkBus(unsigned char)>:
c001ba30:	56                   	push   esi
c001ba31:	53                   	push   ebx
c001ba32:	31 db                	xor    ebx,ebx
c001ba34:	51                   	push   ecx
c001ba35:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ba3a:	52                   	push   edx
c001ba3b:	53                   	push   ebx
c001ba3c:	43                   	inc    ebx
c001ba3d:	56                   	push   esi
c001ba3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba42:	e8 03 03 00 00       	call   c001bd4a <PCI::checkDevice(unsigned char, unsigned char)>
c001ba47:	83 c4 10             	add    esp,0x10
c001ba4a:	83 fb 20             	cmp    ebx,0x20
c001ba4d:	75 eb                	jne    c001ba3a <PCI::checkBus(unsigned char)+0xa>
c001ba4f:	58                   	pop    eax
c001ba50:	5b                   	pop    ebx
c001ba51:	5e                   	pop    esi
c001ba52:	c3                   	ret    
c001ba53:	90                   	nop

c001ba54 <PCI::foundDevice(PCIDeviceInfo)>:
c001ba54:	55                   	push   ebp
c001ba55:	57                   	push   edi
c001ba56:	56                   	push   esi
c001ba57:	53                   	push   ebx
c001ba58:	83 ec 1c             	sub    esp,0x1c
c001ba5b:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001ba60:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba64:	3d ff ff 00 00       	cmp    eax,0xffff
c001ba69:	0f 84 57 01 00 00    	je     c001bbc6 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001ba6f:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001ba74:	66 3d 06 04          	cmp    ax,0x406
c001ba78:	75 2c                	jne    c001baa6 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001ba7a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001ba7f:	50                   	push   eax
c001ba80:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001ba85:	50                   	push   eax
c001ba86:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001ba8b:	50                   	push   eax
c001ba8c:	53                   	push   ebx
c001ba8d:	e8 64 fb ff ff       	call   c001b5f6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001ba92:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001ba96:	0f b6 c0             	movzx  eax,al
c001ba99:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ba9d:	83 c4 2c             	add    esp,0x2c
c001baa0:	5b                   	pop    ebx
c001baa1:	5e                   	pop    esi
c001baa2:	5f                   	pop    edi
c001baa3:	5d                   	pop    ebp
c001baa4:	eb 8a                	jmp    c001ba30 <PCI::checkBus(unsigned char)>
c001baa6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001baaa:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001bab0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bab4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001bab8:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001babd:	85 d2                	test   edx,edx
c001babf:	74 36                	je     c001baf7 <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001bac1:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001bac4:	85 c9                	test   ecx,ecx
c001bac6:	74 2b                	je     c001baf3 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001bac8:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001bace:	31 ee                	xor    esi,ebp
c001bad0:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001bad6:	75 1b                	jne    c001baf3 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001bad8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001badc:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001bae2:	75 0f                	jne    c001baf3 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001bae4:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001baeb:	39 f9                	cmp    ecx,edi
c001baed:	0f 84 d3 00 00 00    	je     c001bbc6 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001baf3:	8b 12                	mov    edx,DWORD PTR [edx]
c001baf5:	eb c6                	jmp    c001babd <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001baf7:	3d 01 06 00 00       	cmp    eax,0x601
c001bafc:	75 19                	jne    c001bb17 <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001bafe:	83 ec 0c             	sub    esp,0xc
c001bb01:	68 64 01 00 00       	push   0x164
c001bb06:	e8 af bf fe ff       	call   c0007aba <malloc>
c001bb0b:	89 c5                	mov    ebp,eax
c001bb0d:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb10:	e8 a1 0e 00 00       	call   c001c9b6 <SATABus::SATABus()>
c001bb15:	eb 1e                	jmp    c001bb35 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001bb17:	3d 01 01 00 00       	cmp    eax,0x101
c001bb1c:	75 62                	jne    c001bb80 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001bb1e:	83 ec 0c             	sub    esp,0xc
c001bb21:	68 70 02 00 00       	push   0x270
c001bb26:	e8 8f bf fe ff       	call   c0007aba <malloc>
c001bb2b:	89 c5                	mov    ebp,eax
c001bb2d:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb30:	e8 e5 02 00 00       	call   c001be1a <IDE::IDE()>
c001bb35:	5f                   	pop    edi
c001bb36:	58                   	pop    eax
c001bb37:	55                   	push   ebp
c001bb38:	53                   	push   ebx
c001bb39:	e8 8c 0e ff ff       	call   c000c9ca <Device::addChild(Device*)>
c001bb3e:	83 ec 1c             	sub    esp,0x1c
c001bb41:	b9 09 00 00 00       	mov    ecx,0x9
c001bb46:	fc                   	cld    
c001bb47:	89 e7                	mov    edi,esp
c001bb49:	8d 74 24 60          	lea    esi,[esp+0x60]
c001bb4d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bb4f:	55                   	push   ebp
c001bb50:	e8 bb 0d ff ff       	call   c000c910 <Device::preOpenPCI(PCIDeviceInfo)>
c001bb55:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001bb58:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001bb5c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001bb64:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001bb6c:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001bb74:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001bb77:	83 c4 4c             	add    esp,0x4c
c001bb7a:	5b                   	pop    ebx
c001bb7b:	5e                   	pop    esi
c001bb7c:	5f                   	pop    edi
c001bb7d:	5d                   	pop    ebp
c001bb7e:	ff e0                	jmp    eax
c001bb80:	83 ec 0c             	sub    esp,0xc
c001bb83:	68 58 01 00 00       	push   0x158
c001bb88:	e8 2d bf fe ff       	call   c0007aba <malloc>
c001bb8d:	89 c5                	mov    ebp,eax
c001bb8f:	58                   	pop    eax
c001bb90:	5a                   	pop    edx
c001bb91:	68 3e 33 02 c0       	push   0xc002333e
c001bb96:	55                   	push   ebp
c001bb97:	e8 e2 10 ff ff       	call   c000cc7e <DriverlessDevice::DriverlessDevice(char const*)>
c001bb9c:	59                   	pop    ecx
c001bb9d:	5e                   	pop    esi
c001bb9e:	55                   	push   ebp
c001bb9f:	53                   	push   ebx
c001bba0:	e8 25 0e ff ff       	call   c000c9ca <Device::addChild(Device*)>
c001bba5:	83 c4 10             	add    esp,0x10
c001bba8:	b9 09 00 00 00       	mov    ecx,0x9
c001bbad:	fc                   	cld    
c001bbae:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001bbb2:	89 fe                	mov    esi,edi
c001bbb4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bbb6:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001bbba:	83 c4 1c             	add    esp,0x1c
c001bbbd:	5b                   	pop    ebx
c001bbbe:	5e                   	pop    esi
c001bbbf:	5f                   	pop    edi
c001bbc0:	5d                   	pop    ebp
c001bbc1:	e9 4a 0d ff ff       	jmp    c000c910 <Device::preOpenPCI(PCIDeviceInfo)>
c001bbc6:	83 c4 1c             	add    esp,0x1c
c001bbc9:	5b                   	pop    ebx
c001bbca:	5e                   	pop    esi
c001bbcb:	5f                   	pop    edi
c001bbcc:	5d                   	pop    ebp
c001bbcd:	c3                   	ret    

c001bbce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001bbce:	55                   	push   ebp
c001bbcf:	57                   	push   edi
c001bbd0:	56                   	push   esi
c001bbd1:	53                   	push   ebx
c001bbd2:	83 ec 68             	sub    esp,0x68
c001bbd5:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001bbd9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001bbe0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bbe4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001bbeb:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bbf0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bbf4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001bbfb:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001bc00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bc04:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001bc09:	6a 0c                	push   0xc
c001bc0b:	57                   	push   edi
c001bc0c:	53                   	push   ebx
c001bc0d:	56                   	push   esi
c001bc0e:	55                   	push   ebp
c001bc0f:	e8 32 f8 ff ff       	call   c001b446 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc14:	83 c4 20             	add    esp,0x20
c001bc17:	57                   	push   edi
c001bc18:	53                   	push   ebx
c001bc19:	56                   	push   esi
c001bc1a:	55                   	push   ebp
c001bc1b:	e8 1c f9 ff ff       	call   c001b53c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bc20:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bc25:	57                   	push   edi
c001bc26:	53                   	push   ebx
c001bc27:	56                   	push   esi
c001bc28:	55                   	push   ebp
c001bc29:	e8 a4 f9 ff ff       	call   c001b5d2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bc2e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bc32:	83 c4 14             	add    esp,0x14
c001bc35:	6a 3c                	push   0x3c
c001bc37:	57                   	push   edi
c001bc38:	53                   	push   ebx
c001bc39:	56                   	push   esi
c001bc3a:	55                   	push   ebp
c001bc3b:	e8 06 f8 ff ff       	call   c001b446 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc40:	0f b6 c4             	movzx  eax,ah
c001bc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bc47:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bc4b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bc4f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bc54:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bc5a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bc60:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bc64:	83 c4 20             	add    esp,0x20
c001bc67:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bc6c:	74 30                	je     c001bc9e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bc6e:	31 c0                	xor    eax,eax
c001bc70:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bc74:	7e 28                	jle    c001bc9e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bc76:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bc7e:	39 cb                	cmp    ebx,ecx
c001bc80:	75 19                	jne    c001bc9b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bc82:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bc8a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bc8e:	75 0b                	jne    c001bc9b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bc90:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bc97:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bc9b:	40                   	inc    eax
c001bc9c:	eb d2                	jmp    c001bc70 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bc9e:	31 d2                	xor    edx,edx
c001bca0:	83 ec 0c             	sub    esp,0xc
c001bca3:	57                   	push   edi
c001bca4:	53                   	push   ebx
c001bca5:	56                   	push   esi
c001bca6:	52                   	push   edx
c001bca7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bcab:	55                   	push   ebp
c001bcac:	e8 6d f9 ff ff       	call   c001b61e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bcb1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bcb5:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bcb9:	42                   	inc    edx
c001bcba:	83 c4 20             	add    esp,0x20
c001bcbd:	83 fa 06             	cmp    edx,0x6
c001bcc0:	75 de                	jne    c001bca0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bcc2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bcc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bcca:	c1 e2 08             	shl    edx,0x8
c001bccd:	83 ec 0c             	sub    esp,0xc
c001bcd0:	0f b6 c4             	movzx  eax,ah
c001bcd3:	09 d0                	or     eax,edx
c001bcd5:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bcda:	6a 02                	push   0x2
c001bcdc:	57                   	push   edi
c001bcdd:	53                   	push   ebx
c001bcde:	56                   	push   esi
c001bcdf:	55                   	push   ebp
c001bce0:	e8 61 f7 ff ff       	call   c001b446 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bce5:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bcea:	83 c4 20             	add    esp,0x20
c001bced:	57                   	push   edi
c001bcee:	53                   	push   ebx
c001bcef:	56                   	push   esi
c001bcf0:	55                   	push   ebp
c001bcf1:	e8 90 f8 ff ff       	call   c001b586 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bcf6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bcfa:	57                   	push   edi
c001bcfb:	53                   	push   ebx
c001bcfc:	56                   	push   esi
c001bcfd:	55                   	push   ebp
c001bcfe:	e8 ed f7 ff ff       	call   c001b4f0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd03:	b9 09 00 00 00       	mov    ecx,0x9
c001bd08:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bd0d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bd11:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bd15:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bd19:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bd1d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bd21:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bd25:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bd29:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bd2d:	83 ec 0c             	sub    esp,0xc
c001bd30:	fc                   	cld    
c001bd31:	89 e7                	mov    edi,esp
c001bd33:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bd37:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bd39:	55                   	push   ebp
c001bd3a:	e8 15 fd ff ff       	call   c001ba54 <PCI::foundDevice(PCIDeviceInfo)>
c001bd3f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bd45:	5b                   	pop    ebx
c001bd46:	5e                   	pop    esi
c001bd47:	5f                   	pop    edi
c001bd48:	5d                   	pop    ebp
c001bd49:	c3                   	ret    

c001bd4a <PCI::checkDevice(unsigned char, unsigned char)>:
c001bd4a:	55                   	push   ebp
c001bd4b:	57                   	push   edi
c001bd4c:	56                   	push   esi
c001bd4d:	53                   	push   ebx
c001bd4e:	83 ec 0c             	sub    esp,0xc
c001bd51:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bd55:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bd5a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bd5f:	6a 00                	push   0x0
c001bd61:	56                   	push   esi
c001bd62:	57                   	push   edi
c001bd63:	55                   	push   ebp
c001bd64:	e8 87 f7 ff ff       	call   c001b4f0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd69:	6a 00                	push   0x0
c001bd6b:	56                   	push   esi
c001bd6c:	57                   	push   edi
c001bd6d:	55                   	push   ebp
c001bd6e:	e8 5b fe ff ff       	call   c001bbce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bd73:	83 c4 20             	add    esp,0x20
c001bd76:	6a 00                	push   0x0
c001bd78:	56                   	push   esi
c001bd79:	57                   	push   edi
c001bd7a:	55                   	push   ebp
c001bd7b:	e8 94 f7 ff ff       	call   c001b514 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bd80:	83 c4 10             	add    esp,0x10
c001bd83:	a8 80                	test   al,0x80
c001bd85:	74 2d                	je     c001bdb4 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bd87:	bb 01 00 00 00       	mov    ebx,0x1
c001bd8c:	53                   	push   ebx
c001bd8d:	56                   	push   esi
c001bd8e:	57                   	push   edi
c001bd8f:	55                   	push   ebp
c001bd90:	e8 5b f7 ff ff       	call   c001b4f0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd95:	83 c4 10             	add    esp,0x10
c001bd98:	0f b7 c0             	movzx  eax,ax
c001bd9b:	3d ff ff 00 00       	cmp    eax,0xffff
c001bda0:	74 0c                	je     c001bdae <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bda2:	53                   	push   ebx
c001bda3:	56                   	push   esi
c001bda4:	57                   	push   edi
c001bda5:	55                   	push   ebp
c001bda6:	e8 23 fe ff ff       	call   c001bbce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bdab:	83 c4 10             	add    esp,0x10
c001bdae:	43                   	inc    ebx
c001bdaf:	83 fb 08             	cmp    ebx,0x8
c001bdb2:	75 d8                	jne    c001bd8c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bdb4:	83 c4 0c             	add    esp,0xc
c001bdb7:	5b                   	pop    ebx
c001bdb8:	5e                   	pop    esi
c001bdb9:	5f                   	pop    edi
c001bdba:	5d                   	pop    ebp
c001bdbb:	c3                   	ret    

c001bdbc <PCI::detect()>:
c001bdbc:	56                   	push   esi
c001bdbd:	53                   	push   ebx
c001bdbe:	53                   	push   ebx
c001bdbf:	31 db                	xor    ebx,ebx
c001bdc1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bdc5:	6a 00                	push   0x0
c001bdc7:	6a 00                	push   0x0
c001bdc9:	6a 00                	push   0x0
c001bdcb:	56                   	push   esi
c001bdcc:	e8 43 f7 ff ff       	call   c001b514 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bdd1:	83 c4 10             	add    esp,0x10
c001bdd4:	a8 80                	test   al,0x80
c001bdd6:	75 21                	jne    c001bdf9 <PCI::detect()+0x3d>
c001bdd8:	51                   	push   ecx
c001bdd9:	51                   	push   ecx
c001bdda:	6a 00                	push   0x0
c001bddc:	56                   	push   esi
c001bddd:	e8 4e fc ff ff       	call   c001ba30 <PCI::checkBus(unsigned char)>
c001bde2:	83 c4 10             	add    esp,0x10
c001bde5:	eb 2a                	jmp    c001be11 <PCI::detect()+0x55>
c001bde7:	52                   	push   edx
c001bde8:	52                   	push   edx
c001bde9:	53                   	push   ebx
c001bdea:	43                   	inc    ebx
c001bdeb:	56                   	push   esi
c001bdec:	e8 3f fc ff ff       	call   c001ba30 <PCI::checkBus(unsigned char)>
c001bdf1:	83 c4 10             	add    esp,0x10
c001bdf4:	83 fb 08             	cmp    ebx,0x8
c001bdf7:	74 18                	je     c001be11 <PCI::detect()+0x55>
c001bdf9:	53                   	push   ebx
c001bdfa:	6a 00                	push   0x0
c001bdfc:	6a 00                	push   0x0
c001bdfe:	56                   	push   esi
c001bdff:	e8 ec f6 ff ff       	call   c001b4f0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001be04:	83 c4 10             	add    esp,0x10
c001be07:	0f b7 c0             	movzx  eax,ax
c001be0a:	3d ff ff 00 00       	cmp    eax,0xffff
c001be0f:	74 d6                	je     c001bde7 <PCI::detect()+0x2b>
c001be11:	58                   	pop    eax
c001be12:	5b                   	pop    ebx
c001be13:	5e                   	pop    esi
c001be14:	c3                   	ret    
c001be15:	90                   	nop

c001be16 <IDE::close(int, int, void*)>:
c001be16:	83 c8 ff             	or     eax,0xffffffff
c001be19:	c3                   	ret    

c001be1a <IDE::IDE()>:
c001be1a:	83 ec 0c             	sub    esp,0xc
c001be1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be21:	83 ec 08             	sub    esp,0x8
c001be24:	68 84 33 02 c0       	push   0xc0023384
c001be29:	50                   	push   eax
c001be2a:	e8 f5 0e ff ff       	call   c000cd24 <HardDiskController::HardDiskController(char const*)>
c001be2f:	83 c4 10             	add    esp,0x10
c001be32:	ba 14 34 02 c0       	mov    edx,0xc0023414
c001be37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be3b:	89 10                	mov    DWORD PTR [eax],edx
c001be3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be41:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001be48:	90                   	nop
c001be49:	83 c4 0c             	add    esp,0xc
c001be4c:	c3                   	ret    
c001be4d:	90                   	nop

c001be4e <IDE::prepareInterrupt(unsigned char)>:
c001be4e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001be57:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001be5f:	c3                   	ret    

c001be60 <selectDrive(unsigned char, unsigned char)>:
c001be60:	c3                   	ret    
c001be61:	90                   	nop

c001be62 <IDE::getBase(unsigned char)>:
c001be62:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001be67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be6b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001be73:	c3                   	ret    

c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001be74:	55                   	push   ebp
c001be75:	57                   	push   edi
c001be76:	56                   	push   esi
c001be77:	53                   	push   ebx
c001be78:	83 ec 1c             	sub    esp,0x1c
c001be7b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001be7f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be83:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001be86:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001be8a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001be8e:	80 f9 03             	cmp    cl,0x3
c001be91:	77 4f                	ja     c001bee2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001be93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be97:	0f b6 fa             	movzx  edi,dl
c001be9a:	0f b6 db             	movzx  ebx,bl
c001be9d:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bea0:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001bea5:	80 ca 80             	or     dl,0x80
c001bea8:	52                   	push   edx
c001bea9:	6a 0c                	push   0xc
c001beab:	57                   	push   edi
c001beac:	56                   	push   esi
c001bead:	e8 c2 ff ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001beb2:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001beb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bebb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bebf:	ee                   	out    dx,al
c001bec0:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bec5:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001bec9:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001becd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bed1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bed9:	83 c4 2c             	add    esp,0x2c
c001bedc:	5b                   	pop    ebx
c001bedd:	5e                   	pop    esi
c001bede:	5f                   	pop    edi
c001bedf:	5d                   	pop    ebp
c001bee0:	eb 92                	jmp    c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bee2:	0f b6 cb             	movzx  ecx,bl
c001bee5:	83 f9 07             	cmp    ecx,0x7
c001bee8:	77 12                	ja     c001befc <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001beea:	0f b6 d2             	movzx  edx,dl
c001beed:	0f b6 db             	movzx  ebx,bl
c001bef0:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001bef8:	01 da                	add    edx,ebx
c001befa:	eb 2f                	jmp    c001bf2b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001befc:	83 f9 0d             	cmp    ecx,0xd
c001beff:	77 13                	ja     c001bf14 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001bf01:	0f b6 d2             	movzx  edx,dl
c001bf04:	0f b6 db             	movzx  ebx,bl
c001bf07:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001bf0e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bf12:	eb 17                	jmp    c001bf2b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bf14:	83 f9 15             	cmp    ecx,0x15
c001bf17:	77 13                	ja     c001bf2c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001bf19:	0f b6 d2             	movzx  edx,dl
c001bf1c:	0f b6 db             	movzx  ebx,bl
c001bf1f:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001bf27:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bf2b:	ee                   	out    dx,al
c001bf2c:	83 c4 1c             	add    esp,0x1c
c001bf2f:	5b                   	pop    ebx
c001bf30:	5e                   	pop    esi
c001bf31:	5f                   	pop    edi
c001bf32:	5d                   	pop    ebp
c001bf33:	c3                   	ret    

c001bf34 <IDE::read(unsigned char, unsigned char)>:
c001bf34:	55                   	push   ebp
c001bf35:	57                   	push   edi
c001bf36:	56                   	push   esi
c001bf37:	53                   	push   ebx
c001bf38:	83 ec 1c             	sub    esp,0x1c
c001bf3b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bf3f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bf43:	8d 43 f8             	lea    eax,[ebx-0x8]
c001bf46:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001bf4a:	3c 03                	cmp    al,0x3
c001bf4c:	77 40                	ja     c001bf8e <IDE::read(unsigned char, unsigned char)+0x5a>
c001bf4e:	0f b6 f9             	movzx  edi,cl
c001bf51:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bf54:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bf59:	0c 80                	or     al,0x80
c001bf5b:	50                   	push   eax
c001bf5c:	6a 0c                	push   0xc
c001bf5e:	57                   	push   edi
c001bf5f:	56                   	push   esi
c001bf60:	e8 0f ff ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf65:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001bf6a:	0f b6 d3             	movzx  edx,bl
c001bf6d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bf71:	ec                   	in     al,dx
c001bf72:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bf76:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001bf7b:	52                   	push   edx
c001bf7c:	6a 0c                	push   0xc
c001bf7e:	57                   	push   edi
c001bf7f:	56                   	push   esi
c001bf80:	e8 ef fe ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf85:	83 c4 20             	add    esp,0x20
c001bf88:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bf8c:	eb 4c                	jmp    c001bfda <IDE::read(unsigned char, unsigned char)+0xa6>
c001bf8e:	0f b6 d3             	movzx  edx,bl
c001bf91:	83 fa 07             	cmp    edx,0x7
c001bf94:	77 12                	ja     c001bfa8 <IDE::read(unsigned char, unsigned char)+0x74>
c001bf96:	0f b6 c9             	movzx  ecx,cl
c001bf99:	0f b6 d3             	movzx  edx,bl
c001bf9c:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001bfa4:	01 c2                	add    edx,eax
c001bfa6:	eb 31                	jmp    c001bfd9 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bfa8:	83 fa 0d             	cmp    edx,0xd
c001bfab:	77 13                	ja     c001bfc0 <IDE::read(unsigned char, unsigned char)+0x8c>
c001bfad:	0f b6 c9             	movzx  ecx,cl
c001bfb0:	0f b6 d3             	movzx  edx,bl
c001bfb3:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001bfba:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bfbe:	eb 19                	jmp    c001bfd9 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bfc0:	31 c0                	xor    eax,eax
c001bfc2:	83 fa 15             	cmp    edx,0x15
c001bfc5:	77 13                	ja     c001bfda <IDE::read(unsigned char, unsigned char)+0xa6>
c001bfc7:	0f b6 c9             	movzx  ecx,cl
c001bfca:	0f b6 d3             	movzx  edx,bl
c001bfcd:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001bfd5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bfd9:	ec                   	in     al,dx
c001bfda:	83 c4 1c             	add    esp,0x1c
c001bfdd:	5b                   	pop    ebx
c001bfde:	5e                   	pop    esi
c001bfdf:	5f                   	pop    edi
c001bfe0:	5d                   	pop    ebp
c001bfe1:	c3                   	ret    

c001bfe2 <IDE::waitInterrupt(unsigned char)>:
c001bfe2:	55                   	push   ebp
c001bfe3:	57                   	push   edi
c001bfe4:	56                   	push   esi
c001bfe5:	53                   	push   ebx
c001bfe6:	31 db                	xor    ebx,ebx
c001bfe8:	83 ec 0c             	sub    esp,0xc
c001bfeb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bfef:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bff4:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bffc:	89 e8                	mov    eax,ebp
c001bffe:	84 c0                	test   al,al
c001c000:	75 30                	jne    c001c032 <IDE::waitInterrupt(unsigned char)+0x50>
c001c002:	50                   	push   eax
c001c003:	6a 0c                	push   0xc
c001c005:	56                   	push   esi
c001c006:	57                   	push   edi
c001c007:	e8 28 ff ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c00c:	83 c4 10             	add    esp,0x10
c001c00f:	a8 01                	test   al,0x1
c001c011:	75 27                	jne    c001c03a <IDE::waitInterrupt(unsigned char)+0x58>
c001c013:	f6 c3 04             	test   bl,0x4
c001c016:	75 12                	jne    c001c02a <IDE::waitInterrupt(unsigned char)+0x48>
c001c018:	83 fb 32             	cmp    ebx,0x32
c001c01b:	7e 0d                	jle    c001c02a <IDE::waitInterrupt(unsigned char)+0x48>
c001c01d:	83 ec 0c             	sub    esp,0xc
c001c020:	6a 64                	push   0x64
c001c022:	e8 b1 a4 ff ff       	call   c00164d8 <milliTenthSleep(unsigned int)>
c001c027:	83 c4 10             	add    esp,0x10
c001c02a:	83 fb 3c             	cmp    ebx,0x3c
c001c02d:	74 0b                	je     c001c03a <IDE::waitInterrupt(unsigned char)+0x58>
c001c02f:	43                   	inc    ebx
c001c030:	eb c2                	jmp    c001bff4 <IDE::waitInterrupt(unsigned char)+0x12>
c001c032:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001c03a:	83 c4 0c             	add    esp,0xc
c001c03d:	89 e8                	mov    eax,ebp
c001c03f:	5b                   	pop    ebx
c001c040:	5e                   	pop    esi
c001c041:	5f                   	pop    edi
c001c042:	5d                   	pop    ebp
c001c043:	c3                   	ret    

c001c044 <ideChannel0IRQHandler(regs*, void*)>:
c001c044:	83 ec 10             	sub    esp,0x10
c001c047:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c04b:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c052:	6a 07                	push   0x7
c001c054:	6a 00                	push   0x0
c001c056:	50                   	push   eax
c001c057:	e8 d8 fe ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c05c:	83 c4 1c             	add    esp,0x1c
c001c05f:	c3                   	ret    

c001c060 <ideChannel1IRQHandler(regs*, void*)>:
c001c060:	83 ec 10             	sub    esp,0x10
c001c063:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c067:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c06e:	6a 07                	push   0x7
c001c070:	6a 01                	push   0x1
c001c072:	50                   	push   eax
c001c073:	e8 bc fe ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c078:	83 c4 1c             	add    esp,0x1c
c001c07b:	c3                   	ret    

c001c07c <IDE::enableIRQs(unsigned char, bool)>:
c001c07c:	57                   	push   edi
c001c07d:	b8 02 00 00 00       	mov    eax,0x2
c001c082:	56                   	push   esi
c001c083:	53                   	push   ebx
c001c084:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c088:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c08c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c091:	74 02                	je     c001c095 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001c093:	31 c0                	xor    eax,eax
c001c095:	0f b6 db             	movzx  ebx,bl
c001c098:	bf 04 00 00 00       	mov    edi,0x4
c001c09d:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c0a4:	50                   	push   eax
c001c0a5:	6a 0c                	push   0xc
c001c0a7:	53                   	push   ebx
c001c0a8:	56                   	push   esi
c001c0a9:	e8 c6 fd ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0ae:	83 c4 10             	add    esp,0x10
c001c0b1:	50                   	push   eax
c001c0b2:	6a 0c                	push   0xc
c001c0b4:	53                   	push   ebx
c001c0b5:	56                   	push   esi
c001c0b6:	e8 79 fe ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c0bb:	83 c4 10             	add    esp,0x10
c001c0be:	4f                   	dec    edi
c001c0bf:	75 f0                	jne    c001c0b1 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c0c1:	5b                   	pop    ebx
c001c0c2:	5e                   	pop    esi
c001c0c3:	5f                   	pop    edi
c001c0c4:	c3                   	ret    
c001c0c5:	90                   	nop

c001c0c6 <IDE::open(int, int, void*)>:
c001c0c6:	55                   	push   ebp
c001c0c7:	57                   	push   edi
c001c0c8:	56                   	push   esi
c001c0c9:	53                   	push   ebx
c001c0ca:	83 ec 1c             	sub    esp,0x1c
c001c0cd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c0d1:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c0da:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c0e3:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c0ea:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c0f1:	0f 85 de 02 00 00    	jne    c001c3d5 <IDE::open(int, int, void*)+0x30f>
c001c0f7:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c0fd:	88 04 24             	mov    BYTE PTR [esp],al
c001c100:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c103:	83 e0 7f             	and    eax,0x7f
c001c106:	83 f8 05             	cmp    eax,0x5
c001c109:	74 05                	je     c001c110 <IDE::open(int, int, void*)+0x4a>
c001c10b:	83 f8 0f             	cmp    eax,0xf
c001c10e:	75 32                	jne    c001c142 <IDE::open(int, int, void*)+0x7c>
c001c110:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c116:	83 e0 fc             	and    eax,0xfffffffc
c001c119:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c120:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c126:	83 e0 fc             	and    eax,0xfffffffc
c001c129:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c130:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c136:	83 e0 fc             	and    eax,0xfffffffc
c001c139:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c140:	eb 14                	jmp    c001c156 <IDE::open(int, int, void*)+0x90>
c001c142:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c14c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c156:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001c15d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c164:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c168:	89 c6                	mov    esi,eax
c001c16a:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c16f:	c1 e6 10             	shl    esi,0x10
c001c172:	89 e8                	mov    eax,ebp
c001c174:	89 fa                	mov    edx,edi
c001c176:	c1 e0 0b             	shl    eax,0xb
c001c179:	09 f0                	or     eax,esi
c001c17b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001c182:	c1 e6 08             	shl    esi,0x8
c001c185:	09 c6                	or     esi,eax
c001c187:	89 f0                	mov    eax,esi
c001c189:	0d 08 00 00 80       	or     eax,0x80000008
c001c18e:	ef                   	out    dx,eax
c001c18f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001c194:	89 ca                	mov    edx,ecx
c001c196:	ed                   	in     eax,dx
c001c197:	c1 e8 10             	shr    eax,0x10
c001c19a:	3d ff ff 00 00       	cmp    eax,0xffff
c001c19f:	0f 84 f9 00 00 00    	je     c001c29e <IDE::open(int, int, void*)+0x1d8>
c001c1a5:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001c1ab:	89 fa                	mov    edx,edi
c001c1ad:	89 f0                	mov    eax,esi
c001c1af:	ef                   	out    dx,eax
c001c1b0:	b0 fe                	mov    al,0xfe
c001c1b2:	89 ca                	mov    edx,ecx
c001c1b4:	ee                   	out    dx,al
c001c1b5:	89 f0                	mov    eax,esi
c001c1b7:	89 fa                	mov    edx,edi
c001c1b9:	ef                   	out    dx,eax
c001c1ba:	89 ca                	mov    edx,ecx
c001c1bc:	ed                   	in     eax,dx
c001c1bd:	3c fe                	cmp    al,0xfe
c001c1bf:	0f 85 a9 00 00 00    	jne    c001c26e <IDE::open(int, int, void*)+0x1a8>
c001c1c5:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c1cb:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c1d2:	74 33                	je     c001c207 <IDE::open(int, int, void*)+0x141>
c001c1d4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c1da:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c1de:	40                   	inc    eax
c001c1df:	83 ec 0c             	sub    esp,0xc
c001c1e2:	0f b6 c0             	movzx  eax,al
c001c1e5:	50                   	push   eax
c001c1e6:	55                   	push   ebp
c001c1e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c1eb:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c1f1:	51                   	push   ecx
c001c1f2:	e8 e5 37 ff ff       	call   c000f9dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c1f7:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c1fc:	83 c4 1c             	add    esp,0x1c
c001c1ff:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c205:	eb 0a                	jmp    c001c211 <IDE::open(int, int, void*)+0x14b>
c001c207:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c211:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c218:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c21f:	c1 e1 10             	shl    ecx,0x10
c001c222:	c1 e0 08             	shl    eax,0x8
c001c225:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c22a:	09 c1                	or     ecx,eax
c001c22c:	89 fa                	mov    edx,edi
c001c22e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c235:	c1 e0 0b             	shl    eax,0xb
c001c238:	09 c1                	or     ecx,eax
c001c23a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c240:	89 c8                	mov    eax,ecx
c001c242:	ef                   	out    dx,eax
c001c243:	be fc 0c 00 00       	mov    esi,0xcfc
c001c248:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001c24e:	89 f2                	mov    edx,esi
c001c250:	ee                   	out    dx,al
c001c251:	89 c8                	mov    eax,ecx
c001c253:	89 fa                	mov    edx,edi
c001c255:	ef                   	out    dx,eax
c001c256:	89 f2                	mov    edx,esi
c001c258:	ed                   	in     eax,dx
c001c259:	0f b6 c0             	movzx  eax,al
c001c25c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c262:	74 4a                	je     c001c2ae <IDE::open(int, int, void*)+0x1e8>
c001c264:	83 ec 0c             	sub    esp,0xc
c001c267:	68 9c 33 02 c0       	push   0xc002339c
c001c26c:	eb 38                	jmp    c001c2a6 <IDE::open(int, int, void*)+0x1e0>
c001c26e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c277:	75 1b                	jne    c001c294 <IDE::open(int, int, void*)+0x1ce>
c001c279:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001c27d:	3d 80 00 00 00       	cmp    eax,0x80
c001c282:	74 07                	je     c001c28b <IDE::open(int, int, void*)+0x1c5>
c001c284:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c289:	75 09                	jne    c001c294 <IDE::open(int, int, void*)+0x1ce>
c001c28b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c292:	eb 1a                	jmp    c001c2ae <IDE::open(int, int, void*)+0x1e8>
c001c294:	83 ec 0c             	sub    esp,0xc
c001c297:	68 a4 33 02 c0       	push   0xc00233a4
c001c29c:	eb 08                	jmp    c001c2a6 <IDE::open(int, int, void*)+0x1e0>
c001c29e:	83 ec 0c             	sub    esp,0xc
c001c2a1:	68 d5 33 02 c0       	push   0xc00233d5
c001c2a6:	e8 18 54 ff ff       	call   c00116c3 <KePanic(char const*)>
c001c2ab:	83 c4 10             	add    esp,0x10
c001c2ae:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c2b5:	74 1a                	je     c001c2d1 <IDE::open(int, int, void*)+0x20b>
c001c2b7:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c2bd:	83 e0 fc             	and    eax,0xfffffffc
c001c2c0:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c2c7:	83 c0 08             	add    eax,0x8
c001c2ca:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c2d1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c2d7:	89 c2                	mov    edx,eax
c001c2d9:	83 e2 0f             	and    edx,0xf
c001c2dc:	83 fa 08             	cmp    edx,0x8
c001c2df:	75 0a                	jne    c001c2eb <IDE::open(int, int, void*)+0x225>
c001c2e1:	83 e8 02             	sub    eax,0x2
c001c2e4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c2eb:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c2f1:	89 c2                	mov    edx,eax
c001c2f3:	83 e2 0f             	and    edx,0xf
c001c2f6:	83 fa 08             	cmp    edx,0x8
c001c2f9:	75 0a                	jne    c001c305 <IDE::open(int, int, void*)+0x23f>
c001c2fb:	83 e8 02             	sub    eax,0x2
c001c2fe:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c305:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c30c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c313:	89 d0                	mov    eax,edx
c001c315:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c318:	8d 7a 01             	lea    edi,[edx+0x1]
c001c31b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c31f:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c323:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c327:	83 e1 3f             	and    ecx,0x3f
c001c32a:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c32e:	89 f9                	mov    ecx,edi
c001c330:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c337:	0f b6 c9             	movzx  ecx,cl
c001c33a:	8d 78 02             	lea    edi,[eax+0x2]
c001c33d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c340:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c344:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c348:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c34c:	83 e2 3f             	and    edx,0x3f
c001c34f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c353:	89 f9                	mov    ecx,edi
c001c355:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c35b:	0f b6 d1             	movzx  edx,cl
c001c35e:	8d 78 03             	lea    edi,[eax+0x3]
c001c361:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c364:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c368:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c36c:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c370:	83 e1 3f             	and    ecx,0x3f
c001c373:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c377:	89 f9                	mov    ecx,edi
c001c379:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c37f:	0f b6 c9             	movzx  ecx,cl
c001c382:	8d 78 04             	lea    edi,[eax+0x4]
c001c385:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c388:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c38c:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c390:	89 fa                	mov    edx,edi
c001c392:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c398:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c39c:	83 e2 3f             	and    edx,0x3f
c001c39f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c3a3:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c3aa:	66 85 f6             	test   si,si
c001c3ad:	74 65                	je     c001c414 <IDE::open(int, int, void*)+0x34e>
c001c3af:	89 f9                	mov    ecx,edi
c001c3b1:	83 c0 05             	add    eax,0x5
c001c3b4:	0f b6 d1             	movzx  edx,cl
c001c3b7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c3ba:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c3be:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c3c2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c3c8:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c3cc:	83 e0 3f             	and    eax,0x3f
c001c3cf:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c3d3:	eb 3f                	jmp    c001c414 <IDE::open(int, int, void*)+0x34e>
c001c3d5:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c3db:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c3e2:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c3e9:	05 06 02 00 00       	add    eax,0x206
c001c3ee:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c3f5:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c3fc:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c403:	05 06 02 00 00       	add    eax,0x206
c001c408:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c40f:	e9 bd fe ff ff       	jmp    c001c2d1 <IDE::open(int, int, void*)+0x20b>
c001c414:	50                   	push   eax
c001c415:	50                   	push   eax
c001c416:	6a 00                	push   0x0
c001c418:	53                   	push   ebx
c001c419:	e8 30 fa ff ff       	call   c001be4e <IDE::prepareInterrupt(unsigned char)>
c001c41e:	5a                   	pop    edx
c001c41f:	59                   	pop    ecx
c001c420:	6a 01                	push   0x1
c001c422:	53                   	push   ebx
c001c423:	e8 26 fa ff ff       	call   c001be4e <IDE::prepareInterrupt(unsigned char)>
c001c428:	83 c4 0c             	add    esp,0xc
c001c42b:	6a 00                	push   0x0
c001c42d:	6a 00                	push   0x0
c001c42f:	53                   	push   ebx
c001c430:	e8 47 fc ff ff       	call   c001c07c <IDE::enableIRQs(unsigned char, bool)>
c001c435:	83 c4 0c             	add    esp,0xc
c001c438:	6a 00                	push   0x0
c001c43a:	6a 01                	push   0x1
c001c43c:	53                   	push   ebx
c001c43d:	e8 3a fc ff ff       	call   c001c07c <IDE::enableIRQs(unsigned char, bool)>
c001c442:	83 c4 10             	add    esp,0x10
c001c445:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c44c:	74 34                	je     c001c482 <IDE::open(int, int, void*)+0x3bc>
c001c44e:	83 ec 0c             	sub    esp,0xc
c001c451:	53                   	push   ebx
c001c452:	6a 01                	push   0x1
c001c454:	68 44 c0 01 c0       	push   0xc001c044
c001c459:	6a 0e                	push   0xe
c001c45b:	53                   	push   ebx
c001c45c:	e8 15 05 ff ff       	call   c000c976 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c461:	83 c4 14             	add    esp,0x14
c001c464:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c46a:	53                   	push   ebx
c001c46b:	6a 01                	push   0x1
c001c46d:	68 60 c0 01 c0       	push   0xc001c060
c001c472:	6a 0f                	push   0xf
c001c474:	53                   	push   ebx
c001c475:	e8 fc 04 ff ff       	call   c000c976 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c47a:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c480:	eb 38                	jmp    c001c4ba <IDE::open(int, int, void*)+0x3f4>
c001c482:	83 ec 0c             	sub    esp,0xc
c001c485:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c48f:	53                   	push   ebx
c001c490:	6a 00                	push   0x0
c001c492:	68 44 c0 01 c0       	push   0xc001c044
c001c497:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c49d:	53                   	push   ebx
c001c49e:	e8 d3 04 ff ff       	call   c000c976 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c4a3:	83 c4 14             	add    esp,0x14
c001c4a6:	53                   	push   ebx
c001c4a7:	6a 00                	push   0x0
c001c4a9:	68 60 c0 01 c0       	push   0xc001c060
c001c4ae:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c4b4:	53                   	push   ebx
c001c4b5:	e8 bc 04 ff ff       	call   c000c976 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c4ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c4bc:	83 c4 20             	add    esp,0x20
c001c4bf:	83 ec 0c             	sub    esp,0xc
c001c4c2:	53                   	push   ebx
c001c4c3:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c4c6:	83 c4 0c             	add    esp,0xc
c001c4c9:	6a 07                	push   0x7
c001c4cb:	6a 00                	push   0x0
c001c4cd:	53                   	push   ebx
c001c4ce:	e8 61 fa ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c4d3:	83 c4 0c             	add    esp,0xc
c001c4d6:	6a 07                	push   0x7
c001c4d8:	6a 01                	push   0x1
c001c4da:	53                   	push   ebx
c001c4db:	e8 54 fa ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c4e0:	83 c4 0c             	add    esp,0xc
c001c4e3:	6a 01                	push   0x1
c001c4e5:	6a 00                	push   0x0
c001c4e7:	53                   	push   ebx
c001c4e8:	e8 8f fb ff ff       	call   c001c07c <IDE::enableIRQs(unsigned char, bool)>
c001c4ed:	83 c4 0c             	add    esp,0xc
c001c4f0:	6a 01                	push   0x1
c001c4f2:	6a 01                	push   0x1
c001c4f4:	53                   	push   ebx
c001c4f5:	e8 82 fb ff ff       	call   c001c07c <IDE::enableIRQs(unsigned char, bool)>
c001c4fa:	83 c4 2c             	add    esp,0x2c
c001c4fd:	31 c0                	xor    eax,eax
c001c4ff:	5b                   	pop    ebx
c001c500:	5e                   	pop    esi
c001c501:	5f                   	pop    edi
c001c502:	5d                   	pop    ebp
c001c503:	c3                   	ret    

c001c504 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c504:	55                   	push   ebp
c001c505:	57                   	push   edi
c001c506:	56                   	push   esi
c001c507:	53                   	push   ebx
c001c508:	83 ec 1c             	sub    esp,0x1c
c001c50b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c50f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c513:	8d 42 f8             	lea    eax,[edx-0x8]
c001c516:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c51a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c51e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c522:	3c 03                	cmp    al,0x3
c001c524:	77 5a                	ja     c001c580 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c526:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c52a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c52e:	0f b6 db             	movzx  ebx,bl
c001c531:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c534:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c539:	0c 80                	or     al,0x80
c001c53b:	50                   	push   eax
c001c53c:	6a 0c                	push   0xc
c001c53e:	53                   	push   ebx
c001c53f:	56                   	push   esi
c001c540:	e8 2f f9 ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c545:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c54a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c54e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c552:	0f b6 d2             	movzx  edx,dl
c001c555:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c559:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c55b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c560:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c564:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c568:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c56c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c574:	83 c4 2c             	add    esp,0x2c
c001c577:	5b                   	pop    ebx
c001c578:	5e                   	pop    esi
c001c579:	5f                   	pop    edi
c001c57a:	5d                   	pop    ebp
c001c57b:	e9 f4 f8 ff ff       	jmp    c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c580:	0f b6 c2             	movzx  eax,dl
c001c583:	83 f8 07             	cmp    eax,0x7
c001c586:	77 12                	ja     c001c59a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c588:	0f b6 c2             	movzx  eax,dl
c001c58b:	0f b6 db             	movzx  ebx,bl
c001c58e:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c596:	01 c2                	add    edx,eax
c001c598:	eb 2f                	jmp    c001c5c9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c59a:	83 f8 0d             	cmp    eax,0xd
c001c59d:	77 13                	ja     c001c5b2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c59f:	0f b6 db             	movzx  ebx,bl
c001c5a2:	0f b6 d2             	movzx  edx,dl
c001c5a5:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c5ac:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c5b0:	eb 17                	jmp    c001c5c9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c5b2:	83 f8 15             	cmp    eax,0x15
c001c5b5:	77 14                	ja     c001c5cb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c5b7:	0f b6 db             	movzx  ebx,bl
c001c5ba:	0f b6 d2             	movzx  edx,dl
c001c5bd:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c5c5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c5c9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c5cb:	83 c4 1c             	add    esp,0x1c
c001c5ce:	5b                   	pop    ebx
c001c5cf:	5e                   	pop    esi
c001c5d0:	5f                   	pop    edi
c001c5d1:	5d                   	pop    ebp
c001c5d2:	c3                   	ret    
c001c5d3:	90                   	nop

c001c5d4 <IDE::detect()>:
c001c5d4:	55                   	push   ebp
c001c5d5:	57                   	push   edi
c001c5d6:	56                   	push   esi
c001c5d7:	53                   	push   ebx
c001c5d8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c5de:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c5e5:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c5ec:	0f 85 a4 02 00 00    	jne    c001c896 <IDE::detect()+0x2c2>
c001c5f2:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c5f9:	31 f6                	xor    esi,esi
c001c5fb:	31 ed                	xor    ebp,ebp
c001c5fd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c605:	89 e8                	mov    eax,ebp
c001c607:	c1 e0 06             	shl    eax,0x6
c001c60a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c612:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c616:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c61a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c61e:	c1 e0 04             	shl    eax,0x4
c001c621:	83 c8 a0             	or     eax,0xffffffa0
c001c624:	0f b6 c0             	movzx  eax,al
c001c627:	50                   	push   eax
c001c628:	6a 06                	push   0x6
c001c62a:	56                   	push   esi
c001c62b:	53                   	push   ebx
c001c62c:	e8 43 f8 ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c631:	83 c4 0c             	add    esp,0xc
c001c634:	6a 0c                	push   0xc
c001c636:	56                   	push   esi
c001c637:	53                   	push   ebx
c001c638:	e8 f7 f8 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c63d:	83 c4 0c             	add    esp,0xc
c001c640:	6a 0c                	push   0xc
c001c642:	56                   	push   esi
c001c643:	53                   	push   ebx
c001c644:	e8 eb f8 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c649:	83 c4 0c             	add    esp,0xc
c001c64c:	6a 0c                	push   0xc
c001c64e:	56                   	push   esi
c001c64f:	53                   	push   ebx
c001c650:	e8 df f8 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c655:	83 c4 0c             	add    esp,0xc
c001c658:	6a 0c                	push   0xc
c001c65a:	56                   	push   esi
c001c65b:	53                   	push   ebx
c001c65c:	e8 d3 f8 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c661:	68 ec 00 00 00       	push   0xec
c001c666:	6a 07                	push   0x7
c001c668:	56                   	push   esi
c001c669:	53                   	push   ebx
c001c66a:	e8 05 f8 ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c66f:	83 c4 1c             	add    esp,0x1c
c001c672:	6a 0c                	push   0xc
c001c674:	56                   	push   esi
c001c675:	53                   	push   ebx
c001c676:	e8 b9 f8 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c67b:	83 c4 0c             	add    esp,0xc
c001c67e:	6a 0c                	push   0xc
c001c680:	56                   	push   esi
c001c681:	53                   	push   ebx
c001c682:	e8 ad f8 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c687:	83 c4 0c             	add    esp,0xc
c001c68a:	6a 0c                	push   0xc
c001c68c:	56                   	push   esi
c001c68d:	53                   	push   ebx
c001c68e:	e8 a1 f8 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c693:	83 c4 0c             	add    esp,0xc
c001c696:	6a 0c                	push   0xc
c001c698:	56                   	push   esi
c001c699:	53                   	push   ebx
c001c69a:	e8 95 f8 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c69f:	83 c4 0c             	add    esp,0xc
c001c6a2:	6a 0c                	push   0xc
c001c6a4:	56                   	push   esi
c001c6a5:	53                   	push   ebx
c001c6a6:	e8 89 f8 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c6ab:	83 c4 10             	add    esp,0x10
c001c6ae:	84 c0                	test   al,al
c001c6b0:	0f 84 60 01 00 00    	je     c001c816 <IDE::detect()+0x242>
c001c6b6:	31 ff                	xor    edi,edi
c001c6b8:	50                   	push   eax
c001c6b9:	6a 0c                	push   0xc
c001c6bb:	56                   	push   esi
c001c6bc:	53                   	push   ebx
c001c6bd:	e8 72 f8 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c6c2:	83 c4 10             	add    esp,0x10
c001c6c5:	a8 01                	test   al,0x1
c001c6c7:	0f 85 6a 01 00 00    	jne    c001c837 <IDE::detect()+0x263>
c001c6cd:	a8 80                	test   al,0x80
c001c6cf:	75 04                	jne    c001c6d5 <IDE::detect()+0x101>
c001c6d1:	a8 08                	test   al,0x8
c001c6d3:	75 23                	jne    c001c6f8 <IDE::detect()+0x124>
c001c6d5:	47                   	inc    edi
c001c6d6:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c6dc:	7e da                	jle    c001c6b8 <IDE::detect()+0xe4>
c001c6de:	83 ec 0c             	sub    esp,0xc
c001c6e1:	6a 32                	push   0x32
c001c6e3:	e8 f0 9d ff ff       	call   c00164d8 <milliTenthSleep(unsigned int)>
c001c6e8:	83 c4 10             	add    esp,0x10
c001c6eb:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c6f1:	75 c5                	jne    c001c6b8 <IDE::detect()+0xe4>
c001c6f3:	e9 3f 01 00 00       	jmp    c001c837 <IDE::detect()+0x263>
c001c6f8:	31 c9                	xor    ecx,ecx
c001c6fa:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c6fe:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c702:	83 ec 0c             	sub    esp,0xc
c001c705:	68 80 00 00 00       	push   0x80
c001c70a:	57                   	push   edi
c001c70b:	6a 00                	push   0x0
c001c70d:	56                   	push   esi
c001c70e:	53                   	push   ebx
c001c70f:	e8 f0 fd ff ff       	call   c001c504 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c714:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c719:	89 e8                	mov    eax,ebp
c001c71b:	89 d1                	mov    ecx,edx
c001c71d:	c1 e0 06             	shl    eax,0x6
c001c720:	01 d8                	add    eax,ebx
c001c722:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c729:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c730:	89 f2                	mov    edx,esi
c001c732:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c738:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c73c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c742:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c746:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c74d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c755:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c75c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c764:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c76a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c771:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c777:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c77b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c77f:	83 c4 20             	add    esp,0x20
c001c782:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c785:	83 c0 02             	add    eax,0x2
c001c788:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c78e:	83 c7 02             	add    edi,0x2
c001c791:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c794:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c79a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c79e:	75 e2                	jne    c001c782 <IDE::detect()+0x1ae>
c001c7a0:	89 e8                	mov    eax,ebp
c001c7a2:	c1 e0 06             	shl    eax,0x6
c001c7a5:	01 d8                	add    eax,ebx
c001c7a7:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c7ae:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c7b5:	c1 ea 09             	shr    edx,0x9
c001c7b8:	83 e2 01             	and    edx,0x1
c001c7bb:	80 e1 01             	and    cl,0x1
c001c7be:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c7c4:	75 22                	jne    c001c7e8 <IDE::detect()+0x214>
c001c7c6:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c7cd:	74 46                	je     c001c815 <IDE::detect()+0x241>
c001c7cf:	83 ec 0c             	sub    esp,0xc
c001c7d2:	68 7c 01 00 00       	push   0x17c
c001c7d7:	e8 de b2 fe ff       	call   c0007aba <malloc>
c001c7dc:	89 c7                	mov    edi,eax
c001c7de:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7e1:	e8 1a 05 00 00       	call   c001cd00 <ATA::ATA()>
c001c7e6:	eb 17                	jmp    c001c7ff <IDE::detect()+0x22b>
c001c7e8:	83 ec 0c             	sub    esp,0xc
c001c7eb:	68 84 01 00 00       	push   0x184
c001c7f0:	e8 c5 b2 fe ff       	call   c0007aba <malloc>
c001c7f5:	89 c7                	mov    edi,eax
c001c7f7:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7fa:	e8 45 0e 00 00       	call   c001d644 <ATAPI::ATAPI()>
c001c7ff:	5a                   	pop    edx
c001c800:	59                   	pop    ecx
c001c801:	57                   	push   edi
c001c802:	53                   	push   ebx
c001c803:	e8 c2 01 ff ff       	call   c000c9ca <Device::addChild(Device*)>
c001c808:	8b 07                	mov    eax,DWORD PTR [edi]
c001c80a:	53                   	push   ebx
c001c80b:	55                   	push   ebp
c001c80c:	6a 00                	push   0x0
c001c80e:	57                   	push   edi
c001c80f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c812:	83 c4 20             	add    esp,0x20
c001c815:	45                   	inc    ebp
c001c816:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c81b:	74 0d                	je     c001c82a <IDE::detect()+0x256>
c001c81d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c825:	e9 db fd ff ff       	jmp    c001c605 <IDE::detect()+0x31>
c001c82a:	4e                   	dec    esi
c001c82b:	74 69                	je     c001c896 <IDE::detect()+0x2c2>
c001c82d:	be 01 00 00 00       	mov    esi,0x1
c001c832:	e9 c6 fd ff ff       	jmp    c001c5fd <IDE::detect()+0x29>
c001c837:	50                   	push   eax
c001c838:	6a 04                	push   0x4
c001c83a:	56                   	push   esi
c001c83b:	53                   	push   ebx
c001c83c:	e8 f3 f6 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c841:	83 c4 0c             	add    esp,0xc
c001c844:	89 c7                	mov    edi,eax
c001c846:	6a 05                	push   0x5
c001c848:	56                   	push   esi
c001c849:	53                   	push   ebx
c001c84a:	e8 e5 f6 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c84f:	83 c4 10             	add    esp,0x10
c001c852:	89 f9                	mov    ecx,edi
c001c854:	0f b6 c0             	movzx  eax,al
c001c857:	0f b6 f9             	movzx  edi,cl
c001c85a:	83 ff 14             	cmp    edi,0x14
c001c85d:	75 07                	jne    c001c866 <IDE::detect()+0x292>
c001c85f:	3d eb 00 00 00       	cmp    eax,0xeb
c001c864:	eb 0a                	jmp    c001c870 <IDE::detect()+0x29c>
c001c866:	3d 96 00 00 00       	cmp    eax,0x96
c001c86b:	75 a9                	jne    c001c816 <IDE::detect()+0x242>
c001c86d:	83 ff 69             	cmp    edi,0x69
c001c870:	75 a4                	jne    c001c816 <IDE::detect()+0x242>
c001c872:	68 a1 00 00 00       	push   0xa1
c001c877:	6a 07                	push   0x7
c001c879:	56                   	push   esi
c001c87a:	53                   	push   ebx
c001c87b:	e8 f4 f5 ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c880:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c887:	e8 4c 9c ff ff       	call   c00164d8 <milliTenthSleep(unsigned int)>
c001c88c:	83 c4 10             	add    esp,0x10
c001c88f:	b1 01                	mov    cl,0x1
c001c891:	e9 64 fe ff ff       	jmp    c001c6fa <IDE::detect()+0x126>
c001c896:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c89c:	5b                   	pop    ebx
c001c89d:	5e                   	pop    esi
c001c89e:	5f                   	pop    edi
c001c89f:	5d                   	pop    ebp
c001c8a0:	c3                   	ret    
c001c8a1:	90                   	nop

c001c8a2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c8a2:	55                   	push   ebp
c001c8a3:	57                   	push   edi
c001c8a4:	56                   	push   esi
c001c8a5:	53                   	push   ebx
c001c8a6:	83 ec 1c             	sub    esp,0x1c
c001c8a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c8ad:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c8b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8b5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c8b9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c8bd:	88 c3                	mov    bl,al
c001c8bf:	25 ff 00 00 00       	and    eax,0xff
c001c8c4:	0f 84 88 00 00 00    	je     c001c952 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8ca:	83 ec 0c             	sub    esp,0xc
c001c8cd:	89 c7                	mov    edi,eax
c001c8cf:	68 ff 33 02 c0       	push   0xc00233ff
c001c8d4:	e8 70 e0 fe ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001c8d9:	83 c4 10             	add    esp,0x10
c001c8dc:	83 ff 01             	cmp    edi,0x1
c001c8df:	74 6b                	je     c001c94c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c8e1:	83 ff 02             	cmp    edi,0x2
c001c8e4:	75 58                	jne    c001c93e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c8e6:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c8eb:	01 ff                	add    edi,edi
c001c8ed:	50                   	push   eax
c001c8ee:	09 fe                	or     esi,edi
c001c8f0:	6a 01                	push   0x1
c001c8f2:	89 f0                	mov    eax,esi
c001c8f4:	0f b6 f0             	movzx  esi,al
c001c8f7:	c1 e6 06             	shl    esi,0x6
c001c8fa:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c902:	50                   	push   eax
c001c903:	55                   	push   ebp
c001c904:	e8 2b f6 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c909:	83 c4 10             	add    esp,0x10
c001c90c:	a8 01                	test   al,0x1
c001c90e:	74 02                	je     c001c912 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c910:	b3 07                	mov    bl,0x7
c001c912:	a8 02                	test   al,0x2
c001c914:	74 02                	je     c001c918 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c916:	b3 03                	mov    bl,0x3
c001c918:	a8 04                	test   al,0x4
c001c91a:	74 02                	je     c001c91e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c91c:	b3 14                	mov    bl,0x14
c001c91e:	a8 08                	test   al,0x8
c001c920:	74 02                	je     c001c924 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c922:	b3 03                	mov    bl,0x3
c001c924:	a8 10                	test   al,0x10
c001c926:	74 02                	je     c001c92a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c928:	b3 15                	mov    bl,0x15
c001c92a:	a8 20                	test   al,0x20
c001c92c:	74 02                	je     c001c930 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c92e:	b3 03                	mov    bl,0x3
c001c930:	a8 40                	test   al,0x40
c001c932:	74 02                	je     c001c936 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c934:	b3 16                	mov    bl,0x16
c001c936:	a8 80                	test   al,0x80
c001c938:	74 18                	je     c001c952 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c93a:	b3 0d                	mov    bl,0xd
c001c93c:	eb 14                	jmp    c001c952 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c93e:	83 ff 03             	cmp    edi,0x3
c001c941:	74 0d                	je     c001c950 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c943:	83 ff 04             	cmp    edi,0x4
c001c946:	75 0a                	jne    c001c952 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c948:	b3 08                	mov    bl,0x8
c001c94a:	eb 06                	jmp    c001c952 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c94c:	b3 13                	mov    bl,0x13
c001c94e:	eb 02                	jmp    c001c952 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c950:	b3 17                	mov    bl,0x17
c001c952:	83 c4 1c             	add    esp,0x1c
c001c955:	88 d8                	mov    al,bl
c001c957:	5b                   	pop    ebx
c001c958:	5e                   	pop    esi
c001c959:	5f                   	pop    edi
c001c95a:	5d                   	pop    ebp
c001c95b:	c3                   	ret    

c001c95c <IDE::polling(unsigned char, unsigned int)>:
c001c95c:	57                   	push   edi
c001c95d:	56                   	push   esi
c001c95e:	53                   	push   ebx
c001c95f:	bb 04 00 00 00       	mov    ebx,0x4
c001c964:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c968:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c96d:	52                   	push   edx
c001c96e:	6a 0c                	push   0xc
c001c970:	56                   	push   esi
c001c971:	57                   	push   edi
c001c972:	e8 bd f5 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c977:	83 c4 10             	add    esp,0x10
c001c97a:	4b                   	dec    ebx
c001c97b:	75 f0                	jne    c001c96d <IDE::polling(unsigned char, unsigned int)+0x11>
c001c97d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c982:	50                   	push   eax
c001c983:	6a 0c                	push   0xc
c001c985:	56                   	push   esi
c001c986:	57                   	push   edi
c001c987:	e8 a8 f5 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c98c:	83 c4 10             	add    esp,0x10
c001c98f:	a8 01                	test   al,0x1
c001c991:	75 17                	jne    c001c9aa <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c993:	a8 20                	test   al,0x20
c001c995:	75 0f                	jne    c001c9a6 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c997:	4b                   	dec    ebx
c001c998:	74 10                	je     c001c9aa <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c99a:	a8 80                	test   al,0x80
c001c99c:	75 e4                	jne    c001c982 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c99e:	a8 08                	test   al,0x8
c001c9a0:	74 e0                	je     c001c982 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c9a2:	31 c0                	xor    eax,eax
c001c9a4:	eb 06                	jmp    c001c9ac <IDE::polling(unsigned char, unsigned int)+0x50>
c001c9a6:	b0 01                	mov    al,0x1
c001c9a8:	eb 02                	jmp    c001c9ac <IDE::polling(unsigned char, unsigned int)+0x50>
c001c9aa:	b0 02                	mov    al,0x2
c001c9ac:	5b                   	pop    ebx
c001c9ad:	5e                   	pop    esi
c001c9ae:	5f                   	pop    edi
c001c9af:	c3                   	ret    

c001c9b0 <SATABus::close(int, int, void*)>:
c001c9b0:	31 c0                	xor    eax,eax
c001c9b2:	c3                   	ret    
c001c9b3:	90                   	nop

c001c9b4 <SATABus::detect()>:
c001c9b4:	c3                   	ret    
c001c9b5:	90                   	nop

c001c9b6 <SATABus::SATABus()>:
c001c9b6:	83 ec 0c             	sub    esp,0xc
c001c9b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9bd:	83 ec 08             	sub    esp,0x8
c001c9c0:	68 38 34 02 c0       	push   0xc0023438
c001c9c5:	50                   	push   eax
c001c9c6:	e8 59 03 ff ff       	call   c000cd24 <HardDiskController::HardDiskController(char const*)>
c001c9cb:	83 c4 10             	add    esp,0x10
c001c9ce:	ba 64 34 02 c0       	mov    edx,0xc0023464
c001c9d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9d7:	89 10                	mov    DWORD PTR [eax],edx
c001c9d9:	83 ec 0c             	sub    esp,0xc
c001c9dc:	6a 50                	push   0x50
c001c9de:	e8 af b4 fe ff       	call   c0007e92 <Phys::allocateContiguousPages(int)>
c001c9e3:	83 c4 10             	add    esp,0x10
c001c9e6:	89 c2                	mov    edx,eax
c001c9e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ec:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c9f2:	83 ec 0c             	sub    esp,0xc
c001c9f5:	6a 50                	push   0x50
c001c9f7:	e8 15 cc fe ff       	call   c0009611 <Virt::allocateKernelVirtualPages(int)>
c001c9fc:	83 c4 10             	add    esp,0x10
c001c9ff:	89 c2                	mov    edx,eax
c001ca01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca05:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ca0b:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001ca10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ca14:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001ca1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ca1e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ca24:	83 ec 0c             	sub    esp,0xc
c001ca27:	6a 03                	push   0x3
c001ca29:	6a 50                	push   0x50
c001ca2b:	51                   	push   ecx
c001ca2c:	52                   	push   edx
c001ca2d:	50                   	push   eax
c001ca2e:	e8 eb d4 fe ff       	call   c0009f1e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ca33:	83 c4 20             	add    esp,0x20
c001ca36:	90                   	nop
c001ca37:	83 c4 0c             	add    esp,0xc
c001ca3a:	c3                   	ret    
c001ca3b:	90                   	nop

c001ca3c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001ca3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca40:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001ca43:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ca46:	09 c2                	or     edx,eax
c001ca48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca4c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ca52:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ca54:	31 c0                	xor    eax,eax
c001ca56:	c1 e9 08             	shr    ecx,0x8
c001ca59:	83 e1 0f             	and    ecx,0xf
c001ca5c:	39 c8                	cmp    eax,ecx
c001ca5e:	74 0a                	je     c001ca6a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001ca60:	f6 c2 01             	test   dl,0x1
c001ca63:	74 08                	je     c001ca6d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001ca65:	d1 ea                	shr    edx,1
c001ca67:	40                   	inc    eax
c001ca68:	eb f2                	jmp    c001ca5c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001ca6a:	83 c8 ff             	or     eax,0xffffffff
c001ca6d:	c3                   	ret    

c001ca6e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001ca6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ca72:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001ca75:	89 c2                	mov    edx,eax
c001ca77:	c1 ea 08             	shr    edx,0x8
c001ca7a:	83 e2 0f             	and    edx,0xf
c001ca7d:	4a                   	dec    edx
c001ca7e:	75 32                	jne    c001cab2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ca80:	83 e0 0f             	and    eax,0xf
c001ca83:	83 f8 03             	cmp    eax,0x3
c001ca86:	75 2a                	jne    c001cab2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ca88:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001ca8b:	b8 02 00 00 00       	mov    eax,0x2
c001ca90:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001ca96:	74 1c                	je     c001cab4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ca98:	b8 04 00 00 00       	mov    eax,0x4
c001ca9d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001caa3:	74 0f                	je     c001cab4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001caa5:	31 c0                	xor    eax,eax
c001caa7:	83 fa 03             	cmp    edx,0x3
c001caaa:	0f 94 c0             	sete   al
c001caad:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001cab1:	c3                   	ret    
c001cab2:	31 c0                	xor    eax,eax
c001cab4:	c3                   	ret    
c001cab5:	90                   	nop

c001cab6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001cab6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001caba:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cabd:	0f ba e2 0f          	bt     edx,0xf
c001cac1:	72 f7                	jb     c001caba <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001cac3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cac6:	83 ca 10             	or     edx,0x10
c001cac9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cacc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cacf:	83 ca 01             	or     edx,0x1
c001cad2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cad5:	c3                   	ret    

c001cad6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001cad6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cada:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cadd:	83 e2 fe             	and    edx,0xfffffffe
c001cae0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cae3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cae6:	83 e2 ef             	and    edx,0xffffffef
c001cae9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001caec:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001caef:	0f ba e2 0e          	bt     edx,0xe
c001caf3:	72 f7                	jb     c001caec <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001caf5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001caf8:	0f ba e2 0f          	bt     edx,0xf
c001cafc:	72 ee                	jb     c001caec <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001cafe:	c3                   	ret    
c001caff:	90                   	nop

c001cb00 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001cb00:	55                   	push   ebp
c001cb01:	57                   	push   edi
c001cb02:	56                   	push   esi
c001cb03:	53                   	push   ebx
c001cb04:	83 ec 1c             	sub    esp,0x1c
c001cb07:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cb0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cb0f:	53                   	push   ebx
c001cb10:	56                   	push   esi
c001cb11:	e8 c0 ff ff ff       	call   c001cad6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001cb16:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001cb1a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001cb20:	83 ec 0c             	sub    esp,0xc
c001cb23:	c1 e5 0a             	shl    ebp,0xa
c001cb26:	01 e8                	add    eax,ebp
c001cb28:	89 03                	mov    DWORD PTR [ebx],eax
c001cb2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb2c:	68 00 04 00 00       	push   0x400
c001cb31:	6a 00                	push   0x0
c001cb33:	50                   	push   eax
c001cb34:	e8 b7 39 fe ff       	call   c00004f0 <memset>
c001cb39:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001cb3f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001cb43:	01 e8                	add    eax,ebp
c001cb45:	83 c4 1c             	add    esp,0x1c
c001cb48:	89 03                	mov    DWORD PTR [ebx],eax
c001cb4a:	c1 e2 08             	shl    edx,0x8
c001cb4d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb54:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001cb5a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001cb60:	01 f8                	add    eax,edi
c001cb62:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cb65:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cb68:	68 00 01 00 00       	push   0x100
c001cb6d:	6a 00                	push   0x0
c001cb6f:	50                   	push   eax
c001cb70:	e8 7b 39 fe ff       	call   c00004f0 <memset>
c001cb75:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001cb7b:	01 fa                	add    edx,edi
c001cb7d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cb81:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001cb84:	c1 e7 0d             	shl    edi,0xd
c001cb87:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cb8e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001cb94:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001cb9a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb9e:	31 ff                	xor    edi,edi
c001cba0:	83 c4 10             	add    esp,0x10
c001cba3:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001cba9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbad:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001cbb3:	83 c5 20             	add    ebp,0x20
c001cbb6:	01 f8                	add    eax,edi
c001cbb8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cbbb:	52                   	push   edx
c001cbbc:	68 00 01 00 00       	push   0x100
c001cbc1:	6a 00                	push   0x0
c001cbc3:	50                   	push   eax
c001cbc4:	e8 27 39 fe ff       	call   c00004f0 <memset>
c001cbc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cbcd:	83 c4 10             	add    esp,0x10
c001cbd0:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001cbd6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001cbdd:	01 f8                	add    eax,edi
c001cbdf:	81 c7 00 01 00 00    	add    edi,0x100
c001cbe5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cbe8:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001cbee:	75 b3                	jne    c001cba3 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001cbf0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cbf7:	50                   	push   eax
c001cbf8:	50                   	push   eax
c001cbf9:	53                   	push   ebx
c001cbfa:	56                   	push   esi
c001cbfb:	e8 b6 fe ff ff       	call   c001cab6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cc00:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cc07:	83 c4 2c             	add    esp,0x2c
c001cc0a:	5b                   	pop    ebx
c001cc0b:	5e                   	pop    esi
c001cc0c:	5f                   	pop    edi
c001cc0d:	5d                   	pop    ebp
c001cc0e:	c3                   	ret    
c001cc0f:	90                   	nop

c001cc10 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001cc10:	55                   	push   ebp
c001cc11:	57                   	push   edi
c001cc12:	56                   	push   esi
c001cc13:	53                   	push   ebx
c001cc14:	31 db                	xor    ebx,ebx
c001cc16:	83 ec 0c             	sub    esp,0xc
c001cc19:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cc1d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cc21:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cc24:	f7 c7 01 00 00 00    	test   edi,0x1
c001cc2a:	74 7a                	je     c001cca6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cc2c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cc30:	89 d8                	mov    eax,ebx
c001cc32:	c1 e0 07             	shl    eax,0x7
c001cc35:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cc3c:	55                   	push   ebp
c001cc3d:	56                   	push   esi
c001cc3e:	e8 2b fe ff ff       	call   c001ca6e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cc43:	5a                   	pop    edx
c001cc44:	83 f8 01             	cmp    eax,0x1
c001cc47:	59                   	pop    ecx
c001cc48:	75 21                	jne    c001cc6b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cc4a:	50                   	push   eax
c001cc4b:	53                   	push   ebx
c001cc4c:	55                   	push   ebp
c001cc4d:	56                   	push   esi
c001cc4e:	e8 ad fe ff ff       	call   c001cb00 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cc53:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cc5a:	e8 5b ae fe ff       	call   c0007aba <malloc>
c001cc5f:	89 c5                	mov    ebp,eax
c001cc61:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc64:	e8 99 10 00 00       	call   c001dd02 <SATA::SATA()>
c001cc69:	eb 24                	jmp    c001cc8f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cc6b:	83 f8 04             	cmp    eax,0x4
c001cc6e:	75 36                	jne    c001cca6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cc70:	51                   	push   ecx
c001cc71:	53                   	push   ebx
c001cc72:	55                   	push   ebp
c001cc73:	56                   	push   esi
c001cc74:	e8 87 fe ff ff       	call   c001cb00 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cc79:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cc80:	e8 35 ae fe ff       	call   c0007aba <malloc>
c001cc85:	89 c5                	mov    ebp,eax
c001cc87:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc8a:	e8 d5 17 00 00       	call   c001e464 <SATAPI::SATAPI()>
c001cc8f:	58                   	pop    eax
c001cc90:	5a                   	pop    edx
c001cc91:	55                   	push   ebp
c001cc92:	56                   	push   esi
c001cc93:	e8 32 fd fe ff       	call   c000c9ca <Device::addChild(Device*)>
c001cc98:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cc9b:	56                   	push   esi
c001cc9c:	6a 00                	push   0x0
c001cc9e:	53                   	push   ebx
c001cc9f:	55                   	push   ebp
c001cca0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cca3:	83 c4 20             	add    esp,0x20
c001cca6:	d1 ef                	shr    edi,1
c001cca8:	43                   	inc    ebx
c001cca9:	83 fb 20             	cmp    ebx,0x20
c001ccac:	0f 85 72 ff ff ff    	jne    c001cc24 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001ccb2:	83 c4 0c             	add    esp,0xc
c001ccb5:	5b                   	pop    ebx
c001ccb6:	5e                   	pop    esi
c001ccb7:	5f                   	pop    edi
c001ccb8:	5d                   	pop    ebp
c001ccb9:	c3                   	ret    

c001ccba <SATABus::open(int, int, void*)>:
c001ccba:	83 ec 14             	sub    esp,0x14
c001ccbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccc1:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001ccc7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cccd:	52                   	push   edx
c001ccce:	50                   	push   eax
c001cccf:	e8 3c ff ff ff       	call   c001cc10 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001ccd4:	31 c0                	xor    eax,eax
c001ccd6:	83 c4 1c             	add    esp,0x1c
c001ccd9:	c3                   	ret    

c001ccda <ATA::close(int, int, void*)>:
c001ccda:	83 ec 0c             	sub    esp,0xc
c001ccdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cce1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cce7:	85 c0                	test   eax,eax
c001cce9:	74 0c                	je     c001ccf7 <ATA::close(int, int, void*)+0x1d>
c001cceb:	83 ec 0c             	sub    esp,0xc
c001ccee:	8b 10                	mov    edx,DWORD PTR [eax]
c001ccf0:	50                   	push   eax
c001ccf1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ccf4:	83 c4 10             	add    esp,0x10
c001ccf7:	31 c0                	xor    eax,eax
c001ccf9:	83 c4 0c             	add    esp,0xc
c001ccfc:	c3                   	ret    
c001ccfd:	90                   	nop

c001ccfe <ATA::powerSaving(PowerSavingLevel)>:
c001ccfe:	c3                   	ret    
c001ccff:	90                   	nop

c001cd00 <ATA::ATA()>:
c001cd00:	83 ec 0c             	sub    esp,0xc
c001cd03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd07:	83 ec 04             	sub    esp,0x4
c001cd0a:	68 00 02 00 00       	push   0x200
c001cd0f:	68 31 35 02 c0       	push   0xc0023531
c001cd14:	50                   	push   eax
c001cd15:	e8 94 00 ff ff       	call   c000cdae <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cd1a:	83 c4 10             	add    esp,0x10
c001cd1d:	ba a4 34 02 c0       	mov    edx,0xc00234a4
c001cd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd26:	89 10                	mov    DWORD PTR [eax],edx
c001cd28:	90                   	nop
c001cd29:	83 c4 0c             	add    esp,0xc
c001cd2c:	c3                   	ret    
c001cd2d:	90                   	nop

c001cd2e <ATA::flush(bool)>:
c001cd2e:	53                   	push   ebx
c001cd2f:	83 ec 08             	sub    esp,0x8
c001cd32:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd36:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cd3b:	83 f8 01             	cmp    eax,0x1
c001cd3e:	19 c0                	sbb    eax,eax
c001cd40:	83 e0 fd             	and    eax,0xfffffffd
c001cd43:	05 ea 00 00 00       	add    eax,0xea
c001cd48:	50                   	push   eax
c001cd49:	6a 07                	push   0x7
c001cd4b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd52:	50                   	push   eax
c001cd53:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd59:	e8 16 f1 ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd5e:	83 c4 0c             	add    esp,0xc
c001cd61:	6a 00                	push   0x0
c001cd63:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd6a:	50                   	push   eax
c001cd6b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd71:	e8 e6 fb ff ff       	call   c001c95c <IDE::polling(unsigned char, unsigned int)>
c001cd76:	83 c4 18             	add    esp,0x18
c001cd79:	5b                   	pop    ebx
c001cd7a:	c3                   	ret    
c001cd7b:	90                   	nop

c001cd7c <ATA::readyForCommand()>:
c001cd7c:	56                   	push   esi
c001cd7d:	53                   	push   ebx
c001cd7e:	53                   	push   ebx
c001cd7f:	31 db                	xor    ebx,ebx
c001cd81:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cd85:	51                   	push   ecx
c001cd86:	6a 0c                	push   0xc
c001cd88:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cd8f:	50                   	push   eax
c001cd90:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cd96:	e8 99 f1 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001cd9b:	83 c4 10             	add    esp,0x10
c001cd9e:	a8 88                	test   al,0x88
c001cda0:	74 1f                	je     c001cdc1 <ATA::readyForCommand()+0x45>
c001cda2:	43                   	inc    ebx
c001cda3:	83 fb 63             	cmp    ebx,0x63
c001cda6:	7e dd                	jle    c001cd85 <ATA::readyForCommand()+0x9>
c001cda8:	83 ec 0c             	sub    esp,0xc
c001cdab:	6a 0a                	push   0xa
c001cdad:	e8 26 97 ff ff       	call   c00164d8 <milliTenthSleep(unsigned int)>
c001cdb2:	83 c4 10             	add    esp,0x10
c001cdb5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cdbb:	75 c8                	jne    c001cd85 <ATA::readyForCommand()+0x9>
c001cdbd:	31 c0                	xor    eax,eax
c001cdbf:	eb 02                	jmp    c001cdc3 <ATA::readyForCommand()+0x47>
c001cdc1:	b0 01                	mov    al,0x1
c001cdc3:	5a                   	pop    edx
c001cdc4:	5b                   	pop    ebx
c001cdc5:	5e                   	pop    esi
c001cdc6:	c3                   	ret    
c001cdc7:	90                   	nop

c001cdc8 <ATA::access(unsigned long long, int, void*, bool)>:
c001cdc8:	55                   	push   ebp
c001cdc9:	57                   	push   edi
c001cdca:	56                   	push   esi
c001cdcb:	53                   	push   ebx
c001cdcc:	83 ec 2c             	sub    esp,0x2c
c001cdcf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cdd3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cdd7:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cddf:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cde3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cde7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cdeb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cdf1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cdf5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cdfb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cdff:	c1 e0 06             	shl    eax,0x6
c001ce02:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001ce0a:	74 5d                	je     c001ce69 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001ce0c:	89 fa                	mov    edx,edi
c001ce0e:	89 f0                	mov    eax,esi
c001ce10:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001ce14:	c1 ea 1c             	shr    edx,0x1c
c001ce17:	89 d1                	mov    ecx,edx
c001ce19:	09 c1                	or     ecx,eax
c001ce1b:	74 25                	je     c001ce42 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001ce1d:	31 ed                	xor    ebp,ebp
c001ce1f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001ce26:	89 fa                	mov    edx,edi
c001ce28:	89 f0                	mov    eax,esi
c001ce2a:	0f ad d0             	shrd   eax,edx,cl
c001ce2d:	d3 ea                	shr    edx,cl
c001ce2f:	f6 c1 20             	test   cl,0x20
c001ce32:	74 02                	je     c001ce36 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001ce34:	89 d0                	mov    eax,edx
c001ce36:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001ce3a:	45                   	inc    ebp
c001ce3b:	83 fd 06             	cmp    ebp,0x6
c001ce3e:	75 df                	jne    c001ce1f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001ce40:	eb 76                	jmp    c001ceb8 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001ce42:	89 f0                	mov    eax,esi
c001ce44:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001ce49:	89 fa                	mov    edx,edi
c001ce4b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ce52:	0f ac d0 10          	shrd   eax,edx,0x10
c001ce56:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ce5b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ce5f:	c1 ee 18             	shr    esi,0x18
c001ce62:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001ce67:	eb 56                	jmp    c001cebf <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001ce69:	6a 00                	push   0x0
c001ce6b:	6a 3f                	push   0x3f
c001ce6d:	57                   	push   edi
c001ce6e:	56                   	push   esi
c001ce6f:	e8 ac 2a 00 00       	call   c001f920 <__umoddi3>
c001ce74:	83 c4 10             	add    esp,0x10
c001ce77:	40                   	inc    eax
c001ce78:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001ce7c:	6a 00                	push   0x0
c001ce7e:	68 f0 03 00 00       	push   0x3f0
c001ce83:	57                   	push   edi
c001ce84:	56                   	push   esi
c001ce85:	e8 96 29 00 00       	call   c001f820 <__udivdi3>
c001ce8a:	83 c4 10             	add    esp,0x10
c001ce8d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001ce92:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ce99:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ce9e:	6a 00                	push   0x0
c001cea0:	6a 3f                	push   0x3f
c001cea2:	57                   	push   edi
c001cea3:	56                   	push   esi
c001cea4:	e8 77 29 00 00       	call   c001f820 <__udivdi3>
c001cea9:	83 c4 10             	add    esp,0x10
c001ceac:	83 e0 0f             	and    eax,0xf
c001ceaf:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ceb4:	89 c6                	mov    esi,eax
c001ceb6:	eb 07                	jmp    c001cebf <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001ceb8:	31 f6                	xor    esi,esi
c001ceba:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001cebf:	bf 01 00 00 00       	mov    edi,0x1
c001cec4:	50                   	push   eax
c001cec5:	6a 00                	push   0x0
c001cec7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cece:	50                   	push   eax
c001cecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ced3:	e8 a4 f1 ff ff       	call   c001c07c <IDE::enableIRQs(unsigned char, bool)>
c001ced8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cedb:	e8 9c fe ff ff       	call   c001cd7c <ATA::readyForCommand()>
c001cee0:	83 c4 10             	add    esp,0x10
c001cee3:	84 c0                	test   al,al
c001cee5:	0f 84 69 02 00 00    	je     c001d154 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001ceeb:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cef1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cef7:	c1 e0 04             	shl    eax,0x4
c001cefa:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001cf01:	09 c6                	or     esi,eax
c001cf03:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001cf08:	75 05                	jne    c001cf0f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001cf0a:	83 ce a0             	or     esi,0xffffffa0
c001cf0d:	eb 03                	jmp    c001cf12 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001cf0f:	83 ce e0             	or     esi,0xffffffe0
c001cf12:	89 f0                	mov    eax,esi
c001cf14:	0f b6 f0             	movzx  esi,al
c001cf17:	56                   	push   esi
c001cf18:	6a 06                	push   0x6
c001cf1a:	51                   	push   ecx
c001cf1b:	52                   	push   edx
c001cf1c:	e8 53 ef ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf21:	83 c4 10             	add    esp,0x10
c001cf24:	6a 00                	push   0x0
c001cf26:	6a 01                	push   0x1
c001cf28:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf2f:	50                   	push   eax
c001cf30:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf36:	e8 39 ef ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf3b:	83 c4 10             	add    esp,0x10
c001cf3e:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001cf43:	83 f8 02             	cmp    eax,0x2
c001cf46:	75 6e                	jne    c001cfb6 <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001cf48:	6a 00                	push   0x0
c001cf4a:	6a 08                	push   0x8
c001cf4c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf53:	50                   	push   eax
c001cf54:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf5a:	e8 15 ef ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf5f:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cf64:	50                   	push   eax
c001cf65:	6a 09                	push   0x9
c001cf67:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf6e:	50                   	push   eax
c001cf6f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf75:	e8 fa ee ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf7a:	83 c4 20             	add    esp,0x20
c001cf7d:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001cf82:	50                   	push   eax
c001cf83:	6a 0a                	push   0xa
c001cf85:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf8c:	50                   	push   eax
c001cf8d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf93:	e8 dc ee ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf98:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cf9d:	50                   	push   eax
c001cf9e:	6a 0b                	push   0xb
c001cfa0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfa7:	50                   	push   eax
c001cfa8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfae:	e8 c1 ee ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfb3:	83 c4 20             	add    esp,0x20
c001cfb6:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cfbb:	50                   	push   eax
c001cfbc:	6a 02                	push   0x2
c001cfbe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfc5:	50                   	push   eax
c001cfc6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfcc:	e8 a3 ee ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfd1:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cfd6:	50                   	push   eax
c001cfd7:	6a 03                	push   0x3
c001cfd9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfe0:	50                   	push   eax
c001cfe1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfe7:	e8 88 ee ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfec:	83 c4 20             	add    esp,0x20
c001cfef:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cff4:	50                   	push   eax
c001cff5:	6a 04                	push   0x4
c001cff7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cffe:	50                   	push   eax
c001cfff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d005:	e8 6a ee ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d00a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d00f:	50                   	push   eax
c001d010:	6a 05                	push   0x5
c001d012:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d019:	50                   	push   eax
c001d01a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d020:	e8 4f ee ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d025:	83 c4 20             	add    esp,0x20
c001d028:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d02d:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001d032:	74 11                	je     c001d045 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001d034:	b8 30 00 00 00       	mov    eax,0x30
c001d039:	83 fa 02             	cmp    edx,0x2
c001d03c:	75 16                	jne    c001d054 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001d03e:	b8 34 00 00 00       	mov    eax,0x34
c001d043:	eb 0f                	jmp    c001d054 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001d045:	b8 20 00 00 00       	mov    eax,0x20
c001d04a:	83 fa 02             	cmp    edx,0x2
c001d04d:	75 05                	jne    c001d054 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001d04f:	b8 24 00 00 00       	mov    eax,0x24
c001d054:	50                   	push   eax
c001d055:	6a 07                	push   0x7
c001d057:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d05e:	50                   	push   eax
c001d05f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d065:	e8 0a ee ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d06a:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d06e:	83 c4 10             	add    esp,0x10
c001d071:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001d076:	85 f6                	test   esi,esi
c001d078:	0f 84 b3 00 00 00    	je     c001d131 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001d07e:	50                   	push   eax
c001d07f:	6a 01                	push   0x1
c001d081:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d088:	50                   	push   eax
c001d089:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d08f:	e8 c8 f8 ff ff       	call   c001c95c <IDE::polling(unsigned char, unsigned int)>
c001d094:	83 c4 10             	add    esp,0x10
c001d097:	0f b6 f8             	movzx  edi,al
c001d09a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d0a0:	85 ff                	test   edi,edi
c001d0a2:	74 1d                	je     c001d0c1 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001d0a4:	57                   	push   edi
c001d0a5:	0f b6 d2             	movzx  edx,dl
c001d0a8:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d0af:	50                   	push   eax
c001d0b0:	52                   	push   edx
c001d0b1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0b7:	e8 e6 f7 ff ff       	call   c001c8a2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d0bc:	e9 90 00 00 00       	jmp    c001d151 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001d0c1:	85 ed                	test   ebp,ebp
c001d0c3:	74 3b                	je     c001d100 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001d0c5:	31 c9                	xor    ecx,ecx
c001d0c7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d0cb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d0cf:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001d0d3:	50                   	push   eax
c001d0d4:	50                   	push   eax
c001d0d5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0dc:	50                   	push   eax
c001d0dd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0e3:	e8 7a ed ff ff       	call   c001be62 <IDE::getBase(unsigned char)>
c001d0e8:	89 c2                	mov    edx,eax
c001d0ea:	89 f8                	mov    eax,edi
c001d0ec:	66 ef                	out    dx,ax
c001d0ee:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d0f2:	83 c4 10             	add    esp,0x10
c001d0f5:	41                   	inc    ecx
c001d0f6:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d0fc:	75 c9                	jne    c001d0c7 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001d0fe:	eb 23                	jmp    c001d123 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001d100:	0f b6 d2             	movzx  edx,dl
c001d103:	51                   	push   ecx
c001d104:	51                   	push   ecx
c001d105:	52                   	push   edx
c001d106:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d10c:	e8 51 ed ff ff       	call   c001be62 <IDE::getBase(unsigned char)>
c001d111:	b9 00 01 00 00       	mov    ecx,0x100
c001d116:	89 c2                	mov    edx,eax
c001d118:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d11c:	fc                   	cld    
c001d11d:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d120:	83 c4 10             	add    esp,0x10
c001d123:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d12b:	4e                   	dec    esi
c001d12c:	e9 45 ff ff ff       	jmp    c001d076 <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001d131:	31 ff                	xor    edi,edi
c001d133:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d138:	74 1a                	je     c001d154 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001d13a:	50                   	push   eax
c001d13b:	50                   	push   eax
c001d13c:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001d141:	83 f8 02             	cmp    eax,0x2
c001d144:	0f 94 c0             	sete   al
c001d147:	0f b6 c0             	movzx  eax,al
c001d14a:	50                   	push   eax
c001d14b:	53                   	push   ebx
c001d14c:	e8 dd fb ff ff       	call   c001cd2e <ATA::flush(bool)>
c001d151:	83 c4 10             	add    esp,0x10
c001d154:	83 c4 2c             	add    esp,0x2c
c001d157:	89 f8                	mov    eax,edi
c001d159:	5b                   	pop    ebx
c001d15a:	5e                   	pop    esi
c001d15b:	5f                   	pop    edi
c001d15c:	5d                   	pop    ebp
c001d15d:	c3                   	ret    

c001d15e <ATA::detectCHS()>:
c001d15e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d162:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d168:	c1 e0 06             	shl    eax,0x6
c001d16b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d171:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d17b:	c7 44 24 04 88 34 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023488
c001d183:	e9 3b 45 ff ff       	jmp    c00116c3 <KePanic(char const*)>

c001d188 <ATA::open(int, int, void*)>:
c001d188:	53                   	push   ebx
c001d189:	83 ec 08             	sub    esp,0x8
c001d18c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d190:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d194:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d198:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d19e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d1a4:	c1 e0 06             	shl    eax,0x6
c001d1a7:	01 d0                	add    eax,edx
c001d1a9:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d1b0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d1b6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d1bd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d1c7:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d1cd:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d1d4:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d1db:	75 0c                	jne    c001d1e9 <ATA::open(int, int, void*)+0x61>
c001d1dd:	83 ec 0c             	sub    esp,0xc
c001d1e0:	53                   	push   ebx
c001d1e1:	e8 78 ff ff ff       	call   c001d15e <ATA::detectCHS()>
c001d1e6:	83 c4 10             	add    esp,0x10
c001d1e9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d1ef:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d1f5:	c1 e0 06             	shl    eax,0x6
c001d1f8:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d1ff:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d209:	d1 e8                	shr    eax,1
c001d20b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d211:	6a 04                	push   0x4
c001d213:	6a 0c                	push   0xc
c001d215:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d21c:	50                   	push   eax
c001d21d:	52                   	push   edx
c001d21e:	e8 51 ec ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d223:	90                   	nop
c001d224:	90                   	nop
c001d225:	6a 00                	push   0x0
c001d227:	6a 0c                	push   0xc
c001d229:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d230:	50                   	push   eax
c001d231:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d237:	e8 38 ec ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d23c:	83 c4 14             	add    esp,0x14
c001d23f:	53                   	push   ebx
c001d240:	e8 d1 fb fe ff       	call   c000ce16 <PhysicalDisk::startCache()>
c001d245:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d248:	e8 0d 0e ff ff       	call   c000e05a <createPartitionsForDisk(PhysicalDisk*)>
c001d24d:	31 c0                	xor    eax,eax
c001d24f:	83 c4 18             	add    esp,0x18
c001d252:	5b                   	pop    ebx
c001d253:	c3                   	ret    

c001d254 <combineCharAndColour(char, unsigned char)>:
c001d254:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d259:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d25f:	c1 e0 08             	shl    eax,0x8
c001d262:	09 d0                	or     eax,edx
c001d264:	c3                   	ret    

c001d265 <combineColours(unsigned char, unsigned char)>:
c001d265:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d26a:	c1 e0 04             	shl    eax,0x4
c001d26d:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d271:	c3                   	ret    

c001d272 <ATA::read(unsigned long long, int, void*)>:
c001d272:	55                   	push   ebp
c001d273:	57                   	push   edi
c001d274:	56                   	push   esi
c001d275:	be 04 00 00 00       	mov    esi,0x4
c001d27a:	53                   	push   ebx
c001d27b:	83 ec 0c             	sub    esp,0xc
c001d27e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d282:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d286:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d289:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d28d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d291:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d297:	0f 87 a1 01 00 00    	ja     c001d43e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d29d:	be 06 00 00 00       	mov    esi,0x6
c001d2a2:	85 c9                	test   ecx,ecx
c001d2a4:	0f 84 94 01 00 00    	je     c001d43e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d2aa:	55                   	push   ebp
c001d2ab:	55                   	push   ebp
c001d2ac:	6a 00                	push   0x0
c001d2ae:	51                   	push   ecx
c001d2af:	53                   	push   ebx
c001d2b0:	52                   	push   edx
c001d2b1:	50                   	push   eax
c001d2b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d2b6:	e8 0d fb ff ff       	call   c001cdc8 <ATA::access(unsigned long long, int, void*, bool)>
c001d2bb:	83 c4 20             	add    esp,0x20
c001d2be:	89 c6                	mov    esi,eax
c001d2c0:	85 c0                	test   eax,eax
c001d2c2:	0f 85 71 01 00 00    	jne    c001d439 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d2c8:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d2ce:	89 da                	mov    edx,ebx
c001d2d0:	50                   	push   eax
c001d2d1:	bd 10 27 00 00       	mov    ebp,0x2710
c001d2d6:	50                   	push   eax
c001d2d7:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d2dd:	6a 0f                	push   0xf
c001d2df:	6a 00                	push   0x0
c001d2e1:	e8 7f ff ff ff       	call   c001d265 <combineColours(unsigned char, unsigned char)>
c001d2e6:	59                   	pop    ecx
c001d2e7:	b9 0a 00 00 00       	mov    ecx,0xa
c001d2ec:	5b                   	pop    ebx
c001d2ed:	0f b6 d8             	movzx  ebx,al
c001d2f0:	89 d0                	mov    eax,edx
c001d2f2:	53                   	push   ebx
c001d2f3:	99                   	cdq    
c001d2f4:	f7 fd                	idiv   ebp
c001d2f6:	99                   	cdq    
c001d2f7:	f7 f9                	idiv   ecx
c001d2f9:	83 c2 30             	add    edx,0x30
c001d2fc:	0f b6 d2             	movzx  edx,dl
c001d2ff:	52                   	push   edx
c001d300:	e8 4f ff ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001d305:	5f                   	pop    edi
c001d306:	bf e8 03 00 00       	mov    edi,0x3e8
c001d30b:	5a                   	pop    edx
c001d30c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d312:	53                   	push   ebx
c001d313:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d318:	99                   	cdq    
c001d319:	f7 ff                	idiv   edi
c001d31b:	99                   	cdq    
c001d31c:	f7 f9                	idiv   ecx
c001d31e:	8d 42 30             	lea    eax,[edx+0x30]
c001d321:	0f b6 c0             	movzx  eax,al
c001d324:	50                   	push   eax
c001d325:	e8 2a ff ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001d32a:	5f                   	pop    edi
c001d32b:	bf 64 00 00 00       	mov    edi,0x64
c001d330:	5a                   	pop    edx
c001d331:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d337:	53                   	push   ebx
c001d338:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d33d:	99                   	cdq    
c001d33e:	f7 ff                	idiv   edi
c001d340:	99                   	cdq    
c001d341:	f7 f9                	idiv   ecx
c001d343:	8d 42 30             	lea    eax,[edx+0x30]
c001d346:	0f b6 c0             	movzx  eax,al
c001d349:	50                   	push   eax
c001d34a:	e8 05 ff ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001d34f:	5a                   	pop    edx
c001d350:	5a                   	pop    edx
c001d351:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d357:	53                   	push   ebx
c001d358:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d35d:	99                   	cdq    
c001d35e:	f7 f9                	idiv   ecx
c001d360:	99                   	cdq    
c001d361:	f7 f9                	idiv   ecx
c001d363:	8d 42 30             	lea    eax,[edx+0x30]
c001d366:	0f b6 c0             	movzx  eax,al
c001d369:	50                   	push   eax
c001d36a:	e8 e5 fe ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001d36f:	5a                   	pop    edx
c001d370:	5a                   	pop    edx
c001d371:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d377:	53                   	push   ebx
c001d378:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d37d:	99                   	cdq    
c001d37e:	f7 f9                	idiv   ecx
c001d380:	83 c2 30             	add    edx,0x30
c001d383:	0f b6 d2             	movzx  edx,dl
c001d386:	52                   	push   edx
c001d387:	e8 c8 fe ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001d38c:	5a                   	pop    edx
c001d38d:	5a                   	pop    edx
c001d38e:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d394:	53                   	push   ebx
c001d395:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d39a:	99                   	cdq    
c001d39b:	f7 fd                	idiv   ebp
c001d39d:	99                   	cdq    
c001d39e:	f7 f9                	idiv   ecx
c001d3a0:	8d 42 30             	lea    eax,[edx+0x30]
c001d3a3:	0f b6 c0             	movzx  eax,al
c001d3a6:	50                   	push   eax
c001d3a7:	e8 a8 fe ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001d3ac:	5d                   	pop    ebp
c001d3ad:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d3b2:	5a                   	pop    edx
c001d3b3:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d3b9:	53                   	push   ebx
c001d3ba:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3bf:	99                   	cdq    
c001d3c0:	f7 fd                	idiv   ebp
c001d3c2:	99                   	cdq    
c001d3c3:	f7 f9                	idiv   ecx
c001d3c5:	8d 42 30             	lea    eax,[edx+0x30]
c001d3c8:	0f b6 c0             	movzx  eax,al
c001d3cb:	50                   	push   eax
c001d3cc:	e8 83 fe ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001d3d1:	5d                   	pop    ebp
c001d3d2:	5a                   	pop    edx
c001d3d3:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d3d9:	53                   	push   ebx
c001d3da:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3df:	99                   	cdq    
c001d3e0:	f7 ff                	idiv   edi
c001d3e2:	99                   	cdq    
c001d3e3:	f7 f9                	idiv   ecx
c001d3e5:	8d 42 30             	lea    eax,[edx+0x30]
c001d3e8:	0f b6 c0             	movzx  eax,al
c001d3eb:	50                   	push   eax
c001d3ec:	e8 63 fe ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001d3f1:	5f                   	pop    edi
c001d3f2:	5d                   	pop    ebp
c001d3f3:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d3f9:	53                   	push   ebx
c001d3fa:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3ff:	99                   	cdq    
c001d400:	f7 f9                	idiv   ecx
c001d402:	99                   	cdq    
c001d403:	f7 f9                	idiv   ecx
c001d405:	8d 42 30             	lea    eax,[edx+0x30]
c001d408:	0f b6 c0             	movzx  eax,al
c001d40b:	50                   	push   eax
c001d40c:	e8 43 fe ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001d411:	5a                   	pop    edx
c001d412:	5f                   	pop    edi
c001d413:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d419:	53                   	push   ebx
c001d41a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d41f:	99                   	cdq    
c001d420:	f7 f9                	idiv   ecx
c001d422:	83 c2 30             	add    edx,0x30
c001d425:	0f b6 d2             	movzx  edx,dl
c001d428:	52                   	push   edx
c001d429:	e8 26 fe ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001d42e:	83 c4 10             	add    esp,0x10
c001d431:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d437:	eb 05                	jmp    c001d43e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d439:	be 01 00 00 00       	mov    esi,0x1
c001d43e:	83 c4 0c             	add    esp,0xc
c001d441:	89 f0                	mov    eax,esi
c001d443:	5b                   	pop    ebx
c001d444:	5e                   	pop    esi
c001d445:	5f                   	pop    edi
c001d446:	5d                   	pop    ebp
c001d447:	c3                   	ret    

c001d448 <ATA::write(unsigned long long, int, void*)>:
c001d448:	55                   	push   ebp
c001d449:	57                   	push   edi
c001d44a:	56                   	push   esi
c001d44b:	be 04 00 00 00       	mov    esi,0x4
c001d450:	53                   	push   ebx
c001d451:	83 ec 0c             	sub    esp,0xc
c001d454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d458:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d45c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d45f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d463:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d467:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d46d:	0f 87 9c 01 00 00    	ja     c001d60f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d473:	be 06 00 00 00       	mov    esi,0x6
c001d478:	85 c9                	test   ecx,ecx
c001d47a:	0f 84 8f 01 00 00    	je     c001d60f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d480:	55                   	push   ebp
c001d481:	55                   	push   ebp
c001d482:	6a 01                	push   0x1
c001d484:	51                   	push   ecx
c001d485:	53                   	push   ebx
c001d486:	52                   	push   edx
c001d487:	50                   	push   eax
c001d488:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d48c:	e8 37 f9 ff ff       	call   c001cdc8 <ATA::access(unsigned long long, int, void*, bool)>
c001d491:	83 c4 20             	add    esp,0x20
c001d494:	89 c6                	mov    esi,eax
c001d496:	85 c0                	test   eax,eax
c001d498:	0f 85 6c 01 00 00    	jne    c001d60a <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d49e:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d4a4:	bd 10 27 00 00       	mov    ebp,0x2710
c001d4a9:	50                   	push   eax
c001d4aa:	50                   	push   eax
c001d4ab:	6a 0f                	push   0xf
c001d4ad:	6a 00                	push   0x0
c001d4af:	e8 b1 fd ff ff       	call   c001d265 <combineColours(unsigned char, unsigned char)>
c001d4b4:	5a                   	pop    edx
c001d4b5:	0f b6 d8             	movzx  ebx,al
c001d4b8:	59                   	pop    ecx
c001d4b9:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4be:	53                   	push   ebx
c001d4bf:	b9 0a 00 00 00       	mov    ecx,0xa
c001d4c4:	99                   	cdq    
c001d4c5:	f7 fd                	idiv   ebp
c001d4c7:	99                   	cdq    
c001d4c8:	f7 f9                	idiv   ecx
c001d4ca:	8d 42 30             	lea    eax,[edx+0x30]
c001d4cd:	0f b6 c0             	movzx  eax,al
c001d4d0:	50                   	push   eax
c001d4d1:	e8 7e fd ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001d4d6:	5f                   	pop    edi
c001d4d7:	bf e8 03 00 00       	mov    edi,0x3e8
c001d4dc:	5a                   	pop    edx
c001d4dd:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d4e3:	53                   	push   ebx
c001d4e4:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4e9:	99                   	cdq    
c001d4ea:	f7 ff                	idiv   edi
c001d4ec:	99                   	cdq    
c001d4ed:	f7 f9                	idiv   ecx
c001d4ef:	8d 42 30             	lea    eax,[edx+0x30]
c001d4f2:	0f b6 c0             	movzx  eax,al
c001d4f5:	50                   	push   eax
c001d4f6:	e8 59 fd ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001d4fb:	5f                   	pop    edi
c001d4fc:	bf 64 00 00 00       	mov    edi,0x64
c001d501:	5a                   	pop    edx
c001d502:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d508:	53                   	push   ebx
c001d509:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d50e:	99                   	cdq    
c001d50f:	f7 ff                	idiv   edi
c001d511:	99                   	cdq    
c001d512:	f7 f9                	idiv   ecx
c001d514:	8d 42 30             	lea    eax,[edx+0x30]
c001d517:	0f b6 c0             	movzx  eax,al
c001d51a:	50                   	push   eax
c001d51b:	e8 34 fd ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001d520:	5a                   	pop    edx
c001d521:	5a                   	pop    edx
c001d522:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d528:	53                   	push   ebx
c001d529:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d52e:	99                   	cdq    
c001d52f:	f7 f9                	idiv   ecx
c001d531:	99                   	cdq    
c001d532:	f7 f9                	idiv   ecx
c001d534:	8d 42 30             	lea    eax,[edx+0x30]
c001d537:	0f b6 c0             	movzx  eax,al
c001d53a:	50                   	push   eax
c001d53b:	e8 14 fd ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001d540:	5a                   	pop    edx
c001d541:	5a                   	pop    edx
c001d542:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d548:	53                   	push   ebx
c001d549:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d54e:	99                   	cdq    
c001d54f:	f7 f9                	idiv   ecx
c001d551:	8d 42 30             	lea    eax,[edx+0x30]
c001d554:	0f b6 c0             	movzx  eax,al
c001d557:	50                   	push   eax
c001d558:	e8 f7 fc ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001d55d:	5a                   	pop    edx
c001d55e:	5a                   	pop    edx
c001d55f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d565:	53                   	push   ebx
c001d566:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d56b:	99                   	cdq    
c001d56c:	f7 fd                	idiv   ebp
c001d56e:	99                   	cdq    
c001d56f:	f7 f9                	idiv   ecx
c001d571:	8d 42 30             	lea    eax,[edx+0x30]
c001d574:	0f b6 c0             	movzx  eax,al
c001d577:	50                   	push   eax
c001d578:	e8 d7 fc ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001d57d:	5d                   	pop    ebp
c001d57e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d583:	5a                   	pop    edx
c001d584:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d58a:	53                   	push   ebx
c001d58b:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d590:	99                   	cdq    
c001d591:	f7 fd                	idiv   ebp
c001d593:	99                   	cdq    
c001d594:	f7 f9                	idiv   ecx
c001d596:	8d 42 30             	lea    eax,[edx+0x30]
c001d599:	0f b6 c0             	movzx  eax,al
c001d59c:	50                   	push   eax
c001d59d:	e8 b2 fc ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001d5a2:	5d                   	pop    ebp
c001d5a3:	5a                   	pop    edx
c001d5a4:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d5aa:	53                   	push   ebx
c001d5ab:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d5b0:	99                   	cdq    
c001d5b1:	f7 ff                	idiv   edi
c001d5b3:	99                   	cdq    
c001d5b4:	f7 f9                	idiv   ecx
c001d5b6:	8d 42 30             	lea    eax,[edx+0x30]
c001d5b9:	0f b6 c0             	movzx  eax,al
c001d5bc:	50                   	push   eax
c001d5bd:	e8 92 fc ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001d5c2:	5f                   	pop    edi
c001d5c3:	5d                   	pop    ebp
c001d5c4:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d5ca:	53                   	push   ebx
c001d5cb:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d5d0:	99                   	cdq    
c001d5d1:	f7 f9                	idiv   ecx
c001d5d3:	99                   	cdq    
c001d5d4:	f7 f9                	idiv   ecx
c001d5d6:	8d 42 30             	lea    eax,[edx+0x30]
c001d5d9:	0f b6 c0             	movzx  eax,al
c001d5dc:	50                   	push   eax
c001d5dd:	e8 72 fc ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001d5e2:	5a                   	pop    edx
c001d5e3:	5f                   	pop    edi
c001d5e4:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d5ea:	53                   	push   ebx
c001d5eb:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d5f0:	99                   	cdq    
c001d5f1:	f7 f9                	idiv   ecx
c001d5f3:	83 c2 30             	add    edx,0x30
c001d5f6:	0f b6 d2             	movzx  edx,dl
c001d5f9:	52                   	push   edx
c001d5fa:	e8 55 fc ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001d5ff:	83 c4 10             	add    esp,0x10
c001d602:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d608:	eb 05                	jmp    c001d60f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d60a:	be 01 00 00 00       	mov    esi,0x1
c001d60f:	83 c4 0c             	add    esp,0xc
c001d612:	89 f0                	mov    eax,esi
c001d614:	5b                   	pop    ebx
c001d615:	5e                   	pop    esi
c001d616:	5f                   	pop    edi
c001d617:	5d                   	pop    ebp
c001d618:	c3                   	ret    
c001d619:	90                   	nop

c001d61a <ATAPI::write(unsigned long long, int, void*)>:
c001d61a:	b8 03 00 00 00       	mov    eax,0x3
c001d61f:	c3                   	ret    

c001d620 <ATAPI::close(int, int, void*)>:
c001d620:	83 ec 0c             	sub    esp,0xc
c001d623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d627:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d62d:	85 c0                	test   eax,eax
c001d62f:	74 0c                	je     c001d63d <ATAPI::close(int, int, void*)+0x1d>
c001d631:	83 ec 0c             	sub    esp,0xc
c001d634:	8b 10                	mov    edx,DWORD PTR [eax]
c001d636:	50                   	push   eax
c001d637:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d63a:	83 c4 10             	add    esp,0x10
c001d63d:	31 c0                	xor    eax,eax
c001d63f:	83 c4 0c             	add    esp,0xc
c001d642:	c3                   	ret    
c001d643:	90                   	nop

c001d644 <ATAPI::ATAPI()>:
c001d644:	83 ec 0c             	sub    esp,0xc
c001d647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d64b:	83 ec 04             	sub    esp,0x4
c001d64e:	68 00 08 00 00       	push   0x800
c001d653:	68 d1 35 02 c0       	push   0xc00235d1
c001d658:	50                   	push   eax
c001d659:	e8 50 f7 fe ff       	call   c000cdae <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d65e:	83 c4 10             	add    esp,0x10
c001d661:	ba ec 34 02 c0       	mov    edx,0xc00234ec
c001d666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d66a:	89 10                	mov    DWORD PTR [eax],edx
c001d66c:	90                   	nop
c001d66d:	83 c4 0c             	add    esp,0xc
c001d670:	c3                   	ret    
c001d671:	90                   	nop

c001d672 <ATAPI::readyForCommand()>:
c001d672:	56                   	push   esi
c001d673:	53                   	push   ebx
c001d674:	53                   	push   ebx
c001d675:	31 db                	xor    ebx,ebx
c001d677:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d67b:	51                   	push   ecx
c001d67c:	6a 0c                	push   0xc
c001d67e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d685:	50                   	push   eax
c001d686:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d68c:	e8 a3 e8 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001d691:	83 c4 10             	add    esp,0x10
c001d694:	a8 88                	test   al,0x88
c001d696:	74 25                	je     c001d6bd <ATAPI::readyForCommand()+0x4b>
c001d698:	43                   	inc    ebx
c001d699:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d69f:	7e da                	jle    c001d67b <ATAPI::readyForCommand()+0x9>
c001d6a1:	83 ec 0c             	sub    esp,0xc
c001d6a4:	68 5e 01 00 00       	push   0x15e
c001d6a9:	e8 2a 8e ff ff       	call   c00164d8 <milliTenthSleep(unsigned int)>
c001d6ae:	83 c4 10             	add    esp,0x10
c001d6b1:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d6b7:	75 c2                	jne    c001d67b <ATAPI::readyForCommand()+0x9>
c001d6b9:	31 c0                	xor    eax,eax
c001d6bb:	eb 02                	jmp    c001d6bf <ATAPI::readyForCommand()+0x4d>
c001d6bd:	b0 01                	mov    al,0x1
c001d6bf:	5a                   	pop    edx
c001d6c0:	5b                   	pop    ebx
c001d6c1:	5e                   	pop    esi
c001d6c2:	c3                   	ret    
c001d6c3:	90                   	nop

c001d6c4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d6c4:	55                   	push   ebp
c001d6c5:	57                   	push   edi
c001d6c6:	56                   	push   esi
c001d6c7:	53                   	push   ebx
c001d6c8:	83 ec 20             	sub    esp,0x20
c001d6cb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d6cf:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d6d3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d6d7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d6db:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d6df:	6a 01                	push   0x1
c001d6e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6e8:	50                   	push   eax
c001d6e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6ef:	e8 88 e9 ff ff       	call   c001c07c <IDE::enableIRQs(unsigned char, bool)>
c001d6f4:	5e                   	pop    esi
c001d6f5:	58                   	pop    eax
c001d6f6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6fd:	50                   	push   eax
c001d6fe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d704:	e8 45 e7 ff ff       	call   c001be4e <IDE::prepareInterrupt(unsigned char)>
c001d709:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d70c:	e8 61 ff ff ff       	call   c001d672 <ATAPI::readyForCommand()>
c001d711:	83 c4 10             	add    esp,0x10
c001d714:	84 c0                	test   al,al
c001d716:	75 0a                	jne    c001d722 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d718:	bb 01 00 00 00       	mov    ebx,0x1
c001d71d:	e9 60 02 00 00       	jmp    c001d982 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d722:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d728:	c1 e0 04             	shl    eax,0x4
c001d72b:	0f b6 c0             	movzx  eax,al
c001d72e:	50                   	push   eax
c001d72f:	6a 06                	push   0x6
c001d731:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d738:	50                   	push   eax
c001d739:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d73f:	e8 30 e7 ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d744:	6a 00                	push   0x0
c001d746:	6a 01                	push   0x1
c001d748:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d74f:	50                   	push   eax
c001d750:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d756:	e8 19 e7 ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d75b:	83 c4 20             	add    esp,0x20
c001d75e:	0f b6 c3             	movzx  eax,bl
c001d761:	0f b6 df             	movzx  ebx,bh
c001d764:	50                   	push   eax
c001d765:	6a 04                	push   0x4
c001d767:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d76e:	50                   	push   eax
c001d76f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d775:	e8 fa e6 ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d77a:	53                   	push   ebx
c001d77b:	6a 05                	push   0x5
c001d77d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d784:	50                   	push   eax
c001d785:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d78b:	e8 e4 e6 ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d790:	83 c4 20             	add    esp,0x20
c001d793:	68 a0 00 00 00       	push   0xa0
c001d798:	6a 07                	push   0x7
c001d79a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7a1:	50                   	push   eax
c001d7a2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7a8:	e8 c7 e6 ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7ad:	83 c4 0c             	add    esp,0xc
c001d7b0:	6a 01                	push   0x1
c001d7b2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7b9:	50                   	push   eax
c001d7ba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7c0:	e8 97 f1 ff ff       	call   c001c95c <IDE::polling(unsigned char, unsigned int)>
c001d7c5:	83 c4 10             	add    esp,0x10
c001d7c8:	0f b6 d8             	movzx  ebx,al
c001d7cb:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d7d1:	85 db                	test   ebx,ebx
c001d7d3:	74 20                	je     c001d7f5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d7d5:	53                   	push   ebx
c001d7d6:	0f b6 c0             	movzx  eax,al
c001d7d9:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d7e0:	52                   	push   edx
c001d7e1:	50                   	push   eax
c001d7e2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7e8:	e8 b5 f0 ff ff       	call   c001c8a2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d7ed:	83 c4 10             	add    esp,0x10
c001d7f0:	e9 8d 01 00 00       	jmp    c001d982 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d7f5:	0f b6 c0             	movzx  eax,al
c001d7f8:	53                   	push   ebx
c001d7f9:	53                   	push   ebx
c001d7fa:	50                   	push   eax
c001d7fb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d801:	e8 5c e6 ff ff       	call   c001be62 <IDE::getBase(unsigned char)>
c001d806:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d80a:	b9 06 00 00 00       	mov    ecx,0x6
c001d80f:	89 c2                	mov    edx,eax
c001d811:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d814:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d818:	83 c4 10             	add    esp,0x10
c001d81b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d820:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d824:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d82a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d831:	85 db                	test   ebx,ebx
c001d833:	0f 84 ec 00 00 00    	je     c001d925 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d839:	51                   	push   ecx
c001d83a:	51                   	push   ecx
c001d83b:	52                   	push   edx
c001d83c:	50                   	push   eax
c001d83d:	e8 a0 e7 ff ff       	call   c001bfe2 <IDE::waitInterrupt(unsigned char)>
c001d842:	83 c4 10             	add    esp,0x10
c001d845:	84 c0                	test   al,al
c001d847:	0f 84 cb fe ff ff    	je     c001d718 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d84d:	56                   	push   esi
c001d84e:	56                   	push   esi
c001d84f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d856:	50                   	push   eax
c001d857:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d85d:	e8 ec e5 ff ff       	call   c001be4e <IDE::prepareInterrupt(unsigned char)>
c001d862:	83 c4 0c             	add    esp,0xc
c001d865:	6a 04                	push   0x4
c001d867:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d86e:	50                   	push   eax
c001d86f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d875:	e8 ba e6 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001d87a:	83 c4 0c             	add    esp,0xc
c001d87d:	89 c6                	mov    esi,eax
c001d87f:	6a 05                	push   0x5
c001d881:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d888:	50                   	push   eax
c001d889:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d88f:	e8 a0 e6 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001d894:	89 f1                	mov    ecx,esi
c001d896:	0f b6 c0             	movzx  eax,al
c001d899:	0f b6 f1             	movzx  esi,cl
c001d89c:	c1 e0 08             	shl    eax,0x8
c001d89f:	09 c6                	or     esi,eax
c001d8a1:	d1 fe                	sar    esi,1
c001d8a3:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d8a7:	83 c4 10             	add    esp,0x10
c001d8aa:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d8af:	74 41                	je     c001d8f2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d8b1:	31 c9                	xor    ecx,ecx
c001d8b3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d8b9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d8c0:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d8c4:	75 0a                	jne    c001d8d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d8c6:	01 c9                	add    ecx,ecx
c001d8c8:	01 cd                	add    ebp,ecx
c001d8ca:	4b                   	dec    ebx
c001d8cb:	e9 54 ff ff ff       	jmp    c001d824 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d8d0:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d8d5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d8d9:	51                   	push   ecx
c001d8da:	51                   	push   ecx
c001d8db:	52                   	push   edx
c001d8dc:	50                   	push   eax
c001d8dd:	e8 80 e5 ff ff       	call   c001be62 <IDE::getBase(unsigned char)>
c001d8e2:	89 c2                	mov    edx,eax
c001d8e4:	89 f0                	mov    eax,esi
c001d8e6:	66 ef                	out    dx,ax
c001d8e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d8ec:	83 c4 10             	add    esp,0x10
c001d8ef:	41                   	inc    ecx
c001d8f0:	eb c1                	jmp    c001d8b3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d8f2:	31 f6                	xor    esi,esi
c001d8f4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d8fa:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d901:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d905:	75 06                	jne    c001d90d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d907:	01 f6                	add    esi,esi
c001d909:	01 f5                	add    ebp,esi
c001d90b:	eb bd                	jmp    c001d8ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d90d:	51                   	push   ecx
c001d90e:	51                   	push   ecx
c001d90f:	52                   	push   edx
c001d910:	50                   	push   eax
c001d911:	e8 4c e5 ff ff       	call   c001be62 <IDE::getBase(unsigned char)>
c001d916:	89 c2                	mov    edx,eax
c001d918:	66 ed                	in     ax,dx
c001d91a:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d91f:	83 c4 10             	add    esp,0x10
c001d922:	46                   	inc    esi
c001d923:	eb cf                	jmp    c001d8f4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d925:	51                   	push   ecx
c001d926:	51                   	push   ecx
c001d927:	52                   	push   edx
c001d928:	50                   	push   eax
c001d929:	e8 b4 e6 ff ff       	call   c001bfe2 <IDE::waitInterrupt(unsigned char)>
c001d92e:	83 c4 10             	add    esp,0x10
c001d931:	84 c0                	test   al,al
c001d933:	0f 84 df fd ff ff    	je     c001d718 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d939:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d93e:	52                   	push   edx
c001d93f:	52                   	push   edx
c001d940:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d947:	50                   	push   eax
c001d948:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d94e:	e8 fb e4 ff ff       	call   c001be4e <IDE::prepareInterrupt(unsigned char)>
c001d953:	83 c4 10             	add    esp,0x10
c001d956:	50                   	push   eax
c001d957:	50                   	push   eax
c001d958:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d95f:	50                   	push   eax
c001d960:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d966:	e8 f7 e4 ff ff       	call   c001be62 <IDE::getBase(unsigned char)>
c001d96b:	8d 50 07             	lea    edx,[eax+0x7]
c001d96e:	ec                   	in     al,dx
c001d96f:	83 c4 10             	add    esp,0x10
c001d972:	a8 88                	test   al,0x88
c001d974:	74 0a                	je     c001d980 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d976:	4b                   	dec    ebx
c001d977:	75 dd                	jne    c001d956 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d979:	bb 02 00 00 00       	mov    ebx,0x2
c001d97e:	eb 02                	jmp    c001d982 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d980:	31 db                	xor    ebx,ebx
c001d982:	83 c4 1c             	add    esp,0x1c
c001d985:	89 d8                	mov    eax,ebx
c001d987:	5b                   	pop    ebx
c001d988:	5e                   	pop    esi
c001d989:	5f                   	pop    edi
c001d98a:	5d                   	pop    ebp
c001d98b:	c3                   	ret    

c001d98c <ATAPI::diskRemoved()>:
c001d98c:	53                   	push   ebx
c001d98d:	83 ec 14             	sub    esp,0x14
c001d990:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d994:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d99b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d9a1:	e8 a4 03 ff ff       	call   c000dd4a <LogicalDisk::unmount()>
c001d9a6:	58                   	pop    eax
c001d9a7:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d9ad:	e8 7a 0d ff ff       	call   c000e72c <VCache::writeWriteBuffer()>
c001d9b2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d9b8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d9bc:	83 c4 18             	add    esp,0x18
c001d9bf:	5b                   	pop    ebx
c001d9c0:	e9 57 0d ff ff       	jmp    c000e71c <VCache::invalidateReadBuffer()>
c001d9c5:	90                   	nop

c001d9c6 <ATAPI::eject()>:
c001d9c6:	57                   	push   edi
c001d9c7:	b9 03 00 00 00       	mov    ecx,0x3
c001d9cc:	53                   	push   ebx
c001d9cd:	83 ec 14             	sub    esp,0x14
c001d9d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d9d4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d9d8:	fc                   	cld    
c001d9d9:	31 c0                	xor    eax,eax
c001d9db:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d9dd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d9e2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d9e7:	50                   	push   eax
c001d9e8:	50                   	push   eax
c001d9e9:	6a 00                	push   0x0
c001d9eb:	6a 00                	push   0x0
c001d9ed:	6a 00                	push   0x0
c001d9ef:	6a 02                	push   0x2
c001d9f1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d9f5:	50                   	push   eax
c001d9f6:	53                   	push   ebx
c001d9f7:	e8 c8 fc ff ff       	call   c001d6c4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d9fc:	83 c4 14             	add    esp,0x14
c001d9ff:	53                   	push   ebx
c001da00:	e8 87 ff ff ff       	call   c001d98c <ATAPI::diskRemoved()>
c001da05:	83 c4 24             	add    esp,0x24
c001da08:	31 c0                	xor    eax,eax
c001da0a:	5b                   	pop    ebx
c001da0b:	5f                   	pop    edi
c001da0c:	c3                   	ret    
c001da0d:	90                   	nop

c001da0e <ATAPI::diskInserted()>:
c001da0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da12:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001da19:	c3                   	ret    

c001da1a <ATAPI::detectMedia()>:
c001da1a:	56                   	push   esi
c001da1b:	53                   	push   ebx
c001da1c:	83 ec 28             	sub    esp,0x28
c001da1f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001da23:	6a 0c                	push   0xc
c001da25:	6a 00                	push   0x0
c001da27:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001da2b:	56                   	push   esi
c001da2c:	e8 bf 2a fe ff       	call   c00004f0 <memset>
c001da31:	58                   	pop    eax
c001da32:	5a                   	pop    edx
c001da33:	6a 00                	push   0x0
c001da35:	6a 00                	push   0x0
c001da37:	6a 00                	push   0x0
c001da39:	6a 00                	push   0x0
c001da3b:	56                   	push   esi
c001da3c:	53                   	push   ebx
c001da3d:	e8 82 fc ff ff       	call   c001d6c4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da42:	83 c4 1c             	add    esp,0x1c
c001da45:	6a 0c                	push   0xc
c001da47:	6a 00                	push   0x0
c001da49:	56                   	push   esi
c001da4a:	e8 a1 2a fe ff       	call   c00004f0 <memset>
c001da4f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001da54:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001da59:	59                   	pop    ecx
c001da5a:	58                   	pop    eax
c001da5b:	6a 01                	push   0x1
c001da5d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001da61:	50                   	push   eax
c001da62:	6a 00                	push   0x0
c001da64:	6a 12                	push   0x12
c001da66:	56                   	push   esi
c001da67:	53                   	push   ebx
c001da68:	e8 57 fc ff ff       	call   c001d6c4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da6d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001da71:	83 c4 20             	add    esp,0x20
c001da74:	83 e0 7f             	and    eax,0x7f
c001da77:	83 f8 70             	cmp    eax,0x70
c001da7a:	74 15                	je     c001da91 <ATAPI::detectMedia()+0x77>
c001da7c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da83:	75 0c                	jne    c001da91 <ATAPI::detectMedia()+0x77>
c001da85:	83 ec 0c             	sub    esp,0xc
c001da88:	53                   	push   ebx
c001da89:	e8 80 ff ff ff       	call   c001da0e <ATAPI::diskInserted()>
c001da8e:	83 c4 10             	add    esp,0x10
c001da91:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001da95:	83 e0 0f             	and    eax,0xf
c001da98:	83 f8 02             	cmp    eax,0x2
c001da9b:	75 1b                	jne    c001dab8 <ATAPI::detectMedia()+0x9e>
c001da9d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001daa2:	75 2d                	jne    c001dad1 <ATAPI::detectMedia()+0xb7>
c001daa4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001daab:	74 24                	je     c001dad1 <ATAPI::detectMedia()+0xb7>
c001daad:	83 ec 0c             	sub    esp,0xc
c001dab0:	53                   	push   ebx
c001dab1:	e8 d6 fe ff ff       	call   c001d98c <ATAPI::diskRemoved()>
c001dab6:	eb 16                	jmp    c001dace <ATAPI::detectMedia()+0xb4>
c001dab8:	85 c0                	test   eax,eax
c001daba:	75 15                	jne    c001dad1 <ATAPI::detectMedia()+0xb7>
c001dabc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dac3:	75 0c                	jne    c001dad1 <ATAPI::detectMedia()+0xb7>
c001dac5:	83 ec 0c             	sub    esp,0xc
c001dac8:	53                   	push   ebx
c001dac9:	e8 40 ff ff ff       	call   c001da0e <ATAPI::diskInserted()>
c001dace:	83 c4 10             	add    esp,0x10
c001dad1:	83 c4 24             	add    esp,0x24
c001dad4:	5b                   	pop    ebx
c001dad5:	5e                   	pop    esi
c001dad6:	c3                   	ret    
c001dad7:	90                   	nop

c001dad8 <ATAPI::open(int, int, void*)>:
c001dad8:	56                   	push   esi
c001dad9:	53                   	push   ebx
c001dada:	50                   	push   eax
c001dadb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dadf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dae3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dae7:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001daed:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001daf3:	c1 e0 06             	shl    eax,0x6
c001daf6:	01 d0                	add    eax,edx
c001daf8:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001daff:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001db05:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001db0c:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001db16:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001db1c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001db23:	6a 04                	push   0x4
c001db25:	6a 0c                	push   0xc
c001db27:	51                   	push   ecx
c001db28:	52                   	push   edx
c001db29:	e8 46 e3 ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db2e:	90                   	nop
c001db2f:	90                   	nop
c001db30:	6a 00                	push   0x0
c001db32:	6a 0c                	push   0xc
c001db34:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db3b:	50                   	push   eax
c001db3c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db42:	e8 2d e3 ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db47:	83 c4 14             	add    esp,0x14
c001db4a:	68 78 01 00 00       	push   0x178
c001db4f:	e8 66 9f fe ff       	call   c0007aba <malloc>
c001db54:	83 c4 0c             	add    esp,0xc
c001db57:	89 c6                	mov    esi,eax
c001db59:	6a 00                	push   0x0
c001db5b:	68 ff ff ff 7f       	push   0x7fffffff
c001db60:	6a 00                	push   0x0
c001db62:	6a 00                	push   0x0
c001db64:	53                   	push   ebx
c001db65:	68 83 36 02 c0       	push   0xc0023683
c001db6a:	50                   	push   eax
c001db6b:	e8 18 00 ff ff       	call   c000db88 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001db70:	83 c4 14             	add    esp,0x14
c001db73:	56                   	push   esi
c001db74:	e8 cf 00 ff ff       	call   c000dc48 <LogicalDisk::assignDriveLetter()>
c001db79:	5a                   	pop    edx
c001db7a:	0f be c0             	movsx  eax,al
c001db7d:	59                   	pop    ecx
c001db7e:	50                   	push   eax
c001db7f:	68 d4 34 02 c0       	push   0xc00234d4
c001db84:	e8 c0 cd fe ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001db89:	58                   	pop    eax
c001db8a:	5a                   	pop    edx
c001db8b:	56                   	push   esi
c001db8c:	53                   	push   ebx
c001db8d:	e8 38 ee fe ff       	call   c000c9ca <Device::addChild(Device*)>
c001db92:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001db98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db9b:	e8 76 f2 fe ff       	call   c000ce16 <PhysicalDisk::startCache()>
c001dba0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001dba7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dbaa:	e8 6b fe ff ff       	call   c001da1a <ATAPI::detectMedia()>
c001dbaf:	83 c4 14             	add    esp,0x14
c001dbb2:	31 c0                	xor    eax,eax
c001dbb4:	5b                   	pop    ebx
c001dbb5:	5e                   	pop    esi
c001dbb6:	c3                   	ret    
c001dbb7:	90                   	nop

c001dbb8 <ATAPI::read(unsigned long long, int, void*)>:
c001dbb8:	55                   	push   ebp
c001dbb9:	57                   	push   edi
c001dbba:	56                   	push   esi
c001dbbb:	53                   	push   ebx
c001dbbc:	83 ec 1c             	sub    esp,0x1c
c001dbbf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dbc3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001dbc7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dbcb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dbd2:	74 3c                	je     c001dc10 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001dbd4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dbd8:	b9 03 00 00 00       	mov    ecx,0x3
c001dbdd:	fc                   	cld    
c001dbde:	31 c0                	xor    eax,eax
c001dbe0:	0f ce                	bswap  esi
c001dbe2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dbe4:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001dbe9:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001dbed:	89 e8                	mov    eax,ebp
c001dbef:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001dbf3:	50                   	push   eax
c001dbf4:	50                   	push   eax
c001dbf5:	55                   	push   ebp
c001dbf6:	c1 e5 0b             	shl    ebp,0xb
c001dbf9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dbfd:	6a 00                	push   0x0
c001dbff:	55                   	push   ebp
c001dc00:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dc04:	50                   	push   eax
c001dc05:	53                   	push   ebx
c001dc06:	e8 b9 fa ff ff       	call   c001d6c4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dc0b:	83 c4 20             	add    esp,0x20
c001dc0e:	eb 1a                	jmp    c001dc2a <ATAPI::read(unsigned long long, int, void*)+0x72>
c001dc10:	83 ec 0c             	sub    esp,0xc
c001dc13:	53                   	push   ebx
c001dc14:	e8 01 fe ff ff       	call   c001da1a <ATAPI::detectMedia()>
c001dc19:	83 c4 10             	add    esp,0x10
c001dc1c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dc23:	75 af                	jne    c001dbd4 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001dc25:	b8 02 00 00 00       	mov    eax,0x2
c001dc2a:	83 c4 1c             	add    esp,0x1c
c001dc2d:	5b                   	pop    ebx
c001dc2e:	5e                   	pop    esi
c001dc2f:	5f                   	pop    edi
c001dc30:	5d                   	pop    ebp
c001dc31:	c3                   	ret    

c001dc32 <SATA::close(int, int, void*)>:
c001dc32:	83 ec 0c             	sub    esp,0xc
c001dc35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc39:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dc3f:	85 c0                	test   eax,eax
c001dc41:	74 0c                	je     c001dc4f <SATA::close(int, int, void*)+0x1d>
c001dc43:	83 ec 0c             	sub    esp,0xc
c001dc46:	8b 10                	mov    edx,DWORD PTR [eax]
c001dc48:	50                   	push   eax
c001dc49:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dc4c:	83 c4 10             	add    esp,0x10
c001dc4f:	31 c0                	xor    eax,eax
c001dc51:	83 c4 0c             	add    esp,0xc
c001dc54:	c3                   	ret    
c001dc55:	90                   	nop

c001dc56 <SATA::powerSaving(PowerSavingLevel)>:
c001dc56:	c3                   	ret    
c001dc57:	90                   	nop

c001dc58 <SATA::open(int, int, void*)>:
c001dc58:	56                   	push   esi
c001dc59:	53                   	push   ebx
c001dc5a:	50                   	push   eax
c001dc5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc63:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dc6d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001dc73:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001dc7d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc81:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dc8b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001dc91:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dc98:	e8 26 a1 fe ff       	call   c0007dc3 <Phys::allocatePage()>
c001dc9d:	89 c6                	mov    esi,eax
c001dc9f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dca5:	81 c6 00 10 00 00    	add    esi,0x1000
c001dcab:	e8 13 a1 fe ff       	call   c0007dc3 <Phys::allocatePage()>
c001dcb0:	39 c6                	cmp    esi,eax
c001dcb2:	74 10                	je     c001dcc4 <SATA::open(int, int, void*)+0x6c>
c001dcb4:	83 ec 0c             	sub    esp,0xc
c001dcb7:	68 1c 35 02 c0       	push   0xc002351c
c001dcbc:	e8 02 3a ff ff       	call   c00116c3 <KePanic(char const*)>
c001dcc1:	83 c4 10             	add    esp,0x10
c001dcc4:	83 ec 0c             	sub    esp,0xc
c001dcc7:	6a 02                	push   0x2
c001dcc9:	e8 43 b9 fe ff       	call   c0009611 <Virt::allocateKernelVirtualPages(int)>
c001dcce:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dcd4:	6a 03                	push   0x3
c001dcd6:	50                   	push   eax
c001dcd7:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dcdd:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dce3:	e8 3c c0 fe ff       	call   c0009d24 <VAS::mapPage(unsigned long, unsigned long, int)>
c001dce8:	83 c4 14             	add    esp,0x14
c001dceb:	53                   	push   ebx
c001dcec:	e8 25 f1 fe ff       	call   c000ce16 <PhysicalDisk::startCache()>
c001dcf1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dcf4:	e8 61 03 ff ff       	call   c000e05a <createPartitionsForDisk(PhysicalDisk*)>
c001dcf9:	83 c4 14             	add    esp,0x14
c001dcfc:	31 c0                	xor    eax,eax
c001dcfe:	5b                   	pop    ebx
c001dcff:	5e                   	pop    esi
c001dd00:	c3                   	ret    
c001dd01:	90                   	nop

c001dd02 <SATA::SATA()>:
c001dd02:	83 ec 0c             	sub    esp,0xc
c001dd05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd09:	83 ec 04             	sub    esp,0x4
c001dd0c:	68 00 02 00 00       	push   0x200
c001dd11:	68 30 35 02 c0       	push   0xc0023530
c001dd16:	50                   	push   eax
c001dd17:	e8 92 f0 fe ff       	call   c000cdae <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dd1c:	83 c4 10             	add    esp,0x10
c001dd1f:	ba a0 35 02 c0       	mov    edx,0xc00235a0
c001dd24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd28:	89 10                	mov    DWORD PTR [eax],edx
c001dd2a:	90                   	nop
c001dd2b:	83 c4 0c             	add    esp,0xc
c001dd2e:	c3                   	ret    
c001dd2f:	90                   	nop

c001dd30 <SATA::access(unsigned long long, int, void*, bool)>:
c001dd30:	55                   	push   ebp
c001dd31:	57                   	push   edi
c001dd32:	56                   	push   esi
c001dd33:	53                   	push   ebx
c001dd34:	83 ec 2c             	sub    esp,0x2c
c001dd37:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dd3b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dd3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dd43:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dd47:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dd4b:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dd50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dd54:	7e 10                	jle    c001dd66 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001dd56:	83 ec 0c             	sub    esp,0xc
c001dd59:	68 40 35 02 c0       	push   0xc0023540
c001dd5e:	e8 60 39 ff ff       	call   c00116c3 <KePanic(char const*)>
c001dd63:	83 c4 10             	add    esp,0x10
c001dd66:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dd6c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dd72:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dd7c:	89 d0                	mov    eax,edx
c001dd7e:	c1 e0 07             	shl    eax,0x7
c001dd81:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dd85:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dd8f:	51                   	push   ecx
c001dd90:	8d 42 02             	lea    eax,[edx+0x2]
c001dd93:	51                   	push   ecx
c001dd94:	c1 e0 07             	shl    eax,0x7
c001dd97:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dd9b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dd9f:	50                   	push   eax
c001dda0:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dda6:	e8 91 ec ff ff       	call   c001ca3c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ddab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ddaf:	83 c4 10             	add    esp,0x10
c001ddb2:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ddb7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ddbb:	0f 84 57 01 00 00    	je     c001df18 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001ddc1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ddc5:	c1 e0 09             	shl    eax,0x9
c001ddc8:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ddcd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ddd1:	74 0e                	je     c001dde1 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001ddd3:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ddd9:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001dddd:	89 c1                	mov    ecx,eax
c001dddf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dde1:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dde7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ddeb:	8d 42 02             	lea    eax,[edx+0x2]
c001ddee:	c1 e0 07             	shl    eax,0x7
c001ddf1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ddf5:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddf7:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ddfd:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001de03:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de07:	c1 e1 05             	shl    ecx,0x5
c001de0a:	01 c8                	add    eax,ecx
c001de0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001de10:	83 e1 01             	and    ecx,0x1
c001de13:	89 ce                	mov    esi,ecx
c001de15:	8a 08                	mov    cl,BYTE PTR [eax]
c001de17:	c1 e6 06             	shl    esi,0x6
c001de1a:	83 e1 bf             	and    ecx,0xffffffbf
c001de1d:	09 f1                	or     ecx,esi
c001de1f:	88 08                	mov    BYTE PTR [eax],cl
c001de21:	8b 08                	mov    ecx,DWORD PTR [eax]
c001de23:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001de29:	81 c9 05 00 01 00    	or     ecx,0x10005
c001de2f:	89 08                	mov    DWORD PTR [eax],ecx
c001de31:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001de37:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001de3d:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001de43:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001de46:	50                   	push   eax
c001de47:	68 90 00 00 00       	push   0x90
c001de4c:	6a 00                	push   0x0
c001de4e:	56                   	push   esi
c001de4f:	e8 9c 26 fe ff       	call   c00004f0 <memset>
c001de54:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001de5a:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001de60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001de64:	83 c4 10             	add    esp,0x10
c001de67:	48                   	dec    eax
c001de68:	25 ff ff 3f 00       	and    eax,0x3fffff
c001de6d:	89 c1                	mov    ecx,eax
c001de6f:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001de75:	25 00 00 c0 ff       	and    eax,0xffc00000
c001de7a:	09 c8                	or     eax,ecx
c001de7c:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001de82:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001de88:	83 c8 80             	or     eax,0xffffff80
c001de8b:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001de91:	66 8b 06             	mov    ax,WORD PTR [esi]
c001de94:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001de98:	25 00 7f 00 00       	and    eax,0x7f00
c001de9d:	0d 27 80 ff ff       	or     eax,0xffff8027
c001dea2:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dea7:	66 89 06             	mov    WORD PTR [esi],ax
c001deaa:	b0 35                	mov    al,0x35
c001deac:	75 02                	jne    c001deb0 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001deae:	b0 25                	mov    al,0x25
c001deb0:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001deb3:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001deb7:	89 e8                	mov    eax,ebp
c001deb9:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001debd:	c1 e8 10             	shr    eax,0x10
c001dec0:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001dec3:	89 e8                	mov    eax,ebp
c001dec5:	c1 e8 18             	shr    eax,0x18
c001dec8:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001decb:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001decf:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ded2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ded6:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ded9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dedd:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001dee1:	89 d6                	mov    esi,edx
c001dee3:	31 c0                	xor    eax,eax
c001dee5:	c1 e6 07             	shl    esi,0x7
c001dee8:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001deec:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001def2:	80 e1 88             	and    cl,0x88
c001def5:	74 0a                	je     c001df01 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001def7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001defc:	74 0a                	je     c001df08 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001defe:	40                   	inc    eax
c001deff:	eb eb                	jmp    c001deec <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001df01:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df06:	75 17                	jne    c001df1f <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001df08:	83 ec 0c             	sub    esp,0xc
c001df0b:	68 79 35 02 c0       	push   0xc0023579
c001df10:	e8 34 ca fe ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001df15:	83 c4 10             	add    esp,0x10
c001df18:	b8 01 00 00 00       	mov    eax,0x1
c001df1d:	eb 5d                	jmp    c001df7c <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001df1f:	b8 01 00 00 00       	mov    eax,0x1
c001df24:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001df28:	c1 e2 07             	shl    edx,0x7
c001df2b:	d3 e0                	shl    eax,cl
c001df2d:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001df31:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001df37:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001df3d:	85 c8                	test   eax,ecx
c001df3f:	74 16                	je     c001df57 <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001df41:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001df47:	0f ba e1 1e          	bt     ecx,0x1e
c001df4b:	73 ea                	jae    c001df37 <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001df4d:	83 ec 0c             	sub    esp,0xc
c001df50:	68 87 35 02 c0       	push   0xc0023587
c001df55:	eb b9                	jmp    c001df10 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001df57:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001df5d:	0f ba e0 1e          	bt     eax,0x1e
c001df61:	72 b5                	jb     c001df18 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001df63:	31 c0                	xor    eax,eax
c001df65:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001df6a:	75 10                	jne    c001df7c <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001df6c:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001df72:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001df76:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001df7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001df7c:	83 c4 2c             	add    esp,0x2c
c001df7f:	5b                   	pop    ebx
c001df80:	5e                   	pop    esi
c001df81:	5f                   	pop    edi
c001df82:	5d                   	pop    ebp
c001df83:	c3                   	ret    

c001df84 <SATA::read(unsigned long long, int, void*)>:
c001df84:	55                   	push   ebp
c001df85:	57                   	push   edi
c001df86:	56                   	push   esi
c001df87:	be 04 00 00 00       	mov    esi,0x4
c001df8c:	53                   	push   ebx
c001df8d:	83 ec 0c             	sub    esp,0xc
c001df90:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001df94:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001df98:	8d 7b ff             	lea    edi,[ebx-0x1]
c001df9b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001df9f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001dfa3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001dfa9:	0f 87 1a 02 00 00    	ja     c001e1c9 <SATA::read(unsigned long long, int, void*)+0x245>
c001dfaf:	be 06 00 00 00       	mov    esi,0x6
c001dfb4:	85 c9                	test   ecx,ecx
c001dfb6:	0f 84 0d 02 00 00    	je     c001e1c9 <SATA::read(unsigned long long, int, void*)+0x245>
c001dfbc:	56                   	push   esi
c001dfbd:	56                   	push   esi
c001dfbe:	6a 00                	push   0x0
c001dfc0:	51                   	push   ecx
c001dfc1:	53                   	push   ebx
c001dfc2:	52                   	push   edx
c001dfc3:	50                   	push   eax
c001dfc4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dfc8:	e8 63 fd ff ff       	call   c001dd30 <SATA::access(unsigned long long, int, void*, bool)>
c001dfcd:	83 c4 20             	add    esp,0x20
c001dfd0:	89 c6                	mov    esi,eax
c001dfd2:	85 c0                	test   eax,eax
c001dfd4:	0f 85 ea 01 00 00    	jne    c001e1c4 <SATA::read(unsigned long long, int, void*)+0x240>
c001dfda:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001dfe0:	bb 0a 00 00 00       	mov    ebx,0xa
c001dfe5:	50                   	push   eax
c001dfe6:	50                   	push   eax
c001dfe7:	6a 0f                	push   0xf
c001dfe9:	6a 00                	push   0x0
c001dfeb:	e8 75 f2 ff ff       	call   c001d265 <combineColours(unsigned char, unsigned char)>
c001dff0:	5a                   	pop    edx
c001dff1:	0f b6 c0             	movzx  eax,al
c001dff4:	59                   	pop    ecx
c001dff5:	b9 10 27 00 00       	mov    ecx,0x2710
c001dffa:	50                   	push   eax
c001dffb:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e000:	99                   	cdq    
c001e001:	f7 f9                	idiv   ecx
c001e003:	99                   	cdq    
c001e004:	f7 fb                	idiv   ebx
c001e006:	8d 42 30             	lea    eax,[edx+0x30]
c001e009:	0f b6 c0             	movzx  eax,al
c001e00c:	50                   	push   eax
c001e00d:	e8 42 f2 ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001e012:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e018:	5f                   	pop    edi
c001e019:	5d                   	pop    ebp
c001e01a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001e01f:	6a 0f                	push   0xf
c001e021:	6a 00                	push   0x0
c001e023:	e8 3d f2 ff ff       	call   c001d265 <combineColours(unsigned char, unsigned char)>
c001e028:	5a                   	pop    edx
c001e029:	0f b6 c0             	movzx  eax,al
c001e02c:	59                   	pop    ecx
c001e02d:	50                   	push   eax
c001e02e:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e033:	99                   	cdq    
c001e034:	f7 fd                	idiv   ebp
c001e036:	99                   	cdq    
c001e037:	f7 fb                	idiv   ebx
c001e039:	8d 42 30             	lea    eax,[edx+0x30]
c001e03c:	0f b6 c0             	movzx  eax,al
c001e03f:	50                   	push   eax
c001e040:	e8 0f f2 ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001e045:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e04b:	5f                   	pop    edi
c001e04c:	bf 64 00 00 00       	mov    edi,0x64
c001e051:	58                   	pop    eax
c001e052:	6a 0f                	push   0xf
c001e054:	6a 00                	push   0x0
c001e056:	e8 0a f2 ff ff       	call   c001d265 <combineColours(unsigned char, unsigned char)>
c001e05b:	5a                   	pop    edx
c001e05c:	0f b6 c0             	movzx  eax,al
c001e05f:	59                   	pop    ecx
c001e060:	50                   	push   eax
c001e061:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e066:	99                   	cdq    
c001e067:	f7 ff                	idiv   edi
c001e069:	99                   	cdq    
c001e06a:	f7 fb                	idiv   ebx
c001e06c:	8d 42 30             	lea    eax,[edx+0x30]
c001e06f:	0f b6 c0             	movzx  eax,al
c001e072:	50                   	push   eax
c001e073:	e8 dc f1 ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001e078:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e07e:	58                   	pop    eax
c001e07f:	5a                   	pop    edx
c001e080:	6a 0f                	push   0xf
c001e082:	6a 00                	push   0x0
c001e084:	e8 dc f1 ff ff       	call   c001d265 <combineColours(unsigned char, unsigned char)>
c001e089:	59                   	pop    ecx
c001e08a:	0f b6 c0             	movzx  eax,al
c001e08d:	5a                   	pop    edx
c001e08e:	50                   	push   eax
c001e08f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e094:	99                   	cdq    
c001e095:	f7 fb                	idiv   ebx
c001e097:	99                   	cdq    
c001e098:	f7 fb                	idiv   ebx
c001e09a:	8d 42 30             	lea    eax,[edx+0x30]
c001e09d:	0f b6 c0             	movzx  eax,al
c001e0a0:	50                   	push   eax
c001e0a1:	e8 ae f1 ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001e0a6:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e0ac:	59                   	pop    ecx
c001e0ad:	58                   	pop    eax
c001e0ae:	6a 0f                	push   0xf
c001e0b0:	6a 00                	push   0x0
c001e0b2:	e8 ae f1 ff ff       	call   c001d265 <combineColours(unsigned char, unsigned char)>
c001e0b7:	5a                   	pop    edx
c001e0b8:	0f b6 c0             	movzx  eax,al
c001e0bb:	59                   	pop    ecx
c001e0bc:	50                   	push   eax
c001e0bd:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e0c2:	99                   	cdq    
c001e0c3:	f7 fb                	idiv   ebx
c001e0c5:	8d 42 30             	lea    eax,[edx+0x30]
c001e0c8:	0f b6 c0             	movzx  eax,al
c001e0cb:	50                   	push   eax
c001e0cc:	e8 83 f1 ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001e0d1:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e0d7:	58                   	pop    eax
c001e0d8:	5a                   	pop    edx
c001e0d9:	6a 0f                	push   0xf
c001e0db:	6a 00                	push   0x0
c001e0dd:	e8 83 f1 ff ff       	call   c001d265 <combineColours(unsigned char, unsigned char)>
c001e0e2:	59                   	pop    ecx
c001e0e3:	0f b6 c0             	movzx  eax,al
c001e0e6:	5a                   	pop    edx
c001e0e7:	b9 10 27 00 00       	mov    ecx,0x2710
c001e0ec:	50                   	push   eax
c001e0ed:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0f2:	99                   	cdq    
c001e0f3:	f7 f9                	idiv   ecx
c001e0f5:	99                   	cdq    
c001e0f6:	f7 fb                	idiv   ebx
c001e0f8:	8d 42 30             	lea    eax,[edx+0x30]
c001e0fb:	0f b6 c0             	movzx  eax,al
c001e0fe:	50                   	push   eax
c001e0ff:	e8 50 f1 ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001e104:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e10a:	59                   	pop    ecx
c001e10b:	58                   	pop    eax
c001e10c:	6a 0f                	push   0xf
c001e10e:	6a 00                	push   0x0
c001e110:	e8 50 f1 ff ff       	call   c001d265 <combineColours(unsigned char, unsigned char)>
c001e115:	5a                   	pop    edx
c001e116:	0f b6 c0             	movzx  eax,al
c001e119:	59                   	pop    ecx
c001e11a:	50                   	push   eax
c001e11b:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e120:	99                   	cdq    
c001e121:	f7 fd                	idiv   ebp
c001e123:	99                   	cdq    
c001e124:	f7 fb                	idiv   ebx
c001e126:	8d 42 30             	lea    eax,[edx+0x30]
c001e129:	0f b6 c0             	movzx  eax,al
c001e12c:	50                   	push   eax
c001e12d:	e8 22 f1 ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001e132:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e138:	5d                   	pop    ebp
c001e139:	58                   	pop    eax
c001e13a:	6a 0f                	push   0xf
c001e13c:	6a 00                	push   0x0
c001e13e:	e8 22 f1 ff ff       	call   c001d265 <combineColours(unsigned char, unsigned char)>
c001e143:	5a                   	pop    edx
c001e144:	0f b6 c0             	movzx  eax,al
c001e147:	59                   	pop    ecx
c001e148:	50                   	push   eax
c001e149:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e14e:	99                   	cdq    
c001e14f:	f7 ff                	idiv   edi
c001e151:	99                   	cdq    
c001e152:	f7 fb                	idiv   ebx
c001e154:	8d 42 30             	lea    eax,[edx+0x30]
c001e157:	0f b6 c0             	movzx  eax,al
c001e15a:	50                   	push   eax
c001e15b:	e8 f4 f0 ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001e160:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e166:	5f                   	pop    edi
c001e167:	5d                   	pop    ebp
c001e168:	6a 0f                	push   0xf
c001e16a:	6a 00                	push   0x0
c001e16c:	e8 f4 f0 ff ff       	call   c001d265 <combineColours(unsigned char, unsigned char)>
c001e171:	5a                   	pop    edx
c001e172:	0f b6 c0             	movzx  eax,al
c001e175:	59                   	pop    ecx
c001e176:	50                   	push   eax
c001e177:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e17c:	99                   	cdq    
c001e17d:	f7 fb                	idiv   ebx
c001e17f:	99                   	cdq    
c001e180:	f7 fb                	idiv   ebx
c001e182:	8d 42 30             	lea    eax,[edx+0x30]
c001e185:	0f b6 c0             	movzx  eax,al
c001e188:	50                   	push   eax
c001e189:	e8 c6 f0 ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001e18e:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e194:	5f                   	pop    edi
c001e195:	5d                   	pop    ebp
c001e196:	6a 0f                	push   0xf
c001e198:	6a 00                	push   0x0
c001e19a:	e8 c6 f0 ff ff       	call   c001d265 <combineColours(unsigned char, unsigned char)>
c001e19f:	5a                   	pop    edx
c001e1a0:	0f b6 c0             	movzx  eax,al
c001e1a3:	59                   	pop    ecx
c001e1a4:	50                   	push   eax
c001e1a5:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e1aa:	99                   	cdq    
c001e1ab:	f7 fb                	idiv   ebx
c001e1ad:	83 c2 30             	add    edx,0x30
c001e1b0:	0f b6 d2             	movzx  edx,dl
c001e1b3:	52                   	push   edx
c001e1b4:	e8 9b f0 ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001e1b9:	83 c4 10             	add    esp,0x10
c001e1bc:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e1c2:	eb 05                	jmp    c001e1c9 <SATA::read(unsigned long long, int, void*)+0x245>
c001e1c4:	be 01 00 00 00       	mov    esi,0x1
c001e1c9:	83 c4 0c             	add    esp,0xc
c001e1cc:	89 f0                	mov    eax,esi
c001e1ce:	5b                   	pop    ebx
c001e1cf:	5e                   	pop    esi
c001e1d0:	5f                   	pop    edi
c001e1d1:	5d                   	pop    ebp
c001e1d2:	c3                   	ret    
c001e1d3:	90                   	nop

c001e1d4 <SATA::write(unsigned long long, int, void*)>:
c001e1d4:	55                   	push   ebp
c001e1d5:	b8 04 00 00 00       	mov    eax,0x4
c001e1da:	57                   	push   edi
c001e1db:	56                   	push   esi
c001e1dc:	53                   	push   ebx
c001e1dd:	83 ec 1c             	sub    esp,0x1c
c001e1e0:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e1e4:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e1e8:	8d 75 ff             	lea    esi,[ebp-0x1]
c001e1eb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e1ef:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001e1f3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e1f9:	0f 87 32 02 00 00    	ja     c001e431 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e1ff:	b8 06 00 00 00       	mov    eax,0x6
c001e204:	85 ff                	test   edi,edi
c001e206:	0f 84 25 02 00 00    	je     c001e431 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e20c:	89 ee                	mov    esi,ebp
c001e20e:	c1 e6 09             	shl    esi,0x9
c001e211:	01 fe                	add    esi,edi
c001e213:	89 c8                	mov    eax,ecx
c001e215:	89 da                	mov    edx,ebx
c001e217:	83 c0 01             	add    eax,0x1
c001e21a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e21e:	83 d2 00             	adc    edx,0x0
c001e221:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e225:	50                   	push   eax
c001e226:	50                   	push   eax
c001e227:	6a 01                	push   0x1
c001e229:	57                   	push   edi
c001e22a:	81 c7 00 02 00 00    	add    edi,0x200
c001e230:	6a 01                	push   0x1
c001e232:	53                   	push   ebx
c001e233:	51                   	push   ecx
c001e234:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e238:	e8 f3 fa ff ff       	call   c001dd30 <SATA::access(unsigned long long, int, void*, bool)>
c001e23d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e241:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e245:	83 c4 20             	add    esp,0x20
c001e248:	39 f7                	cmp    edi,esi
c001e24a:	75 c7                	jne    c001e213 <SATA::write(unsigned long long, int, void*)+0x3f>
c001e24c:	bb 0a 00 00 00       	mov    ebx,0xa
c001e251:	01 2d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebp
c001e257:	bd 10 27 00 00       	mov    ebp,0x2710
c001e25c:	50                   	push   eax
c001e25d:	50                   	push   eax
c001e25e:	6a 0f                	push   0xf
c001e260:	6a 00                	push   0x0
c001e262:	e8 fe ef ff ff       	call   c001d265 <combineColours(unsigned char, unsigned char)>
c001e267:	5a                   	pop    edx
c001e268:	0f b6 c0             	movzx  eax,al
c001e26b:	59                   	pop    ecx
c001e26c:	50                   	push   eax
c001e26d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e272:	99                   	cdq    
c001e273:	f7 fd                	idiv   ebp
c001e275:	99                   	cdq    
c001e276:	f7 fb                	idiv   ebx
c001e278:	8d 42 30             	lea    eax,[edx+0x30]
c001e27b:	0f b6 c0             	movzx  eax,al
c001e27e:	50                   	push   eax
c001e27f:	e8 d0 ef ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001e284:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e28a:	5e                   	pop    esi
c001e28b:	5f                   	pop    edi
c001e28c:	bf e8 03 00 00       	mov    edi,0x3e8
c001e291:	6a 0f                	push   0xf
c001e293:	6a 00                	push   0x0
c001e295:	e8 cb ef ff ff       	call   c001d265 <combineColours(unsigned char, unsigned char)>
c001e29a:	5a                   	pop    edx
c001e29b:	0f b6 c0             	movzx  eax,al
c001e29e:	59                   	pop    ecx
c001e29f:	50                   	push   eax
c001e2a0:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2a5:	99                   	cdq    
c001e2a6:	f7 ff                	idiv   edi
c001e2a8:	99                   	cdq    
c001e2a9:	f7 fb                	idiv   ebx
c001e2ab:	8d 42 30             	lea    eax,[edx+0x30]
c001e2ae:	0f b6 c0             	movzx  eax,al
c001e2b1:	50                   	push   eax
c001e2b2:	e8 9d ef ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001e2b7:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e2bd:	5e                   	pop    esi
c001e2be:	be 64 00 00 00       	mov    esi,0x64
c001e2c3:	58                   	pop    eax
c001e2c4:	6a 0f                	push   0xf
c001e2c6:	6a 00                	push   0x0
c001e2c8:	e8 98 ef ff ff       	call   c001d265 <combineColours(unsigned char, unsigned char)>
c001e2cd:	5a                   	pop    edx
c001e2ce:	0f b6 c0             	movzx  eax,al
c001e2d1:	59                   	pop    ecx
c001e2d2:	50                   	push   eax
c001e2d3:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2d8:	99                   	cdq    
c001e2d9:	f7 fe                	idiv   esi
c001e2db:	99                   	cdq    
c001e2dc:	f7 fb                	idiv   ebx
c001e2de:	8d 42 30             	lea    eax,[edx+0x30]
c001e2e1:	0f b6 c0             	movzx  eax,al
c001e2e4:	50                   	push   eax
c001e2e5:	e8 6a ef ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001e2ea:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e2f0:	58                   	pop    eax
c001e2f1:	5a                   	pop    edx
c001e2f2:	6a 0f                	push   0xf
c001e2f4:	6a 00                	push   0x0
c001e2f6:	e8 6a ef ff ff       	call   c001d265 <combineColours(unsigned char, unsigned char)>
c001e2fb:	59                   	pop    ecx
c001e2fc:	0f b6 c0             	movzx  eax,al
c001e2ff:	5a                   	pop    edx
c001e300:	50                   	push   eax
c001e301:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e306:	99                   	cdq    
c001e307:	f7 fb                	idiv   ebx
c001e309:	99                   	cdq    
c001e30a:	f7 fb                	idiv   ebx
c001e30c:	8d 42 30             	lea    eax,[edx+0x30]
c001e30f:	0f b6 c0             	movzx  eax,al
c001e312:	50                   	push   eax
c001e313:	e8 3c ef ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001e318:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e31e:	59                   	pop    ecx
c001e31f:	58                   	pop    eax
c001e320:	6a 0f                	push   0xf
c001e322:	6a 00                	push   0x0
c001e324:	e8 3c ef ff ff       	call   c001d265 <combineColours(unsigned char, unsigned char)>
c001e329:	5a                   	pop    edx
c001e32a:	0f b6 c0             	movzx  eax,al
c001e32d:	59                   	pop    ecx
c001e32e:	50                   	push   eax
c001e32f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e334:	99                   	cdq    
c001e335:	f7 fb                	idiv   ebx
c001e337:	83 c2 30             	add    edx,0x30
c001e33a:	0f b6 d2             	movzx  edx,dl
c001e33d:	52                   	push   edx
c001e33e:	e8 11 ef ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001e343:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e349:	58                   	pop    eax
c001e34a:	5a                   	pop    edx
c001e34b:	6a 0f                	push   0xf
c001e34d:	6a 00                	push   0x0
c001e34f:	e8 11 ef ff ff       	call   c001d265 <combineColours(unsigned char, unsigned char)>
c001e354:	59                   	pop    ecx
c001e355:	0f b6 c0             	movzx  eax,al
c001e358:	5a                   	pop    edx
c001e359:	50                   	push   eax
c001e35a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e35f:	99                   	cdq    
c001e360:	f7 fd                	idiv   ebp
c001e362:	99                   	cdq    
c001e363:	f7 fb                	idiv   ebx
c001e365:	8d 42 30             	lea    eax,[edx+0x30]
c001e368:	0f b6 c0             	movzx  eax,al
c001e36b:	50                   	push   eax
c001e36c:	e8 e3 ee ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001e371:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e377:	59                   	pop    ecx
c001e378:	5d                   	pop    ebp
c001e379:	6a 0f                	push   0xf
c001e37b:	6a 00                	push   0x0
c001e37d:	e8 e3 ee ff ff       	call   c001d265 <combineColours(unsigned char, unsigned char)>
c001e382:	5a                   	pop    edx
c001e383:	0f b6 c0             	movzx  eax,al
c001e386:	59                   	pop    ecx
c001e387:	50                   	push   eax
c001e388:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e38d:	99                   	cdq    
c001e38e:	f7 ff                	idiv   edi
c001e390:	99                   	cdq    
c001e391:	f7 fb                	idiv   ebx
c001e393:	8d 42 30             	lea    eax,[edx+0x30]
c001e396:	0f b6 c0             	movzx  eax,al
c001e399:	50                   	push   eax
c001e39a:	e8 b5 ee ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001e39f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e3a5:	5f                   	pop    edi
c001e3a6:	5d                   	pop    ebp
c001e3a7:	6a 0f                	push   0xf
c001e3a9:	6a 00                	push   0x0
c001e3ab:	e8 b5 ee ff ff       	call   c001d265 <combineColours(unsigned char, unsigned char)>
c001e3b0:	5a                   	pop    edx
c001e3b1:	0f b6 c0             	movzx  eax,al
c001e3b4:	59                   	pop    ecx
c001e3b5:	50                   	push   eax
c001e3b6:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e3bb:	99                   	cdq    
c001e3bc:	f7 fe                	idiv   esi
c001e3be:	99                   	cdq    
c001e3bf:	f7 fb                	idiv   ebx
c001e3c1:	8d 42 30             	lea    eax,[edx+0x30]
c001e3c4:	0f b6 c0             	movzx  eax,al
c001e3c7:	50                   	push   eax
c001e3c8:	e8 87 ee ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001e3cd:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e3d3:	5e                   	pop    esi
c001e3d4:	5f                   	pop    edi
c001e3d5:	6a 0f                	push   0xf
c001e3d7:	6a 00                	push   0x0
c001e3d9:	e8 87 ee ff ff       	call   c001d265 <combineColours(unsigned char, unsigned char)>
c001e3de:	5d                   	pop    ebp
c001e3df:	0f b6 c0             	movzx  eax,al
c001e3e2:	5a                   	pop    edx
c001e3e3:	50                   	push   eax
c001e3e4:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e3e9:	99                   	cdq    
c001e3ea:	f7 fb                	idiv   ebx
c001e3ec:	99                   	cdq    
c001e3ed:	f7 fb                	idiv   ebx
c001e3ef:	8d 42 30             	lea    eax,[edx+0x30]
c001e3f2:	0f b6 c0             	movzx  eax,al
c001e3f5:	50                   	push   eax
c001e3f6:	e8 59 ee ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001e3fb:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e401:	59                   	pop    ecx
c001e402:	5e                   	pop    esi
c001e403:	6a 0f                	push   0xf
c001e405:	6a 00                	push   0x0
c001e407:	e8 59 ee ff ff       	call   c001d265 <combineColours(unsigned char, unsigned char)>
c001e40c:	5f                   	pop    edi
c001e40d:	0f b6 c0             	movzx  eax,al
c001e410:	5d                   	pop    ebp
c001e411:	50                   	push   eax
c001e412:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e417:	99                   	cdq    
c001e418:	f7 fb                	idiv   ebx
c001e41a:	83 c2 30             	add    edx,0x30
c001e41d:	0f b6 d2             	movzx  edx,dl
c001e420:	52                   	push   edx
c001e421:	e8 2e ee ff ff       	call   c001d254 <combineCharAndColour(char, unsigned char)>
c001e426:	83 c4 10             	add    esp,0x10
c001e429:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e42f:	31 c0                	xor    eax,eax
c001e431:	83 c4 1c             	add    esp,0x1c
c001e434:	5b                   	pop    ebx
c001e435:	5e                   	pop    esi
c001e436:	5f                   	pop    edi
c001e437:	5d                   	pop    ebp
c001e438:	c3                   	ret    
c001e439:	90                   	nop

c001e43a <SATAPI::write(unsigned long long, int, void*)>:
c001e43a:	b8 03 00 00 00       	mov    eax,0x3
c001e43f:	c3                   	ret    

c001e440 <SATAPI::close(int, int, void*)>:
c001e440:	83 ec 0c             	sub    esp,0xc
c001e443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e447:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e44d:	85 c0                	test   eax,eax
c001e44f:	74 0c                	je     c001e45d <SATAPI::close(int, int, void*)+0x1d>
c001e451:	83 ec 0c             	sub    esp,0xc
c001e454:	8b 10                	mov    edx,DWORD PTR [eax]
c001e456:	50                   	push   eax
c001e457:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e45a:	83 c4 10             	add    esp,0x10
c001e45d:	31 c0                	xor    eax,eax
c001e45f:	83 c4 0c             	add    esp,0xc
c001e462:	c3                   	ret    
c001e463:	90                   	nop

c001e464 <SATAPI::SATAPI()>:
c001e464:	83 ec 0c             	sub    esp,0xc
c001e467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e46b:	83 ec 04             	sub    esp,0x4
c001e46e:	68 00 08 00 00       	push   0x800
c001e473:	68 d0 35 02 c0       	push   0xc00235d0
c001e478:	50                   	push   eax
c001e479:	e8 30 e9 fe ff       	call   c000cdae <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e47e:	83 c4 10             	add    esp,0x10
c001e481:	ba c4 36 02 c0       	mov    edx,0xc00236c4
c001e486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e48a:	89 10                	mov    DWORD PTR [eax],edx
c001e48c:	90                   	nop
c001e48d:	83 c4 0c             	add    esp,0xc
c001e490:	c3                   	ret    
c001e491:	90                   	nop

c001e492 <SATAPI::diskRemoved()>:
c001e492:	c3                   	ret    
c001e493:	90                   	nop

c001e494 <SATAPI::diskInserted()>:
c001e494:	83 ec 18             	sub    esp,0x18
c001e497:	68 dc 35 02 c0       	push   0xc00235dc
c001e49c:	e8 a8 c4 fe ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001e4a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4a5:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e4ac:	83 c4 1c             	add    esp,0x1c
c001e4af:	c3                   	ret    

c001e4b0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e4b0:	55                   	push   ebp
c001e4b1:	57                   	push   edi
c001e4b2:	56                   	push   esi
c001e4b3:	53                   	push   ebx
c001e4b4:	83 ec 34             	sub    esp,0x34
c001e4b7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e4bb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e4bf:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001e4c3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e4c7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001e4cb:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e4d1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e4d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e4db:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e4e1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e4e5:	83 c0 02             	add    eax,0x2
c001e4e8:	c1 e0 07             	shl    eax,0x7
c001e4eb:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e4ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e4f7:	c1 e0 07             	shl    eax,0x7
c001e4fa:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e4fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e502:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e50c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e510:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e516:	e8 21 e5 ff ff       	call   c001ca3c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e51b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e51f:	83 c4 10             	add    esp,0x10
c001e522:	b8 01 00 00 00       	mov    eax,0x1
c001e527:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e52c:	0f 84 53 02 00 00    	je     c001e785 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e532:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e538:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e53c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e53e:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e544:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e54a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e54e:	c1 e1 05             	shl    ecx,0x5
c001e551:	01 c8                	add    eax,ecx
c001e553:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e555:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e55b:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e561:	89 08                	mov    DWORD PTR [eax],ecx
c001e563:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e569:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e56f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e575:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e578:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e57b:	50                   	push   eax
c001e57c:	68 90 00 00 00       	push   0x90
c001e581:	6a 00                	push   0x0
c001e583:	53                   	push   ebx
c001e584:	e8 67 1f fe ff       	call   c00004f0 <memset>
c001e589:	b9 0c 00 00 00       	mov    ecx,0xc
c001e58e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e592:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e594:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e59a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e59e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e5a4:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e5a8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e5ac:	48                   	dec    eax
c001e5ad:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e5b2:	89 c1                	mov    ecx,eax
c001e5b4:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e5ba:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e5bf:	09 c8                	or     eax,ecx
c001e5c1:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e5c7:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e5cd:	83 c8 80             	or     eax,0xffffff80
c001e5d0:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e5d6:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e5d9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e5dd:	25 00 7f 00 00       	and    eax,0x7f00
c001e5e2:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e5e6:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e5eb:	66 89 03             	mov    WORD PTR [ebx],ax
c001e5ee:	89 d0                	mov    eax,edx
c001e5f0:	c1 ea 18             	shr    edx,0x18
c001e5f3:	c1 e8 10             	shr    eax,0x10
c001e5f6:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e5f9:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e5fc:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e600:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e603:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e607:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e60a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e60e:	83 c4 10             	add    esp,0x10
c001e611:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e615:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e619:	31 c0                	xor    eax,eax
c001e61b:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e621:	80 e1 88             	and    cl,0x88
c001e624:	74 0a                	je     c001e630 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e626:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e62b:	74 0a                	je     c001e637 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e62d:	40                   	inc    eax
c001e62e:	eb eb                	jmp    c001e61b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e630:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e635:	75 43                	jne    c001e67a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e637:	83 ec 0c             	sub    esp,0xc
c001e63a:	68 f4 35 02 c0       	push   0xc00235f4
c001e63f:	e8 05 c3 fe ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001e644:	58                   	pop    eax
c001e645:	5a                   	pop    edx
c001e646:	68 09 36 02 c0       	push   0xc0023609
c001e64b:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e651:	e8 54 a4 fe ff       	call   c0008aaa <VgaText::puts(char const*)>
c001e656:	59                   	pop    ecx
c001e657:	5b                   	pop    ebx
c001e658:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e65c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e662:	e8 6f e4 ff ff       	call   c001cad6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e667:	5e                   	pop    esi
c001e668:	5f                   	pop    edi
c001e669:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e66d:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e673:	e8 3e e4 ff ff       	call   c001cab6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e678:	eb 48                	jmp    c001e6c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e67a:	be 01 00 00 00       	mov    esi,0x1
c001e67f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e683:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e687:	d3 e6                	shl    esi,cl
c001e689:	c1 e7 07             	shl    edi,0x7
c001e68c:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e692:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e697:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e69b:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e6a1:	85 c6                	test   esi,eax
c001e6a3:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e6a9:	0f 84 a3 00 00 00    	je     c001e752 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e6af:	0f ba e0 1e          	bt     eax,0x1e
c001e6b3:	73 1a                	jae    c001e6cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e6b5:	83 ec 0c             	sub    esp,0xc
c001e6b8:	68 1b 36 02 c0       	push   0xc002361b
c001e6bd:	e8 87 c2 fe ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001e6c2:	83 c4 10             	add    esp,0x10
c001e6c5:	b8 01 00 00 00       	mov    eax,0x1
c001e6ca:	e9 b6 00 00 00       	jmp    c001e785 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e6cf:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e6d5:	83 f8 0d             	cmp    eax,0xd
c001e6d8:	77 0a                	ja     c001e6e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e6da:	83 ec 0c             	sub    esp,0xc
c001e6dd:	68 c8 00 00 00       	push   0xc8
c001e6e2:	eb 28                	jmp    c001e70c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e6e4:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e6ea:	83 f8 0d             	cmp    eax,0xd
c001e6ed:	77 0a                	ja     c001e6f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e6ef:	83 ec 0c             	sub    esp,0xc
c001e6f2:	68 58 02 00 00       	push   0x258
c001e6f7:	eb 13                	jmp    c001e70c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e6f9:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e6ff:	83 f8 06             	cmp    eax,0x6
c001e702:	77 10                	ja     c001e714 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e704:	83 ec 0c             	sub    esp,0xc
c001e707:	68 dc 05 00 00       	push   0x5dc
c001e70c:	e8 c7 7d ff ff       	call   c00164d8 <milliTenthSleep(unsigned int)>
c001e711:	83 c4 10             	add    esp,0x10
c001e714:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e718:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e71b:	75 06                	jne    c001e723 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e71d:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e721:	74 15                	je     c001e738 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e723:	83 fb 06             	cmp    ebx,0x6
c001e726:	77 10                	ja     c001e738 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e728:	83 ec 0c             	sub    esp,0xc
c001e72b:	68 c4 09 00 00       	push   0x9c4
c001e730:	e8 a3 7d ff ff       	call   c00164d8 <milliTenthSleep(unsigned int)>
c001e735:	83 c4 10             	add    esp,0x10
c001e738:	43                   	inc    ebx
c001e739:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e73f:	0f 85 56 ff ff ff    	jne    c001e69b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e745:	83 ec 0c             	sub    esp,0xc
c001e748:	68 2e 36 02 c0       	push   0xc002362e
c001e74d:	e9 6b ff ff ff       	jmp    c001e6bd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e752:	0f ba e0 1e          	bt     eax,0x1e
c001e756:	73 0d                	jae    c001e765 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e758:	83 ec 0c             	sub    esp,0xc
c001e75b:	68 42 36 02 c0       	push   0xc0023642
c001e760:	e9 58 ff ff ff       	jmp    c001e6bd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e765:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e76a:	74 17                	je     c001e783 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e76c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e771:	74 10                	je     c001e783 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e773:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e779:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e77d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e781:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e783:	31 c0                	xor    eax,eax
c001e785:	83 c4 2c             	add    esp,0x2c
c001e788:	5b                   	pop    ebx
c001e789:	5e                   	pop    esi
c001e78a:	5f                   	pop    edi
c001e78b:	5d                   	pop    ebp
c001e78c:	c3                   	ret    
c001e78d:	90                   	nop

c001e78e <SATAPI::eject()>:
c001e78e:	57                   	push   edi
c001e78f:	b9 03 00 00 00       	mov    ecx,0x3
c001e794:	83 ec 18             	sub    esp,0x18
c001e797:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e79b:	fc                   	cld    
c001e79c:	31 c0                	xor    eax,eax
c001e79e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e7a0:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e7a5:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e7aa:	50                   	push   eax
c001e7ab:	6a 00                	push   0x0
c001e7ad:	6a 00                	push   0x0
c001e7af:	6a 00                	push   0x0
c001e7b1:	6a 00                	push   0x0
c001e7b3:	6a 02                	push   0x2
c001e7b5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e7b9:	50                   	push   eax
c001e7ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e7be:	e8 ed fc ff ff       	call   c001e4b0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e7c3:	31 c0                	xor    eax,eax
c001e7c5:	83 c4 38             	add    esp,0x38
c001e7c8:	5f                   	pop    edi
c001e7c9:	c3                   	ret    

c001e7ca <SATAPI::detectMedia()>:
c001e7ca:	53                   	push   ebx
c001e7cb:	83 ec 14             	sub    esp,0x14
c001e7ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e7d2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e7d8:	e8 4f ff fe ff       	call   c000e72c <VCache::writeWriteBuffer()>
c001e7dd:	59                   	pop    ecx
c001e7de:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e7e4:	e8 33 ff fe ff       	call   c000e71c <VCache::invalidateReadBuffer()>
c001e7e9:	c7 04 24 57 36 02 c0 	mov    DWORD PTR [esp],0xc0023657
c001e7f0:	e8 54 c1 fe ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001e7f5:	83 c4 10             	add    esp,0x10
c001e7f8:	31 c0                	xor    eax,eax
c001e7fa:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e801:	85 d2                	test   edx,edx
c001e803:	74 0f                	je     c001e814 <SATAPI::detectMedia()+0x4a>
c001e805:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e80b:	75 07                	jne    c001e814 <SATAPI::detectMedia()+0x4a>
c001e80d:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e814:	40                   	inc    eax
c001e815:	83 f8 1a             	cmp    eax,0x1a
c001e818:	75 e0                	jne    c001e7fa <SATAPI::detectMedia()+0x30>
c001e81a:	83 c4 08             	add    esp,0x8
c001e81d:	5b                   	pop    ebx
c001e81e:	c3                   	ret    
c001e81f:	90                   	nop

c001e820 <SATAPI::open(int, int, void*)>:
c001e820:	56                   	push   esi
c001e821:	53                   	push   ebx
c001e822:	51                   	push   ecx
c001e823:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e827:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e82b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e835:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e83b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e845:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e849:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e853:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e859:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e860:	e8 5e 95 fe ff       	call   c0007dc3 <Phys::allocatePage()>
c001e865:	89 c6                	mov    esi,eax
c001e867:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e86d:	81 c6 00 10 00 00    	add    esi,0x1000
c001e873:	e8 4b 95 fe ff       	call   c0007dc3 <Phys::allocatePage()>
c001e878:	39 c6                	cmp    esi,eax
c001e87a:	74 10                	je     c001e88c <SATAPI::open(int, int, void*)+0x6c>
c001e87c:	83 ec 0c             	sub    esp,0xc
c001e87f:	68 6c 36 02 c0       	push   0xc002366c
c001e884:	e8 3a 2e ff ff       	call   c00116c3 <KePanic(char const*)>
c001e889:	83 c4 10             	add    esp,0x10
c001e88c:	83 ec 0c             	sub    esp,0xc
c001e88f:	6a 02                	push   0x2
c001e891:	e8 7b ad fe ff       	call   c0009611 <Virt::allocateKernelVirtualPages(int)>
c001e896:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e89c:	6a 03                	push   0x3
c001e89e:	50                   	push   eax
c001e89f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e8a5:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e8ab:	e8 74 b4 fe ff       	call   c0009d24 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e8b0:	83 c4 14             	add    esp,0x14
c001e8b3:	68 78 01 00 00       	push   0x178
c001e8b8:	e8 fd 91 fe ff       	call   c0007aba <malloc>
c001e8bd:	83 c4 0c             	add    esp,0xc
c001e8c0:	89 c6                	mov    esi,eax
c001e8c2:	6a 00                	push   0x0
c001e8c4:	68 ff ff ff 7f       	push   0x7fffffff
c001e8c9:	6a 00                	push   0x0
c001e8cb:	6a 00                	push   0x0
c001e8cd:	53                   	push   ebx
c001e8ce:	68 82 36 02 c0       	push   0xc0023682
c001e8d3:	50                   	push   eax
c001e8d4:	e8 af f2 fe ff       	call   c000db88 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e8d9:	83 c4 14             	add    esp,0x14
c001e8dc:	56                   	push   esi
c001e8dd:	e8 66 f3 fe ff       	call   c000dc48 <LogicalDisk::assignDriveLetter()>
c001e8e2:	5a                   	pop    edx
c001e8e3:	0f be c0             	movsx  eax,al
c001e8e6:	59                   	pop    ecx
c001e8e7:	50                   	push   eax
c001e8e8:	68 d4 34 02 c0       	push   0xc00234d4
c001e8ed:	e8 57 c0 fe ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001e8f2:	58                   	pop    eax
c001e8f3:	5a                   	pop    edx
c001e8f4:	56                   	push   esi
c001e8f5:	53                   	push   ebx
c001e8f6:	e8 cf e0 fe ff       	call   c000c9ca <Device::addChild(Device*)>
c001e8fb:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e901:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e904:	e8 0d e5 fe ff       	call   c000ce16 <PhysicalDisk::startCache()>
c001e909:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e910:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e913:	e8 b2 fe ff ff       	call   c001e7ca <SATAPI::detectMedia()>
c001e918:	83 c4 14             	add    esp,0x14
c001e91b:	31 c0                	xor    eax,eax
c001e91d:	5b                   	pop    ebx
c001e91e:	5e                   	pop    esi
c001e91f:	c3                   	ret    

c001e920 <SATAPI::read(unsigned long long, int, void*)>:
c001e920:	57                   	push   edi
c001e921:	56                   	push   esi
c001e922:	53                   	push   ebx
c001e923:	83 ec 30             	sub    esp,0x30
c001e926:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e92a:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e92e:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e932:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e936:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e93a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e93e:	83 fe 04             	cmp    esi,0x4
c001e941:	7e 10                	jle    c001e953 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e943:	83 ec 0c             	sub    esp,0xc
c001e946:	68 90 36 02 c0       	push   0xc0023690
c001e94b:	e8 73 2d ff ff       	call   c00116c3 <KePanic(char const*)>
c001e950:	83 c4 10             	add    esp,0x10
c001e953:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e959:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e95f:	51                   	push   ecx
c001e960:	50                   	push   eax
c001e961:	83 c0 02             	add    eax,0x2
c001e964:	c1 e0 07             	shl    eax,0x7
c001e967:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e96d:	50                   	push   eax
c001e96e:	52                   	push   edx
c001e96f:	e8 8c e1 ff ff       	call   c001cb00 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e974:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e978:	b9 03 00 00 00       	mov    ecx,0x3
c001e97d:	fc                   	cld    
c001e97e:	31 c0                	xor    eax,eax
c001e980:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e982:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e987:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e98c:	83 c4 0c             	add    esp,0xc
c001e98f:	6a 00                	push   0x0
c001e991:	6a 00                	push   0x0
c001e993:	6a 00                	push   0x0
c001e995:	6a 00                	push   0x0
c001e997:	6a 02                	push   0x2
c001e999:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e99d:	50                   	push   eax
c001e99e:	53                   	push   ebx
c001e99f:	e8 0c fb ff ff       	call   c001e4b0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e9a4:	83 c4 20             	add    esp,0x20
c001e9a7:	85 c0                	test   eax,eax
c001e9a9:	75 44                	jne    c001e9ef <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e9ab:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e9af:	b9 03 00 00 00       	mov    ecx,0x3
c001e9b4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e9b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9ba:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e9bf:	0f c8                	bswap  eax
c001e9c1:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e9c5:	89 f0                	mov    eax,esi
c001e9c7:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e9cb:	50                   	push   eax
c001e9cc:	56                   	push   esi
c001e9cd:	c1 e6 0b             	shl    esi,0xb
c001e9d0:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e9d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e9d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e9dc:	56                   	push   esi
c001e9dd:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e9e1:	50                   	push   eax
c001e9e2:	53                   	push   ebx
c001e9e3:	e8 c8 fa ff ff       	call   c001e4b0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e9e8:	83 c4 20             	add    esp,0x20
c001e9eb:	85 c0                	test   eax,eax
c001e9ed:	74 14                	je     c001ea03 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e9ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e9f3:	83 ec 0c             	sub    esp,0xc
c001e9f6:	53                   	push   ebx
c001e9f7:	e8 ce fd ff ff       	call   c001e7ca <SATAPI::detectMedia()>
c001e9fc:	83 c4 10             	add    esp,0x10
c001e9ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ea03:	83 c4 30             	add    esp,0x30
c001ea06:	5b                   	pop    ebx
c001ea07:	5e                   	pop    esi
c001ea08:	5f                   	pop    edi
c001ea09:	c3                   	ret    

c001ea0a <IOAPIC::close(int, int, void*)>:
c001ea0a:	b8 00 00 00 00       	mov    eax,0x0
c001ea0f:	c3                   	ret    

c001ea10 <apicGetBase()>:
c001ea10:	55                   	push   ebp
c001ea11:	89 e5                	mov    ebp,esp
c001ea13:	83 ec 18             	sub    esp,0x18
c001ea16:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ea1b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ea21:	83 e0 08             	and    eax,0x8
c001ea24:	0f b6 c0             	movzx  eax,al
c001ea27:	85 c0                	test   eax,eax
c001ea29:	75 07                	jne    c001ea32 <apicGetBase()+0x22>
c001ea2b:	b8 00 00 00 00       	mov    eax,0x0
c001ea30:	eb 21                	jmp    c001ea53 <apicGetBase()+0x43>
c001ea32:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ea37:	83 ec 08             	sub    esp,0x8
c001ea3a:	6a 1b                	push   0x1b
c001ea3c:	50                   	push   eax
c001ea3d:	e8 82 86 fe ff       	call   c00070c4 <Computer::rdmsr(unsigned int)>
c001ea42:	83 c4 10             	add    esp,0x10
c001ea45:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ea48:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001ea4b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea4e:	25 00 00 ff ff       	and    eax,0xffff0000
c001ea53:	c9                   	leave  
c001ea54:	c3                   	ret    
c001ea55:	90                   	nop

c001ea56 <IOAPIC::IOAPIC()>:
c001ea56:	83 ec 0c             	sub    esp,0xc
c001ea59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea5d:	83 ec 08             	sub    esp,0x8
c001ea60:	68 f4 36 02 c0       	push   0xc00236f4
c001ea65:	50                   	push   eax
c001ea66:	e8 c1 e0 fe ff       	call   c000cb2c <Device::Device(char const*)>
c001ea6b:	83 c4 10             	add    esp,0x10
c001ea6e:	ba 04 37 02 c0       	mov    edx,0xc0023704
c001ea73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea77:	89 10                	mov    DWORD PTR [eax],edx
c001ea79:	90                   	nop
c001ea7a:	83 c4 0c             	add    esp,0xc
c001ea7d:	c3                   	ret    

c001ea7e <apicOpen()>:
c001ea7e:	55                   	push   ebp
c001ea7f:	89 e5                	mov    ebp,esp
c001ea81:	53                   	push   ebx
c001ea82:	83 ec 34             	sub    esp,0x34
c001ea85:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001ea8a:	83 f0 01             	xor    eax,0x1
c001ea8d:	0f b6 c0             	movzx  eax,al
c001ea90:	85 c0                	test   eax,eax
c001ea92:	0f 84 a3 00 00 00    	je     c001eb3b <apicOpen()+0xbd>
c001ea98:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ea9c:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001eaa1:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001eaa5:	0f b6 c0             	movzx  eax,al
c001eaa8:	39 c2                	cmp    edx,eax
c001eaaa:	0f 83 84 00 00 00    	jae    c001eb34 <apicOpen()+0xb6>
c001eab0:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001eab7:	83 ec 0c             	sub    esp,0xc
c001eaba:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001eabd:	e8 f8 8f fe ff       	call   c0007aba <malloc>
c001eac2:	83 c4 10             	add    esp,0x10
c001eac5:	89 c3                	mov    ebx,eax
c001eac7:	83 ec 0c             	sub    esp,0xc
c001eaca:	53                   	push   ebx
c001eacb:	e8 86 ff ff ff       	call   c001ea56 <IOAPIC::IOAPIC()>
c001ead0:	83 c4 10             	add    esp,0x10
c001ead3:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001ead6:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001eada:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001eadd:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001eae4:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001eae9:	83 c0 01             	add    eax,0x1
c001eaec:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001eaf1:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001eaf6:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001eafc:	83 ec 08             	sub    esp,0x8
c001eaff:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eb02:	50                   	push   eax
c001eb03:	e8 c2 de fe ff       	call   c000c9ca <Device::addChild(Device*)>
c001eb08:	83 c4 10             	add    esp,0x10
c001eb0b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001eb0e:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb10:	83 c0 08             	add    eax,0x8
c001eb13:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb15:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001eb19:	6a 00                	push   0x0
c001eb1b:	6a 00                	push   0x0
c001eb1d:	52                   	push   edx
c001eb1e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eb21:	ff d0                	call   eax
c001eb23:	83 c4 10             	add    esp,0x10
c001eb26:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001eb29:	83 c0 01             	add    eax,0x1
c001eb2c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001eb2f:	e9 68 ff ff ff       	jmp    c001ea9c <apicOpen()+0x1e>
c001eb34:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001eb3b:	e8 d0 fe ff ff       	call   c001ea10 <apicGetBase()>
c001eb40:	05 f0 00 00 00       	add    eax,0xf0
c001eb45:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001eb48:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eb4b:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb4d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001eb50:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001eb57:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001eb5e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eb61:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001eb64:	89 10                	mov    DWORD PTR [eax],edx
c001eb66:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001eb6d:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001eb72:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001eb75:	7d 7c                	jge    c001ebf3 <apicOpen()+0x175>
c001eb77:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb7a:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb81:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001eb84:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb87:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb8e:	c1 e8 08             	shr    eax,0x8
c001eb91:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001eb95:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb98:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb9f:	c1 e8 18             	shr    eax,0x18
c001eba2:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001eba5:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001eba9:	3d ff 00 00 00       	cmp    eax,0xff
c001ebae:	75 3a                	jne    c001ebea <apicOpen()+0x16c>
c001ebb0:	e8 5b fe ff ff       	call   c001ea10 <apicGetBase()>
c001ebb5:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001ebb9:	83 fa 01             	cmp    edx,0x1
c001ebbc:	75 07                	jne    c001ebc5 <apicOpen()+0x147>
c001ebbe:	ba 60 03 00 00       	mov    edx,0x360
c001ebc3:	eb 05                	jmp    c001ebca <apicOpen()+0x14c>
c001ebc5:	ba 50 03 00 00       	mov    edx,0x350
c001ebca:	01 d0                	add    eax,edx
c001ebcc:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ebcf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ebd2:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebd4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ebd7:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ebde:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ebe2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ebe5:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ebe8:	89 10                	mov    DWORD PTR [eax],edx
c001ebea:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001ebee:	e9 7a ff ff ff       	jmp    c001eb6d <apicOpen()+0xef>
c001ebf3:	90                   	nop
c001ebf4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ebf7:	c9                   	leave  
c001ebf8:	c3                   	ret    
c001ebf9:	90                   	nop

c001ebfa <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ebfa:	55                   	push   ebp
c001ebfb:	89 e5                	mov    ebp,esp
c001ebfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec00:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ec06:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ec09:	72 1d                	jb     c001ec28 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ec0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec0e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ec14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec17:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ec1d:	01 d0                	add    eax,edx
c001ec1f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ec22:	73 04                	jae    c001ec28 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ec24:	b0 01                	mov    al,0x1
c001ec26:	eb 02                	jmp    c001ec2a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ec28:	b0 00                	mov    al,0x0
c001ec2a:	5d                   	pop    ebp
c001ec2b:	c3                   	ret    

c001ec2c <IOAPIC::read(int)>:
c001ec2c:	55                   	push   ebp
c001ec2d:	89 e5                	mov    ebp,esp
c001ec2f:	83 ec 10             	sub    esp,0x10
c001ec32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec35:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ec3b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ec3e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec41:	0f b6 d0             	movzx  edx,al
c001ec44:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec47:	89 10                	mov    DWORD PTR [eax],edx
c001ec49:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec4c:	83 c0 10             	add    eax,0x10
c001ec4f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec51:	c9                   	leave  
c001ec52:	c3                   	ret    
c001ec53:	90                   	nop

c001ec54 <IOAPIC::open(int, int, void*)>:
c001ec54:	55                   	push   ebp
c001ec55:	89 e5                	mov    ebp,esp
c001ec57:	57                   	push   edi
c001ec58:	56                   	push   esi
c001ec59:	53                   	push   ebx
c001ec5a:	83 ec 04             	sub    esp,0x4
c001ec5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec60:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ec63:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ec69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec6c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec72:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001ec79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec7c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ec82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec85:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec8b:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001ec92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec95:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ec9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec9e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001eca4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eca7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ecad:	0f b6 f0             	movzx  esi,al
c001ecb0:	89 d0                	mov    eax,edx
c001ecb2:	ba 00 00 00 00       	mov    edx,0x0
c001ecb7:	89 c7                	mov    edi,eax
c001ecb9:	83 e7 ff             	and    edi,0xffffffff
c001ecbc:	89 f9                	mov    ecx,edi
c001ecbe:	0f b6 da             	movzx  ebx,dl
c001ecc1:	89 c8                	mov    eax,ecx
c001ecc3:	89 da                	mov    edx,ebx
c001ecc5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ecc8:	8d 5e 08             	lea    ebx,[esi+0x8]
c001eccb:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001eccf:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ecd3:	83 e0 00             	and    eax,0x0
c001ecd6:	09 d0                	or     eax,edx
c001ecd8:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ecdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecdf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ece5:	8d 50 01             	lea    edx,[eax+0x1]
c001ece8:	88 d1                	mov    cl,dl
c001ecea:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001eced:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ecf3:	0f b6 d0             	movzx  edx,al
c001ecf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecf9:	83 c2 08             	add    edx,0x8
c001ecfc:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ed00:	0f b6 c9             	movzx  ecx,cl
c001ed03:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ed09:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ed0d:	6a 01                	push   0x1
c001ed0f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed12:	e8 15 ff ff ff       	call   c001ec2c <IOAPIC::read(int)>
c001ed17:	83 c4 08             	add    esp,0x8
c001ed1a:	c1 f8 10             	sar    eax,0x10
c001ed1d:	0f b6 c0             	movzx  eax,al
c001ed20:	8d 50 01             	lea    edx,[eax+0x1]
c001ed23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ed26:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ed2c:	b8 00 00 00 00       	mov    eax,0x0
c001ed31:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ed34:	5b                   	pop    ebx
c001ed35:	5e                   	pop    esi
c001ed36:	5f                   	pop    edi
c001ed37:	5d                   	pop    ebp
c001ed38:	c3                   	ret    
c001ed39:	90                   	nop

c001ed3a <IOAPIC::write(int, int)>:
c001ed3a:	55                   	push   ebp
c001ed3b:	89 e5                	mov    ebp,esp
c001ed3d:	83 ec 10             	sub    esp,0x10
c001ed40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ed43:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ed49:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ed4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed4f:	0f b6 d0             	movzx  edx,al
c001ed52:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ed55:	89 10                	mov    DWORD PTR [eax],edx
c001ed57:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ed5a:	8d 50 10             	lea    edx,[eax+0x10]
c001ed5d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ed60:	89 02                	mov    DWORD PTR [edx],eax
c001ed62:	90                   	nop
c001ed63:	c9                   	leave  
c001ed64:	c3                   	ret    
c001ed65:	90                   	nop

c001ed66 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ed66:	55                   	push   ebp
c001ed67:	89 e5                	mov    ebp,esp
c001ed69:	53                   	push   ebx
c001ed6a:	83 ec 2c             	sub    esp,0x2c
c001ed6d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed70:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ed73:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ed76:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ed79:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ed7c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ed7f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ed82:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ed85:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ed88:	88 d8                	mov    al,bl
c001ed8a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ed8d:	88 c8                	mov    al,cl
c001ed8f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ed92:	88 d0                	mov    al,dl
c001ed94:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ed97:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ed9b:	83 c0 08             	add    eax,0x8
c001ed9e:	01 c0                	add    eax,eax
c001eda0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001eda3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001eda7:	83 c0 08             	add    eax,0x8
c001edaa:	01 c0                	add    eax,eax
c001edac:	83 c0 01             	add    eax,0x1
c001edaf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001edb2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001edb5:	50                   	push   eax
c001edb6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001edb9:	e8 6e fe ff ff       	call   c001ec2c <IOAPIC::read(int)>
c001edbe:	83 c4 08             	add    esp,0x8
c001edc1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001edc4:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001edcb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001edce:	c1 e0 18             	shl    eax,0x18
c001edd1:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001edd4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001edd7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001edda:	52                   	push   edx
c001eddb:	50                   	push   eax
c001eddc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eddf:	e8 56 ff ff ff       	call   c001ed3a <IOAPIC::write(int, int)>
c001ede4:	83 c4 0c             	add    esp,0xc
c001ede7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001edea:	50                   	push   eax
c001edeb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001edee:	e8 39 fe ff ff       	call   c001ec2c <IOAPIC::read(int)>
c001edf3:	83 c4 08             	add    esp,0x8
c001edf6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001edf9:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ee00:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ee07:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ee0e:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ee12:	85 c0                	test   eax,eax
c001ee14:	74 09                	je     c001ee1f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001ee16:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ee1d:	eb 07                	jmp    c001ee26 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001ee1f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ee26:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ee2a:	85 c0                	test   eax,eax
c001ee2c:	74 09                	je     c001ee37 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ee2e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ee35:	eb 07                	jmp    c001ee3e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001ee37:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ee3e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ee45:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ee49:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ee4c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ee4f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee52:	52                   	push   edx
c001ee53:	50                   	push   eax
c001ee54:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ee57:	e8 de fe ff ff       	call   c001ed3a <IOAPIC::write(int, int)>
c001ee5c:	83 c4 0c             	add    esp,0xc
c001ee5f:	90                   	nop
c001ee60:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ee63:	c9                   	leave  
c001ee64:	c3                   	ret    
c001ee65:	66 90                	xchg   ax,ax
c001ee67:	90                   	nop

c001ee68 <APICTimer::close(int, int, void*)>:
c001ee68:	b8 00 00 00 00       	mov    eax,0x0
c001ee6d:	c3                   	ret    
c001ee6e:	66 90                	xchg   ax,ax

c001ee70 <apicTimerHandler(regs*, void*)>:
c001ee70:	83 ec 0c             	sub    esp,0xc
c001ee73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee77:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ee79:	b8 10 27 00 00       	mov    eax,0x2710
c001ee7e:	ba 00 00 00 00       	mov    edx,0x0
c001ee83:	f7 f1                	div    ecx
c001ee85:	83 ec 0c             	sub    esp,0xc
c001ee88:	50                   	push   eax
c001ee89:	e8 b6 f5 fe ff       	call   c000e444 <timerHandler(unsigned int)>
c001ee8e:	83 c4 10             	add    esp,0x10
c001ee91:	90                   	nop
c001ee92:	83 c4 0c             	add    esp,0xc
c001ee95:	c3                   	ret    
c001ee96:	66 90                	xchg   ax,ax

c001ee98 <APICTimer::open(int, int, void*)>:
c001ee98:	83 ec 0c             	sub    esp,0xc
c001ee9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee9f:	8b 00                	mov    eax,DWORD PTR [eax]
c001eea1:	83 c0 24             	add    eax,0x24
c001eea4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eea6:	83 ec 08             	sub    esp,0x8
c001eea9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eead:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeb1:	ff d0                	call   eax
c001eeb3:	83 c4 10             	add    esp,0x10
c001eeb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eebe:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eec8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eecc:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001eed2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eed6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001eedc:	83 ec 0c             	sub    esp,0xc
c001eedf:	51                   	push   ecx
c001eee0:	6a 01                	push   0x1
c001eee2:	68 70 ee 01 c0       	push   0xc001ee70
c001eee7:	52                   	push   edx
c001eee8:	50                   	push   eax
c001eee9:	e8 88 da fe ff       	call   c000c976 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eeee:	83 c4 20             	add    esp,0x20
c001eef1:	89 c2                	mov    edx,eax
c001eef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eefd:	b8 00 00 00 00       	mov    eax,0x0
c001ef02:	83 c4 0c             	add    esp,0xc
c001ef05:	c3                   	ret    
c001ef06:	66 90                	xchg   ax,ax

c001ef08 <APICTimer::write(int)>:
c001ef08:	83 ec 0c             	sub    esp,0xc
c001ef0b:	83 ec 0c             	sub    esp,0xc
c001ef0e:	68 28 37 02 c0       	push   0xc0023728
c001ef13:	e8 ab 27 ff ff       	call   c00116c3 <KePanic(char const*)>
c001ef18:	83 c4 10             	add    esp,0x10
c001ef1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef1f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef23:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ef29:	90                   	nop
c001ef2a:	83 c4 0c             	add    esp,0xc
c001ef2d:	c3                   	ret    
c001ef2e:	66 90                	xchg   ax,ax

c001ef30 <APICTimer::APICTimer()>:
c001ef30:	83 ec 0c             	sub    esp,0xc
c001ef33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef37:	83 ec 08             	sub    esp,0x8
c001ef3a:	68 38 37 02 c0       	push   0xc0023738
c001ef3f:	50                   	push   eax
c001ef40:	e8 33 f4 fe ff       	call   c000e378 <Timer::Timer(char const*)>
c001ef45:	83 c4 10             	add    esp,0x10
c001ef48:	ba 4c 37 02 c0       	mov    edx,0xc002374c
c001ef4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef51:	89 10                	mov    DWORD PTR [eax],edx
c001ef53:	90                   	nop
c001ef54:	83 c4 0c             	add    esp,0xc
c001ef57:	c3                   	ret    

c001ef58 <PIT::write(int)>:
c001ef58:	83 ec 10             	sub    esp,0x10
c001ef5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ef5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef63:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ef69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef6d:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001ef72:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ef77:	89 c2                	mov    edx,eax
c001ef79:	c1 fa 1f             	sar    edx,0x1f
c001ef7c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ef80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ef84:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ef8b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ef90:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ef94:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ef99:	ee                   	out    dx,al
c001ef9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef9e:	0f b6 c0             	movzx  eax,al
c001efa1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001efa8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001efac:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001efb0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001efb5:	ee                   	out    dx,al
c001efb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efba:	c1 f8 08             	sar    eax,0x8
c001efbd:	0f b6 c0             	movzx  eax,al
c001efc0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001efc7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001efcb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001efcf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001efd4:	ee                   	out    dx,al
c001efd5:	90                   	nop
c001efd6:	83 c4 10             	add    esp,0x10
c001efd9:	c3                   	ret    
c001efda:	66 90                	xchg   ax,ax

c001efdc <pitHandler(regs*, void*)>:
c001efdc:	83 ec 0c             	sub    esp,0xc
c001efdf:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001efe5:	b8 10 27 00 00       	mov    eax,0x2710
c001efea:	89 c2                	mov    edx,eax
c001efec:	c1 fa 1f             	sar    edx,0x1f
c001efef:	f7 f9                	idiv   ecx
c001eff1:	83 ec 0c             	sub    esp,0xc
c001eff4:	50                   	push   eax
c001eff5:	e8 4a f4 fe ff       	call   c000e444 <timerHandler(unsigned int)>
c001effa:	83 c4 10             	add    esp,0x10
c001effd:	90                   	nop
c001effe:	83 c4 0c             	add    esp,0xc
c001f001:	c3                   	ret    
c001f002:	66 90                	xchg   ax,ax

c001f004 <PIT::open(int, int, void*)>:
c001f004:	83 ec 0c             	sub    esp,0xc
c001f007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f00b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f00d:	83 c0 24             	add    eax,0x24
c001f010:	8b 00                	mov    eax,DWORD PTR [eax]
c001f012:	83 ec 08             	sub    esp,0x8
c001f015:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f019:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f01d:	ff d0                	call   eax
c001f01f:	83 c4 10             	add    esp,0x10
c001f022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f026:	83 ec 0c             	sub    esp,0xc
c001f029:	6a 00                	push   0x0
c001f02b:	6a 01                	push   0x1
c001f02d:	68 dc ef 01 c0       	push   0xc001efdc
c001f032:	6a 00                	push   0x0
c001f034:	50                   	push   eax
c001f035:	e8 3c d9 fe ff       	call   c000c976 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f03a:	83 c4 20             	add    esp,0x20
c001f03d:	89 c2                	mov    edx,eax
c001f03f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f043:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f049:	b8 00 00 00 00       	mov    eax,0x0
c001f04e:	83 c4 0c             	add    esp,0xc
c001f051:	c3                   	ret    
c001f052:	66 90                	xchg   ax,ax

c001f054 <PIT::close(int, int, void*)>:
c001f054:	83 ec 0c             	sub    esp,0xc
c001f057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f05b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f069:	6a 01                	push   0x1
c001f06b:	68 dc ef 01 c0       	push   0xc001efdc
c001f070:	6a 00                	push   0x0
c001f072:	50                   	push   eax
c001f073:	e8 34 d9 fe ff       	call   c000c9ac <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f078:	83 c4 10             	add    esp,0x10
c001f07b:	b8 00 00 00 00       	mov    eax,0x0
c001f080:	83 c4 0c             	add    esp,0xc
c001f083:	c3                   	ret    

c001f084 <PIT::PIT()>:
c001f084:	83 ec 0c             	sub    esp,0xc
c001f087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f08b:	83 ec 08             	sub    esp,0x8
c001f08e:	68 74 37 02 c0       	push   0xc0023774
c001f093:	50                   	push   eax
c001f094:	e8 df f2 fe ff       	call   c000e378 <Timer::Timer(char const*)>
c001f099:	83 c4 10             	add    esp,0x10
c001f09c:	ba 9c 37 02 c0       	mov    edx,0xc002379c
c001f0a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0a5:	89 10                	mov    DWORD PTR [eax],edx
c001f0a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f0b1:	0f b6 d0             	movzx  edx,al
c001f0b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0b8:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f0bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f0c9:	0f b6 d0             	movzx  edx,al
c001f0cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0d0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f0d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0d9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f0df:	8d 50 01             	lea    edx,[eax+0x1]
c001f0e2:	88 d1                	mov    cl,dl
c001f0e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f0e8:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f0ee:	0f b6 d0             	movzx  edx,al
c001f0f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0f5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f0f9:	83 e1 3f             	and    ecx,0x3f
c001f0fc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f100:	90                   	nop
c001f101:	83 c4 0c             	add    esp,0xc
c001f104:	c3                   	ret    
c001f105:	66 90                	xchg   ax,ax
c001f107:	66 90                	xchg   ax,ax
c001f109:	66 90                	xchg   ax,ax
c001f10b:	66 90                	xchg   ax,ax
c001f10d:	66 90                	xchg   ax,ax
c001f10f:	90                   	nop

c001f110 <avxDetect>:
c001f110:	b8 01 00 00 00       	mov    eax,0x1
c001f115:	0f a2                	cpuid  
c001f117:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f11d:	74 15                	je     c001f134 <avxDetect.noAVX>
c001f11f:	b8 01 00 00 00       	mov    eax,0x1
c001f124:	0f a2                	cpuid  
c001f126:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f12c:	74 06                	je     c001f134 <avxDetect.noAVX>
c001f12e:	b8 01 00 00 00       	mov    eax,0x1
c001f133:	c3                   	ret    

c001f134 <avxDetect.noAVX>:
c001f134:	b8 00 00 00 00       	mov    eax,0x0
c001f139:	c3                   	ret    

c001f13a <avxSave>:
c001f13a:	53                   	push   ebx
c001f13b:	52                   	push   edx
c001f13c:	31 c0                	xor    eax,eax
c001f13e:	48                   	dec    eax
c001f13f:	89 c2                	mov    edx,eax
c001f141:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f145:	0f ae 23             	xsave  [ebx]
c001f148:	5a                   	pop    edx
c001f149:	5b                   	pop    ebx
c001f14a:	c3                   	ret    

c001f14b <avxLoad>:
c001f14b:	53                   	push   ebx
c001f14c:	52                   	push   edx
c001f14d:	31 c0                	xor    eax,eax
c001f14f:	48                   	dec    eax
c001f150:	89 c2                	mov    edx,eax
c001f152:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f156:	0f ae 2b             	xrstor [ebx]
c001f159:	5a                   	pop    edx
c001f15a:	5b                   	pop    ebx
c001f15b:	c3                   	ret    

c001f15c <avxInit>:
c001f15c:	e8 67 03 00 00       	call   c001f4c8 <sseInit>
c001f161:	50                   	push   eax
c001f162:	51                   	push   ecx
c001f163:	0f 20 e0             	mov    eax,cr4
c001f166:	0d 00 00 04 00       	or     eax,0x40000
c001f16b:	0f 22 e0             	mov    cr4,eax
c001f16e:	31 c9                	xor    ecx,ecx
c001f170:	0f 01 d0             	xgetbv 
c001f173:	0d 07 00 00 00       	or     eax,0x7
c001f178:	0f 01 d1             	xsetbv 
c001f17b:	59                   	pop    ecx
c001f17c:	58                   	pop    eax
c001f17d:	c3                   	ret    

c001f17e <avxClose>:
c001f17e:	c3                   	ret    

c001f17f <wouldSheSayYes>:
c001f17f:	c3                   	ret    
c001f180:	49                   	dec    ecx
c001f181:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f185:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f189:	75 20                	jne    c001f1ab <isr0+0xb>
c001f18b:	4e                   	dec    esi
c001f18c:	79 61                	jns    c001f1ef <isr7+0x3>
c001f18e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f193:	66 90                	xchg   ax,ax
c001f195:	66 90                	xchg   ax,ax
c001f197:	66 90                	xchg   ax,ax
c001f199:	66 90                	xchg   ax,ax
c001f19b:	66 90                	xchg   ax,ax
c001f19d:	66 90                	xchg   ax,ax
c001f19f:	90                   	nop

c001f1a0 <isr0>:
c001f1a0:	fa                   	cli    
c001f1a1:	68 00 00 00 00       	push   0x0
c001f1a6:	68 00 00 00 00       	push   0x0
c001f1ab:	e9 56 01 00 00       	jmp    c001f306 <int_common_stub>

c001f1b0 <isr1>:
c001f1b0:	fa                   	cli    
c001f1b1:	6a 00                	push   0x0
c001f1b3:	6a 01                	push   0x1
c001f1b5:	e9 4c 01 00 00       	jmp    c001f306 <int_common_stub>

c001f1ba <isr2>:
c001f1ba:	fa                   	cli    
c001f1bb:	6a 00                	push   0x0
c001f1bd:	6a 02                	push   0x2
c001f1bf:	e9 42 01 00 00       	jmp    c001f306 <int_common_stub>

c001f1c4 <isr3>:
c001f1c4:	fa                   	cli    
c001f1c5:	6a 00                	push   0x0
c001f1c7:	6a 03                	push   0x3
c001f1c9:	e9 38 01 00 00       	jmp    c001f306 <int_common_stub>

c001f1ce <isr4>:
c001f1ce:	fa                   	cli    
c001f1cf:	6a 00                	push   0x0
c001f1d1:	6a 04                	push   0x4
c001f1d3:	e9 2e 01 00 00       	jmp    c001f306 <int_common_stub>

c001f1d8 <isr5>:
c001f1d8:	fa                   	cli    
c001f1d9:	6a 00                	push   0x0
c001f1db:	6a 05                	push   0x5
c001f1dd:	e9 24 01 00 00       	jmp    c001f306 <int_common_stub>

c001f1e2 <isr6>:
c001f1e2:	fa                   	cli    
c001f1e3:	6a 00                	push   0x0
c001f1e5:	6a 06                	push   0x6
c001f1e7:	e9 1a 01 00 00       	jmp    c001f306 <int_common_stub>

c001f1ec <isr7>:
c001f1ec:	fa                   	cli    
c001f1ed:	6a 00                	push   0x0
c001f1ef:	6a 07                	push   0x7
c001f1f1:	e9 10 01 00 00       	jmp    c001f306 <int_common_stub>

c001f1f6 <isr8>:
c001f1f6:	fa                   	cli    
c001f1f7:	6a 08                	push   0x8
c001f1f9:	e9 08 01 00 00       	jmp    c001f306 <int_common_stub>

c001f1fe <isr9>:
c001f1fe:	fa                   	cli    
c001f1ff:	6a 00                	push   0x0
c001f201:	6a 09                	push   0x9
c001f203:	e9 fe 00 00 00       	jmp    c001f306 <int_common_stub>

c001f208 <isr10>:
c001f208:	fa                   	cli    
c001f209:	6a 0a                	push   0xa
c001f20b:	e9 f6 00 00 00       	jmp    c001f306 <int_common_stub>

c001f210 <isr11>:
c001f210:	fa                   	cli    
c001f211:	6a 0b                	push   0xb
c001f213:	e9 ee 00 00 00       	jmp    c001f306 <int_common_stub>

c001f218 <isr12>:
c001f218:	fa                   	cli    
c001f219:	6a 0c                	push   0xc
c001f21b:	e9 e6 00 00 00       	jmp    c001f306 <int_common_stub>

c001f220 <isr13>:
c001f220:	fa                   	cli    
c001f221:	6a 0d                	push   0xd
c001f223:	53                   	push   ebx
c001f224:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f228:	81 fb f6 f3 01 c0    	cmp    ebx,0xc001f3f6
c001f22e:	5b                   	pop    ebx
c001f22f:	0f 84 c3 01 00 00    	je     c001f3f8 <finishSignal2>
c001f235:	e9 cc 00 00 00       	jmp    c001f306 <int_common_stub>

c001f23a <isr14>:
c001f23a:	fa                   	cli    
c001f23b:	6a 0e                	push   0xe
c001f23d:	e9 c4 00 00 00       	jmp    c001f306 <int_common_stub>

c001f242 <isr15>:
c001f242:	fa                   	cli    
c001f243:	6a 00                	push   0x0
c001f245:	6a 0f                	push   0xf
c001f247:	e9 ba 00 00 00       	jmp    c001f306 <int_common_stub>

c001f24c <isr16>:
c001f24c:	fa                   	cli    
c001f24d:	6a 00                	push   0x0
c001f24f:	6a 10                	push   0x10
c001f251:	e9 b0 00 00 00       	jmp    c001f306 <int_common_stub>

c001f256 <isr17>:
c001f256:	fa                   	cli    
c001f257:	6a 00                	push   0x0
c001f259:	6a 11                	push   0x11
c001f25b:	e9 a6 00 00 00       	jmp    c001f306 <int_common_stub>

c001f260 <isr18>:
c001f260:	fa                   	cli    
c001f261:	6a 00                	push   0x0
c001f263:	6a 12                	push   0x12
c001f265:	e9 9c 00 00 00       	jmp    c001f306 <int_common_stub>

c001f26a <irq3>:
c001f26a:	fa                   	cli    
c001f26b:	6a 00                	push   0x0
c001f26d:	6a 23                	push   0x23
c001f26f:	e9 92 00 00 00       	jmp    c001f306 <int_common_stub>

c001f274 <irq4>:
c001f274:	fa                   	cli    
c001f275:	6a 00                	push   0x0
c001f277:	6a 24                	push   0x24
c001f279:	e9 88 00 00 00       	jmp    c001f306 <int_common_stub>

c001f27e <irq5>:
c001f27e:	fa                   	cli    
c001f27f:	6a 00                	push   0x0
c001f281:	6a 25                	push   0x25
c001f283:	e9 7e 00 00 00       	jmp    c001f306 <int_common_stub>

c001f288 <irq6>:
c001f288:	fa                   	cli    
c001f289:	6a 00                	push   0x0
c001f28b:	6a 26                	push   0x26
c001f28d:	e9 74 00 00 00       	jmp    c001f306 <int_common_stub>

c001f292 <irq7>:
c001f292:	fa                   	cli    
c001f293:	6a 00                	push   0x0
c001f295:	6a 27                	push   0x27
c001f297:	e9 6a 00 00 00       	jmp    c001f306 <int_common_stub>

c001f29c <irq8>:
c001f29c:	fa                   	cli    
c001f29d:	6a 00                	push   0x0
c001f29f:	6a 28                	push   0x28
c001f2a1:	e9 60 00 00 00       	jmp    c001f306 <int_common_stub>

c001f2a6 <irq9>:
c001f2a6:	fa                   	cli    
c001f2a7:	6a 00                	push   0x0
c001f2a9:	6a 29                	push   0x29
c001f2ab:	e9 56 00 00 00       	jmp    c001f306 <int_common_stub>

c001f2b0 <irq10>:
c001f2b0:	fa                   	cli    
c001f2b1:	6a 00                	push   0x0
c001f2b3:	6a 2a                	push   0x2a
c001f2b5:	e9 4c 00 00 00       	jmp    c001f306 <int_common_stub>

c001f2ba <irq11>:
c001f2ba:	fa                   	cli    
c001f2bb:	6a 00                	push   0x0
c001f2bd:	6a 2b                	push   0x2b
c001f2bf:	e9 42 00 00 00       	jmp    c001f306 <int_common_stub>

c001f2c4 <irq12>:
c001f2c4:	fa                   	cli    
c001f2c5:	6a 00                	push   0x0
c001f2c7:	6a 2c                	push   0x2c
c001f2c9:	e9 38 00 00 00       	jmp    c001f306 <int_common_stub>

c001f2ce <irq13>:
c001f2ce:	fa                   	cli    
c001f2cf:	6a 00                	push   0x0
c001f2d1:	6a 2d                	push   0x2d
c001f2d3:	e9 2e 00 00 00       	jmp    c001f306 <int_common_stub>

c001f2d8 <irq14>:
c001f2d8:	fa                   	cli    
c001f2d9:	6a 00                	push   0x0
c001f2db:	6a 2e                	push   0x2e
c001f2dd:	e9 24 00 00 00       	jmp    c001f306 <int_common_stub>

c001f2e2 <irq15>:
c001f2e2:	fa                   	cli    
c001f2e3:	6a 00                	push   0x0
c001f2e5:	6a 2f                	push   0x2f
c001f2e7:	e9 1a 00 00 00       	jmp    c001f306 <int_common_stub>

c001f2ec <irq1>:
c001f2ec:	fa                   	cli    
c001f2ed:	6a 00                	push   0x0
c001f2ef:	6a 21                	push   0x21
c001f2f1:	eb 13                	jmp    c001f306 <int_common_stub>

c001f2f3 <irq2>:
c001f2f3:	fa                   	cli    
c001f2f4:	6a 00                	push   0x0
c001f2f6:	6a 22                	push   0x22
c001f2f8:	eb 0c                	jmp    c001f306 <int_common_stub>

c001f2fa <isr96>:
c001f2fa:	6a 00                	push   0x0
c001f2fc:	6a 60                	push   0x60
c001f2fe:	fb                   	sti    
c001f2ff:	eb 37                	jmp    c001f338 <syscall_common_stub>

c001f301 <irq0>:
c001f301:	fa                   	cli    
c001f302:	6a 00                	push   0x0
c001f304:	6a 20                	push   0x20

c001f306 <int_common_stub>:
c001f306:	60                   	pusha  
c001f307:	1e                   	push   ds
c001f308:	06                   	push   es
c001f309:	0f a0                	push   fs
c001f30b:	0f a8                	push   gs
c001f30d:	66 b8 10 00          	mov    ax,0x10
c001f311:	66 8e d8             	mov    ds,ax
c001f314:	66 8e c0             	mov    es,ax
c001f317:	66 8e e0             	mov    fs,ax
c001f31a:	66 8e e8             	mov    gs,ax
c001f31d:	54                   	push   esp
c001f31e:	fc                   	cld    
c001f31f:	e8 68 db fe ff       	call   c000ce8c <int_handler>
c001f324:	81 c4 04 00 00 00    	add    esp,0x4
c001f32a:	0f a9                	pop    gs
c001f32c:	0f a1                	pop    fs
c001f32e:	07                   	pop    es
c001f32f:	1f                   	pop    ds
c001f330:	61                   	popa   
c001f331:	81 c4 08 00 00 00    	add    esp,0x8
c001f337:	cf                   	iret   

c001f338 <syscall_common_stub>:
c001f338:	60                   	pusha  
c001f339:	1e                   	push   ds
c001f33a:	06                   	push   es
c001f33b:	0f a0                	push   fs
c001f33d:	0f a8                	push   gs
c001f33f:	66 b8 10 00          	mov    ax,0x10
c001f343:	66 8e d8             	mov    ds,ax
c001f346:	66 8e c0             	mov    es,ax
c001f349:	66 8e e0             	mov    fs,ax
c001f34c:	66 8e e8             	mov    gs,ax
c001f34f:	54                   	push   esp
c001f350:	fc                   	cld    
c001f351:	e8 36 db fe ff       	call   c000ce8c <int_handler>
c001f356:	81 c4 04 00 00 00    	add    esp,0x4
c001f35c:	0f a9                	pop    gs
c001f35e:	0f a1                	pop    fs
c001f360:	07                   	pop    es
c001f361:	1f                   	pop    ds
c001f362:	e8 73 29 ff ff       	call   c0011cda <KiCheckSignalZ>
c001f367:	3d 00 00 00 00       	cmp    eax,0x0
c001f36c:	0f 84 c0 00 00 00    	je     c001f432 <skipSignals>
c001f372:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f377:	61                   	popa   
c001f378:	53                   	push   ebx
c001f379:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f37f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f382:	5b                   	pop    ebx
c001f383:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f388:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f38b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f38e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f391:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f394:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f397:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f39a:	81 c4 08 00 00 00    	add    esp,0x8
c001f3a0:	5e                   	pop    esi
c001f3a1:	5b                   	pop    ebx
c001f3a2:	59                   	pop    ecx
c001f3a3:	5a                   	pop    edx
c001f3a4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f3a7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f3aa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f3ad:	52                   	push   edx
c001f3ae:	51                   	push   ecx
c001f3af:	53                   	push   ebx
c001f3b0:	56                   	push   esi
c001f3b1:	81 ec 08 00 00 00    	sub    esp,0x8
c001f3b7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f3ba:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f3bd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f3c0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f3c3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f3c6:	60                   	pusha  
c001f3c7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f3cd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f3d0:	89 e3                	mov    ebx,esp
c001f3d2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f3d5:	52                   	push   edx
c001f3d6:	68 f6 f3 01 c0       	push   0xc001f3f6
c001f3db:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f3de:	89 dc                	mov    esp,ebx
c001f3e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f3e3:	68 23 00 00 00       	push   0x23
c001f3e8:	51                   	push   ecx
c001f3e9:	68 02 02 00 00       	push   0x202
c001f3ee:	68 1b 00 00 00       	push   0x1b
c001f3f3:	ff 36                	push   DWORD PTR [esi]
c001f3f5:	cf                   	iret   

c001f3f6 <finishSignal>:
c001f3f6:	cd 0f                	int    0xf

c001f3f8 <finishSignal2>:
c001f3f8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f3fe:	e8 54 29 ff ff       	call   c0011d57 <KiFinishSignalZ>
c001f403:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f409:	68 23 00 00 00       	push   0x23
c001f40e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f411:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f414:	68 1b 00 00 00       	push   0x1b
c001f419:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f41c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f41f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f422:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f425:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f428:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f42b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f42e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f431:	cf                   	iret   

c001f432 <skipSignals>:
c001f432:	61                   	popa   
c001f433:	81 c4 08 00 00 00    	add    esp,0x8
c001f439:	cf                   	iret   
c001f43a:	90                   	nop
c001f43b:	90                   	nop

c001f43c <irq16>:
c001f43c:	fa                   	cli    
c001f43d:	6a 00                	push   0x0
c001f43f:	6a 30                	push   0x30
c001f441:	e9 c0 fe ff ff       	jmp    c001f306 <int_common_stub>

c001f446 <irq17>:
c001f446:	fa                   	cli    
c001f447:	6a 00                	push   0x0
c001f449:	6a 31                	push   0x31
c001f44b:	e9 b6 fe ff ff       	jmp    c001f306 <int_common_stub>

c001f450 <irq18>:
c001f450:	fa                   	cli    
c001f451:	6a 00                	push   0x0
c001f453:	6a 32                	push   0x32
c001f455:	e9 ac fe ff ff       	jmp    c001f306 <int_common_stub>

c001f45a <irq19>:
c001f45a:	fa                   	cli    
c001f45b:	6a 00                	push   0x0
c001f45d:	6a 33                	push   0x33
c001f45f:	e9 a2 fe ff ff       	jmp    c001f306 <int_common_stub>

c001f464 <irq20>:
c001f464:	fa                   	cli    
c001f465:	6a 00                	push   0x0
c001f467:	6a 34                	push   0x34
c001f469:	e9 98 fe ff ff       	jmp    c001f306 <int_common_stub>

c001f46e <irq21>:
c001f46e:	fa                   	cli    
c001f46f:	6a 00                	push   0x0
c001f471:	6a 35                	push   0x35
c001f473:	e9 8e fe ff ff       	jmp    c001f306 <int_common_stub>

c001f478 <irq22>:
c001f478:	fa                   	cli    
c001f479:	6a 00                	push   0x0
c001f47b:	6a 36                	push   0x36
c001f47d:	e9 84 fe ff ff       	jmp    c001f306 <int_common_stub>

c001f482 <irq23>:
c001f482:	fa                   	cli    
c001f483:	6a 00                	push   0x0
c001f485:	6a 37                	push   0x37
c001f487:	e9 7a fe ff ff       	jmp    c001f306 <int_common_stub>
c001f48c:	66 90                	xchg   ax,ax
c001f48e:	66 90                	xchg   ax,ax

c001f490 <i386GetRDRAND>:
c001f490:	b9 64 00 00 00       	mov    ecx,0x64

c001f495 <retry>:
c001f495:	0f c7 f0             	rdrand eax
c001f498:	72 05                	jb     c001f49f <retry.done>
c001f49a:	e2 f9                	loop   c001f495 <retry>

c001f49c <retry.fail>:
c001f49c:	31 c0                	xor    eax,eax
c001f49e:	c3                   	ret    

c001f49f <retry.done>:
c001f49f:	c3                   	ret    

c001f4a0 <absolutelyNoChanceInHell>:
c001f4a0:	b8 01 00 00 00       	mov    eax,0x1
c001f4a5:	0f a2                	cpuid  
c001f4a7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f4ad:	74 06                	je     c001f4b5 <sseDetect.noSSE>
c001f4af:	b8 01 00 00 00       	mov    eax,0x1
c001f4b4:	c3                   	ret    

c001f4b5 <sseDetect.noSSE>:
c001f4b5:	31 c0                	xor    eax,eax
c001f4b7:	c3                   	ret    

c001f4b8 <sseSave>:
c001f4b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4bc:	0f ae 00             	fxsave [eax]
c001f4bf:	c3                   	ret    

c001f4c0 <sseLoad>:
c001f4c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4c4:	0f ae 08             	fxrstor [eax]
c001f4c7:	c3                   	ret    

c001f4c8 <sseInit>:
c001f4c8:	e8 42 00 00 00       	call   c001f50f <x87Init>
c001f4cd:	0f 20 e0             	mov    eax,cr4
c001f4d0:	66 0d 00 06          	or     ax,0x600
c001f4d4:	0f 22 e0             	mov    cr4,eax
c001f4d7:	c3                   	ret    

c001f4d8 <sseClose>:
c001f4d8:	c3                   	ret    
c001f4d9:	66 90                	xchg   ax,ax
c001f4db:	66 90                	xchg   ax,ax
c001f4dd:	66 90                	xchg   ax,ax
c001f4df:	90                   	nop

c001f4e0 <value_37F>:
c001f4e0:	7f 03                	jg     c001f4e5 <value_37A+0x1>

c001f4e2 <value_37E>:
c001f4e2:	7e 03                	jle    c001f4e7 <x87Detect+0x1>

c001f4e4 <value_37A>:
c001f4e4:	7a 03                	jp     c001f4e9 <x87Detect+0x3>

c001f4e6 <x87Detect>:
c001f4e6:	b8 01 00 00 00       	mov    eax,0x1
c001f4eb:	0f a2                	cpuid  
c001f4ed:	f7 c2 01 00 00 00    	test   edx,0x1
c001f4f3:	74 06                	je     c001f4fb <x87Detect.nox87>
c001f4f5:	b8 01 00 00 00       	mov    eax,0x1
c001f4fa:	c3                   	ret    

c001f4fb <x87Detect.nox87>:
c001f4fb:	b8 00 00 00 00       	mov    eax,0x0
c001f500:	c3                   	ret    

c001f501 <x87Save>:
c001f501:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f505:	dd 30                	fnsave [eax]
c001f507:	c3                   	ret    

c001f508 <x87Load>:
c001f508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f50c:	dd 20                	frstor [eax]
c001f50e:	c3                   	ret    

c001f50f <x87Init>:
c001f50f:	0f 20 c0             	mov    eax,cr0
c001f512:	66 25 fb ff          	and    ax,0xfffb
c001f516:	66 0d 22 00          	or     ax,0x22
c001f51a:	0f 22 c0             	mov    cr0,eax
c001f51d:	db e3                	fninit 
c001f51f:	0f 06                	clts   
c001f521:	d9 2d e4 f4 01 c0    	fldcw  WORD PTR ds:0xc001f4e4
c001f527:	c3                   	ret    

c001f528 <x87Close>:
c001f528:	c3                   	ret    
c001f529:	66 90                	xchg   ax,ax
c001f52b:	90                   	nop

c001f52c <__do_global_ctors_aux>:
c001f52c:	a1 e0 04 02 c0       	mov    eax,ds:0xc00204e0
c001f531:	83 f8 ff             	cmp    eax,0xffffffff
c001f534:	74 1a                	je     c001f550 <__do_global_ctors_aux+0x24>
c001f536:	55                   	push   ebp
c001f537:	89 e5                	mov    ebp,esp
c001f539:	53                   	push   ebx
c001f53a:	52                   	push   edx
c001f53b:	bb e0 04 02 c0       	mov    ebx,0xc00204e0
c001f540:	ff d0                	call   eax
c001f542:	83 eb 04             	sub    ebx,0x4
c001f545:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f547:	83 f8 ff             	cmp    eax,0xffffffff
c001f54a:	75 f4                	jne    c001f540 <__do_global_ctors_aux+0x14>
c001f54c:	58                   	pop    eax
c001f54d:	5b                   	pop    ebx
c001f54e:	5d                   	pop    ebp
c001f54f:	c3                   	ret    
c001f550:	c3                   	ret    
c001f551:	66 90                	xchg   ax,ax
c001f553:	90                   	nop

c001f554 <__divdi3>:
c001f554:	55                   	push   ebp
c001f555:	57                   	push   edi
c001f556:	56                   	push   esi
c001f557:	53                   	push   ebx
c001f558:	83 ec 1c             	sub    esp,0x1c
c001f55b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f55f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f563:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f566:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f56a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f56e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f572:	85 db                	test   ebx,ebx
c001f574:	0f 88 8e 00 00 00    	js     c001f608 <__divdi3+0xb4>
c001f57a:	89 dd                	mov    ebp,ebx
c001f57c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f584:	89 d3                	mov    ebx,edx
c001f586:	85 d2                	test   edx,edx
c001f588:	79 0d                	jns    c001f597 <__divdi3+0x43>
c001f58a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f58e:	f7 d8                	neg    eax
c001f590:	83 d2 00             	adc    edx,0x0
c001f593:	f7 da                	neg    edx
c001f595:	89 d3                	mov    ebx,edx
c001f597:	89 c7                	mov    edi,eax
c001f599:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f59c:	85 db                	test   ebx,ebx
c001f59e:	75 48                	jne    c001f5e8 <__divdi3+0x94>
c001f5a0:	39 ef                	cmp    edi,ebp
c001f5a2:	76 24                	jbe    c001f5c8 <__divdi3+0x74>
c001f5a4:	89 ea                	mov    edx,ebp
c001f5a6:	f7 f7                	div    edi
c001f5a8:	89 c1                	mov    ecx,eax
c001f5aa:	31 f6                	xor    esi,esi
c001f5ac:	89 c8                	mov    eax,ecx
c001f5ae:	89 f2                	mov    edx,esi
c001f5b0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5b4:	85 c9                	test   ecx,ecx
c001f5b6:	74 07                	je     c001f5bf <__divdi3+0x6b>
c001f5b8:	f7 d8                	neg    eax
c001f5ba:	83 d2 00             	adc    edx,0x0
c001f5bd:	f7 da                	neg    edx
c001f5bf:	83 c4 1c             	add    esp,0x1c
c001f5c2:	5b                   	pop    ebx
c001f5c3:	5e                   	pop    esi
c001f5c4:	5f                   	pop    edi
c001f5c5:	5d                   	pop    ebp
c001f5c6:	c3                   	ret    
c001f5c7:	90                   	nop
c001f5c8:	85 ff                	test   edi,edi
c001f5ca:	75 0b                	jne    c001f5d7 <__divdi3+0x83>
c001f5cc:	b8 01 00 00 00       	mov    eax,0x1
c001f5d1:	31 d2                	xor    edx,edx
c001f5d3:	f7 f3                	div    ebx
c001f5d5:	89 c7                	mov    edi,eax
c001f5d7:	31 d2                	xor    edx,edx
c001f5d9:	89 e8                	mov    eax,ebp
c001f5db:	f7 f7                	div    edi
c001f5dd:	89 c6                	mov    esi,eax
c001f5df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f5e2:	f7 f7                	div    edi
c001f5e4:	89 c1                	mov    ecx,eax
c001f5e6:	eb c4                	jmp    c001f5ac <__divdi3+0x58>
c001f5e8:	39 eb                	cmp    ebx,ebp
c001f5ea:	77 3c                	ja     c001f628 <__divdi3+0xd4>
c001f5ec:	0f bd f3             	bsr    esi,ebx
c001f5ef:	83 f6 1f             	xor    esi,0x1f
c001f5f2:	75 40                	jne    c001f634 <__divdi3+0xe0>
c001f5f4:	39 eb                	cmp    ebx,ebp
c001f5f6:	72 09                	jb     c001f601 <__divdi3+0xad>
c001f5f8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f5fb:	0f 87 97 00 00 00    	ja     c001f698 <__divdi3+0x144>
c001f601:	b9 01 00 00 00       	mov    ecx,0x1
c001f606:	eb a4                	jmp    c001f5ac <__divdi3+0x58>
c001f608:	f7 d9                	neg    ecx
c001f60a:	83 d3 00             	adc    ebx,0x0
c001f60d:	f7 db                	neg    ebx
c001f60f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f612:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f616:	89 dd                	mov    ebp,ebx
c001f618:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f620:	e9 5f ff ff ff       	jmp    c001f584 <__divdi3+0x30>
c001f625:	8d 76 00             	lea    esi,[esi+0x0]
c001f628:	31 f6                	xor    esi,esi
c001f62a:	31 c9                	xor    ecx,ecx
c001f62c:	e9 7b ff ff ff       	jmp    c001f5ac <__divdi3+0x58>
c001f631:	8d 76 00             	lea    esi,[esi+0x0]
c001f634:	b8 20 00 00 00       	mov    eax,0x20
c001f639:	29 f0                	sub    eax,esi
c001f63b:	89 f1                	mov    ecx,esi
c001f63d:	d3 e3                	shl    ebx,cl
c001f63f:	89 fa                	mov    edx,edi
c001f641:	88 c1                	mov    cl,al
c001f643:	d3 ea                	shr    edx,cl
c001f645:	09 da                	or     edx,ebx
c001f647:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f64b:	89 f1                	mov    ecx,esi
c001f64d:	d3 e7                	shl    edi,cl
c001f64f:	89 eb                	mov    ebx,ebp
c001f651:	88 c1                	mov    cl,al
c001f653:	d3 eb                	shr    ebx,cl
c001f655:	89 f1                	mov    ecx,esi
c001f657:	d3 e5                	shl    ebp,cl
c001f659:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f65c:	88 c1                	mov    cl,al
c001f65e:	d3 ea                	shr    edx,cl
c001f660:	09 d5                	or     ebp,edx
c001f662:	89 e8                	mov    eax,ebp
c001f664:	89 da                	mov    edx,ebx
c001f666:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f66a:	89 d3                	mov    ebx,edx
c001f66c:	89 c5                	mov    ebp,eax
c001f66e:	f7 e7                	mul    edi
c001f670:	39 d3                	cmp    ebx,edx
c001f672:	72 18                	jb     c001f68c <__divdi3+0x138>
c001f674:	74 0a                	je     c001f680 <__divdi3+0x12c>
c001f676:	89 e9                	mov    ecx,ebp
c001f678:	31 f6                	xor    esi,esi
c001f67a:	e9 2d ff ff ff       	jmp    c001f5ac <__divdi3+0x58>
c001f67f:	90                   	nop
c001f680:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f683:	89 f1                	mov    ecx,esi
c001f685:	d3 e7                	shl    edi,cl
c001f687:	39 c7                	cmp    edi,eax
c001f689:	73 eb                	jae    c001f676 <__divdi3+0x122>
c001f68b:	90                   	nop
c001f68c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f68f:	31 f6                	xor    esi,esi
c001f691:	e9 16 ff ff ff       	jmp    c001f5ac <__divdi3+0x58>
c001f696:	66 90                	xchg   ax,ax
c001f698:	31 c9                	xor    ecx,ecx
c001f69a:	e9 0d ff ff ff       	jmp    c001f5ac <__divdi3+0x58>
c001f69f:	90                   	nop

c001f6a0 <__moddi3>:
c001f6a0:	55                   	push   ebp
c001f6a1:	57                   	push   edi
c001f6a2:	56                   	push   esi
c001f6a3:	53                   	push   ebx
c001f6a4:	83 ec 2c             	sub    esp,0x2c
c001f6a7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f6ab:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f6af:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f6b3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f6b7:	85 db                	test   ebx,ebx
c001f6b9:	0f 88 85 00 00 00    	js     c001f744 <__moddi3+0xa4>
c001f6bf:	89 de                	mov    esi,ebx
c001f6c1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f6c9:	89 d7                	mov    edi,edx
c001f6cb:	85 d2                	test   edx,edx
c001f6cd:	79 09                	jns    c001f6d8 <__moddi3+0x38>
c001f6cf:	f7 d8                	neg    eax
c001f6d1:	83 d2 00             	adc    edx,0x0
c001f6d4:	f7 da                	neg    edx
c001f6d6:	89 d7                	mov    edi,edx
c001f6d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6dc:	89 cd                	mov    ebp,ecx
c001f6de:	85 ff                	test   edi,edi
c001f6e0:	75 52                	jne    c001f734 <__moddi3+0x94>
c001f6e2:	89 c3                	mov    ebx,eax
c001f6e4:	39 f0                	cmp    eax,esi
c001f6e6:	76 24                	jbe    c001f70c <__moddi3+0x6c>
c001f6e8:	89 c8                	mov    eax,ecx
c001f6ea:	89 f2                	mov    edx,esi
c001f6ec:	f7 f3                	div    ebx
c001f6ee:	89 d6                	mov    esi,edx
c001f6f0:	89 f0                	mov    eax,esi
c001f6f2:	31 d2                	xor    edx,edx
c001f6f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6f8:	85 c9                	test   ecx,ecx
c001f6fa:	74 07                	je     c001f703 <__moddi3+0x63>
c001f6fc:	f7 d8                	neg    eax
c001f6fe:	83 d2 00             	adc    edx,0x0
c001f701:	f7 da                	neg    edx
c001f703:	83 c4 2c             	add    esp,0x2c
c001f706:	5b                   	pop    ebx
c001f707:	5e                   	pop    esi
c001f708:	5f                   	pop    edi
c001f709:	5d                   	pop    ebp
c001f70a:	c3                   	ret    
c001f70b:	90                   	nop
c001f70c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f710:	85 db                	test   ebx,ebx
c001f712:	75 0d                	jne    c001f721 <__moddi3+0x81>
c001f714:	b8 01 00 00 00       	mov    eax,0x1
c001f719:	31 d2                	xor    edx,edx
c001f71b:	f7 f7                	div    edi
c001f71d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f721:	89 f0                	mov    eax,esi
c001f723:	31 d2                	xor    edx,edx
c001f725:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f729:	f7 f7                	div    edi
c001f72b:	89 e8                	mov    eax,ebp
c001f72d:	f7 f7                	div    edi
c001f72f:	89 d6                	mov    esi,edx
c001f731:	eb bd                	jmp    c001f6f0 <__moddi3+0x50>
c001f733:	90                   	nop
c001f734:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f738:	39 f7                	cmp    edi,esi
c001f73a:	76 20                	jbe    c001f75c <__moddi3+0xbc>
c001f73c:	89 c8                	mov    eax,ecx
c001f73e:	89 f2                	mov    edx,esi
c001f740:	eb b2                	jmp    c001f6f4 <__moddi3+0x54>
c001f742:	66 90                	xchg   ax,ax
c001f744:	f7 d9                	neg    ecx
c001f746:	83 d3 00             	adc    ebx,0x0
c001f749:	f7 db                	neg    ebx
c001f74b:	89 de                	mov    esi,ebx
c001f74d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f755:	e9 6f ff ff ff       	jmp    c001f6c9 <__moddi3+0x29>
c001f75a:	66 90                	xchg   ax,ax
c001f75c:	0f bd c7             	bsr    eax,edi
c001f75f:	83 f0 1f             	xor    eax,0x1f
c001f762:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f766:	75 24                	jne    c001f78c <__moddi3+0xec>
c001f768:	39 f7                	cmp    edi,esi
c001f76a:	72 06                	jb     c001f772 <__moddi3+0xd2>
c001f76c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f770:	77 0c                	ja     c001f77e <__moddi3+0xde>
c001f772:	89 e9                	mov    ecx,ebp
c001f774:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f778:	19 fe                	sbb    esi,edi
c001f77a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f77e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f782:	89 f2                	mov    edx,esi
c001f784:	e9 6b ff ff ff       	jmp    c001f6f4 <__moddi3+0x54>
c001f789:	8d 76 00             	lea    esi,[esi+0x0]
c001f78c:	b8 20 00 00 00       	mov    eax,0x20
c001f791:	89 c2                	mov    edx,eax
c001f793:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f797:	29 da                	sub    edx,ebx
c001f799:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f79d:	88 d9                	mov    cl,bl
c001f79f:	d3 e7                	shl    edi,cl
c001f7a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7a5:	88 d1                	mov    cl,dl
c001f7a7:	d3 e8                	shr    eax,cl
c001f7a9:	09 c7                	or     edi,eax
c001f7ab:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f7af:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f7b3:	89 d8                	mov    eax,ebx
c001f7b5:	88 d9                	mov    cl,bl
c001f7b7:	d3 e7                	shl    edi,cl
c001f7b9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f7bd:	89 f3                	mov    ebx,esi
c001f7bf:	88 d1                	mov    cl,dl
c001f7c1:	d3 eb                	shr    ebx,cl
c001f7c3:	89 c7                	mov    edi,eax
c001f7c5:	88 c1                	mov    cl,al
c001f7c7:	d3 e6                	shl    esi,cl
c001f7c9:	89 e8                	mov    eax,ebp
c001f7cb:	88 d1                	mov    cl,dl
c001f7cd:	d3 e8                	shr    eax,cl
c001f7cf:	09 f0                	or     eax,esi
c001f7d1:	89 f9                	mov    ecx,edi
c001f7d3:	d3 e5                	shl    ebp,cl
c001f7d5:	89 da                	mov    edx,ebx
c001f7d7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f7db:	89 d3                	mov    ebx,edx
c001f7dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f7e1:	89 c6                	mov    esi,eax
c001f7e3:	89 d1                	mov    ecx,edx
c001f7e5:	39 d3                	cmp    ebx,edx
c001f7e7:	72 27                	jb     c001f810 <__moddi3+0x170>
c001f7e9:	74 21                	je     c001f80c <__moddi3+0x16c>
c001f7eb:	29 f5                	sub    ebp,esi
c001f7ed:	19 cb                	sbb    ebx,ecx
c001f7ef:	89 de                	mov    esi,ebx
c001f7f1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f7f5:	d3 e6                	shl    esi,cl
c001f7f7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f7fb:	89 f9                	mov    ecx,edi
c001f7fd:	d3 ed                	shr    ebp,cl
c001f7ff:	09 ee                	or     esi,ebp
c001f801:	89 f0                	mov    eax,esi
c001f803:	d3 eb                	shr    ebx,cl
c001f805:	89 da                	mov    edx,ebx
c001f807:	e9 e8 fe ff ff       	jmp    c001f6f4 <__moddi3+0x54>
c001f80c:	39 c5                	cmp    ebp,eax
c001f80e:	73 db                	jae    c001f7eb <__moddi3+0x14b>
c001f810:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f814:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f818:	89 d1                	mov    ecx,edx
c001f81a:	89 c6                	mov    esi,eax
c001f81c:	eb cd                	jmp    c001f7eb <__moddi3+0x14b>
c001f81e:	66 90                	xchg   ax,ax

c001f820 <__udivdi3>:
c001f820:	55                   	push   ebp
c001f821:	57                   	push   edi
c001f822:	56                   	push   esi
c001f823:	53                   	push   ebx
c001f824:	83 ec 1c             	sub    esp,0x1c
c001f827:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f82b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f82f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f833:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f837:	85 d2                	test   edx,edx
c001f839:	75 41                	jne    c001f87c <__udivdi3+0x5c>
c001f83b:	39 f7                	cmp    edi,esi
c001f83d:	76 15                	jbe    c001f854 <__udivdi3+0x34>
c001f83f:	89 e8                	mov    eax,ebp
c001f841:	89 f2                	mov    edx,esi
c001f843:	f7 f7                	div    edi
c001f845:	31 db                	xor    ebx,ebx
c001f847:	89 da                	mov    edx,ebx
c001f849:	83 c4 1c             	add    esp,0x1c
c001f84c:	5b                   	pop    ebx
c001f84d:	5e                   	pop    esi
c001f84e:	5f                   	pop    edi
c001f84f:	5d                   	pop    ebp
c001f850:	c3                   	ret    
c001f851:	8d 76 00             	lea    esi,[esi+0x0]
c001f854:	89 f9                	mov    ecx,edi
c001f856:	85 ff                	test   edi,edi
c001f858:	75 0b                	jne    c001f865 <__udivdi3+0x45>
c001f85a:	b8 01 00 00 00       	mov    eax,0x1
c001f85f:	31 d2                	xor    edx,edx
c001f861:	f7 f7                	div    edi
c001f863:	89 c1                	mov    ecx,eax
c001f865:	31 d2                	xor    edx,edx
c001f867:	89 f0                	mov    eax,esi
c001f869:	f7 f1                	div    ecx
c001f86b:	89 c3                	mov    ebx,eax
c001f86d:	89 e8                	mov    eax,ebp
c001f86f:	f7 f1                	div    ecx
c001f871:	89 da                	mov    edx,ebx
c001f873:	83 c4 1c             	add    esp,0x1c
c001f876:	5b                   	pop    ebx
c001f877:	5e                   	pop    esi
c001f878:	5f                   	pop    edi
c001f879:	5d                   	pop    ebp
c001f87a:	c3                   	ret    
c001f87b:	90                   	nop
c001f87c:	39 f2                	cmp    edx,esi
c001f87e:	77 1c                	ja     c001f89c <__udivdi3+0x7c>
c001f880:	0f bd da             	bsr    ebx,edx
c001f883:	83 f3 1f             	xor    ebx,0x1f
c001f886:	75 24                	jne    c001f8ac <__udivdi3+0x8c>
c001f888:	39 f2                	cmp    edx,esi
c001f88a:	72 08                	jb     c001f894 <__udivdi3+0x74>
c001f88c:	39 ef                	cmp    edi,ebp
c001f88e:	0f 87 84 00 00 00    	ja     c001f918 <__udivdi3+0xf8>
c001f894:	b8 01 00 00 00       	mov    eax,0x1
c001f899:	eb ac                	jmp    c001f847 <__udivdi3+0x27>
c001f89b:	90                   	nop
c001f89c:	31 db                	xor    ebx,ebx
c001f89e:	31 c0                	xor    eax,eax
c001f8a0:	89 da                	mov    edx,ebx
c001f8a2:	83 c4 1c             	add    esp,0x1c
c001f8a5:	5b                   	pop    ebx
c001f8a6:	5e                   	pop    esi
c001f8a7:	5f                   	pop    edi
c001f8a8:	5d                   	pop    ebp
c001f8a9:	c3                   	ret    
c001f8aa:	66 90                	xchg   ax,ax
c001f8ac:	b8 20 00 00 00       	mov    eax,0x20
c001f8b1:	29 d8                	sub    eax,ebx
c001f8b3:	88 d9                	mov    cl,bl
c001f8b5:	d3 e2                	shl    edx,cl
c001f8b7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f8bb:	89 fa                	mov    edx,edi
c001f8bd:	88 c1                	mov    cl,al
c001f8bf:	d3 ea                	shr    edx,cl
c001f8c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f8c5:	09 d1                	or     ecx,edx
c001f8c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f8cb:	88 d9                	mov    cl,bl
c001f8cd:	d3 e7                	shl    edi,cl
c001f8cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f8d3:	89 f7                	mov    edi,esi
c001f8d5:	88 c1                	mov    cl,al
c001f8d7:	d3 ef                	shr    edi,cl
c001f8d9:	88 d9                	mov    cl,bl
c001f8db:	d3 e6                	shl    esi,cl
c001f8dd:	89 ea                	mov    edx,ebp
c001f8df:	88 c1                	mov    cl,al
c001f8e1:	d3 ea                	shr    edx,cl
c001f8e3:	09 d6                	or     esi,edx
c001f8e5:	89 f0                	mov    eax,esi
c001f8e7:	89 fa                	mov    edx,edi
c001f8e9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f8ed:	89 d7                	mov    edi,edx
c001f8ef:	89 c6                	mov    esi,eax
c001f8f1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f8f5:	39 d7                	cmp    edi,edx
c001f8f7:	72 13                	jb     c001f90c <__udivdi3+0xec>
c001f8f9:	74 09                	je     c001f904 <__udivdi3+0xe4>
c001f8fb:	89 f0                	mov    eax,esi
c001f8fd:	31 db                	xor    ebx,ebx
c001f8ff:	e9 43 ff ff ff       	jmp    c001f847 <__udivdi3+0x27>
c001f904:	88 d9                	mov    cl,bl
c001f906:	d3 e5                	shl    ebp,cl
c001f908:	39 c5                	cmp    ebp,eax
c001f90a:	73 ef                	jae    c001f8fb <__udivdi3+0xdb>
c001f90c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f90f:	31 db                	xor    ebx,ebx
c001f911:	e9 31 ff ff ff       	jmp    c001f847 <__udivdi3+0x27>
c001f916:	66 90                	xchg   ax,ax
c001f918:	31 c0                	xor    eax,eax
c001f91a:	e9 28 ff ff ff       	jmp    c001f847 <__udivdi3+0x27>
c001f91f:	90                   	nop

c001f920 <__umoddi3>:
c001f920:	55                   	push   ebp
c001f921:	57                   	push   edi
c001f922:	56                   	push   esi
c001f923:	53                   	push   ebx
c001f924:	83 ec 1c             	sub    esp,0x1c
c001f927:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f92b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f92f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f933:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f937:	89 da                	mov    edx,ebx
c001f939:	85 c0                	test   eax,eax
c001f93b:	75 37                	jne    c001f974 <__umoddi3+0x54>
c001f93d:	39 df                	cmp    edi,ebx
c001f93f:	76 13                	jbe    c001f954 <__umoddi3+0x34>
c001f941:	89 f0                	mov    eax,esi
c001f943:	f7 f7                	div    edi
c001f945:	89 d0                	mov    eax,edx
c001f947:	31 d2                	xor    edx,edx
c001f949:	83 c4 1c             	add    esp,0x1c
c001f94c:	5b                   	pop    ebx
c001f94d:	5e                   	pop    esi
c001f94e:	5f                   	pop    edi
c001f94f:	5d                   	pop    ebp
c001f950:	c3                   	ret    
c001f951:	8d 76 00             	lea    esi,[esi+0x0]
c001f954:	89 fd                	mov    ebp,edi
c001f956:	85 ff                	test   edi,edi
c001f958:	75 0b                	jne    c001f965 <__umoddi3+0x45>
c001f95a:	b8 01 00 00 00       	mov    eax,0x1
c001f95f:	31 d2                	xor    edx,edx
c001f961:	f7 f7                	div    edi
c001f963:	89 c5                	mov    ebp,eax
c001f965:	89 d8                	mov    eax,ebx
c001f967:	31 d2                	xor    edx,edx
c001f969:	f7 f5                	div    ebp
c001f96b:	89 f0                	mov    eax,esi
c001f96d:	f7 f5                	div    ebp
c001f96f:	89 d0                	mov    eax,edx
c001f971:	eb d4                	jmp    c001f947 <__umoddi3+0x27>
c001f973:	90                   	nop
c001f974:	89 f1                	mov    ecx,esi
c001f976:	39 d8                	cmp    eax,ebx
c001f978:	76 0a                	jbe    c001f984 <__umoddi3+0x64>
c001f97a:	89 f0                	mov    eax,esi
c001f97c:	83 c4 1c             	add    esp,0x1c
c001f97f:	5b                   	pop    ebx
c001f980:	5e                   	pop    esi
c001f981:	5f                   	pop    edi
c001f982:	5d                   	pop    ebp
c001f983:	c3                   	ret    
c001f984:	0f bd e8             	bsr    ebp,eax
c001f987:	83 f5 1f             	xor    ebp,0x1f
c001f98a:	75 1c                	jne    c001f9a8 <__umoddi3+0x88>
c001f98c:	39 d8                	cmp    eax,ebx
c001f98e:	72 04                	jb     c001f994 <__umoddi3+0x74>
c001f990:	39 f7                	cmp    edi,esi
c001f992:	77 08                	ja     c001f99c <__umoddi3+0x7c>
c001f994:	89 da                	mov    edx,ebx
c001f996:	29 fe                	sub    esi,edi
c001f998:	19 c2                	sbb    edx,eax
c001f99a:	89 f1                	mov    ecx,esi
c001f99c:	89 c8                	mov    eax,ecx
c001f99e:	83 c4 1c             	add    esp,0x1c
c001f9a1:	5b                   	pop    ebx
c001f9a2:	5e                   	pop    esi
c001f9a3:	5f                   	pop    edi
c001f9a4:	5d                   	pop    ebp
c001f9a5:	c3                   	ret    
c001f9a6:	66 90                	xchg   ax,ax
c001f9a8:	ba 20 00 00 00       	mov    edx,0x20
c001f9ad:	29 ea                	sub    edx,ebp
c001f9af:	89 e9                	mov    ecx,ebp
c001f9b1:	d3 e0                	shl    eax,cl
c001f9b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f9b7:	89 f8                	mov    eax,edi
c001f9b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f9bd:	88 d1                	mov    cl,dl
c001f9bf:	d3 e8                	shr    eax,cl
c001f9c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f9c5:	09 c1                	or     ecx,eax
c001f9c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f9cb:	89 e9                	mov    ecx,ebp
c001f9cd:	d3 e7                	shl    edi,cl
c001f9cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f9d3:	89 d8                	mov    eax,ebx
c001f9d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9d9:	88 d1                	mov    cl,dl
c001f9db:	d3 e8                	shr    eax,cl
c001f9dd:	89 c7                	mov    edi,eax
c001f9df:	89 e9                	mov    ecx,ebp
c001f9e1:	d3 e3                	shl    ebx,cl
c001f9e3:	89 f0                	mov    eax,esi
c001f9e5:	88 d1                	mov    cl,dl
c001f9e7:	d3 e8                	shr    eax,cl
c001f9e9:	09 d8                	or     eax,ebx
c001f9eb:	89 e9                	mov    ecx,ebp
c001f9ed:	d3 e6                	shl    esi,cl
c001f9ef:	89 f3                	mov    ebx,esi
c001f9f1:	89 fa                	mov    edx,edi
c001f9f3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f9f7:	89 d1                	mov    ecx,edx
c001f9f9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f9fd:	89 c6                	mov    esi,eax
c001f9ff:	89 d7                	mov    edi,edx
c001fa01:	39 d1                	cmp    ecx,edx
c001fa03:	72 27                	jb     c001fa2c <__umoddi3+0x10c>
c001fa05:	74 21                	je     c001fa28 <__umoddi3+0x108>
c001fa07:	89 ca                	mov    edx,ecx
c001fa09:	29 f3                	sub    ebx,esi
c001fa0b:	19 fa                	sbb    edx,edi
c001fa0d:	89 d0                	mov    eax,edx
c001fa0f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001fa13:	d3 e0                	shl    eax,cl
c001fa15:	89 e9                	mov    ecx,ebp
c001fa17:	d3 eb                	shr    ebx,cl
c001fa19:	09 d8                	or     eax,ebx
c001fa1b:	d3 ea                	shr    edx,cl
c001fa1d:	83 c4 1c             	add    esp,0x1c
c001fa20:	5b                   	pop    ebx
c001fa21:	5e                   	pop    esi
c001fa22:	5f                   	pop    edi
c001fa23:	5d                   	pop    ebp
c001fa24:	c3                   	ret    
c001fa25:	8d 76 00             	lea    esi,[esi+0x0]
c001fa28:	39 c3                	cmp    ebx,eax
c001fa2a:	73 db                	jae    c001fa07 <__umoddi3+0xe7>
c001fa2c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fa30:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001fa34:	89 d7                	mov    edi,edx
c001fa36:	89 c6                	mov    esi,eax
c001fa38:	eb cd                	jmp    c001fa07 <__umoddi3+0xe7>

Disassembly of section .init:

c001fa3a <_init>:
c001fa3a:	55                   	push   ebp
c001fa3b:	89 e5                	mov    ebp,esp
c001fa3d:	e8 b2 06 fe ff       	call   c00000f4 <frame_dummy>
c001fa42:	e8 e5 fa ff ff       	call   c001f52c <__do_global_ctors_aux>
c001fa47:	5d                   	pop    ebp
c001fa48:	c3                   	ret    

Disassembly of section .fini:

c001fa49 <_fini>:
c001fa49:	55                   	push   ebp
c001fa4a:	89 e5                	mov    ebp,esp
c001fa4c:	e8 33 06 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001fa51:	5d                   	pop    ebp
c001fa52:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001fa54 <Computer::~Computer()>:
c001fa54:	83 ec 0c             	sub    esp,0xc
c001fa57:	ba 8c 0d 02 c0       	mov    edx,0xc0020d8c
c001fa5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa60:	89 10                	mov    DWORD PTR [eax],edx
c001fa62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa66:	83 ec 0c             	sub    esp,0xc
c001fa69:	50                   	push   eax
c001fa6a:	e8 5d ce fe ff       	call   c000c8cc <Device::~Device()>
c001fa6f:	83 c4 10             	add    esp,0x10
c001fa72:	90                   	nop
c001fa73:	83 c4 0c             	add    esp,0xc
c001fa76:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001fa78 <Computer::~Computer()>:
c001fa78:	83 ec 0c             	sub    esp,0xc
c001fa7b:	83 ec 0c             	sub    esp,0xc
c001fa7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa82:	e8 cd ff ff ff       	call   c001fa54 <Computer::~Computer()>
c001fa87:	83 c4 10             	add    esp,0x10
c001fa8a:	83 ec 08             	sub    esp,0x8
c001fa8d:	68 70 01 00 00       	push   0x170
c001fa92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa96:	e8 81 ad fe ff       	call   c000a81c <operator delete(void*, unsigned long)>
c001fa9b:	83 c4 10             	add    esp,0x10
c001fa9e:	83 c4 0c             	add    esp,0xc
c001faa1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001faa2 <idleCommon()>:
c001faa2:	83 ec 0c             	sub    esp,0xc
c001faa5:	fa                   	cli    
c001faa6:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001faac:	e8 f7 66 ff ff       	call   c00161a8 <schedule()>
c001fab1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001fab6:	48                   	dec    eax
c001fab7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001fabc:	75 01                	jne    c001fabf <idleCommon()+0x1d>
c001fabe:	fb                   	sti    
c001fabf:	83 c4 0c             	add    esp,0xc
c001fac2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001fac4 <LinkedList<UnixFile>::~LinkedList()>:
c001fac4:	90                   	nop
c001fac5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001fac6 <LinkedList<UnixFile>::LinkedList()>:
c001fac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fad4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fadb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fadf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fae6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001faf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faf4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fafb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb06:	90                   	nop
c001fb07:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001fb08 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001fb08:	83 ec 0c             	sub    esp,0xc
c001fb0b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fb10:	75 10                	jne    c001fb22 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001fb12:	83 ec 0c             	sub    esp,0xc
c001fb15:	68 a0 0f 02 c0       	push   0xc0020fa0
c001fb1a:	e8 a4 1b ff ff       	call   c00116c3 <KePanic(char const*)>
c001fb1f:	83 c4 10             	add    esp,0x10
c001fb22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb26:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb28:	85 c0                	test   eax,eax
c001fb2a:	74 34                	je     c001fb60 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fb2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb33:	85 c0                	test   eax,eax
c001fb35:	74 29                	je     c001fb60 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fb37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb3e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb42:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb4d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb57:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb5e:	eb 65                	jmp    c001fbc5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb64:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb66:	85 c0                	test   eax,eax
c001fb68:	75 4b                	jne    c001fbb5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb71:	85 c0                	test   eax,eax
c001fb73:	75 40                	jne    c001fbb5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fb75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb7d:	89 10                	mov    DWORD PTR [eax],edx
c001fb7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb87:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb91:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb9f:	85 c0                	test   eax,eax
c001fba1:	74 22                	je     c001fbc5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fba3:	83 ec 0c             	sub    esp,0xc
c001fba6:	68 c2 0f 02 c0       	push   0xc0020fc2
c001fbab:	e8 13 1b ff ff       	call   c00116c3 <KePanic(char const*)>
c001fbb0:	83 c4 10             	add    esp,0x10
c001fbb3:	eb 10                	jmp    c001fbc5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fbb5:	83 ec 0c             	sub    esp,0xc
c001fbb8:	68 cc 0f 02 c0       	push   0xc0020fcc
c001fbbd:	e8 01 1b ff ff       	call   c00116c3 <KePanic(char const*)>
c001fbc2:	83 c4 10             	add    esp,0x10
c001fbc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbcc:	8d 50 01             	lea    edx,[eax+0x1]
c001fbcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fbd6:	90                   	nop
c001fbd7:	83 c4 0c             	add    esp,0xc
c001fbda:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fbdc <LinkedList<UnixFile>::getFirstElement()>:
c001fbdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbe0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbe2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fbe4 <LinkedList<UnixFile>::removeFirst()>:
c001fbe4:	83 ec 0c             	sub    esp,0xc
c001fbe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbeb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbed:	85 c0                	test   eax,eax
c001fbef:	75 12                	jne    c001fc03 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fbf1:	83 ec 0c             	sub    esp,0xc
c001fbf4:	68 d8 0f 02 c0       	push   0xc0020fd8
c001fbf9:	e8 c5 1a ff ff       	call   c00116c3 <KePanic(char const*)>
c001fbfe:	83 c4 10             	add    esp,0x10
c001fc01:	eb 7e                	jmp    c001fc81 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fc03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc07:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc0a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc0d:	85 c0                	test   eax,eax
c001fc0f:	74 10                	je     c001fc21 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fc11:	83 ec 0c             	sub    esp,0xc
c001fc14:	68 23 10 02 c0       	push   0xc0021023
c001fc19:	e8 a5 1a ff ff       	call   c00116c3 <KePanic(char const*)>
c001fc1e:	83 c4 10             	add    esp,0x10
c001fc21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc25:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc2a:	85 c0                	test   eax,eax
c001fc2c:	75 33                	jne    c001fc61 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fc2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc32:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc3c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc47:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc4a:	83 f8 01             	cmp    eax,0x1
c001fc4d:	74 21                	je     c001fc70 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fc4f:	83 ec 0c             	sub    esp,0xc
c001fc52:	68 fc 0f 02 c0       	push   0xc0020ffc
c001fc57:	e8 67 1a ff ff       	call   c00116c3 <KePanic(char const*)>
c001fc5c:	83 c4 10             	add    esp,0x10
c001fc5f:	eb 0f                	jmp    c001fc70 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fc61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc65:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc67:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fc6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc6e:	89 10                	mov    DWORD PTR [eax],edx
c001fc70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc77:	8d 50 ff             	lea    edx,[eax-0x1]
c001fc7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc7e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc81:	83 c4 0c             	add    esp,0xc
c001fc84:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fc86 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fc86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc8d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fc8e <DriverlessDevice::~DriverlessDevice()>:
c001fc8e:	ba 48 1c 02 c0       	mov    edx,0xc0021c48
c001fc93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc97:	89 10                	mov    DWORD PTR [eax],edx
c001fc99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc9d:	50                   	push   eax
c001fc9e:	e8 29 cc fe ff       	call   c000c8cc <Device::~Device()>
c001fca3:	83 c4 04             	add    esp,0x4
c001fca6:	90                   	nop
c001fca7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fca8 <DriverlessDevice::~DriverlessDevice()>:
c001fca8:	83 ec 0c             	sub    esp,0xc
c001fcab:	83 ec 0c             	sub    esp,0xc
c001fcae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcb2:	e8 d7 ff ff ff       	call   c001fc8e <DriverlessDevice::~DriverlessDevice()>
c001fcb7:	83 c4 10             	add    esp,0x10
c001fcba:	83 ec 08             	sub    esp,0x8
c001fcbd:	68 58 01 00 00       	push   0x158
c001fcc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcc6:	e8 51 ab fe ff       	call   c000a81c <operator delete(void*, unsigned long)>
c001fccb:	83 c4 10             	add    esp,0x10
c001fcce:	83 c4 0c             	add    esp,0xc
c001fcd1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fcd2 <LinkedList<Device>::addElement(Device*)>:
c001fcd2:	83 ec 0c             	sub    esp,0xc
c001fcd5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fcda:	75 10                	jne    c001fcec <LinkedList<Device>::addElement(Device*)+0x1a>
c001fcdc:	83 ec 0c             	sub    esp,0xc
c001fcdf:	68 a0 0f 02 c0       	push   0xc0020fa0
c001fce4:	e8 da 19 ff ff       	call   c00116c3 <KePanic(char const*)>
c001fce9:	83 c4 10             	add    esp,0x10
c001fcec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcf2:	85 c0                	test   eax,eax
c001fcf4:	74 3a                	je     c001fd30 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fcf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcfd:	85 c0                	test   eax,eax
c001fcff:	74 2f                	je     c001fd30 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fd01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd05:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd0c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fd12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd16:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd1a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd21:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd24:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fd2e:	eb 68                	jmp    c001fd98 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd34:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd36:	85 c0                	test   eax,eax
c001fd38:	75 4e                	jne    c001fd88 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd41:	85 c0                	test   eax,eax
c001fd43:	75 43                	jne    c001fd88 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd4d:	89 10                	mov    DWORD PTR [eax],edx
c001fd4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd57:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd61:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fd6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd72:	85 c0                	test   eax,eax
c001fd74:	74 22                	je     c001fd98 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd76:	83 ec 0c             	sub    esp,0xc
c001fd79:	68 c2 0f 02 c0       	push   0xc0020fc2
c001fd7e:	e8 40 19 ff ff       	call   c00116c3 <KePanic(char const*)>
c001fd83:	83 c4 10             	add    esp,0x10
c001fd86:	eb 10                	jmp    c001fd98 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd88:	83 ec 0c             	sub    esp,0xc
c001fd8b:	68 cc 0f 02 c0       	push   0xc0020fcc
c001fd90:	e8 2e 19 ff ff       	call   c00116c3 <KePanic(char const*)>
c001fd95:	83 c4 10             	add    esp,0x10
c001fd98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd9f:	8d 50 01             	lea    edx,[eax+0x1]
c001fda2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fda9:	90                   	nop
c001fdaa:	83 c4 0c             	add    esp,0xc
c001fdad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fdae <LinkedList<Device>::LinkedList()>:
c001fdae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fdb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdbc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fdc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdc7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fdce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdd2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fdd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fddc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fde3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fde7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fdee:	90                   	nop
c001fdef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fdf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fdf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdf4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdf6:	85 c0                	test   eax,eax
c001fdf8:	75 0e                	jne    c001fe08 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fdfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe01:	85 c0                	test   eax,eax
c001fe03:	75 03                	jne    c001fe08 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fe05:	b0 01                	mov    al,0x1
c001fe07:	c3                   	ret    
c001fe08:	b0 00                	mov    al,0x0
c001fe0a:	90                   	nop
c001fe0b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fe0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fe0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe10:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe12:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fe14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fe14:	83 ec 0c             	sub    esp,0xc
c001fe17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe1b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe1d:	85 c0                	test   eax,eax
c001fe1f:	75 17                	jne    c001fe38 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fe21:	83 ec 0c             	sub    esp,0xc
c001fe24:	68 d8 0f 02 c0       	push   0xc0020fd8
c001fe29:	e8 95 18 ff ff       	call   c00116c3 <KePanic(char const*)>
c001fe2e:	83 c4 10             	add    esp,0x10
c001fe31:	e9 96 00 00 00       	jmp    c001fecc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fe36:	66 90                	xchg   ax,ax
c001fe38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe3f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe42:	85 c0                	test   eax,eax
c001fe44:	0f 95 c0             	setne  al
c001fe47:	0f b6 c0             	movzx  eax,al
c001fe4a:	85 c0                	test   eax,eax
c001fe4c:	74 12                	je     c001fe60 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fe4e:	83 ec 0c             	sub    esp,0xc
c001fe51:	68 23 10 02 c0       	push   0xc0021023
c001fe56:	e8 68 18 ff ff       	call   c00116c3 <KePanic(char const*)>
c001fe5b:	83 c4 10             	add    esp,0x10
c001fe5e:	66 90                	xchg   ax,ax
c001fe60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe64:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe66:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe69:	85 c0                	test   eax,eax
c001fe6b:	0f 94 c0             	sete   al
c001fe6e:	0f b6 c0             	movzx  eax,al
c001fe71:	85 c0                	test   eax,eax
c001fe73:	74 33                	je     c001fea8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fe75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe79:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe83:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe8e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe91:	83 f8 01             	cmp    eax,0x1
c001fe94:	74 22                	je     c001feb8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fe96:	83 ec 0c             	sub    esp,0xc
c001fe99:	68 fc 0f 02 c0       	push   0xc0020ffc
c001fe9e:	e8 20 18 ff ff       	call   c00116c3 <KePanic(char const*)>
c001fea3:	83 c4 10             	add    esp,0x10
c001fea6:	eb 10                	jmp    c001feb8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feac:	8b 00                	mov    eax,DWORD PTR [eax]
c001feae:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001feb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb5:	89 10                	mov    DWORD PTR [eax],edx
c001feb7:	90                   	nop
c001feb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001febc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001febf:	8d 50 ff             	lea    edx,[eax-0x1]
c001fec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fec9:	8d 76 00             	lea    esi,[esi+0x0]
c001fecc:	83 c4 0c             	add    esp,0xc
c001fecf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fed0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fed0:	83 ec 0c             	sub    esp,0xc
c001fed3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fed8:	75 12                	jne    c001feec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001feda:	83 ec 0c             	sub    esp,0xc
c001fedd:	68 a0 0f 02 c0       	push   0xc0020fa0
c001fee2:	e8 dc 17 ff ff       	call   c00116c3 <KePanic(char const*)>
c001fee7:	83 c4 10             	add    esp,0x10
c001feea:	66 90                	xchg   ax,ax
c001feec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fef2:	85 c0                	test   eax,eax
c001fef4:	74 36                	je     c001ff2c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fefa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fefd:	85 c0                	test   eax,eax
c001feff:	74 2b                	je     c001ff2c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ff01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff05:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff0c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ff0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff13:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff17:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff21:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ff28:	eb 6a                	jmp    c001ff94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff2a:	66 90                	xchg   ax,ax
c001ff2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff30:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff32:	85 c0                	test   eax,eax
c001ff34:	75 4e                	jne    c001ff84 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff3d:	85 c0                	test   eax,eax
c001ff3f:	75 43                	jne    c001ff84 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff45:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff49:	89 10                	mov    DWORD PTR [eax],edx
c001ff4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff4f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff53:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff5d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ff64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff68:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff6b:	85 c0                	test   eax,eax
c001ff6d:	74 25                	je     c001ff94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff6f:	83 ec 0c             	sub    esp,0xc
c001ff72:	68 c2 0f 02 c0       	push   0xc0020fc2
c001ff77:	e8 47 17 ff ff       	call   c00116c3 <KePanic(char const*)>
c001ff7c:	83 c4 10             	add    esp,0x10
c001ff7f:	eb 13                	jmp    c001ff94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff81:	8d 76 00             	lea    esi,[esi+0x0]
c001ff84:	83 ec 0c             	sub    esp,0xc
c001ff87:	68 cc 0f 02 c0       	push   0xc0020fcc
c001ff8c:	e8 32 17 ff ff       	call   c00116c3 <KePanic(char const*)>
c001ff91:	83 c4 10             	add    esp,0x10
c001ff94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff98:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff9b:	8d 50 01             	lea    edx,[eax+0x1]
c001ff9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ffa5:	90                   	nop
c001ffa6:	83 c4 0c             	add    esp,0xc
c001ffa9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ffac <ACPI::~ACPI()>:
c001ffac:	83 ec 0c             	sub    esp,0xc
c001ffaf:	ba d8 22 02 c0       	mov    edx,0xc00222d8
c001ffb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb8:	89 10                	mov    DWORD PTR [eax],edx
c001ffba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffbe:	83 ec 0c             	sub    esp,0xc
c001ffc1:	50                   	push   eax
c001ffc2:	e8 05 c9 fe ff       	call   c000c8cc <Device::~Device()>
c001ffc7:	83 c4 10             	add    esp,0x10
c001ffca:	90                   	nop
c001ffcb:	83 c4 0c             	add    esp,0xc
c001ffce:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ffd0 <ACPI::~ACPI()>:
c001ffd0:	83 ec 0c             	sub    esp,0xc
c001ffd3:	83 ec 0c             	sub    esp,0xc
c001ffd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffda:	e8 cd ff ff ff       	call   c001ffac <ACPI::~ACPI()>
c001ffdf:	83 c4 10             	add    esp,0x10
c001ffe2:	83 ec 08             	sub    esp,0x8
c001ffe5:	68 64 12 00 00       	push   0x1264
c001ffea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffee:	e8 29 a8 fe ff       	call   c000a81c <operator delete(void*, unsigned long)>
c001fff3:	83 c4 10             	add    esp,0x10
c001fff6:	83 c4 0c             	add    esp,0xc
c001fff9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001fffc <LinkedList<Device>::~LinkedList()>:
c001fffc:	90                   	nop
c001fffd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0020000 <LinkedList<Device>::isEmpty()>:
c0020000:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020004:	8b 00                	mov    eax,DWORD PTR [eax]
c0020006:	85 c0                	test   eax,eax
c0020008:	75 0e                	jne    c0020018 <LinkedList<Device>::isEmpty()+0x18>
c002000a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002000e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020011:	85 c0                	test   eax,eax
c0020013:	75 03                	jne    c0020018 <LinkedList<Device>::isEmpty()+0x18>
c0020015:	b0 01                	mov    al,0x1
c0020017:	c3                   	ret    
c0020018:	b0 00                	mov    al,0x0
c002001a:	90                   	nop
c002001b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002001c <LinkedList<Device>::getFirstElement()>:
c002001c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020020:	8b 00                	mov    eax,DWORD PTR [eax]
c0020022:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0020024 <LinkedList<Device>::removeFirst()>:
c0020024:	83 ec 0c             	sub    esp,0xc
c0020027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002002b:	8b 00                	mov    eax,DWORD PTR [eax]
c002002d:	85 c0                	test   eax,eax
c002002f:	75 17                	jne    c0020048 <LinkedList<Device>::removeFirst()+0x24>
c0020031:	83 ec 0c             	sub    esp,0xc
c0020034:	68 d8 0f 02 c0       	push   0xc0020fd8
c0020039:	e8 85 16 ff ff       	call   c00116c3 <KePanic(char const*)>
c002003e:	83 c4 10             	add    esp,0x10
c0020041:	e9 92 00 00 00       	jmp    c00200d8 <LinkedList<Device>::removeFirst()+0xb4>
c0020046:	66 90                	xchg   ax,ax
c0020048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002004c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002004f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020055:	85 c0                	test   eax,eax
c0020057:	74 13                	je     c002006c <LinkedList<Device>::removeFirst()+0x48>
c0020059:	83 ec 0c             	sub    esp,0xc
c002005c:	68 23 10 02 c0       	push   0xc0021023
c0020061:	e8 5d 16 ff ff       	call   c00116c3 <KePanic(char const*)>
c0020066:	83 c4 10             	add    esp,0x10
c0020069:	8d 76 00             	lea    esi,[esi+0x0]
c002006c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020070:	8b 00                	mov    eax,DWORD PTR [eax]
c0020072:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020078:	85 c0                	test   eax,eax
c002007a:	75 34                	jne    c00200b0 <LinkedList<Device>::removeFirst()+0x8c>
c002007c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020080:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002008a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020095:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020098:	83 f8 01             	cmp    eax,0x1
c002009b:	74 27                	je     c00200c4 <LinkedList<Device>::removeFirst()+0xa0>
c002009d:	83 ec 0c             	sub    esp,0xc
c00200a0:	68 fc 0f 02 c0       	push   0xc0020ffc
c00200a5:	e8 19 16 ff ff       	call   c00116c3 <KePanic(char const*)>
c00200aa:	83 c4 10             	add    esp,0x10
c00200ad:	eb 15                	jmp    c00200c4 <LinkedList<Device>::removeFirst()+0xa0>
c00200af:	90                   	nop
c00200b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00200b6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00200bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c0:	89 10                	mov    DWORD PTR [eax],edx
c00200c2:	66 90                	xchg   ax,ax
c00200c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00200cb:	8d 50 ff             	lea    edx,[eax-0x1]
c00200ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00200d5:	8d 76 00             	lea    esi,[esi+0x0]
c00200d8:	83 c4 0c             	add    esp,0xc
c00200db:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00200dc <CPU::~CPU()>:
c00200dc:	83 ec 0c             	sub    esp,0xc
c00200df:	ba 80 24 02 c0       	mov    edx,0xc0022480
c00200e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e8:	89 10                	mov    DWORD PTR [eax],edx
c00200ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200ee:	83 ec 0c             	sub    esp,0xc
c00200f1:	50                   	push   eax
c00200f2:	e8 d5 c7 fe ff       	call   c000c8cc <Device::~Device()>
c00200f7:	83 c4 10             	add    esp,0x10
c00200fa:	90                   	nop
c00200fb:	83 c4 0c             	add    esp,0xc
c00200fe:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0020100 <CPU::~CPU()>:
c0020100:	83 ec 0c             	sub    esp,0xc
c0020103:	83 ec 0c             	sub    esp,0xc
c0020106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002010a:	e8 cd ff ff ff       	call   c00200dc <CPU::~CPU()>
c002010f:	83 c4 10             	add    esp,0x10
c0020112:	83 ec 08             	sub    esp,0x8
c0020115:	68 94 11 00 00       	push   0x1194
c002011a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002011e:	e8 f9 a6 fe ff       	call   c000a81c <operator delete(void*, unsigned long)>
c0020123:	83 c4 10             	add    esp,0x10
c0020126:	83 c4 0c             	add    esp,0xc
c0020129:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002012c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002012c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020130:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020133:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0020134 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0020134:	90                   	nop
c0020135:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020138 <ThreadControlBlock::ThreadControlBlock()>:
c0020138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002013c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020143:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020147:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002014e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020152:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020159:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002015d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0020164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020168:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002016f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020173:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020177:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002017b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002017f:	90                   	nop
c0020180:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020184 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020184:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020188:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002018e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020192:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020199:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002019d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00201a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201a8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00201ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201b2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00201b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201bd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00201c4:	90                   	nop
c00201c5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00201c6 <PCI::~PCI()>:
c00201c6:	83 ec 0c             	sub    esp,0xc
c00201c9:	ba 60 33 02 c0       	mov    edx,0xc0023360
c00201ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d2:	89 10                	mov    DWORD PTR [eax],edx
c00201d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d8:	83 ec 0c             	sub    esp,0xc
c00201db:	50                   	push   eax
c00201dc:	e8 83 c1 fe ff       	call   c000c364 <Bus::~Bus()>
c00201e1:	83 c4 10             	add    esp,0x10
c00201e4:	90                   	nop
c00201e5:	83 c4 0c             	add    esp,0xc
c00201e8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00201ea <PCI::~PCI()>:
c00201ea:	83 ec 0c             	sub    esp,0xc
c00201ed:	83 ec 0c             	sub    esp,0xc
c00201f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201f4:	e8 cd ff ff ff       	call   c00201c6 <PCI::~PCI()>
c00201f9:	83 c4 10             	add    esp,0x10
c00201fc:	83 ec 08             	sub    esp,0x8
c00201ff:	68 5c 01 00 00       	push   0x15c
c0020204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020208:	e8 0f a6 fe ff       	call   c000a81c <operator delete(void*, unsigned long)>
c002020d:	83 c4 10             	add    esp,0x10
c0020210:	83 c4 0c             	add    esp,0xc
c0020213:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0020214 <IDE::~IDE()>:
c0020214:	83 ec 0c             	sub    esp,0xc
c0020217:	ba 14 34 02 c0       	mov    edx,0xc0023414
c002021c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020220:	89 10                	mov    DWORD PTR [eax],edx
c0020222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020226:	83 ec 0c             	sub    esp,0xc
c0020229:	50                   	push   eax
c002022a:	e8 2d cb fe ff       	call   c000cd5c <HardDiskController::~HardDiskController()>
c002022f:	83 c4 10             	add    esp,0x10
c0020232:	90                   	nop
c0020233:	83 c4 0c             	add    esp,0xc
c0020236:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0020238 <IDE::~IDE()>:
c0020238:	83 ec 0c             	sub    esp,0xc
c002023b:	83 ec 0c             	sub    esp,0xc
c002023e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020242:	e8 cd ff ff ff       	call   c0020214 <IDE::~IDE()>
c0020247:	83 c4 10             	add    esp,0x10
c002024a:	83 ec 08             	sub    esp,0x8
c002024d:	68 70 02 00 00       	push   0x270
c0020252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020256:	e8 c1 a5 fe ff       	call   c000a81c <operator delete(void*, unsigned long)>
c002025b:	83 c4 10             	add    esp,0x10
c002025e:	83 c4 0c             	add    esp,0xc
c0020261:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020262 <SATABus::~SATABus()>:
c0020262:	83 ec 0c             	sub    esp,0xc
c0020265:	ba 64 34 02 c0       	mov    edx,0xc0023464
c002026a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002026e:	89 10                	mov    DWORD PTR [eax],edx
c0020270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020274:	83 ec 0c             	sub    esp,0xc
c0020277:	50                   	push   eax
c0020278:	e8 df ca fe ff       	call   c000cd5c <HardDiskController::~HardDiskController()>
c002027d:	83 c4 10             	add    esp,0x10
c0020280:	90                   	nop
c0020281:	83 c4 0c             	add    esp,0xc
c0020284:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020286 <SATABus::~SATABus()>:
c0020286:	83 ec 0c             	sub    esp,0xc
c0020289:	83 ec 0c             	sub    esp,0xc
c002028c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020290:	e8 cd ff ff ff       	call   c0020262 <SATABus::~SATABus()>
c0020295:	83 c4 10             	add    esp,0x10
c0020298:	83 ec 08             	sub    esp,0x8
c002029b:	68 64 01 00 00       	push   0x164
c00202a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202a4:	e8 73 a5 fe ff       	call   c000a81c <operator delete(void*, unsigned long)>
c00202a9:	83 c4 10             	add    esp,0x10
c00202ac:	83 c4 0c             	add    esp,0xc
c00202af:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00202b0 <ATA::~ATA()>:
c00202b0:	83 ec 0c             	sub    esp,0xc
c00202b3:	ba a4 34 02 c0       	mov    edx,0xc00234a4
c00202b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202bc:	89 10                	mov    DWORD PTR [eax],edx
c00202be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202c2:	83 ec 0c             	sub    esp,0xc
c00202c5:	50                   	push   eax
c00202c6:	e8 73 cb fe ff       	call   c000ce3e <PhysicalDisk::~PhysicalDisk()>
c00202cb:	83 c4 10             	add    esp,0x10
c00202ce:	90                   	nop
c00202cf:	83 c4 0c             	add    esp,0xc
c00202d2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00202d4 <ATA::~ATA()>:
c00202d4:	83 ec 0c             	sub    esp,0xc
c00202d7:	83 ec 0c             	sub    esp,0xc
c00202da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202de:	e8 cd ff ff ff       	call   c00202b0 <ATA::~ATA()>
c00202e3:	83 c4 10             	add    esp,0x10
c00202e6:	83 ec 08             	sub    esp,0x8
c00202e9:	68 7c 01 00 00       	push   0x17c
c00202ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202f2:	e8 25 a5 fe ff       	call   c000a81c <operator delete(void*, unsigned long)>
c00202f7:	83 c4 10             	add    esp,0x10
c00202fa:	83 c4 0c             	add    esp,0xc
c00202fd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00202fe <ATAPI::~ATAPI()>:
c00202fe:	83 ec 0c             	sub    esp,0xc
c0020301:	ba ec 34 02 c0       	mov    edx,0xc00234ec
c0020306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002030a:	89 10                	mov    DWORD PTR [eax],edx
c002030c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020310:	83 ec 0c             	sub    esp,0xc
c0020313:	50                   	push   eax
c0020314:	e8 25 cb fe ff       	call   c000ce3e <PhysicalDisk::~PhysicalDisk()>
c0020319:	83 c4 10             	add    esp,0x10
c002031c:	90                   	nop
c002031d:	83 c4 0c             	add    esp,0xc
c0020320:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020322 <ATAPI::~ATAPI()>:
c0020322:	83 ec 0c             	sub    esp,0xc
c0020325:	83 ec 0c             	sub    esp,0xc
c0020328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002032c:	e8 cd ff ff ff       	call   c00202fe <ATAPI::~ATAPI()>
c0020331:	83 c4 10             	add    esp,0x10
c0020334:	83 ec 08             	sub    esp,0x8
c0020337:	68 84 01 00 00       	push   0x184
c002033c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020340:	e8 d7 a4 fe ff       	call   c000a81c <operator delete(void*, unsigned long)>
c0020345:	83 c4 10             	add    esp,0x10
c0020348:	83 c4 0c             	add    esp,0xc
c002034b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002034c <SATA::~SATA()>:
c002034c:	83 ec 0c             	sub    esp,0xc
c002034f:	ba a0 35 02 c0       	mov    edx,0xc00235a0
c0020354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020358:	89 10                	mov    DWORD PTR [eax],edx
c002035a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002035e:	83 ec 0c             	sub    esp,0xc
c0020361:	50                   	push   eax
c0020362:	e8 d7 ca fe ff       	call   c000ce3e <PhysicalDisk::~PhysicalDisk()>
c0020367:	83 c4 10             	add    esp,0x10
c002036a:	90                   	nop
c002036b:	83 c4 0c             	add    esp,0xc
c002036e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020370 <SATA::~SATA()>:
c0020370:	83 ec 0c             	sub    esp,0xc
c0020373:	83 ec 0c             	sub    esp,0xc
c0020376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002037a:	e8 cd ff ff ff       	call   c002034c <SATA::~SATA()>
c002037f:	83 c4 10             	add    esp,0x10
c0020382:	83 ec 08             	sub    esp,0x8
c0020385:	68 7c 01 00 00       	push   0x17c
c002038a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002038e:	e8 89 a4 fe ff       	call   c000a81c <operator delete(void*, unsigned long)>
c0020393:	83 c4 10             	add    esp,0x10
c0020396:	83 c4 0c             	add    esp,0xc
c0020399:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002039a <SATAPI::~SATAPI()>:
c002039a:	83 ec 0c             	sub    esp,0xc
c002039d:	ba c4 36 02 c0       	mov    edx,0xc00236c4
c00203a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203a6:	89 10                	mov    DWORD PTR [eax],edx
c00203a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203ac:	83 ec 0c             	sub    esp,0xc
c00203af:	50                   	push   eax
c00203b0:	e8 89 ca fe ff       	call   c000ce3e <PhysicalDisk::~PhysicalDisk()>
c00203b5:	83 c4 10             	add    esp,0x10
c00203b8:	90                   	nop
c00203b9:	83 c4 0c             	add    esp,0xc
c00203bc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00203be <SATAPI::~SATAPI()>:
c00203be:	83 ec 0c             	sub    esp,0xc
c00203c1:	83 ec 0c             	sub    esp,0xc
c00203c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203c8:	e8 cd ff ff ff       	call   c002039a <SATAPI::~SATAPI()>
c00203cd:	83 c4 10             	add    esp,0x10
c00203d0:	83 ec 08             	sub    esp,0x8
c00203d3:	68 84 01 00 00       	push   0x184
c00203d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203dc:	e8 3b a4 fe ff       	call   c000a81c <operator delete(void*, unsigned long)>
c00203e1:	83 c4 10             	add    esp,0x10
c00203e4:	83 c4 0c             	add    esp,0xc
c00203e7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00203e8 <IOAPIC::~IOAPIC()>:
c00203e8:	83 ec 0c             	sub    esp,0xc
c00203eb:	ba 04 37 02 c0       	mov    edx,0xc0023704
c00203f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203f4:	89 10                	mov    DWORD PTR [eax],edx
c00203f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203fa:	83 ec 0c             	sub    esp,0xc
c00203fd:	50                   	push   eax
c00203fe:	e8 c9 c4 fe ff       	call   c000c8cc <Device::~Device()>
c0020403:	83 c4 10             	add    esp,0x10
c0020406:	90                   	nop
c0020407:	83 c4 0c             	add    esp,0xc
c002040a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002040c <IOAPIC::~IOAPIC()>:
c002040c:	83 ec 0c             	sub    esp,0xc
c002040f:	83 ec 0c             	sub    esp,0xc
c0020412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020416:	e8 cd ff ff ff       	call   c00203e8 <IOAPIC::~IOAPIC()>
c002041b:	83 c4 10             	add    esp,0x10
c002041e:	83 ec 08             	sub    esp,0x8
c0020421:	68 68 01 00 00       	push   0x168
c0020426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002042a:	e8 ed a3 fe ff       	call   c000a81c <operator delete(void*, unsigned long)>
c002042f:	83 c4 10             	add    esp,0x10
c0020432:	83 c4 0c             	add    esp,0xc
c0020435:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020438 <APICTimer::~APICTimer()>:
c0020438:	83 ec 0c             	sub    esp,0xc
c002043b:	ba 4c 37 02 c0       	mov    edx,0xc002374c
c0020440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020444:	89 10                	mov    DWORD PTR [eax],edx
c0020446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002044a:	83 ec 0c             	sub    esp,0xc
c002044d:	50                   	push   eax
c002044e:	e8 5d df fe ff       	call   c000e3b0 <Timer::~Timer()>
c0020453:	83 c4 10             	add    esp,0x10
c0020456:	90                   	nop
c0020457:	83 c4 0c             	add    esp,0xc
c002045a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002045c <APICTimer::~APICTimer()>:
c002045c:	83 ec 0c             	sub    esp,0xc
c002045f:	83 ec 0c             	sub    esp,0xc
c0020462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020466:	e8 cd ff ff ff       	call   c0020438 <APICTimer::~APICTimer()>
c002046b:	83 c4 10             	add    esp,0x10
c002046e:	83 ec 08             	sub    esp,0x8
c0020471:	68 60 01 00 00       	push   0x160
c0020476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002047a:	e8 9d a3 fe ff       	call   c000a81c <operator delete(void*, unsigned long)>
c002047f:	83 c4 10             	add    esp,0x10
c0020482:	83 c4 0c             	add    esp,0xc
c0020485:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020488 <PIT::~PIT()>:
c0020488:	83 ec 0c             	sub    esp,0xc
c002048b:	ba 9c 37 02 c0       	mov    edx,0xc002379c
c0020490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020494:	89 10                	mov    DWORD PTR [eax],edx
c0020496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002049a:	83 ec 0c             	sub    esp,0xc
c002049d:	50                   	push   eax
c002049e:	e8 0d df fe ff       	call   c000e3b0 <Timer::~Timer()>
c00204a3:	83 c4 10             	add    esp,0x10
c00204a6:	90                   	nop
c00204a7:	83 c4 0c             	add    esp,0xc
c00204aa:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00204ac <PIT::~PIT()>:
c00204ac:	83 ec 0c             	sub    esp,0xc
c00204af:	83 ec 0c             	sub    esp,0xc
c00204b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204b6:	e8 cd ff ff ff       	call   c0020488 <PIT::~PIT()>
c00204bb:	83 c4 10             	add    esp,0x10
c00204be:	83 ec 08             	sub    esp,0x8
c00204c1:	68 5c 01 00 00       	push   0x15c
c00204c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204ca:	e8 4d a3 fe ff       	call   c000a81c <operator delete(void*, unsigned long)>
c00204cf:	83 c4 10             	add    esp,0x10
c00204d2:	83 c4 0c             	add    esp,0xc
c00204d5:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be b1 25 02 c0       	mov    esi,0xc00225b1
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be cd 25 02 c0       	mov    esi,0xc00225cd
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
