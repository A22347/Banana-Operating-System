
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3f f6 00 00       	call   c000f65f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 c3 83 02 00       	call   c00283e8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 3c 90 02 c0       	mov    ebx,0xc002903c
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 48 90 02 c0    	cmp    ebx,0xc0029048
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 78 cf 02 c0       	mov    eax,0xc002cf78
c0000049:	3d 78 cf 02 c0       	cmp    eax,0xc002cf78
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 78 cf 02 c0       	push   0xc002cf78
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 78 cf 02 c0       	mov    eax,0xc002cf78
c0000075:	2d 78 cf 02 c0       	sub    eax,0xc002cf78
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 78 cf 02 c0       	push   0xc002cf78
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d a8 d5 02 c0 00 	cmp    BYTE PTR ds:0xc002d5a8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 50 90 02 c0       	mov    ebx,0xc0029050
c00000bb:	81 eb 4c 90 02 c0    	sub    ebx,0xc002904c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 4c 90 02 c0       	mov    esi,0xc002904c
c00000ca:	a1 ac d5 02 c0       	mov    eax,ds:0xc002d5ac
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ac d5 02 c0       	mov    ds:0xc002d5ac,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ac d5 02 c0       	mov    eax,ds:0xc002d5ac
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 78 cf 02 c0       	push   0xc002cf78
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 a8 d5 02 c0 01 	mov    BYTE PTR ds:0xc002d5a8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 b0 d5 02 c0       	push   0xc002d5b0
c000012c:	68 78 cf 02 c0       	push   0xc002cf78
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 21 cf 01 00       	call   c001d2c4 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 be 20 01 00       	call   c0012479 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 ff ce 01 00       	call   c001d2c4 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 a7 d3 01 00       	call   c001d78b <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 bd d9 01 00       	call   c001ddaa <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 f0 d9 02 c0 	lgdtd  ds:0xc002d9f0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 27 3e 01 00       	call   c0014409 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 c8 d5 02 c0       	mov    ds:0xc002d5c8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 c8 d5 02 c0    	mov    DWORD PTR ds:0xc002d5c8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d c8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5c8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 60 90 02 c0 02 	test   BYTE PTR [edx-0x3ffd6fa0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 60 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6fa0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 60 90 02 c0 08 	test   BYTE PTR [edx-0x3ffd6fa0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 60 90 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6fa0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 60 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6fa0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d e0 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5e0
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d e0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e0,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 e4 d5 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2a1c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 e4 d5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a1c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d e0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e0,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 0c d6 02 c0    	cmp    DWORD PTR ds:0xc002d60c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 1c d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d61c
c0000e38:	c7 42 0c 14 d6 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d614
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 1c d6 02 c0    	mov    DWORD PTR ds:0xc002d61c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 0c d6 02 c0    	mov    DWORD PTR ds:0xc002d60c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 e0 d5 02 c0 02 	test   BYTE PTR ds:0xc002d5e0,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d e0 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d5e0
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 e4 d5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2a1c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 e4 d5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2a1c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 14 d6 02 c0 	lea    edx,[eax*8-0x3ffd29ec]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 20 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d620
c00011ba:	81 fb 14 d6 02 c0    	cmp    ebx,0xc002d614
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 14 d6 02 c0       	cmp    eax,0xc002d614
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 10 d6 02 c0    	cmp    DWORD PTR ds:0xc002d610,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 1c d6 02 c0       	mov    ds:0xc002d61c,eax
c00011f6:	a3 20 d6 02 c0       	mov    ds:0xc002d620,eax
c00011fb:	a3 10 d6 02 c0       	mov    ds:0xc002d610,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 14 d6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d614
c0001209:	c7 40 0c 14 d6 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d614
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 20 d6 02 c0       	mov    ds:0xc002d620,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 14 d6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d614
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 d8 d5 02 c0 	lea    ebp,[edx*4-0x3ffd2a28]
c000125a:	8b 14 95 e0 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2a20]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 e0 d5 02 c0 	lea    ecx,[edx*4-0x3ffd2a20]
c0001275:	8b 14 95 e0 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2a20]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 14 d9 02 c0 	or     DWORD PTR [edi*4-0x3ffd26ec],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 14 d6 02 c0 	lea    eax,[eax*8-0x3ffd29ec]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 1c d6 02 c0    	mov    DWORD PTR ds:0xc002d61c,ecx
c000132f:	89 0d 20 d6 02 c0    	mov    DWORD PTR ds:0xc002d620,ecx
c0001335:	c7 41 08 14 d6 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d614
c000133c:	c7 41 0c 14 d6 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d614
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 0c d6 02 c0 	lea    edx,[ecx*8-0x3ffd29f4]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 14 d9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd26ec]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 14 d9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd26ec]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 0c d6 02 c0 	lea    edx,[eax*4-0x3ffd29f4]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 14 d9 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd26ec],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 1c d6 02 c0    	mov    DWORD PTR ds:0xc002d61c,edi
c0001402:	89 3d 20 d6 02 c0    	mov    DWORD PTR ds:0xc002d620,edi
c0001408:	c7 47 08 14 d6 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d614
c000140f:	c7 47 0c 14 d6 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d614
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 10 d6 02 c0    	mov    DWORD PTR ds:0xc002d610,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 0c d6 02 c0       	mov    eax,ds:0xc002d60c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 0c d6 02 c0    	mov    DWORD PTR ds:0xc002d60c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba e0 d5 02 c0       	mov    edx,0xc002d5e0
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d e0 d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d5e0,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 34 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d934
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 34 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d934,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 34 d9 02 c0    	mov    DWORD PTR ds:0xc002d934,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 0c d6 02 c0    	cmp    DWORD PTR ds:0xc002d60c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 0c d6 02 c0    	mov    DWORD PTR ds:0xc002d60c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d e0 d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d5e0,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 3c d9 02 c0    	push   DWORD PTR ds:0xc002d93c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d e0 d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d5e0,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 3c d9 02 c0       	mov    eax,ds:0xc002d93c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 0c d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d60c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 0c d6 02 c0       	mov    eax,ds:0xc002d60c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 e4 d5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2a1c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 14 d6 02 c0       	mov    eax,0xc002d614
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 0c d9 02 c0       	cmp    eax,0xc002d90c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 48 d9 02 c0       	mov    eax,ds:0xc002d948
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 30 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d930
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 44 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d944
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 54 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d954
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 64 91 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6e9c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 e0 d5 02 c0       	mov    eax,ds:0xc002d5e0
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 e0 d5 02 c0       	mov    ds:0xc002d5e0,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 24 d9 02 c0    	mov    DWORD PTR ds:0xc002d924,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 28 d9 02 c0    	mov    DWORD PTR ds:0xc002d928,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 2c d9 02 c0    	mov    DWORD PTR ds:0xc002d92c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 34 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d934,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 a0 10 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcef60]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 e8 eb 01 00       	jmp    c00207da <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 a0 10 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcef60]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 19 ec 01 00       	jmp    c0020821 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 a0 10 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcef60]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 41 ec 01 00       	jmp    c0020868 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 3a 48 02 00       	call   c0026744 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 80 92 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6d80]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 80 92 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6d80]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 80 91 02 c0       	mov    edx,0xc0029180
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba a0 92 02 c0       	mov    edx,0xc00292a0
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba b4 be 02 c0       	mov    edx,0xc002beb4
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba ac 92 02 c0       	mov    edx,0xc00292ac
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 90 92 02 c0       	mov    edx,0xc0029290
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 80 d9 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2680]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 60 d9 02 c0    	mov    ax,ds:0xc002d960
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 60 d9 02 c0    	mov    ds:0xc002d960,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 37 36 02 00       	call   c0026744 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 b2 92 02 c0       	mov    eax,0xc00292b2
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 00 92 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6e00]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 bb 92 02 c0       	mov    eax,0xc00292bb
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 80 92 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6d80]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 02 20 02 00       	call   c0026744 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 90 92 02 c0       	mov    edx,0xc0029290
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 80 91 02 c0       	mov    edx,0xc0029180
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 90 91 02 c0       	mov    edx,0xc0029190
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 80 d9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2680]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 80 d9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2680],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 c9 09 02 00       	call   c0026744 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 af 09 02 00       	call   c0026744 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 d7 91 02 c0       	mov    eax,0xc00291d7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 d0 91 02 c0       	mov    eax,0xc00291d0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 80 d9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2680]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be c0 91 02 c0       	mov    esi,0xc00291c0
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 f2 f0 01 00       	call   c0026744 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba a0 92 02 c0       	mov    edx,0xc00292a0
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba a0 91 02 c0       	mov    edx,0xc00291a0
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba b0 91 02 c0       	mov    edx,0xc00291b0
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba c2 92 02 c0       	mov    edx,0xc00292c2
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba ce 92 02 c0       	mov    edx,0xc00292ce
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba e2 92 02 c0       	mov    edx,0xc00292e2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 30 71 00 00       	call   c000f599 <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2a 71 00 00       	call   c000f5a9 <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c 00 96 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029600
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 00 96 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029600
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 00 94 02 c0       	mov    eax,0xc0029400
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 40 93 02 c0       	mov    eax,0xc0029340
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 00 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d00]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 6f 6e 00 00       	call   c000f5a9 <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 59 6e 00 00       	call   c000f5a9 <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 46 fa 01 00       	call   c0028217 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 09 fa 01 00       	call   c00281f9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 dd f9 01 00       	call   c0028217 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 90 f0 01 00       	call   c002791c <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 12 fb 01 00       	call   c00283b0 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 57 f9 01 00       	call   c0028217 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 99 f8 01 00       	call   c0028217 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 66 f8 01 00       	call   c00281f9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 53 f7 01 00       	call   c0028217 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 1b f7 01 00       	call   c00281f9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 38 6a 00 00       	call   c000f5c9 <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d3 69 00 00       	call   c000f5a9 <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 00 97 02 c0       	mov    eax,0xc0029700
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 27 f5 01 00       	call   c0028217 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 ec f4 01 00       	call   c00281f9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 60 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd64a0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 fc f1 01 00       	call   c0027fab <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 7a eb 01 00       	call   c0027948 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 36 f4 01 00       	call   c002821b <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 24 f5 01 00       	call   c002833f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 0e eb 01 00       	call   c0027948 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 b9 f3 01 00       	call   c0028215 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 9a f3 01 00       	call   c0028219 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 30 f5 01 00       	call   c00283d0 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 da f0 01 00       	call   c0027fab <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 58 ea 01 00       	call   c0027948 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 14 f3 01 00       	call   c002821b <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 02 f4 01 00       	call   c002833f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 ec e9 01 00       	call   c0027948 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 97 f2 01 00       	call   c0028215 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 77 f2 01 00       	call   c0028219 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 0c f4 01 00       	call   c00283d0 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 b2 f1 01 00       	call   c0028217 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 70 f1 01 00       	call   c00281f9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 58 f1 01 00       	call   c0028217 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 ca ee 01 00       	call   c0027fab <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 cc e1 01 00       	call   c00272cb <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 2f e8 01 00       	call   c0027948 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 81 ee 01 00       	call   c0027fab <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 87 e1 01 00       	call   c00272cb <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 56 ee 01 00       	call   c0027fab <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 a6 f0 01 00       	call   c0028215 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 83 e7 01 00       	call   c002791c <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 05 f2 01 00       	call   c00283b0 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 2c f0 01 00       	call   c00281f9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 27 e7 01 00       	call   c002791c <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 a5 ed 01 00       	call   c0027fab <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 28 e7 01 00       	call   c0027948 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 7a ed 01 00       	call   c0027fab <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 e1 e9 01 00       	call   c0027c2c <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 60 e0 01 00       	call   c00272cb <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 c0 d9 01 00       	call   c0026c60 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 97 f0 01 00       	call   c002833f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 80 e6 01 00       	call   c0027948 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 67 f0 01 00       	call   c002833f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 d9 df 01 00       	call   c00272cb <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 12 ef 01 00       	call   c002821b <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 fa e8 01 00       	call   c0027c2c <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 80 df 01 00       	call   c00272cb <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 6e f0 01 00       	call   c00283d0 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 40 ec 01 00       	call   c0027fab <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 97 e5 01 00       	call   c002791c <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 76 ee 01 00       	call   c0028217 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 0f df 01 00       	call   c00272cb <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 3b e5 01 00       	call   c002791c <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 dd ef 01 00       	call   c00283d0 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 8e eb 01 00       	call   c0027fab <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 0b e5 01 00       	call   c0027948 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 5e eb 01 00       	call   c0027fab <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 64 de 01 00       	call   c00272cb <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 34 eb 01 00       	call   c0027fab <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 86 ed 01 00       	call   c0028217 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 5d e4 01 00       	call   c002791c <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 df ee 01 00       	call   c00283b0 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 06 ed 01 00       	call   c00281f9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 00 e4 01 00       	call   c002791c <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 7e ea 01 00       	call   c0027fab <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 01 e4 01 00       	call   c0027948 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 53 ea 01 00       	call   c0027fab <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 ba e6 01 00       	call   c0027c2c <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 39 dd 01 00       	call   c00272cb <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 89 d6 01 00       	call   c0026c60 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 60 ed 01 00       	call   c002833f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 49 e3 01 00       	call   c0027948 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 30 ed 01 00       	call   c002833f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 a2 dc 01 00       	call   c00272cb <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 db eb 01 00       	call   c002821b <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 c2 e5 01 00       	call   c0027c2c <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 41 dc 01 00       	call   c00272cb <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 2f ed 01 00       	call   c00283d0 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 01 e9 01 00       	call   c0027fab <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 58 e2 01 00       	call   c002791c <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 37 eb 01 00       	call   c0028217 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 d0 db 01 00       	call   c00272cb <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 fc e1 01 00       	call   c002791c <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 71 e8 01 00       	call   c0027fab <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 77 db 01 00       	call   c00272cb <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 c0 9b 02 c0       	mov    eax,0xc0029bc0
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 d4 9b 02 c0       	mov    eax,0xc0029bd4
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6c 5d 00 00       	call   c000f5a9 <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 6e 5d 00 00       	call   c000f5c9 <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 ec e6 01 00       	call   c0027fab <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 6a e0 01 00       	call   c0027948 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 fc d2 01 00       	call   c0026c60 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 d3 e9 01 00       	call   c002833f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 bc df 01 00       	call   c0027948 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 9f e9 01 00       	call   c002833f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 11 d9 01 00       	call   c00272cb <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 71 e9 01 00       	call   c002833f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 60 df 01 00       	call   c0027948 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 c9 d8 01 00       	call   c00272cb <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 ea d1 01 00       	call   c0026c60 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 c1 e8 01 00       	call   c002833f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 aa de 01 00       	call   c0027948 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 8d e8 01 00       	call   c002833f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 ff d7 01 00       	call   c00272cb <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 5f e8 01 00       	call   c002833f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 4e de 01 00       	call   c0027948 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 b7 d7 01 00       	call   c00272cb <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 95 d7 01 00       	call   c00272cb <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 71 d0 01 00       	call   c0026c60 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 48 e7 01 00       	call   c002833f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 31 dd 01 00       	call   c0027948 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 14 e7 01 00       	call   c002833f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 86 d6 01 00       	call   c00272cb <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 e6 e6 01 00       	call   c002833f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 cf dc 01 00       	call   c0027948 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 38 d6 01 00       	call   c00272cb <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 98 e6 01 00       	call   c002833f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 81 dc 01 00       	call   c0027948 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 ea d5 01 00       	call   c00272cb <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 ff ce 01 00       	call   c0026c60 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 d6 e5 01 00       	call   c002833f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 bf db 01 00       	call   c0027948 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 a6 e5 01 00       	call   c002833f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 18 d5 01 00       	call   c00272cb <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 78 e5 01 00       	call   c002833f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 61 db 01 00       	call   c0027948 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 ca d4 01 00       	call   c00272cb <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 2a e5 01 00       	call   c002833f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 13 db 01 00       	call   c0027948 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 7c d4 01 00       	call   c00272cb <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 50 d4 01 00       	call   c00272cb <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 ad da 01 00       	call   c0027948 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 69 e3 01 00       	call   c002821b <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 f8 d3 01 00       	call   c00272cb <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 55 da 01 00       	call   c0027948 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 11 e3 01 00       	call   c002821b <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 8b cc 01 00       	call   c0026c60 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 62 e3 01 00       	call   c002833f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 4b d9 01 00       	call   c0027948 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 2e e3 01 00       	call   c002833f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 a0 d2 01 00       	call   c00272cb <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 00 e3 01 00       	call   c002833f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 e9 d8 01 00       	call   c0027948 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 52 d2 01 00       	call   c00272cb <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 b2 e2 01 00       	call   c002833f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 9b d8 01 00       	call   c0027948 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 04 d2 01 00       	call   c00272cb <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 64 e2 01 00       	call   c002833f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 4d d8 01 00       	call   c0027948 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 b6 d1 01 00       	call   c00272cb <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 16 e2 01 00       	call   c002833f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 ff d7 01 00       	call   c0027948 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 68 d1 01 00       	call   c00272cb <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 6a ca 01 00       	call   c0026c60 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 41 e1 01 00       	call   c002833f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 2a d7 01 00       	call   c0027948 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 11 e1 01 00       	call   c002833f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 83 d0 01 00       	call   c00272cb <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 e3 e0 01 00       	call   c002833f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 cc d6 01 00       	call   c0027948 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 35 d0 01 00       	call   c00272cb <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 95 e0 01 00       	call   c002833f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 7e d6 01 00       	call   c0027948 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 e7 cf 01 00       	call   c00272cb <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 47 e0 01 00       	call   c002833f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 30 d6 01 00       	call   c0027948 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 99 cf 01 00       	call   c00272cb <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 f9 df 01 00       	call   c002833f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 e2 d5 01 00       	call   c0027948 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 4b cf 01 00       	call   c00272cb <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 1f cf 01 00       	call   c00272cb <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 7c d5 01 00       	call   c0027948 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 38 de 01 00       	call   c002821b <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 c7 ce 01 00       	call   c00272cb <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 24 d5 01 00       	call   c0027948 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 e0 dd 01 00       	call   c002821b <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 6e ce 01 00       	call   c00272cb <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 cb d4 01 00       	call   c0027948 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 87 dd 01 00       	call   c002821b <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 15 ce 01 00       	call   c00272cb <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 72 d4 01 00       	call   c0027948 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 2e dd 01 00       	call   c002821b <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 8c c6 01 00       	call   c0026c60 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 63 dd 01 00       	call   c002833f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 4c d3 01 00       	call   c0027948 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 2f dd 01 00       	call   c002833f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 a1 cc 01 00       	call   c00272cb <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 01 dd 01 00       	call   c002833f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 ea d2 01 00       	call   c0027948 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 53 cc 01 00       	call   c00272cb <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 b3 dc 01 00       	call   c002833f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 9c d2 01 00       	call   c0027948 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 05 cc 01 00       	call   c00272cb <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 65 dc 01 00       	call   c002833f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 4e d2 01 00       	call   c0027948 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 b7 cb 01 00       	call   c00272cb <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 17 dc 01 00       	call   c002833f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 00 d2 01 00       	call   c0027948 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 69 cb 01 00       	call   c00272cb <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 c9 db 01 00       	call   c002833f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 b2 d1 01 00       	call   c0027948 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 18 cb 01 00       	call   c00272cb <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 78 db 01 00       	call   c002833f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 61 d1 01 00       	call   c0027948 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 ca ca 01 00       	call   c00272cb <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 c4 c3 01 00       	call   c0026c60 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 9b da 01 00       	call   c002833f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 84 d0 01 00       	call   c0027948 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 64 da 01 00       	call   c002833f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 d6 c9 01 00       	call   c00272cb <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 36 da 01 00       	call   c002833f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 1f d0 01 00       	call   c0027948 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 88 c9 01 00       	call   c00272cb <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 e8 d9 01 00       	call   c002833f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 d1 cf 01 00       	call   c0027948 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 3a c9 01 00       	call   c00272cb <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 9a d9 01 00       	call   c002833f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 83 cf 01 00       	call   c0027948 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 ec c8 01 00       	call   c00272cb <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 4c d9 01 00       	call   c002833f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 35 cf 01 00       	call   c0027948 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 9e c8 01 00       	call   c00272cb <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 fe d8 01 00       	call   c002833f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 e7 ce 01 00       	call   c0027948 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 4d c8 01 00       	call   c00272cb <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 ad d8 01 00       	call   c002833f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 96 ce 01 00       	call   c0027948 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 05 c8 01 00       	call   c00272cb <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 de c7 01 00       	call   c00272cb <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 3c ce 01 00       	call   c0027948 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 f8 d6 01 00       	call   c002821b <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 87 c7 01 00       	call   c00272cb <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 e5 cd 01 00       	call   c0027948 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 a1 d6 01 00       	call   c002821b <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 2f c7 01 00       	call   c00272cb <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 8d cd 01 00       	call   c0027948 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 49 d6 01 00       	call   c002821b <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 d7 c6 01 00       	call   c00272cb <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 35 cd 01 00       	call   c0027948 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 f1 d5 01 00       	call   c002821b <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 7f c6 01 00       	call   c00272cb <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 dd cc 01 00       	call   c0027948 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 99 d5 01 00       	call   c002821b <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 2d c6 01 00       	call   c00272cb <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 8b cc 01 00       	call   c0027948 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 47 d5 01 00       	call   c002821b <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 5b be 01 00       	call   c0026c60 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 32 d5 01 00       	call   c002833f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 1b cb 01 00       	call   c0027948 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 02 d5 01 00       	call   c002833f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 74 c4 01 00       	call   c00272cb <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 04 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd63fc]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 a8 d4 01 00       	call   c002833f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 91 ca 01 00       	call   c0027948 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 fc c3 01 00       	call   c00272cb <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 49 d4 01 00       	call   c002833f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 32 ca 01 00       	call   c0027948 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 9d c3 01 00       	call   c00272cb <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 ea d3 01 00       	call   c002833f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 d3 c9 01 00       	call   c0027948 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 3e c3 01 00       	call   c00272cb <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 8b d3 01 00       	call   c002833f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 74 c9 01 00       	call   c0027948 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 df c2 01 00       	call   c00272cb <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 2c d3 01 00       	call   c002833f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 15 c9 01 00       	call   c0027948 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 80 c2 01 00       	call   c00272cb <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 cd d2 01 00       	call   c002833f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 b6 c8 01 00       	call   c0027948 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 21 c2 01 00       	call   c00272cb <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 6e d2 01 00       	call   c002833f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 57 c8 01 00       	call   c0027948 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 c2 c1 01 00       	call   c00272cb <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 0f d2 01 00       	call   c002833f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 f8 c7 01 00       	call   c0027948 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 63 c1 01 00       	call   c00272cb <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 6d ba 01 00       	call   c0026c60 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 44 d1 01 00       	call   c002833f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 2d c7 01 00       	call   c0027948 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 14 d1 01 00       	call   c002833f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 86 c0 01 00       	call   c00272cb <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 20 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd63e0]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 b9 d0 01 00       	call   c002833f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 a2 c6 01 00       	call   c0027948 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 0d c0 01 00       	call   c00272cb <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 59 d0 01 00       	call   c002833f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 42 c6 01 00       	call   c0027948 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 ad bf 01 00       	call   c00272cb <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 f9 cf 01 00       	call   c002833f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 e2 c5 01 00       	call   c0027948 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 4d bf 01 00       	call   c00272cb <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 99 cf 01 00       	call   c002833f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 82 c5 01 00       	call   c0027948 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 ed be 01 00       	call   c00272cb <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 39 cf 01 00       	call   c002833f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 22 c5 01 00       	call   c0027948 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 8d be 01 00       	call   c00272cb <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 d9 ce 01 00       	call   c002833f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 c2 c4 01 00       	call   c0027948 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 2d be 01 00       	call   c00272cb <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 79 ce 01 00       	call   c002833f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 62 c4 01 00       	call   c0027948 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 cd bd 01 00       	call   c00272cb <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 19 ce 01 00       	call   c002833f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 02 c4 01 00       	call   c0027948 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 6d bd 01 00       	call   c00272cb <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 3c 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd63c4]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 12 bd 01 00       	call   c00272cb <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 6f c3 01 00       	call   c0027948 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 2b cc 01 00       	call   c002821b <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 b5 bc 01 00       	call   c00272cb <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 12 c3 01 00       	call   c0027948 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 ce cb 01 00       	call   c002821b <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 58 bc 01 00       	call   c00272cb <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 b5 c2 01 00       	call   c0027948 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 71 cb 01 00       	call   c002821b <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 fb bb 01 00       	call   c00272cb <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 58 c2 01 00       	call   c0027948 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 14 cb 01 00       	call   c002821b <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 9e bb 01 00       	call   c00272cb <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 fb c1 01 00       	call   c0027948 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 b7 ca 01 00       	call   c002821b <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 41 bb 01 00       	call   c00272cb <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 9e c1 01 00       	call   c0027948 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 5a ca 01 00       	call   c002821b <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 e4 ba 01 00       	call   c00272cb <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 41 c1 01 00       	call   c0027948 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 fd c9 01 00       	call   c002821b <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 87 ba 01 00       	call   c00272cb <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 e4 c0 01 00       	call   c0027948 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 a0 c9 01 00       	call   c002821b <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 9c c0 01 00       	call   c0027948 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 14 cb 01 00       	jmp    c00283d0 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 7e c7 01 00       	call   c0028217 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 3c c7 01 00       	call   c00281f9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 d3 c4 01 00       	call   c0027fab <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 d4 b7 01 00       	call   c00272cb <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 a3 c4 01 00       	call   c0027fab <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 0a c1 01 00       	call   c0027c2c <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 a9 c6 01 00       	call   c00281f9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 ac c6 01 00       	call   c0028217 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 7f c6 01 00       	call   c0028217 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 78 c0 01 00       	call   c0027c2c <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 02 c8 01 00       	call   c00283d0 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 dd c7 01 00       	call   c00283d0 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 af c3 01 00       	call   c0027fab <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 06 bd 01 00       	call   c002791c <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 e5 c5 01 00       	call   c0028217 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 7e b6 01 00       	call   c00272cb <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 a2 bc 01 00       	call   c002791c <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 44 c7 01 00       	call   c00283d0 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 7c bf 01 00       	call   c0027c2c <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 f9 b5 01 00       	call   c00272cb <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 25 c2 01 00       	call   c0027fab <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 25 b5 01 00       	call   c00272cb <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 05 b5 01 00       	call   c00272cb <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 d5 c1 01 00       	call   c0027fab <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 25 c4 01 00       	call   c0028215 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 04 bb 01 00       	call   c002791c <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 86 c5 01 00       	call   c00283b0 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 ad c3 01 00       	call   c00281f9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 ab ba 01 00       	call   c002791c <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 29 c1 01 00       	call   c0027fab <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 ac ba 01 00       	call   c0027948 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 fe c0 01 00       	call   c0027fab <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 65 bd 01 00       	call   c0027c2c <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 e4 b3 01 00       	call   c00272cb <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 ae c0 01 00       	call   c0027fab <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 fa c2 01 00       	call   c0028217 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 ef b9 01 00       	call   c0027948 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 c1 b9 01 00       	call   c0027948 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 fa bf 01 00       	call   c0027fab <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 5e bc 01 00       	call   c0027c2c <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 26 bc 01 00       	call   c0027c2c <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 a5 b2 01 00       	call   c00272cb <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 92 c3 01 00       	call   c00283d0 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 64 bf 01 00       	call   c0027fab <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 bb b8 01 00       	call   c002791c <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 9a c1 01 00       	call   c0028217 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 32 b2 01 00       	call   c00272cb <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 56 b8 01 00       	call   c002791c <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 f8 c2 01 00       	call   c00283d0 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 b9 c0 01 00       	call   c0028217 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 77 c0 01 00       	call   c00281f9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 0e be 01 00       	call   c0027fab <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 0f b1 01 00       	call   c00272cb <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 de bd 01 00       	call   c0027fab <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 45 ba 01 00       	call   c0027c2c <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 e4 bf 01 00       	call   c00281f9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 e7 bf 01 00       	call   c0028217 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 ba bf 01 00       	call   c0028217 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 b3 b9 01 00       	call   c0027c2c <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 3d c1 01 00       	call   c00283d0 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 18 c1 01 00       	call   c00283d0 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 ea bc 01 00       	call   c0027fab <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 41 b6 01 00       	call   c002791c <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 20 bf 01 00       	call   c0028217 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 b9 af 01 00       	call   c00272cb <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 dd b5 01 00       	call   c002791c <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 7f c0 01 00       	call   c00283d0 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 b7 b8 01 00       	call   c0027c2c <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 34 af 01 00       	call   c00272cb <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 5f bb 01 00       	call   c0027fab <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 5f ae 01 00       	call   c00272cb <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 3f ae 01 00       	call   c00272cb <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 0f bb 01 00       	call   c0027fab <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 5f bd 01 00       	call   c0028215 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 3d b4 01 00       	call   c002791c <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 bf be 01 00       	call   c00283b0 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 e6 bc 01 00       	call   c00281f9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 e3 b3 01 00       	call   c002791c <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 61 ba 01 00       	call   c0027fab <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 e4 b3 01 00       	call   c0027948 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 36 ba 01 00       	call   c0027fab <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 9d b6 01 00       	call   c0027c2c <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 1c ad 01 00       	call   c00272cb <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 e6 b9 01 00       	call   c0027fab <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 32 bc 01 00       	call   c0028217 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 27 b3 01 00       	call   c0027948 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 f9 b2 01 00       	call   c0027948 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 30 b9 01 00       	call   c0027fab <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 94 b5 01 00       	call   c0027c2c <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 61 b5 01 00       	call   c0027c2c <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 e0 ab 01 00       	call   c00272cb <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 cd bc 01 00       	call   c00283d0 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 9f b8 01 00       	call   c0027fab <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 f6 b1 01 00       	call   c002791c <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 d5 ba 01 00       	call   c0028217 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 6d ab 01 00       	call   c00272cb <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 91 b1 01 00       	call   c002791c <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 33 bc 01 00       	call   c00283d0 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 f4 b9 01 00       	call   c0028217 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 b2 b9 01 00       	call   c00281f9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 49 b7 01 00       	call   c0027fab <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 4a aa 01 00       	call   c00272cb <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 19 b7 01 00       	call   c0027fab <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 80 b3 01 00       	call   c0027c2c <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 1f b9 01 00       	call   c00281f9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 22 b9 01 00       	call   c0028217 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 f5 b8 01 00       	call   c0028217 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 ee b2 01 00       	call   c0027c2c <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 78 ba 01 00       	call   c00283d0 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 53 ba 01 00       	call   c00283d0 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 25 b6 01 00       	call   c0027fab <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 7c af 01 00       	call   c002791c <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 5b b8 01 00       	call   c0028217 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 f4 a8 01 00       	call   c00272cb <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 18 af 01 00       	call   c002791c <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 ba b9 01 00       	call   c00283d0 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 f2 b1 01 00       	call   c0027c2c <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 6f a8 01 00       	call   c00272cb <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 9a b4 01 00       	call   c0027fab <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 9a a7 01 00       	call   c00272cb <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 7a a7 01 00       	call   c00272cb <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 4a b4 01 00       	call   c0027fab <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 9a b6 01 00       	call   c0028215 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 78 ad 01 00       	call   c002791c <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 fa b7 01 00       	call   c00283b0 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 21 b6 01 00       	call   c00281f9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 1e ad 01 00       	call   c002791c <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 9c b3 01 00       	call   c0027fab <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 1f ad 01 00       	call   c0027948 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 71 b3 01 00       	call   c0027fab <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 d8 af 01 00       	call   c0027c2c <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 57 a6 01 00       	call   c00272cb <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 21 b3 01 00       	call   c0027fab <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 6d b5 01 00       	call   c0028217 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 62 ac 01 00       	call   c0027948 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 34 ac 01 00       	call   c0027948 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 6b b2 01 00       	call   c0027fab <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 cf ae 01 00       	call   c0027c2c <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 9c ae 01 00       	call   c0027c2c <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 1b a5 01 00       	call   c00272cb <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 08 b6 01 00       	call   c00283d0 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 da b1 01 00       	call   c0027fab <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 31 ab 01 00       	call   c002791c <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 10 b4 01 00       	call   c0028217 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 a8 a4 01 00       	call   c00272cb <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 cc aa 01 00       	call   c002791c <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 6e b5 01 00       	call   c00283d0 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 2f b3 01 00       	call   c0028217 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 ed b2 01 00       	call   c00281f9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 84 b0 01 00       	call   c0027fab <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 85 a3 01 00       	call   c00272cb <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 54 b0 01 00       	call   c0027fab <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 bb ac 01 00       	call   c0027c2c <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 5a b2 01 00       	call   c00281f9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 5d b2 01 00       	call   c0028217 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 30 b2 01 00       	call   c0028217 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 29 ac 01 00       	call   c0027c2c <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 b3 b3 01 00       	call   c00283d0 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 8e b3 01 00       	call   c00283d0 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 60 af 01 00       	call   c0027fab <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 b7 a8 01 00       	call   c002791c <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 96 b1 01 00       	call   c0028217 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 2f a2 01 00       	call   c00272cb <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 53 a8 01 00       	call   c002791c <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 f5 b2 01 00       	call   c00283d0 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 2d ab 01 00       	call   c0027c2c <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 aa a1 01 00       	call   c00272cb <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 d5 ad 01 00       	call   c0027fab <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 d5 a0 01 00       	call   c00272cb <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 b5 a0 01 00       	call   c00272cb <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 85 ad 01 00       	call   c0027fab <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 d5 af 01 00       	call   c0028215 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 b3 a6 01 00       	call   c002791c <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 35 b1 01 00       	call   c00283b0 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 5c af 01 00       	call   c00281f9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 59 a6 01 00       	call   c002791c <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 d7 ac 01 00       	call   c0027fab <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 5a a6 01 00       	call   c0027948 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 ac ac 01 00       	call   c0027fab <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 13 a9 01 00       	call   c0027c2c <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 92 9f 01 00       	call   c00272cb <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 5c ac 01 00       	call   c0027fab <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 a8 ae 01 00       	call   c0028217 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 9d a5 01 00       	call   c0027948 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 6f a5 01 00       	call   c0027948 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 a6 ab 01 00       	call   c0027fab <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 0a a8 01 00       	call   c0027c2c <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 d7 a7 01 00       	call   c0027c2c <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 56 9e 01 00       	call   c00272cb <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 43 af 01 00       	call   c00283d0 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 15 ab 01 00       	call   c0027fab <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 6c a4 01 00       	call   c002791c <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 4b ad 01 00       	call   c0028217 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 e3 9d 01 00       	call   c00272cb <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 07 a4 01 00       	call   c002791c <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 a9 ae 01 00       	call   c00283d0 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 67 ac 01 00       	call   c0028217 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 25 ac 01 00       	call   c00281f9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 bc a9 01 00       	call   c0027fab <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 bd 9c 01 00       	call   c00272cb <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 8c a9 01 00       	call   c0027fab <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 f3 a5 01 00       	call   c0027c2c <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 92 ab 01 00       	call   c00281f9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 95 ab 01 00       	call   c0028217 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 68 ab 01 00       	call   c0028217 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 61 a5 01 00       	call   c0027c2c <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 eb ac 01 00       	call   c00283d0 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 c2 ac 01 00       	call   c00283d0 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 94 a8 01 00       	call   c0027fab <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 eb a1 01 00       	call   c002791c <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 ca aa 01 00       	call   c0028217 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 63 9b 01 00       	call   c00272cb <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 8b a1 01 00       	call   c002791c <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 2d ac 01 00       	call   c00283d0 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 66 a4 01 00       	call   c0027c2c <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 e3 9a 01 00       	call   c00272cb <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 0f a7 01 00       	call   c0027fab <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 0f 9a 01 00       	call   c00272cb <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 ef 99 01 00       	call   c00272cb <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 bf a6 01 00       	call   c0027fab <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 f3 a8 01 00       	call   c00281f9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 ea 9f 01 00       	call   c002791c <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 6c aa 01 00       	call   c00283b0 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 93 a8 01 00       	call   c00281f9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 8d 9f 01 00       	call   c002791c <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 0b a6 01 00       	call   c0027fab <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 8e 9f 01 00       	call   c0027948 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 e0 a5 01 00       	call   c0027fab <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 47 a2 01 00       	call   c0027c2c <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 c6 98 01 00       	call   c00272cb <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 90 a5 01 00       	call   c0027fab <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 dc a7 01 00       	call   c0028217 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 d1 9e 01 00       	call   c0027948 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 a3 9e 01 00       	call   c0027948 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 e7 a4 01 00       	call   c0027fab <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 4e a1 01 00       	call   c0027c2c <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 37 9e 01 00       	call   c0027948 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 f3 a6 01 00       	call   c002821b <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 e6 a0 01 00       	call   c0027c2c <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 65 97 01 00       	call   c00272cb <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 52 a8 01 00       	call   c00283d0 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 24 a4 01 00       	call   c0027fab <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 7b 9d 01 00       	call   c002791c <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 5a a6 01 00       	call   c0028217 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 f2 96 01 00       	call   c00272cb <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 1a 9d 01 00       	call   c002791c <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 bc a7 01 00       	call   c00283d0 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 64 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd639c]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 58 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd63a8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 32 19 00 00       	call   c000f5a9 <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 6f a4 01 00       	call   c0028217 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 2d a4 01 00       	call   c00281f9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 19 a4 01 00       	call   c0028217 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 8b a1 01 00       	call   c0027fab <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 09 9b 01 00       	call   c0027948 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 5b a1 01 00       	call   c0027fab <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 61 94 01 00       	call   c00272cb <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 30 a1 01 00       	call   c0027fab <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 80 a3 01 00       	call   c0028215 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 61 9a 01 00       	call   c002791c <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 e3 a4 01 00       	call   c00283b0 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 0a a3 01 00       	call   c00281f9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 09 9a 01 00       	call   c002791c <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 87 a0 01 00       	call   c0027fab <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 0a 9a 01 00       	call   c0027948 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 5c a0 01 00       	call   c0027fab <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 c3 9c 01 00       	call   c0027c2c <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 42 93 01 00       	call   c00272cb <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 6a 9c 01 00       	call   c0027c2c <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 f0 92 01 00       	call   c00272cb <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 de a3 01 00       	call   c00283d0 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 b0 9f 01 00       	call   c0027fab <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 07 99 01 00       	call   c002791c <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 e6 a1 01 00       	call   c0028217 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 7f 92 01 00       	call   c00272cb <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 ab 98 01 00       	call   c002791c <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 4d a3 01 00       	call   c00283d0 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 fa 9e 01 00       	call   c0027fab <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 77 98 01 00       	call   c0027948 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 c8 9e 01 00       	call   c0027fab <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 ce 91 01 00       	call   c00272cb <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 9e 9e 01 00       	call   c0027fab <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 f2 a0 01 00       	call   c0028219 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 cb 97 01 00       	call   c002791c <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 4d a2 01 00       	call   c00283b0 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 74 a0 01 00       	call   c00281f9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 72 97 01 00       	call   c002791c <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 f0 9d 01 00       	call   c0027fab <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 73 97 01 00       	call   c0027948 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 c5 9d 01 00       	call   c0027fab <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 2c 9a 01 00       	call   c0027c2c <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 ab 90 01 00       	call   c00272cb <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 c7 99 01 00       	call   c0027c2c <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 46 90 01 00       	call   c00272cb <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 34 a1 01 00       	call   c00283d0 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 06 9d 01 00       	call   c0027fab <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 5d 96 01 00       	call   c002791c <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 3c 9f 01 00       	call   c0028217 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 d5 8f 01 00       	call   c00272cb <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 01 96 01 00       	call   c002791c <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 72 9c 01 00       	call   c0027fab <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 78 8f 01 00       	call   c00272cb <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 7e 9d 02 c0       	mov    eax,0xc0029d7e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 8f 9d 02 c0       	mov    eax,0xc0029d8f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 74 11 00 00       	call   c000f5a9 <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 76 11 00 00       	call   c000f5c9 <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f0 10 00 00       	jmp    c000f599 <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0b 11 00 00       	jmp    c000f5b9 <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c000e4e3:	ff 05 04 0f 03 c0    	inc    DWORD PTR ds:0xc0030f04
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 04 0f 03 c0       	mov    eax,ds:0xc0030f04
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 04 0f 03 c0       	mov    ds:0xc0030f04,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 00 0f 03 c0 00 	cmp    DWORD PTR ds:0xc0030f00,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 00 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f00,0x0
c000e50d:	e8 e7 f4 00 00       	call   c001d9f9 <schedule()>
c000e512:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c000e517:	48                   	dec    eax
c000e518:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 50 db 02 c0       	mov    eax,ds:0xc002db50
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 c6 9d 02 c0       	push   0xc0029dc6
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 e8 d9 02 c0       	mov    eax,0xc002d9e8
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 cf 9d 02 c0       	push   0xc0029dcf
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 44 67 02 c0       	mov    eax,0xc0026744
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 d9 9d 02 c0       	push   0xc0029dd9
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 78 64 02 c0       	mov    eax,0xc0026478
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 e2 9d 02 c0       	push   0xc0029de2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 44 68 02 c0       	mov    eax,0xc0026844
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 ec 9d 02 c0       	push   0xc0029dec
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 c4 65 02 c0       	mov    eax,0xc00265c4
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 f5 9d 02 c0       	push   0xc0029df5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 ec d9 02 c0       	mov    eax,0xc002d9ec
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 02 9e 02 c0       	push   0xc0029e02
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 ed d9 02 c0       	mov    eax,0xc002d9ed
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 59 56 00 00       	call   c0013cc6 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 0f 9e 02 c0       	push   0xc0029e0f
c000e69e:	e8 50 0f 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ea 0e 00 00       	call   c000f599 <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 30 0f 03 c0    	push   DWORD PTR ds:0xc0030f30
c000e6be:	68 28 9e 02 c0       	push   0xc0029e28
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 11 ef 00 00       	call   c001d5dc <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 f4 f0 00 00       	call   c001d7d4 <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 b8 e1 01 c0       	push   0xc001e1b8
c000e6e9:	ff 35 30 0f 03 c0    	push   DWORD PTR ds:0xc0030f30
c000e6ef:	e8 e0 f0 00 00       	call   c001d7d4 <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c000e6fc:	68 0c 9f 02 c0       	push   0xc0029f0c
c000e701:	c6 05 ed d9 02 c0 01 	mov    BYTE PTR ds:0xc002d9ed,0x1
c000e708:	e8 e6 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 51 fe 00 00       	call   c001e563 <Vm::initialise8086()>
c000e712:	e8 77 43 00 00       	call   c0012a8e <Fs::initVFS()>
c000e717:	c7 04 24 35 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e35
c000e71e:	e8 d0 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e723:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 0c 9f 02 c0       	push   0xc0029f0c
c000e742:	e8 ac 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e747:	e8 1d d7 00 00       	call   c001be69 <Sys::loadSyscalls()>
c000e74c:	e8 15 b6 00 00       	call   c0019d66 <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 4f 9e 02 c0       	push   0xc0029e4f
c000e75b:	68 58 9e 02 c0       	push   0xc0029e58
c000e760:	e8 c6 c4 00 00       	call   c001ac2b <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 11 4e 00 00       	call   c001357e <User::loadClockSettings(int)>
c000e76d:	c7 04 24 30 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f30
c000e774:	e8 7a 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 fc 54 00 00       	call   c0013c86 <Device::loadDriversForAll()>
c000e78a:	c7 04 24 60 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e60
c000e791:	e8 5d 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e796:	e8 33 b1 00 00       	call   c00198ce <Krnl::startCPUs()>
c000e79b:	c7 04 24 7a 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e7a
c000e7a2:	e8 4c 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d e8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9e8
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 8b 9e 02 c0       	push   0xc0029e8b
c000e7b6:	e8 7e e8 00 00       	call   c001d039 <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 a0 ea 00 00       	call   c001d264 <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 fe f3 00 00       	call   c001dbcf <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 a7 9e 02 c0       	push   0xc0029ea7
c000e7e5:	50                   	push   eax
c000e7e6:	e8 55 55 00 00       	call   c0013d40 <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 7c 9f 02 c0       	mov    edx,0xc0029f7c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 01 da 02 c0 04 	test   BYTE PTR ds:0xc002da01,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 87 7a 01 00       	call   c0026406 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 a6 9e 00 00       	call   c0018860 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 7f 9e 00 00       	call   c0018860 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 5d 9e 00 00       	call   c0018860 <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 3b 9e 00 00       	call   c0018860 <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 00 da 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002da00,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 49 9d 00 00       	call   c00187dc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 24 9d 00 00       	call   c00187dc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 f1 78 01 00       	call   c00263c0 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 ae 78 01 00       	call   c00263a0 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 40 9d 00 00       	call   c0018860 <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 b0 9e 02 c0       	push   0xc0029eb0
c000eb62:	e8 08 b3 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 b6 9e 02 c0       	push   0xc0029eb6
c000eb9a:	e8 d0 b2 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 50 9f 02 c0       	push   0xc0029f50
c000ebf0:	e8 fe 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 00 da 02 c0 04 	test   BYTE PTR ds:0xc002da00,0x4
c000ec03:	0f 94 05 20 c9 02 c0 	sete   BYTE PTR ds:0xc002c920
c000ec0a:	e8 8a 09 00 00       	call   c000f599 <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 bb 8e 00 00       	call   c0017ad4 <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 14 4f 00 00       	call   c0013b3c <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 60 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e60
c000ec41:	e8 ad 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 47 09 00 00       	call   c000f599 <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 bc 9c 00 00       	call   c0018918 <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 d1 4e 00 00       	call   c0013b3c <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 4d 54 00 00       	call   c00140d4 <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 a1 4e 00 00       	call   c0013b3c <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 bc 9e 02 c0       	push   0xc0029ebc
c000ecb8:	e8 36 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 2d ec 00 00       	call   c001d8f6 <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 d7 9e 02 c0       	push   0xc0029ed7
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 ec 39 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 e8 9e 02 c0       	push   0xc0029ee8
c000ed34:	e8 36 b1 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 f5 9e 02 c0       	push   0xc0029ef5
c000ed49:	e8 21 b1 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 ff 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029eff
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 0a b1 00 00       	jmp    c0019e6f <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 f2 d9 02 c0       	mov    ds:0xc002d9f2,eax
c000ee21:	66 89 15 f0 d9 02 c0 	mov    WORD PTR ds:0xc002d9f0,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c000ef38:	48                   	dec    eax
c000ef39:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 e8 d9 02 c0    	push   DWORD PTR ds:0xc002d9e8
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 c1 94 01 00       	call   c0028450 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 b8 94 01 00       	call   c0028450 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 f8 d9 02 c0 ff 07 	mov    WORD PTR ds:0xc002d9f8,0x7ff
c000f085:	a3 fa d9 02 c0       	mov    ds:0xc002d9fa,eax
c000f08a:	0f 01 1d f8 d9 02 c0 	lidtd  ds:0xc002d9f8
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 50 db 02 c0    	push   DWORD PTR ds:0xc002db50
c000f37c:	e8 95 27 00 00       	call   c0011b16 <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0a 02 00 00       	call   c000f599 <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 ff 17 00 00       	call   c0010b9e <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 30 18 00 00       	call   c0010bde <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 e8 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9e8
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d bc c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c7bc
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 bc c7 02 c0       	mov    eax,ds:0xc002c7bc
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 a0 9f 02 c0       	push   0xc0029fa0
c000f455:	e8 a9 32 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 bc c7 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c7bc,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d 50 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db50
c000f481:	8b 2d bc c7 02 c0    	mov    ebp,DWORD PTR ds:0xc002c7bc
c000f487:	e8 09 05 00 00       	call   c000f995 <Phys::allocatePage()>
c000f48c:	68 01 0c 00 00       	push   0xc01
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 7b 25 00 00       	call   c0011a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d bc c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c7bc
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 d0 9f 02 c0       	push   0xc0029fd0
c000f50d:	e8 5d a9 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 d5 9f 02 c0       	push   0xc0029fd5
c000f523:	e8 47 a9 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c000f543:	48                   	dec    eax
c000f544:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	6a 01                	push   0x1
c000f557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55b:	ff 35 50 db 02 c0    	push   DWORD PTR ds:0xc002db50
c000f561:	e8 b0 25 00 00       	call   c0011b16 <VAS::allocatePages(int, int)>
c000f566:	83 c4 1c             	add    esp,0x1c
c000f569:	c3                   	ret    

c000f56a <liballoc_free(void*, int)>:
c000f56a:	83 ec 14             	sub    esp,0x14
c000f56d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f571:	ff 35 50 db 02 c0    	push   DWORD PTR ds:0xc002db50
c000f577:	e8 44 22 00 00       	call   c00117c0 <VAS::freeAllocatedPages(unsigned long)>
c000f57c:	b8 00 00 00 00       	mov    eax,0x0
c000f581:	83 c4 1c             	add    esp,0x1c
c000f584:	c3                   	ret    

c000f585 <realloc>:
c000f585:	83 ec 14             	sub    esp,0x14
c000f588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f590:	e8 97 20 ff ff       	call   c000162c <dlrealloc>
c000f595:	83 c4 1c             	add    esp,0x1c
c000f598:	c3                   	ret    

c000f599 <malloc>:
c000f599:	83 ec 18             	sub    esp,0x18
c000f59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a0:	e8 4a 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a5:	83 c4 1c             	add    esp,0x1c
c000f5a8:	c3                   	ret    

c000f5a9 <free>:
c000f5a9:	83 ec 18             	sub    esp,0x18
c000f5ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b0:	e8 df 17 ff ff       	call   c0000d94 <dlfree>
c000f5b5:	83 c4 1c             	add    esp,0x1c
c000f5b8:	c3                   	ret    

c000f5b9 <rfree>:
c000f5b9:	83 ec 18             	sub    esp,0x18
c000f5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c0:	e8 cf 17 ff ff       	call   c0000d94 <dlfree>
c000f5c5:	83 c4 1c             	add    esp,0x1c
c000f5c8:	c3                   	ret    

c000f5c9 <calloc>:
c000f5c9:	56                   	push   esi
c000f5ca:	53                   	push   ebx
c000f5cb:	83 ec 10             	sub    esp,0x10
c000f5ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 bc ff ff ff       	call   c000f599 <malloc>
c000f5dd:	89 c6                	mov    esi,eax
c000f5df:	83 c4 0c             	add    esp,0xc
c000f5e2:	53                   	push   ebx
c000f5e3:	6a 00                	push   0x0
c000f5e5:	50                   	push   eax
c000f5e6:	e8 65 11 ff ff       	call   c0000750 <memset>
c000f5eb:	89 f0                	mov    eax,esi
c000f5ed:	83 c4 14             	add    esp,0x14
c000f5f0:	5b                   	pop    ebx
c000f5f1:	5e                   	pop    esi
c000f5f2:	c3                   	ret    

c000f5f3 <Krnl::setBootMessage(char const*)>:
c000f5f3:	57                   	push   edi
c000f5f4:	56                   	push   esi
c000f5f5:	53                   	push   ebx
c000f5f6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5fc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f603:	68 9e 00 00 00       	push   0x9e
c000f608:	6a 00                	push   0x0
c000f60a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f60e:	56                   	push   esi
c000f60f:	e8 3c 11 ff ff       	call   c0000750 <memset>
c000f614:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f617:	e8 50 11 ff ff       	call   c000076c <strlen>
c000f61c:	ba 50 00 00 00       	mov    edx,0x50
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	29 c2                	sub    edx,eax
c000f626:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62a:	d1 ea                	shr    edx,1
c000f62c:	84 c0                	test   al,al
c000f62e:	74 19                	je     c000f649 <Krnl::setBootMessage(char const*)+0x56>
c000f630:	01 d2                	add    edx,edx
c000f632:	43                   	inc    ebx
c000f633:	01 f2                	add    edx,esi
c000f635:	80 cc 0f             	or     ah,0xf
c000f638:	83 c2 02             	add    edx,0x2
c000f63b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f63f:	43                   	inc    ebx
c000f640:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f645:	84 c0                	test   al,al
c000f647:	75 ec                	jne    c000f635 <Krnl::setBootMessage(char const*)+0x42>
c000f649:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f64e:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f653:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f655:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65b:	5b                   	pop    ebx
c000f65c:	5e                   	pop    esi
c000f65d:	5f                   	pop    edi
c000f65e:	c3                   	ret    

c000f65f <kernel_main>:
c000f65f:	57                   	push   edi
c000f660:	bf f9 03 00 00       	mov    edi,0x3f9
c000f665:	56                   	push   esi
c000f666:	89 fa                	mov    edx,edi
c000f668:	53                   	push   ebx
c000f669:	31 f6                	xor    esi,esi
c000f66b:	83 ec 2c             	sub    esp,0x2c
c000f66e:	89 f0                	mov    eax,esi
c000f670:	ee                   	out    dx,al
c000f671:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f676:	b0 80                	mov    al,0x80
c000f678:	89 da                	mov    edx,ebx
c000f67a:	ee                   	out    dx,al
c000f67b:	b1 03                	mov    cl,0x3
c000f67d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f682:	88 c8                	mov    al,cl
c000f684:	ee                   	out    dx,al
c000f685:	89 f0                	mov    eax,esi
c000f687:	89 fa                	mov    edx,edi
c000f689:	ee                   	out    dx,al
c000f68a:	88 c8                	mov    al,cl
c000f68c:	89 da                	mov    edx,ebx
c000f68e:	ee                   	out    dx,al
c000f68f:	b0 c7                	mov    al,0xc7
c000f691:	ba fa 03 00 00       	mov    edx,0x3fa
c000f696:	ee                   	out    dx,al
c000f697:	b0 0b                	mov    al,0xb
c000f699:	ba fc 03 00 00       	mov    edx,0x3fc
c000f69e:	ee                   	out    dx,al
c000f69f:	68 dc 9f 02 c0       	push   0xc0029fdc
c000f6a4:	e8 5a 30 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c000f6a9:	e8 f2 09 00 00       	call   c00100a0 <installVgaTextImplementation()>
c000f6ae:	0f b6 05 c0 c7 02 c0 	movzx  eax,BYTE PTR ds:0xc002c7c0
c000f6b5:	83 c4 10             	add    esp,0x10
c000f6b8:	84 c0                	test   al,al
c000f6ba:	74 6c                	je     c000f728 <kernel_main+0xc9>
c000f6bc:	31 db                	xor    ebx,ebx
c000f6be:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c3:	be 05 00 00 00       	mov    esi,0x5
c000f6c8:	31 c9                	xor    ecx,ecx
c000f6ca:	eb 2a                	jmp    c000f6f6 <kernel_main+0x97>
c000f6cc:	3c 0d                	cmp    al,0xd
c000f6ce:	74 1a                	je     c000f6ea <kernel_main+0x8b>
c000f6d0:	3c 0a                	cmp    al,0xa
c000f6d2:	74 40                	je     c000f714 <kernel_main+0xb5>
c000f6d4:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6d7:	80 cc 0e             	or     ah,0xe
c000f6da:	c1 e2 04             	shl    edx,0x4
c000f6dd:	01 ca                	add    edx,ecx
c000f6df:	41                   	inc    ecx
c000f6e0:	01 fa                	add    edx,edi
c000f6e2:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ea:	43                   	inc    ebx
c000f6eb:	0f b6 83 c0 c7 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3840]
c000f6f2:	84 c0                	test   al,al
c000f6f4:	74 32                	je     c000f728 <kernel_main+0xc9>
c000f6f6:	80 b9 f6 c7 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd380a],0xdb
c000f6fd:	75 cd                	jne    c000f6cc <kernel_main+0x6d>
c000f6ff:	0f b6 91 f5 c7 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd380b]
c000f706:	83 e2 fe             	and    edx,0xfffffffe
c000f709:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f70f:	75 bb                	jne    c000f6cc <kernel_main+0x6d>
c000f711:	47                   	inc    edi
c000f712:	eb b8                	jmp    c000f6cc <kernel_main+0x6d>
c000f714:	43                   	inc    ebx
c000f715:	46                   	inc    esi
c000f716:	31 c9                	xor    ecx,ecx
c000f718:	0f b6 83 c0 c7 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3840]
c000f71f:	bf 0a 00 00 00       	mov    edi,0xa
c000f724:	84 c0                	test   al,al
c000f726:	75 ce                	jne    c000f6f6 <kernel_main+0x97>
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	68 f4 9f 02 c0       	push   0xc0029ff4
c000f730:	e8 be fe ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000f735:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73a:	a3 00 da 02 c0       	mov    ds:0xc002da00,eax
c000f73f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f744:	05 ff 0f 00 00       	add    eax,0xfff
c000f749:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f74e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f751:	e8 cb 03 00 00       	call   c000fb21 <Phys::physicalMemorySetup(unsigned int)>
c000f756:	e8 bb 1c 00 00       	call   c0011416 <Virt::virtualMemorySetup()>
c000f75b:	58                   	pop    eax
c000f75c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f760:	53                   	push   ebx
c000f761:	e8 82 1e 00 00       	call   c00115e8 <VAS::VAS()>
c000f766:	89 1d 50 db 02 c0    	mov    DWORD PTR ds:0xc002db50,ebx
c000f76c:	e8 af 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f771:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f778:	e8 1c fe ff ff       	call   c000f599 <malloc>
c000f77d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f780:	89 c6                	mov    esi,eax
c000f782:	e8 4f f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f787:	6a 00                	push   0x0
c000f789:	89 35 e8 d9 02 c0    	mov    DWORD PTR ds:0xc002d9e8,esi
c000f78f:	6a 00                	push   0x0
c000f791:	6a 00                	push   0x0
c000f793:	56                   	push   esi
c000f794:	e8 49 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f799:	83 c4 14             	add    esp,0x14
c000f79c:	53                   	push   ebx
c000f79d:	e8 f6 20 00 00       	call   c0011898 <VAS::~VAS()>
c000f7a2:	83 c4 30             	add    esp,0x30
c000f7a5:	5b                   	pop    ebx
c000f7a6:	5e                   	pop    esi
c000f7a7:	5f                   	pop    edi
c000f7a8:	c3                   	ret    

c000f7a9 <Phys::allocateDMA(unsigned long)>:
c000f7a9:	55                   	push   ebp
c000f7aa:	31 ed                	xor    ebp,ebp
c000f7ac:	57                   	push   edi
c000f7ad:	56                   	push   esi
c000f7ae:	53                   	push   ebx
c000f7af:	31 db                	xor    ebx,ebx
c000f7b1:	83 ec 18             	sub    esp,0x18
c000f7b4:	68 13 a0 02 c0       	push   0xc002a013
c000f7b9:	e8 45 2f 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c000f7be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7c2:	31 d2                	xor    edx,edx
c000f7c4:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7ca:	83 c4 10             	add    esp,0x10
c000f7cd:	c1 ee 0c             	shr    esi,0xc
c000f7d0:	31 c9                	xor    ecx,ecx
c000f7d2:	eb 17                	jmp    c000f7eb <Phys::allocateDMA(unsigned long)+0x42>
c000f7d4:	85 c9                	test   ecx,ecx
c000f7d6:	75 04                	jne    c000f7dc <Phys::allocateDMA(unsigned long)+0x33>
c000f7d8:	89 d5                	mov    ebp,edx
c000f7da:	89 d3                	mov    ebx,edx
c000f7dc:	8d 41 01             	lea    eax,[ecx+0x1]
c000f7df:	39 c6                	cmp    esi,eax
c000f7e1:	74 23                	je     c000f806 <Phys::allocateDMA(unsigned long)+0x5d>
c000f7e3:	42                   	inc    edx
c000f7e4:	89 c1                	mov    ecx,eax
c000f7e6:	83 fa 2f             	cmp    edx,0x2f
c000f7e9:	7f 11                	jg     c000f7fc <Phys::allocateDMA(unsigned long)+0x53>
c000f7eb:	80 ba 40 da 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd25c0],0x0
c000f7f2:	74 e0                	je     c000f7d4 <Phys::allocateDMA(unsigned long)+0x2b>
c000f7f4:	31 c9                	xor    ecx,ecx
c000f7f6:	42                   	inc    edx
c000f7f7:	83 fa 2f             	cmp    edx,0x2f
c000f7fa:	7e ef                	jle    c000f7eb <Phys::allocateDMA(unsigned long)+0x42>
c000f7fc:	83 c4 0c             	add    esp,0xc
c000f7ff:	31 c0                	xor    eax,eax
c000f801:	5b                   	pop    ebx
c000f802:	5e                   	pop    esi
c000f803:	5f                   	pop    edi
c000f804:	5d                   	pop    ebp
c000f805:	c3                   	ret    
c000f806:	8d 14 33             	lea    edx,[ebx+esi*1]
c000f809:	89 d7                	mov    edi,edx
c000f80b:	4f                   	dec    edi
c000f80c:	79 03                	jns    c000f811 <Phys::allocateDMA(unsigned long)+0x68>
c000f80e:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f811:	c1 ff 04             	sar    edi,0x4
c000f814:	89 da                	mov    edx,ebx
c000f816:	c1 fa 04             	sar    edx,0x4
c000f819:	39 fa                	cmp    edx,edi
c000f81b:	75 43                	jne    c000f860 <Phys::allocateDMA(unsigned long)+0xb7>
c000f81d:	85 c0                	test   eax,eax
c000f81f:	74 1a                	je     c000f83b <Phys::allocateDMA(unsigned long)+0x92>
c000f821:	be 40 da 02 c0       	mov    esi,0xc002da40
c000f826:	8d 93 40 da 02 c0    	lea    edx,[ebx-0x3ffd25c0]
c000f82c:	f7 d6                	not    esi
c000f82e:	29 de                	sub    esi,ebx
c000f830:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f833:	42                   	inc    edx
c000f834:	8d 04 16             	lea    eax,[esi+edx*1]
c000f837:	39 c1                	cmp    ecx,eax
c000f839:	7f f5                	jg     c000f830 <Phys::allocateDMA(unsigned long)+0x87>
c000f83b:	83 ec 0c             	sub    esp,0xc
c000f83e:	68 2c a0 02 c0       	push   0xc002a02c
c000f843:	e8 bb 2e 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c000f848:	83 c4 10             	add    esp,0x10
c000f84b:	85 ff                	test   edi,edi
c000f84d:	74 17                	je     c000f866 <Phys::allocateDMA(unsigned long)+0xbd>
c000f84f:	83 c4 0c             	add    esp,0xc
c000f852:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000f858:	5b                   	pop    ebx
c000f859:	c1 e0 0c             	shl    eax,0xc
c000f85c:	5e                   	pop    esi
c000f85d:	5f                   	pop    edi
c000f85e:	5d                   	pop    ebp
c000f85f:	c3                   	ret    
c000f860:	89 ea                	mov    edx,ebp
c000f862:	31 c9                	xor    ecx,ecx
c000f864:	eb 90                	jmp    c000f7f6 <Phys::allocateDMA(unsigned long)+0x4d>
c000f866:	83 c4 0c             	add    esp,0xc
c000f869:	c1 e3 0c             	shl    ebx,0xc
c000f86c:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000f872:	5b                   	pop    ebx
c000f873:	5e                   	pop    esi
c000f874:	5f                   	pop    edi
c000f875:	5d                   	pop    ebp
c000f876:	c3                   	ret    

c000f877 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f877:	83 ec 18             	sub    esp,0x18
c000f87a:	68 43 a0 02 c0       	push   0xc002a043
c000f87f:	e8 7f 2e 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c000f884:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f888:	83 c4 10             	add    esp,0x10
c000f88b:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c000f891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f895:	c1 e9 0c             	shr    ecx,0xc
c000f898:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c000f8a0:	76 29                	jbe    c000f8cb <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c000f8a2:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c000f8a8:	c1 ea 0c             	shr    edx,0xc
c000f8ab:	83 c2 10             	add    edx,0x10
c000f8ae:	85 c9                	test   ecx,ecx
c000f8b0:	74 15                	je     c000f8c7 <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c000f8b2:	8d 82 40 da 02 c0    	lea    eax,[edx-0x3ffd25c0]
c000f8b8:	8d 94 11 40 da 02 c0 	lea    edx,[ecx+edx*1-0x3ffd25c0]
c000f8bf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f8c2:	40                   	inc    eax
c000f8c3:	39 d0                	cmp    eax,edx
c000f8c5:	75 f8                	jne    c000f8bf <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c000f8c7:	83 c4 0c             	add    esp,0xc
c000f8ca:	c3                   	ret    
c000f8cb:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f8d1:	c1 ea 0c             	shr    edx,0xc
c000f8d4:	eb d8                	jmp    c000f8ae <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c000f8d6 <Phys::setPageState(unsigned long, bool)>:
c000f8d6:	56                   	push   esi
c000f8d7:	ba 01 00 00 00       	mov    edx,0x1
c000f8dc:	53                   	push   ebx
c000f8dd:	8b 35 04 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c904
c000f8e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8eb:	89 c8                	mov    eax,ecx
c000f8ed:	83 e1 07             	and    ecx,0x7
c000f8f0:	c1 e8 03             	shr    eax,0x3
c000f8f3:	d3 e3                	shl    ebx,cl
c000f8f5:	01 c6                	add    esi,eax
c000f8f7:	d3 e2                	shl    edx,cl
c000f8f9:	f7 d2                	not    edx
c000f8fb:	20 16                	and    BYTE PTR [esi],dl
c000f8fd:	03 05 04 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c904
c000f903:	08 18                	or     BYTE PTR [eax],bl
c000f905:	5b                   	pop    ebx
c000f906:	5e                   	pop    esi
c000f907:	c3                   	ret    

c000f908 <Phys::getPageState(unsigned long)>:
c000f908:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f90c:	8b 15 04 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c904
c000f912:	89 c8                	mov    eax,ecx
c000f914:	83 e1 07             	and    ecx,0x7
c000f917:	c1 e8 03             	shr    eax,0x3
c000f91a:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f91e:	d3 f8                	sar    eax,cl
c000f920:	83 e0 01             	and    eax,0x1
c000f923:	c3                   	ret    

c000f924 <Phys::freePage(unsigned long)>:
c000f924:	53                   	push   ebx
c000f925:	83 ec 10             	sub    esp,0x10
c000f928:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f92c:	53                   	push   ebx
c000f92d:	68 59 a0 02 c0       	push   0xc002a059
c000f932:	e8 cc 2d 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c000f937:	83 c4 10             	add    esp,0x10
c000f93a:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f940:	76 3d                	jbe    c000f97f <Phys::freePage(unsigned long)+0x5b>
c000f942:	83 ec 0c             	sub    esp,0xc
c000f945:	c1 eb 0c             	shr    ebx,0xc
c000f948:	53                   	push   ebx
c000f949:	e8 ba ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f94e:	83 c4 10             	add    esp,0x10
c000f951:	84 c0                	test   al,al
c000f953:	74 19                	je     c000f96e <Phys::freePage(unsigned long)+0x4a>
c000f955:	83 ec 08             	sub    esp,0x8
c000f958:	ff 0d 30 da 02 c0    	dec    DWORD PTR ds:0xc002da30
c000f95e:	6a 00                	push   0x0
c000f960:	53                   	push   ebx
c000f961:	e8 70 ff ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000f966:	83 c4 10             	add    esp,0x10
c000f969:	83 c4 08             	add    esp,0x8
c000f96c:	5b                   	pop    ebx
c000f96d:	c3                   	ret    
c000f96e:	c7 44 24 10 6c a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a06c
c000f976:	83 c4 08             	add    esp,0x8
c000f979:	5b                   	pop    ebx
c000f97a:	e9 f0 a4 00 00       	jmp    c0019e6f <Krnl::panic(char const*)>
c000f97f:	83 ec 08             	sub    esp,0x8
c000f982:	68 00 10 00 00       	push   0x1000
c000f987:	53                   	push   ebx
c000f988:	e8 ea fe ff ff       	call   c000f877 <Phys::freeDMA(unsigned long, unsigned long)>
c000f98d:	83 c4 10             	add    esp,0x10
c000f990:	83 c4 08             	add    esp,0x8
c000f993:	5b                   	pop    ebx
c000f994:	c3                   	ret    

c000f995 <Phys::allocatePage()>:
c000f995:	56                   	push   esi
c000f996:	53                   	push   ebx
c000f997:	83 ec 14             	sub    esp,0x14
c000f99a:	8b 35 24 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da24
c000f9a0:	89 f3                	mov    ebx,esi
c000f9a2:	eb 0a                	jmp    c000f9ae <Phys::allocatePage()+0x19>
c000f9a4:	89 1d 24 da 02 c0    	mov    DWORD PTR ds:0xc002da24,ebx
c000f9aa:	39 de                	cmp    esi,ebx
c000f9ac:	74 24                	je     c000f9d2 <Phys::allocatePage()+0x3d>
c000f9ae:	53                   	push   ebx
c000f9af:	e8 54 ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f9b4:	5a                   	pop    edx
c000f9b5:	84 c0                	test   al,al
c000f9b7:	74 76                	je     c000fa2f <Phys::allocatePage()+0x9a>
c000f9b9:	43                   	inc    ebx
c000f9ba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f9c0:	75 e2                	jne    c000f9a4 <Phys::allocatePage()+0xf>
c000f9c2:	31 db                	xor    ebx,ebx
c000f9c4:	c7 05 24 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da24,0x0
c000f9ce:	39 de                	cmp    esi,ebx
c000f9d0:	75 dc                	jne    c000f9ae <Phys::allocatePage()+0x19>
c000f9d2:	83 ec 0c             	sub    esp,0xc
c000f9d5:	68 a0 a0 02 c0       	push   0xc002a0a0
c000f9da:	e8 24 2d 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c000f9df:	58                   	pop    eax
c000f9e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9e8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f9ee:	e8 d5 29 00 00       	call   c00123c8 <VAS::scanForEviction()>
c000f9f3:	83 c4 10             	add    esp,0x10
c000f9f6:	85 c0                	test   eax,eax
c000f9f8:	75 76                	jne    c000fa70 <Phys::allocatePage()+0xdb>
c000f9fa:	83 ec 0c             	sub    esp,0xc
c000f9fd:	68 00 10 00 00       	push   0x1000
c000fa02:	e8 a2 fd ff ff       	call   c000f7a9 <Phys::allocateDMA(unsigned long)>
c000fa07:	83 c4 10             	add    esp,0x10
c000fa0a:	85 c0                	test   eax,eax
c000fa0c:	75 5c                	jne    c000fa6a <Phys::allocatePage()+0xd5>
c000fa0e:	83 ec 0c             	sub    esp,0xc
c000fa11:	68 b8 a0 02 c0       	push   0xc002a0b8
c000fa16:	e8 54 a4 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c000fa1b:	83 c4 10             	add    esp,0x10
c000fa1e:	8b 1d 24 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da24
c000fa24:	53                   	push   ebx
c000fa25:	e8 de fe ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000fa2a:	5a                   	pop    edx
c000fa2b:	84 c0                	test   al,al
c000fa2d:	75 8a                	jne    c000f9b9 <Phys::allocatePage()+0x24>
c000fa2f:	6a 01                	push   0x1
c000fa31:	53                   	push   ebx
c000fa32:	e8 9f fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa37:	5a                   	pop    edx
c000fa38:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c000fa3d:	59                   	pop    ecx
c000fa3e:	40                   	inc    eax
c000fa3f:	8b 15 24 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da24
c000fa45:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c000fa4a:	c1 e2 0c             	shl    edx,0xc
c000fa4d:	52                   	push   edx
c000fa4e:	ff 35 34 da 02 c0    	push   DWORD PTR ds:0xc002da34
c000fa54:	50                   	push   eax
c000fa55:	68 82 a0 02 c0       	push   0xc002a082
c000fa5a:	e8 a4 2c 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c000fa5f:	a1 24 da 02 c0       	mov    eax,ds:0xc002da24
c000fa64:	83 c4 10             	add    esp,0x10
c000fa67:	c1 e0 0c             	shl    eax,0xc
c000fa6a:	83 c4 14             	add    esp,0x14
c000fa6d:	5b                   	pop    ebx
c000fa6e:	5e                   	pop    esi
c000fa6f:	c3                   	ret    
c000fa70:	83 ec 08             	sub    esp,0x8
c000fa73:	89 c2                	mov    edx,eax
c000fa75:	6a 01                	push   0x1
c000fa77:	c1 ea 0c             	shr    edx,0xc
c000fa7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fa7e:	52                   	push   edx
c000fa7f:	e8 52 fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa84:	83 c4 10             	add    esp,0x10
c000fa87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa8b:	eb dd                	jmp    c000fa6a <Phys::allocatePage()+0xd5>

c000fa8d <Phys::allocateContiguousPages(int)>:
c000fa8d:	57                   	push   edi
c000fa8e:	56                   	push   esi
c000fa8f:	53                   	push   ebx
c000fa90:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa94:	fa                   	cli    
c000fa95:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c000fa9b:	31 db                	xor    ebx,ebx
c000fa9d:	85 db                	test   ebx,ebx
c000fa9f:	75 11                	jne    c000fab2 <Phys::allocateContiguousPages(int)+0x25>
c000faa1:	e8 ef fe ff ff       	call   c000f995 <Phys::allocatePage()>
c000faa6:	83 fe 01             	cmp    esi,0x1
c000faa9:	89 c7                	mov    edi,eax
c000faab:	74 21                	je     c000face <Phys::allocateContiguousPages(int)+0x41>
c000faad:	bb 01 00 00 00       	mov    ebx,0x1
c000fab2:	e8 de fe ff ff       	call   c000f995 <Phys::allocatePage()>
c000fab7:	89 da                	mov    edx,ebx
c000fab9:	c1 e2 0c             	shl    edx,0xc
c000fabc:	01 fa                	add    edx,edi
c000fabe:	39 c2                	cmp    edx,eax
c000fac0:	74 20                	je     c000fae2 <Phys::allocateContiguousPages(int)+0x55>
c000fac2:	bb 01 00 00 00       	mov    ebx,0x1
c000fac7:	89 c7                	mov    edi,eax
c000fac9:	83 fe 01             	cmp    esi,0x1
c000facc:	75 e4                	jne    c000fab2 <Phys::allocateContiguousPages(int)+0x25>
c000face:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c000fad3:	48                   	dec    eax
c000fad4:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c000fad9:	75 01                	jne    c000fadc <Phys::allocateContiguousPages(int)+0x4f>
c000fadb:	fb                   	sti    
c000fadc:	89 f8                	mov    eax,edi
c000fade:	5b                   	pop    ebx
c000fadf:	5e                   	pop    esi
c000fae0:	5f                   	pop    edi
c000fae1:	c3                   	ret    
c000fae2:	43                   	inc    ebx
c000fae3:	39 f3                	cmp    ebx,esi
c000fae5:	75 b6                	jne    c000fa9d <Phys::allocateContiguousPages(int)+0x10>
c000fae7:	eb e5                	jmp    c000face <Phys::allocateContiguousPages(int)+0x41>

c000fae9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fae9:	56                   	push   esi
c000faea:	53                   	push   ebx
c000faeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000faef:	39 1d 28 da 02 c0    	cmp    DWORD PTR ds:0xc002da28,ebx
c000faf5:	73 06                	jae    c000fafd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000faf7:	89 1d 28 da 02 c0    	mov    DWORD PTR ds:0xc002da28,ebx
c000fafd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb01:	c1 eb 0c             	shr    ebx,0xc
c000fb04:	c1 e8 0c             	shr    eax,0xc
c000fb07:	39 d8                	cmp    eax,ebx
c000fb09:	73 13                	jae    c000fb1e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fb0b:	6a 00                	push   0x0
c000fb0d:	8d 70 01             	lea    esi,[eax+0x1]
c000fb10:	50                   	push   eax
c000fb11:	e8 c0 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb16:	5a                   	pop    edx
c000fb17:	89 f0                	mov    eax,esi
c000fb19:	59                   	pop    ecx
c000fb1a:	39 f3                	cmp    ebx,esi
c000fb1c:	75 ed                	jne    c000fb0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fb1e:	5b                   	pop    ebx
c000fb1f:	5e                   	pop    esi
c000fb20:	c3                   	ret    

c000fb21 <Phys::physicalMemorySetup(unsigned int)>:
c000fb21:	55                   	push   ebp
c000fb22:	57                   	push   edi
c000fb23:	56                   	push   esi
c000fb24:	53                   	push   ebx
c000fb25:	31 db                	xor    ebx,ebx
c000fb27:	83 ec 40             	sub    esp,0x40
c000fb2a:	6a 30                	push   0x30
c000fb2c:	6a 00                	push   0x0
c000fb2e:	68 40 da 02 c0       	push   0xc002da40
c000fb33:	e8 18 0c ff ff       	call   c0000750 <memset>
c000fb38:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fb3c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb41:	05 00 10 00 00       	add    eax,0x1000
c000fb46:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fb4a:	5a                   	pop    edx
c000fb4b:	59                   	pop    ecx
c000fb4c:	50                   	push   eax
c000fb4d:	68 c6 a0 02 c0       	push   0xc002a0c6
c000fb52:	e8 ac 2b 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c000fb57:	83 c4 10             	add    esp,0x10
c000fb5a:	83 ec 08             	sub    esp,0x8
c000fb5d:	6a 01                	push   0x1
c000fb5f:	53                   	push   ebx
c000fb60:	43                   	inc    ebx
c000fb61:	e8 70 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb66:	83 c4 10             	add    esp,0x10
c000fb69:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb6f:	75 e9                	jne    c000fb5a <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fb71:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fb78:	66 85 c0             	test   ax,ax
c000fb7b:	0f 84 8e 01 00 00    	je     c000fd0f <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000fb81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb85:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fb8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb91:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb9a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fba2:	eb 15                	jmp    c000fbb9 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000fba4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fba8:	83 c3 18             	add    ebx,0x18
c000fbab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbaf:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000fbb3:	0f 84 66 01 00 00    	je     c000fd1f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbb9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fbbc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fbbf:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fbc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbc6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fbca:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fbcc:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fbcf:	01 f0                	add    eax,esi
c000fbd1:	55                   	push   ebp
c000fbd2:	11 fa                	adc    edx,edi
c000fbd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbd8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fbdc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fbe0:	56                   	push   esi
c000fbe1:	68 30 a1 02 c0       	push   0xc002a130
c000fbe6:	e8 18 2b 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c000fbeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbef:	83 c4 10             	add    esp,0x10
c000fbf2:	09 f8                	or     eax,edi
c000fbf4:	0f 85 25 01 00 00    	jne    c000fd1f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbfa:	4d                   	dec    ebp
c000fbfb:	75 a7                	jne    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fbfd:	ba 00 00 08 00       	mov    edx,0x80000
c000fc02:	89 c1                	mov    ecx,eax
c000fc04:	39 f2                	cmp    edx,esi
c000fc06:	19 f9                	sbb    ecx,edi
c000fc08:	0f 82 a7 00 00 00    	jb     c000fcb5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fc0e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fc12:	89 c1                	mov    ecx,eax
c000fc14:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fc18:	0f 83 97 00 00 00    	jae    c000fcb5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fc1e:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fc23:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc27:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc2b:	39 fa                	cmp    edx,edi
c000fc2d:	19 e8                	sbb    eax,ebp
c000fc2f:	0f 82 4d 01 00 00    	jb     c000fd82 <Phys::physicalMemorySetup(unsigned int)+0x261>
c000fc35:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc39:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc3d:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fc43:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc48:	83 d5 ff             	adc    ebp,0xffffffff
c000fc4b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fc4f:	31 c0                	xor    eax,eax
c000fc51:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fc55:	39 fa                	cmp    edx,edi
c000fc57:	89 c1                	mov    ecx,eax
c000fc59:	19 e9                	sbb    ecx,ebp
c000fc5b:	0f 83 43 ff ff ff    	jae    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fc61:	be 00 00 08 00       	mov    esi,0x80000
c000fc66:	51                   	push   ecx
c000fc67:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fc6b:	57                   	push   edi
c000fc6c:	56                   	push   esi
c000fc6d:	68 54 a1 02 c0       	push   0xc002a154
c000fc72:	e8 8c 2a 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c000fc77:	5d                   	pop    ebp
c000fc78:	58                   	pop    eax
c000fc79:	57                   	push   edi
c000fc7a:	56                   	push   esi
c000fc7b:	e8 69 fe ff ff       	call   c000fae9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc80:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc88:	83 c4 0c             	add    esp,0xc
c000fc8b:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc8f:	03 05 34 da 02 c0    	add    eax,DWORD PTR ds:0xc002da34
c000fc95:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc9c:	a3 34 da 02 c0       	mov    ds:0xc002da34,eax
c000fca1:	52                   	push   edx
c000fca2:	50                   	push   eax
c000fca3:	68 ec a0 02 c0       	push   0xc002a0ec
c000fca8:	e8 56 2a 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c000fcad:	83 c4 10             	add    esp,0x10
c000fcb0:	e9 ef fe ff ff       	jmp    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fcb5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fcb9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fcbd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fcc1:	39 ea                	cmp    edx,ebp
c000fcc3:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fcc7:	0f 82 d7 fe ff ff    	jb     c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fccd:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fcd2:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fcd6:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fcda:	0f 83 c4 fe ff ff    	jae    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fce0:	39 ee                	cmp    esi,ebp
c000fce2:	89 f8                	mov    eax,edi
c000fce4:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fce8:	0f 83 78 ff ff ff    	jae    c000fc66 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fcee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fcf6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fcfa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fcfe:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fd02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd06:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd0a:	e9 57 ff ff ff       	jmp    c000fc66 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fd0f:	83 ec 0c             	sub    esp,0xc
c000fd12:	68 de a0 02 c0       	push   0xc002a0de
c000fd17:	e8 53 a1 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c000fd1c:	83 c4 10             	add    esp,0x10
c000fd1f:	bb 40 01 00 00       	mov    ebx,0x140
c000fd24:	83 ec 08             	sub    esp,0x8
c000fd27:	53                   	push   ebx
c000fd28:	68 08 a1 02 c0       	push   0xc002a108
c000fd2d:	e8 d1 29 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c000fd32:	58                   	pop    eax
c000fd33:	5a                   	pop    edx
c000fd34:	6a 00                	push   0x0
c000fd36:	53                   	push   ebx
c000fd37:	43                   	inc    ebx
c000fd38:	e8 99 fb ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fd3d:	ff 05 34 da 02 c0    	inc    DWORD PTR ds:0xc002da34
c000fd43:	83 c4 10             	add    esp,0x10
c000fd46:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fd4c:	75 d6                	jne    c000fd24 <Phys::physicalMemorySetup(unsigned int)+0x203>
c000fd4e:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000fd53:	83 ec 0c             	sub    esp,0xc
c000fd56:	53                   	push   ebx
c000fd57:	e8 ac fb ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000fd5c:	83 c4 0c             	add    esp,0xc
c000fd5f:	0f b6 c0             	movzx  eax,al
c000fd62:	50                   	push   eax
c000fd63:	53                   	push   ebx
c000fd64:	43                   	inc    ebx
c000fd65:	68 24 a1 02 c0       	push   0xc002a124
c000fd6a:	e8 94 29 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c000fd6f:	83 c4 10             	add    esp,0x10
c000fd72:	81 fb 00 90 0c 00    	cmp    ebx,0xc9000
c000fd78:	75 d9                	jne    c000fd53 <Phys::physicalMemorySetup(unsigned int)+0x232>
c000fd7a:	83 c4 3c             	add    esp,0x3c
c000fd7d:	5b                   	pop    ebx
c000fd7e:	5e                   	pop    esi
c000fd7f:	5f                   	pop    edi
c000fd80:	5d                   	pop    ebp
c000fd81:	c3                   	ret    
c000fd82:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fd8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fd92:	e9 9e fe ff ff       	jmp    c000fc35 <Phys::physicalMemorySetup(unsigned int)+0x114>
c000fd97:	90                   	nop

c000fd98 <Pipe::isAtty()>:
c000fd98:	31 c0                	xor    eax,eax
c000fd9a:	c3                   	ret    
c000fd9b:	90                   	nop

c000fd9c <Pipe::~Pipe()>:
c000fd9c:	83 ec 0c             	sub    esp,0xc
c000fd9f:	ba c0 a1 02 c0       	mov    edx,0xc002a1c0
c000fda4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fda8:	89 10                	mov    DWORD PTR [eax],edx
c000fdaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdae:	83 ec 0c             	sub    esp,0xc
c000fdb1:	50                   	push   eax
c000fdb2:	e8 3f 12 00 00       	call   c0010ff6 <UnixFile::~UnixFile()>
c000fdb7:	83 c4 10             	add    esp,0x10
c000fdba:	90                   	nop
c000fdbb:	83 c4 0c             	add    esp,0xc
c000fdbe:	c3                   	ret    
c000fdbf:	90                   	nop

c000fdc0 <Pipe::~Pipe()>:
c000fdc0:	83 ec 0c             	sub    esp,0xc
c000fdc3:	83 ec 0c             	sub    esp,0xc
c000fdc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdca:	e8 cd ff ff ff       	call   c000fd9c <Pipe::~Pipe()>
c000fdcf:	83 c4 10             	add    esp,0x10
c000fdd2:	83 ec 08             	sub    esp,0x8
c000fdd5:	6a 20                	push   0x20
c000fdd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fddb:	e8 4b 28 00 00       	call   c001262b <operator delete(void*, unsigned long)>
c000fde0:	83 c4 10             	add    esp,0x10
c000fde3:	83 c4 0c             	add    esp,0xc
c000fde6:	c3                   	ret    
c000fde7:	90                   	nop

c000fde8 <Pipe::read(unsigned long long, void*, int*)>:
c000fde8:	55                   	push   ebp
c000fde9:	57                   	push   edi
c000fdea:	56                   	push   esi
c000fdeb:	53                   	push   ebx
c000fdec:	83 ec 1c             	sub    esp,0x1c
c000fdef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fdf3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fdf7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fdfb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fdfe:	89 c8                	mov    eax,ecx
c000fe00:	99                   	cdq    
c000fe01:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fe05:	74 24                	je     c000fe2b <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fe07:	39 f9                	cmp    ecx,edi
c000fe09:	89 d1                	mov    ecx,edx
c000fe0b:	19 f1                	sbb    ecx,esi
c000fe0d:	73 1c                	jae    c000fe2b <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fe0f:	fa                   	cli    
c000fe10:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c000fe16:	e8 de db 00 00       	call   c001d9f9 <schedule()>
c000fe1b:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c000fe20:	48                   	dec    eax
c000fe21:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c000fe26:	75 d3                	jne    c000fdfb <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fe28:	fb                   	sti    
c000fe29:	eb d0                	jmp    c000fdfb <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fe2b:	39 f8                	cmp    eax,edi
c000fe2d:	89 d1                	mov    ecx,edx
c000fe2f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fe32:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fe36:	19 f1                	sbb    ecx,esi
c000fe38:	73 07                	jae    c000fe41 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fe3a:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe3d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe41:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fe44:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fe47:	29 f7                	sub    edi,esi
c000fe49:	89 f8                	mov    eax,edi
c000fe4b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fe4f:	99                   	cdq    
c000fe50:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fe53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe57:	19 d0                	sbb    eax,edx
c000fe59:	73 07                	jae    c000fe62 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fe5b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fe5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe62:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fe65:	89 ea                	mov    edx,ebp
c000fe67:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fe6b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fe70:	74 0d                	je     c000fe7f <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fe72:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fe75:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fe79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe7f:	85 d2                	test   edx,edx
c000fe81:	74 11                	je     c000fe94 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fe83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe87:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fe8a:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fe8e:	89 d1                	mov    ecx,edx
c000fe90:	89 c7                	mov    edi,eax
c000fe92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe94:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe97:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fe9a:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe9d:	99                   	cdq    
c000fe9e:	89 f7                	mov    edi,esi
c000fea0:	03 04 24             	add    eax,DWORD PTR [esp]
c000fea3:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fea7:	c1 ff 1f             	sar    edi,0x1f
c000feaa:	57                   	push   edi
c000feab:	56                   	push   esi
c000feac:	52                   	push   edx
c000fead:	50                   	push   eax
c000feae:	e8 91 69 01 00       	call   c0026844 <__umoddi3>
c000feb3:	83 c4 10             	add    esp,0x10
c000feb6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000feb9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000febe:	75 10                	jne    c000fed0 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fec0:	83 ec 0c             	sub    esp,0xc
c000fec3:	68 7d a1 02 c0       	push   0xc002a17d
c000fec8:	e8 a2 9f 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c000fecd:	83 c4 10             	add    esp,0x10
c000fed0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fed4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fed7:	89 10                	mov    DWORD PTR [eax],edx
c000fed9:	83 c4 1c             	add    esp,0x1c
c000fedc:	31 c0                	xor    eax,eax
c000fede:	5b                   	pop    ebx
c000fedf:	5e                   	pop    esi
c000fee0:	5f                   	pop    edi
c000fee1:	5d                   	pop    ebp
c000fee2:	c3                   	ret    
c000fee3:	90                   	nop

c000fee4 <Pipe::write(unsigned long long, void*, int*)>:
c000fee4:	55                   	push   ebp
c000fee5:	57                   	push   edi
c000fee6:	56                   	push   esi
c000fee7:	53                   	push   ebx
c000fee8:	83 ec 1c             	sub    esp,0x1c
c000feeb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000feef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fef3:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000fef6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fefa:	89 04 24             	mov    DWORD PTR [esp],eax
c000fefd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ff01:	89 d8                	mov    eax,ebx
c000ff03:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000ff06:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ff0a:	89 d6                	mov    esi,edx
c000ff0c:	89 d7                	mov    edi,edx
c000ff0e:	c1 ff 1f             	sar    edi,0x1f
c000ff11:	03 34 24             	add    esi,DWORD PTR [esp]
c000ff14:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000ff18:	c1 f8 1f             	sar    eax,0x1f
c000ff1b:	39 f3                	cmp    ebx,esi
c000ff1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ff21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff25:	19 f8                	sbb    eax,edi
c000ff27:	b8 01 00 00 00       	mov    eax,0x1
c000ff2c:	72 6e                	jb     c000ff9c <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000ff2e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ff31:	01 d0                	add    eax,edx
c000ff33:	99                   	cdq    
c000ff34:	f7 fb                	idiv   ebx
c000ff36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff3a:	29 d3                	sub    ebx,edx
c000ff3c:	89 d7                	mov    edi,edx
c000ff3e:	89 de                	mov    esi,ebx
c000ff40:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000ff43:	c1 fb 1f             	sar    ebx,0x1f
c000ff46:	39 f2                	cmp    edx,esi
c000ff48:	19 d8                	sbb    eax,ebx
c000ff4a:	b8 00 00 00 00       	mov    eax,0x0
c000ff4f:	72 04                	jb     c000ff55 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000ff51:	89 d0                	mov    eax,edx
c000ff53:	29 f0                	sub    eax,esi
c000ff55:	89 d3                	mov    ebx,edx
c000ff57:	29 c3                	sub    ebx,eax
c000ff59:	74 0b                	je     c000ff66 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000ff5b:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ff5e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ff62:	89 d9                	mov    ecx,ebx
c000ff64:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff66:	85 c0                	test   eax,eax
c000ff68:	74 0d                	je     c000ff77 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000ff6a:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ff6e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000ff71:	89 de                	mov    esi,ebx
c000ff73:	89 c1                	mov    ecx,eax
c000ff75:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff77:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000ff7a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff7f:	75 10                	jne    c000ff91 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000ff81:	83 ec 0c             	sub    esp,0xc
c000ff84:	68 99 a1 02 c0       	push   0xc002a199
c000ff89:	e8 e1 9e 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c000ff8e:	83 c4 10             	add    esp,0x10
c000ff91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff95:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000ff98:	89 08                	mov    DWORD PTR [eax],ecx
c000ff9a:	31 c0                	xor    eax,eax
c000ff9c:	83 c4 1c             	add    esp,0x1c
c000ff9f:	5b                   	pop    ebx
c000ffa0:	5e                   	pop    esi
c000ffa1:	5f                   	pop    edi
c000ffa2:	5d                   	pop    ebp
c000ffa3:	c3                   	ret    

c000ffa4 <Pipe::Pipe(int)>:
c000ffa4:	83 ec 0c             	sub    esp,0xc
c000ffa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffab:	83 ec 08             	sub    esp,0x8
c000ffae:	6a 00                	push   0x0
c000ffb0:	50                   	push   eax
c000ffb1:	e8 5e 0e 00 00       	call   c0010e14 <UnixFile::UnixFile(int)>
c000ffb6:	83 c4 10             	add    esp,0x10
c000ffb9:	ba c0 a1 02 c0       	mov    edx,0xc002a1c0
c000ffbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc2:	89 10                	mov    DWORD PTR [eax],edx
c000ffc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ffcc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ffcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffd3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ffda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffde:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ffe5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffe9:	83 ec 0c             	sub    esp,0xc
c000ffec:	50                   	push   eax
c000ffed:	e8 a7 f5 ff ff       	call   c000f599 <malloc>
c000fff2:	83 c4 10             	add    esp,0x10
c000fff5:	89 c2                	mov    edx,eax
c000fff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fffb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010002:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010006:	90                   	nop
c0010007:	83 c4 0c             	add    esp,0xc
c001000a:	c3                   	ret    
c001000b:	90                   	nop

c001000c <VgaText::isAtty()>:
c001000c:	b0 01                	mov    al,0x1
c001000e:	c3                   	ret    
c001000f:	90                   	nop

c0010010 <VgaText::~VgaText()>:
c0010010:	83 ec 0c             	sub    esp,0xc
c0010013:	ba 48 a2 02 c0       	mov    edx,0xc002a248
c0010018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001001c:	89 10                	mov    DWORD PTR [eax],edx
c001001e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010022:	83 ec 0c             	sub    esp,0xc
c0010025:	50                   	push   eax
c0010026:	e8 cb 0f 00 00       	call   c0010ff6 <UnixFile::~UnixFile()>
c001002b:	83 c4 10             	add    esp,0x10
c001002e:	90                   	nop
c001002f:	83 c4 0c             	add    esp,0xc
c0010032:	c3                   	ret    
c0010033:	90                   	nop

c0010034 <VgaText::~VgaText()>:
c0010034:	83 ec 0c             	sub    esp,0xc
c0010037:	83 ec 0c             	sub    esp,0xc
c001003a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001003e:	e8 cd ff ff ff       	call   c0010010 <VgaText::~VgaText()>
c0010043:	83 c4 10             	add    esp,0x10
c0010046:	83 ec 08             	sub    esp,0x8
c0010049:	68 c4 02 00 00       	push   0x2c4
c001004e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010052:	e8 d4 25 00 00       	call   c001262b <operator delete(void*, unsigned long)>
c0010057:	83 c4 10             	add    esp,0x10
c001005a:	83 c4 0c             	add    esp,0xc
c001005d:	c3                   	ret    

c001005e <VgaText::read(unsigned long long, void*, int*)>:
c001005e:	83 ec 10             	sub    esp,0x10
c0010061:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010065:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010069:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001006d:	e8 58 5b 00 00       	call   c0015bca <readKeyboard(VgaText*, char*, unsigned long)>
c0010072:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010076:	89 02                	mov    DWORD PTR [edx],eax
c0010078:	31 c0                	xor    eax,eax
c001007a:	83 c4 1c             	add    esp,0x1c
c001007d:	c3                   	ret    

c001007e <setTerminalScrollLock(bool)>:
c001007e:	c3                   	ret    

c001007f <addToTerminalCycle(VgaText*)>:
c001007f:	8b 15 a0 da 02 c0    	mov    edx,DWORD PTR ds:0xc002daa0
c0010085:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010089:	85 d2                	test   edx,edx
c001008b:	75 09                	jne    c0010096 <addToTerminalCycle(VgaText*)+0x17>
c001008d:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010090:	a3 a0 da 02 c0       	mov    ds:0xc002daa0,eax
c0010095:	c3                   	ret    
c0010096:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010099:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001009c:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c001009f:	c3                   	ret    

c00100a0 <installVgaTextImplementation()>:
c00100a0:	83 ec 10             	sub    esp,0x10
c00100a3:	6a 20                	push   0x20
c00100a5:	6a 00                	push   0x0
c00100a7:	68 80 da 02 c0       	push   0xc002da80
c00100ac:	e8 9f 06 ff ff       	call   c0000750 <memset>
c00100b1:	83 c4 1c             	add    esp,0x1c
c00100b4:	c3                   	ret    

c00100b5 <scrollTerminalScrollLock(int)>:
c00100b5:	c3                   	ret    

c00100b6 <VgaText::updateTitle()>:
c00100b6:	53                   	push   ebx
c00100b7:	31 c0                	xor    eax,eax
c00100b9:	83 ec 58             	sub    esp,0x58
c00100bc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00100c0:	89 e1                	mov    ecx,esp
c00100c2:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00100c6:	40                   	inc    eax
c00100c7:	83 f8 50             	cmp    eax,0x50
c00100ca:	75 f6                	jne    c00100c2 <VgaText::updateTitle()+0xc>
c00100cc:	31 c0                	xor    eax,eax
c00100ce:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c00100d5:	84 db                	test   bl,bl
c00100d7:	74 06                	je     c00100df <VgaText::updateTitle()+0x29>
c00100d9:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00100dc:	40                   	inc    eax
c00100dd:	eb ef                	jmp    c00100ce <VgaText::updateTitle()+0x18>
c00100df:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c00100e2:	85 c0                	test   eax,eax
c00100e4:	74 09                	je     c00100ef <VgaText::updateTitle()+0x39>
c00100e6:	53                   	push   ebx
c00100e7:	53                   	push   ebx
c00100e8:	51                   	push   ecx
c00100e9:	52                   	push   edx
c00100ea:	ff d0                	call   eax
c00100ec:	83 c4 10             	add    esp,0x10
c00100ef:	83 c4 58             	add    esp,0x58
c00100f2:	5b                   	pop    ebx
c00100f3:	c3                   	ret    

c00100f4 <VgaText::load()>:
c00100f4:	53                   	push   ebx
c00100f5:	31 c0                	xor    eax,eax
c00100f7:	83 ec 58             	sub    esp,0x58
c00100fa:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00100fe:	89 e2                	mov    edx,esp
c0010100:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010104:	40                   	inc    eax
c0010105:	83 f8 50             	cmp    eax,0x50
c0010108:	75 f6                	jne    c0010100 <VgaText::load()+0xc>
c001010a:	31 c0                	xor    eax,eax
c001010c:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c0010113:	84 c9                	test   cl,cl
c0010115:	74 06                	je     c001011d <VgaText::load()+0x29>
c0010117:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001011a:	40                   	inc    eax
c001011b:	eb ef                	jmp    c001010c <VgaText::load()+0x18>
c001011d:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c0010120:	85 c0                	test   eax,eax
c0010122:	74 09                	je     c001012d <VgaText::load()+0x39>
c0010124:	51                   	push   ecx
c0010125:	51                   	push   ecx
c0010126:	52                   	push   edx
c0010127:	53                   	push   ebx
c0010128:	ff d0                	call   eax
c001012a:	83 c4 10             	add    esp,0x10
c001012d:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c0010130:	85 c0                	test   eax,eax
c0010132:	74 09                	je     c001013d <VgaText::load()+0x49>
c0010134:	83 ec 0c             	sub    esp,0xc
c0010137:	53                   	push   ebx
c0010138:	ff d0                	call   eax
c001013a:	83 c4 10             	add    esp,0x10
c001013d:	83 c4 58             	add    esp,0x58
c0010140:	5b                   	pop    ebx
c0010141:	c3                   	ret    

c0010142 <VgaText::updateCursor()>:
c0010142:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010146:	39 05 a4 da 02 c0    	cmp    DWORD PTR ds:0xc002daa4,eax
c001014c:	75 09                	jne    c0010157 <VgaText::updateCursor()+0x15>
c001014e:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010151:	85 c0                	test   eax,eax
c0010153:	74 02                	je     c0010157 <VgaText::updateCursor()+0x15>
c0010155:	ff e0                	jmp    eax
c0010157:	c3                   	ret    

c0010158 <VgaText::doANSI_SGR(int)>:
c0010158:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001015c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010160:	85 d2                	test   edx,edx
c0010162:	75 0b                	jne    c001016f <VgaText::doANSI_SGR(int)+0x17>
c0010164:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010167:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001016a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001016d:	eb 59                	jmp    c00101c8 <VgaText::doANSI_SGR(int)+0x70>
c001016f:	83 fa 07             	cmp    edx,0x7
c0010172:	75 0b                	jne    c001017f <VgaText::doANSI_SGR(int)+0x27>
c0010174:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010177:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c001017a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001017d:	eb 49                	jmp    c00101c8 <VgaText::doANSI_SGR(int)+0x70>
c001017f:	83 fa 1b             	cmp    edx,0x1b
c0010182:	74 e0                	je     c0010164 <VgaText::doANSI_SGR(int)+0xc>
c0010184:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010187:	83 f9 07             	cmp    ecx,0x7
c001018a:	77 09                	ja     c0010195 <VgaText::doANSI_SGR(int)+0x3d>
c001018c:	8b 14 8d 40 c9 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd36c0]
c0010193:	eb 20                	jmp    c00101b5 <VgaText::doANSI_SGR(int)+0x5d>
c0010195:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010198:	83 f9 07             	cmp    ecx,0x7
c001019b:	77 09                	ja     c00101a6 <VgaText::doANSI_SGR(int)+0x4e>
c001019d:	8b 14 8d 40 c9 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd36c0]
c00101a4:	eb 22                	jmp    c00101c8 <VgaText::doANSI_SGR(int)+0x70>
c00101a6:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00101a9:	83 f9 07             	cmp    ecx,0x7
c00101ac:	77 0b                	ja     c00101b9 <VgaText::doANSI_SGR(int)+0x61>
c00101ae:	8b 14 95 f8 c7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3808]
c00101b5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00101b8:	c3                   	ret    
c00101b9:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00101bc:	83 f9 07             	cmp    ecx,0x7
c00101bf:	77 0a                	ja     c00101cb <VgaText::doANSI_SGR(int)+0x73>
c00101c1:	8b 14 95 d0 c7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3830]
c00101c8:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00101cb:	c3                   	ret    

c00101cc <VgaText::setDefaultBgColour(VgaColour)>:
c00101cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101d4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00101d7:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00101da:	c3                   	ret    
c00101db:	90                   	nop

c00101dc <VgaText::setDefaultFgColour(VgaColour)>:
c00101dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101e4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00101e7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00101ea:	c3                   	ret    
c00101eb:	90                   	nop

c00101ec <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00101ec:	53                   	push   ebx
c00101ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00101f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00101f9:	51                   	push   ecx
c00101fa:	e8 cd ff ff ff       	call   c00101cc <VgaText::setDefaultBgColour(VgaColour)>
c00101ff:	58                   	pop    eax
c0010200:	5a                   	pop    edx
c0010201:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010205:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010209:	5b                   	pop    ebx
c001020a:	eb d0                	jmp    c00101dc <VgaText::setDefaultFgColour(VgaColour)>

c001020c <VgaText::setTitleTextColour(VgaColour)>:
c001020c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010210:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010214:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010217:	e9 9a fe ff ff       	jmp    c00100b6 <VgaText::updateTitle()>

c001021c <VgaText::setTitleColour(VgaColour)>:
c001021c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010220:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010224:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010227:	e9 8a fe ff ff       	jmp    c00100b6 <VgaText::updateTitle()>

c001022c <VgaText::setTitle(char*)>:
c001022c:	53                   	push   ebx
c001022d:	83 ec 10             	sub    esp,0x10
c0010230:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010238:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c001023e:	50                   	push   eax
c001023f:	e8 c8 05 ff ff       	call   c000080c <strcpy>
c0010244:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010248:	83 c4 18             	add    esp,0x18
c001024b:	5b                   	pop    ebx
c001024c:	e9 65 fe ff ff       	jmp    c00100b6 <VgaText::updateTitle()>
c0010251:	90                   	nop

c0010252 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010252:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010256:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001025b:	83 e0 0f             	and    eax,0xf
c001025e:	c1 e2 04             	shl    edx,0x4
c0010261:	09 d0                	or     eax,edx
c0010263:	c3                   	ret    

c0010264 <VgaText::scrollScreen()>:
c0010264:	55                   	push   ebp
c0010265:	b9 01 00 00 00       	mov    ecx,0x1
c001026a:	57                   	push   edi
c001026b:	56                   	push   esi
c001026c:	53                   	push   ebx
c001026d:	83 ec 0c             	sub    esp,0xc
c0010270:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010274:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c001027a:	31 ff                	xor    edi,edi
c001027c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001027f:	83 f9 17             	cmp    ecx,0x17
c0010282:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0010285:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c001028c:	75 27                	jne    c00102b5 <VgaText::scrollScreen()+0x51>
c001028e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010291:	01 f5                	add    ebp,esi
c0010293:	f7 c7 01 00 00 00    	test   edi,0x1
c0010299:	74 16                	je     c00102b1 <VgaText::scrollScreen()+0x4d>
c001029b:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001029f:	50                   	push   eax
c00102a0:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00102a4:	50                   	push   eax
c00102a5:	e8 a8 ff ff ff       	call   c0010252 <VgaText::combineColours(unsigned char, unsigned char)>
c00102aa:	5a                   	pop    edx
c00102ab:	5a                   	pop    edx
c00102ac:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00102af:	eb 04                	jmp    c00102b5 <VgaText::scrollScreen()+0x51>
c00102b1:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00102b5:	47                   	inc    edi
c00102b6:	46                   	inc    esi
c00102b7:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00102bd:	75 bd                	jne    c001027c <VgaText::scrollScreen()+0x18>
c00102bf:	41                   	inc    ecx
c00102c0:	83 f9 18             	cmp    ecx,0x18
c00102c3:	75 af                	jne    c0010274 <VgaText::scrollScreen()+0x10>
c00102c5:	39 1d a4 da 02 c0    	cmp    DWORD PTR ds:0xc002daa4,ebx
c00102cb:	75 1b                	jne    c00102e8 <VgaText::scrollScreen()+0x84>
c00102cd:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00102d1:	74 05                	je     c00102d8 <VgaText::scrollScreen()+0x74>
c00102d3:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00102d6:	eb 10                	jmp    c00102e8 <VgaText::scrollScreen()+0x84>
c00102d8:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00102db:	85 c0                	test   eax,eax
c00102dd:	74 09                	je     c00102e8 <VgaText::scrollScreen()+0x84>
c00102df:	83 ec 0c             	sub    esp,0xc
c00102e2:	53                   	push   ebx
c00102e3:	ff d0                	call   eax
c00102e5:	83 c4 10             	add    esp,0x10
c00102e8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00102ec:	83 c4 0c             	add    esp,0xc
c00102ef:	5b                   	pop    ebx
c00102f0:	5e                   	pop    esi
c00102f1:	5f                   	pop    edi
c00102f2:	5d                   	pop    ebp
c00102f3:	e9 4a fe ff ff       	jmp    c0010142 <VgaText::updateCursor()>

c00102f8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00102f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00102fd:	c1 e0 08             	shl    eax,0x8
c0010300:	89 c2                	mov    edx,eax
c0010302:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010307:	09 d0                	or     eax,edx
c0010309:	c3                   	ret    

c001030a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001030a:	56                   	push   esi
c001030b:	53                   	push   ebx
c001030c:	51                   	push   ecx
c001030d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010311:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010316:	50                   	push   eax
c0010317:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001031c:	50                   	push   eax
c001031d:	e8 30 ff ff ff       	call   c0010252 <VgaText::combineColours(unsigned char, unsigned char)>
c0010322:	5b                   	pop    ebx
c0010323:	0f b6 c0             	movzx  eax,al
c0010326:	5e                   	pop    esi
c0010327:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001032c:	50                   	push   eax
c001032d:	53                   	push   ebx
c001032e:	e8 c5 ff ff ff       	call   c00102f8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010333:	5a                   	pop    edx
c0010334:	5e                   	pop    esi
c0010335:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c0010338:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001033e:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010342:	0f b7 d2             	movzx  edx,dx
c0010345:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c0010349:	39 0d a4 da 02 c0    	cmp    DWORD PTR ds:0xc002daa4,ecx
c001034f:	75 10                	jne    c0010361 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010351:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c0010354:	85 c0                	test   eax,eax
c0010356:	74 09                	je     c0010361 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010358:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001035c:	5a                   	pop    edx
c001035d:	5b                   	pop    ebx
c001035e:	5e                   	pop    esi
c001035f:	ff e0                	jmp    eax
c0010361:	58                   	pop    eax
c0010362:	5b                   	pop    ebx
c0010363:	5e                   	pop    esi
c0010364:	c3                   	ret    
c0010365:	90                   	nop

c0010366 <VgaText::getCursorX()>:
c0010366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001036a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001036d:	c3                   	ret    

c001036e <VgaText::getCursorY()>:
c001036e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010372:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0010375:	c3                   	ret    

c0010376 <VgaText::setCursor(int, int)>:
c0010376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001037a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001037e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010381:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010385:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010388:	e9 b5 fd ff ff       	jmp    c0010142 <VgaText::updateCursor()>

c001038d <setActiveTerminal(VgaText*)>:
c001038d:	53                   	push   ebx
c001038e:	83 ec 08             	sub    esp,0x8
c0010391:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010395:	85 db                	test   ebx,ebx
c0010397:	75 11                	jne    c00103aa <setActiveTerminal(VgaText*)+0x1d>
c0010399:	c7 44 24 10 d4 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a1d4
c00103a1:	83 c4 08             	add    esp,0x8
c00103a4:	5b                   	pop    ebx
c00103a5:	e9 c5 9a 00 00       	jmp    c0019e6f <Krnl::panic(char const*)>
c00103aa:	a1 a4 da 02 c0       	mov    eax,ds:0xc002daa4
c00103af:	85 c0                	test   eax,eax
c00103b1:	74 0c                	je     c00103bf <setActiveTerminal(VgaText*)+0x32>
c00103b3:	83 ec 0c             	sub    esp,0xc
c00103b6:	50                   	push   eax
c00103b7:	e8 86 fd ff ff       	call   c0010142 <VgaText::updateCursor()>
c00103bc:	83 c4 10             	add    esp,0x10
c00103bf:	89 1d a4 da 02 c0    	mov    DWORD PTR ds:0xc002daa4,ebx
c00103c5:	51                   	push   ecx
c00103c6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00103c9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00103cc:	53                   	push   ebx
c00103cd:	e8 a4 ff ff ff       	call   c0010376 <VgaText::setCursor(int, int)>
c00103d2:	83 c4 10             	add    esp,0x10
c00103d5:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00103d9:	75 07                	jne    c00103e2 <setActiveTerminal(VgaText*)+0x55>
c00103db:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c00103e2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103e6:	83 c4 08             	add    esp,0x8
c00103e9:	5b                   	pop    ebx
c00103ea:	e9 05 fd ff ff       	jmp    c00100f4 <VgaText::load()>

c00103ef <doTerminalCycle()>:
c00103ef:	83 ec 18             	sub    esp,0x18
c00103f2:	a1 a0 da 02 c0       	mov    eax,ds:0xc002daa0
c00103f7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00103fa:	50                   	push   eax
c00103fb:	a3 a0 da 02 c0       	mov    ds:0xc002daa0,eax
c0010400:	e8 88 ff ff ff       	call   c001038d <setActiveTerminal(VgaText*)>
c0010405:	83 c4 1c             	add    esp,0x1c
c0010408:	c3                   	ret    
c0010409:	90                   	nop

c001040a <VgaText::setCursorX(int)>:
c001040a:	83 ec 10             	sub    esp,0x10
c001040d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010411:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010418:	50                   	push   eax
c0010419:	e8 58 ff ff ff       	call   c0010376 <VgaText::setCursor(int, int)>
c001041e:	83 c4 1c             	add    esp,0x1c
c0010421:	c3                   	ret    

c0010422 <VgaText::setCursorY(int)>:
c0010422:	83 ec 10             	sub    esp,0x10
c0010425:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010429:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001042d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010430:	50                   	push   eax
c0010431:	e8 40 ff ff ff       	call   c0010376 <VgaText::setCursor(int, int)>
c0010436:	83 c4 1c             	add    esp,0x1c
c0010439:	c3                   	ret    

c001043a <VgaText::incrementCursor(bool)>:
c001043a:	56                   	push   esi
c001043b:	53                   	push   ebx
c001043c:	51                   	push   ecx
c001043d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010441:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010445:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0010448:	40                   	inc    eax
c0010449:	83 f8 50             	cmp    eax,0x50
c001044c:	74 05                	je     c0010453 <VgaText::incrementCursor(bool)+0x19>
c001044e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010451:	eb 24                	jmp    c0010477 <VgaText::incrementCursor(bool)+0x3d>
c0010453:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010456:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001045d:	8d 50 01             	lea    edx,[eax+0x1]
c0010460:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010463:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010466:	75 0f                	jne    c0010477 <VgaText::incrementCursor(bool)+0x3d>
c0010468:	83 ec 0c             	sub    esp,0xc
c001046b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001046e:	53                   	push   ebx
c001046f:	e8 f0 fd ff ff       	call   c0010264 <VgaText::scrollScreen()>
c0010474:	83 c4 10             	add    esp,0x10
c0010477:	89 f0                	mov    eax,esi
c0010479:	84 c0                	test   al,al
c001047b:	74 0c                	je     c0010489 <VgaText::incrementCursor(bool)+0x4f>
c001047d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010481:	5a                   	pop    edx
c0010482:	5b                   	pop    ebx
c0010483:	5e                   	pop    esi
c0010484:	e9 b9 fc ff ff       	jmp    c0010142 <VgaText::updateCursor()>
c0010489:	58                   	pop    eax
c001048a:	5b                   	pop    ebx
c001048b:	5e                   	pop    esi
c001048c:	c3                   	ret    
c001048d:	90                   	nop

c001048e <VgaText::decrementCursor(bool)>:
c001048e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010492:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010496:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010499:	85 c0                	test   eax,eax
c001049b:	74 04                	je     c00104a1 <VgaText::decrementCursor(bool)+0x13>
c001049d:	48                   	dec    eax
c001049e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00104a1:	84 c9                	test   cl,cl
c00104a3:	74 09                	je     c00104ae <VgaText::decrementCursor(bool)+0x20>
c00104a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00104a9:	e9 94 fc ff ff       	jmp    c0010142 <VgaText::updateCursor()>
c00104ae:	c3                   	ret    
c00104af:	90                   	nop

c00104b0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00104b0:	53                   	push   ebx
c00104b1:	83 ec 08             	sub    esp,0x8
c00104b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00104bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00104c0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00104c4:	3c 07                	cmp    al,0x7
c00104c6:	75 2a                	jne    c00104f2 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c00104c8:	a1 58 db 02 c0       	mov    eax,ds:0xc002db58
c00104cd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00104d5:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00104dd:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00104e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104e9:	83 c4 08             	add    esp,0x8
c00104ec:	5b                   	pop    ebx
c00104ed:	e9 1e 30 00 00       	jmp    c0013510 <Buzzer::beep(int, int, bool)>
c00104f2:	3c 0d                	cmp    al,0xd
c00104f4:	75 09                	jne    c00104ff <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c00104f6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104fd:	eb 2c                	jmp    c001052b <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00104ff:	3c 0a                	cmp    al,0xa
c0010501:	75 31                	jne    c0010534 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010503:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010506:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001050d:	8d 50 01             	lea    edx,[eax+0x1]
c0010510:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010513:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010516:	75 0f                	jne    c0010527 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010518:	83 ec 0c             	sub    esp,0xc
c001051b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001051e:	53                   	push   ebx
c001051f:	e8 40 fd ff ff       	call   c0010264 <VgaText::scrollScreen()>
c0010524:	83 c4 10             	add    esp,0x10
c0010527:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001052b:	83 c4 08             	add    esp,0x8
c001052e:	5b                   	pop    ebx
c001052f:	e9 0e fc ff ff       	jmp    c0010142 <VgaText::updateCursor()>
c0010534:	3c 08                	cmp    al,0x8
c0010536:	75 25                	jne    c001055d <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010538:	50                   	push   eax
c0010539:	50                   	push   eax
c001053a:	6a 01                	push   0x1
c001053c:	53                   	push   ebx
c001053d:	e8 4c ff ff ff       	call   c001048e <VgaText::decrementCursor(bool)>
c0010542:	5a                   	pop    edx
c0010543:	59                   	pop    ecx
c0010544:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010547:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001054a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001054d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010550:	6a 20                	push   0x20
c0010552:	53                   	push   ebx
c0010553:	e8 b2 fd ff ff       	call   c001030a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010558:	83 c4 28             	add    esp,0x28
c001055b:	5b                   	pop    ebx
c001055c:	c3                   	ret    
c001055d:	83 ec 08             	sub    esp,0x8
c0010560:	0f be c0             	movsx  eax,al
c0010563:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010566:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010569:	51                   	push   ecx
c001056a:	52                   	push   edx
c001056b:	50                   	push   eax
c001056c:	53                   	push   ebx
c001056d:	e8 98 fd ff ff       	call   c001030a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010572:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010576:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001057e:	83 c4 28             	add    esp,0x28
c0010581:	5b                   	pop    ebx
c0010582:	e9 b3 fe ff ff       	jmp    c001043a <VgaText::incrementCursor(bool)>
c0010587:	90                   	nop

c0010588 <VgaText::doUpdate()>:
c0010588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001058c:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c001058f:	85 c0                	test   eax,eax
c0010591:	74 02                	je     c0010595 <VgaText::doUpdate()+0xd>
c0010593:	ff e0                	jmp    eax
c0010595:	c3                   	ret    

c0010596 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010596:	55                   	push   ebp
c0010597:	31 ed                	xor    ebp,ebp
c0010599:	57                   	push   edi
c001059a:	56                   	push   esi
c001059b:	53                   	push   ebx
c001059c:	83 ec 1c             	sub    esp,0x1c
c001059f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00105a3:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00105a8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00105af:	50                   	push   eax
c00105b0:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00105b5:	50                   	push   eax
c00105b6:	e8 97 fc ff ff       	call   c0010252 <VgaText::combineColours(unsigned char, unsigned char)>
c00105bb:	59                   	pop    ecx
c00105bc:	0f b6 c0             	movzx  eax,al
c00105bf:	5e                   	pop    esi
c00105c0:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105c5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00105c9:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00105d0:	0f b7 f6             	movzx  esi,si
c00105d3:	01 f6                	add    esi,esi
c00105d5:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105d8:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00105db:	84 c0                	test   al,al
c00105dd:	0f 84 fd 00 00 00    	je     c00106e0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c00105e3:	3c 0d                	cmp    al,0xd
c00105e5:	75 0c                	jne    c00105f3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c00105e7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105ee:	e9 e7 00 00 00       	jmp    c00106da <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105f3:	3c 0a                	cmp    al,0xa
c00105f5:	75 47                	jne    c001063e <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c00105f7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00105fa:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010601:	8d 48 01             	lea    ecx,[eax+0x1]
c0010604:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010607:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c001060a:	75 0f                	jne    c001061b <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c001060c:	83 ec 0c             	sub    esp,0xc
c001060f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010612:	53                   	push   ebx
c0010613:	e8 4c fc ff ff       	call   c0010264 <VgaText::scrollScreen()>
c0010618:	83 c4 10             	add    esp,0x10
c001061b:	83 ec 0c             	sub    esp,0xc
c001061e:	31 ed                	xor    ebp,ebp
c0010620:	53                   	push   ebx
c0010621:	e8 1c fb ff ff       	call   c0010142 <VgaText::updateCursor()>
c0010626:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001062b:	83 c4 10             	add    esp,0x10
c001062e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010631:	0f b7 f6             	movzx  esi,si
c0010634:	01 f6                	add    esi,esi
c0010636:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010639:	e9 9c 00 00 00       	jmp    c00106da <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001063e:	3c 08                	cmp    al,0x8
c0010640:	75 35                	jne    c0010677 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010642:	56                   	push   esi
c0010643:	56                   	push   esi
c0010644:	6a 01                	push   0x1
c0010646:	53                   	push   ebx
c0010647:	e8 42 fe ff ff       	call   c001048e <VgaText::decrementCursor(bool)>
c001064c:	58                   	pop    eax
c001064d:	5a                   	pop    edx
c001064e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010651:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010654:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010657:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001065a:	6a 20                	push   0x20
c001065c:	53                   	push   ebx
c001065d:	e8 a8 fc ff ff       	call   c001030a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010662:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010667:	83 c4 20             	add    esp,0x20
c001066a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001066d:	0f b7 f6             	movzx  esi,si
c0010670:	01 f6                	add    esi,esi
c0010672:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010675:	eb 63                	jmp    c00106da <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010677:	51                   	push   ecx
c0010678:	51                   	push   ecx
c0010679:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001067d:	50                   	push   eax
c001067e:	e8 75 fc ff ff       	call   c00102f8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010683:	83 c4 10             	add    esp,0x10
c0010686:	66 89 06             	mov    WORD PTR [esi],ax
c0010689:	39 1d a4 da 02 c0    	cmp    DWORD PTR ds:0xc002daa4,ebx
c001068f:	75 21                	jne    c00106b2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010691:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010694:	85 c0                	test   eax,eax
c0010696:	74 1a                	je     c00106b2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010698:	52                   	push   edx
c0010699:	52                   	push   edx
c001069a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001069d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00106a0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00106a4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00106a8:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c00106ab:	51                   	push   ecx
c00106ac:	53                   	push   ebx
c00106ad:	ff d0                	call   eax
c00106af:	83 c4 20             	add    esp,0x20
c00106b2:	83 c6 02             	add    esi,0x2
c00106b5:	50                   	push   eax
c00106b6:	50                   	push   eax
c00106b7:	6a 00                	push   0x0
c00106b9:	53                   	push   ebx
c00106ba:	e8 7b fd ff ff       	call   c001043a <VgaText::incrementCursor(bool)>
c00106bf:	83 c4 10             	add    esp,0x10
c00106c2:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00106c6:	75 0d                	jne    c00106d5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c00106c8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00106cd:	0f b7 f6             	movzx  esi,si
c00106d0:	01 f6                	add    esi,esi
c00106d2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00106d5:	bd 01 00 00 00       	mov    ebp,0x1
c00106da:	47                   	inc    edi
c00106db:	e9 f8 fe ff ff       	jmp    c00105d8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c00106e0:	83 ec 0c             	sub    esp,0xc
c00106e3:	53                   	push   ebx
c00106e4:	e8 59 fa ff ff       	call   c0010142 <VgaText::updateCursor()>
c00106e9:	83 c4 10             	add    esp,0x10
c00106ec:	89 e8                	mov    eax,ebp
c00106ee:	84 c0                	test   al,al
c00106f0:	74 0c                	je     c00106fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c00106f2:	83 ec 0c             	sub    esp,0xc
c00106f5:	53                   	push   ebx
c00106f6:	e8 8d fe ff ff       	call   c0010588 <VgaText::doUpdate()>
c00106fb:	83 c4 10             	add    esp,0x10
c00106fe:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010705:	83 c4 1c             	add    esp,0x1c
c0010708:	5b                   	pop    ebx
c0010709:	5e                   	pop    esi
c001070a:	5f                   	pop    edi
c001070b:	5d                   	pop    ebp
c001070c:	c3                   	ret    
c001070d:	90                   	nop

c001070e <VgaText::clearScreen()>:
c001070e:	57                   	push   edi
c001070f:	56                   	push   esi
c0010710:	31 f6                	xor    esi,esi
c0010712:	53                   	push   ebx
c0010713:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010717:	52                   	push   edx
c0010718:	6a 00                	push   0x0
c001071a:	6a 00                	push   0x0
c001071c:	53                   	push   ebx
c001071d:	e8 54 fc ff ff       	call   c0010376 <VgaText::setCursor(int, int)>
c0010722:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010729:	83 c4 10             	add    esp,0x10
c001072c:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c001072f:	7e 20                	jle    c0010751 <VgaText::clearScreen()+0x43>
c0010731:	31 ff                	xor    edi,edi
c0010733:	50                   	push   eax
c0010734:	50                   	push   eax
c0010735:	56                   	push   esi
c0010736:	57                   	push   edi
c0010737:	47                   	inc    edi
c0010738:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001073b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001073e:	6a 20                	push   0x20
c0010740:	53                   	push   ebx
c0010741:	e8 c4 fb ff ff       	call   c001030a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010746:	83 c4 20             	add    esp,0x20
c0010749:	83 ff 50             	cmp    edi,0x50
c001074c:	75 e5                	jne    c0010733 <VgaText::clearScreen()+0x25>
c001074e:	46                   	inc    esi
c001074f:	eb db                	jmp    c001072c <VgaText::clearScreen()+0x1e>
c0010751:	83 ec 0c             	sub    esp,0xc
c0010754:	53                   	push   ebx
c0010755:	e8 2e fe ff ff       	call   c0010588 <VgaText::doUpdate()>
c001075a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010761:	83 c4 10             	add    esp,0x10
c0010764:	5b                   	pop    ebx
c0010765:	5e                   	pop    esi
c0010766:	5f                   	pop    edi
c0010767:	c3                   	ret    

c0010768 <VgaText::putchar(char)>:
c0010768:	56                   	push   esi
c0010769:	53                   	push   ebx
c001076a:	83 ec 14             	sub    esp,0x14
c001076d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010771:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010775:	3c 5b                	cmp    al,0x5b
c0010777:	75 18                	jne    c0010791 <VgaText::putchar(char)+0x29>
c0010779:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c001077d:	74 1f                	je     c001079e <VgaText::putchar(char)+0x36>
c001077f:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010785:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c001078c:	e9 bd 00 00 00       	jmp    c001084e <VgaText::putchar(char)+0xe6>
c0010791:	3c 1b                	cmp    al,0x1b
c0010793:	75 09                	jne    c001079e <VgaText::putchar(char)+0x36>
c0010795:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010799:	e9 b0 00 00 00       	jmp    c001084e <VgaText::putchar(char)+0xe6>
c001079e:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00107a1:	84 c9                	test   cl,cl
c00107a3:	0f 84 92 00 00 00    	je     c001083b <VgaText::putchar(char)+0xd3>
c00107a9:	8d 50 c0             	lea    edx,[eax-0x40]
c00107ac:	80 fa 3e             	cmp    dl,0x3e
c00107af:	77 76                	ja     c0010827 <VgaText::putchar(char)+0xbf>
c00107b1:	3c 6d                	cmp    al,0x6d
c00107b3:	75 47                	jne    c00107fc <VgaText::putchar(char)+0x94>
c00107b5:	31 f6                	xor    esi,esi
c00107b7:	31 d2                	xor    edx,edx
c00107b9:	31 c0                	xor    eax,eax
c00107bb:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00107be:	7e 2d                	jle    c00107ed <VgaText::putchar(char)+0x85>
c00107c0:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00107c5:	80 fa 3b             	cmp    dl,0x3b
c00107c8:	75 17                	jne    c00107e1 <VgaText::putchar(char)+0x79>
c00107ca:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00107ce:	50                   	push   eax
c00107cf:	53                   	push   ebx
c00107d0:	e8 83 f9 ff ff       	call   c0010158 <VgaText::doANSI_SGR(int)>
c00107d5:	59                   	pop    ecx
c00107d6:	31 d2                	xor    edx,edx
c00107d8:	58                   	pop    eax
c00107d9:	31 c0                	xor    eax,eax
c00107db:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00107df:	eb 09                	jmp    c00107ea <VgaText::putchar(char)+0x82>
c00107e1:	6b c0 0a             	imul   eax,eax,0xa
c00107e4:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00107e8:	88 ca                	mov    dl,cl
c00107ea:	46                   	inc    esi
c00107eb:	eb ce                	jmp    c00107bb <VgaText::putchar(char)+0x53>
c00107ed:	84 d2                	test   dl,dl
c00107ef:	74 2e                	je     c001081f <VgaText::putchar(char)+0xb7>
c00107f1:	50                   	push   eax
c00107f2:	53                   	push   ebx
c00107f3:	e8 60 f9 ff ff       	call   c0010158 <VgaText::doANSI_SGR(int)>
c00107f8:	58                   	pop    eax
c00107f9:	5a                   	pop    edx
c00107fa:	eb 23                	jmp    c001081f <VgaText::putchar(char)+0xb7>
c00107fc:	3c 4a                	cmp    al,0x4a
c00107fe:	75 1f                	jne    c001081f <VgaText::putchar(char)+0xb7>
c0010800:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010804:	75 19                	jne    c001081f <VgaText::putchar(char)+0xb7>
c0010806:	83 ec 0c             	sub    esp,0xc
c0010809:	53                   	push   ebx
c001080a:	e8 ff fe ff ff       	call   c001070e <VgaText::clearScreen()>
c001080f:	83 c4 0c             	add    esp,0xc
c0010812:	6a 00                	push   0x0
c0010814:	6a 00                	push   0x0
c0010816:	53                   	push   ebx
c0010817:	e8 5a fb ff ff       	call   c0010376 <VgaText::setCursor(int, int)>
c001081c:	83 c4 10             	add    esp,0x10
c001081f:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010825:	eb 27                	jmp    c001084e <VgaText::putchar(char)+0xe6>
c0010827:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c001082a:	83 fa 0e             	cmp    edx,0xe
c001082d:	7f 1f                	jg     c001084e <VgaText::putchar(char)+0xe6>
c001082f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010832:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010835:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010839:	eb 13                	jmp    c001084e <VgaText::putchar(char)+0xe6>
c001083b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001083e:	0f be c0             	movsx  eax,al
c0010841:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010844:	50                   	push   eax
c0010845:	53                   	push   ebx
c0010846:	e8 65 fc ff ff       	call   c00104b0 <VgaText::putchar(char, VgaColour, VgaColour)>
c001084b:	83 c4 10             	add    esp,0x10
c001084e:	83 c4 14             	add    esp,0x14
c0010851:	5b                   	pop    ebx
c0010852:	5e                   	pop    esi
c0010853:	c3                   	ret    

c0010854 <VgaText::putx(unsigned int)>:
c0010854:	57                   	push   edi
c0010855:	b9 11 00 00 00       	mov    ecx,0x11
c001085a:	56                   	push   esi
c001085b:	be e2 a1 02 c0       	mov    esi,0xc002a1e2
c0010860:	53                   	push   ebx
c0010861:	83 ec 20             	sub    esp,0x20
c0010864:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010868:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001086c:	fc                   	cld    
c001086d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001086f:	be 08 00 00 00       	mov    esi,0x8
c0010874:	50                   	push   eax
c0010875:	50                   	push   eax
c0010876:	89 d8                	mov    eax,ebx
c0010878:	c1 e3 04             	shl    ebx,0x4
c001087b:	c1 e8 1c             	shr    eax,0x1c
c001087e:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010883:	50                   	push   eax
c0010884:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010888:	e8 db fe ff ff       	call   c0010768 <VgaText::putchar(char)>
c001088d:	83 c4 10             	add    esp,0x10
c0010890:	4e                   	dec    esi
c0010891:	75 e1                	jne    c0010874 <VgaText::putx(unsigned int)+0x20>
c0010893:	83 c4 20             	add    esp,0x20
c0010896:	5b                   	pop    ebx
c0010897:	5e                   	pop    esi
c0010898:	5f                   	pop    edi
c0010899:	c3                   	ret    

c001089a <VgaText::puts(char const*)>:
c001089a:	53                   	push   ebx
c001089b:	83 ec 08             	sub    esp,0x8
c001089e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00108a2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00108a5:	84 c0                	test   al,al
c00108a7:	74 12                	je     c00108bb <VgaText::puts(char const*)+0x21>
c00108a9:	43                   	inc    ebx
c00108aa:	51                   	push   ecx
c00108ab:	51                   	push   ecx
c00108ac:	50                   	push   eax
c00108ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108b1:	e8 b2 fe ff ff       	call   c0010768 <VgaText::putchar(char)>
c00108b6:	83 c4 10             	add    esp,0x10
c00108b9:	eb e7                	jmp    c00108a2 <VgaText::puts(char const*)+0x8>
c00108bb:	83 c4 08             	add    esp,0x8
c00108be:	5b                   	pop    ebx
c00108bf:	c3                   	ret    

c00108c0 <VgaText::VgaText(char const*)>:
c00108c0:	57                   	push   edi
c00108c1:	56                   	push   esi
c00108c2:	53                   	push   ebx
c00108c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c7:	83 ec 08             	sub    esp,0x8
c00108ca:	6a 00                	push   0x0
c00108cc:	50                   	push   eax
c00108cd:	e8 42 05 00 00       	call   c0010e14 <UnixFile::UnixFile(int)>
c00108d2:	83 c4 10             	add    esp,0x10
c00108d5:	ba 48 a2 02 c0       	mov    edx,0xc002a248
c00108da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108de:	89 10                	mov    DWORD PTR [eax],edx
c00108e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e4:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00108eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ef:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00108f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fa:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00108fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010902:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001090a:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010915:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c001091c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010920:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092b:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010936:	8d 50 60             	lea    edx,[eax+0x60]
c0010939:	bb 80 da 02 c0       	mov    ebx,0xc002da80
c001093e:	b8 08 00 00 00       	mov    eax,0x8
c0010943:	fc                   	cld    
c0010944:	89 d7                	mov    edi,edx
c0010946:	89 de                	mov    esi,ebx
c0010948:	89 c1                	mov    ecx,eax
c001094a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001094c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010950:	05 82 00 00 00       	add    eax,0x82
c0010955:	83 ec 08             	sub    esp,0x8
c0010958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001095c:	50                   	push   eax
c001095d:	e8 aa fe fe ff       	call   c000080c <strcpy>
c0010962:	83 c4 10             	add    esp,0x10
c0010965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010969:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010970:	83 ec 0c             	sub    esp,0xc
c0010973:	6a 01                	push   0x1
c0010975:	e8 dd 08 00 00       	call   c0011257 <Virt::allocateKernelVirtualPages(int)>
c001097a:	83 c4 10             	add    esp,0x10
c001097d:	89 c2                	mov    edx,eax
c001097f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010983:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010986:	8b 1d 50 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db50
c001098c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010990:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010993:	89 c6                	mov    esi,eax
c0010995:	e8 fb ef ff ff       	call   c000f995 <Phys::allocatePage()>
c001099a:	6a 05                	push   0x5
c001099c:	56                   	push   esi
c001099d:	50                   	push   eax
c001099e:	53                   	push   ebx
c001099f:	e8 70 10 00 00       	call   c0011a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c00109a4:	83 c4 10             	add    esp,0x10
c00109a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00109ae:	83 ec 04             	sub    esp,0x4
c00109b1:	68 00 0f 00 00       	push   0xf00
c00109b6:	6a 00                	push   0x0
c00109b8:	50                   	push   eax
c00109b9:	e8 92 fd fe ff       	call   c0000750 <memset>
c00109be:	83 c4 10             	add    esp,0x10
c00109c1:	83 ec 04             	sub    esp,0x4
c00109c4:	6a 00                	push   0x0
c00109c6:	6a 07                	push   0x7
c00109c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109cc:	e8 1b f8 ff ff       	call   c00101ec <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00109d1:	83 c4 10             	add    esp,0x10
c00109d4:	83 ec 04             	sub    esp,0x4
c00109d7:	6a 00                	push   0x0
c00109d9:	6a 00                	push   0x0
c00109db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109df:	e8 92 f9 ff ff       	call   c0010376 <VgaText::setCursor(int, int)>
c00109e4:	83 c4 10             	add    esp,0x10
c00109e7:	83 ec 0c             	sub    esp,0xc
c00109ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109ee:	e8 1b fd ff ff       	call   c001070e <VgaText::clearScreen()>
c00109f3:	83 c4 10             	add    esp,0x10
c00109f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109fa:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00109fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a02:	05 02 01 00 00       	add    eax,0x102
c0010a07:	83 ec 04             	sub    esp,0x4
c0010a0a:	68 96 00 00 00       	push   0x96
c0010a0f:	6a 00                	push   0x0
c0010a11:	50                   	push   eax
c0010a12:	e8 39 fd fe ff       	call   c0000750 <memset>
c0010a17:	83 c4 10             	add    esp,0x10
c0010a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a1e:	05 98 01 00 00       	add    eax,0x198
c0010a23:	83 ec 04             	sub    esp,0x4
c0010a26:	68 2c 01 00 00       	push   0x12c
c0010a2b:	6a 00                	push   0x0
c0010a2d:	50                   	push   eax
c0010a2e:	e8 1d fd fe ff       	call   c0000750 <memset>
c0010a33:	83 c4 10             	add    esp,0x10
c0010a36:	90                   	nop
c0010a37:	5b                   	pop    ebx
c0010a38:	5e                   	pop    esi
c0010a39:	5f                   	pop    edi
c0010a3a:	c3                   	ret    
c0010a3b:	90                   	nop

c0010a3c <VgaText::receiveKey(unsigned char)>:
c0010a3c:	55                   	push   ebp
c0010a3d:	57                   	push   edi
c0010a3e:	56                   	push   esi
c0010a3f:	53                   	push   ebx
c0010a40:	83 ec 1c             	sub    esp,0x1c
c0010a43:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a47:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010a4b:	84 db                	test   bl,bl
c0010a4d:	0f 84 c9 00 00 00    	je     c0010b1c <VgaText::receiveKey(unsigned char)+0xe0>
c0010a53:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010a59:	80 fb 08             	cmp    bl,0x8
c0010a5c:	75 2c                	jne    c0010a8a <VgaText::receiveKey(unsigned char)+0x4e>
c0010a5e:	83 ec 0c             	sub    esp,0xc
c0010a61:	57                   	push   edi
c0010a62:	e8 05 fd fe ff       	call   c000076c <strlen>
c0010a67:	83 c4 10             	add    esp,0x10
c0010a6a:	85 c0                	test   eax,eax
c0010a6c:	74 41                	je     c0010aaf <VgaText::receiveKey(unsigned char)+0x73>
c0010a6e:	50                   	push   eax
c0010a6f:	50                   	push   eax
c0010a70:	6a 08                	push   0x8
c0010a72:	56                   	push   esi
c0010a73:	e8 f0 fc ff ff       	call   c0010768 <VgaText::putchar(char)>
c0010a78:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a7b:	e8 ec fc fe ff       	call   c000076c <strlen>
c0010a80:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010a88:	eb 22                	jmp    c0010aac <VgaText::receiveKey(unsigned char)+0x70>
c0010a8a:	0f be c3             	movsx  eax,bl
c0010a8d:	52                   	push   edx
c0010a8e:	52                   	push   edx
c0010a8f:	50                   	push   eax
c0010a90:	56                   	push   esi
c0010a91:	e8 d2 fc ff ff       	call   c0010768 <VgaText::putchar(char)>
c0010a96:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010a9a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a9f:	59                   	pop    ecx
c0010aa0:	5d                   	pop    ebp
c0010aa1:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010aa5:	50                   	push   eax
c0010aa6:	57                   	push   edi
c0010aa7:	e8 a0 fe fe ff       	call   c000094c <strcat>
c0010aac:	83 c4 10             	add    esp,0x10
c0010aaf:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010ab6:	75 05                	jne    c0010abd <VgaText::receiveKey(unsigned char)+0x81>
c0010ab8:	80 fb 0a             	cmp    bl,0xa
c0010abb:	75 53                	jne    c0010b10 <VgaText::receiveKey(unsigned char)+0xd4>
c0010abd:	83 ec 0c             	sub    esp,0xc
c0010ac0:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010ac6:	53                   	push   ebx
c0010ac7:	e8 a0 fc fe ff       	call   c000076c <strlen>
c0010acc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010acf:	89 c5                	mov    ebp,eax
c0010ad1:	e8 96 fc fe ff       	call   c000076c <strlen>
c0010ad6:	83 c4 10             	add    esp,0x10
c0010ad9:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010add:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010ae2:	76 10                	jbe    c0010af4 <VgaText::receiveKey(unsigned char)+0xb8>
c0010ae4:	83 ec 0c             	sub    esp,0xc
c0010ae7:	68 f3 a1 02 c0       	push   0xc002a1f3
c0010aec:	e8 7e 93 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c0010af1:	83 c4 10             	add    esp,0x10
c0010af4:	50                   	push   eax
c0010af5:	50                   	push   eax
c0010af6:	57                   	push   edi
c0010af7:	53                   	push   ebx
c0010af8:	e8 4f fe fe ff       	call   c000094c <strcat>
c0010afd:	83 c4 0c             	add    esp,0xc
c0010b00:	68 96 00 00 00       	push   0x96
c0010b05:	6a 00                	push   0x0
c0010b07:	57                   	push   edi
c0010b08:	e8 43 fc fe ff       	call   c0000750 <memset>
c0010b0d:	83 c4 10             	add    esp,0x10
c0010b10:	83 ec 0c             	sub    esp,0xc
c0010b13:	56                   	push   esi
c0010b14:	e8 6f fa ff ff       	call   c0010588 <VgaText::doUpdate()>
c0010b19:	83 c4 10             	add    esp,0x10
c0010b1c:	83 c4 1c             	add    esp,0x1c
c0010b1f:	5b                   	pop    ebx
c0010b20:	5e                   	pop    esi
c0010b21:	5f                   	pop    edi
c0010b22:	5d                   	pop    ebp
c0010b23:	c3                   	ret    

c0010b24 <VgaText::write(unsigned long long, void*, int*)>:
c0010b24:	55                   	push   ebp
c0010b25:	57                   	push   edi
c0010b26:	56                   	push   esi
c0010b27:	53                   	push   ebx
c0010b28:	83 ec 0c             	sub    esp,0xc
c0010b2b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010b2f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010b33:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010b37:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010b3e:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010b41:	39 eb                	cmp    ebx,ebp
c0010b43:	74 13                	je     c0010b58 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010b45:	43                   	inc    ebx
c0010b46:	50                   	push   eax
c0010b47:	50                   	push   eax
c0010b48:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010b4c:	50                   	push   eax
c0010b4d:	56                   	push   esi
c0010b4e:	e8 15 fc ff ff       	call   c0010768 <VgaText::putchar(char)>
c0010b53:	83 c4 10             	add    esp,0x10
c0010b56:	eb e9                	jmp    c0010b41 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010b58:	83 ec 0c             	sub    esp,0xc
c0010b5b:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010b62:	56                   	push   esi
c0010b63:	e8 20 fa ff ff       	call   c0010588 <VgaText::doUpdate()>
c0010b68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010b6c:	89 38                	mov    DWORD PTR [eax],edi
c0010b6e:	83 c4 1c             	add    esp,0x1c
c0010b71:	31 c0                	xor    eax,eax
c0010b73:	5b                   	pop    ebx
c0010b74:	5e                   	pop    esi
c0010b75:	5f                   	pop    edi
c0010b76:	5d                   	pop    ebp
c0010b77:	c3                   	ret    

c0010b78 <newTerminal(char*)>:
c0010b78:	83 ec 28             	sub    esp,0x28
c0010b7b:	68 c4 02 00 00       	push   0x2c4
c0010b80:	e8 14 ea ff ff       	call   c000f599 <malloc>
c0010b85:	5a                   	pop    edx
c0010b86:	59                   	pop    ecx
c0010b87:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010b8b:	50                   	push   eax
c0010b8c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010b90:	e8 2b fd ff ff       	call   c00108c0 <VgaText::VgaText(char const*)>
c0010b95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b99:	83 c4 2c             	add    esp,0x2c
c0010b9c:	c3                   	ret    
c0010b9d:	90                   	nop

c0010b9e <TSS::TSS()>:
c0010b9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ba2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ba9:	90                   	nop
c0010baa:	c3                   	ret    
c0010bab:	90                   	nop

c0010bac <TSS::setESP(unsigned long)>:
c0010bac:	55                   	push   ebp
c0010bad:	89 e5                	mov    ebp,esp
c0010baf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bb5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bb8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bbb:	90                   	nop
c0010bbc:	5d                   	pop    ebp
c0010bbd:	c3                   	ret    

c0010bbe <TSS::flush()>:
c0010bbe:	55                   	push   ebp
c0010bbf:	89 e5                	mov    ebp,esp
c0010bc1:	83 ec 10             	sub    esp,0x10
c0010bc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0010bc9:	83 c8 03             	or     eax,0x3
c0010bcc:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010bd0:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010bd4:	66 89 d0             	mov    ax,dx
c0010bd7:	0f 00 d8             	ltr    ax
c0010bda:	90                   	nop
c0010bdb:	c9                   	leave  
c0010bdc:	c3                   	ret    
c0010bdd:	90                   	nop

c0010bde <TSS::setup(unsigned long, unsigned long)>:
c0010bde:	55                   	push   ebp
c0010bdf:	89 e5                	mov    ebp,esp
c0010be1:	83 ec 18             	sub    esp,0x18
c0010be4:	83 ec 0c             	sub    esp,0xc
c0010be7:	6a 68                	push   0x68
c0010be9:	e8 ab e9 ff ff       	call   c000f599 <malloc>
c0010bee:	83 c4 10             	add    esp,0x10
c0010bf1:	89 c2                	mov    edx,eax
c0010bf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bf6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bff:	83 ec 04             	sub    esp,0x4
c0010c02:	6a 68                	push   0x68
c0010c04:	6a 00                	push   0x0
c0010c06:	50                   	push   eax
c0010c07:	e8 44 fb fe ff       	call   c0000750 <memset>
c0010c0c:	83 c4 10             	add    esp,0x10
c0010c0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c15:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010c1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c21:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c2d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c30:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c39:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010c3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c45:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010c4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c51:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010c57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c5d:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010c63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c69:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010c6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c75:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010c7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c81:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010c84:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010c87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c8d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c90:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010c93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c99:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010ca0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ca3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ca6:	0f 20 da             	mov    edx,cr3
c0010ca9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010cac:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010caf:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010cb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cb5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cb8:	83 ec 08             	sub    esp,0x8
c0010cbb:	50                   	push   eax
c0010cbc:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010cbf:	50                   	push   eax
c0010cc0:	e8 cd e0 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010cc5:	83 c4 10             	add    esp,0x10
c0010cc8:	83 ec 08             	sub    esp,0x8
c0010ccb:	6a 68                	push   0x68
c0010ccd:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010cd0:	50                   	push   eax
c0010cd1:	e8 d8 e0 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010cd6:	83 c4 10             	add    esp,0x10
c0010cd9:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010cdd:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010ce0:	83 e0 0f             	and    eax,0xf
c0010ce3:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010ce6:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010ce9:	83 c8 40             	or     eax,0x40
c0010cec:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cef:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0010cf4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010cfa:	05 78 01 00 00       	add    eax,0x178
c0010cff:	83 ec 04             	sub    esp,0x4
c0010d02:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010d05:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010d08:	50                   	push   eax
c0010d09:	e8 d4 e0 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010d0e:	83 c4 10             	add    esp,0x10
c0010d11:	89 c2                	mov    edx,eax
c0010d13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d16:	89 10                	mov    DWORD PTR [eax],edx
c0010d18:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0010d1d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010d23:	05 78 01 00 00       	add    eax,0x178
c0010d28:	83 ec 0c             	sub    esp,0xc
c0010d2b:	50                   	push   eax
c0010d2c:	e8 db e0 ff ff       	call   c000ee0c <GDT::flush()>
c0010d31:	83 c4 10             	add    esp,0x10
c0010d34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d37:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d39:	c9                   	leave  
c0010d3a:	c3                   	ret    
c0010d3b:	90                   	nop

c0010d3c <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010d3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d40:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d47:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d4c:	75 08                	jne    c0010d56 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010d4e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d54:	eb 38                	jmp    c0010d8e <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010d56:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d5b:	75 17                	jne    c0010d74 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010d5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d62:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d65:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d6d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d71:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010d74:	89 c1                	mov    ecx,eax
c0010d76:	83 e1 fd             	and    ecx,0xfffffffd
c0010d79:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010d7f:	74 cd                	je     c0010d4e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d81:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d86:	83 e0 ef             	and    eax,0xffffffef
c0010d89:	83 f8 08             	cmp    eax,0x8
c0010d8c:	76 c0                	jbe    c0010d4e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d8e:	31 c0                	xor    eax,eax
c0010d90:	c3                   	ret    
c0010d91:	90                   	nop

c0010d92 <ReservedFilename::isAtty()>:
c0010d92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d96:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d99:	31 c0                	xor    eax,eax
c0010d9b:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010da1:	74 09                	je     c0010dac <ReservedFilename::isAtty()+0x1a>
c0010da3:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010da9:	0f 94 c0             	sete   al
c0010dac:	c3                   	ret    
c0010dad:	90                   	nop

c0010dae <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010dae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010db2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010db6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010db9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010dbd:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010dc2:	75 08                	jne    c0010dcc <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010dc4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010dca:	eb 3d                	jmp    c0010e09 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010dcc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010dd1:	75 17                	jne    c0010dea <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010dd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dd8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010ddb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010de1:	8b 10                	mov    edx,DWORD PTR [eax]
c0010de3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010de7:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010dea:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010def:	75 04                	jne    c0010df5 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010df1:	89 0a                	mov    DWORD PTR [edx],ecx
c0010df3:	eb 14                	jmp    c0010e09 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010df5:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010dfa:	74 c8                	je     c0010dc4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dfc:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010e01:	83 e0 ef             	and    eax,0xffffffef
c0010e04:	83 f8 08             	cmp    eax,0x8
c0010e07:	76 bb                	jbe    c0010dc4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e09:	31 c0                	xor    eax,eax
c0010e0b:	c3                   	ret    

c0010e0c <UnixFile::getFileDescriptor()>:
c0010e0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e13:	c3                   	ret    

c0010e14 <UnixFile::UnixFile(int)>:
c0010e14:	53                   	push   ebx
c0010e15:	83 ec 28             	sub    esp,0x28
c0010e18:	ba 10 a3 02 c0       	mov    edx,0xc002a310
c0010e1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010e21:	89 10                	mov    DWORD PTR [eax],edx
c0010e23:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010e2b:	0f 8f 8c 01 00 00    	jg     c0010fbd <UnixFile::UnixFile(int)+0x1a9>
c0010e31:	a1 80 c9 02 c0       	mov    eax,ds:0xc002c980
c0010e36:	8d 50 01             	lea    edx,[eax+0x1]
c0010e39:	89 15 80 c9 02 c0    	mov    DWORD PTR ds:0xc002c980,edx
c0010e3f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010e43:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e46:	83 ec 08             	sub    esp,0x8
c0010e49:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010e4d:	68 38 db 02 c0       	push   0xc002db38
c0010e52:	e8 5f 76 01 00       	call   c00284b6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010e57:	83 c4 10             	add    esp,0x10
c0010e5a:	a0 34 db 02 c0       	mov    al,ds:0xc002db34
c0010e5f:	83 f0 01             	xor    eax,0x1
c0010e62:	84 c0                	test   al,al
c0010e64:	0f 84 54 01 00 00    	je     c0010fbe <UnixFile::UnixFile(int)+0x1aa>
c0010e6a:	c6 05 34 db 02 c0 01 	mov    BYTE PTR ds:0xc002db34,0x1
c0010e71:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010e79:	83 ec 0c             	sub    esp,0xc
c0010e7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e80:	e8 14 e7 ff ff       	call   c000f599 <malloc>
c0010e85:	83 c4 10             	add    esp,0x10
c0010e88:	89 c3                	mov    ebx,eax
c0010e8a:	83 ec 08             	sub    esp,0x8
c0010e8d:	68 03 ff ff 0f       	push   0xfffff03
c0010e92:	53                   	push   ebx
c0010e93:	e8 2c 01 00 00       	call   c0010fc4 <ReservedFilename::ReservedFilename(int)>
c0010e98:	83 c4 10             	add    esp,0x10
c0010e9b:	89 1d 2c db 02 c0    	mov    DWORD PTR ds:0xc002db2c,ebx
c0010ea1:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010ea9:	83 ec 0c             	sub    esp,0xc
c0010eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010eb0:	e8 e4 e6 ff ff       	call   c000f599 <malloc>
c0010eb5:	83 c4 10             	add    esp,0x10
c0010eb8:	89 c3                	mov    ebx,eax
c0010eba:	83 ec 08             	sub    esp,0x8
c0010ebd:	68 01 ff ff 0f       	push   0xfffff01
c0010ec2:	53                   	push   ebx
c0010ec3:	e8 fc 00 00 00       	call   c0010fc4 <ReservedFilename::ReservedFilename(int)>
c0010ec8:	83 c4 10             	add    esp,0x10
c0010ecb:	89 1d 30 db 02 c0    	mov    DWORD PTR ds:0xc002db30,ebx
c0010ed1:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010ed9:	83 ec 0c             	sub    esp,0xc
c0010edc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ee0:	e8 b4 e6 ff ff       	call   c000f599 <malloc>
c0010ee5:	83 c4 10             	add    esp,0x10
c0010ee8:	89 c3                	mov    ebx,eax
c0010eea:	83 ec 08             	sub    esp,0x8
c0010eed:	68 00 ff ff 0f       	push   0xfffff00
c0010ef2:	53                   	push   ebx
c0010ef3:	e8 cc 00 00 00       	call   c0010fc4 <ReservedFilename::ReservedFilename(int)>
c0010ef8:	83 c4 10             	add    esp,0x10
c0010efb:	89 1d 24 db 02 c0    	mov    DWORD PTR ds:0xc002db24,ebx
c0010f01:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010f09:	83 ec 0c             	sub    esp,0xc
c0010f0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010f10:	e8 84 e6 ff ff       	call   c000f599 <malloc>
c0010f15:	83 c4 10             	add    esp,0x10
c0010f18:	89 c3                	mov    ebx,eax
c0010f1a:	83 ec 08             	sub    esp,0x8
c0010f1d:	68 02 ff ff 0f       	push   0xfffff02
c0010f22:	53                   	push   ebx
c0010f23:	e8 9c 00 00 00       	call   c0010fc4 <ReservedFilename::ReservedFilename(int)>
c0010f28:	83 c4 10             	add    esp,0x10
c0010f2b:	89 1d 28 db 02 c0    	mov    DWORD PTR ds:0xc002db28,ebx
c0010f31:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010f39:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010f3e:	7f 7e                	jg     c0010fbe <UnixFile::UnixFile(int)+0x1aa>
c0010f40:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010f48:	83 ec 0c             	sub    esp,0xc
c0010f4b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f4f:	e8 45 e6 ff ff       	call   c000f599 <malloc>
c0010f54:	83 c4 10             	add    esp,0x10
c0010f57:	89 c3                	mov    ebx,eax
c0010f59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f5d:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f62:	83 ec 08             	sub    esp,0x8
c0010f65:	50                   	push   eax
c0010f66:	53                   	push   ebx
c0010f67:	e8 58 00 00 00       	call   c0010fc4 <ReservedFilename::ReservedFilename(int)>
c0010f6c:	83 c4 10             	add    esp,0x10
c0010f6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f73:	89 1c 85 00 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2500],ebx
c0010f7a:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010f82:	83 ec 0c             	sub    esp,0xc
c0010f85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f89:	e8 0b e6 ff ff       	call   c000f599 <malloc>
c0010f8e:	83 c4 10             	add    esp,0x10
c0010f91:	89 c3                	mov    ebx,eax
c0010f93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f97:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010f9c:	83 ec 08             	sub    esp,0x8
c0010f9f:	50                   	push   eax
c0010fa0:	53                   	push   ebx
c0010fa1:	e8 1e 00 00 00       	call   c0010fc4 <ReservedFilename::ReservedFilename(int)>
c0010fa6:	83 c4 10             	add    esp,0x10
c0010fa9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fad:	89 1c 85 c0 da 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2540],ebx
c0010fb4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010fb8:	e9 7c ff ff ff       	jmp    c0010f39 <UnixFile::UnixFile(int)+0x125>
c0010fbd:	90                   	nop
c0010fbe:	83 c4 28             	add    esp,0x28
c0010fc1:	5b                   	pop    ebx
c0010fc2:	c3                   	ret    
c0010fc3:	90                   	nop

c0010fc4 <ReservedFilename::ReservedFilename(int)>:
c0010fc4:	83 ec 0c             	sub    esp,0xc
c0010fc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fcb:	83 ec 08             	sub    esp,0x8
c0010fce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fd2:	50                   	push   eax
c0010fd3:	e8 3c fe ff ff       	call   c0010e14 <UnixFile::UnixFile(int)>
c0010fd8:	83 c4 10             	add    esp,0x10
c0010fdb:	ba 2c a3 02 c0       	mov    edx,0xc002a32c
c0010fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe4:	89 10                	mov    DWORD PTR [eax],edx
c0010fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010fee:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010ff1:	90                   	nop
c0010ff2:	83 c4 0c             	add    esp,0xc
c0010ff5:	c3                   	ret    

c0010ff6 <UnixFile::~UnixFile()>:
c0010ff6:	83 ec 1c             	sub    esp,0x1c
c0010ff9:	ba 10 a3 02 c0       	mov    edx,0xc002a310
c0010ffe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011002:	89 10                	mov    DWORD PTR [eax],edx
c0011004:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001100b:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011010:	7f 73                	jg     c0011085 <UnixFile::~UnixFile()+0x8f>
c0011012:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001101a:	83 ec 0c             	sub    esp,0xc
c001101d:	68 38 db 02 c0       	push   0xc002db38
c0011022:	e8 63 75 01 00       	call   c002858a <LinkedList<UnixFile>::getFirstElement()>
c0011027:	83 c4 10             	add    esp,0x10
c001102a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001102e:	83 ec 0c             	sub    esp,0xc
c0011031:	68 38 db 02 c0       	push   0xc002db38
c0011036:	e8 57 75 01 00       	call   c0028592 <LinkedList<UnixFile>::removeFirst()>
c001103b:	83 c4 10             	add    esp,0x10
c001103e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011042:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011046:	74 40                	je     c0011088 <UnixFile::~UnixFile()+0x92>
c0011048:	83 ec 08             	sub    esp,0x8
c001104b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001104f:	68 38 db 02 c0       	push   0xc002db38
c0011054:	e8 5d 74 01 00       	call   c00284b6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011059:	83 c4 10             	add    esp,0x10
c001105c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011060:	8d 50 01             	lea    edx,[eax+0x1]
c0011063:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011067:	3d 88 13 00 00       	cmp    eax,0x1388
c001106c:	0f 94 c0             	sete   al
c001106f:	84 c0                	test   al,al
c0011071:	74 a7                	je     c001101a <UnixFile::~UnixFile()+0x24>
c0011073:	83 ec 0c             	sub    esp,0xc
c0011076:	68 e8 a2 02 c0       	push   0xc002a2e8
c001107b:	e8 ef 8d 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c0011080:	83 c4 10             	add    esp,0x10
c0011083:	eb 95                	jmp    c001101a <UnixFile::~UnixFile()+0x24>
c0011085:	90                   	nop
c0011086:	eb 01                	jmp    c0011089 <UnixFile::~UnixFile()+0x93>
c0011088:	90                   	nop
c0011089:	90                   	nop
c001108a:	83 c4 1c             	add    esp,0x1c
c001108d:	c3                   	ret    

c001108e <UnixFile::~UnixFile()>:
c001108e:	83 ec 0c             	sub    esp,0xc
c0011091:	83 ec 0c             	sub    esp,0xc
c0011094:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011098:	e8 59 ff ff ff       	call   c0010ff6 <UnixFile::~UnixFile()>
c001109d:	83 c4 10             	add    esp,0x10
c00110a0:	83 ec 08             	sub    esp,0x8
c00110a3:	6a 0c                	push   0xc
c00110a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110a9:	e8 7d 15 00 00       	call   c001262b <operator delete(void*, unsigned long)>
c00110ae:	83 c4 10             	add    esp,0x10
c00110b1:	83 c4 0c             	add    esp,0xc
c00110b4:	c3                   	ret    
c00110b5:	90                   	nop

c00110b6 <ReservedFilename::~ReservedFilename()>:
c00110b6:	83 ec 0c             	sub    esp,0xc
c00110b9:	ba 2c a3 02 c0       	mov    edx,0xc002a32c
c00110be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c2:	89 10                	mov    DWORD PTR [eax],edx
c00110c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c8:	83 ec 0c             	sub    esp,0xc
c00110cb:	50                   	push   eax
c00110cc:	e8 25 ff ff ff       	call   c0010ff6 <UnixFile::~UnixFile()>
c00110d1:	83 c4 10             	add    esp,0x10
c00110d4:	90                   	nop
c00110d5:	83 c4 0c             	add    esp,0xc
c00110d8:	c3                   	ret    
c00110d9:	90                   	nop

c00110da <ReservedFilename::~ReservedFilename()>:
c00110da:	83 ec 0c             	sub    esp,0xc
c00110dd:	83 ec 0c             	sub    esp,0xc
c00110e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110e4:	e8 cd ff ff ff       	call   c00110b6 <ReservedFilename::~ReservedFilename()>
c00110e9:	83 c4 10             	add    esp,0x10
c00110ec:	83 ec 08             	sub    esp,0x8
c00110ef:	6a 0c                	push   0xc
c00110f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110f5:	e8 31 15 00 00       	call   c001262b <operator delete(void*, unsigned long)>
c00110fa:	83 c4 10             	add    esp,0x10
c00110fd:	83 c4 0c             	add    esp,0xc
c0011100:	c3                   	ret    

c0011101 <getFromFileDescriptor(int)>:
c0011101:	53                   	push   ebx
c0011102:	83 ec 08             	sub    esp,0x8
c0011105:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011109:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001110f:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011115:	7f 2c                	jg     c0011143 <getFromFileDescriptor(int)+0x42>
c0011117:	83 ec 0c             	sub    esp,0xc
c001111a:	68 38 db 02 c0       	push   0xc002db38
c001111f:	e8 66 74 01 00       	call   c002858a <LinkedList<UnixFile>::getFirstElement()>
c0011124:	83 c4 10             	add    esp,0x10
c0011127:	85 c0                	test   eax,eax
c0011129:	75 04                	jne    c001112f <getFromFileDescriptor(int)+0x2e>
c001112b:	31 c0                	xor    eax,eax
c001112d:	eb 6e                	jmp    c001119d <getFromFileDescriptor(int)+0x9c>
c001112f:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011132:	74 69                	je     c001119d <getFromFileDescriptor(int)+0x9c>
c0011134:	52                   	push   edx
c0011135:	52                   	push   edx
c0011136:	50                   	push   eax
c0011137:	68 38 db 02 c0       	push   0xc002db38
c001113c:	e8 f3 74 01 00       	call   c0028634 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011141:	eb e1                	jmp    c0011124 <getFromFileDescriptor(int)+0x23>
c0011143:	a1 2c db 02 c0       	mov    eax,ds:0xc002db2c
c0011148:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001114e:	74 4d                	je     c001119d <getFromFileDescriptor(int)+0x9c>
c0011150:	a1 30 db 02 c0       	mov    eax,ds:0xc002db30
c0011155:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001115b:	74 40                	je     c001119d <getFromFileDescriptor(int)+0x9c>
c001115d:	a1 28 db 02 c0       	mov    eax,ds:0xc002db28
c0011162:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011168:	74 33                	je     c001119d <getFromFileDescriptor(int)+0x9c>
c001116a:	a1 24 db 02 c0       	mov    eax,ds:0xc002db24
c001116f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011175:	74 26                	je     c001119d <getFromFileDescriptor(int)+0x9c>
c0011177:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001117d:	83 f8 08             	cmp    eax,0x8
c0011180:	77 09                	ja     c001118b <getFromFileDescriptor(int)+0x8a>
c0011182:	8b 04 85 00 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2500]
c0011189:	eb 12                	jmp    c001119d <getFromFileDescriptor(int)+0x9c>
c001118b:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011191:	83 fb 08             	cmp    ebx,0x8
c0011194:	77 95                	ja     c001112b <getFromFileDescriptor(int)+0x2a>
c0011196:	8b 04 9d c0 da 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2540]
c001119d:	83 c4 08             	add    esp,0x8
c00111a0:	5b                   	pop    ebx
c00111a1:	c3                   	ret    

c00111a2 <__static_initialization_and_destruction_0(int, int)>:
c00111a2:	83 ec 0c             	sub    esp,0xc
c00111a5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00111aa:	75 34                	jne    c00111e0 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111ac:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00111b4:	75 2a                	jne    c00111e0 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111b6:	83 ec 0c             	sub    esp,0xc
c00111b9:	68 38 db 02 c0       	push   0xc002db38
c00111be:	e8 b1 72 01 00       	call   c0028474 <LinkedList<UnixFile>::LinkedList()>
c00111c3:	83 c4 10             	add    esp,0x10
c00111c6:	83 ec 04             	sub    esp,0x4
c00111c9:	68 b8 c7 02 c0       	push   0xc002c7b8
c00111ce:	68 38 db 02 c0       	push   0xc002db38
c00111d3:	68 72 84 02 c0       	push   0xc0028472
c00111d8:	e8 c8 13 00 00       	call   c00125a5 <__cxa_atexit>
c00111dd:	83 c4 10             	add    esp,0x10
c00111e0:	90                   	nop
c00111e1:	83 c4 0c             	add    esp,0xc
c00111e4:	c3                   	ret    

c00111e5 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00111e5:	83 ec 0c             	sub    esp,0xc
c00111e8:	83 ec 08             	sub    esp,0x8
c00111eb:	68 ff ff 00 00       	push   0xffff
c00111f0:	6a 01                	push   0x1
c00111f2:	e8 ab ff ff ff       	call   c00111a2 <__static_initialization_and_destruction_0(int, int)>
c00111f7:	83 c4 10             	add    esp,0x10
c00111fa:	83 c4 0c             	add    esp,0xc
c00111fd:	c3                   	ret    

c00111fe <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00111fe:	53                   	push   ebx
c00111ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011203:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011207:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c001120d:	89 c8                	mov    eax,ecx
c001120f:	d1 e8                	shr    eax,1
c0011211:	03 05 88 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c988
c0011217:	83 e1 01             	and    ecx,0x1
c001121a:	8a 10                	mov    dl,BYTE PTR [eax]
c001121c:	75 09                	jne    c0011227 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c001121e:	83 e2 f0             	and    edx,0xfffffff0
c0011221:	09 da                	or     edx,ebx
c0011223:	88 10                	mov    BYTE PTR [eax],dl
c0011225:	5b                   	pop    ebx
c0011226:	c3                   	ret    
c0011227:	c1 e3 04             	shl    ebx,0x4
c001122a:	83 e2 0f             	and    edx,0xf
c001122d:	09 da                	or     edx,ebx
c001122f:	88 10                	mov    BYTE PTR [eax],dl
c0011231:	5b                   	pop    ebx
c0011232:	c3                   	ret    

c0011233 <Virt::getPageState(unsigned long)>:
c0011233:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011237:	8b 0d 88 c9 02 c0    	mov    ecx,DWORD PTR ds:0xc002c988
c001123d:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011243:	89 d0                	mov    eax,edx
c0011245:	d1 e8                	shr    eax,1
c0011247:	83 e2 01             	and    edx,0x1
c001124a:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001124d:	75 04                	jne    c0011253 <Virt::getPageState(unsigned long)+0x20>
c001124f:	83 e0 0f             	and    eax,0xf
c0011252:	c3                   	ret    
c0011253:	c0 e8 04             	shr    al,0x4
c0011256:	c3                   	ret    

c0011257 <Virt::allocateKernelVirtualPages(int)>:
c0011257:	55                   	push   ebp
c0011258:	31 ed                	xor    ebp,ebp
c001125a:	57                   	push   edi
c001125b:	56                   	push   esi
c001125c:	53                   	push   ebx
c001125d:	31 db                	xor    ebx,ebx
c001125f:	83 ec 1c             	sub    esp,0x1c
c0011262:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011266:	8b 3d 84 c9 02 c0    	mov    edi,DWORD PTR ds:0xc002c984
c001126c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011271:	57                   	push   edi
c0011272:	e8 bc ff ff ff       	call   c0011233 <Virt::getPageState(unsigned long)>
c0011277:	5a                   	pop    edx
c0011278:	84 c0                	test   al,al
c001127a:	75 3a                	jne    c00112b6 <Virt::allocateKernelVirtualPages(int)+0x5f>
c001127c:	85 db                	test   ebx,ebx
c001127e:	75 02                	jne    c0011282 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011280:	89 fd                	mov    ebp,edi
c0011282:	43                   	inc    ebx
c0011283:	39 f3                	cmp    ebx,esi
c0011285:	74 5a                	je     c00112e1 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011287:	47                   	inc    edi
c0011288:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001128e:	76 31                	jbe    c00112c1 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011290:	c7 05 84 c9 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c984,0xc8000
c001129a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001129f:	75 28                	jne    c00112c9 <Virt::allocateKernelVirtualPages(int)+0x72>
c00112a1:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00112a6:	bf 00 80 0c 00       	mov    edi,0xc8000
c00112ab:	57                   	push   edi
c00112ac:	e8 82 ff ff ff       	call   c0011233 <Virt::getPageState(unsigned long)>
c00112b1:	5a                   	pop    edx
c00112b2:	84 c0                	test   al,al
c00112b4:	74 c6                	je     c001127c <Virt::allocateKernelVirtualPages(int)+0x25>
c00112b6:	31 db                	xor    ebx,ebx
c00112b8:	47                   	inc    edi
c00112b9:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112bf:	77 cf                	ja     c0011290 <Virt::allocateKernelVirtualPages(int)+0x39>
c00112c1:	89 3d 84 c9 02 c0    	mov    DWORD PTR ds:0xc002c984,edi
c00112c7:	eb a8                	jmp    c0011271 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112c9:	83 ec 0c             	sub    esp,0xc
c00112cc:	68 40 a3 02 c0       	push   0xc002a340
c00112d1:	e8 99 8b 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c00112d6:	8b 3d 84 c9 02 c0    	mov    edi,DWORD PTR ds:0xc002c984
c00112dc:	83 c4 10             	add    esp,0x10
c00112df:	eb 90                	jmp    c0011271 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112e1:	89 2d 84 c9 02 c0    	mov    DWORD PTR ds:0xc002c984,ebp
c00112e7:	4b                   	dec    ebx
c00112e8:	74 5f                	je     c0011349 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00112ea:	85 f6                	test   esi,esi
c00112ec:	74 3d                	je     c001132b <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112ee:	89 e8                	mov    eax,ebp
c00112f0:	31 db                	xor    ebx,ebx
c00112f2:	8d 7e ff             	lea    edi,[esi-0x1]
c00112f5:	eb 14                	jmp    c001130b <Virt::allocateKernelVirtualPages(int)+0xb4>
c00112f7:	6a 01                	push   0x1
c00112f9:	43                   	inc    ebx
c00112fa:	50                   	push   eax
c00112fb:	e8 fe fe ff ff       	call   c00111fe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011300:	58                   	pop    eax
c0011301:	39 f3                	cmp    ebx,esi
c0011303:	5a                   	pop    edx
c0011304:	74 25                	je     c001132b <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011306:	a1 84 c9 02 c0       	mov    eax,ds:0xc002c984
c001130b:	8d 50 01             	lea    edx,[eax+0x1]
c001130e:	85 db                	test   ebx,ebx
c0011310:	89 15 84 c9 02 c0    	mov    DWORD PTR ds:0xc002c984,edx
c0011316:	74 20                	je     c0011338 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011318:	39 df                	cmp    edi,ebx
c001131a:	75 db                	jne    c00112f7 <Virt::allocateKernelVirtualPages(int)+0xa0>
c001131c:	6a 03                	push   0x3
c001131e:	43                   	inc    ebx
c001131f:	50                   	push   eax
c0011320:	e8 d9 fe ff ff       	call   c00111fe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011325:	59                   	pop    ecx
c0011326:	39 f3                	cmp    ebx,esi
c0011328:	58                   	pop    eax
c0011329:	75 db                	jne    c0011306 <Virt::allocateKernelVirtualPages(int)+0xaf>
c001132b:	83 c4 1c             	add    esp,0x1c
c001132e:	89 e8                	mov    eax,ebp
c0011330:	5b                   	pop    ebx
c0011331:	c1 e0 0c             	shl    eax,0xc
c0011334:	5e                   	pop    esi
c0011335:	5f                   	pop    edi
c0011336:	5d                   	pop    ebp
c0011337:	c3                   	ret    
c0011338:	6a 02                	push   0x2
c001133a:	bb 01 00 00 00       	mov    ebx,0x1
c001133f:	50                   	push   eax
c0011340:	e8 b9 fe ff ff       	call   c00111fe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011345:	58                   	pop    eax
c0011346:	5a                   	pop    edx
c0011347:	eb bd                	jmp    c0011306 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011349:	6a 04                	push   0x4
c001134b:	8d 45 01             	lea    eax,[ebp+0x1]
c001134e:	55                   	push   ebp
c001134f:	a3 84 c9 02 c0       	mov    ds:0xc002c984,eax
c0011354:	e8 a5 fe ff ff       	call   c00111fe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011359:	59                   	pop    ecx
c001135a:	89 e8                	mov    eax,ebp
c001135c:	5b                   	pop    ebx
c001135d:	c1 e0 0c             	shl    eax,0xc
c0011360:	83 c4 1c             	add    esp,0x1c
c0011363:	5b                   	pop    ebx
c0011364:	5e                   	pop    esi
c0011365:	5f                   	pop    edi
c0011366:	5d                   	pop    ebp
c0011367:	c3                   	ret    

c0011368 <Virt::freeSwapfilePage(unsigned long)>:
c0011368:	53                   	push   ebx
c0011369:	8b 15 4c db 02 c0    	mov    edx,DWORD PTR ds:0xc002db4c
c001136f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011373:	b8 01 00 00 00       	mov    eax,0x1
c0011378:	89 cb                	mov    ebx,ecx
c001137a:	d3 e0                	shl    eax,cl
c001137c:	c1 eb 05             	shr    ebx,0x5
c001137f:	f7 d0                	not    eax
c0011381:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011384:	5b                   	pop    ebx
c0011385:	c3                   	ret    

c0011386 <Virt::swapIDToSector(unsigned long)>:
c0011386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001138a:	0f af 05 8c c9 02 c0 	imul   eax,DWORD PTR ds:0xc002c98c
c0011391:	03 05 94 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c994
c0011397:	c3                   	ret    

c0011398 <Virt::allocateSwapfilePage()>:
c0011398:	55                   	push   ebp
c0011399:	31 d2                	xor    edx,edx
c001139b:	57                   	push   edi
c001139c:	56                   	push   esi
c001139d:	53                   	push   ebx
c001139e:	83 ec 0c             	sub    esp,0xc
c00113a1:	8b 0d 8c c9 02 c0    	mov    ecx,DWORD PTR ds:0xc002c98c
c00113a7:	a1 90 c9 02 c0       	mov    eax,ds:0xc002c990
c00113ac:	f7 f1                	div    ecx
c00113ae:	39 0d 90 c9 02 c0    	cmp    DWORD PTR ds:0xc002c990,ecx
c00113b4:	72 2d                	jb     c00113e3 <Virt::allocateSwapfilePage()+0x4b>
c00113b6:	8b 35 4c db 02 c0    	mov    esi,DWORD PTR ds:0xc002db4c
c00113bc:	8b 16                	mov    edx,DWORD PTR [esi]
c00113be:	f6 c2 01             	test   dl,0x1
c00113c1:	74 3c                	je     c00113ff <Virt::allocateSwapfilePage()+0x67>
c00113c3:	31 c9                	xor    ecx,ecx
c00113c5:	bf 01 00 00 00       	mov    edi,0x1
c00113ca:	eb 12                	jmp    c00113de <Virt::allocateSwapfilePage()+0x46>
c00113cc:	89 fd                	mov    ebp,edi
c00113ce:	89 ca                	mov    edx,ecx
c00113d0:	d3 e5                	shl    ebp,cl
c00113d2:	c1 ea 05             	shr    edx,0x5
c00113d5:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00113d8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00113da:	85 ea                	test   edx,ebp
c00113dc:	74 2a                	je     c0011408 <Virt::allocateSwapfilePage()+0x70>
c00113de:	41                   	inc    ecx
c00113df:	39 c8                	cmp    eax,ecx
c00113e1:	77 e9                	ja     c00113cc <Virt::allocateSwapfilePage()+0x34>
c00113e3:	83 ec 0c             	sub    esp,0xc
c00113e6:	68 f8 a4 02 c0       	push   0xc002a4f8
c00113eb:	e8 7f 8a 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c00113f0:	83 c4 10             	add    esp,0x10
c00113f3:	31 c9                	xor    ecx,ecx
c00113f5:	83 c4 0c             	add    esp,0xc
c00113f8:	89 c8                	mov    eax,ecx
c00113fa:	5b                   	pop    ebx
c00113fb:	5e                   	pop    esi
c00113fc:	5f                   	pop    edi
c00113fd:	5d                   	pop    ebp
c00113fe:	c3                   	ret    
c00113ff:	89 f3                	mov    ebx,esi
c0011401:	bd 01 00 00 00       	mov    ebp,0x1
c0011406:	31 c9                	xor    ecx,ecx
c0011408:	09 ea                	or     edx,ebp
c001140a:	89 c8                	mov    eax,ecx
c001140c:	89 13                	mov    DWORD PTR [ebx],edx
c001140e:	83 c4 0c             	add    esp,0xc
c0011411:	5b                   	pop    ebx
c0011412:	5e                   	pop    esi
c0011413:	5f                   	pop    edi
c0011414:	5d                   	pop    ebp
c0011415:	c3                   	ret    

c0011416 <Virt::virtualMemorySetup()>:
c0011416:	53                   	push   ebx
c0011417:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001141c:	6a 0f                	push   0xf
c001141e:	53                   	push   ebx
c001141f:	43                   	inc    ebx
c0011420:	e8 d9 fd ff ff       	call   c00111fe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011425:	58                   	pop    eax
c0011426:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001142c:	5a                   	pop    edx
c001142d:	75 ed                	jne    c001141c <Virt::virtualMemorySetup()+0x6>
c001142f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011434:	6a 00                	push   0x0
c0011436:	53                   	push   ebx
c0011437:	43                   	inc    ebx
c0011438:	e8 c1 fd ff ff       	call   c00111fe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001143d:	59                   	pop    ecx
c001143e:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011444:	58                   	pop    eax
c0011445:	75 ed                	jne    c0011434 <Virt::virtualMemorySetup()+0x1e>
c0011447:	bb 00 00 0d 00       	mov    ebx,0xd0000
c001144c:	6a 0f                	push   0xf
c001144e:	53                   	push   ebx
c001144f:	43                   	inc    ebx
c0011450:	e8 a9 fd ff ff       	call   c00111fe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011455:	58                   	pop    eax
c0011456:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001145c:	5a                   	pop    edx
c001145d:	75 ed                	jne    c001144c <Virt::virtualMemorySetup()+0x36>
c001145f:	5b                   	pop    ebx
c0011460:	c3                   	ret    

c0011461 <Virt::setupPageSwapping(int)>:
c0011461:	57                   	push   edi
c0011462:	56                   	push   esi
c0011463:	53                   	push   ebx
c0011464:	83 ec 1c             	sub    esp,0x1c
c0011467:	68 14 01 00 00       	push   0x114
c001146c:	e8 28 e1 ff ff       	call   c000f599 <malloc>
c0011471:	83 c4 0c             	add    esp,0xc
c0011474:	89 c6                	mov    esi,eax
c0011476:	ff 35 30 0f 03 c0    	push   DWORD PTR ds:0xc0030f30
c001147c:	68 0f a5 02 c0       	push   0xc002a50f
c0011481:	50                   	push   eax
c0011482:	e8 db 17 00 00       	call   c0012c62 <File::File(char const*, Process*)>
c0011487:	89 34 24             	mov    DWORD PTR [esp],esi
c001148a:	e8 af 19 00 00       	call   c0012e3e <File::unlink()>
c001148f:	58                   	pop    eax
c0011490:	5a                   	pop    edx
c0011491:	6a 12                	push   0x12
c0011493:	56                   	push   esi
c0011494:	e8 2d 18 00 00       	call   c0012cc6 <File::open(FileOpenMode)>
c0011499:	83 c4 10             	add    esp,0x10
c001149c:	85 c0                	test   eax,eax
c001149e:	0f 85 2f 01 00 00    	jne    c00115d3 <Virt::setupPageSwapping(int)+0x172>
c00114a4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00114a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00114b0:	c1 e3 08             	shl    ebx,0x8
c00114b3:	83 ec 0c             	sub    esp,0xc
c00114b6:	68 00 00 01 00       	push   0x10000
c00114bb:	e8 d9 e0 ff ff       	call   c000f599 <malloc>
c00114c0:	83 c4 0c             	add    esp,0xc
c00114c3:	89 c7                	mov    edi,eax
c00114c5:	68 00 00 01 00       	push   0x10000
c00114ca:	68 ee 00 00 00       	push   0xee
c00114cf:	50                   	push   eax
c00114d0:	e8 7b f2 fe ff       	call   c0000750 <memset>
c00114d5:	83 c4 10             	add    esp,0x10
c00114d8:	85 db                	test   ebx,ebx
c00114da:	79 03                	jns    c00114df <Virt::setupPageSwapping(int)+0x7e>
c00114dc:	83 c3 0f             	add    ebx,0xf
c00114df:	c1 fb 04             	sar    ebx,0x4
c00114e2:	4b                   	dec    ebx
c00114e3:	83 fb ff             	cmp    ebx,0xffffffff
c00114e6:	74 41                	je     c0011529 <Virt::setupPageSwapping(int)+0xc8>
c00114e8:	83 ec 0c             	sub    esp,0xc
c00114eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00114ed:	8d 54 24 18          	lea    edx,[esp+0x18]
c00114f1:	52                   	push   edx
c00114f2:	57                   	push   edi
c00114f3:	6a 00                	push   0x0
c00114f5:	68 00 00 01 00       	push   0x10000
c00114fa:	56                   	push   esi
c00114fb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00114fe:	83 c4 20             	add    esp,0x20
c0011501:	85 c0                	test   eax,eax
c0011503:	0f 85 b5 00 00 00    	jne    c00115be <Virt::setupPageSwapping(int)+0x15d>
c0011509:	81 7c 24 0c 00 00 01 00 	cmp    DWORD PTR [esp+0xc],0x10000
c0011511:	74 cf                	je     c00114e2 <Virt::setupPageSwapping(int)+0x81>
c0011513:	83 ec 0c             	sub    esp,0xc
c0011516:	4b                   	dec    ebx
c0011517:	68 41 a5 02 c0       	push   0xc002a541
c001151c:	e8 4e 89 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c0011521:	83 c4 10             	add    esp,0x10
c0011524:	83 fb ff             	cmp    ebx,0xffffffff
c0011527:	75 bf                	jne    c00114e8 <Virt::setupPageSwapping(int)+0x87>
c0011529:	83 ec 0c             	sub    esp,0xc
c001152c:	56                   	push   esi
c001152d:	e8 f2 17 00 00       	call   c0012d24 <File::close()>
c0011532:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011535:	e8 7f e0 ff ff       	call   c000f5b9 <rfree>
c001153a:	83 c4 10             	add    esp,0x10
c001153d:	85 f6                	test   esi,esi
c001153f:	74 0c                	je     c001154d <Virt::setupPageSwapping(int)+0xec>
c0011541:	83 ec 0c             	sub    esp,0xc
c0011544:	8b 06                	mov    eax,DWORD PTR [esi]
c0011546:	56                   	push   esi
c0011547:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001154a:	83 c4 10             	add    esp,0x10
c001154d:	83 ec 08             	sub    esp,0x8
c0011550:	a1 e8 df 02 c0       	mov    eax,ds:0xc002dfe8
c0011555:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001155b:	8b 10                	mov    edx,DWORD PTR [eax]
c001155d:	68 0f a5 02 c0       	push   0xc002a50f
c0011562:	50                   	push   eax
c0011563:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011566:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001156a:	c6 05 98 c9 02 c0 43 	mov    BYTE PTR ds:0xc002c998,0x43
c0011571:	c1 e2 0b             	shl    edx,0xb
c0011574:	a3 94 c9 02 c0       	mov    ds:0xc002c994,eax
c0011579:	89 15 90 c9 02 c0    	mov    DWORD PTR ds:0xc002c990,edx
c001157f:	c7 05 8c c9 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c98c,0x8
c0011589:	c1 ea 08             	shr    edx,0x8
c001158c:	89 14 24             	mov    DWORD PTR [esp],edx
c001158f:	e8 05 e0 ff ff       	call   c000f599 <malloc>
c0011594:	83 c4 0c             	add    esp,0xc
c0011597:	89 c1                	mov    ecx,eax
c0011599:	a3 4c db 02 c0       	mov    ds:0xc002db4c,eax
c001159e:	31 d2                	xor    edx,edx
c00115a0:	a1 90 c9 02 c0       	mov    eax,ds:0xc002c990
c00115a5:	f7 35 8c c9 02 c0    	div    DWORD PTR ds:0xc002c98c
c00115ab:	c1 e8 05             	shr    eax,0x5
c00115ae:	50                   	push   eax
c00115af:	6a 00                	push   0x0
c00115b1:	51                   	push   ecx
c00115b2:	e8 99 f1 fe ff       	call   c0000750 <memset>
c00115b7:	83 c4 20             	add    esp,0x20
c00115ba:	5b                   	pop    ebx
c00115bb:	5e                   	pop    esi
c00115bc:	5f                   	pop    edi
c00115bd:	c3                   	ret    
c00115be:	83 ec 0c             	sub    esp,0xc
c00115c1:	68 41 a5 02 c0       	push   0xc002a541
c00115c6:	e8 a4 88 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c00115cb:	83 c4 10             	add    esp,0x10
c00115ce:	e9 36 ff ff ff       	jmp    c0011509 <Virt::setupPageSwapping(int)+0xa8>
c00115d3:	83 ec 0c             	sub    esp,0xc
c00115d6:	68 26 a5 02 c0       	push   0xc002a526
c00115db:	e8 8f 88 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c00115e0:	83 c4 10             	add    esp,0x10
c00115e3:	e9 bc fe ff ff       	jmp    c00114a4 <Virt::setupPageSwapping(int)+0x43>

c00115e8 <VAS::VAS()>:
c00115e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00115fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011602:	a3 50 db 02 c0       	mov    ds:0xc002db50,eax
c0011607:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001160b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001160f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011613:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011616:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001161a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011621:	90                   	nop
c0011622:	c3                   	ret    
c0011623:	90                   	nop

c0011624 <VAS::VAS(VAS*)>:
c0011624:	83 ec 0c             	sub    esp,0xc
c0011627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001162b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011636:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001163d:	83 ec 0c             	sub    esp,0xc
c0011640:	68 60 a3 02 c0       	push   0xc002a360
c0011645:	e8 25 88 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c001164a:	83 c4 10             	add    esp,0x10
c001164d:	90                   	nop
c001164e:	83 c4 0c             	add    esp,0xc
c0011651:	c3                   	ret    

c0011652 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011656:	89 c2                	mov    edx,eax
c0011658:	c1 e8 0a             	shr    eax,0xa
c001165b:	c1 ea 16             	shr    edx,0x16
c001165e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011663:	19 c9                	sbb    ecx,ecx
c0011665:	c1 e2 0c             	shl    edx,0xc
c0011668:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001166e:	25 fc 0f 00 00       	and    eax,0xffc
c0011673:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c001167a:	01 d0                	add    eax,edx
c001167c:	c3                   	ret    
c001167d:	90                   	nop

c001167e <VAS::getPageTableEntry(unsigned long)>:
c001167e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011682:	89 ca                	mov    edx,ecx
c0011684:	c1 e9 0a             	shr    ecx,0xa
c0011687:	c1 ea 16             	shr    edx,0x16
c001168a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011690:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011696:	c1 e0 0c             	shl    eax,0xc
c0011699:	8d 04 08             	lea    eax,[eax+ecx*1]
c001169c:	c3                   	ret    

c001169d <Virt::freeKernelVirtualPages(unsigned long)>:
c001169d:	57                   	push   edi
c001169e:	56                   	push   esi
c001169f:	be 01 00 00 00       	mov    esi,0x1
c00116a4:	53                   	push   ebx
c00116a5:	83 ec 10             	sub    esp,0x10
c00116a8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00116ac:	c1 eb 0c             	shr    ebx,0xc
c00116af:	eb 3f                	jmp    c00116f0 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00116b1:	83 ec 08             	sub    esp,0x8
c00116b4:	57                   	push   edi
c00116b5:	ff 35 50 db 02 c0    	push   DWORD PTR ds:0xc002db50
c00116bb:	e8 be ff ff ff       	call   c001167e <VAS::getPageTableEntry(unsigned long)>
c00116c0:	83 c4 10             	add    esp,0x10
c00116c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00116c5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116c9:	f6 c4 04             	test   ah,0x4
c00116cc:	75 5f                	jne    c001172d <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c00116ce:	80 fa 04             	cmp    dl,0x4
c00116d1:	74 78                	je     c001174b <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c00116d3:	80 fa 02             	cmp    dl,0x2
c00116d6:	0f 84 88 00 00 00    	je     c0011764 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00116dc:	80 fa 03             	cmp    dl,0x3
c00116df:	0f 84 ad 00 00 00    	je     c0011792 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00116e5:	fe ca                	dec    dl
c00116e7:	0f 84 92 00 00 00    	je     c001177f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116ed:	43                   	inc    ebx
c00116ee:	31 f6                	xor    esi,esi
c00116f0:	53                   	push   ebx
c00116f1:	89 df                	mov    edi,ebx
c00116f3:	e8 3b fb ff ff       	call   c0011233 <Virt::getPageState(unsigned long)>
c00116f8:	c1 e7 0c             	shl    edi,0xc
c00116fb:	59                   	pop    ecx
c00116fc:	84 c0                	test   al,al
c00116fe:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011702:	75 ad                	jne    c00116b1 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011704:	83 ec 0c             	sub    esp,0xc
c0011707:	68 47 a5 02 c0       	push   0xc002a547
c001170c:	e8 5e 87 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c0011711:	58                   	pop    eax
c0011712:	5a                   	pop    edx
c0011713:	57                   	push   edi
c0011714:	ff 35 50 db 02 c0    	push   DWORD PTR ds:0xc002db50
c001171a:	e8 5f ff ff ff       	call   c001167e <VAS::getPageTableEntry(unsigned long)>
c001171f:	83 c4 10             	add    esp,0x10
c0011722:	8b 00                	mov    eax,DWORD PTR [eax]
c0011724:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011728:	f6 c4 04             	test   ah,0x4
c001172b:	74 c0                	je     c00116ed <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001172d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011731:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011736:	83 ec 0c             	sub    esp,0xc
c0011739:	50                   	push   eax
c001173a:	e8 e5 e1 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001173f:	83 c4 10             	add    esp,0x10
c0011742:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011746:	80 fa 04             	cmp    dl,0x4
c0011749:	75 88                	jne    c00116d3 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c001174b:	89 f0                	mov    eax,esi
c001174d:	84 c0                	test   al,al
c001174f:	75 47                	jne    c0011798 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011751:	c7 44 24 20 84 a3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a384
c0011759:	83 c4 10             	add    esp,0x10
c001175c:	5b                   	pop    ebx
c001175d:	5e                   	pop    esi
c001175e:	5f                   	pop    edi
c001175f:	e9 0b 87 00 00       	jmp    c0019e6f <Krnl::panic(char const*)>
c0011764:	89 f0                	mov    eax,esi
c0011766:	84 c0                	test   al,al
c0011768:	75 15                	jne    c001177f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001176a:	83 ec 0c             	sub    esp,0xc
c001176d:	68 63 a5 02 c0       	push   0xc002a563
c0011772:	e8 f8 86 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c0011777:	83 c4 10             	add    esp,0x10
c001177a:	e9 6e ff ff ff       	jmp    c00116ed <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001177f:	83 ec 08             	sub    esp,0x8
c0011782:	6a 00                	push   0x0
c0011784:	53                   	push   ebx
c0011785:	e8 74 fa ff ff       	call   c00111fe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001178a:	83 c4 10             	add    esp,0x10
c001178d:	e9 5b ff ff ff       	jmp    c00116ed <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011792:	89 f0                	mov    eax,esi
c0011794:	84 c0                	test   al,al
c0011796:	75 15                	jne    c00117ad <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011798:	83 ec 08             	sub    esp,0x8
c001179b:	6a 00                	push   0x0
c001179d:	53                   	push   ebx
c001179e:	e8 5b fa ff ff       	call   c00111fe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117a3:	83 c4 10             	add    esp,0x10
c00117a6:	83 c4 10             	add    esp,0x10
c00117a9:	5b                   	pop    ebx
c00117aa:	5e                   	pop    esi
c00117ab:	5f                   	pop    edi
c00117ac:	c3                   	ret    
c00117ad:	c7 44 24 20 7f a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a57f
c00117b5:	83 c4 10             	add    esp,0x10
c00117b8:	5b                   	pop    ebx
c00117b9:	5e                   	pop    esi
c00117ba:	5f                   	pop    edi
c00117bb:	e9 af 86 00 00       	jmp    c0019e6f <Krnl::panic(char const*)>

c00117c0 <VAS::freeAllocatedPages(unsigned long)>:
c00117c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00117c8:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00117cc:	74 09                	je     c00117d7 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00117ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00117d2:	e9 c6 fe ff ff       	jmp    c001169d <Virt::freeKernelVirtualPages(unsigned long)>
c00117d7:	c7 44 24 04 a8 a3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a3a8
c00117df:	e9 1f 0f 00 00       	jmp    c0012703 <Dbg::kprintf(char const*, ...)>

c00117e4 <VAS::virtualToPhysical(unsigned long)>:
c00117e4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00117e8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00117ec:	e8 8d fe ff ff       	call   c001167e <VAS::getPageTableEntry(unsigned long)>
c00117f1:	5a                   	pop    edx
c00117f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00117f4:	59                   	pop    ecx
c00117f5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00117fa:	c3                   	ret    
c00117fb:	90                   	nop

c00117fc <VAS::reflagRange(unsigned long, int, int, int)>:
c00117fc:	55                   	push   ebp
c00117fd:	57                   	push   edi
c00117fe:	56                   	push   esi
c00117ff:	53                   	push   ebx
c0011800:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011804:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011808:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001180c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011810:	85 db                	test   ebx,ebx
c0011812:	7e 22                	jle    c0011836 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011814:	c1 e3 0c             	shl    ebx,0xc
c0011817:	01 f3                	add    ebx,esi
c0011819:	56                   	push   esi
c001181a:	81 c6 00 10 00 00    	add    esi,0x1000
c0011820:	55                   	push   ebp
c0011821:	e8 58 fe ff ff       	call   c001167e <VAS::getPageTableEntry(unsigned long)>
c0011826:	5a                   	pop    edx
c0011827:	59                   	pop    ecx
c0011828:	8b 08                	mov    ecx,DWORD PTR [eax]
c001182a:	21 f9                	and    ecx,edi
c001182c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011830:	39 f3                	cmp    ebx,esi
c0011832:	89 08                	mov    DWORD PTR [eax],ecx
c0011834:	75 e3                	jne    c0011819 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011836:	5b                   	pop    ebx
c0011837:	5e                   	pop    esi
c0011838:	5f                   	pop    edi
c0011839:	5d                   	pop    ebp
c001183a:	c3                   	ret    
c001183b:	90                   	nop

c001183c <VAS::setToWriteCombining(unsigned long, int)>:
c001183c:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0011841:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011847:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c001184e:	75 01                	jne    c0011851 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011850:	c3                   	ret    
c0011851:	68 80 00 00 00       	push   0x80
c0011856:	6a ff                	push   0xffffffff
c0011858:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001185c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011860:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011864:	e8 93 ff ff ff       	call   c00117fc <VAS::reflagRange(unsigned long, int, int, int)>
c0011869:	83 c4 14             	add    esp,0x14
c001186c:	c3                   	ret    
c001186d:	90                   	nop

c001186e <VAS::mapOtherVASIn(bool, VAS*)>:
c001186e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011873:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011877:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001187a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001187e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011881:	19 c0                	sbb    eax,eax
c0011883:	83 ca 03             	or     edx,0x3
c0011886:	83 e0 fc             	and    eax,0xfffffffc
c0011889:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011890:	0f 20 d8             	mov    eax,cr3
c0011893:	0f 22 d8             	mov    cr3,eax
c0011896:	c3                   	ret    
c0011897:	90                   	nop

c0011898 <VAS::~VAS()>:
c0011898:	83 ec 2c             	sub    esp,0x2c
c001189b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00118a3:	fa                   	cli    
c00118a4:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c00118a9:	40                   	inc    eax
c00118aa:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c00118af:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00118b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00118b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118b9:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00118bf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00118c3:	6a 01                	push   0x1
c00118c5:	50                   	push   eax
c00118c6:	e8 a3 ff ff ff       	call   c001186e <VAS::mapOtherVASIn(bool, VAS*)>
c00118cb:	83 c4 0c             	add    esp,0xc
c00118ce:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00118d6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00118de:	0f 8f d4 00 00 00    	jg     c00119b8 <VAS::~VAS()+0x120>
c00118e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118e8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00118ef:	c1 e2 02             	shl    edx,0x2
c00118f2:	01 d0                	add    eax,edx
c00118f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00118f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00118fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118fe:	83 e0 01             	and    eax,0x1
c0011901:	0f 84 a8 00 00 00    	je     c00119af <VAS::~VAS()+0x117>
c0011907:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001190f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011917:	7f 72                	jg     c001198b <VAS::~VAS()+0xf3>
c0011919:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001191d:	c1 e0 0a             	shl    eax,0xa
c0011920:	89 c2                	mov    edx,eax
c0011922:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011926:	01 d0                	add    eax,edx
c0011928:	c1 e0 0c             	shl    eax,0xc
c001192b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001192f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011934:	8b 00                	mov    eax,DWORD PTR [eax]
c0011936:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011939:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001193f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011943:	6a 01                	push   0x1
c0011945:	50                   	push   eax
c0011946:	e8 07 fd ff ff       	call   c0011652 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001194b:	83 c4 0c             	add    esp,0xc
c001194e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011952:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011956:	8b 00                	mov    eax,DWORD PTR [eax]
c0011958:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001195c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011960:	25 01 04 00 00       	and    eax,0x401
c0011965:	3d 01 04 00 00       	cmp    eax,0x401
c001196a:	75 19                	jne    c0011985 <VAS::~VAS()+0xed>
c001196c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011970:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011975:	83 ec 0c             	sub    esp,0xc
c0011978:	50                   	push   eax
c0011979:	e8 a6 df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001197e:	83 c4 10             	add    esp,0x10
c0011981:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011985:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011989:	eb 84                	jmp    c001190f <VAS::~VAS()+0x77>
c001198b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001198f:	25 00 04 00 00       	and    eax,0x400
c0011994:	74 19                	je     c00119af <VAS::~VAS()+0x117>
c0011996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001199a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001199f:	83 ec 0c             	sub    esp,0xc
c00119a2:	50                   	push   eax
c00119a3:	e8 7c df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c00119a8:	83 c4 10             	add    esp,0x10
c00119ab:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00119af:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00119b3:	e9 1e ff ff ff       	jmp    c00118d6 <VAS::~VAS()+0x3e>
c00119b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00119bf:	83 ec 0c             	sub    esp,0xc
c00119c2:	50                   	push   eax
c00119c3:	e8 d5 fc ff ff       	call   c001169d <Virt::freeKernelVirtualPages(unsigned long)>
c00119c8:	83 c4 10             	add    esp,0x10
c00119cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119cf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00119d2:	83 ec 0c             	sub    esp,0xc
c00119d5:	50                   	push   eax
c00119d6:	e8 49 df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c00119db:	83 c4 10             	add    esp,0x10
c00119de:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00119e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119e6:	c1 e0 02             	shl    eax,0x2
c00119e9:	83 ec 08             	sub    esp,0x8
c00119ec:	50                   	push   eax
c00119ed:	68 cc a3 02 c0       	push   0xc002a3cc
c00119f2:	e8 0c 0d 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c00119f7:	83 c4 10             	add    esp,0x10
c00119fa:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c00119ff:	48                   	dec    eax
c0011a00:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c0011a05:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c0011a0a:	85 c0                	test   eax,eax
c0011a0c:	75 01                	jne    c0011a0f <VAS::~VAS()+0x177>
c0011a0e:	fb                   	sti    
c0011a0f:	90                   	nop
c0011a10:	83 c4 2c             	add    esp,0x2c
c0011a13:	c3                   	ret    

c0011a14 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011a14:	55                   	push   ebp
c0011a15:	57                   	push   edi
c0011a16:	56                   	push   esi
c0011a17:	53                   	push   ebx
c0011a18:	83 ec 1c             	sub    esp,0x1c
c0011a1b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011a1f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a23:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011a29:	77 08                	ja     c0011a33 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011a2b:	0f 20 d8             	mov    eax,cr3
c0011a2e:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011a31:	75 47                	jne    c0011a7a <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011a33:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a37:	09 d8                	or     eax,ebx
c0011a39:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a3e:	75 57                	jne    c0011a97 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011a40:	89 de                	mov    esi,ebx
c0011a42:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011a45:	c1 ee 16             	shr    esi,0x16
c0011a48:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011a4f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011a53:	74 54                	je     c0011aa9 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011a55:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011a59:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011a5f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011a63:	c1 e6 0c             	shl    esi,0xc
c0011a66:	c1 eb 0a             	shr    ebx,0xa
c0011a69:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011a6f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011a72:	83 c4 1c             	add    esp,0x1c
c0011a75:	5b                   	pop    ebx
c0011a76:	5e                   	pop    esi
c0011a77:	5f                   	pop    edi
c0011a78:	5d                   	pop    ebp
c0011a79:	c3                   	ret    
c0011a7a:	83 ec 0c             	sub    esp,0xc
c0011a7d:	68 ec a3 02 c0       	push   0xc002a3ec
c0011a82:	e8 7c 0c 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0011a87:	83 c4 10             	add    esp,0x10
c0011a8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a8e:	09 d8                	or     eax,ebx
c0011a90:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a95:	74 a9                	je     c0011a40 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a97:	83 ec 0c             	sub    esp,0xc
c0011a9a:	68 54 a4 02 c0       	push   0xc002a454
c0011a9f:	e8 cb 83 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c0011aa4:	83 c4 10             	add    esp,0x10
c0011aa7:	eb 97                	jmp    c0011a40 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011aa9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011aad:	e8 e3 de ff ff       	call   c000f995 <Phys::allocatePage()>
c0011ab2:	83 ec 0c             	sub    esp,0xc
c0011ab5:	89 c5                	mov    ebp,eax
c0011ab7:	8b 0d 50 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db50
c0011abd:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011ac1:	6a 01                	push   0x1
c0011ac3:	e8 8f f7 ff ff       	call   c0011257 <Virt::allocateKernelVirtualPages(int)>
c0011ac8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011acf:	6a 01                	push   0x1
c0011ad1:	50                   	push   eax
c0011ad2:	55                   	push   ebp
c0011ad3:	81 cd 07 04 00 00    	or     ebp,0x407
c0011ad9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011add:	51                   	push   ecx
c0011ade:	e8 27 02 00 00       	call   c0011d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011ae3:	83 c4 1c             	add    esp,0x1c
c0011ae6:	68 00 10 00 00       	push   0x1000
c0011aeb:	6a 00                	push   0x0
c0011aed:	50                   	push   eax
c0011aee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011af2:	e8 59 ec fe ff       	call   c0000750 <memset>
c0011af7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011afb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011afe:	e8 9a fb ff ff       	call   c001169d <Virt::freeKernelVirtualPages(unsigned long)>
c0011b03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011b07:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011b0a:	83 c4 10             	add    esp,0x10
c0011b0d:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011b10:	e9 40 ff ff ff       	jmp    c0011a55 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011b15:	90                   	nop

c0011b16 <VAS::allocatePages(int, int)>:
c0011b16:	55                   	push   ebp
c0011b17:	57                   	push   edi
c0011b18:	56                   	push   esi
c0011b19:	53                   	push   ebx
c0011b1a:	83 ec 1c             	sub    esp,0x1c
c0011b1d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011b21:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0011b26:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b2c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011b32:	83 e0 01             	and    eax,0x1
c0011b35:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011b39:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011b3d:	0f 85 cc 00 00 00    	jne    c0011c0f <VAS::allocatePages(int, int)+0xf9>
c0011b43:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011b4a:	85 c0                	test   eax,eax
c0011b4c:	0f 84 a1 00 00 00    	je     c0011bf3 <VAS::allocatePages(int, int)+0xdd>
c0011b52:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011b56:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b5a:	c1 e6 0c             	shl    esi,0xc
c0011b5d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011b61:	85 c0                	test   eax,eax
c0011b63:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011b66:	7e 33                	jle    c0011b9b <VAS::allocatePages(int, int)+0x85>
c0011b68:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011b6c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b70:	81 cd 00 04 00 00    	or     ebp,0x400
c0011b76:	e8 1a de ff ff       	call   c000f995 <Phys::allocatePage()>
c0011b7b:	55                   	push   ebp
c0011b7c:	53                   	push   ebx
c0011b7d:	50                   	push   eax
c0011b7e:	57                   	push   edi
c0011b7f:	e8 90 fe ff ff       	call   c0011a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b84:	83 c4 10             	add    esp,0x10
c0011b87:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b8c:	74 03                	je     c0011b91 <VAS::allocatePages(int, int)+0x7b>
c0011b8e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b91:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b97:	39 de                	cmp    esi,ebx
c0011b99:	75 db                	jne    c0011b76 <VAS::allocatePages(int, int)+0x60>
c0011b9b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ba0:	75 12                	jne    c0011bb4 <VAS::allocatePages(int, int)+0x9e>
c0011ba2:	0f 20 d8             	mov    eax,cr3
c0011ba5:	0f 22 d8             	mov    cr3,eax
c0011ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bac:	83 c4 1c             	add    esp,0x1c
c0011baf:	5b                   	pop    ebx
c0011bb0:	5e                   	pop    esi
c0011bb1:	5f                   	pop    edi
c0011bb2:	5d                   	pop    ebp
c0011bb3:	c3                   	ret    
c0011bb4:	c1 ee 0a             	shr    esi,0xa
c0011bb7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011bbb:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011bc1:	c1 eb 0a             	shr    ebx,0xa
c0011bc4:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011bca:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011bd0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011bd6:	39 c3                	cmp    ebx,eax
c0011bd8:	77 ce                	ja     c0011ba8 <VAS::allocatePages(int, int)+0x92>
c0011bda:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bdd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011be3:	39 d8                	cmp    eax,ebx
c0011be5:	73 f3                	jae    c0011bda <VAS::allocatePages(int, int)+0xc4>
c0011be7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011beb:	83 c4 1c             	add    esp,0x1c
c0011bee:	5b                   	pop    ebx
c0011bef:	5e                   	pop    esi
c0011bf0:	5f                   	pop    edi
c0011bf1:	5d                   	pop    ebp
c0011bf2:	c3                   	ret    
c0011bf3:	83 ec 0c             	sub    esp,0xc
c0011bf6:	68 78 a4 02 c0       	push   0xc002a478
c0011bfb:	e8 6f 82 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c0011c00:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011c03:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c07:	83 c4 10             	add    esp,0x10
c0011c0a:	e9 43 ff ff ff       	jmp    c0011b52 <VAS::allocatePages(int, int)+0x3c>
c0011c0f:	83 ec 0c             	sub    esp,0xc
c0011c12:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011c16:	e8 3c f6 ff ff       	call   c0011257 <Virt::allocateKernelVirtualPages(int)>
c0011c1b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c1f:	83 c4 10             	add    esp,0x10
c0011c22:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011c27:	0f 87 9b 00 00 00    	ja     c0011cc8 <VAS::allocatePages(int, int)+0x1b2>
c0011c2d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011c31:	85 d2                	test   edx,edx
c0011c33:	7e 3c                	jle    c0011c71 <VAS::allocatePages(int, int)+0x15b>
c0011c35:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c39:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011c3d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011c41:	c1 e5 0c             	shl    ebp,0xc
c0011c44:	81 ce 00 04 00 00    	or     esi,0x400
c0011c4a:	01 dd                	add    ebp,ebx
c0011c4c:	e8 44 dd ff ff       	call   c000f995 <Phys::allocatePage()>
c0011c51:	56                   	push   esi
c0011c52:	53                   	push   ebx
c0011c53:	50                   	push   eax
c0011c54:	57                   	push   edi
c0011c55:	e8 ba fd ff ff       	call   c0011a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c5a:	83 c4 10             	add    esp,0x10
c0011c5d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c62:	74 03                	je     c0011c67 <VAS::allocatePages(int, int)+0x151>
c0011c64:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c67:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c6d:	39 dd                	cmp    ebp,ebx
c0011c6f:	75 db                	jne    c0011c4c <VAS::allocatePages(int, int)+0x136>
c0011c71:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c76:	0f 84 26 ff ff ff    	je     c0011ba2 <VAS::allocatePages(int, int)+0x8c>
c0011c7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c80:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c84:	89 d3                	mov    ebx,edx
c0011c86:	c1 e0 0c             	shl    eax,0xc
c0011c89:	c1 eb 0a             	shr    ebx,0xa
c0011c8c:	01 d0                	add    eax,edx
c0011c8e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c94:	c1 e8 0a             	shr    eax,0xa
c0011c97:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c9d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ca2:	2d 00 00 40 00       	sub    eax,0x400000
c0011ca7:	39 c3                	cmp    ebx,eax
c0011ca9:	0f 87 f9 fe ff ff    	ja     c0011ba8 <VAS::allocatePages(int, int)+0x92>
c0011caf:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cb2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011cb8:	39 d8                	cmp    eax,ebx
c0011cba:	73 f3                	jae    c0011caf <VAS::allocatePages(int, int)+0x199>
c0011cbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cc0:	83 c4 1c             	add    esp,0x1c
c0011cc3:	5b                   	pop    ebx
c0011cc4:	5e                   	pop    esi
c0011cc5:	5f                   	pop    edi
c0011cc6:	5d                   	pop    ebp
c0011cc7:	c3                   	ret    
c0011cc8:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0011ccd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011cd3:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011cda:	0f 84 4d ff ff ff    	je     c0011c2d <VAS::allocatePages(int, int)+0x117>
c0011ce0:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011ce8:	e9 40 ff ff ff       	jmp    c0011c2d <VAS::allocatePages(int, int)+0x117>
c0011ced:	90                   	nop

c0011cee <VAS::setCPUSpecific(unsigned long)>:
c0011cee:	83 ec 0c             	sub    esp,0xc
c0011cf1:	6a 05                	push   0x5
c0011cf3:	68 00 00 40 c2       	push   0xc2400000
c0011cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d00:	e8 0f fd ff ff       	call   c0011a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d05:	83 c4 1c             	add    esp,0x1c
c0011d08:	c3                   	ret    
c0011d09:	90                   	nop

c0011d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011d0a:	55                   	push   ebp
c0011d0b:	57                   	push   edi
c0011d0c:	56                   	push   esi
c0011d0d:	53                   	push   ebx
c0011d0e:	83 ec 1c             	sub    esp,0x1c
c0011d11:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0011d16:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011d20:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011d24:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011d2a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011d2e:	83 e0 01             	and    eax,0x1
c0011d31:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011d35:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d39:	85 c0                	test   eax,eax
c0011d3b:	7e 39                	jle    c0011d76 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011d3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d41:	89 f3                	mov    ebx,esi
c0011d43:	c1 e0 0c             	shl    eax,0xc
c0011d46:	01 f0                	add    eax,esi
c0011d48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d4c:	55                   	push   ebp
c0011d4d:	53                   	push   ebx
c0011d4e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d52:	29 f0                	sub    eax,esi
c0011d54:	01 d8                	add    eax,ebx
c0011d56:	50                   	push   eax
c0011d57:	57                   	push   edi
c0011d58:	e8 b7 fc ff ff       	call   c0011a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d5d:	83 c4 10             	add    esp,0x10
c0011d60:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d65:	74 03                	je     c0011d6a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011d67:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d6a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d70:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011d74:	75 d6                	jne    c0011d4c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011d76:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d7b:	75 10                	jne    c0011d8d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011d7d:	0f 20 d8             	mov    eax,cr3
c0011d80:	0f 22 d8             	mov    cr3,eax
c0011d83:	83 c4 1c             	add    esp,0x1c
c0011d86:	89 f0                	mov    eax,esi
c0011d88:	5b                   	pop    ebx
c0011d89:	5e                   	pop    esi
c0011d8a:	5f                   	pop    edi
c0011d8b:	5d                   	pop    ebp
c0011d8c:	c3                   	ret    
c0011d8d:	89 f3                	mov    ebx,esi
c0011d8f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d93:	c1 eb 0a             	shr    ebx,0xa
c0011d96:	c1 e0 0c             	shl    eax,0xc
c0011d99:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011d9f:	01 f0                	add    eax,esi
c0011da1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011da7:	c1 e8 0a             	shr    eax,0xa
c0011daa:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011daf:	2d 00 00 40 00       	sub    eax,0x400000
c0011db4:	39 c3                	cmp    ebx,eax
c0011db6:	77 cb                	ja     c0011d83 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011db8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011dbb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011dc1:	39 d8                	cmp    eax,ebx
c0011dc3:	73 f3                	jae    c0011db8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011dc5:	83 c4 1c             	add    esp,0x1c
c0011dc8:	89 f0                	mov    eax,esi
c0011dca:	5b                   	pop    ebx
c0011dcb:	5e                   	pop    esi
c0011dcc:	5f                   	pop    edi
c0011dcd:	5d                   	pop    ebp
c0011dce:	c3                   	ret    
c0011dcf:	90                   	nop

c0011dd0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011dd0:	55                   	push   ebp
c0011dd1:	57                   	push   edi
c0011dd2:	56                   	push   esi
c0011dd3:	53                   	push   ebx
c0011dd4:	83 ec 1c             	sub    esp,0x1c
c0011dd7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011ddb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011ddf:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011de3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011de7:	a9 ff 0f 00 00       	test   eax,0xfff
c0011dec:	75 4a                	jne    c0011e38 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011dee:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011df2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011df5:	c1 eb 16             	shr    ebx,0x16
c0011df8:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011dff:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011e03:	74 4d                	je     c0011e52 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011e05:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011e09:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011e0d:	c1 e8 0a             	shr    eax,0xa
c0011e10:	80 fa 01             	cmp    dl,0x1
c0011e13:	19 d2                	sbb    edx,edx
c0011e15:	c1 e3 0c             	shl    ebx,0xc
c0011e18:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011e1c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011e22:	25 fc 0f 00 00       	and    eax,0xffc
c0011e27:	01 d8                	add    eax,ebx
c0011e29:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011e30:	83 c4 1c             	add    esp,0x1c
c0011e33:	5b                   	pop    ebx
c0011e34:	5e                   	pop    esi
c0011e35:	5f                   	pop    edi
c0011e36:	5d                   	pop    ebp
c0011e37:	c3                   	ret    
c0011e38:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011e3c:	83 ec 0c             	sub    esp,0xc
c0011e3f:	68 a4 a4 02 c0       	push   0xc002a4a4
c0011e44:	e8 26 80 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c0011e49:	83 c4 10             	add    esp,0x10
c0011e4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011e50:	eb 9c                	jmp    c0011dee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011e52:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011e56:	e8 3a db ff ff       	call   c000f995 <Phys::allocatePage()>
c0011e5b:	83 ec 0c             	sub    esp,0xc
c0011e5e:	89 c5                	mov    ebp,eax
c0011e60:	8b 0d 50 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db50
c0011e66:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011e6a:	6a 01                	push   0x1
c0011e6c:	e8 e6 f3 ff ff       	call   c0011257 <Virt::allocateKernelVirtualPages(int)>
c0011e71:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011e78:	6a 01                	push   0x1
c0011e7a:	50                   	push   eax
c0011e7b:	55                   	push   ebp
c0011e7c:	81 cd 07 04 00 00    	or     ebp,0x407
c0011e82:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011e86:	51                   	push   ecx
c0011e87:	e8 7e fe ff ff       	call   c0011d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e8c:	83 c4 1c             	add    esp,0x1c
c0011e8f:	68 00 10 00 00       	push   0x1000
c0011e94:	6a 00                	push   0x0
c0011e96:	50                   	push   eax
c0011e97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e9b:	e8 b0 e8 fe ff       	call   c0000750 <memset>
c0011ea0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011ea4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011ea7:	e8 f1 f7 ff ff       	call   c001169d <Virt::freeKernelVirtualPages(unsigned long)>
c0011eac:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011eaf:	83 c4 10             	add    esp,0x10
c0011eb2:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011eb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011eb9:	e9 47 ff ff ff       	jmp    c0011e05 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011ebe <VAS::VAS(bool)>:
c0011ebe:	53                   	push   ebx
c0011ebf:	83 ec 28             	sub    esp,0x28
c0011ec2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ec6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011eca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ece:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ed5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ed9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011ee0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ee4:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011ee8:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011eeb:	e8 a5 da ff ff       	call   c000f995 <Phys::allocatePage()>
c0011ef0:	89 c2                	mov    edx,eax
c0011ef2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011ef9:	8b 1d 50 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db50
c0011eff:	83 ec 0c             	sub    esp,0xc
c0011f02:	6a 01                	push   0x1
c0011f04:	e8 4e f3 ff ff       	call   c0011257 <Virt::allocateKernelVirtualPages(int)>
c0011f09:	83 c4 10             	add    esp,0x10
c0011f0c:	89 c2                	mov    edx,eax
c0011f0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f12:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011f15:	83 ec 0c             	sub    esp,0xc
c0011f18:	6a 03                	push   0x3
c0011f1a:	6a 01                	push   0x1
c0011f1c:	52                   	push   edx
c0011f1d:	50                   	push   eax
c0011f1e:	53                   	push   ebx
c0011f1f:	e8 e6 fd ff ff       	call   c0011d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f24:	83 c4 20             	add    esp,0x20
c0011f27:	89 c2                	mov    edx,eax
c0011f29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f2d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011f30:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011f38:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011f40:	7f 1c                	jg     c0011f5e <VAS::VAS(bool)+0xa0>
c0011f42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f46:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f49:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f4d:	c1 e2 02             	shl    edx,0x2
c0011f50:	01 d0                	add    eax,edx
c0011f52:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f58:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f5c:	eb da                	jmp    c0011f38 <VAS::VAS(bool)+0x7a>
c0011f5e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011f66:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011f6e:	7f 7a                	jg     c0011fea <VAS::VAS(bool)+0x12c>
c0011f70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f74:	2d 00 02 00 00       	sub    eax,0x200
c0011f79:	c1 e0 0c             	shl    eax,0xc
c0011f7c:	83 c8 03             	or     eax,0x3
c0011f7f:	89 c2                	mov    edx,eax
c0011f81:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0011f86:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f8c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f92:	83 e0 10             	and    eax,0x10
c0011f95:	84 c0                	test   al,al
c0011f97:	74 07                	je     c0011fa0 <VAS::VAS(bool)+0xe2>
c0011f99:	b8 00 01 00 00       	mov    eax,0x100
c0011f9e:	eb 05                	jmp    c0011fa5 <VAS::VAS(bool)+0xe7>
c0011fa0:	b8 00 00 00 00       	mov    eax,0x0
c0011fa5:	09 d0                	or     eax,edx
c0011fa7:	89 c1                	mov    ecx,eax
c0011fa9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fad:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fb0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011fb4:	c1 e2 02             	shl    edx,0x2
c0011fb7:	01 d0                	add    eax,edx
c0011fb9:	89 ca                	mov    edx,ecx
c0011fbb:	89 10                	mov    DWORD PTR [eax],edx
c0011fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011fc1:	2d 40 03 00 00       	sub    eax,0x340
c0011fc6:	83 f8 7f             	cmp    eax,0x7f
c0011fc9:	77 16                	ja     c0011fe1 <VAS::VAS(bool)+0x123>
c0011fcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fcf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fd2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011fd6:	c1 e2 02             	shl    edx,0x2
c0011fd9:	01 d0                	add    eax,edx
c0011fdb:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011fe1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011fe5:	e9 7c ff ff ff       	jmp    c0011f66 <VAS::VAS(bool)+0xa8>
c0011fea:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0011fef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ff5:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011ffb:	83 e0 10             	and    eax,0x10
c0011ffe:	84 c0                	test   al,al
c0012000:	74 07                	je     c0012009 <VAS::VAS(bool)+0x14b>
c0012002:	b8 03 41 00 00       	mov    eax,0x4103
c0012007:	eb 05                	jmp    c001200e <VAS::VAS(bool)+0x150>
c0012009:	b8 03 40 00 00       	mov    eax,0x4003
c001200e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012012:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012015:	81 c2 20 0c 00 00    	add    edx,0xc20
c001201b:	89 02                	mov    DWORD PTR [edx],eax
c001201d:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0012022:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012028:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001202e:	83 ec 08             	sub    esp,0x8
c0012031:	50                   	push   eax
c0012032:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012036:	e8 b3 fc ff ff       	call   c0011cee <VAS::setCPUSpecific(unsigned long)>
c001203b:	83 c4 10             	add    esp,0x10
c001203e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012042:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012045:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c001204a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012050:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012056:	83 e0 10             	and    eax,0x10
c0012059:	84 c0                	test   al,al
c001205b:	74 07                	je     c0012064 <VAS::VAS(bool)+0x1a6>
c001205d:	b8 00 01 00 00       	mov    eax,0x100
c0012062:	eb 05                	jmp    c0012069 <VAS::VAS(bool)+0x1ab>
c0012064:	b8 00 00 00 00       	mov    eax,0x0
c0012069:	09 c2                	or     edx,eax
c001206b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001206f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012072:	05 fc 0f 00 00       	add    eax,0xffc
c0012077:	83 ca 03             	or     edx,0x3
c001207a:	89 10                	mov    DWORD PTR [eax],edx
c001207c:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0012081:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012087:	83 ec 0c             	sub    esp,0xc
c001208a:	50                   	push   eax
c001208b:	e8 ac 1d 00 00       	call   c0013e3c <Device::getName()>
c0012090:	83 c4 10             	add    esp,0x10
c0012093:	83 ec 08             	sub    esp,0x8
c0012096:	68 99 a5 02 c0       	push   0xc002a599
c001209b:	50                   	push   eax
c001209c:	e8 f7 e7 fe ff       	call   c0000898 <strcmp>
c00120a1:	83 c4 10             	add    esp,0x10
c00120a4:	85 c0                	test   eax,eax
c00120a6:	0f 94 c0             	sete   al
c00120a9:	84 c0                	test   al,al
c00120ab:	0f 84 87 00 00 00    	je     c0012138 <VAS::VAS(bool)+0x27a>
c00120b1:	fa                   	cli    
c00120b2:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c00120b7:	40                   	inc    eax
c00120b8:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c00120bd:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c00120c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120c8:	05 7c 09 00 00       	add    eax,0x97c
c00120cd:	83 ec 0c             	sub    esp,0xc
c00120d0:	50                   	push   eax
c00120d1:	e8 48 cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00120d6:	83 c4 10             	add    esp,0x10
c00120d9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120de:	89 c3                	mov    ebx,eax
c00120e0:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c00120e5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120eb:	05 7c 09 00 00       	add    eax,0x97c
c00120f0:	83 ec 0c             	sub    esp,0xc
c00120f3:	50                   	push   eax
c00120f4:	e8 25 cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00120f9:	83 c4 10             	add    esp,0x10
c00120fc:	83 ec 08             	sub    esp,0x8
c00120ff:	50                   	push   eax
c0012100:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012104:	e8 75 f5 ff ff       	call   c001167e <VAS::getPageTableEntry(unsigned long)>
c0012109:	83 c4 10             	add    esp,0x10
c001210c:	8b 00                	mov    eax,DWORD PTR [eax]
c001210e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012113:	6a 11                	push   0x11
c0012115:	53                   	push   ebx
c0012116:	50                   	push   eax
c0012117:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001211b:	e8 f4 f8 ff ff       	call   c0011a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012120:	83 c4 10             	add    esp,0x10
c0012123:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c0012128:	48                   	dec    eax
c0012129:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001212e:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c0012133:	85 c0                	test   eax,eax
c0012135:	75 01                	jne    c0012138 <VAS::VAS(bool)+0x27a>
c0012137:	fb                   	sti    
c0012138:	90                   	nop
c0012139:	83 c4 28             	add    esp,0x28
c001213c:	5b                   	pop    ebx
c001213d:	c3                   	ret    

c001213e <VAS::evict(unsigned long)>:
c001213e:	55                   	push   ebp
c001213f:	57                   	push   edi
c0012140:	56                   	push   esi
c0012141:	53                   	push   ebx
c0012142:	83 ec 1c             	sub    esp,0x1c
c0012145:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012149:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001214d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012151:	e8 42 f2 ff ff       	call   c0011398 <Virt::allocateSwapfilePage()>
c0012156:	89 c7                	mov    edi,eax
c0012158:	a1 8c c9 02 c0       	mov    eax,ds:0xc002c98c
c001215d:	85 c0                	test   eax,eax
c001215f:	7e 3d                	jle    c001219e <VAS::evict(unsigned long)+0x60>
c0012161:	89 ee                	mov    esi,ebp
c0012163:	31 db                	xor    ebx,ebx
c0012165:	83 ec 0c             	sub    esp,0xc
c0012168:	57                   	push   edi
c0012169:	e8 18 f2 ff ff       	call   c0011386 <Virt::swapIDToSector(unsigned long)>
c001216e:	89 34 24             	mov    DWORD PTR [esp],esi
c0012171:	01 d8                	add    eax,ebx
c0012173:	6a 01                	push   0x1
c0012175:	31 d2                	xor    edx,edx
c0012177:	43                   	inc    ebx
c0012178:	52                   	push   edx
c0012179:	81 c6 00 02 00 00    	add    esi,0x200
c001217f:	50                   	push   eax
c0012180:	0f be 05 98 c9 02 c0 	movsx  eax,BYTE PTR ds:0xc002c998
c0012187:	ff 34 85 dc de 02 c0 	push   DWORD PTR [eax*4-0x3ffd2124]
c001218e:	e8 31 3f 00 00       	call   c00160c4 <LogicalDisk::write(unsigned long long, int, void*)>
c0012193:	83 c4 20             	add    esp,0x20
c0012196:	39 1d 8c c9 02 c0    	cmp    DWORD PTR ds:0xc002c98c,ebx
c001219c:	7f c7                	jg     c0012165 <VAS::evict(unsigned long)+0x27>
c001219e:	83 ec 08             	sub    esp,0x8
c00121a1:	c1 e7 0b             	shl    edi,0xb
c00121a4:	55                   	push   ebp
c00121a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00121a9:	e8 d0 f4 ff ff       	call   c001167e <VAS::getPageTableEntry(unsigned long)>
c00121ae:	5a                   	pop    edx
c00121af:	89 c6                	mov    esi,eax
c00121b1:	59                   	pop    ecx
c00121b2:	ff 30                	push   DWORD PTR [eax]
c00121b4:	68 a7 a5 02 c0       	push   0xc002a5a7
c00121b9:	e8 45 05 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c00121be:	8b 16                	mov    edx,DWORD PTR [esi]
c00121c0:	89 d3                	mov    ebx,edx
c00121c2:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00121c8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00121ce:	09 d7                	or     edi,edx
c00121d0:	89 3e                	mov    DWORD PTR [esi],edi
c00121d2:	5e                   	pop    esi
c00121d3:	58                   	pop    eax
c00121d4:	57                   	push   edi
c00121d5:	68 c0 a5 02 c0       	push   0xc002a5c0
c00121da:	e8 24 05 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c00121df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121e2:	ff 05 48 db 02 c0    	inc    DWORD PTR ds:0xc002db48
c00121e8:	e8 37 d7 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c00121ed:	0f 20 d8             	mov    eax,cr3
c00121f0:	0f 22 d8             	mov    cr3,eax
c00121f3:	ff 35 48 db 02 c0    	push   DWORD PTR ds:0xc002db48
c00121f9:	55                   	push   ebp
c00121fa:	53                   	push   ebx
c00121fb:	68 c8 a4 02 c0       	push   0xc002a4c8
c0012200:	e8 fe 04 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0012205:	a1 44 db 02 c0       	mov    eax,ds:0xc002db44
c001220a:	c7 44 24 50 d9 a5 02 c0 	mov    DWORD PTR [esp+0x50],0xc002a5d9
c0012212:	8d 50 01             	lea    edx,[eax+0x1]
c0012215:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0012219:	89 15 44 db 02 c0    	mov    DWORD PTR ds:0xc002db44,edx
c001221f:	83 c4 3c             	add    esp,0x3c
c0012222:	5b                   	pop    ebx
c0012223:	5e                   	pop    esi
c0012224:	5f                   	pop    edi
c0012225:	5d                   	pop    ebp
c0012226:	e9 d8 04 00 00       	jmp    c0012703 <Dbg::kprintf(char const*, ...)>
c001222b:	90                   	nop

c001222c <VAS::tryLoadBackOffDisk(unsigned long)>:
c001222c:	55                   	push   ebp
c001222d:	57                   	push   edi
c001222e:	56                   	push   esi
c001222f:	53                   	push   ebx
c0012230:	83 ec 24             	sub    esp,0x24
c0012233:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012237:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001223b:	68 ea a5 02 c0       	push   0xc002a5ea
c0012240:	e8 be 04 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0012245:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0012249:	58                   	pop    eax
c001224a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012250:	5a                   	pop    edx
c0012251:	53                   	push   ebx
c0012252:	56                   	push   esi
c0012253:	e8 26 f4 ff ff       	call   c001167e <VAS::getPageTableEntry(unsigned long)>
c0012258:	59                   	pop    ecx
c0012259:	89 c5                	mov    ebp,eax
c001225b:	5f                   	pop    edi
c001225c:	ff 30                	push   DWORD PTR [eax]
c001225e:	68 fd a5 02 c0       	push   0xc002a5fd
c0012263:	e8 9b 04 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0012268:	83 c4 10             	add    esp,0x10
c001226b:	85 db                	test   ebx,ebx
c001226d:	74 1d                	je     c001228c <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c001226f:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
c0012272:	31 c0                	xor    eax,eax
c0012274:	89 fa                	mov    edx,edi
c0012276:	81 e2 01 04 00 00    	and    edx,0x401
c001227c:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012282:	74 12                	je     c0012296 <VAS::tryLoadBackOffDisk(unsigned long)+0x6a>
c0012284:	83 c4 1c             	add    esp,0x1c
c0012287:	5b                   	pop    ebx
c0012288:	5e                   	pop    esi
c0012289:	5f                   	pop    edi
c001228a:	5d                   	pop    ebp
c001228b:	c3                   	ret    
c001228c:	83 c4 1c             	add    esp,0x1c
c001228f:	31 c0                	xor    eax,eax
c0012291:	5b                   	pop    ebx
c0012292:	5e                   	pop    esi
c0012293:	5f                   	pop    edi
c0012294:	5d                   	pop    ebp
c0012295:	c3                   	ret    
c0012296:	83 ec 08             	sub    esp,0x8
c0012299:	c1 ef 0b             	shr    edi,0xb
c001229c:	57                   	push   edi
c001229d:	68 0b a6 02 c0       	push   0xc002a60b
c00122a2:	e8 5c 04 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c00122a7:	e8 e9 d6 ff ff       	call   c000f995 <Phys::allocatePage()>
c00122ac:	59                   	pop    ecx
c00122ad:	5a                   	pop    edx
c00122ae:	50                   	push   eax
c00122af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122b3:	68 16 a6 02 c0       	push   0xc002a616
c00122b8:	e8 46 04 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c00122bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00122c1:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00122c4:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00122ca:	09 d0                	or     eax,edx
c00122cc:	0d 01 08 00 00       	or     eax,0x801
c00122d1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00122d4:	59                   	pop    ecx
c00122d5:	5d                   	pop    ebp
c00122d6:	50                   	push   eax
c00122d7:	68 2b a6 02 c0       	push   0xc002a62b
c00122dc:	e8 22 04 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c00122e1:	0f 20 d8             	mov    eax,cr3
c00122e4:	83 c4 0c             	add    esp,0xc
c00122e7:	56                   	push   esi
c00122e8:	50                   	push   eax
c00122e9:	68 43 a6 02 c0       	push   0xc002a643
c00122ee:	e8 10 04 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c00122f3:	c7 04 24 5b a6 02 c0 	mov    DWORD PTR [esp],0xc002a65b
c00122fa:	e8 04 04 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c00122ff:	83 c4 10             	add    esp,0x10
c0012302:	a1 8c c9 02 c0       	mov    eax,ds:0xc002c98c
c0012307:	85 c0                	test   eax,eax
c0012309:	7e 3d                	jle    c0012348 <VAS::tryLoadBackOffDisk(unsigned long)+0x11c>
c001230b:	89 dd                	mov    ebp,ebx
c001230d:	31 f6                	xor    esi,esi
c001230f:	83 ec 0c             	sub    esp,0xc
c0012312:	57                   	push   edi
c0012313:	e8 6e f0 ff ff       	call   c0011386 <Virt::swapIDToSector(unsigned long)>
c0012318:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001231b:	01 f0                	add    eax,esi
c001231d:	6a 01                	push   0x1
c001231f:	31 d2                	xor    edx,edx
c0012321:	46                   	inc    esi
c0012322:	52                   	push   edx
c0012323:	81 c5 00 02 00 00    	add    ebp,0x200
c0012329:	50                   	push   eax
c001232a:	0f be 05 98 c9 02 c0 	movsx  eax,BYTE PTR ds:0xc002c998
c0012331:	ff 34 85 dc de 02 c0 	push   DWORD PTR [eax*4-0x3ffd2124]
c0012338:	e8 1b 3d 00 00       	call   c0016058 <LogicalDisk::read(unsigned long long, int, void*)>
c001233d:	83 c4 20             	add    esp,0x20
c0012340:	39 35 8c c9 02 c0    	cmp    DWORD PTR ds:0xc002c98c,esi
c0012346:	7f c7                	jg     c001230f <VAS::tryLoadBackOffDisk(unsigned long)+0xe3>
c0012348:	a1 48 db 02 c0       	mov    eax,ds:0xc002db48
c001234d:	48                   	dec    eax
c001234e:	52                   	push   edx
c001234f:	a3 48 db 02 c0       	mov    ds:0xc002db48,eax
c0012354:	50                   	push   eax
c0012355:	53                   	push   ebx
c0012356:	68 6b a6 02 c0       	push   0xc002a66b
c001235b:	e8 a3 03 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0012360:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012363:	e8 00 f0 ff ff       	call   c0011368 <Virt::freeSwapfilePage(unsigned long)>
c0012368:	c7 04 24 80 a6 02 c0 	mov    DWORD PTR [esp],0xc002a680
c001236f:	e8 8f 03 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0012374:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c0012379:	83 c4 10             	add    esp,0x10
c001237c:	48                   	dec    eax
c001237d:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c0012382:	85 c0                	test   eax,eax
c0012384:	74 2d                	je     c00123b3 <VAS::tryLoadBackOffDisk(unsigned long)+0x187>
c0012386:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001238a:	25 ff 0f 00 00       	and    eax,0xfff
c001238f:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012394:	77 20                	ja     c00123b6 <VAS::tryLoadBackOffDisk(unsigned long)+0x18a>
c0012396:	0f 20 d8             	mov    eax,cr3
c0012399:	0f 22 d8             	mov    cr3,eax
c001239c:	83 ec 0c             	sub    esp,0xc
c001239f:	68 a6 a6 02 c0       	push   0xc002a6a6
c00123a4:	e8 5a 03 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c00123a9:	83 c4 10             	add    esp,0x10
c00123ac:	b0 01                	mov    al,0x1
c00123ae:	e9 d1 fe ff ff       	jmp    c0012284 <VAS::tryLoadBackOffDisk(unsigned long)+0x58>
c00123b3:	fb                   	sti    
c00123b4:	eb d0                	jmp    c0012386 <VAS::tryLoadBackOffDisk(unsigned long)+0x15a>
c00123b6:	83 ec 0c             	sub    esp,0xc
c00123b9:	68 96 a6 02 c0       	push   0xc002a696
c00123be:	e8 40 03 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c00123c3:	83 c4 10             	add    esp,0x10
c00123c6:	eb ce                	jmp    c0012396 <VAS::tryLoadBackOffDisk(unsigned long)+0x16a>

c00123c8 <VAS::scanForEviction()>:
c00123c8:	57                   	push   edi
c00123c9:	56                   	push   esi
c00123ca:	53                   	push   ebx
c00123cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00123cf:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00123d2:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00123d8:	75 0e                	jne    c00123e8 <VAS::scanForEviction()+0x20>
c00123da:	89 da                	mov    edx,ebx
c00123dc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00123df:	c1 ea 16             	shr    edx,0x16
c00123e2:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00123e6:	74 48                	je     c0012430 <VAS::scanForEviction()+0x68>
c00123e8:	53                   	push   ebx
c00123e9:	56                   	push   esi
c00123ea:	e8 8f f2 ff ff       	call   c001167e <VAS::getPageTableEntry(unsigned long)>
c00123ef:	5a                   	pop    edx
c00123f0:	8b 38                	mov    edi,DWORD PTR [eax]
c00123f2:	59                   	pop    ecx
c00123f3:	89 fa                	mov    edx,edi
c00123f5:	81 e2 00 0c 00 00    	and    edx,0xc00
c00123fb:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012401:	74 3d                	je     c0012440 <VAS::scanForEviction()+0x78>
c0012403:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012409:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c001240f:	76 2a                	jbe    c001243b <VAS::scanForEviction()+0x73>
c0012411:	31 db                	xor    ebx,ebx
c0012413:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001241a:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012420:	75 c6                	jne    c00123e8 <VAS::scanForEviction()+0x20>
c0012422:	89 da                	mov    edx,ebx
c0012424:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012427:	c1 ea 16             	shr    edx,0x16
c001242a:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001242e:	75 b8                	jne    c00123e8 <VAS::scanForEviction()+0x20>
c0012430:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012436:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012439:	eb 97                	jmp    c00123d2 <VAS::scanForEviction()+0xa>
c001243b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c001243e:	eb 92                	jmp    c00123d2 <VAS::scanForEviction()+0xa>
c0012440:	f7 c7 01 00 00 00    	test   edi,0x1
c0012446:	74 bb                	je     c0012403 <VAS::scanForEviction()+0x3b>
c0012448:	f7 c7 20 00 00 00    	test   edi,0x20
c001244e:	74 0a                	je     c001245a <VAS::scanForEviction()+0x92>
c0012450:	83 e7 df             	and    edi,0xffffffdf
c0012453:	89 38                	mov    DWORD PTR [eax],edi
c0012455:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012458:	eb a9                	jmp    c0012403 <VAS::scanForEviction()+0x3b>
c001245a:	83 ec 08             	sub    esp,0x8
c001245d:	53                   	push   ebx
c001245e:	56                   	push   esi
c001245f:	e8 da fc ff ff       	call   c001213e <VAS::evict(unsigned long)>
c0012464:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c001246b:	83 c4 10             	add    esp,0x10
c001246e:	89 f8                	mov    eax,edi
c0012470:	5b                   	pop    ebx
c0012471:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012476:	5e                   	pop    esi
c0012477:	5f                   	pop    edi
c0012478:	c3                   	ret    

c0012479 <mapVASFirstTime>:
c0012479:	55                   	push   ebp
c001247a:	57                   	push   edi
c001247b:	56                   	push   esi
c001247c:	53                   	push   ebx
c001247d:	83 ec 0c             	sub    esp,0xc
c0012480:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012485:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012488:	4a                   	dec    edx
c0012489:	0f 84 fe 00 00 00    	je     c001258d <mapVASFirstTime+0x114>
c001248f:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012492:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012495:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001249a:	c1 e5 15             	shl    ebp,0x15
c001249d:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00124a2:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c00124a8:	29 eb                	sub    ebx,ebp
c00124aa:	29 ef                	sub    edi,ebp
c00124ac:	83 ec 08             	sub    esp,0x8
c00124af:	53                   	push   ebx
c00124b0:	68 cd a6 02 c0       	push   0xc002a6cd
c00124b5:	e8 49 02 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c00124ba:	e8 d6 d4 ff ff       	call   c000f995 <Phys::allocatePage()>
c00124bf:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c00124c6:	6a 01                	push   0x1
c00124c8:	53                   	push   ebx
c00124c9:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00124cf:	50                   	push   eax
c00124d0:	56                   	push   esi
c00124d1:	e8 34 f8 ff ff       	call   c0011d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124d6:	83 c4 20             	add    esp,0x20
c00124d9:	39 fb                	cmp    ebx,edi
c00124db:	75 cf                	jne    c00124ac <mapVASFirstTime+0x33>
c00124dd:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c00124e2:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c00124e7:	29 eb                	sub    ebx,ebp
c00124e9:	29 ef                	sub    edi,ebp
c00124eb:	83 ec 08             	sub    esp,0x8
c00124ee:	53                   	push   ebx
c00124ef:	68 e9 a6 02 c0       	push   0xc002a6e9
c00124f4:	e8 0a 02 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c00124f9:	58                   	pop    eax
c00124fa:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00124fe:	5a                   	pop    edx
c00124ff:	19 c0                	sbb    eax,eax
c0012501:	83 e0 04             	and    eax,0x4
c0012504:	05 03 04 00 00       	add    eax,0x403
c0012509:	50                   	push   eax
c001250a:	68 35 a6 02 c0       	push   0xc002a635
c001250f:	e8 ef 01 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0012514:	e8 7c d4 ff ff       	call   c000f995 <Phys::allocatePage()>
c0012519:	59                   	pop    ecx
c001251a:	89 c5                	mov    ebp,eax
c001251c:	58                   	pop    eax
c001251d:	55                   	push   ebp
c001251e:	68 fd a6 02 c0       	push   0xc002a6fd
c0012523:	e8 db 01 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0012528:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c001252c:	19 d2                	sbb    edx,edx
c001252e:	83 e2 04             	and    edx,0x4
c0012531:	81 c2 03 0c 00 00    	add    edx,0xc03
c0012537:	89 14 24             	mov    DWORD PTR [esp],edx
c001253a:	6a 01                	push   0x1
c001253c:	53                   	push   ebx
c001253d:	55                   	push   ebp
c001253e:	56                   	push   esi
c001253f:	e8 c6 f7 ff ff       	call   c0011d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012544:	83 c4 18             	add    esp,0x18
c0012547:	53                   	push   ebx
c0012548:	56                   	push   esi
c0012549:	e8 30 f1 ff ff       	call   c001167e <VAS::getPageTableEntry(unsigned long)>
c001254e:	5a                   	pop    edx
c001254f:	59                   	pop    ecx
c0012550:	ff 30                	push   DWORD PTR [eax]
c0012552:	68 19 a7 02 c0       	push   0xc002a719
c0012557:	e8 a7 01 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001255c:	0f 20 d8             	mov    eax,cr3
c001255f:	83 c4 0c             	add    esp,0xc
c0012562:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012568:	56                   	push   esi
c0012569:	50                   	push   eax
c001256a:	68 43 a6 02 c0       	push   0xc002a643
c001256f:	e8 8f 01 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0012574:	83 c4 10             	add    esp,0x10
c0012577:	39 df                	cmp    edi,ebx
c0012579:	0f 85 6c ff ff ff    	jne    c00124eb <mapVASFirstTime+0x72>
c001257f:	0f 20 d8             	mov    eax,cr3
c0012582:	0f 22 d8             	mov    cr3,eax
c0012585:	83 c4 0c             	add    esp,0xc
c0012588:	5b                   	pop    ebx
c0012589:	5e                   	pop    esi
c001258a:	5f                   	pop    edi
c001258b:	5d                   	pop    ebp
c001258c:	c3                   	ret    
c001258d:	83 ec 0c             	sub    esp,0xc
c0012590:	68 b4 a6 02 c0       	push   0xc002a6b4
c0012595:	e8 69 01 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001259a:	83 c4 10             	add    esp,0x10
c001259d:	83 c4 0c             	add    esp,0xc
c00125a0:	5b                   	pop    ebx
c00125a1:	5e                   	pop    esi
c00125a2:	5f                   	pop    edi
c00125a3:	5d                   	pop    ebp
c00125a4:	c3                   	ret    

c00125a5 <__cxa_atexit>:
c00125a5:	31 c0                	xor    eax,eax
c00125a7:	c3                   	ret    

c00125a8 <__cxa_finalize>:
c00125a8:	c3                   	ret    

c00125a9 <__stack_chk_fail>:
c00125a9:	55                   	push   ebp
c00125aa:	89 e5                	mov    ebp,esp
c00125ac:	83 ec 14             	sub    esp,0x14
c00125af:	68 24 a7 02 c0       	push   0xc002a724
c00125b4:	e8 4a 01 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c00125b9:	58                   	pop    eax
c00125ba:	5a                   	pop    edx
c00125bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00125be:	68 74 a7 02 c0       	push   0xc002a774
c00125c3:	e8 3b 01 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c00125c8:	59                   	pop    ecx
c00125c9:	58                   	pop    eax
c00125ca:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125cd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00125d0:	68 74 a7 02 c0       	push   0xc002a774
c00125d5:	e8 29 01 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c00125da:	5a                   	pop    edx
c00125db:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125de:	59                   	pop    ecx
c00125df:	8b 00                	mov    eax,DWORD PTR [eax]
c00125e1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00125e4:	68 74 a7 02 c0       	push   0xc002a774
c00125e9:	e8 15 01 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c00125ee:	5a                   	pop    edx
c00125ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125f2:	59                   	pop    ecx
c00125f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00125f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00125f7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00125fa:	68 74 a7 02 c0       	push   0xc002a774
c00125ff:	e8 ff 00 00 00       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0012604:	c7 04 24 7c a7 02 c0 	mov    DWORD PTR [esp],0xc002a77c
c001260b:	e8 5f 78 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c0012610:	83 c4 10             	add    esp,0x10
c0012613:	c9                   	leave  
c0012614:	c3                   	ret    

c0012615 <__cxa_pure_virtual>:
c0012615:	83 ec 18             	sub    esp,0x18
c0012618:	68 94 a7 02 c0       	push   0xc002a794
c001261d:	e8 4d 78 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c0012622:	83 c4 1c             	add    esp,0x1c
c0012625:	c3                   	ret    

c0012626 <operator new[](unsigned long)>:
c0012626:	e9 6e cf ff ff       	jmp    c000f599 <malloc>

c001262b <operator delete(void*, unsigned long)>:
c001262b:	e9 89 cf ff ff       	jmp    c000f5b9 <rfree>

c0012630 <operator delete[](void*)>:
c0012630:	e9 84 cf ff ff       	jmp    c000f5b9 <rfree>

c0012635 <operator delete[](void*, unsigned long)>:
c0012635:	e9 7f cf ff ff       	jmp    c000f5b9 <rfree>

c001263a <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c001263a:	55                   	push   ebp
c001263b:	b9 11 00 00 00       	mov    ecx,0x11
c0012640:	57                   	push   edi
c0012641:	56                   	push   esi
c0012642:	be e2 a1 02 c0       	mov    esi,0xc002a1e2
c0012647:	53                   	push   ebx
c0012648:	83 ec 20             	sub    esp,0x20
c001264b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001264f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012653:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012657:	fc                   	cld    
c0012658:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001265a:	89 ee                	mov    esi,ebp
c001265c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012660:	eb 02                	jmp    c0012664 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c0012662:	89 c6                	mov    esi,eax
c0012664:	31 d2                	xor    edx,edx
c0012666:	41                   	inc    ecx
c0012667:	89 f0                	mov    eax,esi
c0012669:	f7 f3                	div    ebx
c001266b:	39 de                	cmp    esi,ebx
c001266d:	73 f3                	jae    c0012662 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c001266f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012672:	eb 02                	jmp    c0012676 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c0012674:	89 c5                	mov    ebp,eax
c0012676:	31 d2                	xor    edx,edx
c0012678:	49                   	dec    ecx
c0012679:	89 e8                	mov    eax,ebp
c001267b:	f7 f3                	div    ebx
c001267d:	39 dd                	cmp    ebp,ebx
c001267f:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0012683:	88 11                	mov    BYTE PTR [ecx],dl
c0012685:	73 ed                	jae    c0012674 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0012687:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001268b:	83 c4 20             	add    esp,0x20
c001268e:	5b                   	pop    ebx
c001268f:	5e                   	pop    esi
c0012690:	5f                   	pop    edi
c0012691:	5d                   	pop    ebp
c0012692:	c3                   	ret    

c0012693 <Dbg::logc(char)>:
c0012693:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012697:	ba fd 03 00 00       	mov    edx,0x3fd
c001269c:	ec                   	in     al,dx
c001269d:	a8 20                	test   al,0x20
c001269f:	74 fb                	je     c001269c <Dbg::logc(char)+0x9>
c00126a1:	ba f8 03 00 00       	mov    edx,0x3f8
c00126a6:	88 c8                	mov    al,cl
c00126a8:	ee                   	out    dx,al
c00126a9:	c3                   	ret    

c00126aa <Dbg::logs(char*)>:
c00126aa:	53                   	push   ebx
c00126ab:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00126af:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00126b2:	84 c0                	test   al,al
c00126b4:	74 0f                	je     c00126c5 <Dbg::logs(char*)+0x1b>
c00126b6:	50                   	push   eax
c00126b7:	43                   	inc    ebx
c00126b8:	e8 d6 ff ff ff       	call   c0012693 <Dbg::logc(char)>
c00126bd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00126c0:	5a                   	pop    edx
c00126c1:	84 c0                	test   al,al
c00126c3:	75 f1                	jne    c00126b6 <Dbg::logs(char*)+0xc>
c00126c5:	5b                   	pop    ebx
c00126c6:	c3                   	ret    

c00126c7 <Dbg::logWriteInt(unsigned int)>:
c00126c7:	83 ec 10             	sub    esp,0x10
c00126ca:	6a 0a                	push   0xa
c00126cc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00126d0:	50                   	push   eax
c00126d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126d5:	e8 60 ff ff ff       	call   c001263a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00126da:	50                   	push   eax
c00126db:	e8 ca ff ff ff       	call   c00126aa <Dbg::logs(char*)>
c00126e0:	83 c4 20             	add    esp,0x20
c00126e3:	c3                   	ret    

c00126e4 <Dbg::logWriteIntBase(unsigned int, int)>:
c00126e4:	83 ec 10             	sub    esp,0x10
c00126e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126eb:	8d 44 24 08          	lea    eax,[esp+0x8]
c00126ef:	50                   	push   eax
c00126f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126f4:	e8 41 ff ff ff       	call   c001263a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00126f9:	50                   	push   eax
c00126fa:	e8 ab ff ff ff       	call   c00126aa <Dbg::logs(char*)>
c00126ff:	83 c4 20             	add    esp,0x20
c0012702:	c3                   	ret    

c0012703 <Dbg::kprintf(char const*, ...)>:
c0012703:	55                   	push   ebp
c0012704:	57                   	push   edi
c0012705:	56                   	push   esi
c0012706:	53                   	push   ebx
c0012707:	83 ec 0c             	sub    esp,0xc
c001270a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001270e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012712:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012716:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012719:	84 c0                	test   al,al
c001271b:	74 4a                	je     c0012767 <Dbg::kprintf(char const*, ...)+0x64>
c001271d:	31 db                	xor    ebx,ebx
c001271f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012722:	3c 25                	cmp    al,0x25
c0012724:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012727:	0f 85 e4 00 00 00    	jne    c0012811 <Dbg::kprintf(char const*, ...)+0x10e>
c001272d:	83 c3 02             	add    ebx,0x2
c0012730:	8a 07                	mov    al,BYTE PTR [edi]
c0012732:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012735:	83 e8 25             	sub    eax,0x25
c0012738:	3c 53                	cmp    al,0x53
c001273a:	0f 87 ba 00 00 00    	ja     c00127fa <Dbg::kprintf(char const*, ...)+0xf7>
c0012740:	0f b6 c0             	movzx  eax,al
c0012743:	ff 24 85 a8 a7 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5858]
c001274a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001274e:	89 c8                	mov    eax,ecx
c0012750:	83 c1 04             	add    ecx,0x4
c0012753:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012757:	ff 30                	push   DWORD PTR [eax]
c0012759:	e8 69 ff ff ff       	call   c00126c7 <Dbg::logWriteInt(unsigned int)>
c001275e:	5f                   	pop    edi
c001275f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012763:	84 c0                	test   al,al
c0012765:	75 b8                	jne    c001271f <Dbg::kprintf(char const*, ...)+0x1c>
c0012767:	83 c4 0c             	add    esp,0xc
c001276a:	5b                   	pop    ebx
c001276b:	5e                   	pop    esi
c001276c:	5f                   	pop    edi
c001276d:	5d                   	pop    ebp
c001276e:	c3                   	ret    
c001276f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012773:	89 c8                	mov    eax,ecx
c0012775:	83 c1 04             	add    ecx,0x4
c0012778:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001277c:	ff 30                	push   DWORD PTR [eax]
c001277e:	e8 27 ff ff ff       	call   c00126aa <Dbg::logs(char*)>
c0012783:	58                   	pop    eax
c0012784:	eb d9                	jmp    c001275f <Dbg::kprintf(char const*, ...)+0x5c>
c0012786:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001278a:	89 d0                	mov    eax,edx
c001278c:	83 c2 04             	add    edx,0x4
c001278f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012793:	ff 30                	push   DWORD PTR [eax]
c0012795:	e8 2d ff ff ff       	call   c00126c7 <Dbg::logWriteInt(unsigned int)>
c001279a:	58                   	pop    eax
c001279b:	eb c2                	jmp    c001275f <Dbg::kprintf(char const*, ...)+0x5c>
c001279d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00127a1:	89 d0                	mov    eax,edx
c00127a3:	83 c2 04             	add    edx,0x4
c00127a6:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00127a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00127ad:	50                   	push   eax
c00127ae:	e8 e0 fe ff ff       	call   c0012693 <Dbg::logc(char)>
c00127b3:	58                   	pop    eax
c00127b4:	eb a9                	jmp    c001275f <Dbg::kprintf(char const*, ...)+0x5c>
c00127b6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00127ba:	89 c8                	mov    eax,ecx
c00127bc:	83 c1 04             	add    ecx,0x4
c00127bf:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00127c3:	6a 10                	push   0x10
c00127c5:	ff 30                	push   DWORD PTR [eax]
c00127c7:	e8 18 ff ff ff       	call   c00126e4 <Dbg::logWriteIntBase(unsigned int, int)>
c00127cc:	59                   	pop    ecx
c00127cd:	5f                   	pop    edi
c00127ce:	eb 8f                	jmp    c001275f <Dbg::kprintf(char const*, ...)+0x5c>
c00127d0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00127d4:	89 d0                	mov    eax,edx
c00127d6:	83 c2 08             	add    edx,0x8
c00127d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00127dd:	6a 10                	push   0x10
c00127df:	ff 30                	push   DWORD PTR [eax]
c00127e1:	e8 fe fe ff ff       	call   c00126e4 <Dbg::logWriteIntBase(unsigned int, int)>
c00127e6:	58                   	pop    eax
c00127e7:	5a                   	pop    edx
c00127e8:	e9 72 ff ff ff       	jmp    c001275f <Dbg::kprintf(char const*, ...)+0x5c>
c00127ed:	6a 25                	push   0x25
c00127ef:	e8 9f fe ff ff       	call   c0012693 <Dbg::logc(char)>
c00127f4:	58                   	pop    eax
c00127f5:	e9 65 ff ff ff       	jmp    c001275f <Dbg::kprintf(char const*, ...)+0x5c>
c00127fa:	6a 25                	push   0x25
c00127fc:	e8 92 fe ff ff       	call   c0012693 <Dbg::logc(char)>
c0012801:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012804:	50                   	push   eax
c0012805:	e8 89 fe ff ff       	call   c0012693 <Dbg::logc(char)>
c001280a:	5a                   	pop    edx
c001280b:	59                   	pop    ecx
c001280c:	e9 4e ff ff ff       	jmp    c001275f <Dbg::kprintf(char const*, ...)+0x5c>
c0012811:	50                   	push   eax
c0012812:	89 eb                	mov    ebx,ebp
c0012814:	e8 7a fe ff ff       	call   c0012693 <Dbg::logc(char)>
c0012819:	89 fd                	mov    ebp,edi
c001281b:	58                   	pop    eax
c001281c:	e9 3e ff ff ff       	jmp    c001275f <Dbg::kprintf(char const*, ...)+0x5c>
c0012821:	90                   	nop

c0012822 <File::read(unsigned long long, void*, int*)>:
c0012822:	53                   	push   ebx
c0012823:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012827:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001282b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012832:	3c 19                	cmp    al,0x19
c0012834:	77 35                	ja     c001286b <File::read(unsigned long long, void*, int*)+0x49>
c0012836:	8b 04 85 e0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2020]
c001283d:	85 c0                	test   eax,eax
c001283f:	74 2a                	je     c001286b <File::read(unsigned long long, void*, int*)+0x49>
c0012841:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012847:	85 c0                	test   eax,eax
c0012849:	74 20                	je     c001286b <File::read(unsigned long long, void*, int*)+0x49>
c001284b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001284f:	74 21                	je     c0012872 <File::read(unsigned long long, void*, int*)+0x50>
c0012851:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012853:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012857:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001285d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012861:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012865:	5b                   	pop    ebx
c0012866:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012869:	ff e0                	jmp    eax
c001286b:	b8 0b 00 00 00       	mov    eax,0xb
c0012870:	eb 05                	jmp    c0012877 <File::read(unsigned long long, void*, int*)+0x55>
c0012872:	b8 05 00 00 00       	mov    eax,0x5
c0012877:	5b                   	pop    ebx
c0012878:	c3                   	ret    
c0012879:	90                   	nop

c001287a <File::write(unsigned long long, void*, int*)>:
c001287a:	53                   	push   ebx
c001287b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001287f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012883:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001288a:	3c 19                	cmp    al,0x19
c001288c:	77 35                	ja     c00128c3 <File::write(unsigned long long, void*, int*)+0x49>
c001288e:	8b 04 85 e0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2020]
c0012895:	85 c0                	test   eax,eax
c0012897:	74 2a                	je     c00128c3 <File::write(unsigned long long, void*, int*)+0x49>
c0012899:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001289f:	85 c0                	test   eax,eax
c00128a1:	74 20                	je     c00128c3 <File::write(unsigned long long, void*, int*)+0x49>
c00128a3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128a7:	74 21                	je     c00128ca <File::write(unsigned long long, void*, int*)+0x50>
c00128a9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128ab:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128af:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128bd:	5b                   	pop    ebx
c00128be:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00128c1:	ff e0                	jmp    eax
c00128c3:	b8 0b 00 00 00       	mov    eax,0xb
c00128c8:	eb 05                	jmp    c00128cf <File::write(unsigned long long, void*, int*)+0x55>
c00128ca:	b8 05 00 00 00       	mov    eax,0x5
c00128cf:	5b                   	pop    ebx
c00128d0:	c3                   	ret    
c00128d1:	90                   	nop

c00128d2 <Directory::read(unsigned long long, void*, int*)>:
c00128d2:	53                   	push   ebx
c00128d3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128d7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128db:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00128e2:	3c 19                	cmp    al,0x19
c00128e4:	77 35                	ja     c001291b <Directory::read(unsigned long long, void*, int*)+0x49>
c00128e6:	8b 04 85 e0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2020]
c00128ed:	85 c0                	test   eax,eax
c00128ef:	74 2a                	je     c001291b <Directory::read(unsigned long long, void*, int*)+0x49>
c00128f1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128f7:	85 c0                	test   eax,eax
c00128f9:	74 20                	je     c001291b <Directory::read(unsigned long long, void*, int*)+0x49>
c00128fb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128ff:	74 21                	je     c0012922 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012901:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012903:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012907:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001290d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012911:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012915:	5b                   	pop    ebx
c0012916:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012919:	ff e0                	jmp    eax
c001291b:	b8 0b 00 00 00       	mov    eax,0xb
c0012920:	eb 05                	jmp    c0012927 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012922:	b8 05 00 00 00       	mov    eax,0x5
c0012927:	5b                   	pop    ebx
c0012928:	c3                   	ret    
c0012929:	90                   	nop

c001292a <Directory::write(unsigned long long, void*, int*)>:
c001292a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001292e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012935:	b8 0b 00 00 00       	mov    eax,0xb
c001293a:	80 fa 19             	cmp    dl,0x19
c001293d:	77 18                	ja     c0012957 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001293f:	8b 14 95 e0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2020]
c0012946:	85 d2                	test   edx,edx
c0012948:	74 0d                	je     c0012957 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001294a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012951:	19 c0                	sbb    eax,eax
c0012953:	83 e0 0a             	and    eax,0xa
c0012956:	40                   	inc    eax
c0012957:	c3                   	ret    

c0012958 <File::isAtty()>:
c0012958:	31 c0                	xor    eax,eax
c001295a:	c3                   	ret    
c001295b:	90                   	nop

c001295c <Directory::isAtty()>:
c001295c:	31 c0                	xor    eax,eax
c001295e:	c3                   	ret    
c001295f:	90                   	nop

c0012960 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012960:	b8 0a 00 00 00       	mov    eax,0xa
c0012965:	c3                   	ret    

c0012966 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012966:	b8 0a 00 00 00       	mov    eax,0xa
c001296b:	c3                   	ret    

c001296c <Filesystem::getFileFirstSector(char const*)>:
c001296c:	31 c0                	xor    eax,eax
c001296e:	31 d2                	xor    edx,edx
c0012970:	c3                   	ret    
c0012971:	90                   	nop

c0012972 <File::~File()>:
c0012972:	83 ec 0c             	sub    esp,0xc
c0012975:	ba 68 a9 02 c0       	mov    edx,0xc002a968
c001297a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001297e:	89 10                	mov    DWORD PTR [eax],edx
c0012980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012984:	83 ec 0c             	sub    esp,0xc
c0012987:	50                   	push   eax
c0012988:	e8 69 e6 ff ff       	call   c0010ff6 <UnixFile::~UnixFile()>
c001298d:	83 c4 10             	add    esp,0x10
c0012990:	90                   	nop
c0012991:	83 c4 0c             	add    esp,0xc
c0012994:	c3                   	ret    
c0012995:	90                   	nop

c0012996 <File::~File()>:
c0012996:	83 ec 0c             	sub    esp,0xc
c0012999:	83 ec 0c             	sub    esp,0xc
c001299c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129a0:	e8 cd ff ff ff       	call   c0012972 <File::~File()>
c00129a5:	83 c4 10             	add    esp,0x10
c00129a8:	83 ec 08             	sub    esp,0x8
c00129ab:	68 14 01 00 00       	push   0x114
c00129b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129b4:	e8 72 fc ff ff       	call   c001262b <operator delete(void*, unsigned long)>
c00129b9:	83 c4 10             	add    esp,0x10
c00129bc:	83 c4 0c             	add    esp,0xc
c00129bf:	c3                   	ret    

c00129c0 <Directory::~Directory()>:
c00129c0:	83 ec 0c             	sub    esp,0xc
c00129c3:	ba 84 a9 02 c0       	mov    edx,0xc002a984
c00129c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129cc:	89 10                	mov    DWORD PTR [eax],edx
c00129ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129d2:	83 ec 0c             	sub    esp,0xc
c00129d5:	50                   	push   eax
c00129d6:	e8 1b e6 ff ff       	call   c0010ff6 <UnixFile::~UnixFile()>
c00129db:	83 c4 10             	add    esp,0x10
c00129de:	90                   	nop
c00129df:	83 c4 0c             	add    esp,0xc
c00129e2:	c3                   	ret    
c00129e3:	90                   	nop

c00129e4 <Directory::~Directory()>:
c00129e4:	83 ec 0c             	sub    esp,0xc
c00129e7:	83 ec 0c             	sub    esp,0xc
c00129ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129ee:	e8 cd ff ff ff       	call   c00129c0 <Directory::~Directory()>
c00129f3:	83 c4 10             	add    esp,0x10
c00129f6:	83 ec 08             	sub    esp,0x8
c00129f9:	68 14 01 00 00       	push   0x114
c00129fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a02:	e8 24 fc ff ff       	call   c001262b <operator delete(void*, unsigned long)>
c0012a07:	83 c4 10             	add    esp,0x10
c0012a0a:	83 c4 0c             	add    esp,0xc
c0012a0d:	c3                   	ret    

c0012a0e <Filesystem::Filesystem()>:
c0012a0e:	ba 00 a9 02 c0       	mov    edx,0xc002a900
c0012a13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a17:	89 10                	mov    DWORD PTR [eax],edx
c0012a19:	8b 15 54 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db54
c0012a1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a23:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012a26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a2a:	a3 54 db 02 c0       	mov    ds:0xc002db54,eax
c0012a2f:	90                   	nop
c0012a30:	c3                   	ret    
c0012a31:	90                   	nop

c0012a32 <Filesystem::~Filesystem()>:
c0012a32:	ba 00 a9 02 c0       	mov    edx,0xc002a900
c0012a37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a3b:	89 10                	mov    DWORD PTR [eax],edx
c0012a3d:	90                   	nop
c0012a3e:	c3                   	ret    
c0012a3f:	90                   	nop

c0012a40 <Filesystem::~Filesystem()>:
c0012a40:	83 ec 0c             	sub    esp,0xc
c0012a43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012a47:	e8 e6 ff ff ff       	call   c0012a32 <Filesystem::~Filesystem()>
c0012a4c:	83 c4 04             	add    esp,0x4
c0012a4f:	83 ec 08             	sub    esp,0x8
c0012a52:	6a 08                	push   0x8
c0012a54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a58:	e8 ce fb ff ff       	call   c001262b <operator delete(void*, unsigned long)>
c0012a5d:	83 c4 10             	add    esp,0x10
c0012a60:	83 c4 0c             	add    esp,0xc
c0012a63:	c3                   	ret    

c0012a64 <Fs::getcwd(Process*, char*, int)>:
c0012a64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a68:	31 c0                	xor    eax,eax
c0012a6a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012a6d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012a71:	7d 15                	jge    c0012a88 <Fs::getcwd(Process*, char*, int)+0x24>
c0012a73:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a77:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012a7e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012a81:	84 c9                	test   cl,cl
c0012a83:	74 06                	je     c0012a8b <Fs::getcwd(Process*, char*, int)+0x27>
c0012a85:	40                   	inc    eax
c0012a86:	eb e2                	jmp    c0012a6a <Fs::getcwd(Process*, char*, int)+0x6>
c0012a88:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012a8b:	31 c0                	xor    eax,eax
c0012a8d:	c3                   	ret    

c0012a8e <Fs::initVFS()>:
c0012a8e:	83 ec 18             	sub    esp,0x18
c0012a91:	6a 08                	push   0x8
c0012a93:	e8 01 cb ff ff       	call   c000f599 <malloc>
c0012a98:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a9b:	e8 cc de 00 00       	call   c002096c <FAT::FAT()>
c0012aa0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012aa7:	e8 ed ca ff ff       	call   c000f599 <malloc>
c0012aac:	89 04 24             	mov    DWORD PTR [esp],eax
c0012aaf:	e8 c4 f0 00 00       	call   c0021b78 <ISO9660::ISO9660()>
c0012ab4:	83 c4 1c             	add    esp,0x1c
c0012ab7:	c3                   	ret    

c0012ab8 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012ab8:	55                   	push   ebp
c0012ab9:	57                   	push   edi
c0012aba:	56                   	push   esi
c0012abb:	53                   	push   ebx
c0012abc:	81 ec 10 04 00 00    	sub    esp,0x410
c0012ac2:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012ac9:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012ad0:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012ad7:	68 00 04 00 00       	push   0x400
c0012adc:	6a 00                	push   0x0
c0012ade:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012ae2:	56                   	push   esi
c0012ae3:	e8 68 dc fe ff       	call   c0000750 <memset>
c0012ae8:	83 c4 10             	add    esp,0x10
c0012aeb:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012aef:	75 0b                	jne    c0012afc <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012af1:	50                   	push   eax
c0012af2:	50                   	push   eax
c0012af3:	57                   	push   edi
c0012af4:	56                   	push   esi
c0012af5:	e8 12 dd fe ff       	call   c000080c <strcpy>
c0012afa:	eb 41                	jmp    c0012b3d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012afc:	8a 07                	mov    al,BYTE PTR [edi]
c0012afe:	3c 5c                	cmp    al,0x5c
c0012b00:	74 04                	je     c0012b06 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012b02:	3c 2f                	cmp    al,0x2f
c0012b04:	75 18                	jne    c0012b1e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012b06:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012b09:	3c 60                	cmp    al,0x60
c0012b0b:	7e 03                	jle    c0012b10 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012b0d:	83 e8 20             	sub    eax,0x20
c0012b10:	88 04 24             	mov    BYTE PTR [esp],al
c0012b13:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012b1a:	50                   	push   eax
c0012b1b:	50                   	push   eax
c0012b1c:	eb 18                	jmp    c0012b36 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012b1e:	50                   	push   eax
c0012b1f:	50                   	push   eax
c0012b20:	55                   	push   ebp
c0012b21:	56                   	push   esi
c0012b22:	e8 e5 dc fe ff       	call   c000080c <strcpy>
c0012b27:	5a                   	pop    edx
c0012b28:	59                   	pop    ecx
c0012b29:	68 ea bb 02 c0       	push   0xc002bbea
c0012b2e:	56                   	push   esi
c0012b2f:	e8 18 de fe ff       	call   c000094c <strcat>
c0012b34:	5d                   	pop    ebp
c0012b35:	58                   	pop    eax
c0012b36:	57                   	push   edi
c0012b37:	56                   	push   esi
c0012b38:	e8 0f de fe ff       	call   c000094c <strcat>
c0012b3d:	83 c4 10             	add    esp,0x10
c0012b40:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012b43:	3c 60                	cmp    al,0x60
c0012b45:	7e 03                	jle    c0012b4a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012b47:	83 e8 20             	sub    eax,0x20
c0012b4a:	88 04 24             	mov    BYTE PTR [esp],al
c0012b4d:	88 03                	mov    BYTE PTR [ebx],al
c0012b4f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012b56:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012b5c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012b60:	bf 03 00 00 00       	mov    edi,0x3
c0012b65:	b8 03 00 00 00       	mov    eax,0x3
c0012b6a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012b6d:	84 d2                	test   dl,dl
c0012b6f:	0f 84 91 00 00 00    	je     c0012c06 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012b75:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012b78:	80 fa 5c             	cmp    dl,0x5c
c0012b7b:	74 05                	je     c0012b82 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012b7d:	80 fa 2f             	cmp    dl,0x2f
c0012b80:	75 12                	jne    c0012b94 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012b82:	89 c5                	mov    ebp,eax
c0012b84:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012b89:	74 09                	je     c0012b94 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012b8b:	40                   	inc    eax
c0012b8c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012b90:	89 cf                	mov    edi,ecx
c0012b92:	eb d6                	jmp    c0012b6a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012b94:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012b99:	75 5b                	jne    c0012bf6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b9b:	80 fa 2e             	cmp    dl,0x2e
c0012b9e:	75 56                	jne    c0012bf6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012ba0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012ba4:	74 19                	je     c0012bbf <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012ba6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012bab:	74 53                	je     c0012c00 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012bad:	89 f9                	mov    ecx,edi
c0012baf:	41                   	inc    ecx
c0012bb0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012bb3:	80 fa 2f             	cmp    dl,0x2f
c0012bb6:	74 f7                	je     c0012baf <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012bb8:	80 fa 5c             	cmp    dl,0x5c
c0012bbb:	74 f2                	je     c0012baf <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012bbd:	eb d1                	jmp    c0012b90 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bbf:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012bc4:	74 3a                	je     c0012c00 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012bc6:	83 f8 03             	cmp    eax,0x3
c0012bc9:	74 c5                	je     c0012b90 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bcb:	41                   	inc    ecx
c0012bcc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012bcf:	80 fa 2f             	cmp    dl,0x2f
c0012bd2:	74 f7                	je     c0012bcb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012bd4:	80 fa 5c             	cmp    dl,0x5c
c0012bd7:	74 f2                	je     c0012bcb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012bd9:	48                   	dec    eax
c0012bda:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012bde:	75 06                	jne    c0012be6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012be0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012be4:	eb f3                	jmp    c0012bd9 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012be6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012bea:	74 07                	je     c0012bf3 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012bec:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012bf0:	48                   	dec    eax
c0012bf1:	eb f3                	jmp    c0012be6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012bf3:	40                   	inc    eax
c0012bf4:	eb 9a                	jmp    c0012b90 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bf6:	80 fa 2f             	cmp    dl,0x2f
c0012bf9:	74 95                	je     c0012b90 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bfb:	80 fa 5c             	cmp    dl,0x5c
c0012bfe:	74 90                	je     c0012b90 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c00:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012c03:	40                   	inc    eax
c0012c04:	eb 8a                	jmp    c0012b90 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c06:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c0a:	83 ec 0c             	sub    esp,0xc
c0012c0d:	53                   	push   ebx
c0012c0e:	e8 59 db fe ff       	call   c000076c <strlen>
c0012c13:	83 c4 10             	add    esp,0x10
c0012c16:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012c1b:	75 26                	jne    c0012c43 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012c1d:	83 ec 0c             	sub    esp,0xc
c0012c20:	53                   	push   ebx
c0012c21:	e8 46 db fe ff       	call   c000076c <strlen>
c0012c26:	83 c4 10             	add    esp,0x10
c0012c29:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012c2e:	74 26                	je     c0012c56 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012c30:	83 ec 0c             	sub    esp,0xc
c0012c33:	53                   	push   ebx
c0012c34:	e8 33 db fe ff       	call   c000076c <strlen>
c0012c39:	83 c4 10             	add    esp,0x10
c0012c3c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012c41:	eb c7                	jmp    c0012c0a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012c43:	83 ec 0c             	sub    esp,0xc
c0012c46:	53                   	push   ebx
c0012c47:	e8 20 db fe ff       	call   c000076c <strlen>
c0012c4c:	83 c4 10             	add    esp,0x10
c0012c4f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012c54:	74 c7                	je     c0012c1d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012c56:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012c5c:	5b                   	pop    ebx
c0012c5d:	5e                   	pop    esi
c0012c5e:	5f                   	pop    edi
c0012c5f:	5d                   	pop    ebp
c0012c60:	c3                   	ret    
c0012c61:	90                   	nop

c0012c62 <File::File(char const*, Process*)>:
c0012c62:	83 ec 0c             	sub    esp,0xc
c0012c65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c69:	83 ec 08             	sub    esp,0x8
c0012c6c:	6a 00                	push   0x0
c0012c6e:	50                   	push   eax
c0012c6f:	e8 a0 e1 ff ff       	call   c0010e14 <UnixFile::UnixFile(int)>
c0012c74:	83 c4 10             	add    esp,0x10
c0012c77:	ba 68 a9 02 c0       	mov    edx,0xc002a968
c0012c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c80:	89 10                	mov    DWORD PTR [eax],edx
c0012c82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c86:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c90:	83 c0 0d             	add    eax,0xd
c0012c93:	83 ec 04             	sub    esp,0x4
c0012c96:	52                   	push   edx
c0012c97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c9b:	50                   	push   eax
c0012c9c:	e8 17 fe ff ff       	call   c0012ab8 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012ca1:	83 c4 10             	add    esp,0x10
c0012ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ca8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012cab:	8d 50 bf             	lea    edx,[eax-0x41]
c0012cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cb2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cbc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012cc0:	90                   	nop
c0012cc1:	83 c4 0c             	add    esp,0xc
c0012cc4:	c3                   	ret    
c0012cc5:	90                   	nop

c0012cc6 <File::open(FileOpenMode)>:
c0012cc6:	53                   	push   ebx
c0012cc7:	b8 0b 00 00 00       	mov    eax,0xb
c0012ccc:	83 ec 08             	sub    esp,0x8
c0012ccf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012cd3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012cda:	80 fa 19             	cmp    dl,0x19
c0012cdd:	77 40                	ja     c0012d1f <File::open(FileOpenMode)+0x59>
c0012cdf:	8b 14 95 e0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2020]
c0012ce6:	85 d2                	test   edx,edx
c0012ce8:	74 35                	je     c0012d1f <File::open(FileOpenMode)+0x59>
c0012cea:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cf0:	85 d2                	test   edx,edx
c0012cf2:	74 2b                	je     c0012d1f <File::open(FileOpenMode)+0x59>
c0012cf4:	b8 06 00 00 00       	mov    eax,0x6
c0012cf9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012cfd:	75 20                	jne    c0012d1f <File::open(FileOpenMode)+0x59>
c0012cff:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d01:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d0b:	51                   	push   ecx
c0012d0c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012d0f:	51                   	push   ecx
c0012d10:	52                   	push   edx
c0012d11:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012d14:	83 c4 10             	add    esp,0x10
c0012d17:	85 c0                	test   eax,eax
c0012d19:	75 04                	jne    c0012d1f <File::open(FileOpenMode)+0x59>
c0012d1b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012d1f:	83 c4 08             	add    esp,0x8
c0012d22:	5b                   	pop    ebx
c0012d23:	c3                   	ret    

c0012d24 <File::close()>:
c0012d24:	53                   	push   ebx
c0012d25:	b8 0b 00 00 00       	mov    eax,0xb
c0012d2a:	83 ec 08             	sub    esp,0x8
c0012d2d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d31:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d38:	80 fa 19             	cmp    dl,0x19
c0012d3b:	77 41                	ja     c0012d7e <File::close()+0x5a>
c0012d3d:	8b 1c 95 e0 df 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2020]
c0012d44:	85 db                	test   ebx,ebx
c0012d46:	74 36                	je     c0012d7e <File::close()+0x5a>
c0012d48:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d4f:	74 2d                	je     c0012d7e <File::close()+0x5a>
c0012d51:	b8 05 00 00 00       	mov    eax,0x5
c0012d56:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d5a:	74 22                	je     c0012d7e <File::close()+0x5a>
c0012d5c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d60:	8b 04 95 e0 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2020]
c0012d67:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d6d:	53                   	push   ebx
c0012d6e:	53                   	push   ebx
c0012d6f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d71:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d77:	50                   	push   eax
c0012d78:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012d7b:	83 c4 10             	add    esp,0x10
c0012d7e:	83 c4 08             	add    esp,0x8
c0012d81:	5b                   	pop    ebx
c0012d82:	c3                   	ret    
c0012d83:	90                   	nop

c0012d84 <File::seek(unsigned long long)>:
c0012d84:	56                   	push   esi
c0012d85:	53                   	push   ebx
c0012d86:	b8 0b 00 00 00       	mov    eax,0xb
c0012d8b:	51                   	push   ecx
c0012d8c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012d90:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012d94:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012d9b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d9f:	80 fa 19             	cmp    dl,0x19
c0012da2:	77 31                	ja     c0012dd5 <File::seek(unsigned long long)+0x51>
c0012da4:	8b 14 95 e0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2020]
c0012dab:	85 d2                	test   edx,edx
c0012dad:	74 26                	je     c0012dd5 <File::seek(unsigned long long)+0x51>
c0012daf:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012db5:	85 d2                	test   edx,edx
c0012db7:	74 1c                	je     c0012dd5 <File::seek(unsigned long long)+0x51>
c0012db9:	b8 05 00 00 00       	mov    eax,0x5
c0012dbe:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012dc2:	74 11                	je     c0012dd5 <File::seek(unsigned long long)+0x51>
c0012dc4:	8b 02                	mov    eax,DWORD PTR [edx]
c0012dc6:	53                   	push   ebx
c0012dc7:	51                   	push   ecx
c0012dc8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012dce:	52                   	push   edx
c0012dcf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012dd2:	83 c4 10             	add    esp,0x10
c0012dd5:	5a                   	pop    edx
c0012dd6:	5b                   	pop    ebx
c0012dd7:	5e                   	pop    esi
c0012dd8:	c3                   	ret    
c0012dd9:	90                   	nop

c0012dda <File::tell(unsigned long long*)>:
c0012dda:	83 ec 0c             	sub    esp,0xc
c0012ddd:	b8 0b 00 00 00       	mov    eax,0xb
c0012de2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012de6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012ded:	80 fa 19             	cmp    dl,0x19
c0012df0:	77 34                	ja     c0012e26 <File::tell(unsigned long long*)+0x4c>
c0012df2:	8b 14 95 e0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2020]
c0012df9:	85 d2                	test   edx,edx
c0012dfb:	74 29                	je     c0012e26 <File::tell(unsigned long long*)+0x4c>
c0012dfd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e03:	85 d2                	test   edx,edx
c0012e05:	74 1f                	je     c0012e26 <File::tell(unsigned long long*)+0x4c>
c0012e07:	b8 05 00 00 00       	mov    eax,0x5
c0012e0c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012e10:	74 14                	je     c0012e26 <File::tell(unsigned long long*)+0x4c>
c0012e12:	50                   	push   eax
c0012e13:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e19:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012e1f:	52                   	push   edx
c0012e20:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012e23:	83 c4 10             	add    esp,0x10
c0012e26:	83 c4 0c             	add    esp,0xc
c0012e29:	c3                   	ret    

c0012e2a <File::rewind()>:
c0012e2a:	83 ec 10             	sub    esp,0x10
c0012e2d:	6a 00                	push   0x0
c0012e2f:	6a 00                	push   0x0
c0012e31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e35:	e8 4a ff ff ff       	call   c0012d84 <File::seek(unsigned long long)>
c0012e3a:	83 c4 1c             	add    esp,0x1c
c0012e3d:	c3                   	ret    

c0012e3e <File::unlink()>:
c0012e3e:	83 ec 0c             	sub    esp,0xc
c0012e41:	b8 0b 00 00 00       	mov    eax,0xb
c0012e46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e4a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e51:	80 f9 19             	cmp    cl,0x19
c0012e54:	77 2f                	ja     c0012e85 <File::unlink()+0x47>
c0012e56:	8b 0c 8d e0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2020]
c0012e5d:	85 c9                	test   ecx,ecx
c0012e5f:	74 24                	je     c0012e85 <File::unlink()+0x47>
c0012e61:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e67:	85 c9                	test   ecx,ecx
c0012e69:	74 1a                	je     c0012e85 <File::unlink()+0x47>
c0012e6b:	b8 06 00 00 00       	mov    eax,0x6
c0012e70:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e74:	75 0f                	jne    c0012e85 <File::unlink()+0x47>
c0012e76:	83 c2 0d             	add    edx,0xd
c0012e79:	50                   	push   eax
c0012e7a:	50                   	push   eax
c0012e7b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e7d:	52                   	push   edx
c0012e7e:	51                   	push   ecx
c0012e7f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012e82:	83 c4 10             	add    esp,0x10
c0012e85:	83 c4 0c             	add    esp,0xc
c0012e88:	c3                   	ret    
c0012e89:	90                   	nop

c0012e8a <File::rename(char const*)>:
c0012e8a:	83 ec 0c             	sub    esp,0xc
c0012e8d:	b8 0b 00 00 00       	mov    eax,0xb
c0012e92:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e96:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e9d:	80 f9 19             	cmp    cl,0x19
c0012ea0:	77 32                	ja     c0012ed4 <File::rename(char const*)+0x4a>
c0012ea2:	8b 0c 8d e0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2020]
c0012ea9:	85 c9                	test   ecx,ecx
c0012eab:	74 27                	je     c0012ed4 <File::rename(char const*)+0x4a>
c0012ead:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012eb3:	85 c9                	test   ecx,ecx
c0012eb5:	74 1d                	je     c0012ed4 <File::rename(char const*)+0x4a>
c0012eb7:	b8 06 00 00 00       	mov    eax,0x6
c0012ebc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ec0:	75 12                	jne    c0012ed4 <File::rename(char const*)+0x4a>
c0012ec2:	83 c2 0d             	add    edx,0xd
c0012ec5:	50                   	push   eax
c0012ec6:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ec8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ecc:	52                   	push   edx
c0012ecd:	51                   	push   ecx
c0012ece:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012ed1:	83 c4 10             	add    esp,0x10
c0012ed4:	83 c4 0c             	add    esp,0xc
c0012ed7:	c3                   	ret    

c0012ed8 <File::chfatattr(unsigned char, unsigned char)>:
c0012ed8:	57                   	push   edi
c0012ed9:	b8 0b 00 00 00       	mov    eax,0xb
c0012ede:	56                   	push   esi
c0012edf:	53                   	push   ebx
c0012ee0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ee4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012ee8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012eef:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012ef3:	80 f9 19             	cmp    cl,0x19
c0012ef6:	77 37                	ja     c0012f2f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ef8:	8b 0c 8d e0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2020]
c0012eff:	85 c9                	test   ecx,ecx
c0012f01:	74 2c                	je     c0012f2f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f03:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f09:	85 c9                	test   ecx,ecx
c0012f0b:	74 22                	je     c0012f2f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f0d:	b8 06 00 00 00       	mov    eax,0x6
c0012f12:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f16:	75 17                	jne    c0012f2f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f18:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012f1a:	89 f0                	mov    eax,esi
c0012f1c:	83 c2 0d             	add    edx,0xd
c0012f1f:	0f b6 f0             	movzx  esi,al
c0012f22:	0f b6 db             	movzx  ebx,bl
c0012f25:	56                   	push   esi
c0012f26:	53                   	push   ebx
c0012f27:	52                   	push   edx
c0012f28:	51                   	push   ecx
c0012f29:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012f2c:	83 c4 10             	add    esp,0x10
c0012f2f:	5b                   	pop    ebx
c0012f30:	5e                   	pop    esi
c0012f31:	5f                   	pop    edi
c0012f32:	c3                   	ret    
c0012f33:	90                   	nop

c0012f34 <File::exists()>:
c0012f34:	83 ec 0c             	sub    esp,0xc
c0012f37:	31 c0                	xor    eax,eax
c0012f39:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f3d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f44:	80 f9 19             	cmp    cl,0x19
c0012f47:	77 24                	ja     c0012f6d <File::exists()+0x39>
c0012f49:	8b 0c 8d e0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2020]
c0012f50:	85 c9                	test   ecx,ecx
c0012f52:	74 19                	je     c0012f6d <File::exists()+0x39>
c0012f54:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f5a:	85 c9                	test   ecx,ecx
c0012f5c:	74 0f                	je     c0012f6d <File::exists()+0x39>
c0012f5e:	83 c2 0d             	add    edx,0xd
c0012f61:	50                   	push   eax
c0012f62:	50                   	push   eax
c0012f63:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f65:	52                   	push   edx
c0012f66:	51                   	push   ecx
c0012f67:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012f6a:	83 c4 10             	add    esp,0x10
c0012f6d:	83 c4 0c             	add    esp,0xc
c0012f70:	c3                   	ret    
c0012f71:	90                   	nop

c0012f72 <File::stat(unsigned long long*, bool*)>:
c0012f72:	56                   	push   esi
c0012f73:	53                   	push   ebx
c0012f74:	50                   	push   eax
c0012f75:	b8 0b 00 00 00       	mov    eax,0xb
c0012f7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f7e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012f82:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f89:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f8d:	80 f9 19             	cmp    cl,0x19
c0012f90:	77 3d                	ja     c0012fcf <File::stat(unsigned long long*, bool*)+0x5d>
c0012f92:	8b 0c 8d e0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2020]
c0012f99:	85 c9                	test   ecx,ecx
c0012f9b:	74 32                	je     c0012fcf <File::stat(unsigned long long*, bool*)+0x5d>
c0012f9d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fa3:	85 c9                	test   ecx,ecx
c0012fa5:	74 28                	je     c0012fcf <File::stat(unsigned long long*, bool*)+0x5d>
c0012fa7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fa9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fad:	74 13                	je     c0012fc2 <File::stat(unsigned long long*, bool*)+0x50>
c0012faf:	83 ec 04             	sub    esp,0x4
c0012fb2:	56                   	push   esi
c0012fb3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012fb9:	51                   	push   ecx
c0012fba:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012fbd:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012fc0:	eb 0a                	jmp    c0012fcc <File::stat(unsigned long long*, bool*)+0x5a>
c0012fc2:	53                   	push   ebx
c0012fc3:	83 c2 0d             	add    edx,0xd
c0012fc6:	56                   	push   esi
c0012fc7:	52                   	push   edx
c0012fc8:	51                   	push   ecx
c0012fc9:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012fcc:	83 c4 10             	add    esp,0x10
c0012fcf:	5a                   	pop    edx
c0012fd0:	5b                   	pop    ebx
c0012fd1:	5e                   	pop    esi
c0012fd2:	c3                   	ret    

c0012fd3 <Fs::setcwd(Process*, char*)>:
c0012fd3:	55                   	push   ebp
c0012fd4:	57                   	push   edi
c0012fd5:	56                   	push   esi
c0012fd6:	53                   	push   ebx
c0012fd7:	81 ec 20 02 00 00    	sub    esp,0x220
c0012fdd:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012fe4:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012fea:	57                   	push   edi
c0012feb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012ff2:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012ff6:	56                   	push   esi
c0012ff7:	e8 bc fa ff ff       	call   c0012ab8 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012ffc:	89 34 24             	mov    DWORD PTR [esp],esi
c0012fff:	e8 68 d7 fe ff       	call   c000076c <strlen>
c0013004:	83 c4 10             	add    esp,0x10
c0013007:	83 f8 02             	cmp    eax,0x2
c001300a:	77 17                	ja     c0013023 <Fs::setcwd(Process*, char*)+0x50>
c001300c:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013011:	83 e8 41             	sub    eax,0x41
c0013014:	83 f8 19             	cmp    eax,0x19
c0013017:	76 24                	jbe    c001303d <Fs::setcwd(Process*, char*)+0x6a>
c0013019:	b8 03 00 00 00       	mov    eax,0x3
c001301e:	e9 e0 00 00 00       	jmp    c0013103 <Fs::setcwd(Process*, char*)+0x130>
c0013023:	83 ec 0c             	sub    esp,0xc
c0013026:	56                   	push   esi
c0013027:	e8 40 d7 fe ff       	call   c000076c <strlen>
c001302c:	83 c4 10             	add    esp,0x10
c001302f:	83 f8 03             	cmp    eax,0x3
c0013032:	75 34                	jne    c0013068 <Fs::setcwd(Process*, char*)+0x95>
c0013034:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013039:	75 2d                	jne    c0013068 <Fs::setcwd(Process*, char*)+0x95>
c001303b:	eb cf                	jmp    c001300c <Fs::setcwd(Process*, char*)+0x39>
c001303d:	8b 14 85 e0 df 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2020]
c0013044:	b8 05 00 00 00       	mov    eax,0x5
c0013049:	85 d2                	test   edx,edx
c001304b:	0f 84 b2 00 00 00    	je     c0013103 <Fs::setcwd(Process*, char*)+0x130>
c0013051:	b8 06 00 00 00       	mov    eax,0x6
c0013056:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001305d:	0f 85 92 00 00 00    	jne    c00130f5 <Fs::setcwd(Process*, char*)+0x122>
c0013063:	e9 9b 00 00 00       	jmp    c0013103 <Fs::setcwd(Process*, char*)+0x130>
c0013068:	83 ec 0c             	sub    esp,0xc
c001306b:	68 14 01 00 00       	push   0x114
c0013070:	e8 24 c5 ff ff       	call   c000f599 <malloc>
c0013075:	83 c4 0c             	add    esp,0xc
c0013078:	89 c3                	mov    ebx,eax
c001307a:	55                   	push   ebp
c001307b:	56                   	push   esi
c001307c:	50                   	push   eax
c001307d:	e8 e0 fb ff ff       	call   c0012c62 <File::File(char const*, Process*)>
c0013082:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013087:	83 c4 0c             	add    esp,0xc
c001308a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001308e:	50                   	push   eax
c001308f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013093:	50                   	push   eax
c0013094:	53                   	push   ebx
c0013095:	e8 d8 fe ff ff       	call   c0012f72 <File::stat(unsigned long long*, bool*)>
c001309a:	83 c4 10             	add    esp,0x10
c001309d:	83 f8 02             	cmp    eax,0x2
c00130a0:	74 04                	je     c00130a6 <Fs::setcwd(Process*, char*)+0xd3>
c00130a2:	85 c0                	test   eax,eax
c00130a4:	74 1c                	je     c00130c2 <Fs::setcwd(Process*, char*)+0xef>
c00130a6:	b8 01 00 00 00       	mov    eax,0x1
c00130ab:	85 db                	test   ebx,ebx
c00130ad:	74 54                	je     c0013103 <Fs::setcwd(Process*, char*)+0x130>
c00130af:	83 ec 0c             	sub    esp,0xc
c00130b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130b4:	53                   	push   ebx
c00130b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130b8:	83 c4 10             	add    esp,0x10
c00130bb:	b8 01 00 00 00       	mov    eax,0x1
c00130c0:	eb 41                	jmp    c0013103 <Fs::setcwd(Process*, char*)+0x130>
c00130c2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00130c7:	75 1c                	jne    c00130e5 <Fs::setcwd(Process*, char*)+0x112>
c00130c9:	b8 02 00 00 00       	mov    eax,0x2
c00130ce:	85 db                	test   ebx,ebx
c00130d0:	74 31                	je     c0013103 <Fs::setcwd(Process*, char*)+0x130>
c00130d2:	83 ec 0c             	sub    esp,0xc
c00130d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130d7:	53                   	push   ebx
c00130d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130db:	83 c4 10             	add    esp,0x10
c00130de:	b8 02 00 00 00       	mov    eax,0x2
c00130e3:	eb 1e                	jmp    c0013103 <Fs::setcwd(Process*, char*)+0x130>
c00130e5:	85 db                	test   ebx,ebx
c00130e7:	74 0c                	je     c00130f5 <Fs::setcwd(Process*, char*)+0x122>
c00130e9:	83 ec 0c             	sub    esp,0xc
c00130ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130ee:	53                   	push   ebx
c00130ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130f2:	83 c4 10             	add    esp,0x10
c00130f5:	50                   	push   eax
c00130f6:	50                   	push   eax
c00130f7:	56                   	push   esi
c00130f8:	57                   	push   edi
c00130f9:	e8 0e d7 fe ff       	call   c000080c <strcpy>
c00130fe:	83 c4 10             	add    esp,0x10
c0013101:	31 c0                	xor    eax,eax
c0013103:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013109:	5b                   	pop    ebx
c001310a:	5e                   	pop    esi
c001310b:	5f                   	pop    edi
c001310c:	5d                   	pop    ebp
c001310d:	c3                   	ret    

c001310e <Directory::Directory(char const*, Process*)>:
c001310e:	83 ec 0c             	sub    esp,0xc
c0013111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013115:	83 ec 08             	sub    esp,0x8
c0013118:	6a 00                	push   0x0
c001311a:	50                   	push   eax
c001311b:	e8 f4 dc ff ff       	call   c0010e14 <UnixFile::UnixFile(int)>
c0013120:	83 c4 10             	add    esp,0x10
c0013123:	ba 84 a9 02 c0       	mov    edx,0xc002a984
c0013128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001312c:	89 10                	mov    DWORD PTR [eax],edx
c001312e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013132:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001313c:	83 c0 0d             	add    eax,0xd
c001313f:	83 ec 04             	sub    esp,0x4
c0013142:	52                   	push   edx
c0013143:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013147:	50                   	push   eax
c0013148:	e8 6b f9 ff ff       	call   c0012ab8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001314d:	83 c4 10             	add    esp,0x10
c0013150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013154:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013157:	8d 50 bf             	lea    edx,[eax-0x41]
c001315a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001315e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013168:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001316c:	90                   	nop
c001316d:	83 c4 0c             	add    esp,0xc
c0013170:	c3                   	ret    
c0013171:	90                   	nop

c0013172 <Directory::open()>:
c0013172:	53                   	push   ebx
c0013173:	b8 0b 00 00 00       	mov    eax,0xb
c0013178:	83 ec 08             	sub    esp,0x8
c001317b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001317f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013186:	80 fa 19             	cmp    dl,0x19
c0013189:	77 3d                	ja     c00131c8 <Directory::open()+0x56>
c001318b:	8b 14 95 e0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2020]
c0013192:	85 d2                	test   edx,edx
c0013194:	74 32                	je     c00131c8 <Directory::open()+0x56>
c0013196:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001319c:	85 d2                	test   edx,edx
c001319e:	74 28                	je     c00131c8 <Directory::open()+0x56>
c00131a0:	b8 06 00 00 00       	mov    eax,0x6
c00131a5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00131a9:	75 1d                	jne    c00131c8 <Directory::open()+0x56>
c00131ab:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00131b1:	50                   	push   eax
c00131b2:	8b 02                	mov    eax,DWORD PTR [edx]
c00131b4:	51                   	push   ecx
c00131b5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00131b8:	51                   	push   ecx
c00131b9:	52                   	push   edx
c00131ba:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00131bd:	83 c4 10             	add    esp,0x10
c00131c0:	85 c0                	test   eax,eax
c00131c2:	75 04                	jne    c00131c8 <Directory::open()+0x56>
c00131c4:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00131c8:	83 c4 08             	add    esp,0x8
c00131cb:	5b                   	pop    ebx
c00131cc:	c3                   	ret    
c00131cd:	90                   	nop

c00131ce <Directory::close()>:
c00131ce:	53                   	push   ebx
c00131cf:	b8 0b 00 00 00       	mov    eax,0xb
c00131d4:	83 ec 08             	sub    esp,0x8
c00131d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00131db:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00131e2:	80 fa 19             	cmp    dl,0x19
c00131e5:	77 41                	ja     c0013228 <Directory::close()+0x5a>
c00131e7:	8b 1c 95 e0 df 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2020]
c00131ee:	85 db                	test   ebx,ebx
c00131f0:	74 36                	je     c0013228 <Directory::close()+0x5a>
c00131f2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00131f9:	74 2d                	je     c0013228 <Directory::close()+0x5a>
c00131fb:	b8 05 00 00 00       	mov    eax,0x5
c0013200:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013204:	74 22                	je     c0013228 <Directory::close()+0x5a>
c0013206:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001320a:	8b 04 95 e0 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2020]
c0013211:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013217:	53                   	push   ebx
c0013218:	53                   	push   ebx
c0013219:	8b 10                	mov    edx,DWORD PTR [eax]
c001321b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013221:	50                   	push   eax
c0013222:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013225:	83 c4 10             	add    esp,0x10
c0013228:	83 c4 08             	add    esp,0x8
c001322b:	5b                   	pop    ebx
c001322c:	c3                   	ret    
c001322d:	90                   	nop

c001322e <Directory::unlink()>:
c001322e:	83 ec 0c             	sub    esp,0xc
c0013231:	b8 0b 00 00 00       	mov    eax,0xb
c0013236:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001323a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013241:	80 f9 19             	cmp    cl,0x19
c0013244:	77 2f                	ja     c0013275 <Directory::unlink()+0x47>
c0013246:	8b 0c 8d e0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2020]
c001324d:	85 c9                	test   ecx,ecx
c001324f:	74 24                	je     c0013275 <Directory::unlink()+0x47>
c0013251:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013257:	85 c9                	test   ecx,ecx
c0013259:	74 1a                	je     c0013275 <Directory::unlink()+0x47>
c001325b:	b8 06 00 00 00       	mov    eax,0x6
c0013260:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013264:	75 0f                	jne    c0013275 <Directory::unlink()+0x47>
c0013266:	83 c2 0d             	add    edx,0xd
c0013269:	50                   	push   eax
c001326a:	50                   	push   eax
c001326b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001326d:	52                   	push   edx
c001326e:	51                   	push   ecx
c001326f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013272:	83 c4 10             	add    esp,0x10
c0013275:	83 c4 0c             	add    esp,0xc
c0013278:	c3                   	ret    
c0013279:	90                   	nop

c001327a <Directory::rename(char const*)>:
c001327a:	83 ec 0c             	sub    esp,0xc
c001327d:	b8 0b 00 00 00       	mov    eax,0xb
c0013282:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013286:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001328d:	80 f9 19             	cmp    cl,0x19
c0013290:	77 32                	ja     c00132c4 <Directory::rename(char const*)+0x4a>
c0013292:	8b 0c 8d e0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2020]
c0013299:	85 c9                	test   ecx,ecx
c001329b:	74 27                	je     c00132c4 <Directory::rename(char const*)+0x4a>
c001329d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132a3:	85 c9                	test   ecx,ecx
c00132a5:	74 1d                	je     c00132c4 <Directory::rename(char const*)+0x4a>
c00132a7:	b8 06 00 00 00       	mov    eax,0x6
c00132ac:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132b0:	75 12                	jne    c00132c4 <Directory::rename(char const*)+0x4a>
c00132b2:	83 c2 0d             	add    edx,0xd
c00132b5:	50                   	push   eax
c00132b6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00132bc:	52                   	push   edx
c00132bd:	51                   	push   ecx
c00132be:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00132c1:	83 c4 10             	add    esp,0x10
c00132c4:	83 c4 0c             	add    esp,0xc
c00132c7:	c3                   	ret    

c00132c8 <Directory::exists()>:
c00132c8:	83 ec 0c             	sub    esp,0xc
c00132cb:	31 c0                	xor    eax,eax
c00132cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132d1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132d8:	80 f9 19             	cmp    cl,0x19
c00132db:	77 24                	ja     c0013301 <Directory::exists()+0x39>
c00132dd:	8b 0c 8d e0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2020]
c00132e4:	85 c9                	test   ecx,ecx
c00132e6:	74 19                	je     c0013301 <Directory::exists()+0x39>
c00132e8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132ee:	85 c9                	test   ecx,ecx
c00132f0:	74 0f                	je     c0013301 <Directory::exists()+0x39>
c00132f2:	83 c2 0d             	add    edx,0xd
c00132f5:	50                   	push   eax
c00132f6:	50                   	push   eax
c00132f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132f9:	52                   	push   edx
c00132fa:	51                   	push   ecx
c00132fb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00132fe:	83 c4 10             	add    esp,0x10
c0013301:	83 c4 0c             	add    esp,0xc
c0013304:	c3                   	ret    
c0013305:	90                   	nop

c0013306 <Directory::read(dirent*)>:
c0013306:	83 ec 1c             	sub    esp,0x1c
c0013309:	b8 0b 00 00 00       	mov    eax,0xb
c001330e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013312:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013319:	80 fa 19             	cmp    dl,0x19
c001331c:	77 30                	ja     c001334e <Directory::read(dirent*)+0x48>
c001331e:	8b 14 95 e0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2020]
c0013325:	85 d2                	test   edx,edx
c0013327:	74 25                	je     c001334e <Directory::read(dirent*)+0x48>
c0013329:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013330:	74 1c                	je     c001334e <Directory::read(dirent*)+0x48>
c0013332:	83 ec 0c             	sub    esp,0xc
c0013335:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013337:	8d 54 24 18          	lea    edx,[esp+0x18]
c001333b:	52                   	push   edx
c001333c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013340:	6a 00                	push   0x0
c0013342:	68 10 01 00 00       	push   0x110
c0013347:	51                   	push   ecx
c0013348:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001334b:	83 c4 20             	add    esp,0x20
c001334e:	83 c4 1c             	add    esp,0x1c
c0013351:	c3                   	ret    

c0013352 <Directory::create()>:
c0013352:	83 ec 0c             	sub    esp,0xc
c0013355:	b8 0b 00 00 00       	mov    eax,0xb
c001335a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001335e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013365:	80 f9 19             	cmp    cl,0x19
c0013368:	77 2f                	ja     c0013399 <Directory::create()+0x47>
c001336a:	8b 0c 8d e0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2020]
c0013371:	85 c9                	test   ecx,ecx
c0013373:	74 24                	je     c0013399 <Directory::create()+0x47>
c0013375:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001337b:	85 c9                	test   ecx,ecx
c001337d:	74 1a                	je     c0013399 <Directory::create()+0x47>
c001337f:	b8 06 00 00 00       	mov    eax,0x6
c0013384:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013388:	75 0f                	jne    c0013399 <Directory::create()+0x47>
c001338a:	83 c2 0d             	add    edx,0xd
c001338d:	50                   	push   eax
c001338e:	50                   	push   eax
c001338f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013391:	52                   	push   edx
c0013392:	51                   	push   ecx
c0013393:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013396:	83 c4 10             	add    esp,0x10
c0013399:	83 c4 0c             	add    esp,0xc
c001339c:	c3                   	ret    
c001339d:	90                   	nop

c001339e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001339e:	b8 0a 00 00 00       	mov    eax,0xa
c00133a3:	c3                   	ret    

c00133a4 <Bus::Bus(char const*)>:
c00133a4:	83 ec 0c             	sub    esp,0xc
c00133a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ab:	83 ec 08             	sub    esp,0x8
c00133ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133b2:	50                   	push   eax
c00133b3:	e8 88 09 00 00       	call   c0013d40 <Device::Device(char const*)>
c00133b8:	83 c4 10             	add    esp,0x10
c00133bb:	ba a0 a9 02 c0       	mov    edx,0xc002a9a0
c00133c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c4:	89 10                	mov    DWORD PTR [eax],edx
c00133c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ca:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00133d4:	90                   	nop
c00133d5:	83 c4 0c             	add    esp,0xc
c00133d8:	c3                   	ret    
c00133d9:	90                   	nop

c00133da <Bus::~Bus()>:
c00133da:	83 ec 0c             	sub    esp,0xc
c00133dd:	ba a0 a9 02 c0       	mov    edx,0xc002a9a0
c00133e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e6:	89 10                	mov    DWORD PTR [eax],edx
c00133e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ec:	83 ec 0c             	sub    esp,0xc
c00133ef:	50                   	push   eax
c00133f0:	e8 15 06 00 00       	call   c0013a0a <Device::~Device()>
c00133f5:	83 c4 10             	add    esp,0x10
c00133f8:	90                   	nop
c00133f9:	83 c4 0c             	add    esp,0xc
c00133fc:	c3                   	ret    
c00133fd:	90                   	nop

c00133fe <Bus::~Bus()>:
c00133fe:	83 ec 0c             	sub    esp,0xc
c0013401:	83 ec 0c             	sub    esp,0xc
c0013404:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013408:	e8 cd ff ff ff       	call   c00133da <Bus::~Bus()>
c001340d:	83 c4 10             	add    esp,0x10
c0013410:	83 ec 08             	sub    esp,0x8
c0013413:	68 58 01 00 00       	push   0x158
c0013418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001341c:	e8 0a f2 ff ff       	call   c001262b <operator delete(void*, unsigned long)>
c0013421:	83 c4 10             	add    esp,0x10
c0013424:	83 c4 0c             	add    esp,0xc
c0013427:	c3                   	ret    

c0013428 <Buzzer::Buzzer(char const*)>:
c0013428:	83 ec 0c             	sub    esp,0xc
c001342b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001342f:	83 ec 08             	sub    esp,0x8
c0013432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013436:	50                   	push   eax
c0013437:	e8 04 09 00 00       	call   c0013d40 <Device::Device(char const*)>
c001343c:	83 c4 10             	add    esp,0x10
c001343f:	ba cc a9 02 c0       	mov    edx,0xc002a9cc
c0013444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013448:	89 10                	mov    DWORD PTR [eax],edx
c001344a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001344e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001345c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013466:	90                   	nop
c0013467:	83 c4 0c             	add    esp,0xc
c001346a:	c3                   	ret    
c001346b:	90                   	nop

c001346c <Buzzer::~Buzzer()>:
c001346c:	83 ec 0c             	sub    esp,0xc
c001346f:	ba cc a9 02 c0       	mov    edx,0xc002a9cc
c0013474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013478:	89 10                	mov    DWORD PTR [eax],edx
c001347a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001347e:	83 ec 0c             	sub    esp,0xc
c0013481:	50                   	push   eax
c0013482:	e8 83 05 00 00       	call   c0013a0a <Device::~Device()>
c0013487:	83 c4 10             	add    esp,0x10
c001348a:	90                   	nop
c001348b:	83 c4 0c             	add    esp,0xc
c001348e:	c3                   	ret    
c001348f:	90                   	nop

c0013490 <Buzzer::~Buzzer()>:
c0013490:	83 ec 0c             	sub    esp,0xc
c0013493:	83 ec 0c             	sub    esp,0xc
c0013496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001349a:	e8 cd ff ff ff       	call   c001346c <Buzzer::~Buzzer()>
c001349f:	83 c4 10             	add    esp,0x10
c00134a2:	83 ec 08             	sub    esp,0x8
c00134a5:	68 5c 01 00 00       	push   0x15c
c00134aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134ae:	e8 78 f1 ff ff       	call   c001262b <operator delete(void*, unsigned long)>
c00134b3:	83 c4 10             	add    esp,0x10
c00134b6:	83 c4 0c             	add    esp,0xc
c00134b9:	c3                   	ret    

c00134ba <Buzzer::stop()>:
c00134ba:	83 ec 14             	sub    esp,0x14
c00134bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134c1:	8b 10                	mov    edx,DWORD PTR [eax]
c00134c3:	6a 00                	push   0x0
c00134c5:	50                   	push   eax
c00134c6:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00134c9:	83 c4 1c             	add    esp,0x1c
c00134cc:	c3                   	ret    

c00134cd <beepThread(void*)>:
c00134cd:	53                   	push   ebx
c00134ce:	83 ec 08             	sub    esp,0x8
c00134d1:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c00134d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134da:	48                   	dec    eax
c00134db:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c00134e0:	75 01                	jne    c00134e3 <beepThread(void*)+0x16>
c00134e2:	fb                   	sti    
c00134e3:	50                   	push   eax
c00134e4:	50                   	push   eax
c00134e5:	b8 40 42 0f 00       	mov    eax,0xf4240
c00134ea:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00134f0:	52                   	push   edx
c00134f1:	50                   	push   eax
c00134f2:	e8 dc a7 00 00       	call   c001dcd3 <nanoSleep(unsigned long long)>
c00134f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00134fa:	e8 bb ff ff ff       	call   c00134ba <Buzzer::stop()>
c00134ff:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013507:	83 c4 18             	add    esp,0x18
c001350a:	5b                   	pop    ebx
c001350b:	e9 bf a6 00 00       	jmp    c001dbcf <blockTask(TaskState)>

c0013510 <Buzzer::beep(int, int, bool)>:
c0013510:	57                   	push   edi
c0013511:	56                   	push   esi
c0013512:	53                   	push   ebx
c0013513:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013517:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001351b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001351f:	52                   	push   edx
c0013520:	52                   	push   edx
c0013521:	8b 06                	mov    eax,DWORD PTR [esi]
c0013523:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013527:	56                   	push   esi
c0013528:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001352b:	83 c4 10             	add    esp,0x10
c001352e:	89 f8                	mov    eax,edi
c0013530:	84 c0                	test   al,al
c0013532:	74 1f                	je     c0013553 <Buzzer::beep(int, int, bool)+0x43>
c0013534:	50                   	push   eax
c0013535:	50                   	push   eax
c0013536:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001353c:	99                   	cdq    
c001353d:	52                   	push   edx
c001353e:	50                   	push   eax
c001353f:	e8 8f a7 00 00       	call   c001dcd3 <nanoSleep(unsigned long long)>
c0013544:	83 c4 10             	add    esp,0x10
c0013547:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001354b:	5b                   	pop    ebx
c001354c:	5e                   	pop    esi
c001354d:	5f                   	pop    edi
c001354e:	e9 67 ff ff ff       	jmp    c00134ba <Buzzer::stop()>
c0013553:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013559:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001355e:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013566:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001356a:	c7 44 24 14 cd 34 01 c0 	mov    DWORD PTR [esp+0x14],0xc00134cd
c0013572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013576:	5b                   	pop    ebx
c0013577:	5e                   	pop    esi
c0013578:	5f                   	pop    edi
c0013579:	e9 56 a2 00 00       	jmp    c001d7d4 <Process::createThread(void (*)(void*), void*, int)>

c001357e <User::loadClockSettings(int)>:
c001357e:	53                   	push   ebx
c001357f:	83 ec 14             	sub    esp,0x14
c0013582:	68 14 01 00 00       	push   0x114
c0013587:	e8 0d c0 ff ff       	call   c000f599 <malloc>
c001358c:	83 c4 0c             	add    esp,0xc
c001358f:	89 c3                	mov    ebx,eax
c0013591:	ff 35 30 0f 03 c0    	push   DWORD PTR ds:0xc0030f30
c0013597:	68 f4 a9 02 c0       	push   0xc002a9f4
c001359c:	50                   	push   eax
c001359d:	e8 c0 f6 ff ff       	call   c0012c62 <File::File(char const*, Process*)>
c00135a2:	58                   	pop    eax
c00135a3:	5a                   	pop    edx
c00135a4:	6a 01                	push   0x1
c00135a6:	53                   	push   ebx
c00135a7:	e8 1a f7 ff ff       	call   c0012cc6 <File::open(FileOpenMode)>
c00135ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00135af:	e8 70 f7 ff ff       	call   c0012d24 <File::close()>
c00135b4:	83 c4 10             	add    esp,0x10
c00135b7:	85 db                	test   ebx,ebx
c00135b9:	74 0f                	je     c00135ca <User::loadClockSettings(int)+0x4c>
c00135bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00135bd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00135c1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00135c4:	83 c4 08             	add    esp,0x8
c00135c7:	5b                   	pop    ebx
c00135c8:	ff e0                	jmp    eax
c00135ca:	83 c4 08             	add    esp,0x8
c00135cd:	5b                   	pop    ebx
c00135ce:	c3                   	ret    
c00135cf:	90                   	nop

c00135d0 <Clock::Clock(char const*)>:
c00135d0:	83 ec 0c             	sub    esp,0xc
c00135d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135d7:	83 ec 08             	sub    esp,0x8
c00135da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135de:	50                   	push   eax
c00135df:	e8 5c 07 00 00       	call   c0013d40 <Device::Device(char const*)>
c00135e4:	83 c4 10             	add    esp,0x10
c00135e7:	ba 1c aa 02 c0       	mov    edx,0xc002aa1c
c00135ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135f0:	89 10                	mov    DWORD PTR [eax],edx
c00135f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135f6:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013600:	90                   	nop
c0013601:	83 c4 0c             	add    esp,0xc
c0013604:	c3                   	ret    
c0013605:	90                   	nop

c0013606 <Clock::~Clock()>:
c0013606:	83 ec 0c             	sub    esp,0xc
c0013609:	ba 1c aa 02 c0       	mov    edx,0xc002aa1c
c001360e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013612:	89 10                	mov    DWORD PTR [eax],edx
c0013614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013618:	83 ec 0c             	sub    esp,0xc
c001361b:	50                   	push   eax
c001361c:	e8 e9 03 00 00       	call   c0013a0a <Device::~Device()>
c0013621:	83 c4 10             	add    esp,0x10
c0013624:	90                   	nop
c0013625:	83 c4 0c             	add    esp,0xc
c0013628:	c3                   	ret    
c0013629:	90                   	nop

c001362a <Clock::~Clock()>:
c001362a:	83 ec 0c             	sub    esp,0xc
c001362d:	83 ec 0c             	sub    esp,0xc
c0013630:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013634:	e8 cd ff ff ff       	call   c0013606 <Clock::~Clock()>
c0013639:	83 c4 10             	add    esp,0x10
c001363c:	83 ec 08             	sub    esp,0x8
c001363f:	68 58 01 00 00       	push   0x158
c0013644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013648:	e8 de ef ff ff       	call   c001262b <operator delete(void*, unsigned long)>
c001364d:	83 c4 10             	add    esp,0x10
c0013650:	83 c4 0c             	add    esp,0xc
c0013653:	c3                   	ret    

c0013654 <Clock::timeInSecondsLocal()>:
c0013654:	53                   	push   ebx
c0013655:	83 ec 14             	sub    esp,0x14
c0013658:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001365c:	8b 10                	mov    edx,DWORD PTR [eax]
c001365e:	50                   	push   eax
c001365f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013662:	0f b6 0d 5c db 02 c0 	movzx  ecx,BYTE PTR ds:0xc002db5c
c0013669:	03 0d 60 db 02 c0    	add    ecx,DWORD PTR ds:0xc002db60
c001366f:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013675:	89 cb                	mov    ebx,ecx
c0013677:	c1 fb 1f             	sar    ebx,0x1f
c001367a:	01 c8                	add    eax,ecx
c001367c:	11 da                	adc    edx,ebx
c001367e:	83 c4 10             	add    esp,0x10
c0013681:	31 c9                	xor    ecx,ecx
c0013683:	80 3d 5d db 02 c0 00 	cmp    BYTE PTR ds:0xc002db5d,0x0
c001368a:	74 05                	je     c0013691 <Clock::timeInSecondsLocal()+0x3d>
c001368c:	b9 08 07 00 00       	mov    ecx,0x708
c0013691:	31 db                	xor    ebx,ebx
c0013693:	01 c8                	add    eax,ecx
c0013695:	11 da                	adc    edx,ebx
c0013697:	83 c4 08             	add    esp,0x8
c001369a:	5b                   	pop    ebx
c001369b:	c3                   	ret    

c001369c <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001369c:	57                   	push   edi
c001369d:	56                   	push   esi
c001369e:	53                   	push   ebx
c001369f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00136a3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136a7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136a9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00136ad:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00136b0:	0f b6 05 5c db 02 c0 	movzx  eax,BYTE PTR ds:0xc002db5c
c00136b7:	03 05 60 db 02 c0    	add    eax,DWORD PTR ds:0xc002db60
c00136bd:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00136c3:	99                   	cdq    
c00136c4:	29 c6                	sub    esi,eax
c00136c6:	19 d7                	sbb    edi,edx
c00136c8:	89 f0                	mov    eax,esi
c00136ca:	89 fa                	mov    edx,edi
c00136cc:	31 f6                	xor    esi,esi
c00136ce:	80 3d 5d db 02 c0 00 	cmp    BYTE PTR ds:0xc002db5d,0x0
c00136d5:	74 05                	je     c00136dc <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00136d7:	be 08 07 00 00       	mov    esi,0x708
c00136dc:	31 ff                	xor    edi,edi
c00136de:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00136e2:	29 f0                	sub    eax,esi
c00136e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00136e8:	19 fa                	sbb    edx,edi
c00136ea:	89 d8                	mov    eax,ebx
c00136ec:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00136f0:	5b                   	pop    ebx
c00136f1:	5e                   	pop    esi
c00136f2:	5f                   	pop    edi
c00136f3:	ff e0                	jmp    eax

c00136f5 <datetimeToSeconds(datetime_t)>:
c00136f5:	55                   	push   ebp
c00136f6:	57                   	push   edi
c00136f7:	56                   	push   esi
c00136f8:	53                   	push   ebx
c00136f9:	83 ec 14             	sub    esp,0x14
c00136fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013700:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013704:	89 d3                	mov    ebx,edx
c0013706:	0f b6 c6             	movzx  eax,dh
c0013709:	c1 eb 10             	shr    ebx,0x10
c001370c:	48                   	dec    eax
c001370d:	66 81 eb 6c 07       	sub    bx,0x76c
c0013712:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013716:	0f b6 f5             	movzx  esi,ch
c0013719:	89 cf                	mov    edi,ecx
c001371b:	6b f6 3c             	imul   esi,esi,0x3c
c001371e:	c1 ef 10             	shr    edi,0x10
c0013721:	0f b6 c9             	movzx  ecx,cl
c0013724:	89 f8                	mov    eax,edi
c0013726:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001372c:	0f b6 f8             	movzx  edi,al
c001372f:	0f b6 d2             	movzx  edx,dl
c0013732:	01 fe                	add    esi,edi
c0013734:	01 f1                	add    ecx,esi
c0013736:	0f b7 f3             	movzx  esi,bx
c0013739:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001373d:	c1 f9 1f             	sar    ecx,0x1f
c0013740:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013745:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013749:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001374e:	8b 0c 8d 60 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55a0]
c0013755:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013759:	76 29                	jbe    c0013784 <datetimeToSeconds(datetime_t)+0x8f>
c001375b:	f6 c3 03             	test   bl,0x3
c001375e:	75 24                	jne    c0013784 <datetimeToSeconds(datetime_t)+0x8f>
c0013760:	31 d2                	xor    edx,edx
c0013762:	bf 64 00 00 00       	mov    edi,0x64
c0013767:	89 d8                	mov    eax,ebx
c0013769:	66 f7 f7             	div    di
c001376c:	66 85 d2             	test   dx,dx
c001376f:	75 12                	jne    c0013783 <datetimeToSeconds(datetime_t)+0x8e>
c0013771:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013777:	bf 90 01 00 00       	mov    edi,0x190
c001377c:	99                   	cdq    
c001377d:	f7 ff                	idiv   edi
c001377f:	85 d2                	test   edx,edx
c0013781:	75 01                	jne    c0013784 <datetimeToSeconds(datetime_t)+0x8f>
c0013783:	41                   	inc    ecx
c0013784:	66 83 fb 46          	cmp    bx,0x46
c0013788:	76 45                	jbe    c00137cf <datetimeToSeconds(datetime_t)+0xda>
c001378a:	bb 46 00 00 00       	mov    ebx,0x46
c001378f:	bf 64 00 00 00       	mov    edi,0x64
c0013794:	bd 90 01 00 00       	mov    ebp,0x190
c0013799:	b8 6d 01 00 00       	mov    eax,0x16d
c001379e:	f6 c3 03             	test   bl,0x3
c00137a1:	75 23                	jne    c00137c6 <datetimeToSeconds(datetime_t)+0xd1>
c00137a3:	89 d8                	mov    eax,ebx
c00137a5:	99                   	cdq    
c00137a6:	f7 ff                	idiv   edi
c00137a8:	b8 6e 01 00 00       	mov    eax,0x16e
c00137ad:	85 d2                	test   edx,edx
c00137af:	75 15                	jne    c00137c6 <datetimeToSeconds(datetime_t)+0xd1>
c00137b1:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00137b7:	99                   	cdq    
c00137b8:	f7 fd                	idiv   ebp
c00137ba:	83 fa 01             	cmp    edx,0x1
c00137bd:	19 c0                	sbb    eax,eax
c00137bf:	f7 d0                	not    eax
c00137c1:	05 6e 01 00 00       	add    eax,0x16e
c00137c6:	01 c1                	add    ecx,eax
c00137c8:	43                   	inc    ebx
c00137c9:	39 f3                	cmp    ebx,esi
c00137cb:	7c cc                	jl     c0013799 <datetimeToSeconds(datetime_t)+0xa4>
c00137cd:	eb 35                	jmp    c0013804 <datetimeToSeconds(datetime_t)+0x10f>
c00137cf:	74 33                	je     c0013804 <datetimeToSeconds(datetime_t)+0x10f>
c00137d1:	b8 45 00 00 00       	mov    eax,0x45
c00137d6:	89 c2                	mov    edx,eax
c00137d8:	83 e2 03             	and    edx,0x3
c00137db:	39 f0                	cmp    eax,esi
c00137dd:	7e 0f                	jle    c00137ee <datetimeToSeconds(datetime_t)+0xf9>
c00137df:	83 fa 01             	cmp    edx,0x1
c00137e2:	19 d2                	sbb    edx,edx
c00137e4:	48                   	dec    eax
c00137e5:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00137ec:	eb e8                	jmp    c00137d6 <datetimeToSeconds(datetime_t)+0xe1>
c00137ee:	b8 6d 01 00 00       	mov    eax,0x16d
c00137f3:	85 d2                	test   edx,edx
c00137f5:	75 0b                	jne    c0013802 <datetimeToSeconds(datetime_t)+0x10d>
c00137f7:	66 83 fb 01          	cmp    bx,0x1
c00137fb:	19 c0                	sbb    eax,eax
c00137fd:	05 6e 01 00 00       	add    eax,0x16e
c0013802:	29 c1                	sub    ecx,eax
c0013804:	b8 80 51 01 00       	mov    eax,0x15180
c0013809:	f7 e9                	imul   ecx
c001380b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001380f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013813:	83 c4 14             	add    esp,0x14
c0013816:	5b                   	pop    ebx
c0013817:	5e                   	pop    esi
c0013818:	5f                   	pop    edi
c0013819:	5d                   	pop    ebp
c001381a:	c3                   	ret    
c001381b:	90                   	nop

c001381c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001381c:	57                   	push   edi
c001381d:	56                   	push   esi
c001381e:	53                   	push   ebx
c001381f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013823:	8b 06                	mov    eax,DWORD PTR [esi]
c0013825:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013828:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001382c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013830:	e8 c0 fe ff ff       	call   c00136f5 <datetimeToSeconds(datetime_t)>
c0013835:	59                   	pop    ecx
c0013836:	0f b6 0d 5c db 02 c0 	movzx  ecx,BYTE PTR ds:0xc002db5c
c001383d:	5b                   	pop    ebx
c001383e:	03 0d 60 db 02 c0    	add    ecx,DWORD PTR ds:0xc002db60
c0013844:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001384a:	89 cb                	mov    ebx,ecx
c001384c:	c1 fb 1f             	sar    ebx,0x1f
c001384f:	29 c8                	sub    eax,ecx
c0013851:	19 da                	sbb    edx,ebx
c0013853:	31 c9                	xor    ecx,ecx
c0013855:	80 3d 5d db 02 c0 00 	cmp    BYTE PTR ds:0xc002db5d,0x0
c001385c:	74 05                	je     c0013863 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001385e:	b9 08 07 00 00       	mov    ecx,0x708
c0013863:	31 db                	xor    ebx,ebx
c0013865:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013869:	29 c8                	sub    eax,ecx
c001386b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001386f:	19 da                	sbb    edx,ebx
c0013871:	89 f8                	mov    eax,edi
c0013873:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013877:	5b                   	pop    ebx
c0013878:	5e                   	pop    esi
c0013879:	5f                   	pop    edi
c001387a:	ff e0                	jmp    eax

c001387c <secondsToDatetime(unsigned long long)>:
c001387c:	55                   	push   ebp
c001387d:	57                   	push   edi
c001387e:	56                   	push   esi
c001387f:	53                   	push   ebx
c0013880:	83 ec 1c             	sub    esp,0x1c
c0013883:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013887:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001388b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001388f:	6a 00                	push   0x0
c0013891:	68 80 51 01 00       	push   0x15180
c0013896:	55                   	push   ebp
c0013897:	57                   	push   edi
c0013898:	e8 a7 2e 01 00       	call   c0026744 <__udivdi3>
c001389d:	83 c4 10             	add    esp,0x10
c00138a0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00138a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138aa:	6a 00                	push   0x0
c00138ac:	68 80 51 01 00       	push   0x15180
c00138b1:	55                   	push   ebp
c00138b2:	57                   	push   edi
c00138b3:	bf 10 0e 00 00       	mov    edi,0xe10
c00138b8:	e8 87 2f 01 00       	call   c0026844 <__umoddi3>
c00138bd:	83 c4 10             	add    esp,0x10
c00138c0:	99                   	cdq    
c00138c1:	f7 ff                	idiv   edi
c00138c3:	bf 3c 00 00 00       	mov    edi,0x3c
c00138c8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00138cb:	89 d0                	mov    eax,edx
c00138cd:	99                   	cdq    
c00138ce:	f7 ff                	idiv   edi
c00138d0:	85 db                	test   ebx,ebx
c00138d2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00138d5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00138d8:	79 11                	jns    c00138eb <secondsToDatetime(unsigned long long)+0x6f>
c00138da:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00138de:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00138e4:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00138e9:	eb 07                	jmp    c00138f2 <secondsToDatetime(unsigned long long)+0x76>
c00138eb:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00138f0:	89 d8                	mov    eax,ebx
c00138f2:	bf b4 05 00 00       	mov    edi,0x5b4
c00138f7:	99                   	cdq    
c00138f8:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00138fd:	f7 f9                	idiv   ecx
c00138ff:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013908:	31 d2                	xor    edx,edx
c001390a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013912:	01 c3                	add    ebx,eax
c0013914:	89 d8                	mov    eax,ebx
c0013916:	f7 f1                	div    ecx
c0013918:	31 d2                	xor    edx,edx
c001391a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001391d:	89 d8                	mov    eax,ebx
c001391f:	f7 f7                	div    edi
c0013921:	31 d2                	xor    edx,edx
c0013923:	29 c1                	sub    ecx,eax
c0013925:	89 d8                	mov    eax,ebx
c0013927:	f7 f5                	div    ebp
c0013929:	bd 6d 01 00 00       	mov    ebp,0x16d
c001392e:	29 c1                	sub    ecx,eax
c0013930:	31 d2                	xor    edx,edx
c0013932:	89 c8                	mov    eax,ecx
c0013934:	f7 f5                	div    ebp
c0013936:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001393b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001393f:	31 d2                	xor    edx,edx
c0013941:	89 c8                	mov    eax,ecx
c0013943:	f7 f5                	div    ebp
c0013945:	31 d2                	xor    edx,edx
c0013947:	01 c3                	add    ebx,eax
c0013949:	89 c8                	mov    eax,ecx
c001394b:	f7 f7                	div    edi
c001394d:	bf 99 00 00 00       	mov    edi,0x99
c0013952:	29 c3                	sub    ebx,eax
c0013954:	31 d2                	xor    edx,edx
c0013956:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001395e:	29 c3                	sub    ebx,eax
c0013960:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013963:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013966:	bb 05 00 00 00       	mov    ebx,0x5
c001396b:	83 c1 02             	add    ecx,0x2
c001396e:	89 c8                	mov    eax,ecx
c0013970:	f7 f7                	div    edi
c0013972:	31 d2                	xor    edx,edx
c0013974:	89 c7                	mov    edi,eax
c0013976:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001397c:	83 c0 02             	add    eax,0x2
c001397f:	f7 f3                	div    ebx
c0013981:	89 eb                	mov    ebx,ebp
c0013983:	29 c3                	sub    ebx,eax
c0013985:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001398b:	88 1e                	mov    BYTE PTR [esi],bl
c001398d:	19 c0                	sbb    eax,eax
c001398f:	31 d2                	xor    edx,edx
c0013991:	83 e0 0c             	and    eax,0xc
c0013994:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013998:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00139a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00139a4:	83 f9 01             	cmp    ecx,0x1
c00139a7:	0f 96 c2             	setbe  dl
c00139aa:	41                   	inc    ecx
c00139ab:	01 d0                	add    eax,edx
c00139ad:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00139b0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00139b4:	83 c4 1c             	add    esp,0x1c
c00139b7:	89 f0                	mov    eax,esi
c00139b9:	5b                   	pop    ebx
c00139ba:	5e                   	pop    esi
c00139bb:	5f                   	pop    edi
c00139bc:	5d                   	pop    ebp
c00139bd:	c2 04 00             	ret    0x4

c00139c0 <Clock::timeInDatetimeLocal()>:
c00139c0:	53                   	push   ebx
c00139c1:	83 ec 14             	sub    esp,0x14
c00139c4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00139cc:	e8 83 fc ff ff       	call   c0013654 <Clock::timeInSecondsLocal()>
c00139d1:	83 c4 0c             	add    esp,0xc
c00139d4:	52                   	push   edx
c00139d5:	50                   	push   eax
c00139d6:	53                   	push   ebx
c00139d7:	e8 a0 fe ff ff       	call   c001387c <secondsToDatetime(unsigned long long)>
c00139dc:	89 d8                	mov    eax,ebx
c00139de:	83 c4 14             	add    esp,0x14
c00139e1:	5b                   	pop    ebx
c00139e2:	c2 04 00             	ret    0x4
c00139e5:	90                   	nop

c00139e6 <Device::hibernate()>:
c00139e6:	c3                   	ret    
c00139e7:	90                   	nop

c00139e8 <Device::wake()>:
c00139e8:	c3                   	ret    
c00139e9:	90                   	nop

c00139ea <Device::detect()>:
c00139ea:	c3                   	ret    
c00139eb:	90                   	nop

c00139ec <Device::disableLegacy()>:
c00139ec:	c3                   	ret    
c00139ed:	90                   	nop

c00139ee <Device::powerSaving(PowerSavingLevel)>:
c00139ee:	c3                   	ret    
c00139ef:	90                   	nop

c00139f0 <DriverlessDevice::close(int, int, void*)>:
c00139f0:	31 c0                	xor    eax,eax
c00139f2:	c3                   	ret    
c00139f3:	90                   	nop

c00139f4 <DriverlessDevice::detect()>:
c00139f4:	c3                   	ret    
c00139f5:	90                   	nop

c00139f6 <DriverlessDevice::open(int, int, void*)>:
c00139f6:	83 ec 18             	sub    esp,0x18
c00139f9:	68 90 aa 02 c0       	push   0xc002aa90
c00139fe:	e8 6c 64 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c0013a03:	83 c8 ff             	or     eax,0xffffffff
c0013a06:	83 c4 1c             	add    esp,0x1c
c0013a09:	c3                   	ret    

c0013a0a <Device::~Device()>:
c0013a0a:	ba f0 aa 02 c0       	mov    edx,0xc002aaf0
c0013a0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a13:	89 10                	mov    DWORD PTR [eax],edx
c0013a15:	90                   	nop
c0013a16:	c3                   	ret    
c0013a17:	90                   	nop

c0013a18 <Device::~Device()>:
c0013a18:	83 ec 0c             	sub    esp,0xc
c0013a1b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013a1f:	e8 e6 ff ff ff       	call   c0013a0a <Device::~Device()>
c0013a24:	83 c4 04             	add    esp,0x4
c0013a27:	83 ec 08             	sub    esp,0x8
c0013a2a:	68 58 01 00 00       	push   0x158
c0013a2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a33:	e8 f3 eb ff ff       	call   c001262b <operator delete(void*, unsigned long)>
c0013a38:	83 c4 10             	add    esp,0x10
c0013a3b:	83 c4 0c             	add    esp,0xc
c0013a3e:	c3                   	ret    
c0013a3f:	90                   	nop

c0013a40 <Device::findAndLoadDriver()>:
c0013a40:	c7 44 24 04 ae aa 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aaae
c0013a48:	e9 b6 ec ff ff       	jmp    c0012703 <Dbg::kprintf(char const*, ...)>
c0013a4d:	90                   	nop

c0013a4e <Device::preOpenPCI(PCIDeviceInfo)>:
c0013a4e:	57                   	push   edi
c0013a4f:	b9 09 00 00 00       	mov    ecx,0x9
c0013a54:	56                   	push   esi
c0013a55:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013a59:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013a5d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013a67:	81 c7 18 01 00 00    	add    edi,0x118
c0013a6d:	fc                   	cld    
c0013a6e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013a70:	5e                   	pop    esi
c0013a71:	5f                   	pop    edi
c0013a72:	c3                   	ret    
c0013a73:	90                   	nop

c0013a74 <Device::preOpenACPI(void*, char*, char*)>:
c0013a74:	57                   	push   edi
c0013a75:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013a7a:	56                   	push   esi
c0013a7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a7f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a83:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013a8d:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013a93:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a9d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a9f:	b9 0e 00 00 00       	mov    ecx,0xe
c0013aa4:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013aaa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013aae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ab0:	5e                   	pop    esi
c0013ab1:	5f                   	pop    edi
c0013ab2:	c3                   	ret    
c0013ab3:	90                   	nop

c0013ab4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013ab4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ab8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013abd:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013ac4:	75 0b                	jne    c0013ad1 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013ac6:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ac8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013acc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013acf:	eb 1e                	jmp    c0013aef <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013ad1:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0013ad6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013adc:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013ae2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013ae4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ae8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013aec:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013aef:	ff e0                	jmp    eax
c0013af1:	90                   	nop

c0013af2 <Device::getParent()>:
c0013af2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013af6:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013afc:	c3                   	ret    
c0013afd:	90                   	nop

c0013afe <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b02:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013b07:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013b0e:	75 0b                	jne    c0013b1b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013b10:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b12:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b16:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013b19:	eb 1e                	jmp    c0013b39 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013b1b:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0013b20:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b26:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b2c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b2e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b32:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b36:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013b39:	ff e0                	jmp    eax
c0013b3b:	90                   	nop

c0013b3c <Device::addChild(Device*)>:
c0013b3c:	53                   	push   ebx
c0013b3d:	83 ec 08             	sub    esp,0x8
c0013b40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b48:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013b4e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013b54:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013b56:	85 d2                	test   edx,edx
c0013b58:	74 04                	je     c0013b5e <Device::addChild(Device*)+0x22>
c0013b5a:	89 d3                	mov    ebx,edx
c0013b5c:	eb f6                	jmp    c0013b54 <Device::addChild(Device*)+0x18>
c0013b5e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013b61:	83 ec 0c             	sub    esp,0xc
c0013b64:	6a 08                	push   0x8
c0013b66:	e8 2e ba ff ff       	call   c000f599 <malloc>
c0013b6b:	89 03                	mov    DWORD PTR [ebx],eax
c0013b6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b73:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b7a:	83 c4 18             	add    esp,0x18
c0013b7d:	5b                   	pop    ebx
c0013b7e:	c3                   	ret    
c0013b7f:	90                   	nop

c0013b80 <Device::removeAllChildren()>:
c0013b80:	56                   	push   esi
c0013b81:	53                   	push   ebx
c0013b82:	52                   	push   edx
c0013b83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b87:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013b8d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b90:	74 17                	je     c0013ba9 <Device::removeAllChildren()+0x29>
c0013b92:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013b95:	85 c0                	test   eax,eax
c0013b97:	74 0c                	je     c0013ba5 <Device::removeAllChildren()+0x25>
c0013b99:	83 ec 0c             	sub    esp,0xc
c0013b9c:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b9e:	50                   	push   eax
c0013b9f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013ba2:	83 c4 10             	add    esp,0x10
c0013ba5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ba7:	eb e4                	jmp    c0013b8d <Device::removeAllChildren()+0xd>
c0013ba9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013baf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013bb5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013bbb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013bc2:	58                   	pop    eax
c0013bc3:	5b                   	pop    ebx
c0013bc4:	5e                   	pop    esi
c0013bc5:	c3                   	ret    

c0013bc6 <Device::hibernateAll()>:
c0013bc6:	53                   	push   ebx
c0013bc7:	83 ec 14             	sub    esp,0x14
c0013bca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bce:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bd0:	53                   	push   ebx
c0013bd1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013bd4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bda:	83 c4 10             	add    esp,0x10
c0013bdd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013be0:	74 0f                	je     c0013bf1 <Device::hibernateAll()+0x2b>
c0013be2:	83 ec 0c             	sub    esp,0xc
c0013be5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013be8:	e8 d9 ff ff ff       	call   c0013bc6 <Device::hibernateAll()>
c0013bed:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bef:	eb e9                	jmp    c0013bda <Device::hibernateAll()+0x14>
c0013bf1:	83 c4 08             	add    esp,0x8
c0013bf4:	5b                   	pop    ebx
c0013bf5:	c3                   	ret    

c0013bf6 <Device::wakeAll()>:
c0013bf6:	53                   	push   ebx
c0013bf7:	83 ec 14             	sub    esp,0x14
c0013bfa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bfe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c00:	53                   	push   ebx
c0013c01:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013c04:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c0a:	83 c4 10             	add    esp,0x10
c0013c0d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c10:	74 0f                	je     c0013c21 <Device::wakeAll()+0x2b>
c0013c12:	83 ec 0c             	sub    esp,0xc
c0013c15:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c18:	e8 d9 ff ff ff       	call   c0013bf6 <Device::wakeAll()>
c0013c1d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c1f:	eb e9                	jmp    c0013c0a <Device::wakeAll()+0x14>
c0013c21:	83 c4 08             	add    esp,0x8
c0013c24:	5b                   	pop    ebx
c0013c25:	c3                   	ret    

c0013c26 <Device::detectAll()>:
c0013c26:	53                   	push   ebx
c0013c27:	83 ec 14             	sub    esp,0x14
c0013c2a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c30:	53                   	push   ebx
c0013c31:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013c34:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c3a:	83 c4 10             	add    esp,0x10
c0013c3d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c40:	74 0f                	je     c0013c51 <Device::detectAll()+0x2b>
c0013c42:	83 ec 0c             	sub    esp,0xc
c0013c45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c48:	e8 d9 ff ff ff       	call   c0013c26 <Device::detectAll()>
c0013c4d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c4f:	eb e9                	jmp    c0013c3a <Device::detectAll()+0x14>
c0013c51:	83 c4 08             	add    esp,0x8
c0013c54:	5b                   	pop    ebx
c0013c55:	c3                   	ret    

c0013c56 <Device::disableLegacyAll()>:
c0013c56:	53                   	push   ebx
c0013c57:	83 ec 14             	sub    esp,0x14
c0013c5a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c60:	53                   	push   ebx
c0013c61:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013c64:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c6a:	83 c4 10             	add    esp,0x10
c0013c6d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c70:	74 0f                	je     c0013c81 <Device::disableLegacyAll()+0x2b>
c0013c72:	83 ec 0c             	sub    esp,0xc
c0013c75:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c78:	e8 d9 ff ff ff       	call   c0013c56 <Device::disableLegacyAll()>
c0013c7d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c7f:	eb e9                	jmp    c0013c6a <Device::disableLegacyAll()+0x14>
c0013c81:	83 c4 08             	add    esp,0x8
c0013c84:	5b                   	pop    ebx
c0013c85:	c3                   	ret    

c0013c86 <Device::loadDriversForAll()>:
c0013c86:	53                   	push   ebx
c0013c87:	83 ec 08             	sub    esp,0x8
c0013c8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c8e:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013c95:	75 0c                	jne    c0013ca3 <Device::loadDriversForAll()+0x1d>
c0013c97:	83 ec 0c             	sub    esp,0xc
c0013c9a:	53                   	push   ebx
c0013c9b:	e8 a0 fd ff ff       	call   c0013a40 <Device::findAndLoadDriver()>
c0013ca0:	83 c4 10             	add    esp,0x10
c0013ca3:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ca9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cac:	74 12                	je     c0013cc0 <Device::loadDriversForAll()+0x3a>
c0013cae:	83 ec 0c             	sub    esp,0xc
c0013cb1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cb4:	e8 cd ff ff ff       	call   c0013c86 <Device::loadDriversForAll()>
c0013cb9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cbb:	83 c4 10             	add    esp,0x10
c0013cbe:	eb e9                	jmp    c0013ca9 <Device::loadDriversForAll()+0x23>
c0013cc0:	83 c4 08             	add    esp,0x8
c0013cc3:	5b                   	pop    ebx
c0013cc4:	c3                   	ret    
c0013cc5:	90                   	nop

c0013cc6 <Device::closeAll()>:
c0013cc6:	53                   	push   ebx
c0013cc7:	83 ec 08             	sub    esp,0x8
c0013cca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cce:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cd0:	6a 00                	push   0x0
c0013cd2:	6a 00                	push   0x0
c0013cd4:	6a 00                	push   0x0
c0013cd6:	53                   	push   ebx
c0013cd7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013cda:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ce0:	83 c4 10             	add    esp,0x10
c0013ce3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ce6:	74 0f                	je     c0013cf7 <Device::closeAll()+0x31>
c0013ce8:	83 ec 0c             	sub    esp,0xc
c0013ceb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cee:	e8 d3 ff ff ff       	call   c0013cc6 <Device::closeAll()>
c0013cf3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cf5:	eb e9                	jmp    c0013ce0 <Device::closeAll()+0x1a>
c0013cf7:	83 c4 08             	add    esp,0x8
c0013cfa:	5b                   	pop    ebx
c0013cfb:	c3                   	ret    

c0013cfc <Device::powerSavingAll(PowerSavingLevel)>:
c0013cfc:	56                   	push   esi
c0013cfd:	53                   	push   ebx
c0013cfe:	83 ec 0c             	sub    esp,0xc
c0013d01:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d05:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013d09:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d0b:	56                   	push   esi
c0013d0c:	53                   	push   ebx
c0013d0d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013d10:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d16:	83 c4 10             	add    esp,0x10
c0013d19:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d1c:	74 0f                	je     c0013d2d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013d1e:	52                   	push   edx
c0013d1f:	52                   	push   edx
c0013d20:	56                   	push   esi
c0013d21:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d24:	e8 d3 ff ff ff       	call   c0013cfc <Device::powerSavingAll(PowerSavingLevel)>
c0013d29:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d2b:	eb e9                	jmp    c0013d16 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013d2d:	58                   	pop    eax
c0013d2e:	5b                   	pop    ebx
c0013d2f:	5e                   	pop    esi
c0013d30:	c3                   	ret    
c0013d31:	90                   	nop

c0013d32 <Device::setName(char const*)>:
c0013d32:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013d3a:	e9 cd ca fe ff       	jmp    c000080c <strcpy>
c0013d3f:	90                   	nop

c0013d40 <Device::Device(char const*)>:
c0013d40:	83 ec 1c             	sub    esp,0x1c
c0013d43:	ba f0 aa 02 c0       	mov    edx,0xc002aaf0
c0013d48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d4c:	89 10                	mov    DWORD PTR [eax],edx
c0013d4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d52:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013d5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d60:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d6e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013d78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d7c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013d86:	83 ec 08             	sub    esp,0x8
c0013d89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d91:	e8 9c ff ff ff       	call   c0013d32 <Device::setName(char const*)>
c0013d96:	83 c4 10             	add    esp,0x10
c0013d99:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013da1:	83 ec 0c             	sub    esp,0xc
c0013da4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013da8:	e8 ec b7 ff ff       	call   c000f599 <malloc>
c0013dad:	83 c4 10             	add    esp,0x10
c0013db0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013db6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013dbd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013dc1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013dc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dcb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013dd1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ddb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013de1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013de8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dec:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013df3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013df7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013dfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e02:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013e0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e10:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013e1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e1e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013e28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e2c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013e36:	90                   	nop
c0013e37:	83 c4 1c             	add    esp,0x1c
c0013e3a:	c3                   	ret    
c0013e3b:	90                   	nop

c0013e3c <Device::getName()>:
c0013e3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e40:	05 d0 00 00 00       	add    eax,0xd0
c0013e45:	c3                   	ret    

c0013e46 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013e46:	83 ec 0c             	sub    esp,0xc
c0013e49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e4d:	83 ec 08             	sub    esp,0x8
c0013e50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e54:	50                   	push   eax
c0013e55:	e8 e6 fe ff ff       	call   c0013d40 <Device::Device(char const*)>
c0013e5a:	83 c4 10             	add    esp,0x10
c0013e5d:	ba 1c ab 02 c0       	mov    edx,0xc002ab1c
c0013e62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e66:	89 10                	mov    DWORD PTR [eax],edx
c0013e68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e6c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013e76:	90                   	nop
c0013e77:	83 c4 0c             	add    esp,0xc
c0013e7a:	c3                   	ret    
c0013e7b:	90                   	nop

c0013e7c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013e7c:	57                   	push   edi
c0013e7d:	56                   	push   esi
c0013e7e:	53                   	push   ebx
c0013e7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e83:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e8b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013e91:	75 0c                	jne    c0013e9f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013e93:	52                   	push   edx
c0013e94:	52                   	push   edx
c0013e95:	53                   	push   ebx
c0013e96:	56                   	push   esi
c0013e97:	e8 e4 47 01 00       	call   c0028680 <LinkedList<Device>::addElement(Device*)>
c0013e9c:	83 c4 10             	add    esp,0x10
c0013e9f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ea5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ea8:	74 12                	je     c0013ebc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013eaa:	50                   	push   eax
c0013eab:	57                   	push   edi
c0013eac:	56                   	push   esi
c0013ead:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013eb0:	e8 c7 ff ff ff       	call   c0013e7c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013eb5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013eb7:	83 c4 10             	add    esp,0x10
c0013eba:	eb e9                	jmp    c0013ea5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013ebc:	5b                   	pop    ebx
c0013ebd:	5e                   	pop    esi
c0013ebe:	5f                   	pop    edi
c0013ebf:	c3                   	ret    

c0013ec0 <getDevicesOfType(DeviceType)>:
c0013ec0:	53                   	push   ebx
c0013ec1:	83 ec 14             	sub    esp,0x14
c0013ec4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ec8:	53                   	push   ebx
c0013ec9:	e8 8e 48 01 00       	call   c002875c <LinkedList<Device>::LinkedList()>
c0013ece:	83 c4 0c             	add    esp,0xc
c0013ed1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ed5:	53                   	push   ebx
c0013ed6:	ff 35 e8 d9 02 c0    	push   DWORD PTR ds:0xc002d9e8
c0013edc:	e8 9b ff ff ff       	call   c0013e7c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013ee1:	89 d8                	mov    eax,ebx
c0013ee3:	83 c4 18             	add    esp,0x18
c0013ee6:	5b                   	pop    ebx
c0013ee7:	c2 04 00             	ret    0x4

c0013eea <HardDiskController::HardDiskController(char const*)>:
c0013eea:	83 ec 0c             	sub    esp,0xc
c0013eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef1:	83 ec 08             	sub    esp,0x8
c0013ef4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ef8:	50                   	push   eax
c0013ef9:	e8 42 fe ff ff       	call   c0013d40 <Device::Device(char const*)>
c0013efe:	83 c4 10             	add    esp,0x10
c0013f01:	ba 48 ab 02 c0       	mov    edx,0xc002ab48
c0013f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f0a:	89 10                	mov    DWORD PTR [eax],edx
c0013f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f10:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013f1a:	90                   	nop
c0013f1b:	83 c4 0c             	add    esp,0xc
c0013f1e:	c3                   	ret    
c0013f1f:	90                   	nop

c0013f20 <HardDiskController::~HardDiskController()>:
c0013f20:	83 ec 0c             	sub    esp,0xc
c0013f23:	ba 48 ab 02 c0       	mov    edx,0xc002ab48
c0013f28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f2c:	89 10                	mov    DWORD PTR [eax],edx
c0013f2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f32:	83 ec 0c             	sub    esp,0xc
c0013f35:	50                   	push   eax
c0013f36:	e8 cf fa ff ff       	call   c0013a0a <Device::~Device()>
c0013f3b:	83 c4 10             	add    esp,0x10
c0013f3e:	90                   	nop
c0013f3f:	83 c4 0c             	add    esp,0xc
c0013f42:	c3                   	ret    
c0013f43:	90                   	nop

c0013f44 <HardDiskController::~HardDiskController()>:
c0013f44:	83 ec 0c             	sub    esp,0xc
c0013f47:	83 ec 0c             	sub    esp,0xc
c0013f4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f4e:	e8 cd ff ff ff       	call   c0013f20 <HardDiskController::~HardDiskController()>
c0013f53:	83 c4 10             	add    esp,0x10
c0013f56:	83 ec 08             	sub    esp,0x8
c0013f59:	68 58 01 00 00       	push   0x158
c0013f5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f62:	e8 c4 e6 ff ff       	call   c001262b <operator delete(void*, unsigned long)>
c0013f67:	83 c4 10             	add    esp,0x10
c0013f6a:	83 c4 0c             	add    esp,0xc
c0013f6d:	c3                   	ret    

c0013f6e <PhysicalDisk::eject()>:
c0013f6e:	83 c8 ff             	or     eax,0xffffffff
c0013f71:	c3                   	ret    

c0013f72 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013f72:	83 ec 0c             	sub    esp,0xc
c0013f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f79:	83 ec 08             	sub    esp,0x8
c0013f7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f80:	50                   	push   eax
c0013f81:	e8 ba fd ff ff       	call   c0013d40 <Device::Device(char const*)>
c0013f86:	83 c4 10             	add    esp,0x10
c0013f89:	ba 74 ab 02 c0       	mov    edx,0xc002ab74
c0013f8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f92:	89 10                	mov    DWORD PTR [eax],edx
c0013f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f98:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013f9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fa3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fae:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fbc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013fc0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fca:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013fd4:	90                   	nop
c0013fd5:	83 c4 0c             	add    esp,0xc
c0013fd8:	c3                   	ret    
c0013fd9:	90                   	nop

c0013fda <PhysicalDisk::startCache()>:
c0013fda:	56                   	push   esi
c0013fdb:	53                   	push   ebx
c0013fdc:	83 ec 10             	sub    esp,0x10
c0013fdf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013fe3:	6a 44                	push   0x44
c0013fe5:	e8 af b5 ff ff       	call   c000f599 <malloc>
c0013fea:	89 c6                	mov    esi,eax
c0013fec:	58                   	pop    eax
c0013fed:	5a                   	pop    edx
c0013fee:	53                   	push   ebx
c0013fef:	56                   	push   esi
c0013ff0:	e8 71 28 00 00       	call   c0016866 <VCache::VCache(PhysicalDisk*)>
c0013ff5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013ffb:	83 c4 14             	add    esp,0x14
c0013ffe:	5b                   	pop    ebx
c0013fff:	5e                   	pop    esi
c0014000:	c3                   	ret    
c0014001:	90                   	nop

c0014002 <PhysicalDisk::~PhysicalDisk()>:
c0014002:	83 ec 0c             	sub    esp,0xc
c0014005:	ba 74 ab 02 c0       	mov    edx,0xc002ab74
c001400a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001400e:	89 10                	mov    DWORD PTR [eax],edx
c0014010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014014:	83 ec 0c             	sub    esp,0xc
c0014017:	50                   	push   eax
c0014018:	e8 ed f9 ff ff       	call   c0013a0a <Device::~Device()>
c001401d:	83 c4 10             	add    esp,0x10
c0014020:	90                   	nop
c0014021:	83 c4 0c             	add    esp,0xc
c0014024:	c3                   	ret    
c0014025:	90                   	nop

c0014026 <PhysicalDisk::~PhysicalDisk()>:
c0014026:	83 ec 0c             	sub    esp,0xc
c0014029:	83 ec 0c             	sub    esp,0xc
c001402c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014030:	e8 cd ff ff ff       	call   c0014002 <PhysicalDisk::~PhysicalDisk()>
c0014035:	83 c4 10             	add    esp,0x10
c0014038:	83 ec 08             	sub    esp,0x8
c001403b:	68 6c 01 00 00       	push   0x16c
c0014040:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014044:	e8 e2 e5 ff ff       	call   c001262b <operator delete(void*, unsigned long)>
c0014049:	83 c4 10             	add    esp,0x10
c001404c:	83 c4 0c             	add    esp,0xc
c001404f:	c3                   	ret    

c0014050 <FPU::FPU(char const*)>:
c0014050:	83 ec 0c             	sub    esp,0xc
c0014053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014057:	83 ec 08             	sub    esp,0x8
c001405a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001405e:	50                   	push   eax
c001405f:	e8 dc fc ff ff       	call   c0013d40 <Device::Device(char const*)>
c0014064:	83 c4 10             	add    esp,0x10
c0014067:	ba b8 ab 02 c0       	mov    edx,0xc002abb8
c001406c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014070:	89 10                	mov    DWORD PTR [eax],edx
c0014072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014076:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014080:	90                   	nop
c0014081:	83 c4 0c             	add    esp,0xc
c0014084:	c3                   	ret    
c0014085:	90                   	nop

c0014086 <FPU::~FPU()>:
c0014086:	83 ec 0c             	sub    esp,0xc
c0014089:	ba b8 ab 02 c0       	mov    edx,0xc002abb8
c001408e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014092:	89 10                	mov    DWORD PTR [eax],edx
c0014094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014098:	83 ec 0c             	sub    esp,0xc
c001409b:	50                   	push   eax
c001409c:	e8 69 f9 ff ff       	call   c0013a0a <Device::~Device()>
c00140a1:	83 c4 10             	add    esp,0x10
c00140a4:	90                   	nop
c00140a5:	83 c4 0c             	add    esp,0xc
c00140a8:	c3                   	ret    
c00140a9:	90                   	nop

c00140aa <FPU::~FPU()>:
c00140aa:	83 ec 0c             	sub    esp,0xc
c00140ad:	83 ec 0c             	sub    esp,0xc
c00140b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140b4:	e8 cd ff ff ff       	call   c0014086 <FPU::~FPU()>
c00140b9:	83 c4 10             	add    esp,0x10
c00140bc:	83 ec 08             	sub    esp,0x8
c00140bf:	68 58 01 00 00       	push   0x158
c00140c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140c8:	e8 5e e5 ff ff       	call   c001262b <operator delete(void*, unsigned long)>
c00140cd:	83 c4 10             	add    esp,0x10
c00140d0:	83 c4 0c             	add    esp,0xc
c00140d3:	c3                   	ret    

c00140d4 <setupFPU()>:
c00140d4:	53                   	push   ebx
c00140d5:	83 ec 08             	sub    esp,0x8
c00140d8:	8b 15 e8 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9e8
c00140de:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00140e5:	74 19                	je     c0014100 <setupFPU()+0x2c>
c00140e7:	83 ec 0c             	sub    esp,0xc
c00140ea:	68 58 01 00 00       	push   0x158
c00140ef:	e8 a5 b4 ff ff       	call   c000f599 <malloc>
c00140f4:	89 c3                	mov    ebx,eax
c00140f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00140f9:	e8 c6 11 01 00       	call   c00252c4 <AVX::AVX()>
c00140fe:	eb 5b                	jmp    c001415b <setupFPU()+0x87>
c0014100:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014106:	84 c0                	test   al,al
c0014108:	79 19                	jns    c0014123 <setupFPU()+0x4f>
c001410a:	83 ec 0c             	sub    esp,0xc
c001410d:	68 58 01 00 00       	push   0x158
c0014112:	e8 82 b4 ff ff       	call   c000f599 <malloc>
c0014117:	89 c3                	mov    ebx,eax
c0014119:	89 04 24             	mov    DWORD PTR [esp],eax
c001411c:	e8 c9 12 01 00       	call   c00253ea <SSE::SSE()>
c0014121:	eb 38                	jmp    c001415b <setupFPU()+0x87>
c0014123:	a8 20                	test   al,0x20
c0014125:	74 19                	je     c0014140 <setupFPU()+0x6c>
c0014127:	83 ec 0c             	sub    esp,0xc
c001412a:	68 58 01 00 00       	push   0x158
c001412f:	e8 65 b4 ff ff       	call   c000f599 <malloc>
c0014134:	89 c3                	mov    ebx,eax
c0014136:	89 04 24             	mov    DWORD PTR [esp],eax
c0014139:	e8 16 12 01 00       	call   c0025354 <MMX::MMX()>
c001413e:	eb 1b                	jmp    c001415b <setupFPU()+0x87>
c0014140:	a8 10                	test   al,0x10
c0014142:	74 1c                	je     c0014160 <setupFPU()+0x8c>
c0014144:	83 ec 0c             	sub    esp,0xc
c0014147:	68 58 01 00 00       	push   0x158
c001414c:	e8 48 b4 ff ff       	call   c000f599 <malloc>
c0014151:	89 c3                	mov    ebx,eax
c0014153:	89 04 24             	mov    DWORD PTR [esp],eax
c0014156:	e8 1d 13 01 00       	call   c0025478 <x87::x87()>
c001415b:	83 c4 10             	add    esp,0x10
c001415e:	eb 24                	jmp    c0014184 <setupFPU()+0xb0>
c0014160:	83 e0 ef             	and    eax,0xffffffef
c0014163:	83 ec 0c             	sub    esp,0xc
c0014166:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001416c:	68 a4 ab 02 c0       	push   0xc002aba4
c0014171:	e8 8d e5 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0014176:	0f 20 c0             	mov    eax,cr0
c0014179:	83 c8 04             	or     eax,0x4
c001417c:	0f 22 c0             	mov    cr0,eax
c001417f:	31 db                	xor    ebx,ebx
c0014181:	83 c4 10             	add    esp,0x10
c0014184:	89 d8                	mov    eax,ebx
c0014186:	83 c4 08             	add    esp,0x8
c0014189:	5b                   	pop    ebx
c001418a:	c3                   	ret    
c001418b:	90                   	nop

c001418c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001418c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014190:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014194:	c1 e0 04             	shl    eax,0x4
c0014197:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001419b:	8d 50 10             	lea    edx,[eax+0x10]
c001419e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00141a4:	74 08                	je     c00141ae <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00141a6:	83 c0 04             	add    eax,0x4
c00141a9:	39 d0                	cmp    eax,edx
c00141ab:	75 f1                	jne    c001419e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00141ad:	c3                   	ret    
c00141ae:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00141b8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00141c2:	eb e2                	jmp    c00141a6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00141c4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00141c4:	57                   	push   edi
c00141c5:	31 c0                	xor    eax,eax
c00141c7:	56                   	push   esi
c00141c8:	53                   	push   ebx
c00141c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00141cd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141d1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00141d5:	89 da                	mov    edx,ebx
c00141d7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00141db:	c1 e2 04             	shl    edx,0x4
c00141de:	01 ca                	add    edx,ecx
c00141e0:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00141e8:	74 16                	je     c0014200 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00141ea:	40                   	inc    eax
c00141eb:	83 f8 04             	cmp    eax,0x4
c00141ee:	75 f0                	jne    c00141e0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00141f0:	c7 44 24 10 e8 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002abe8
c00141f8:	5b                   	pop    ebx
c00141f9:	5e                   	pop    esi
c00141fa:	5f                   	pop    edi
c00141fb:	e9 6f 5c 00 00       	jmp    c0019e6f <Krnl::panic(char const*)>
c0014200:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014203:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014206:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c001420c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014212:	5b                   	pop    ebx
c0014213:	5e                   	pop    esi
c0014214:	5f                   	pop    edi
c0014215:	c3                   	ret    

c0014216 <doubleFault(regs*, void*)>:
c0014216:	55                   	push   ebp
c0014217:	89 e5                	mov    ebp,esp
c0014219:	83 ec 08             	sub    esp,0x8
c001421c:	83 ec 0c             	sub    esp,0xc
c001421f:	68 f5 ab 02 c0       	push   0xc002abf5
c0014224:	e8 46 5c 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c0014229:	83 c4 10             	add    esp,0x10
c001422c:	90                   	nop
c001422d:	c9                   	leave  
c001422e:	c3                   	ret    
c001422f:	90                   	nop

c0014230 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014230:	56                   	push   esi
c0014231:	53                   	push   ebx
c0014232:	50                   	push   eax
c0014233:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014237:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001423b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014240:	75 35                	jne    c0014277 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014242:	8d 43 20             	lea    eax,[ebx+0x20]
c0014245:	31 d2                	xor    edx,edx
c0014247:	89 c1                	mov    ecx,eax
c0014249:	c1 e1 04             	shl    ecx,0x4
c001424c:	01 f1                	add    ecx,esi
c001424e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014256:	74 3e                	je     c0014296 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014258:	42                   	inc    edx
c0014259:	83 fa 04             	cmp    edx,0x4
c001425c:	75 f0                	jne    c001424e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001425e:	83 ec 0c             	sub    esp,0xc
c0014261:	68 0f ac 02 c0       	push   0xc002ac0f
c0014266:	e8 04 5c 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c001426b:	83 c4 10             	add    esp,0x10
c001426e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014273:	5a                   	pop    edx
c0014274:	5b                   	pop    ebx
c0014275:	5e                   	pop    esi
c0014276:	c3                   	ret    
c0014277:	83 ec 0c             	sub    esp,0xc
c001427a:	56                   	push   esi
c001427b:	e8 bc fb ff ff       	call   c0013e3c <Device::getName()>
c0014280:	83 c4 10             	add    esp,0x10
c0014283:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014286:	75 ba                	jne    c0014242 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014288:	83 fb 0f             	cmp    ebx,0xf
c001428b:	7f 29                	jg     c00142b6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001428d:	0f b6 9b 40 cc 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd33c0]
c0014294:	eb ac                	jmp    c0014242 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014296:	8d 04 82             	lea    eax,[edx+eax*4]
c0014299:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001429d:	8d 04 86             	lea    eax,[esi+eax*4]
c00142a0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00142a6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00142aa:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00142b0:	89 d8                	mov    eax,ebx
c00142b2:	5a                   	pop    edx
c00142b3:	5b                   	pop    ebx
c00142b4:	5e                   	pop    esi
c00142b5:	c3                   	ret    
c00142b6:	83 ec 0c             	sub    esp,0xc
c00142b9:	68 02 ac 02 c0       	push   0xc002ac02
c00142be:	e8 ac 5b 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c00142c3:	83 c4 10             	add    esp,0x10
c00142c6:	e9 77 ff ff ff       	jmp    c0014242 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00142cb:	90                   	nop

c00142cc <InterruptController::clearAllHandlers(int, bool)>:
c00142cc:	56                   	push   esi
c00142cd:	53                   	push   ebx
c00142ce:	52                   	push   edx
c00142cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00142d3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00142d7:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00142dc:	75 61                	jne    c001433f <InterruptController::clearAllHandlers(int, bool)+0x73>
c00142de:	8d 46 20             	lea    eax,[esi+0x20]
c00142e1:	c1 e6 04             	shl    esi,0x4
c00142e4:	c1 e0 04             	shl    eax,0x4
c00142e7:	01 de                	add    esi,ebx
c00142e9:	01 d8                	add    eax,ebx
c00142eb:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00142f5:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00142ff:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014309:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014313:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c001431d:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014327:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014331:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c001433b:	58                   	pop    eax
c001433c:	5b                   	pop    ebx
c001433d:	5e                   	pop    esi
c001433e:	c3                   	ret    
c001433f:	83 ec 0c             	sub    esp,0xc
c0014342:	53                   	push   ebx
c0014343:	e8 f4 fa ff ff       	call   c0013e3c <Device::getName()>
c0014348:	83 c4 10             	add    esp,0x10
c001434b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001434e:	75 8e                	jne    c00142de <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014350:	83 fe 0f             	cmp    esi,0xf
c0014353:	7f 09                	jg     c001435e <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014355:	0f b6 b6 40 cc 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd33c0]
c001435c:	eb 80                	jmp    c00142de <InterruptController::clearAllHandlers(int, bool)+0x12>
c001435e:	83 ec 0c             	sub    esp,0xc
c0014361:	68 1c ac 02 c0       	push   0xc002ac1c
c0014366:	e8 04 5b 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c001436b:	83 c4 10             	add    esp,0x10
c001436e:	e9 6b ff ff ff       	jmp    c00142de <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014373:	90                   	nop

c0014374 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014374:	56                   	push   esi
c0014375:	53                   	push   ebx
c0014376:	52                   	push   edx
c0014377:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001437b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001437f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014384:	75 3a                	jne    c00143c0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014386:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001438a:	8d 50 20             	lea    edx,[eax+0x20]
c001438d:	c1 e2 04             	shl    edx,0x4
c0014390:	8d 04 16             	lea    eax,[esi+edx*1]
c0014393:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014397:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001439d:	74 0b                	je     c00143aa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001439f:	83 c0 04             	add    eax,0x4
c00143a2:	39 d0                	cmp    eax,edx
c00143a4:	75 f1                	jne    c0014397 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00143a6:	58                   	pop    eax
c00143a7:	5b                   	pop    ebx
c00143a8:	5e                   	pop    esi
c00143a9:	c3                   	ret    
c00143aa:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00143b4:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00143be:	eb df                	jmp    c001439f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00143c0:	83 ec 0c             	sub    esp,0xc
c00143c3:	56                   	push   esi
c00143c4:	e8 73 fa ff ff       	call   c0013e3c <Device::getName()>
c00143c9:	83 c4 10             	add    esp,0x10
c00143cc:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00143cf:	75 b5                	jne    c0014386 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00143d1:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00143d6:	7f 11                	jg     c00143e9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00143d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143dc:	0f b6 80 40 cc 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd33c0]
c00143e3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00143e7:	eb 9d                	jmp    c0014386 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00143e9:	83 ec 0c             	sub    esp,0xc
c00143ec:	68 29 ac 02 c0       	push   0xc002ac29
c00143f1:	e8 79 5a 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c00143f6:	83 c4 10             	add    esp,0x10
c00143f9:	eb 8b                	jmp    c0014386 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00143fb <nmiHandler(regs*, void*)>:
c00143fb:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0014400:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014404:	e9 f7 a8 ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c0014409 <int_handler>:
c0014409:	55                   	push   ebp
c001440a:	57                   	push   edi
c001440b:	56                   	push   esi
c001440c:	53                   	push   ebx
c001440d:	83 ec 0c             	sub    esp,0xc
c0014410:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014414:	80 3d 24 05 03 c0 00 	cmp    BYTE PTR ds:0xc0030524,0x0
c001441b:	74 0b                	je     c0014428 <int_handler+0x1f>
c001441d:	fa                   	cli    
c001441e:	f4                   	hlt    
c001441f:	80 3d 24 05 03 c0 00 	cmp    BYTE PTR ds:0xc0030524,0x0
c0014426:	75 f5                	jne    c001441d <int_handler+0x14>
c0014428:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c001442d:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014430:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014436:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c001443c:	8d 43 e0             	lea    eax,[ebx-0x20]
c001443f:	83 f8 17             	cmp    eax,0x17
c0014442:	77 13                	ja     c0014457 <int_handler+0x4e>
c0014444:	83 ec 08             	sub    esp,0x8
c0014447:	8b 17                	mov    edx,DWORD PTR [edi]
c0014449:	8d 43 e0             	lea    eax,[ebx-0x20]
c001444c:	0f b6 c0             	movzx  eax,al
c001444f:	50                   	push   eax
c0014450:	57                   	push   edi
c0014451:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014454:	83 c4 10             	add    esp,0x10
c0014457:	83 c3 15             	add    ebx,0x15
c001445a:	c1 e3 04             	shl    ebx,0x4
c001445d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014461:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014468:	31 db                	xor    ebx,ebx
c001446a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001446e:	85 c0                	test   eax,eax
c0014470:	74 13                	je     c0014485 <int_handler+0x7c>
c0014472:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014475:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014479:	74 1c                	je     c0014497 <int_handler+0x8e>
c001447b:	83 ec 08             	sub    esp,0x8
c001447e:	52                   	push   edx
c001447f:	56                   	push   esi
c0014480:	ff d0                	call   eax
c0014482:	83 c4 10             	add    esp,0x10
c0014485:	43                   	inc    ebx
c0014486:	83 fb 04             	cmp    ebx,0x4
c0014489:	75 df                	jne    c001446a <int_handler+0x61>
c001448b:	83 c4 0c             	add    esp,0xc
c001448e:	31 c0                	xor    eax,eax
c0014490:	5b                   	pop    ebx
c0014491:	31 d2                	xor    edx,edx
c0014493:	5e                   	pop    esi
c0014494:	5f                   	pop    edi
c0014495:	5d                   	pop    ebp
c0014496:	c3                   	ret    
c0014497:	83 ec 08             	sub    esp,0x8
c001449a:	52                   	push   edx
c001449b:	56                   	push   esi
c001449c:	ff d0                	call   eax
c001449e:	83 c4 10             	add    esp,0x10
c00144a1:	83 c4 0c             	add    esp,0xc
c00144a4:	5b                   	pop    ebx
c00144a5:	5e                   	pop    esi
c00144a6:	5f                   	pop    edi
c00144a7:	5d                   	pop    ebp
c00144a8:	c3                   	ret    
c00144a9:	90                   	nop

c00144aa <InterruptController::InterruptController(char const*)>:
c00144aa:	83 ec 1c             	sub    esp,0x1c
c00144ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144b1:	83 ec 08             	sub    esp,0x8
c00144b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144b8:	50                   	push   eax
c00144b9:	e8 82 f8 ff ff       	call   c0013d40 <Device::Device(char const*)>
c00144be:	83 c4 10             	add    esp,0x10
c00144c1:	ba e4 ae 02 c0       	mov    edx,0xc002aee4
c00144c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ca:	89 10                	mov    DWORD PTR [eax],edx
c00144cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144d0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00144da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00144e2:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00144ea:	7f 5e                	jg     c001454a <InterruptController::InterruptController(char const*)+0xa0>
c00144ec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00144f4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00144f9:	7f 49                	jg     c0014544 <InterruptController::InterruptController(char const*)+0x9a>
c00144fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014503:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001450a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001450e:	01 ca                	add    edx,ecx
c0014510:	83 c2 54             	add    edx,0x54
c0014513:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001451b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001451f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014523:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001452a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001452e:	01 ca                	add    edx,ecx
c0014530:	81 c2 54 04 00 00    	add    edx,0x454
c0014536:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001453e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014542:	eb b0                	jmp    c00144f4 <InterruptController::InterruptController(char const*)+0x4a>
c0014544:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014548:	eb 98                	jmp    c00144e2 <InterruptController::InterruptController(char const*)+0x38>
c001454a:	90                   	nop
c001454b:	83 c4 1c             	add    esp,0x1c
c001454e:	c3                   	ret    
c001454f:	90                   	nop

c0014550 <InterruptController::~InterruptController()>:
c0014550:	83 ec 0c             	sub    esp,0xc
c0014553:	ba e4 ae 02 c0       	mov    edx,0xc002aee4
c0014558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001455c:	89 10                	mov    DWORD PTR [eax],edx
c001455e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014562:	83 ec 0c             	sub    esp,0xc
c0014565:	50                   	push   eax
c0014566:	e8 9f f4 ff ff       	call   c0013a0a <Device::~Device()>
c001456b:	83 c4 10             	add    esp,0x10
c001456e:	90                   	nop
c001456f:	83 c4 0c             	add    esp,0xc
c0014572:	c3                   	ret    
c0014573:	90                   	nop

c0014574 <InterruptController::~InterruptController()>:
c0014574:	83 ec 0c             	sub    esp,0xc
c0014577:	83 ec 0c             	sub    esp,0xc
c001457a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001457e:	e8 cd ff ff ff       	call   c0014550 <InterruptController::~InterruptController()>
c0014583:	83 c4 10             	add    esp,0x10
c0014586:	83 ec 08             	sub    esp,0x8
c0014589:	68 58 21 00 00       	push   0x2158
c001458e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014592:	e8 94 e0 ff ff       	call   c001262b <operator delete(void*, unsigned long)>
c0014597:	83 c4 10             	add    esp,0x10
c001459a:	83 c4 0c             	add    esp,0xc
c001459d:	c3                   	ret    

c001459e <displayDebugInfo(regs*)>:
c001459e:	55                   	push   ebp
c001459f:	57                   	push   edi
c00145a0:	56                   	push   esi
c00145a1:	53                   	push   ebx
c00145a2:	83 ec 24             	sub    esp,0x24
c00145a5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00145a9:	0f 20 c2             	mov    edx,cr0
c00145ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00145b0:	0f 20 d7             	mov    edi,cr2
c00145b3:	0f 20 de             	mov    esi,cr3
c00145b6:	0f 20 e5             	mov    ebp,cr4
c00145b9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00145bc:	68 36 ac 02 c0       	push   0xc002ac36
c00145c1:	e8 3d e1 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c00145c6:	59                   	pop    ecx
c00145c7:	58                   	pop    eax
c00145c8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00145cb:	68 41 ac 02 c0       	push   0xc002ac41
c00145d0:	e8 2e e1 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c00145d5:	58                   	pop    eax
c00145d6:	5a                   	pop    edx
c00145d7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00145da:	68 4c ac 02 c0       	push   0xc002ac4c
c00145df:	e8 1f e1 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c00145e4:	59                   	pop    ecx
c00145e5:	58                   	pop    eax
c00145e6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00145e9:	68 57 ac 02 c0       	push   0xc002ac57
c00145ee:	e8 10 e1 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c00145f3:	58                   	pop    eax
c00145f4:	5a                   	pop    edx
c00145f5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00145f8:	68 62 ac 02 c0       	push   0xc002ac62
c00145fd:	e8 01 e1 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0014602:	59                   	pop    ecx
c0014603:	58                   	pop    eax
c0014604:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014607:	68 6d ac 02 c0       	push   0xc002ac6d
c001460c:	e8 f2 e0 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0014611:	58                   	pop    eax
c0014612:	5a                   	pop    edx
c0014613:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014616:	68 78 ac 02 c0       	push   0xc002ac78
c001461b:	e8 e3 e0 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0014620:	59                   	pop    ecx
c0014621:	58                   	pop    eax
c0014622:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014625:	68 83 ac 02 c0       	push   0xc002ac83
c001462a:	e8 d4 e0 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001462f:	58                   	pop    eax
c0014630:	5a                   	pop    edx
c0014631:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014634:	68 8e ac 02 c0       	push   0xc002ac8e
c0014639:	e8 c5 e0 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001463e:	59                   	pop    ecx
c001463f:	58                   	pop    eax
c0014640:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014643:	68 9d ac 02 c0       	push   0xc002ac9d
c0014648:	e8 b6 e0 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001464d:	58                   	pop    eax
c001464e:	5a                   	pop    edx
c001464f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014652:	68 a8 ac 02 c0       	push   0xc002aca8
c0014657:	e8 a7 e0 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001465c:	59                   	pop    ecx
c001465d:	58                   	pop    eax
c001465e:	57                   	push   edi
c001465f:	68 b3 ac 02 c0       	push   0xc002acb3
c0014664:	e8 9a e0 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0014669:	58                   	pop    eax
c001466a:	5a                   	pop    edx
c001466b:	56                   	push   esi
c001466c:	68 be ac 02 c0       	push   0xc002acbe
c0014671:	e8 8d e0 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0014676:	59                   	pop    ecx
c0014677:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001467c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014682:	e8 06 bd ff ff       	call   c001038d <setActiveTerminal(VgaText*)>
c0014687:	58                   	pop    eax
c0014688:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001468b:	5a                   	pop    edx
c001468c:	c1 e0 05             	shl    eax,0x5
c001468f:	05 a0 c9 02 c0       	add    eax,0xc002c9a0
c0014694:	50                   	push   eax
c0014695:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001469a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146a0:	e8 f5 c1 ff ff       	call   c001089a <VgaText::puts(char const*)>
c00146a5:	59                   	pop    ecx
c00146a6:	58                   	pop    eax
c00146a7:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c00146ac:	68 c9 ac 02 c0       	push   0xc002acc9
c00146b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146b7:	e8 de c1 ff ff       	call   c001089a <VgaText::puts(char const*)>
c00146bc:	58                   	pop    eax
c00146bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146c2:	5a                   	pop    edx
c00146c3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00146c6:	83 c0 0c             	add    eax,0xc
c00146c9:	50                   	push   eax
c00146ca:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c00146cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146d5:	e8 c0 c1 ff ff       	call   c001089a <VgaText::puts(char const*)>
c00146da:	59                   	pop    ecx
c00146db:	58                   	pop    eax
c00146dc:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c00146e1:	68 d2 ac 02 c0       	push   0xc002acd2
c00146e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146ec:	e8 a9 c1 ff ff       	call   c001089a <VgaText::puts(char const*)>
c00146f1:	58                   	pop    eax
c00146f2:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c00146f7:	5a                   	pop    edx
c00146f8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00146fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014701:	e8 4e c1 ff ff       	call   c0010854 <VgaText::putx(unsigned int)>
c0014706:	59                   	pop    ecx
c0014707:	58                   	pop    eax
c0014708:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001470d:	68 da ac 02 c0       	push   0xc002acda
c0014712:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014718:	e8 7d c1 ff ff       	call   c001089a <VgaText::puts(char const*)>
c001471d:	58                   	pop    eax
c001471e:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0014723:	5a                   	pop    edx
c0014724:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014727:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001472d:	e8 22 c1 ff ff       	call   c0010854 <VgaText::putx(unsigned int)>
c0014732:	59                   	pop    ecx
c0014733:	58                   	pop    eax
c0014734:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0014739:	68 e2 ac 02 c0       	push   0xc002ace2
c001473e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014744:	e8 51 c1 ff ff       	call   c001089a <VgaText::puts(char const*)>
c0014749:	58                   	pop    eax
c001474a:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001474f:	5a                   	pop    edx
c0014750:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014753:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014759:	e8 f6 c0 ff ff       	call   c0010854 <VgaText::putx(unsigned int)>
c001475e:	59                   	pop    ecx
c001475f:	58                   	pop    eax
c0014760:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0014765:	68 ea ac 02 c0       	push   0xc002acea
c001476a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014770:	e8 25 c1 ff ff       	call   c001089a <VgaText::puts(char const*)>
c0014775:	58                   	pop    eax
c0014776:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001477b:	5a                   	pop    edx
c001477c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001477f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014785:	e8 ca c0 ff ff       	call   c0010854 <VgaText::putx(unsigned int)>
c001478a:	59                   	pop    ecx
c001478b:	58                   	pop    eax
c001478c:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0014791:	68 f2 ac 02 c0       	push   0xc002acf2
c0014796:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001479c:	e8 f9 c0 ff ff       	call   c001089a <VgaText::puts(char const*)>
c00147a1:	58                   	pop    eax
c00147a2:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c00147a7:	5a                   	pop    edx
c00147a8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00147ab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147b1:	e8 9e c0 ff ff       	call   c0010854 <VgaText::putx(unsigned int)>
c00147b6:	59                   	pop    ecx
c00147b7:	58                   	pop    eax
c00147b8:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c00147bd:	68 fa ac 02 c0       	push   0xc002acfa
c00147c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147c8:	e8 cd c0 ff ff       	call   c001089a <VgaText::puts(char const*)>
c00147cd:	58                   	pop    eax
c00147ce:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c00147d3:	5a                   	pop    edx
c00147d4:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00147d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147dd:	e8 72 c0 ff ff       	call   c0010854 <VgaText::putx(unsigned int)>
c00147e2:	59                   	pop    ecx
c00147e3:	58                   	pop    eax
c00147e4:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c00147e9:	68 02 ad 02 c0       	push   0xc002ad02
c00147ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147f4:	e8 a1 c0 ff ff       	call   c001089a <VgaText::puts(char const*)>
c00147f9:	58                   	pop    eax
c00147fa:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c00147ff:	5a                   	pop    edx
c0014800:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014804:	52                   	push   edx
c0014805:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001480b:	e8 44 c0 ff ff       	call   c0010854 <VgaText::putx(unsigned int)>
c0014810:	59                   	pop    ecx
c0014811:	58                   	pop    eax
c0014812:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0014817:	68 0b ad 02 c0       	push   0xc002ad0b
c001481c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014822:	e8 73 c0 ff ff       	call   c001089a <VgaText::puts(char const*)>
c0014827:	58                   	pop    eax
c0014828:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001482d:	5a                   	pop    edx
c001482e:	57                   	push   edi
c001482f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014835:	e8 1a c0 ff ff       	call   c0010854 <VgaText::putx(unsigned int)>
c001483a:	59                   	pop    ecx
c001483b:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0014840:	5f                   	pop    edi
c0014841:	68 13 ad 02 c0       	push   0xc002ad13
c0014846:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001484c:	e8 49 c0 ff ff       	call   c001089a <VgaText::puts(char const*)>
c0014851:	58                   	pop    eax
c0014852:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0014857:	5a                   	pop    edx
c0014858:	56                   	push   esi
c0014859:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001485f:	e8 f0 bf ff ff       	call   c0010854 <VgaText::putx(unsigned int)>
c0014864:	59                   	pop    ecx
c0014865:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001486a:	5e                   	pop    esi
c001486b:	68 1b ad 02 c0       	push   0xc002ad1b
c0014870:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014876:	e8 1f c0 ff ff       	call   c001089a <VgaText::puts(char const*)>
c001487b:	5f                   	pop    edi
c001487c:	58                   	pop    eax
c001487d:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0014882:	55                   	push   ebp
c0014883:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014889:	e8 c6 bf ff ff       	call   c0010854 <VgaText::putx(unsigned int)>
c001488e:	58                   	pop    eax
c001488f:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0014894:	5a                   	pop    edx
c0014895:	68 23 ad 02 c0       	push   0xc002ad23
c001489a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a0:	e8 f5 bf ff ff       	call   c001089a <VgaText::puts(char const*)>
c00148a5:	0f 21 c0             	mov    eax,db0
c00148a8:	59                   	pop    ecx
c00148a9:	5e                   	pop    esi
c00148aa:	50                   	push   eax
c00148ab:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c00148b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148b6:	e8 99 bf ff ff       	call   c0010854 <VgaText::putx(unsigned int)>
c00148bb:	5f                   	pop    edi
c00148bc:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c00148c1:	5d                   	pop    ebp
c00148c2:	68 2c ad 02 c0       	push   0xc002ad2c
c00148c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148cd:	e8 c8 bf ff ff       	call   c001089a <VgaText::puts(char const*)>
c00148d2:	0f 21 c8             	mov    eax,db1
c00148d5:	5a                   	pop    edx
c00148d6:	59                   	pop    ecx
c00148d7:	50                   	push   eax
c00148d8:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c00148dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148e3:	e8 6c bf ff ff       	call   c0010854 <VgaText::putx(unsigned int)>
c00148e8:	5e                   	pop    esi
c00148e9:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c00148ee:	5f                   	pop    edi
c00148ef:	68 34 ad 02 c0       	push   0xc002ad34
c00148f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148fa:	e8 9b bf ff ff       	call   c001089a <VgaText::puts(char const*)>
c00148ff:	0f 21 d0             	mov    eax,db2
c0014902:	5d                   	pop    ebp
c0014903:	5a                   	pop    edx
c0014904:	50                   	push   eax
c0014905:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001490a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014910:	e8 3f bf ff ff       	call   c0010854 <VgaText::putx(unsigned int)>
c0014915:	59                   	pop    ecx
c0014916:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001491b:	5e                   	pop    esi
c001491c:	68 3c ad 02 c0       	push   0xc002ad3c
c0014921:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014927:	e8 6e bf ff ff       	call   c001089a <VgaText::puts(char const*)>
c001492c:	0f 21 d8             	mov    eax,db3
c001492f:	5f                   	pop    edi
c0014930:	5d                   	pop    ebp
c0014931:	50                   	push   eax
c0014932:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0014937:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001493d:	e8 12 bf ff ff       	call   c0010854 <VgaText::putx(unsigned int)>
c0014942:	58                   	pop    eax
c0014943:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0014948:	5a                   	pop    edx
c0014949:	68 44 ad 02 c0       	push   0xc002ad44
c001494e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014954:	e8 41 bf ff ff       	call   c001089a <VgaText::puts(char const*)>
c0014959:	0f 21 f0             	mov    eax,db6
c001495c:	59                   	pop    ecx
c001495d:	5e                   	pop    esi
c001495e:	50                   	push   eax
c001495f:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0014964:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001496a:	e8 e5 be ff ff       	call   c0010854 <VgaText::putx(unsigned int)>
c001496f:	5f                   	pop    edi
c0014970:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0014975:	5d                   	pop    ebp
c0014976:	68 4c ad 02 c0       	push   0xc002ad4c
c001497b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014981:	e8 14 bf ff ff       	call   c001089a <VgaText::puts(char const*)>
c0014986:	0f 21 f8             	mov    eax,db7
c0014989:	5a                   	pop    edx
c001498a:	59                   	pop    ecx
c001498b:	50                   	push   eax
c001498c:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0014991:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014997:	e8 b8 be ff ff       	call   c0010854 <VgaText::putx(unsigned int)>
c001499c:	5e                   	pop    esi
c001499d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00149a0:	e8 43 86 00 00       	call   c001cfe8 <Thr::getDriverNameFromAddress(unsigned long)>
c00149a5:	83 c4 10             	add    esp,0x10
c00149a8:	85 c0                	test   eax,eax
c00149aa:	74 7d                	je     c0014a29 <displayDebugInfo(regs*)+0x48b>
c00149ac:	89 c6                	mov    esi,eax
c00149ae:	50                   	push   eax
c00149af:	50                   	push   eax
c00149b0:	56                   	push   esi
c00149b1:	68 54 ad 02 c0       	push   0xc002ad54
c00149b6:	e8 48 dd ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c00149bb:	5a                   	pop    edx
c00149bc:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c00149c1:	59                   	pop    ecx
c00149c2:	68 62 ad 02 c0       	push   0xc002ad62
c00149c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149cd:	e8 c8 be ff ff       	call   c001089a <VgaText::puts(char const*)>
c00149d2:	5f                   	pop    edi
c00149d3:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c00149d8:	5d                   	pop    ebp
c00149d9:	56                   	push   esi
c00149da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149e0:	e8 b5 be ff ff       	call   c001089a <VgaText::puts(char const*)>
c00149e5:	58                   	pop    eax
c00149e6:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c00149eb:	5a                   	pop    edx
c00149ec:	68 6e ad 02 c0       	push   0xc002ad6e
c00149f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149f7:	e8 9e be ff ff       	call   c001089a <VgaText::puts(char const*)>
c00149fc:	59                   	pop    ecx
c00149fd:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0014a02:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014a08:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014a0b:	e8 0f 86 00 00       	call   c001d01f <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014a10:	5b                   	pop    ebx
c0014a11:	5d                   	pop    ebp
c0014a12:	50                   	push   eax
c0014a13:	57                   	push   edi
c0014a14:	e8 3b be ff ff       	call   c0010854 <VgaText::putx(unsigned int)>
c0014a19:	58                   	pop    eax
c0014a1a:	5a                   	pop    edx
c0014a1b:	56                   	push   esi
c0014a1c:	68 7a ad 02 c0       	push   0xc002ad7a
c0014a21:	e8 dd dc ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0014a26:	83 c4 10             	add    esp,0x10
c0014a29:	fa                   	cli    
c0014a2a:	f4                   	hlt    
c0014a2b:	eb fe                	jmp    c0014a2b <displayDebugInfo(regs*)+0x48d>

c0014a2d <x87EmulHandler(regs*, void*)>:
c0014a2d:	83 ec 0c             	sub    esp,0xc
c0014a30:	0f 20 c2             	mov    edx,cr0
c0014a33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a38:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014a3c:	75 4b                	jne    c0014a89 <x87EmulHandler(regs*, void*)+0x5c>
c0014a3e:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0014a43:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014a49:	85 c0                	test   eax,eax
c0014a4b:	74 05                	je     c0014a52 <x87EmulHandler(regs*, void*)+0x25>
c0014a4d:	83 e2 08             	and    edx,0x8
c0014a50:	75 17                	jne    c0014a69 <x87EmulHandler(regs*, void*)+0x3c>
c0014a52:	83 ec 0c             	sub    esp,0xc
c0014a55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a59:	e8 5b a9 00 00       	call   c001f3b9 <Vm::x87Handler(regs*)>
c0014a5e:	83 c4 10             	add    esp,0x10
c0014a61:	84 c0                	test   al,al
c0014a63:	74 24                	je     c0014a89 <x87EmulHandler(regs*, void*)+0x5c>
c0014a65:	83 c4 0c             	add    esp,0xc
c0014a68:	c3                   	ret    
c0014a69:	83 ec 0c             	sub    esp,0xc
c0014a6c:	68 a0 ad 02 c0       	push   0xc002ada0
c0014a71:	e8 8d dc ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0014a76:	0f 06                	clts   
c0014a78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a7d:	83 c4 10             	add    esp,0x10
c0014a80:	a3 68 db 02 c0       	mov    ds:0xc002db68,eax
c0014a85:	83 c4 0c             	add    esp,0xc
c0014a88:	c3                   	ret    
c0014a89:	83 ec 0c             	sub    esp,0xc
c0014a8c:	68 8a ad 02 c0       	push   0xc002ad8a
c0014a91:	e8 6d dc ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0014a96:	5a                   	pop    edx
c0014a97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a9b:	e8 fe fa ff ff       	call   c001459e <displayDebugInfo(regs*)>

c0014aa0 <gpFault(regs*, void*)>:
c0014aa0:	53                   	push   ebx
c0014aa1:	83 ec 14             	sub    esp,0x14
c0014aa4:	c7 05 64 db 02 c0 92 e8 01 c0 	mov    DWORD PTR ds:0xc002db64,0xc001e892
c0014aae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014ab2:	53                   	push   ebx
c0014ab3:	e8 da 9d 00 00       	call   c001e892 <Vm::faultHandler(regs*)>
c0014ab8:	83 c4 10             	add    esp,0x10
c0014abb:	84 c0                	test   al,al
c0014abd:	74 05                	je     c0014ac4 <gpFault(regs*, void*)+0x24>
c0014abf:	83 c4 08             	add    esp,0x8
c0014ac2:	5b                   	pop    ebx
c0014ac3:	c3                   	ret    
c0014ac4:	83 ec 0c             	sub    esp,0xc
c0014ac7:	68 ad ad 02 c0       	push   0xc002adad
c0014acc:	e8 32 dc ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0014ad1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ad4:	e8 c5 fa ff ff       	call   c001459e <displayDebugInfo(regs*)>

c0014ad9 <pgFault(regs*, void*)>:
c0014ad9:	83 ec 18             	sub    esp,0x18
c0014adc:	68 c8 ad 02 c0       	push   0xc002adc8
c0014ae1:	e8 1d dc ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0014ae6:	0f 20 d0             	mov    eax,cr2
c0014ae9:	5a                   	pop    edx
c0014aea:	59                   	pop    ecx
c0014aeb:	50                   	push   eax
c0014aec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014af1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014af4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014afa:	e8 2d d7 ff ff       	call   c001222c <VAS::tryLoadBackOffDisk(unsigned long)>
c0014aff:	83 c4 10             	add    esp,0x10
c0014b02:	84 c0                	test   al,al
c0014b04:	74 04                	je     c0014b0a <pgFault(regs*, void*)+0x31>
c0014b06:	83 c4 0c             	add    esp,0xc
c0014b09:	c3                   	ret    
c0014b0a:	83 ec 0c             	sub    esp,0xc
c0014b0d:	68 d2 ad 02 c0       	push   0xc002add2
c0014b12:	e8 ec db ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0014b17:	58                   	pop    eax
c0014b18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b1c:	e8 7d fa ff ff       	call   c001459e <displayDebugInfo(regs*)>

c0014b21 <otherISRHandler(regs*, void*)>:
c0014b21:	53                   	push   ebx
c0014b22:	83 ec 0c             	sub    esp,0xc
c0014b25:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014b29:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014b2c:	50                   	push   eax
c0014b2d:	50                   	push   eax
c0014b2e:	68 df ad 02 c0       	push   0xc002addf
c0014b33:	e8 cb db ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0014b38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b3b:	e8 5e fa ff ff       	call   c001459e <displayDebugInfo(regs*)>

c0014b40 <opcodeFault(regs*, void*)>:
c0014b40:	55                   	push   ebp
c0014b41:	89 e5                	mov    ebp,esp
c0014b43:	56                   	push   esi
c0014b44:	53                   	push   ebx
c0014b45:	83 ec 40             	sub    esp,0x40
c0014b48:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0014b4d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014b53:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014b59:	84 c0                	test   al,al
c0014b5b:	74 24                	je     c0014b81 <opcodeFault(regs*, void*)+0x41>
c0014b5d:	83 ec 0c             	sub    esp,0xc
c0014b60:	68 fc ad 02 c0       	push   0xc002adfc
c0014b65:	e8 99 db ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0014b6a:	83 c4 10             	add    esp,0x10
c0014b6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b70:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b73:	8d 50 19             	lea    edx,[eax+0x19]
c0014b76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b79:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b7c:	e9 d5 05 00 00       	jmp    c0015156 <opcodeFault(regs*, void*)+0x616>
c0014b81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b84:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b87:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014b8a:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014b8e:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014b92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b95:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b98:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014b9b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b9e:	8a 00                	mov    al,BYTE PTR [eax]
c0014ba0:	3c f0                	cmp    al,0xf0
c0014ba2:	75 17                	jne    c0014bbb <opcodeFault(regs*, void*)+0x7b>
c0014ba4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ba7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014baa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bad:	8d 50 01             	lea    edx,[eax+0x1]
c0014bb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bb3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bb6:	e9 da 00 00 00       	jmp    c0014c95 <opcodeFault(regs*, void*)+0x155>
c0014bbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bbe:	8a 00                	mov    al,BYTE PTR [eax]
c0014bc0:	3c f2                	cmp    al,0xf2
c0014bc2:	74 09                	je     c0014bcd <opcodeFault(regs*, void*)+0x8d>
c0014bc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bc7:	8a 00                	mov    al,BYTE PTR [eax]
c0014bc9:	3c f3                	cmp    al,0xf3
c0014bcb:	75 1b                	jne    c0014be8 <opcodeFault(regs*, void*)+0xa8>
c0014bcd:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014bd1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bda:	8d 50 01             	lea    edx,[eax+0x1]
c0014bdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014be0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014be3:	e9 ad 00 00 00       	jmp    c0014c95 <opcodeFault(regs*, void*)+0x155>
c0014be8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014beb:	8a 00                	mov    al,BYTE PTR [eax]
c0014bed:	3c 66                	cmp    al,0x66
c0014bef:	75 1f                	jne    c0014c10 <opcodeFault(regs*, void*)+0xd0>
c0014bf1:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014bf5:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014bf9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bff:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c02:	8d 50 01             	lea    edx,[eax+0x1]
c0014c05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c08:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c0b:	e9 85 00 00 00       	jmp    c0014c95 <opcodeFault(regs*, void*)+0x155>
c0014c10:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c13:	8a 00                	mov    al,BYTE PTR [eax]
c0014c15:	3c 67                	cmp    al,0x67
c0014c17:	75 18                	jne    c0014c31 <opcodeFault(regs*, void*)+0xf1>
c0014c19:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c1d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c23:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c26:	8d 50 01             	lea    edx,[eax+0x1]
c0014c29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c2c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c2f:	eb 64                	jmp    c0014c95 <opcodeFault(regs*, void*)+0x155>
c0014c31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c34:	8a 00                	mov    al,BYTE PTR [eax]
c0014c36:	3c 2e                	cmp    al,0x2e
c0014c38:	74 09                	je     c0014c43 <opcodeFault(regs*, void*)+0x103>
c0014c3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c3d:	8a 00                	mov    al,BYTE PTR [eax]
c0014c3f:	3c 3e                	cmp    al,0x3e
c0014c41:	75 18                	jne    c0014c5b <opcodeFault(regs*, void*)+0x11b>
c0014c43:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c47:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c4d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c50:	8d 50 01             	lea    edx,[eax+0x1]
c0014c53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c56:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c59:	eb 3a                	jmp    c0014c95 <opcodeFault(regs*, void*)+0x155>
c0014c5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c5e:	8a 00                	mov    al,BYTE PTR [eax]
c0014c60:	3c 36                	cmp    al,0x36
c0014c62:	74 1b                	je     c0014c7f <opcodeFault(regs*, void*)+0x13f>
c0014c64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c67:	8a 00                	mov    al,BYTE PTR [eax]
c0014c69:	3c 26                	cmp    al,0x26
c0014c6b:	74 12                	je     c0014c7f <opcodeFault(regs*, void*)+0x13f>
c0014c6d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c70:	8a 00                	mov    al,BYTE PTR [eax]
c0014c72:	3c 64                	cmp    al,0x64
c0014c74:	74 09                	je     c0014c7f <opcodeFault(regs*, void*)+0x13f>
c0014c76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c79:	8a 00                	mov    al,BYTE PTR [eax]
c0014c7b:	3c 65                	cmp    al,0x65
c0014c7d:	75 16                	jne    c0014c95 <opcodeFault(regs*, void*)+0x155>
c0014c7f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c83:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c89:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c8c:	8d 50 01             	lea    edx,[eax+0x1]
c0014c8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c92:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c98:	8a 00                	mov    al,BYTE PTR [eax]
c0014c9a:	3c 0f                	cmp    al,0xf
c0014c9c:	0f 85 ad 00 00 00    	jne    c0014d4f <opcodeFault(regs*, void*)+0x20f>
c0014ca2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ca5:	40                   	inc    eax
c0014ca6:	8a 00                	mov    al,BYTE PTR [eax]
c0014ca8:	3c c2                	cmp    al,0xc2
c0014caa:	74 0e                	je     c0014cba <opcodeFault(regs*, void*)+0x17a>
c0014cac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014caf:	40                   	inc    eax
c0014cb0:	8a 00                	mov    al,BYTE PTR [eax]
c0014cb2:	3c c3                	cmp    al,0xc3
c0014cb4:	0f 85 95 00 00 00    	jne    c0014d4f <opcodeFault(regs*, void*)+0x20f>
c0014cba:	83 ec 0c             	sub    esp,0xc
c0014cbd:	68 1f ae 02 c0       	push   0xc002ae1f
c0014cc2:	e8 3c da ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0014cc7:	83 c4 10             	add    esp,0x10
c0014cca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ccd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cd0:	8d 50 01             	lea    edx,[eax+0x1]
c0014cd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cd9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cdc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cdf:	8a 00                	mov    al,BYTE PTR [eax]
c0014ce1:	8d 50 fe             	lea    edx,[eax-0x2]
c0014ce4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ce7:	88 10                	mov    BYTE PTR [eax],dl
c0014ce9:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014cec:	50                   	push   eax
c0014ced:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014cf0:	50                   	push   eax
c0014cf1:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014cf4:	50                   	push   eax
c0014cf5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014cf8:	e8 8b 48 00 00       	call   c0019588 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014cfd:	83 c4 10             	add    esp,0x10
c0014d00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d03:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d06:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014d09:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014d0c:	01 d0                	add    eax,edx
c0014d0e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014d11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d14:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d17:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014d1a:	48                   	dec    eax
c0014d1b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014d1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d21:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014d24:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2a:	83 ec 04             	sub    esp,0x4
c0014d2d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014d30:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014d33:	50                   	push   eax
c0014d34:	e8 7b b4 fe ff       	call   c00001b4 <voodooXADD>
c0014d39:	83 c4 10             	add    esp,0x10
c0014d3c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014d3f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014d42:	01 c2                	add    edx,eax
c0014d44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d47:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d4a:	e9 07 04 00 00       	jmp    c0015156 <opcodeFault(regs*, void*)+0x616>
c0014d4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d52:	8a 00                	mov    al,BYTE PTR [eax]
c0014d54:	3c 0f                	cmp    al,0xf
c0014d56:	0f 85 8b 01 00 00    	jne    c0014ee7 <opcodeFault(regs*, void*)+0x3a7>
c0014d5c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d5f:	40                   	inc    eax
c0014d60:	8a 00                	mov    al,BYTE PTR [eax]
c0014d62:	3c c7                	cmp    al,0xc7
c0014d64:	0f 86 7d 01 00 00    	jbe    c0014ee7 <opcodeFault(regs*, void*)+0x3a7>
c0014d6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d6d:	40                   	inc    eax
c0014d6e:	8a 00                	mov    al,BYTE PTR [eax]
c0014d70:	3c cf                	cmp    al,0xcf
c0014d72:	0f 87 6f 01 00 00    	ja     c0014ee7 <opcodeFault(regs*, void*)+0x3a7>
c0014d78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d7b:	40                   	inc    eax
c0014d7c:	8a 00                	mov    al,BYTE PTR [eax]
c0014d7e:	83 c0 38             	add    eax,0x38
c0014d81:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014d84:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014d88:	75 0b                	jne    c0014d95 <opcodeFault(regs*, void*)+0x255>
c0014d8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d8d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014d90:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d93:	eb 75                	jmp    c0014e0a <opcodeFault(regs*, void*)+0x2ca>
c0014d95:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014d99:	75 0b                	jne    c0014da6 <opcodeFault(regs*, void*)+0x266>
c0014d9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d9e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014da1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014da4:	eb 64                	jmp    c0014e0a <opcodeFault(regs*, void*)+0x2ca>
c0014da6:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014daa:	75 0b                	jne    c0014db7 <opcodeFault(regs*, void*)+0x277>
c0014dac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014daf:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014db2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014db5:	eb 53                	jmp    c0014e0a <opcodeFault(regs*, void*)+0x2ca>
c0014db7:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014dbb:	75 0b                	jne    c0014dc8 <opcodeFault(regs*, void*)+0x288>
c0014dbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014dc3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014dc6:	eb 42                	jmp    c0014e0a <opcodeFault(regs*, void*)+0x2ca>
c0014dc8:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014dcc:	75 0b                	jne    c0014dd9 <opcodeFault(regs*, void*)+0x299>
c0014dce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd1:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014dd4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014dd7:	eb 31                	jmp    c0014e0a <opcodeFault(regs*, void*)+0x2ca>
c0014dd9:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014ddd:	75 0b                	jne    c0014dea <opcodeFault(regs*, void*)+0x2aa>
c0014ddf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014de5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014de8:	eb 20                	jmp    c0014e0a <opcodeFault(regs*, void*)+0x2ca>
c0014dea:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014dee:	75 0b                	jne    c0014dfb <opcodeFault(regs*, void*)+0x2bb>
c0014df0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014df3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014df6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014df9:	eb 0f                	jmp    c0014e0a <opcodeFault(regs*, void*)+0x2ca>
c0014dfb:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014dff:	75 09                	jne    c0014e0a <opcodeFault(regs*, void*)+0x2ca>
c0014e01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e04:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014e07:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e0a:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014e0e:	74 10                	je     c0014e20 <opcodeFault(regs*, void*)+0x2e0>
c0014e10:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014e17:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014e1e:	eb 2d                	jmp    c0014e4d <opcodeFault(regs*, void*)+0x30d>
c0014e20:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e23:	c1 e0 18             	shl    eax,0x18
c0014e26:	89 c2                	mov    edx,eax
c0014e28:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e2b:	c1 e0 08             	shl    eax,0x8
c0014e2e:	25 00 00 ff 00       	and    eax,0xff0000
c0014e33:	09 c2                	or     edx,eax
c0014e35:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e38:	c1 e8 08             	shr    eax,0x8
c0014e3b:	25 00 ff 00 00       	and    eax,0xff00
c0014e40:	09 c2                	or     edx,eax
c0014e42:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e45:	c1 e8 18             	shr    eax,0x18
c0014e48:	09 d0                	or     eax,edx
c0014e4a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e4d:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014e51:	75 0b                	jne    c0014e5e <opcodeFault(regs*, void*)+0x31e>
c0014e53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e56:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e59:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014e5c:	eb 75                	jmp    c0014ed3 <opcodeFault(regs*, void*)+0x393>
c0014e5e:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014e62:	75 0b                	jne    c0014e6f <opcodeFault(regs*, void*)+0x32f>
c0014e64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e67:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e6a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014e6d:	eb 64                	jmp    c0014ed3 <opcodeFault(regs*, void*)+0x393>
c0014e6f:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014e73:	75 0b                	jne    c0014e80 <opcodeFault(regs*, void*)+0x340>
c0014e75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e78:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e7b:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e7e:	eb 53                	jmp    c0014ed3 <opcodeFault(regs*, void*)+0x393>
c0014e80:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014e84:	75 0b                	jne    c0014e91 <opcodeFault(regs*, void*)+0x351>
c0014e86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e89:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e8c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014e8f:	eb 42                	jmp    c0014ed3 <opcodeFault(regs*, void*)+0x393>
c0014e91:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014e95:	75 0b                	jne    c0014ea2 <opcodeFault(regs*, void*)+0x362>
c0014e97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e9d:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014ea0:	eb 31                	jmp    c0014ed3 <opcodeFault(regs*, void*)+0x393>
c0014ea2:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014ea6:	75 0b                	jne    c0014eb3 <opcodeFault(regs*, void*)+0x373>
c0014ea8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eab:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014eae:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014eb1:	eb 20                	jmp    c0014ed3 <opcodeFault(regs*, void*)+0x393>
c0014eb3:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014eb7:	75 0b                	jne    c0014ec4 <opcodeFault(regs*, void*)+0x384>
c0014eb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ebc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ebf:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014ec2:	eb 0f                	jmp    c0014ed3 <opcodeFault(regs*, void*)+0x393>
c0014ec4:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014ec8:	75 09                	jne    c0014ed3 <opcodeFault(regs*, void*)+0x393>
c0014eca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ecd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ed0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014ed3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ed9:	8d 50 02             	lea    edx,[eax+0x2]
c0014edc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014edf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ee2:	e9 6f 02 00 00       	jmp    c0015156 <opcodeFault(regs*, void*)+0x616>
c0014ee7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eea:	8a 00                	mov    al,BYTE PTR [eax]
c0014eec:	3c 0f                	cmp    al,0xf
c0014eee:	0f 85 8d 01 00 00    	jne    c0015081 <opcodeFault(regs*, void*)+0x541>
c0014ef4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ef7:	40                   	inc    eax
c0014ef8:	8a 00                	mov    al,BYTE PTR [eax]
c0014efa:	3c c7                	cmp    al,0xc7
c0014efc:	0f 85 7f 01 00 00    	jne    c0015081 <opcodeFault(regs*, void*)+0x541>
c0014f02:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f08:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f0b:	8d 50 01             	lea    edx,[eax+0x1]
c0014f0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f11:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f14:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014f17:	50                   	push   eax
c0014f18:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014f1b:	50                   	push   eax
c0014f1c:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014f1f:	50                   	push   eax
c0014f20:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014f23:	e8 60 46 00 00       	call   c0019588 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014f28:	83 c4 10             	add    esp,0x10
c0014f2b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014f2e:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014f31:	83 f0 01             	xor    eax,0x1
c0014f34:	84 c0                	test   al,al
c0014f36:	0f 84 45 01 00 00    	je     c0015081 <opcodeFault(regs*, void*)+0x541>
c0014f3c:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014f3f:	3c 01                	cmp    al,0x1
c0014f41:	0f 85 3a 01 00 00    	jne    c0015081 <opcodeFault(regs*, void*)+0x541>
c0014f47:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014f4a:	83 f0 01             	xor    eax,0x1
c0014f4d:	84 c0                	test   al,al
c0014f4f:	0f 84 2c 01 00 00    	je     c0015081 <opcodeFault(regs*, void*)+0x541>
c0014f55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f58:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f5b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f5e:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014f65:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014f68:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014f6b:	89 c2                	mov    edx,eax
c0014f6d:	b8 00 00 00 00       	mov    eax,0x0
c0014f72:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f75:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014f78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f7b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014f7e:	ba 00 00 00 00       	mov    edx,0x0
c0014f83:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014f86:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014f89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014f8f:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014f92:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014f99:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014f9c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014f9f:	89 c2                	mov    edx,eax
c0014fa1:	b8 00 00 00 00       	mov    eax,0x0
c0014fa6:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014fa9:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014fac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014faf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014fb2:	ba 00 00 00 00       	mov    edx,0x0
c0014fb7:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014fba:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014fbd:	fa                   	cli    
c0014fbe:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c0014fc3:	40                   	inc    eax
c0014fc4:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c0014fc9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014fcc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014fcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fd1:	89 c1                	mov    ecx,eax
c0014fd3:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014fd6:	89 cb                	mov    ebx,ecx
c0014fd8:	89 d0                	mov    eax,edx
c0014fda:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014fdd:	89 c6                	mov    esi,eax
c0014fdf:	89 f0                	mov    eax,esi
c0014fe1:	09 d8                	or     eax,ebx
c0014fe3:	85 c0                	test   eax,eax
c0014fe5:	75 21                	jne    c0015008 <opcodeFault(regs*, void*)+0x4c8>
c0014fe7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014fea:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014fed:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014ff0:	89 01                	mov    DWORD PTR [ecx],eax
c0014ff2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ffb:	83 c8 40             	or     eax,0x40
c0014ffe:	89 c2                	mov    edx,eax
c0015000:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015003:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015006:	eb 3e                	jmp    c0015046 <opcodeFault(regs*, void*)+0x506>
c0015008:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001500b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001500e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015010:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015013:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015016:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001501c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001501f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015022:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015025:	89 d0                	mov    eax,edx
c0015027:	31 d2                	xor    edx,edx
c0015029:	89 c3                	mov    ebx,eax
c001502b:	89 d6                	mov    esi,edx
c001502d:	89 da                	mov    edx,ebx
c001502f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015032:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015038:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001503b:	83 e0 bf             	and    eax,0xffffffbf
c001503e:	89 c2                	mov    edx,eax
c0015040:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015043:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015046:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001504b:	48                   	dec    eax
c001504c:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c0015051:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c0015056:	85 c0                	test   eax,eax
c0015058:	75 01                	jne    c001505b <opcodeFault(regs*, void*)+0x51b>
c001505a:	fb                   	sti    
c001505b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001505e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015061:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015064:	01 c2                	add    edx,eax
c0015066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015069:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001506c:	83 ec 0c             	sub    esp,0xc
c001506f:	68 2e ae 02 c0       	push   0xc002ae2e
c0015074:	e8 8a d6 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0015079:	83 c4 10             	add    esp,0x10
c001507c:	e9 d5 00 00 00       	jmp    c0015156 <opcodeFault(regs*, void*)+0x616>
c0015081:	83 ec 0c             	sub    esp,0xc
c0015084:	68 41 ae 02 c0       	push   0xc002ae41
c0015089:	e8 75 d6 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001508e:	83 c4 10             	add    esp,0x10
c0015091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015094:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001509a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001509d:	c1 e0 04             	shl    eax,0x4
c00150a0:	01 d0                	add    eax,edx
c00150a2:	83 c0 03             	add    eax,0x3
c00150a5:	8a 00                	mov    al,BYTE PTR [eax]
c00150a7:	0f b6 d8             	movzx  ebx,al
c00150aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ad:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00150b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00150b6:	c1 e0 04             	shl    eax,0x4
c00150b9:	01 d0                	add    eax,edx
c00150bb:	83 c0 02             	add    eax,0x2
c00150be:	8a 00                	mov    al,BYTE PTR [eax]
c00150c0:	0f b6 c8             	movzx  ecx,al
c00150c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00150c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150cc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00150cf:	c1 e0 04             	shl    eax,0x4
c00150d2:	01 d0                	add    eax,edx
c00150d4:	40                   	inc    eax
c00150d5:	8a 00                	mov    al,BYTE PTR [eax]
c00150d7:	0f b6 d0             	movzx  edx,al
c00150da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150dd:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00150e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00150e6:	c1 e0 04             	shl    eax,0x4
c00150e9:	01 f0                	add    eax,esi
c00150eb:	8a 00                	mov    al,BYTE PTR [eax]
c00150ed:	0f b6 c0             	movzx  eax,al
c00150f0:	83 ec 0c             	sub    esp,0xc
c00150f3:	53                   	push   ebx
c00150f4:	51                   	push   ecx
c00150f5:	52                   	push   edx
c00150f6:	50                   	push   eax
c00150f7:	68 54 ae 02 c0       	push   0xc002ae54
c00150fc:	e8 02 d6 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0015101:	83 c4 20             	add    esp,0x20
c0015104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015107:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001510a:	83 c0 03             	add    eax,0x3
c001510d:	8a 00                	mov    al,BYTE PTR [eax]
c001510f:	0f b6 d8             	movzx  ebx,al
c0015112:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015115:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015118:	83 c0 02             	add    eax,0x2
c001511b:	8a 00                	mov    al,BYTE PTR [eax]
c001511d:	0f b6 c8             	movzx  ecx,al
c0015120:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015123:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015126:	40                   	inc    eax
c0015127:	8a 00                	mov    al,BYTE PTR [eax]
c0015129:	0f b6 d0             	movzx  edx,al
c001512c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001512f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015132:	8a 00                	mov    al,BYTE PTR [eax]
c0015134:	0f b6 c0             	movzx  eax,al
c0015137:	83 ec 0c             	sub    esp,0xc
c001513a:	53                   	push   ebx
c001513b:	51                   	push   ecx
c001513c:	52                   	push   edx
c001513d:	50                   	push   eax
c001513e:	68 7c ae 02 c0       	push   0xc002ae7c
c0015143:	e8 bb d5 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0015148:	83 c4 20             	add    esp,0x20
c001514b:	83 ec 0c             	sub    esp,0xc
c001514e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015151:	e8 48 f4 ff ff       	call   c001459e <displayDebugInfo(regs*)>
c0015156:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015159:	5b                   	pop    ebx
c001515a:	5e                   	pop    esi
c001515b:	5d                   	pop    ebp
c001515c:	c3                   	ret    

c001515d <displayProgramFault(char const*)>:
c001515d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015162:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015165:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001516b:	85 c0                	test   eax,eax
c001516d:	74 15                	je     c0015184 <displayProgramFault(char const*)+0x27>
c001516f:	83 ec 0c             	sub    esp,0xc
c0015172:	6a 04                	push   0x4
c0015174:	6a 0f                	push   0xf
c0015176:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001517a:	50                   	push   eax
c001517b:	e8 16 b4 ff ff       	call   c0010596 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015180:	83 c4 1c             	add    esp,0x1c
c0015183:	c3                   	ret    
c0015184:	c3                   	ret    

c0015185 <setupInterruptController()>:
c0015185:	55                   	push   ebp
c0015186:	89 e5                	mov    ebp,esp
c0015188:	53                   	push   ebx
c0015189:	83 ec 24             	sub    esp,0x24
c001518c:	b8 00 00 00 00       	mov    eax,0x0
c0015191:	85 c0                	test   eax,eax
c0015193:	0f 95 c0             	setne  al
c0015196:	84 c0                	test   al,al
c0015198:	74 5b                	je     c00151f5 <setupInterruptController()+0x70>
c001519a:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00151a1:	83 ec 0c             	sub    esp,0xc
c00151a4:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00151a7:	e8 ed a3 ff ff       	call   c000f599 <malloc>
c00151ac:	83 c4 10             	add    esp,0x10
c00151af:	89 c3                	mov    ebx,eax
c00151b1:	83 ec 0c             	sub    esp,0xc
c00151b4:	53                   	push   ebx
c00151b5:	e8 fc 04 01 00       	call   c00256b6 <APIC::APIC()>
c00151ba:	83 c4 10             	add    esp,0x10
c00151bd:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00151c0:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00151c3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00151c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c8:	83 c0 08             	add    eax,0x8
c00151cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00151cd:	6a 00                	push   0x0
c00151cf:	6a 00                	push   0x0
c00151d1:	6a 00                	push   0x0
c00151d3:	52                   	push   edx
c00151d4:	ff d0                	call   eax
c00151d6:	83 c4 10             	add    esp,0x10
c00151d9:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c00151de:	83 ec 08             	sub    esp,0x8
c00151e1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00151e4:	50                   	push   eax
c00151e5:	e8 52 e9 ff ff       	call   c0013b3c <Device::addChild(Device*)>
c00151ea:	83 c4 10             	add    esp,0x10
c00151ed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00151f0:	e9 79 03 00 00       	jmp    c001556e <setupInterruptController()+0x3e9>
c00151f5:	a0 60 03 03 c0       	mov    al,ds:0xc0030360
c00151fa:	84 c0                	test   al,al
c00151fc:	75 14                	jne    c0015212 <setupInterruptController()+0x8d>
c00151fe:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0015203:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015209:	83 e2 fe             	and    edx,0xfffffffe
c001520c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015212:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0015217:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001521d:	83 e0 01             	and    eax,0x1
c0015220:	84 c0                	test   al,al
c0015222:	0f 95 c0             	setne  al
c0015225:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015228:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001522f:	83 ec 0c             	sub    esp,0xc
c0015232:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015235:	e8 5f a3 ff ff       	call   c000f599 <malloc>
c001523a:	83 c4 10             	add    esp,0x10
c001523d:	89 c3                	mov    ebx,eax
c001523f:	83 ec 0c             	sub    esp,0xc
c0015242:	53                   	push   ebx
c0015243:	e8 c6 09 01 00       	call   c0025c0e <PIC::PIC()>
c0015248:	83 c4 10             	add    esp,0x10
c001524b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001524e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015251:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015254:	8b 00                	mov    eax,DWORD PTR [eax]
c0015256:	83 c0 08             	add    eax,0x8
c0015259:	8b 00                	mov    eax,DWORD PTR [eax]
c001525b:	6a 00                	push   0x0
c001525d:	6a 00                	push   0x0
c001525f:	6a 00                	push   0x0
c0015261:	52                   	push   edx
c0015262:	ff d0                	call   eax
c0015264:	83 c4 10             	add    esp,0x10
c0015267:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001526b:	74 73                	je     c00152e0 <setupInterruptController()+0x15b>
c001526d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015270:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015273:	8b 00                	mov    eax,DWORD PTR [eax]
c0015275:	83 c0 0c             	add    eax,0xc
c0015278:	8b 00                	mov    eax,DWORD PTR [eax]
c001527a:	6a 00                	push   0x0
c001527c:	6a 00                	push   0x0
c001527e:	6a 00                	push   0x0
c0015280:	52                   	push   edx
c0015281:	ff d0                	call   eax
c0015283:	83 c4 10             	add    esp,0x10
c0015286:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001528a:	74 15                	je     c00152a1 <setupInterruptController()+0x11c>
c001528c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001528f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015291:	83 c0 04             	add    eax,0x4
c0015294:	8b 00                	mov    eax,DWORD PTR [eax]
c0015296:	83 ec 0c             	sub    esp,0xc
c0015299:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001529c:	ff d0                	call   eax
c001529e:	83 c4 10             	add    esp,0x10
c00152a1:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00152a8:	83 ec 0c             	sub    esp,0xc
c00152ab:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00152ae:	e8 e6 a2 ff ff       	call   c000f599 <malloc>
c00152b3:	83 c4 10             	add    esp,0x10
c00152b6:	89 c3                	mov    ebx,eax
c00152b8:	83 ec 0c             	sub    esp,0xc
c00152bb:	53                   	push   ebx
c00152bc:	e8 f5 03 01 00       	call   c00256b6 <APIC::APIC()>
c00152c1:	83 c4 10             	add    esp,0x10
c00152c4:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00152c7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00152ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00152cf:	83 c0 08             	add    eax,0x8
c00152d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d4:	6a 00                	push   0x0
c00152d6:	6a 00                	push   0x0
c00152d8:	6a 00                	push   0x0
c00152da:	52                   	push   edx
c00152db:	ff d0                	call   eax
c00152dd:	83 c4 10             	add    esp,0x10
c00152e0:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c00152e5:	83 ec 08             	sub    esp,0x8
c00152e8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152eb:	50                   	push   eax
c00152ec:	e8 4b e8 ff ff       	call   c0013b3c <Device::addChild(Device*)>
c00152f1:	83 c4 10             	add    esp,0x10
c00152f4:	c7 05 68 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db68,0x0
c00152fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015301:	8b 00                	mov    eax,DWORD PTR [eax]
c0015303:	83 c0 24             	add    eax,0x24
c0015306:	8b 00                	mov    eax,DWORD PTR [eax]
c0015308:	6a 00                	push   0x0
c001530a:	68 21 4b 01 c0       	push   0xc0014b21
c001530f:	6a 00                	push   0x0
c0015311:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015314:	ff d0                	call   eax
c0015316:	83 c4 10             	add    esp,0x10
c0015319:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001531c:	8b 00                	mov    eax,DWORD PTR [eax]
c001531e:	83 c0 24             	add    eax,0x24
c0015321:	8b 00                	mov    eax,DWORD PTR [eax]
c0015323:	6a 00                	push   0x0
c0015325:	68 21 4b 01 c0       	push   0xc0014b21
c001532a:	6a 01                	push   0x1
c001532c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001532f:	ff d0                	call   eax
c0015331:	83 c4 10             	add    esp,0x10
c0015334:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015337:	8b 00                	mov    eax,DWORD PTR [eax]
c0015339:	83 c0 24             	add    eax,0x24
c001533c:	8b 00                	mov    eax,DWORD PTR [eax]
c001533e:	6a 00                	push   0x0
c0015340:	68 fb 43 01 c0       	push   0xc00143fb
c0015345:	6a 02                	push   0x2
c0015347:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001534a:	ff d0                	call   eax
c001534c:	83 c4 10             	add    esp,0x10
c001534f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015352:	8b 00                	mov    eax,DWORD PTR [eax]
c0015354:	83 c0 24             	add    eax,0x24
c0015357:	8b 00                	mov    eax,DWORD PTR [eax]
c0015359:	6a 00                	push   0x0
c001535b:	68 21 4b 01 c0       	push   0xc0014b21
c0015360:	6a 03                	push   0x3
c0015362:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015365:	ff d0                	call   eax
c0015367:	83 c4 10             	add    esp,0x10
c001536a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001536d:	8b 00                	mov    eax,DWORD PTR [eax]
c001536f:	83 c0 24             	add    eax,0x24
c0015372:	8b 00                	mov    eax,DWORD PTR [eax]
c0015374:	6a 00                	push   0x0
c0015376:	68 21 4b 01 c0       	push   0xc0014b21
c001537b:	6a 04                	push   0x4
c001537d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015380:	ff d0                	call   eax
c0015382:	83 c4 10             	add    esp,0x10
c0015385:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015388:	8b 00                	mov    eax,DWORD PTR [eax]
c001538a:	83 c0 24             	add    eax,0x24
c001538d:	8b 00                	mov    eax,DWORD PTR [eax]
c001538f:	6a 00                	push   0x0
c0015391:	68 21 4b 01 c0       	push   0xc0014b21
c0015396:	6a 05                	push   0x5
c0015398:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001539b:	ff d0                	call   eax
c001539d:	83 c4 10             	add    esp,0x10
c00153a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a5:	83 c0 24             	add    eax,0x24
c00153a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153aa:	6a 00                	push   0x0
c00153ac:	68 40 4b 01 c0       	push   0xc0014b40
c00153b1:	6a 06                	push   0x6
c00153b3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153b6:	ff d0                	call   eax
c00153b8:	83 c4 10             	add    esp,0x10
c00153bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153be:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c0:	83 c0 24             	add    eax,0x24
c00153c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c5:	6a 00                	push   0x0
c00153c7:	68 2d 4a 01 c0       	push   0xc0014a2d
c00153cc:	6a 07                	push   0x7
c00153ce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153d1:	ff d0                	call   eax
c00153d3:	83 c4 10             	add    esp,0x10
c00153d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153db:	83 c0 24             	add    eax,0x24
c00153de:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e0:	6a 00                	push   0x0
c00153e2:	68 16 42 01 c0       	push   0xc0014216
c00153e7:	6a 08                	push   0x8
c00153e9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153ec:	ff d0                	call   eax
c00153ee:	83 c4 10             	add    esp,0x10
c00153f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f6:	83 c0 24             	add    eax,0x24
c00153f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153fb:	6a 00                	push   0x0
c00153fd:	68 21 4b 01 c0       	push   0xc0014b21
c0015402:	6a 09                	push   0x9
c0015404:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015407:	ff d0                	call   eax
c0015409:	83 c4 10             	add    esp,0x10
c001540c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015411:	83 c0 24             	add    eax,0x24
c0015414:	8b 00                	mov    eax,DWORD PTR [eax]
c0015416:	6a 00                	push   0x0
c0015418:	68 21 4b 01 c0       	push   0xc0014b21
c001541d:	6a 0a                	push   0xa
c001541f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015422:	ff d0                	call   eax
c0015424:	83 c4 10             	add    esp,0x10
c0015427:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001542a:	8b 00                	mov    eax,DWORD PTR [eax]
c001542c:	83 c0 24             	add    eax,0x24
c001542f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015431:	6a 00                	push   0x0
c0015433:	68 21 4b 01 c0       	push   0xc0014b21
c0015438:	6a 0b                	push   0xb
c001543a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001543d:	ff d0                	call   eax
c001543f:	83 c4 10             	add    esp,0x10
c0015442:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015445:	8b 00                	mov    eax,DWORD PTR [eax]
c0015447:	83 c0 24             	add    eax,0x24
c001544a:	8b 00                	mov    eax,DWORD PTR [eax]
c001544c:	6a 00                	push   0x0
c001544e:	68 21 4b 01 c0       	push   0xc0014b21
c0015453:	6a 0c                	push   0xc
c0015455:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015458:	ff d0                	call   eax
c001545a:	83 c4 10             	add    esp,0x10
c001545d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015460:	8b 00                	mov    eax,DWORD PTR [eax]
c0015462:	83 c0 24             	add    eax,0x24
c0015465:	8b 00                	mov    eax,DWORD PTR [eax]
c0015467:	6a 00                	push   0x0
c0015469:	68 a0 4a 01 c0       	push   0xc0014aa0
c001546e:	6a 0d                	push   0xd
c0015470:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015473:	ff d0                	call   eax
c0015475:	83 c4 10             	add    esp,0x10
c0015478:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547b:	8b 00                	mov    eax,DWORD PTR [eax]
c001547d:	83 c0 24             	add    eax,0x24
c0015480:	8b 00                	mov    eax,DWORD PTR [eax]
c0015482:	6a 00                	push   0x0
c0015484:	68 d9 4a 01 c0       	push   0xc0014ad9
c0015489:	6a 0e                	push   0xe
c001548b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001548e:	ff d0                	call   eax
c0015490:	83 c4 10             	add    esp,0x10
c0015493:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015496:	8b 00                	mov    eax,DWORD PTR [eax]
c0015498:	83 c0 24             	add    eax,0x24
c001549b:	8b 00                	mov    eax,DWORD PTR [eax]
c001549d:	6a 00                	push   0x0
c001549f:	68 21 4b 01 c0       	push   0xc0014b21
c00154a4:	6a 0f                	push   0xf
c00154a6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154a9:	ff d0                	call   eax
c00154ab:	83 c4 10             	add    esp,0x10
c00154ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b3:	83 c0 24             	add    eax,0x24
c00154b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b8:	6a 00                	push   0x0
c00154ba:	68 21 4b 01 c0       	push   0xc0014b21
c00154bf:	6a 10                	push   0x10
c00154c1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154c4:	ff d0                	call   eax
c00154c6:	83 c4 10             	add    esp,0x10
c00154c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ce:	83 c0 24             	add    eax,0x24
c00154d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d3:	6a 00                	push   0x0
c00154d5:	68 21 4b 01 c0       	push   0xc0014b21
c00154da:	6a 11                	push   0x11
c00154dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154df:	ff d0                	call   eax
c00154e1:	83 c4 10             	add    esp,0x10
c00154e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e9:	83 c0 24             	add    eax,0x24
c00154ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ee:	6a 00                	push   0x0
c00154f0:	68 21 4b 01 c0       	push   0xc0014b21
c00154f5:	6a 12                	push   0x12
c00154f7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154fa:	ff d0                	call   eax
c00154fc:	83 c4 10             	add    esp,0x10
c00154ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015502:	8b 00                	mov    eax,DWORD PTR [eax]
c0015504:	83 c0 24             	add    eax,0x24
c0015507:	8b 00                	mov    eax,DWORD PTR [eax]
c0015509:	6a 00                	push   0x0
c001550b:	68 21 4b 01 c0       	push   0xc0014b21
c0015510:	6a 13                	push   0x13
c0015512:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015515:	ff d0                	call   eax
c0015517:	83 c4 10             	add    esp,0x10
c001551a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001551d:	8b 00                	mov    eax,DWORD PTR [eax]
c001551f:	83 c0 24             	add    eax,0x24
c0015522:	8b 00                	mov    eax,DWORD PTR [eax]
c0015524:	6a 00                	push   0x0
c0015526:	68 21 4b 01 c0       	push   0xc0014b21
c001552b:	6a 14                	push   0x14
c001552d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015530:	ff d0                	call   eax
c0015532:	83 c4 10             	add    esp,0x10
c0015535:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015538:	8b 00                	mov    eax,DWORD PTR [eax]
c001553a:	83 c0 24             	add    eax,0x24
c001553d:	8b 00                	mov    eax,DWORD PTR [eax]
c001553f:	6a 00                	push   0x0
c0015541:	68 21 4b 01 c0       	push   0xc0014b21
c0015546:	6a 1e                	push   0x1e
c0015548:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001554b:	ff d0                	call   eax
c001554d:	83 c4 10             	add    esp,0x10
c0015550:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015553:	8b 00                	mov    eax,DWORD PTR [eax]
c0015555:	83 c0 24             	add    eax,0x24
c0015558:	8b 00                	mov    eax,DWORD PTR [eax]
c001555a:	6a 00                	push   0x0
c001555c:	68 5e c0 01 c0       	push   0xc001c05e
c0015561:	6a 60                	push   0x60
c0015563:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015566:	ff d0                	call   eax
c0015568:	83 c4 10             	add    esp,0x10
c001556b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001556e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015571:	c9                   	leave  
c0015572:	c3                   	ret    
c0015573:	90                   	nop

c0015574 <InterruptController::convertLegacyIRQNumber(int)>:
c0015574:	55                   	push   ebp
c0015575:	89 e5                	mov    ebp,esp
c0015577:	83 ec 08             	sub    esp,0x8
c001557a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557d:	83 ec 0c             	sub    esp,0xc
c0015580:	50                   	push   eax
c0015581:	e8 b6 e8 ff ff       	call   c0013e3c <Device::getName()>
c0015586:	83 c4 10             	add    esp,0x10
c0015589:	8a 00                	mov    al,BYTE PTR [eax]
c001558b:	3c 41                	cmp    al,0x41
c001558d:	0f 94 c0             	sete   al
c0015590:	84 c0                	test   al,al
c0015592:	74 28                	je     c00155bc <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015594:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015598:	7f 12                	jg     c00155ac <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001559a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001559d:	05 40 cc 02 c0       	add    eax,0xc002cc40
c00155a2:	8a 00                	mov    al,BYTE PTR [eax]
c00155a4:	0f b6 c0             	movzx  eax,al
c00155a7:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00155aa:	eb 10                	jmp    c00155bc <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00155ac:	83 ec 0c             	sub    esp,0xc
c00155af:	68 a4 ae 02 c0       	push   0xc002aea4
c00155b4:	e8 b6 48 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c00155b9:	83 c4 10             	add    esp,0x10
c00155bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00155bf:	c9                   	leave  
c00155c0:	c3                   	ret    
c00155c1:	90                   	nop

c00155c2 <startGUI(void*)>:
c00155c2:	55                   	push   ebp
c00155c3:	89 e5                	mov    ebp,esp
c00155c5:	53                   	push   ebx
c00155c6:	83 ec 04             	sub    esp,0x4
c00155c9:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c00155ce:	48                   	dec    eax
c00155cf:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c00155d4:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c00155d9:	85 c0                	test   eax,eax
c00155db:	75 01                	jne    c00155de <startGUI(void*)+0x1c>
c00155dd:	fb                   	sti    
c00155de:	8b 1d e8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9e8
c00155e4:	83 ec 08             	sub    esp,0x8
c00155e7:	6a 01                	push   0x1
c00155e9:	68 24 af 02 c0       	push   0xc002af24
c00155ee:	e8 46 7a 00 00       	call   c001d039 <Thr::loadDLL(char const*, bool)>
c00155f3:	83 c4 10             	add    esp,0x10
c00155f6:	83 ec 08             	sub    esp,0x8
c00155f9:	53                   	push   ebx
c00155fa:	50                   	push   eax
c00155fb:	e8 64 7c 00 00       	call   c001d264 <Thr::executeDLL(unsigned long, void*)>
c0015600:	83 c4 10             	add    esp,0x10
c0015603:	8b 1d e8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9e8
c0015609:	83 ec 08             	sub    esp,0x8
c001560c:	6a 01                	push   0x1
c001560e:	68 3e af 02 c0       	push   0xc002af3e
c0015613:	e8 21 7a 00 00       	call   c001d039 <Thr::loadDLL(char const*, bool)>
c0015618:	83 c4 10             	add    esp,0x10
c001561b:	83 ec 08             	sub    esp,0x8
c001561e:	53                   	push   ebx
c001561f:	50                   	push   eax
c0015620:	e8 3f 7c 00 00       	call   c001d264 <Thr::executeDLL(unsigned long, void*)>
c0015625:	83 c4 10             	add    esp,0x10
c0015628:	90                   	nop
c0015629:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001562c:	c9                   	leave  
c001562d:	c3                   	ret    

c001562e <startGUIVESA(void*)>:
c001562e:	55                   	push   ebp
c001562f:	89 e5                	mov    ebp,esp
c0015631:	53                   	push   ebx
c0015632:	83 ec 04             	sub    esp,0x4
c0015635:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001563a:	48                   	dec    eax
c001563b:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c0015640:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c0015645:	85 c0                	test   eax,eax
c0015647:	75 01                	jne    c001564a <startGUIVESA(void*)+0x1c>
c0015649:	fb                   	sti    
c001564a:	8b 1d e8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9e8
c0015650:	83 ec 08             	sub    esp,0x8
c0015653:	6a 01                	push   0x1
c0015655:	68 58 af 02 c0       	push   0xc002af58
c001565a:	e8 da 79 00 00       	call   c001d039 <Thr::loadDLL(char const*, bool)>
c001565f:	83 c4 10             	add    esp,0x10
c0015662:	83 ec 08             	sub    esp,0x8
c0015665:	53                   	push   ebx
c0015666:	50                   	push   eax
c0015667:	e8 f8 7b 00 00       	call   c001d264 <Thr::executeDLL(unsigned long, void*)>
c001566c:	83 c4 10             	add    esp,0x10
c001566f:	8b 1d e8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9e8
c0015675:	83 ec 08             	sub    esp,0x8
c0015678:	6a 01                	push   0x1
c001567a:	68 3e af 02 c0       	push   0xc002af3e
c001567f:	e8 b5 79 00 00       	call   c001d039 <Thr::loadDLL(char const*, bool)>
c0015684:	83 c4 10             	add    esp,0x10
c0015687:	83 ec 08             	sub    esp,0x8
c001568a:	53                   	push   ebx
c001568b:	50                   	push   eax
c001568c:	e8 d3 7b 00 00       	call   c001d264 <Thr::executeDLL(unsigned long, void*)>
c0015691:	83 c4 10             	add    esp,0x10
c0015694:	90                   	nop
c0015695:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015698:	c9                   	leave  
c0015699:	c3                   	ret    

c001569a <sendKeyToTerminal(unsigned char)>:
c001569a:	55                   	push   ebp
c001569b:	89 e5                	mov    ebp,esp
c001569d:	83 ec 28             	sub    esp,0x28
c00156a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00156a6:	a1 a4 da 02 c0       	mov    eax,ds:0xc002daa4
c00156ab:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00156af:	83 ec 08             	sub    esp,0x8
c00156b2:	52                   	push   edx
c00156b3:	50                   	push   eax
c00156b4:	e8 83 b3 ff ff       	call   c0010a3c <VgaText::receiveKey(unsigned char)>
c00156b9:	83 c4 10             	add    esp,0x10
c00156bc:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00156c0:	0f 85 8f 00 00 00    	jne    c0015755 <sendKeyToTerminal(unsigned char)+0xbb>
c00156c6:	fa                   	cli    
c00156c7:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c00156cc:	40                   	inc    eax
c00156cd:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c00156d2:	a1 04 0f 03 c0       	mov    eax,ds:0xc0030f04
c00156d7:	40                   	inc    eax
c00156d8:	a3 04 0f 03 c0       	mov    ds:0xc0030f04,eax
c00156dd:	a1 80 db 02 c0       	mov    eax,ds:0xc002db80
c00156e2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00156e5:	c7 05 80 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db80,0x0
c00156ef:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00156f3:	74 1f                	je     c0015714 <sendKeyToTerminal(unsigned char)+0x7a>
c00156f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156f8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00156fb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00156fe:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015701:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015704:	83 ec 0c             	sub    esp,0xc
c0015707:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001570a:	e8 6d 87 00 00       	call   c001de7c <unblockTask(ThreadControlBlock*)>
c001570f:	83 c4 10             	add    esp,0x10
c0015712:	eb db                	jmp    c00156ef <sendKeyToTerminal(unsigned char)+0x55>
c0015714:	a1 04 0f 03 c0       	mov    eax,ds:0xc0030f04
c0015719:	48                   	dec    eax
c001571a:	a3 04 0f 03 c0       	mov    ds:0xc0030f04,eax
c001571f:	a1 04 0f 03 c0       	mov    eax,ds:0xc0030f04
c0015724:	85 c0                	test   eax,eax
c0015726:	75 18                	jne    c0015740 <sendKeyToTerminal(unsigned char)+0xa6>
c0015728:	a1 00 0f 03 c0       	mov    eax,ds:0xc0030f00
c001572d:	85 c0                	test   eax,eax
c001572f:	74 0f                	je     c0015740 <sendKeyToTerminal(unsigned char)+0xa6>
c0015731:	c7 05 00 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f00,0x0
c001573b:	e8 b9 82 00 00       	call   c001d9f9 <schedule()>
c0015740:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c0015745:	48                   	dec    eax
c0015746:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001574b:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c0015750:	85 c0                	test   eax,eax
c0015752:	75 01                	jne    c0015755 <sendKeyToTerminal(unsigned char)+0xbb>
c0015754:	fb                   	sti    
c0015755:	90                   	nop
c0015756:	c9                   	leave  
c0015757:	c3                   	ret    

c0015758 <sendKeyboardToken(KeyboardToken)>:
c0015758:	55                   	push   ebp
c0015759:	89 e5                	mov    ebp,esp
c001575b:	83 ec 18             	sub    esp,0x18
c001575e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015761:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015764:	0f b7 c0             	movzx  eax,ax
c0015767:	83 f2 01             	xor    edx,0x1
c001576a:	88 90 a0 db 02 c0    	mov    BYTE PTR [eax-0x3ffd2460],dl
c0015770:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0015775:	85 c0                	test   eax,eax
c0015777:	74 24                	je     c001579d <sendKeyboardToken(KeyboardToken)+0x45>
c0015779:	8b 0d 88 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db88
c001577f:	83 ec 04             	sub    esp,0x4
c0015782:	68 a0 db 02 c0       	push   0xc002dba0
c0015787:	83 ec 08             	sub    esp,0x8
c001578a:	89 e2                	mov    edx,esp
c001578c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578f:	89 02                	mov    DWORD PTR [edx],eax
c0015791:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015794:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015798:	ff d1                	call   ecx
c001579a:	83 c4 10             	add    esp,0x10
c001579d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a0:	66 3d 03 02          	cmp    ax,0x203
c00157a4:	75 07                	jne    c00157ad <sendKeyboardToken(KeyboardToken)+0x55>
c00157a6:	a0 a0 dc 02 c0       	mov    al,ds:0xc002dca0
c00157ab:	84 c0                	test   al,al
c00157ad:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00157b1:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00157b4:	a0 a8 df 02 c0       	mov    al,ds:0xc002dfa8
c00157b9:	38 c2                	cmp    dl,al
c00157bb:	74 1c                	je     c00157d9 <sendKeyboardToken(KeyboardToken)+0x81>
c00157bd:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00157c0:	a2 a8 df 02 c0       	mov    ds:0xc002dfa8,al
c00157c5:	a0 a8 df 02 c0       	mov    al,ds:0xc002dfa8
c00157ca:	0f b6 c0             	movzx  eax,al
c00157cd:	83 ec 0c             	sub    esp,0xc
c00157d0:	50                   	push   eax
c00157d1:	e8 a8 a8 ff ff       	call   c001007e <setTerminalScrollLock(bool)>
c00157d6:	83 c4 10             	add    esp,0x10
c00157d9:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00157dc:	84 c0                	test   al,al
c00157de:	0f 84 ae 00 00 00    	je     c0015892 <sendKeyboardToken(KeyboardToken)+0x13a>
c00157e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e7:	66 3d 10 03          	cmp    ax,0x310
c00157eb:	75 06                	jne    c00157f3 <sendKeyboardToken(KeyboardToken)+0x9b>
c00157ed:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00157f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f6:	66 3d 11 03          	cmp    ax,0x311
c00157fa:	75 06                	jne    c0015802 <sendKeyboardToken(KeyboardToken)+0xaa>
c00157fc:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015802:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015805:	66 3d 12 03          	cmp    ax,0x312
c0015809:	75 06                	jne    c0015811 <sendKeyboardToken(KeyboardToken)+0xb9>
c001580b:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015811:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015814:	66 3d 13 03          	cmp    ax,0x313
c0015818:	75 06                	jne    c0015820 <sendKeyboardToken(KeyboardToken)+0xc8>
c001581a:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015820:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015823:	66 3d 14 03          	cmp    ax,0x314
c0015827:	75 06                	jne    c001582f <sendKeyboardToken(KeyboardToken)+0xd7>
c0015829:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001582f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015832:	66 3d 15 03          	cmp    ax,0x315
c0015836:	75 06                	jne    c001583e <sendKeyboardToken(KeyboardToken)+0xe6>
c0015838:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001583e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015841:	66 3d 16 03          	cmp    ax,0x316
c0015845:	75 06                	jne    c001584d <sendKeyboardToken(KeyboardToken)+0xf5>
c0015847:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001584d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015850:	66 3d 17 03          	cmp    ax,0x317
c0015854:	75 06                	jne    c001585c <sendKeyboardToken(KeyboardToken)+0x104>
c0015856:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001585c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585f:	66 3d 18 03          	cmp    ax,0x318
c0015863:	75 06                	jne    c001586b <sendKeyboardToken(KeyboardToken)+0x113>
c0015865:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001586b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586e:	66 3d 19 03          	cmp    ax,0x319
c0015872:	75 06                	jne    c001587a <sendKeyboardToken(KeyboardToken)+0x122>
c0015874:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001587a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587d:	66 3d 1a 03          	cmp    ax,0x31a
c0015881:	0f 85 c9 00 00 00    	jne    c0015950 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015887:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001588d:	e9 be 00 00 00       	jmp    c0015950 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015892:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015895:	66 3d 10 03          	cmp    ax,0x310
c0015899:	75 0a                	jne    c00158a5 <sendKeyboardToken(KeyboardToken)+0x14d>
c001589b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00158a1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a8:	66 3d 11 03          	cmp    ax,0x311
c00158ac:	75 0a                	jne    c00158b8 <sendKeyboardToken(KeyboardToken)+0x160>
c00158ae:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00158b4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158bb:	66 3d 12 03          	cmp    ax,0x312
c00158bf:	75 0a                	jne    c00158cb <sendKeyboardToken(KeyboardToken)+0x173>
c00158c1:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00158c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ce:	66 3d 13 03          	cmp    ax,0x313
c00158d2:	75 0a                	jne    c00158de <sendKeyboardToken(KeyboardToken)+0x186>
c00158d4:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00158da:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e1:	66 3d 14 03          	cmp    ax,0x314
c00158e5:	75 0a                	jne    c00158f1 <sendKeyboardToken(KeyboardToken)+0x199>
c00158e7:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00158ed:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f4:	66 3d 15 03          	cmp    ax,0x315
c00158f8:	75 0a                	jne    c0015904 <sendKeyboardToken(KeyboardToken)+0x1ac>
c00158fa:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015900:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015904:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015907:	66 3d 16 03          	cmp    ax,0x316
c001590b:	75 0a                	jne    c0015917 <sendKeyboardToken(KeyboardToken)+0x1bf>
c001590d:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015913:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015917:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001591a:	66 3d 17 03          	cmp    ax,0x317
c001591e:	75 0a                	jne    c001592a <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015920:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015926:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001592a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001592d:	66 3d 18 03          	cmp    ax,0x318
c0015931:	75 0a                	jne    c001593d <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015933:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015939:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001593d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015940:	66 3d 19 03          	cmp    ax,0x319
c0015944:	75 0a                	jne    c0015950 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015946:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001594c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015950:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015953:	66 3d 00 02          	cmp    ax,0x200
c0015957:	75 2c                	jne    c0015985 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015959:	a0 a0 df 02 c0       	mov    al,ds:0xc002dfa0
c001595e:	83 f0 01             	xor    eax,0x1
c0015961:	84 c0                	test   al,al
c0015963:	74 20                	je     c0015985 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015965:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001596a:	6a 01                	push   0x1
c001596c:	6a 00                	push   0x0
c001596e:	68 c2 55 01 c0       	push   0xc00155c2
c0015973:	50                   	push   eax
c0015974:	e8 5b 7e 00 00       	call   c001d7d4 <Process::createThread(void (*)(void*), void*, int)>
c0015979:	83 c4 10             	add    esp,0x10
c001597c:	c6 05 a0 df 02 c0 01 	mov    BYTE PTR ds:0xc002dfa0,0x1
c0015983:	eb 33                	jmp    c00159b8 <sendKeyboardToken(KeyboardToken)+0x260>
c0015985:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015988:	66 3d 01 02          	cmp    ax,0x201
c001598c:	75 2a                	jne    c00159b8 <sendKeyboardToken(KeyboardToken)+0x260>
c001598e:	a0 a0 df 02 c0       	mov    al,ds:0xc002dfa0
c0015993:	83 f0 01             	xor    eax,0x1
c0015996:	84 c0                	test   al,al
c0015998:	74 1e                	je     c00159b8 <sendKeyboardToken(KeyboardToken)+0x260>
c001599a:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001599f:	6a 01                	push   0x1
c00159a1:	6a 00                	push   0x0
c00159a3:	68 2e 56 01 c0       	push   0xc001562e
c00159a8:	50                   	push   eax
c00159a9:	e8 26 7e 00 00       	call   c001d7d4 <Process::createThread(void (*)(void*), void*, int)>
c00159ae:	83 c4 10             	add    esp,0x10
c00159b1:	c6 05 a0 df 02 c0 01 	mov    BYTE PTR ds:0xc002dfa0,0x1
c00159b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159bb:	66 3d 1d 03          	cmp    ax,0x31d
c00159bf:	75 06                	jne    c00159c7 <sendKeyboardToken(KeyboardToken)+0x26f>
c00159c1:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00159c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ca:	66 3d 1c 03          	cmp    ax,0x31c
c00159ce:	75 06                	jne    c00159d6 <sendKeyboardToken(KeyboardToken)+0x27e>
c00159d0:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00159d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159d9:	66 3d 1b 03          	cmp    ax,0x31b
c00159dd:	75 06                	jne    c00159e5 <sendKeyboardToken(KeyboardToken)+0x28d>
c00159df:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00159e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e8:	66 3d 1e 03          	cmp    ax,0x31e
c00159ec:	75 06                	jne    c00159f4 <sendKeyboardToken(KeyboardToken)+0x29c>
c00159ee:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00159f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159f7:	66 3d 1f 03          	cmp    ax,0x31f
c00159fb:	75 06                	jne    c0015a03 <sendKeyboardToken(KeyboardToken)+0x2ab>
c00159fd:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015a03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a06:	66 3d 1a 03          	cmp    ax,0x31a
c0015a0a:	75 06                	jne    c0015a12 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015a0c:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015a12:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015a16:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a19:	83 f0 01             	xor    eax,0x1
c0015a1c:	84 c0                	test   al,al
c0015a1e:	74 77                	je     c0015a97 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015a20:	a0 a1 dc 02 c0       	mov    al,ds:0xc002dca1
c0015a25:	84 c0                	test   al,al
c0015a27:	74 41                	je     c0015a6a <sendKeyboardToken(KeyboardToken)+0x312>
c0015a29:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a2d:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015a31:	74 2b                	je     c0015a5e <sendKeyboardToken(KeyboardToken)+0x306>
c0015a33:	8b 15 a4 df 02 c0    	mov    edx,DWORD PTR ds:0xc002dfa4
c0015a39:	89 d0                	mov    eax,edx
c0015a3b:	c1 e0 02             	shl    eax,0x2
c0015a3e:	01 d0                	add    eax,edx
c0015a40:	01 c0                	add    eax,eax
c0015a42:	a3 a4 df 02 c0       	mov    ds:0xc002dfa4,eax
c0015a47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a4a:	0f b7 c0             	movzx  eax,ax
c0015a4d:	8d 50 d0             	lea    edx,[eax-0x30]
c0015a50:	a1 a4 df 02 c0       	mov    eax,ds:0xc002dfa4
c0015a55:	01 d0                	add    eax,edx
c0015a57:	a3 a4 df 02 c0       	mov    ds:0xc002dfa4,eax
c0015a5c:	eb 6d                	jmp    c0015acb <sendKeyboardToken(KeyboardToken)+0x373>
c0015a5e:	c7 05 a4 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dfa4,0x0
c0015a68:	eb 61                	jmp    c0015acb <sendKeyboardToken(KeyboardToken)+0x373>
c0015a6a:	a1 a4 df 02 c0       	mov    eax,ds:0xc002dfa4
c0015a6f:	85 c0                	test   eax,eax
c0015a71:	74 18                	je     c0015a8b <sendKeyboardToken(KeyboardToken)+0x333>
c0015a73:	a1 a4 df 02 c0       	mov    eax,ds:0xc002dfa4
c0015a78:	0f b6 c0             	movzx  eax,al
c0015a7b:	83 ec 0c             	sub    esp,0xc
c0015a7e:	50                   	push   eax
c0015a7f:	e8 16 fc ff ff       	call   c001569a <sendKeyToTerminal(unsigned char)>
c0015a84:	83 c4 10             	add    esp,0x10
c0015a87:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a8b:	c7 05 a4 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dfa4,0x0
c0015a95:	eb 34                	jmp    c0015acb <sendKeyboardToken(KeyboardToken)+0x373>
c0015a97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a9a:	66 3d 01 01          	cmp    ax,0x101
c0015a9e:	75 2b                	jne    c0015acb <sendKeyboardToken(KeyboardToken)+0x373>
c0015aa0:	a1 a4 df 02 c0       	mov    eax,ds:0xc002dfa4
c0015aa5:	85 c0                	test   eax,eax
c0015aa7:	74 18                	je     c0015ac1 <sendKeyboardToken(KeyboardToken)+0x369>
c0015aa9:	a1 a4 df 02 c0       	mov    eax,ds:0xc002dfa4
c0015aae:	0f b6 c0             	movzx  eax,al
c0015ab1:	83 ec 0c             	sub    esp,0xc
c0015ab4:	50                   	push   eax
c0015ab5:	e8 e0 fb ff ff       	call   c001569a <sendKeyToTerminal(unsigned char)>
c0015aba:	83 c4 10             	add    esp,0x10
c0015abd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015ac1:	c7 05 a4 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dfa4,0x0
c0015acb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015ace:	83 f0 01             	xor    eax,0x1
c0015ad1:	84 c0                	test   al,al
c0015ad3:	74 4c                	je     c0015b21 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015ad5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015ad8:	83 f0 01             	xor    eax,0x1
c0015adb:	84 c0                	test   al,al
c0015add:	74 42                	je     c0015b21 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015adf:	a0 a0 dc 02 c0       	mov    al,ds:0xc002dca0
c0015ae4:	83 f0 01             	xor    eax,0x1
c0015ae7:	84 c0                	test   al,al
c0015ae9:	74 36                	je     c0015b21 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015aeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aee:	66 83 f8 1f          	cmp    ax,0x1f
c0015af2:	76 09                	jbe    c0015afd <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015af4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015af7:	66 83 f8 7e          	cmp    ax,0x7e
c0015afb:	76 12                	jbe    c0015b0f <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015afd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b00:	66 83 f8 0a          	cmp    ax,0xa
c0015b04:	74 09                	je     c0015b0f <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015b06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b09:	66 83 f8 08          	cmp    ax,0x8
c0015b0d:	75 12                	jne    c0015b21 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015b0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b12:	0f b6 c0             	movzx  eax,al
c0015b15:	83 ec 0c             	sub    esp,0xc
c0015b18:	50                   	push   eax
c0015b19:	e8 7c fb ff ff       	call   c001569a <sendKeyToTerminal(unsigned char)>
c0015b1e:	83 c4 10             	add    esp,0x10
c0015b21:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015b24:	83 f0 01             	xor    eax,0x1
c0015b27:	84 c0                	test   al,al
c0015b29:	74 4f                	je     c0015b7a <sendKeyboardToken(KeyboardToken)+0x422>
c0015b2b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b2e:	83 f0 01             	xor    eax,0x1
c0015b31:	84 c0                	test   al,al
c0015b33:	74 45                	je     c0015b7a <sendKeyboardToken(KeyboardToken)+0x422>
c0015b35:	a0 a0 dc 02 c0       	mov    al,ds:0xc002dca0
c0015b3a:	84 c0                	test   al,al
c0015b3c:	74 3c                	je     c0015b7a <sendKeyboardToken(KeyboardToken)+0x422>
c0015b3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b41:	66 83 f8 3f          	cmp    ax,0x3f
c0015b45:	76 33                	jbe    c0015b7a <sendKeyboardToken(KeyboardToken)+0x422>
c0015b47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b4a:	66 83 f8 7f          	cmp    ax,0x7f
c0015b4e:	77 2a                	ja     c0015b7a <sendKeyboardToken(KeyboardToken)+0x422>
c0015b50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b53:	88 c2                	mov    dl,al
c0015b55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b58:	66 83 f8 5f          	cmp    ax,0x5f
c0015b5c:	76 04                	jbe    c0015b62 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015b5e:	b0 20                	mov    al,0x20
c0015b60:	eb 02                	jmp    c0015b64 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015b62:	b0 00                	mov    al,0x0
c0015b64:	29 c2                	sub    edx,eax
c0015b66:	88 d0                	mov    al,dl
c0015b68:	83 e8 40             	sub    eax,0x40
c0015b6b:	0f b6 c0             	movzx  eax,al
c0015b6e:	83 ec 0c             	sub    esp,0xc
c0015b71:	50                   	push   eax
c0015b72:	e8 23 fb ff ff       	call   c001569a <sendKeyToTerminal(unsigned char)>
c0015b77:	83 c4 10             	add    esp,0x10
c0015b7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b7d:	66 3d 00 03          	cmp    ax,0x300
c0015b81:	75 0f                	jne    c0015b92 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015b83:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b86:	83 f0 01             	xor    eax,0x1
c0015b89:	84 c0                	test   al,al
c0015b8b:	74 05                	je     c0015b92 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015b8d:	e8 5d a8 ff ff       	call   c00103ef <doTerminalCycle()>
c0015b92:	90                   	nop
c0015b93:	c9                   	leave  
c0015b94:	c3                   	ret    

c0015b95 <clearInternalKeybuffer(VgaText*)>:
c0015b95:	55                   	push   ebp
c0015b96:	89 e5                	mov    ebp,esp
c0015b98:	83 ec 08             	sub    esp,0x8
c0015b9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b9e:	05 98 01 00 00       	add    eax,0x198
c0015ba3:	83 ec 0c             	sub    esp,0xc
c0015ba6:	50                   	push   eax
c0015ba7:	e8 c0 ab fe ff       	call   c000076c <strlen>
c0015bac:	83 c4 10             	add    esp,0x10
c0015baf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015bb2:	81 c2 98 01 00 00    	add    edx,0x198
c0015bb8:	83 ec 04             	sub    esp,0x4
c0015bbb:	50                   	push   eax
c0015bbc:	6a 00                	push   0x0
c0015bbe:	52                   	push   edx
c0015bbf:	e8 8c ab fe ff       	call   c0000750 <memset>
c0015bc4:	83 c4 10             	add    esp,0x10
c0015bc7:	90                   	nop
c0015bc8:	c9                   	leave  
c0015bc9:	c3                   	ret    

c0015bca <readKeyboard(VgaText*, char*, unsigned long)>:
c0015bca:	55                   	push   ebp
c0015bcb:	89 e5                	mov    ebp,esp
c0015bcd:	83 ec 18             	sub    esp,0x18
c0015bd0:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0015bd5:	85 c0                	test   eax,eax
c0015bd7:	74 2a                	je     c0015c03 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015bd9:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015bdf:	8b 0d 88 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db88
c0015be5:	83 ec 04             	sub    esp,0x4
c0015be8:	68 a0 db 02 c0       	push   0xc002dba0
c0015bed:	83 ec 08             	sub    esp,0x8
c0015bf0:	89 e2                	mov    edx,esp
c0015bf2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015bf5:	89 02                	mov    DWORD PTR [edx],eax
c0015bf7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015bfa:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015bfe:	ff d1                	call   ecx
c0015c00:	83 c4 10             	add    esp,0x10
c0015c03:	fb                   	sti    
c0015c04:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015c0b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015c0f:	0f 84 a1 00 00 00    	je     c0015cb6 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015c15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c18:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015c1e:	84 c0                	test   al,al
c0015c20:	75 28                	jne    c0015c4a <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015c22:	fa                   	cli    
c0015c23:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c0015c28:	40                   	inc    eax
c0015c29:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c0015c2e:	e8 c6 7d 00 00       	call   c001d9f9 <schedule()>
c0015c33:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c0015c38:	48                   	dec    eax
c0015c39:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c0015c3e:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c0015c43:	85 c0                	test   eax,eax
c0015c45:	75 ce                	jne    c0015c15 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015c47:	fb                   	sti    
c0015c48:	eb cb                	jmp    c0015c15 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015c4a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c4d:	8d 50 01             	lea    edx,[eax+0x1]
c0015c50:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015c53:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c56:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015c5c:	88 10                	mov    BYTE PTR [eax],dl
c0015c5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c61:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015c67:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015c6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c6d:	05 98 01 00 00       	add    eax,0x198
c0015c72:	83 ec 0c             	sub    esp,0xc
c0015c75:	50                   	push   eax
c0015c76:	e8 f1 aa fe ff       	call   c000076c <strlen>
c0015c7b:	83 c4 10             	add    esp,0x10
c0015c7e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c81:	81 c2 98 01 00 00    	add    edx,0x198
c0015c87:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015c8a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c8d:	81 c2 98 01 00 00    	add    edx,0x198
c0015c93:	83 ec 04             	sub    esp,0x4
c0015c96:	50                   	push   eax
c0015c97:	51                   	push   ecx
c0015c98:	52                   	push   edx
c0015c99:	e8 ea a9 fe ff       	call   c0000688 <memmove>
c0015c9e:	83 c4 10             	add    esp,0x10
c0015ca1:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015ca4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015ca7:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015cab:	0f 85 5a ff ff ff    	jne    c0015c0b <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015cb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cb4:	eb 03                	jmp    c0015cb9 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015cb6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cb9:	c9                   	leave  
c0015cba:	c3                   	ret    
c0015cbb:	90                   	nop

c0015cbc <Keyboard::Keyboard(char const*)>:
c0015cbc:	83 ec 0c             	sub    esp,0xc
c0015cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cc3:	83 ec 08             	sub    esp,0x8
c0015cc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cca:	50                   	push   eax
c0015ccb:	e8 70 e0 ff ff       	call   c0013d40 <Device::Device(char const*)>
c0015cd0:	83 c4 10             	add    esp,0x10
c0015cd3:	ba 7c af 02 c0       	mov    edx,0xc002af7c
c0015cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cdc:	89 10                	mov    DWORD PTR [eax],edx
c0015cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ce2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015cec:	c6 05 84 db 02 c0 01 	mov    BYTE PTR ds:0xc002db84,0x1
c0015cf3:	90                   	nop
c0015cf4:	83 c4 0c             	add    esp,0xc
c0015cf7:	c3                   	ret    

c0015cf8 <Keyboard::~Keyboard()>:
c0015cf8:	83 ec 0c             	sub    esp,0xc
c0015cfb:	ba 7c af 02 c0       	mov    edx,0xc002af7c
c0015d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d04:	89 10                	mov    DWORD PTR [eax],edx
c0015d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d0a:	83 ec 0c             	sub    esp,0xc
c0015d0d:	50                   	push   eax
c0015d0e:	e8 f7 dc ff ff       	call   c0013a0a <Device::~Device()>
c0015d13:	83 c4 10             	add    esp,0x10
c0015d16:	90                   	nop
c0015d17:	83 c4 0c             	add    esp,0xc
c0015d1a:	c3                   	ret    
c0015d1b:	90                   	nop

c0015d1c <Keyboard::~Keyboard()>:
c0015d1c:	83 ec 0c             	sub    esp,0xc
c0015d1f:	83 ec 0c             	sub    esp,0xc
c0015d22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d26:	e8 cd ff ff ff       	call   c0015cf8 <Keyboard::~Keyboard()>
c0015d2b:	83 c4 10             	add    esp,0x10
c0015d2e:	83 ec 08             	sub    esp,0x8
c0015d31:	68 5c 01 00 00       	push   0x15c
c0015d36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d3a:	e8 ec c8 ff ff       	call   c001262b <operator delete(void*, unsigned long)>
c0015d3f:	83 c4 10             	add    esp,0x10
c0015d42:	83 c4 0c             	add    esp,0xc
c0015d45:	c3                   	ret    

c0015d46 <LogicalDisk::close(int, int, void*)>:
c0015d46:	83 c8 ff             	or     eax,0xffffffff
c0015d49:	c3                   	ret    

c0015d4a <LogicalDisk::~LogicalDisk()>:
c0015d4a:	83 ec 0c             	sub    esp,0xc
c0015d4d:	ba f4 af 02 c0       	mov    edx,0xc002aff4
c0015d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d56:	89 10                	mov    DWORD PTR [eax],edx
c0015d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d5c:	83 ec 0c             	sub    esp,0xc
c0015d5f:	50                   	push   eax
c0015d60:	e8 a5 dc ff ff       	call   c0013a0a <Device::~Device()>
c0015d65:	83 c4 10             	add    esp,0x10
c0015d68:	90                   	nop
c0015d69:	83 c4 0c             	add    esp,0xc
c0015d6c:	c3                   	ret    
c0015d6d:	90                   	nop

c0015d6e <LogicalDisk::~LogicalDisk()>:
c0015d6e:	83 ec 0c             	sub    esp,0xc
c0015d71:	83 ec 0c             	sub    esp,0xc
c0015d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d78:	e8 cd ff ff ff       	call   c0015d4a <LogicalDisk::~LogicalDisk()>
c0015d7d:	83 c4 10             	add    esp,0x10
c0015d80:	83 ec 08             	sub    esp,0x8
c0015d83:	68 74 01 00 00       	push   0x174
c0015d88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d8c:	e8 9a c8 ff ff       	call   c001262b <operator delete(void*, unsigned long)>
c0015d91:	83 c4 10             	add    esp,0x10
c0015d94:	83 c4 0c             	add    esp,0xc
c0015d97:	c3                   	ret    

c0015d98 <LogicalDisk::open(int, int, void*)>:
c0015d98:	83 ec 18             	sub    esp,0x18
c0015d9b:	68 a8 af 02 c0       	push   0xc002afa8
c0015da0:	e8 ca 40 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c0015da5:	83 c8 ff             	or     eax,0xffffffff
c0015da8:	83 c4 1c             	add    esp,0x1c
c0015dab:	c3                   	ret    

c0015dac <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015dac:	53                   	push   ebx
c0015dad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015db1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015db5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015db9:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015dbf:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015dc5:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015dcb:	77 10                	ja     c0015ddd <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015dcd:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015dd3:	89 d3                	mov    ebx,edx
c0015dd5:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015ddb:	72 05                	jb     c0015de2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015ddd:	83 c8 ff             	or     eax,0xffffffff
c0015de0:	89 c2                	mov    edx,eax
c0015de2:	5b                   	pop    ebx
c0015de3:	c3                   	ret    

c0015de4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015de4:	56                   	push   esi
c0015de5:	83 c8 ff             	or     eax,0xffffffff
c0015de8:	53                   	push   ebx
c0015de9:	89 c2                	mov    edx,eax
c0015deb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015def:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015df3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015df7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015dfd:	77 27                	ja     c0015e26 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015dff:	89 d8                	mov    eax,ebx
c0015e01:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015e07:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015e0d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015e12:	89 c2                	mov    edx,eax
c0015e14:	73 10                	jae    c0015e26 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015e16:	89 c8                	mov    eax,ecx
c0015e18:	89 da                	mov    edx,ebx
c0015e1a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015e20:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015e26:	5b                   	pop    ebx
c0015e27:	5e                   	pop    esi
c0015e28:	c3                   	ret    
c0015e29:	90                   	nop

c0015e2a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015e2a:	83 ec 1c             	sub    esp,0x1c
c0015e2d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015e31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015e35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e3d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015e41:	89 04 24             	mov    DWORD PTR [esp],eax
c0015e44:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015e48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e50:	83 ec 08             	sub    esp,0x8
c0015e53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e57:	50                   	push   eax
c0015e58:	e8 e3 de ff ff       	call   c0013d40 <Device::Device(char const*)>
c0015e5d:	83 c4 10             	add    esp,0x10
c0015e60:	ba f4 af 02 c0       	mov    edx,0xc002aff4
c0015e65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e69:	89 10                	mov    DWORD PTR [eax],edx
c0015e6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e6f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e7a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e85:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015e8f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e9b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015ea1:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015ea7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015eab:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015eae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015eb2:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015eb8:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015ebe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ec2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ec6:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015ecc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ed0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015eda:	90                   	nop
c0015edb:	83 c4 1c             	add    esp,0x1c
c0015ede:	c3                   	ret    
c0015edf:	90                   	nop

c0015ee0 <LogicalDisk::assignDriveLetter()>:
c0015ee0:	55                   	push   ebp
c0015ee1:	57                   	push   edi
c0015ee2:	56                   	push   esi
c0015ee3:	53                   	push   ebx
c0015ee4:	83 ec 14             	sub    esp,0x14
c0015ee7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015eeb:	8b 3d c0 df 02 c0    	mov    edi,DWORD PTR ds:0xc002dfc0
c0015ef1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015ef7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015efb:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015f01:	8b 3d c4 df 02 c0    	mov    edi,DWORD PTR ds:0xc002dfc4
c0015f07:	3c 01                	cmp    al,0x1
c0015f09:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015f0d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015f11:	19 c0                	sbb    eax,eax
c0015f13:	83 e0 02             	and    eax,0x2
c0015f16:	83 c0 41             	add    eax,0x41
c0015f19:	0f be e8             	movsx  ebp,al
c0015f1c:	3c 43                	cmp    al,0x43
c0015f1e:	75 10                	jne    c0015f30 <LogicalDisk::assignDriveLetter()+0x50>
c0015f20:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015f27:	75 5d                	jne    c0015f86 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f29:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015f2e:	75 56                	jne    c0015f86 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f30:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015f33:	ba 01 00 00 00       	mov    edx,0x1
c0015f38:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015f3c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015f40:	d3 e2                	shl    edx,cl
c0015f42:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015f46:	89 d7                	mov    edi,edx
c0015f48:	89 d6                	mov    esi,edx
c0015f4a:	c1 ff 1f             	sar    edi,0x1f
c0015f4d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015f51:	21 f9                	and    ecx,edi
c0015f53:	09 d1                	or     ecx,edx
c0015f55:	75 2f                	jne    c0015f86 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f57:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015f5b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015f5f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015f65:	09 f2                	or     edx,esi
c0015f67:	89 15 c0 df 02 c0    	mov    DWORD PTR ds:0xc002dfc0,edx
c0015f6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f71:	09 fa                	or     edx,edi
c0015f73:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015f77:	89 15 c4 df 02 c0    	mov    DWORD PTR ds:0xc002dfc4,edx
c0015f7d:	89 1c bd e0 df 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2020],ebx
c0015f84:	eb 08                	jmp    c0015f8e <LogicalDisk::assignDriveLetter()+0xae>
c0015f86:	45                   	inc    ebp
c0015f87:	40                   	inc    eax
c0015f88:	3c 5b                	cmp    al,0x5b
c0015f8a:	75 90                	jne    c0015f1c <LogicalDisk::assignDriveLetter()+0x3c>
c0015f8c:	31 c0                	xor    eax,eax
c0015f8e:	83 c4 14             	add    esp,0x14
c0015f91:	5b                   	pop    ebx
c0015f92:	5e                   	pop    esi
c0015f93:	5f                   	pop    edi
c0015f94:	5d                   	pop    ebp
c0015f95:	c3                   	ret    

c0015f96 <LogicalDisk::mount()>:
c0015f96:	56                   	push   esi
c0015f97:	53                   	push   ebx
c0015f98:	53                   	push   ebx
c0015f99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f9d:	8b 1d 54 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db54
c0015fa3:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015fad:	85 db                	test   ebx,ebx
c0015faf:	74 27                	je     c0015fd8 <LogicalDisk::mount()+0x42>
c0015fb1:	51                   	push   ecx
c0015fb2:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015fb9:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015fbb:	83 e8 41             	sub    eax,0x41
c0015fbe:	50                   	push   eax
c0015fbf:	56                   	push   esi
c0015fc0:	53                   	push   ebx
c0015fc1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015fc4:	83 c4 10             	add    esp,0x10
c0015fc7:	84 c0                	test   al,al
c0015fc9:	74 08                	je     c0015fd3 <LogicalDisk::mount()+0x3d>
c0015fcb:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015fd1:	eb 07                	jmp    c0015fda <LogicalDisk::mount()+0x44>
c0015fd3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015fd6:	eb d5                	jmp    c0015fad <LogicalDisk::mount()+0x17>
c0015fd8:	31 c0                	xor    eax,eax
c0015fda:	5a                   	pop    edx
c0015fdb:	5b                   	pop    ebx
c0015fdc:	5e                   	pop    esi
c0015fdd:	c3                   	ret    

c0015fde <LogicalDisk::unmount()>:
c0015fde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fe2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015fec:	c3                   	ret    
c0015fed:	90                   	nop

c0015fee <LogicalDisk::eject()>:
c0015fee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ff2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015ff8:	8b 10                	mov    edx,DWORD PTR [eax]
c0015ffa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015ffe:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016001:	90                   	nop

c0016002 <LogicalDisk::unassignDriveLetter()>:
c0016002:	57                   	push   edi
c0016003:	56                   	push   esi
c0016004:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016008:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001600f:	84 c9                	test   cl,cl
c0016011:	75 0f                	jne    c0016022 <LogicalDisk::unassignDriveLetter()+0x20>
c0016013:	c7 44 24 0c cc af 02 c0 	mov    DWORD PTR [esp+0xc],0xc002afcc
c001601b:	5e                   	pop    esi
c001601c:	5f                   	pop    edi
c001601d:	e9 4d 3e 00 00       	jmp    c0019e6f <Krnl::panic(char const*)>
c0016022:	83 e9 41             	sub    ecx,0x41
c0016025:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001602c:	b8 01 00 00 00       	mov    eax,0x1
c0016031:	c7 04 8d e0 df 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2020],0x0
c001603c:	d3 e0                	shl    eax,cl
c001603e:	89 c7                	mov    edi,eax
c0016040:	f7 d0                	not    eax
c0016042:	c1 ff 1f             	sar    edi,0x1f
c0016045:	21 05 c0 df 02 c0    	and    DWORD PTR ds:0xc002dfc0,eax
c001604b:	89 fe                	mov    esi,edi
c001604d:	f7 d6                	not    esi
c001604f:	21 35 c4 df 02 c0    	and    DWORD PTR ds:0xc002dfc4,esi
c0016055:	5e                   	pop    esi
c0016056:	5f                   	pop    edi
c0016057:	c3                   	ret    

c0016058 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016058:	57                   	push   edi
c0016059:	56                   	push   esi
c001605a:	53                   	push   ebx
c001605b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001605f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016063:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016067:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001606b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016071:	77 41                	ja     c00160b4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016073:	99                   	cdq    
c0016074:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001607a:	01 c8                	add    eax,ecx
c001607c:	11 da                	adc    edx,ebx
c001607e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016084:	19 d7                	sbb    edi,edx
c0016086:	72 33                	jb     c00160bb <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016088:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001608e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016094:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016098:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001609c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00160a2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00160a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00160ac:	5b                   	pop    ebx
c00160ad:	5e                   	pop    esi
c00160ae:	5f                   	pop    edi
c00160af:	e9 cc 0a 00 00       	jmp    c0016b80 <VCache::read(unsigned long long, int, void*)>
c00160b4:	b8 05 00 00 00       	mov    eax,0x5
c00160b9:	eb 05                	jmp    c00160c0 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00160bb:	b8 07 00 00 00       	mov    eax,0x7
c00160c0:	5b                   	pop    ebx
c00160c1:	5e                   	pop    esi
c00160c2:	5f                   	pop    edi
c00160c3:	c3                   	ret    

c00160c4 <LogicalDisk::write(unsigned long long, int, void*)>:
c00160c4:	57                   	push   edi
c00160c5:	56                   	push   esi
c00160c6:	53                   	push   ebx
c00160c7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00160cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00160cf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00160d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00160d7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00160dd:	77 41                	ja     c0016120 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00160df:	99                   	cdq    
c00160e0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00160e6:	01 c8                	add    eax,ecx
c00160e8:	11 da                	adc    edx,ebx
c00160ea:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00160f0:	19 d7                	sbb    edi,edx
c00160f2:	72 33                	jb     c0016127 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00160f4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00160fa:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016100:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016104:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016108:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001610e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016114:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016118:	5b                   	pop    ebx
c0016119:	5e                   	pop    esi
c001611a:	5f                   	pop    edi
c001611b:	e9 76 09 00 00       	jmp    c0016a96 <VCache::write(unsigned long long, int, void*)>
c0016120:	b8 05 00 00 00       	mov    eax,0x5
c0016125:	eb 05                	jmp    c001612c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016127:	b8 07 00 00 00       	mov    eax,0x7
c001612c:	5b                   	pop    ebx
c001612d:	5e                   	pop    esi
c001612e:	5f                   	pop    edi
c001612f:	c3                   	ret    

c0016130 <Mouse::Mouse(char const*)>:
c0016130:	83 ec 0c             	sub    esp,0xc
c0016133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016137:	83 ec 08             	sub    esp,0x8
c001613a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001613e:	50                   	push   eax
c001613f:	e8 fc db ff ff       	call   c0013d40 <Device::Device(char const*)>
c0016144:	83 c4 10             	add    esp,0x10
c0016147:	ba 20 b0 02 c0       	mov    edx,0xc002b020
c001614c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016150:	89 10                	mov    DWORD PTR [eax],edx
c0016152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016156:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016160:	90                   	nop
c0016161:	83 c4 0c             	add    esp,0xc
c0016164:	c3                   	ret    
c0016165:	90                   	nop

c0016166 <Mouse::~Mouse()>:
c0016166:	83 ec 0c             	sub    esp,0xc
c0016169:	ba 20 b0 02 c0       	mov    edx,0xc002b020
c001616e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016172:	89 10                	mov    DWORD PTR [eax],edx
c0016174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016178:	83 ec 0c             	sub    esp,0xc
c001617b:	50                   	push   eax
c001617c:	e8 89 d8 ff ff       	call   c0013a0a <Device::~Device()>
c0016181:	83 c4 10             	add    esp,0x10
c0016184:	90                   	nop
c0016185:	83 c4 0c             	add    esp,0xc
c0016188:	c3                   	ret    
c0016189:	90                   	nop

c001618a <Mouse::~Mouse()>:
c001618a:	83 ec 0c             	sub    esp,0xc
c001618d:	83 ec 0c             	sub    esp,0xc
c0016190:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016194:	e8 cd ff ff ff       	call   c0016166 <Mouse::~Mouse()>
c0016199:	83 c4 10             	add    esp,0x10
c001619c:	83 ec 08             	sub    esp,0x8
c001619f:	68 58 01 00 00       	push   0x158
c00161a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161a8:	e8 7e c4 ff ff       	call   c001262b <operator delete(void*, unsigned long)>
c00161ad:	83 c4 10             	add    esp,0x10
c00161b0:	83 c4 0c             	add    esp,0xc
c00161b3:	c3                   	ret    

c00161b4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00161b4:	55                   	push   ebp
c00161b5:	57                   	push   edi
c00161b6:	56                   	push   esi
c00161b7:	53                   	push   ebx
c00161b8:	81 ec 28 01 00 00    	sub    esp,0x128
c00161be:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00161c5:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00161cc:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00161d3:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00161da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00161de:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00161e2:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00161e9:	e8 4e dc ff ff       	call   c0013e3c <Device::getName()>
c00161ee:	5a                   	pop    edx
c00161ef:	59                   	pop    ecx
c00161f0:	50                   	push   eax
c00161f1:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00161f5:	55                   	push   ebp
c00161f6:	e8 11 a6 fe ff       	call   c000080c <strcpy>
c00161fb:	5b                   	pop    ebx
c00161fc:	58                   	pop    eax
c00161fd:	68 44 b0 02 c0       	push   0xc002b044
c0016202:	55                   	push   ebp
c0016203:	e8 44 a7 fe ff       	call   c000094c <strcat>
c0016208:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001620f:	e8 85 93 ff ff       	call   c000f599 <malloc>
c0016214:	83 c4 0c             	add    esp,0xc
c0016217:	89 c3                	mov    ebx,eax
c0016219:	57                   	push   edi
c001621a:	56                   	push   esi
c001621b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001621f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016223:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001622a:	55                   	push   ebp
c001622b:	50                   	push   eax
c001622c:	e8 f9 fb ff ff       	call   c0015e2a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016231:	83 c4 14             	add    esp,0x14
c0016234:	53                   	push   ebx
c0016235:	e8 a6 fc ff ff       	call   c0015ee0 <LogicalDisk::assignDriveLetter()>
c001623a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001623d:	e8 54 fd ff ff       	call   c0015f96 <LogicalDisk::mount()>
c0016242:	58                   	pop    eax
c0016243:	5a                   	pop    edx
c0016244:	53                   	push   ebx
c0016245:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001624c:	e8 eb d8 ff ff       	call   c0013b3c <Device::addChild(Device*)>
c0016251:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016257:	5b                   	pop    ebx
c0016258:	5e                   	pop    esi
c0016259:	5f                   	pop    edi
c001625a:	5d                   	pop    ebp
c001625b:	c3                   	ret    

c001625c <createPartitionsForDisk(PhysicalDisk*)>:
c001625c:	55                   	push   ebp
c001625d:	57                   	push   edi
c001625e:	56                   	push   esi
c001625f:	53                   	push   ebx
c0016260:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016266:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001626d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016273:	3d 00 02 00 00       	cmp    eax,0x200
c0016278:	74 27                	je     c00162a1 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001627a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016280:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016286:	83 ec 10             	sub    esp,0x10
c0016289:	0f a4 f7 0a          	shld   edi,esi,0xa
c001628d:	99                   	cdq    
c001628e:	c1 e6 0a             	shl    esi,0xa
c0016291:	52                   	push   edx
c0016292:	89 fd                	mov    ebp,edi
c0016294:	50                   	push   eax
c0016295:	55                   	push   ebp
c0016296:	56                   	push   esi
c0016297:	e8 a8 04 01 00       	call   c0026744 <__udivdi3>
c001629c:	e9 b1 00 00 00       	jmp    c0016352 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00162a1:	83 ec 0c             	sub    esp,0xc
c00162a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00162a6:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00162aa:	56                   	push   esi
c00162ab:	6a 01                	push   0x1
c00162ad:	6a 00                	push   0x0
c00162af:	6a 00                	push   0x0
c00162b1:	53                   	push   ebx
c00162b2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00162b5:	83 c4 20             	add    esp,0x20
c00162b8:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00162c0:	75 0a                	jne    c00162cc <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00162c2:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00162ca:	74 2c                	je     c00162f8 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00162cc:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00162d2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00162d8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00162de:	83 ec 10             	sub    esp,0x10
c00162e1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00162e5:	89 f7                	mov    edi,esi
c00162e7:	c1 e0 0a             	shl    eax,0xa
c00162ea:	c1 ff 1f             	sar    edi,0x1f
c00162ed:	57                   	push   edi
c00162ee:	56                   	push   esi
c00162ef:	52                   	push   edx
c00162f0:	50                   	push   eax
c00162f1:	e8 4e 04 01 00       	call   c0026744 <__udivdi3>
c00162f6:	eb 5a                	jmp    c0016352 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00162f8:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00162ff:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016306:	83 e1 7f             	and    ecx,0x7f
c0016309:	83 e0 7f             	and    eax,0x7f
c001630c:	01 c1                	add    ecx,eax
c001630e:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016315:	83 e0 7f             	and    eax,0x7f
c0016318:	01 c1                	add    ecx,eax
c001631a:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016321:	83 e0 7f             	and    eax,0x7f
c0016324:	00 c1                	add    cl,al
c0016326:	74 41                	je     c0016369 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016328:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001632e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016334:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001633a:	83 ec 10             	sub    esp,0x10
c001633d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016341:	89 f7                	mov    edi,esi
c0016343:	c1 e0 0a             	shl    eax,0xa
c0016346:	c1 ff 1f             	sar    edi,0x1f
c0016349:	57                   	push   edi
c001634a:	56                   	push   esi
c001634b:	52                   	push   edx
c001634c:	50                   	push   eax
c001634d:	e8 f2 03 01 00       	call   c0026744 <__udivdi3>
c0016352:	83 c4 14             	add    esp,0x14
c0016355:	52                   	push   edx
c0016356:	50                   	push   eax
c0016357:	6a 00                	push   0x0
c0016359:	6a 00                	push   0x0
c001635b:	53                   	push   ebx
c001635c:	e8 53 fe ff ff       	call   c00161b4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016361:	83 c4 20             	add    esp,0x20
c0016364:	e9 79 01 00 00       	jmp    c00164e2 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016369:	89 f0                	mov    eax,esi
c001636b:	31 f6                	xor    esi,esi
c001636d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016374:	75 02                	jne    c0016378 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016376:	89 f1                	mov    ecx,esi
c0016378:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001637f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016386:	c1 e2 08             	shl    edx,0x8
c0016389:	c1 e7 10             	shl    edi,0x10
c001638c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016394:	09 fa                	or     edx,edi
c0016396:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001639e:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00163a5:	83 c0 10             	add    eax,0x10
c00163a8:	09 fa                	or     edx,edi
c00163aa:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00163b1:	c1 e7 18             	shl    edi,0x18
c00163b4:	09 fa                	or     edx,edi
c00163b6:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00163bd:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00163c1:	c1 e7 10             	shl    edi,0x10
c00163c4:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00163cb:	c1 e2 08             	shl    edx,0x8
c00163ce:	09 fa                	or     edx,edi
c00163d0:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00163d7:	09 fa                	or     edx,edi
c00163d9:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00163e0:	c1 e7 18             	shl    edi,0x18
c00163e3:	09 fa                	or     edx,edi
c00163e5:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00163e9:	46                   	inc    esi
c00163ea:	83 fe 04             	cmp    esi,0x4
c00163ed:	0f 85 7a ff ff ff    	jne    c001636d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00163f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f7:	83 f0 01             	xor    eax,0x1
c00163fa:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00163fe:	75 57                	jne    c0016457 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016400:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016404:	83 f0 01             	xor    eax,0x1
c0016407:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001640b:	75 4a                	jne    c0016457 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001640d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016411:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016419:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016421:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016427:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001642d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016433:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016437:	89 f7                	mov    edi,esi
c0016439:	c1 e0 0a             	shl    eax,0xa
c001643c:	c1 ff 1f             	sar    edi,0x1f
c001643f:	57                   	push   edi
c0016440:	56                   	push   esi
c0016441:	52                   	push   edx
c0016442:	50                   	push   eax
c0016443:	e8 fc 02 01 00       	call   c0026744 <__udivdi3>
c0016448:	83 c4 10             	add    esp,0x10
c001644b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001644f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016453:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016457:	84 c9                	test   cl,cl
c0016459:	74 53                	je     c00164ae <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001645b:	0f b6 c9             	movzx  ecx,cl
c001645e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016466:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001646a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001646e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016472:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016476:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001647a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001647e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016482:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001648a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001648e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016492:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016496:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001649a:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001649e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00164a2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00164a6:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00164aa:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00164ae:	31 ed                	xor    ebp,ebp
c00164b0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00164b4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00164b8:	89 f8                	mov    eax,edi
c00164ba:	09 f0                	or     eax,esi
c00164bc:	74 1e                	je     c00164dc <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00164be:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00164c2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00164c6:	89 d1                	mov    ecx,edx
c00164c8:	09 c1                	or     ecx,eax
c00164ca:	74 10                	je     c00164dc <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00164cc:	83 ec 0c             	sub    esp,0xc
c00164cf:	57                   	push   edi
c00164d0:	56                   	push   esi
c00164d1:	52                   	push   edx
c00164d2:	50                   	push   eax
c00164d3:	53                   	push   ebx
c00164d4:	e8 db fc ff ff       	call   c00161b4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00164d9:	83 c4 20             	add    esp,0x20
c00164dc:	45                   	inc    ebp
c00164dd:	83 fd 04             	cmp    ebp,0x4
c00164e0:	75 ce                	jne    c00164b0 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00164e2:	81 c4 5c 02 00 00    	add    esp,0x25c
c00164e8:	5b                   	pop    ebx
c00164e9:	5e                   	pop    esi
c00164ea:	5f                   	pop    edi
c00164eb:	5d                   	pop    ebp
c00164ec:	c3                   	ret    
c00164ed:	90                   	nop

c00164ee <Serial::Serial(char const*)>:
c00164ee:	83 ec 0c             	sub    esp,0xc
c00164f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164f5:	83 ec 08             	sub    esp,0x8
c00164f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164fc:	50                   	push   eax
c00164fd:	e8 3e d8 ff ff       	call   c0013d40 <Device::Device(char const*)>
c0016502:	83 c4 10             	add    esp,0x10
c0016505:	ba 58 b0 02 c0       	mov    edx,0xc002b058
c001650a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001650e:	89 10                	mov    DWORD PTR [eax],edx
c0016510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016514:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001651e:	90                   	nop
c001651f:	83 c4 0c             	add    esp,0xc
c0016522:	c3                   	ret    
c0016523:	90                   	nop

c0016524 <Serial::~Serial()>:
c0016524:	83 ec 0c             	sub    esp,0xc
c0016527:	ba 58 b0 02 c0       	mov    edx,0xc002b058
c001652c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016530:	89 10                	mov    DWORD PTR [eax],edx
c0016532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016536:	83 ec 0c             	sub    esp,0xc
c0016539:	50                   	push   eax
c001653a:	e8 cb d4 ff ff       	call   c0013a0a <Device::~Device()>
c001653f:	83 c4 10             	add    esp,0x10
c0016542:	90                   	nop
c0016543:	83 c4 0c             	add    esp,0xc
c0016546:	c3                   	ret    
c0016547:	90                   	nop

c0016548 <Serial::~Serial()>:
c0016548:	83 ec 0c             	sub    esp,0xc
c001654b:	83 ec 0c             	sub    esp,0xc
c001654e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016552:	e8 cd ff ff ff       	call   c0016524 <Serial::~Serial()>
c0016557:	83 c4 10             	add    esp,0x10
c001655a:	83 ec 08             	sub    esp,0x8
c001655d:	68 58 01 00 00       	push   0x158
c0016562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016566:	e8 c0 c0 ff ff       	call   c001262b <operator delete(void*, unsigned long)>
c001656b:	83 c4 10             	add    esp,0x10
c001656e:	83 c4 0c             	add    esp,0xc
c0016571:	c3                   	ret    

c0016572 <Timer::Timer(char const*)>:
c0016572:	83 ec 0c             	sub    esp,0xc
c0016575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016579:	83 ec 08             	sub    esp,0x8
c001657c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016580:	50                   	push   eax
c0016581:	e8 ba d7 ff ff       	call   c0013d40 <Device::Device(char const*)>
c0016586:	83 c4 10             	add    esp,0x10
c0016589:	ba 9c b0 02 c0       	mov    edx,0xc002b09c
c001658e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016592:	89 10                	mov    DWORD PTR [eax],edx
c0016594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016598:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00165a2:	90                   	nop
c00165a3:	83 c4 0c             	add    esp,0xc
c00165a6:	c3                   	ret    
c00165a7:	90                   	nop

c00165a8 <Timer::~Timer()>:
c00165a8:	83 ec 0c             	sub    esp,0xc
c00165ab:	ba 9c b0 02 c0       	mov    edx,0xc002b09c
c00165b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165b4:	89 10                	mov    DWORD PTR [eax],edx
c00165b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165ba:	83 ec 0c             	sub    esp,0xc
c00165bd:	50                   	push   eax
c00165be:	e8 47 d4 ff ff       	call   c0013a0a <Device::~Device()>
c00165c3:	83 c4 10             	add    esp,0x10
c00165c6:	90                   	nop
c00165c7:	83 c4 0c             	add    esp,0xc
c00165ca:	c3                   	ret    
c00165cb:	90                   	nop

c00165cc <Timer::~Timer()>:
c00165cc:	83 ec 0c             	sub    esp,0xc
c00165cf:	83 ec 0c             	sub    esp,0xc
c00165d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165d6:	e8 cd ff ff ff       	call   c00165a8 <Timer::~Timer()>
c00165db:	83 c4 10             	add    esp,0x10
c00165de:	83 ec 08             	sub    esp,0x8
c00165e1:	68 5c 01 00 00       	push   0x15c
c00165e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165ea:	e8 3c c0 ff ff       	call   c001262b <operator delete(void*, unsigned long)>
c00165ef:	83 c4 10             	add    esp,0x10
c00165f2:	83 c4 0c             	add    esp,0xc
c00165f5:	c3                   	ret    

c00165f6 <Timer::read()>:
c00165f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165fa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016600:	c3                   	ret    

c0016601 <timerHandler(unsigned long long)>:
c0016601:	55                   	push   ebp
c0016602:	57                   	push   edi
c0016603:	56                   	push   esi
c0016604:	53                   	push   ebx
c0016605:	83 ec 0c             	sub    esp,0xc
c0016608:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001660c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016610:	01 35 50 e0 02 c0    	add    DWORD PTR ds:0xc002e050,esi
c0016616:	11 3d 54 e0 02 c0    	adc    DWORD PTR ds:0xc002e054,edi
c001661c:	80 3d ed d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d9ed,0x0
c0016623:	0f 84 42 01 00 00    	je     c001676b <timerHandler(unsigned long long)+0x16a>
c0016629:	fa                   	cli    
c001662a:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c0016630:	83 ec 0c             	sub    esp,0xc
c0016633:	ff 05 04 0f 03 c0    	inc    DWORD PTR ds:0xc0030f04
c0016639:	68 18 0f 03 c0       	push   0xc0030f18
c001663e:	e8 5b 21 01 00       	call   c002879e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016643:	83 c4 10             	add    esp,0x10
c0016646:	84 c0                	test   al,al
c0016648:	0f 85 a2 00 00 00    	jne    c00166f0 <timerHandler(unsigned long long)+0xef>
c001664e:	83 ec 0c             	sub    esp,0xc
c0016651:	68 18 0f 03 c0       	push   0xc0030f18
c0016656:	e8 5f 21 01 00       	call   c00287ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001665b:	83 c4 10             	add    esp,0x10
c001665e:	89 c3                	mov    ebx,eax
c0016660:	83 ec 0c             	sub    esp,0xc
c0016663:	68 18 0f 03 c0       	push   0xc0030f18
c0016668:	e8 4d 21 01 00       	call   c00287ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001666d:	c7 04 24 18 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f18
c0016674:	89 c5                	mov    ebp,eax
c0016676:	e8 47 21 01 00       	call   c00287c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001667b:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001667e:	83 c4 10             	add    esp,0x10
c0016681:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016684:	39 15 50 e0 02 c0    	cmp    DWORD PTR ds:0xc002e050,edx
c001668a:	a1 54 e0 02 c0       	mov    eax,ds:0xc002e054
c001668f:	19 c8                	sbb    eax,ecx
c0016691:	72 21                	jb     c00166b4 <timerHandler(unsigned long long)+0xb3>
c0016693:	83 ec 0c             	sub    esp,0xc
c0016696:	55                   	push   ebp
c0016697:	e8 e0 77 00 00       	call   c001de7c <unblockTask(ThreadControlBlock*)>
c001669c:	83 c4 10             	add    esp,0x10
c001669f:	39 eb                	cmp    ebx,ebp
c00166a1:	75 21                	jne    c00166c4 <timerHandler(unsigned long long)+0xc3>
c00166a3:	83 ec 0c             	sub    esp,0xc
c00166a6:	68 18 0f 03 c0       	push   0xc0030f18
c00166ab:	e8 0a 21 01 00       	call   c00287ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166b0:	89 c3                	mov    ebx,eax
c00166b2:	eb 0d                	jmp    c00166c1 <timerHandler(unsigned long long)+0xc0>
c00166b4:	50                   	push   eax
c00166b5:	50                   	push   eax
c00166b6:	55                   	push   ebp
c00166b7:	68 18 0f 03 c0       	push   0xc0030f18
c00166bc:	e8 af 21 01 00       	call   c0028870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00166c1:	83 c4 10             	add    esp,0x10
c00166c4:	83 ec 0c             	sub    esp,0xc
c00166c7:	68 18 0f 03 c0       	push   0xc0030f18
c00166cc:	e8 cd 20 01 00       	call   c002879e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00166d1:	83 c4 10             	add    esp,0x10
c00166d4:	84 c0                	test   al,al
c00166d6:	75 18                	jne    c00166f0 <timerHandler(unsigned long long)+0xef>
c00166d8:	83 ec 0c             	sub    esp,0xc
c00166db:	68 18 0f 03 c0       	push   0xc0030f18
c00166e0:	e8 d5 20 01 00       	call   c00287ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166e5:	83 c4 10             	add    esp,0x10
c00166e8:	39 d8                	cmp    eax,ebx
c00166ea:	0f 85 70 ff ff ff    	jne    c0016660 <timerHandler(unsigned long long)+0x5f>
c00166f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166f5:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c00166f9:	74 3d                	je     c0016738 <timerHandler(unsigned long long)+0x137>
c00166fb:	80 3d ec d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d9ec,0x0
c0016702:	74 34                	je     c0016738 <timerHandler(unsigned long long)+0x137>
c0016704:	fa                   	cli    
c0016705:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c001670b:	31 d2                	xor    edx,edx
c001670d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016712:	89 f9                	mov    ecx,edi
c0016714:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016717:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001671c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001671f:	39 c6                	cmp    esi,eax
c0016721:	19 d1                	sbb    ecx,edx
c0016723:	72 05                	jb     c001672a <timerHandler(unsigned long long)+0x129>
c0016725:	e8 cf 72 00 00       	call   c001d9f9 <schedule()>
c001672a:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001672f:	48                   	dec    eax
c0016730:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c0016735:	75 01                	jne    c0016738 <timerHandler(unsigned long long)+0x137>
c0016737:	fb                   	sti    
c0016738:	a1 04 0f 03 c0       	mov    eax,ds:0xc0030f04
c001673d:	48                   	dec    eax
c001673e:	a3 04 0f 03 c0       	mov    ds:0xc0030f04,eax
c0016743:	75 18                	jne    c001675d <timerHandler(unsigned long long)+0x15c>
c0016745:	83 3d 00 0f 03 c0 00 	cmp    DWORD PTR ds:0xc0030f00,0x0
c001674c:	74 0f                	je     c001675d <timerHandler(unsigned long long)+0x15c>
c001674e:	c7 05 00 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f00,0x0
c0016758:	e8 9c 72 00 00       	call   c001d9f9 <schedule()>
c001675d:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c0016762:	48                   	dec    eax
c0016763:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c0016768:	75 01                	jne    c001676b <timerHandler(unsigned long long)+0x16a>
c001676a:	fb                   	sti    
c001676b:	83 c4 0c             	add    esp,0xc
c001676e:	5b                   	pop    ebx
c001676f:	5e                   	pop    esi
c0016770:	5f                   	pop    edi
c0016771:	5d                   	pop    ebp
c0016772:	c3                   	ret    

c0016773 <setupTimer(int)>:
c0016773:	57                   	push   edi
c0016774:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0016779:	56                   	push   esi
c001677a:	53                   	push   ebx
c001677b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001677f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016785:	83 ec 0c             	sub    esp,0xc
c0016788:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001678e:	e8 a9 d6 ff ff       	call   c0013e3c <Device::getName()>
c0016793:	83 c4 10             	add    esp,0x10
c0016796:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016799:	0f 85 8d 00 00 00    	jne    c001682c <setupTimer(int)+0xb9>
c001679f:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c00167a4:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00167ab:	74 7f                	je     c001682c <setupTimer(int)+0xb9>
c00167ad:	83 ec 0c             	sub    esp,0xc
c00167b0:	68 5c 01 00 00       	push   0x15c
c00167b5:	e8 df 8d ff ff       	call   c000f599 <malloc>
c00167ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00167bd:	89 c3                	mov    ebx,eax
c00167bf:	e8 54 fb 00 00       	call   c0026318 <PIT::PIT()>
c00167c4:	59                   	pop    ecx
c00167c5:	5f                   	pop    edi
c00167c6:	53                   	push   ebx
c00167c7:	ff 35 e8 d9 02 c0    	push   DWORD PTR ds:0xc002d9e8
c00167cd:	e8 6a d3 ff ff       	call   c0013b3c <Device::addChild(Device*)>
c00167d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167d4:	6a 00                	push   0x0
c00167d6:	6a 00                	push   0x0
c00167d8:	56                   	push   esi
c00167d9:	53                   	push   ebx
c00167da:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167dd:	83 c4 14             	add    esp,0x14
c00167e0:	68 60 01 00 00       	push   0x160
c00167e5:	e8 af 8d ff ff       	call   c000f599 <malloc>
c00167ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00167ed:	89 c7                	mov    edi,eax
c00167ef:	e8 d4 f9 00 00       	call   c00261c8 <APICTimer::APICTimer()>
c00167f4:	6a 00                	push   0x0
c00167f6:	6a 00                	push   0x0
c00167f8:	56                   	push   esi
c00167f9:	57                   	push   edi
c00167fa:	e8 cb f8 00 00       	call   c00260ca <APICTimer::open(int, int, void*)>
c00167ff:	83 c4 20             	add    esp,0x20
c0016802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016804:	6a 00                	push   0x0
c0016806:	6a 00                	push   0x0
c0016808:	6a 00                	push   0x0
c001680a:	53                   	push   ebx
c001680b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001680e:	58                   	pop    eax
c001680f:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0016814:	5a                   	pop    edx
c0016815:	57                   	push   edi
c0016816:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001681c:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016822:	e8 15 d3 ff ff       	call   c0013b3c <Device::addChild(Device*)>
c0016827:	83 c4 10             	add    esp,0x10
c001682a:	eb 33                	jmp    c001685f <setupTimer(int)+0xec>
c001682c:	83 ec 0c             	sub    esp,0xc
c001682f:	68 5c 01 00 00       	push   0x15c
c0016834:	e8 60 8d ff ff       	call   c000f599 <malloc>
c0016839:	89 04 24             	mov    DWORD PTR [esp],eax
c001683c:	89 c3                	mov    ebx,eax
c001683e:	e8 d5 fa 00 00       	call   c0026318 <PIT::PIT()>
c0016843:	58                   	pop    eax
c0016844:	5a                   	pop    edx
c0016845:	53                   	push   ebx
c0016846:	ff 35 e8 d9 02 c0    	push   DWORD PTR ds:0xc002d9e8
c001684c:	e8 eb d2 ff ff       	call   c0013b3c <Device::addChild(Device*)>
c0016851:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016853:	6a 00                	push   0x0
c0016855:	6a 00                	push   0x0
c0016857:	56                   	push   esi
c0016858:	53                   	push   ebx
c0016859:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001685c:	83 c4 20             	add    esp,0x20
c001685f:	89 d8                	mov    eax,ebx
c0016861:	5b                   	pop    ebx
c0016862:	5e                   	pop    esi
c0016863:	5f                   	pop    edi
c0016864:	c3                   	ret    
c0016865:	90                   	nop

c0016866 <VCache::VCache(PhysicalDisk*)>:
c0016866:	53                   	push   ebx
c0016867:	83 ec 18             	sub    esp,0x18
c001686a:	ba cc b0 02 c0       	mov    edx,0xc002b0cc
c001686f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016873:	89 10                	mov    DWORD PTR [eax],edx
c0016875:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016879:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016880:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016884:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001688b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001688f:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016896:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001689d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168a1:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00168a8:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00168af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168b3:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00168ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168be:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00168c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168c6:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00168cd:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00168d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168d8:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00168dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168e0:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00168e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168e8:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00168ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168f0:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00168f7:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00168ff:	83 ec 0c             	sub    esp,0xc
c0016902:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016906:	e8 8e 8c ff ff       	call   c000f599 <malloc>
c001690b:	83 c4 10             	add    esp,0x10
c001690e:	89 c3                	mov    ebx,eax
c0016910:	83 ec 0c             	sub    esp,0xc
c0016913:	53                   	push   ebx
c0016914:	e8 a9 6e 00 00       	call   c001d7c2 <Mutex::Mutex()>
c0016919:	83 c4 10             	add    esp,0x10
c001691c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016920:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016923:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016927:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001692b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001692e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016932:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016939:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001693d:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016943:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016947:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001694a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001694e:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016954:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001695a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001695e:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016961:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016964:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016968:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001696c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016970:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016976:	05 00 01 00 00       	add    eax,0x100
c001697b:	c1 e0 04             	shl    eax,0x4
c001697e:	83 ec 0c             	sub    esp,0xc
c0016981:	50                   	push   eax
c0016982:	e8 12 8c ff ff       	call   c000f599 <malloc>
c0016987:	83 c4 10             	add    esp,0x10
c001698a:	89 c2                	mov    edx,eax
c001698c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016990:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016993:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016997:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001699e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169a2:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00169a6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00169aa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169b0:	c1 e0 07             	shl    eax,0x7
c00169b3:	83 ec 0c             	sub    esp,0xc
c00169b6:	50                   	push   eax
c00169b7:	e8 dd 8b ff ff       	call   c000f599 <malloc>
c00169bc:	83 c4 10             	add    esp,0x10
c00169bf:	89 c2                	mov    edx,eax
c00169c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169c5:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00169c8:	90                   	nop
c00169c9:	83 c4 18             	add    esp,0x18
c00169cc:	5b                   	pop    ebx
c00169cd:	c3                   	ret    

c00169ce <VCache::invalidateReadBuffer()>:
c00169ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00169d2:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00169d8:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00169dc:	c3                   	ret    
c00169dd:	90                   	nop

c00169de <VCache::writeWriteBuffer()>:
c00169de:	53                   	push   ebx
c00169df:	83 ec 14             	sub    esp,0x14
c00169e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00169e6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00169e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00169eb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00169ee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00169f1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00169f4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00169f7:	50                   	push   eax
c00169f8:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00169fb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016a02:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016a09:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016a0d:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016a14:	83 c4 28             	add    esp,0x28
c0016a17:	5b                   	pop    ebx
c0016a18:	c3                   	ret    
c0016a19:	90                   	nop

c0016a1a <VCache::~VCache()>:
c0016a1a:	83 ec 0c             	sub    esp,0xc
c0016a1d:	ba cc b0 02 c0       	mov    edx,0xc002b0cc
c0016a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a26:	89 10                	mov    DWORD PTR [eax],edx
c0016a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a2c:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016a2f:	84 c0                	test   al,al
c0016a31:	74 0f                	je     c0016a42 <VCache::~VCache()+0x28>
c0016a33:	83 ec 0c             	sub    esp,0xc
c0016a36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a3a:	e8 9f ff ff ff       	call   c00169de <VCache::writeWriteBuffer()>
c0016a3f:	83 c4 10             	add    esp,0x10
c0016a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a46:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016a49:	83 ec 0c             	sub    esp,0xc
c0016a4c:	50                   	push   eax
c0016a4d:	e8 57 8b ff ff       	call   c000f5a9 <free>
c0016a52:	83 c4 10             	add    esp,0x10
c0016a55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a59:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016a5c:	83 ec 0c             	sub    esp,0xc
c0016a5f:	50                   	push   eax
c0016a60:	e8 44 8b ff ff       	call   c000f5a9 <free>
c0016a65:	83 c4 10             	add    esp,0x10
c0016a68:	90                   	nop
c0016a69:	83 c4 0c             	add    esp,0xc
c0016a6c:	c3                   	ret    
c0016a6d:	90                   	nop

c0016a6e <VCache::~VCache()>:
c0016a6e:	83 ec 0c             	sub    esp,0xc
c0016a71:	83 ec 0c             	sub    esp,0xc
c0016a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a78:	e8 9d ff ff ff       	call   c0016a1a <VCache::~VCache()>
c0016a7d:	83 c4 10             	add    esp,0x10
c0016a80:	83 ec 08             	sub    esp,0x8
c0016a83:	6a 44                	push   0x44
c0016a85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a89:	e8 9d bb ff ff       	call   c001262b <operator delete(void*, unsigned long)>
c0016a8e:	83 c4 10             	add    esp,0x10
c0016a91:	83 c4 0c             	add    esp,0xc
c0016a94:	c3                   	ret    
c0016a95:	90                   	nop

c0016a96 <VCache::write(unsigned long long, int, void*)>:
c0016a96:	55                   	push   ebp
c0016a97:	57                   	push   edi
c0016a98:	56                   	push   esi
c0016a99:	53                   	push   ebx
c0016a9a:	83 ec 18             	sub    esp,0x18
c0016a9d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016aa1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016aa5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016aa9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016aac:	e8 57 72 00 00       	call   c001dd08 <Semaphore::acquire()>
c0016ab1:	83 c4 10             	add    esp,0x10
c0016ab4:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016ab8:	74 0c                	je     c0016ac6 <VCache::write(unsigned long long, int, void*)+0x30>
c0016aba:	83 ec 0c             	sub    esp,0xc
c0016abd:	53                   	push   ebx
c0016abe:	e8 0b ff ff ff       	call   c00169ce <VCache::invalidateReadBuffer()>
c0016ac3:	83 c4 10             	add    esp,0x10
c0016ac6:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016aca:	74 5c                	je     c0016b28 <VCache::write(unsigned long long, int, void*)+0x92>
c0016acc:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016acf:	89 e8                	mov    eax,ebp
c0016ad1:	99                   	cdq    
c0016ad2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016ad5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016ad8:	89 c1                	mov    ecx,eax
c0016ada:	89 d0                	mov    eax,edx
c0016adc:	31 f1                	xor    ecx,esi
c0016ade:	31 f8                	xor    eax,edi
c0016ae0:	09 c1                	or     ecx,eax
c0016ae2:	75 38                	jne    c0016b1c <VCache::write(unsigned long long, int, void*)+0x86>
c0016ae4:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016ae9:	75 31                	jne    c0016b1c <VCache::write(unsigned long long, int, void*)+0x86>
c0016aeb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016aee:	89 ef                	mov    edi,ebp
c0016af0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016af6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016afa:	0f af f9             	imul   edi,ecx
c0016afd:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016b00:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b02:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016b05:	40                   	inc    eax
c0016b06:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016b09:	83 c0 80             	add    eax,0xffffff80
c0016b0c:	75 5c                	jne    c0016b6a <VCache::write(unsigned long long, int, void*)+0xd4>
c0016b0e:	83 ec 0c             	sub    esp,0xc
c0016b11:	53                   	push   ebx
c0016b12:	e8 c7 fe ff ff       	call   c00169de <VCache::writeWriteBuffer()>
c0016b17:	83 c4 10             	add    esp,0x10
c0016b1a:	eb 4e                	jmp    c0016b6a <VCache::write(unsigned long long, int, void*)+0xd4>
c0016b1c:	83 ec 0c             	sub    esp,0xc
c0016b1f:	53                   	push   ebx
c0016b20:	e8 b9 fe ff ff       	call   c00169de <VCache::writeWriteBuffer()>
c0016b25:	83 c4 10             	add    esp,0x10
c0016b28:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b2b:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016b30:	7f 22                	jg     c0016b54 <VCache::write(unsigned long long, int, void*)+0xbe>
c0016b32:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016b35:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016b38:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016b3c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016b40:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016b43:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016b46:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016b4c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b50:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b52:	eb 16                	jmp    c0016b6a <VCache::write(unsigned long long, int, void*)+0xd4>
c0016b54:	83 ec 0c             	sub    esp,0xc
c0016b57:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b59:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016b5d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016b61:	57                   	push   edi
c0016b62:	56                   	push   esi
c0016b63:	50                   	push   eax
c0016b64:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016b67:	83 c4 20             	add    esp,0x20
c0016b6a:	83 ec 0c             	sub    esp,0xc
c0016b6d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b70:	e8 ef 77 00 00       	call   c001e364 <Semaphore::release()>
c0016b75:	83 c4 1c             	add    esp,0x1c
c0016b78:	31 c0                	xor    eax,eax
c0016b7a:	5b                   	pop    ebx
c0016b7b:	5e                   	pop    esi
c0016b7c:	5f                   	pop    edi
c0016b7d:	5d                   	pop    ebp
c0016b7e:	c3                   	ret    
c0016b7f:	90                   	nop

c0016b80 <VCache::read(unsigned long long, int, void*)>:
c0016b80:	55                   	push   ebp
c0016b81:	57                   	push   edi
c0016b82:	56                   	push   esi
c0016b83:	53                   	push   ebx
c0016b84:	83 ec 28             	sub    esp,0x28
c0016b87:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016b8b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016b8f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016b93:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016b97:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b9a:	e8 69 71 00 00       	call   c001dd08 <Semaphore::acquire()>
c0016b9f:	83 c4 10             	add    esp,0x10
c0016ba2:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016ba6:	74 0c                	je     c0016bb4 <VCache::read(unsigned long long, int, void*)+0x34>
c0016ba8:	83 ec 0c             	sub    esp,0xc
c0016bab:	53                   	push   ebx
c0016bac:	e8 2d fe ff ff       	call   c00169de <VCache::writeWriteBuffer()>
c0016bb1:	83 c4 10             	add    esp,0x10
c0016bb4:	83 fd 01             	cmp    ebp,0x1
c0016bb7:	0f 85 80 00 00 00    	jne    c0016c3d <VCache::read(unsigned long long, int, void*)+0xbd>
c0016bbd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016bc0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016bc4:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016bcb:	75 70                	jne    c0016c3d <VCache::read(unsigned long long, int, void*)+0xbd>
c0016bcd:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016bd0:	89 e9                	mov    ecx,ebp
c0016bd2:	f7 d9                	neg    ecx
c0016bd4:	89 c8                	mov    eax,ecx
c0016bd6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016bda:	c1 f8 1f             	sar    eax,0x1f
c0016bdd:	21 f1                	and    ecx,esi
c0016bdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016be3:	89 c8                	mov    eax,ecx
c0016be5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016be9:	21 f9                	and    ecx,edi
c0016beb:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016bef:	89 ca                	mov    edx,ecx
c0016bf1:	74 0a                	je     c0016bfd <VCache::read(unsigned long long, int, void*)+0x7d>
c0016bf3:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016bf6:	75 05                	jne    c0016bfd <VCache::read(unsigned long long, int, void*)+0x7d>
c0016bf8:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016bfb:	74 23                	je     c0016c20 <VCache::read(unsigned long long, int, void*)+0xa0>
c0016bfd:	83 ec 0c             	sub    esp,0xc
c0016c00:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016c04:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016c08:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016c0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016c0e:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016c10:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016c13:	55                   	push   ebp
c0016c14:	52                   	push   edx
c0016c15:	50                   	push   eax
c0016c16:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c1a:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016c1d:	83 c4 20             	add    esp,0x20
c0016c20:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c23:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016c27:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016c2d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016c30:	48                   	dec    eax
c0016c31:	21 c6                	and    esi,eax
c0016c33:	0f af f1             	imul   esi,ecx
c0016c36:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016c39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c3b:	eb 1d                	jmp    c0016c5a <VCache::read(unsigned long long, int, void*)+0xda>
c0016c3d:	83 ec 0c             	sub    esp,0xc
c0016c40:	53                   	push   ebx
c0016c41:	e8 88 fd ff ff       	call   c00169ce <VCache::invalidateReadBuffer()>
c0016c46:	5a                   	pop    edx
c0016c47:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c4a:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c4c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016c50:	55                   	push   ebp
c0016c51:	57                   	push   edi
c0016c52:	56                   	push   esi
c0016c53:	50                   	push   eax
c0016c54:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016c57:	83 c4 20             	add    esp,0x20
c0016c5a:	83 ec 0c             	sub    esp,0xc
c0016c5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016c60:	e8 ff 76 00 00       	call   c001e364 <Semaphore::release()>
c0016c65:	83 c4 2c             	add    esp,0x2c
c0016c68:	31 c0                	xor    eax,eax
c0016c6a:	5b                   	pop    ebx
c0016c6b:	5e                   	pop    esi
c0016c6c:	5f                   	pop    edi
c0016c6d:	5d                   	pop    ebp
c0016c6e:	c3                   	ret    
c0016c6f:	90                   	nop

c0016c70 <Video::putrect(int, int, int, int, unsigned int)>:
c0016c70:	55                   	push   ebp
c0016c71:	57                   	push   edi
c0016c72:	56                   	push   esi
c0016c73:	53                   	push   ebx
c0016c74:	83 ec 1c             	sub    esp,0x1c
c0016c77:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016c7b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016c7f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016c83:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016c87:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c8f:	01 df                	add    edi,ebx
c0016c91:	39 fb                	cmp    ebx,edi
c0016c93:	7d 1f                	jge    c0016cb4 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016c95:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016c99:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016c9d:	7d 12                	jge    c0016cb1 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016c9f:	8b 16                	mov    edx,DWORD PTR [esi]
c0016ca1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016ca5:	53                   	push   ebx
c0016ca6:	55                   	push   ebp
c0016ca7:	45                   	inc    ebp
c0016ca8:	56                   	push   esi
c0016ca9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016cac:	83 c4 10             	add    esp,0x10
c0016caf:	eb e8                	jmp    c0016c99 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016cb1:	43                   	inc    ebx
c0016cb2:	eb dd                	jmp    c0016c91 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016cb4:	83 c4 1c             	add    esp,0x1c
c0016cb7:	5b                   	pop    ebx
c0016cb8:	5e                   	pop    esi
c0016cb9:	5f                   	pop    edi
c0016cba:	5d                   	pop    ebp
c0016cbb:	c3                   	ret    

c0016cbc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016cbc:	55                   	push   ebp
c0016cbd:	57                   	push   edi
c0016cbe:	31 ff                	xor    edi,edi
c0016cc0:	56                   	push   esi
c0016cc1:	53                   	push   ebx
c0016cc2:	83 ec 1c             	sub    esp,0x1c
c0016cc5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016cc9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016ccd:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016cd4:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016cd9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016cdd:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016ce1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ce5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016ce8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016cec:	01 f9                	add    ecx,edi
c0016cee:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016cf2:	7d 2f                	jge    c0016d23 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016cf4:	31 f6                	xor    esi,esi
c0016cf6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016cfa:	01 f2                	add    edx,esi
c0016cfc:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016d00:	7d 1a                	jge    c0016d1c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016d02:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016d05:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016d08:	46                   	inc    esi
c0016d09:	51                   	push   ecx
c0016d0a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016d0e:	52                   	push   edx
c0016d0f:	55                   	push   ebp
c0016d10:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d13:	83 c4 10             	add    esp,0x10
c0016d16:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016d1a:	eb da                	jmp    c0016cf6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016d1c:	47                   	inc    edi
c0016d1d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016d21:	eb c5                	jmp    c0016ce8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016d23:	83 c4 1c             	add    esp,0x1c
c0016d26:	5b                   	pop    ebx
c0016d27:	5e                   	pop    esi
c0016d28:	5f                   	pop    edi
c0016d29:	5d                   	pop    ebp
c0016d2a:	c3                   	ret    
c0016d2b:	90                   	nop

c0016d2c <Video::blit(unsigned int*, int, int, int, int)>:
c0016d2c:	55                   	push   ebp
c0016d2d:	57                   	push   edi
c0016d2e:	56                   	push   esi
c0016d2f:	53                   	push   ebx
c0016d30:	83 ec 1c             	sub    esp,0x1c
c0016d33:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d37:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d3b:	85 c0                	test   eax,eax
c0016d3d:	79 02                	jns    c0016d41 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016d3f:	31 c0                	xor    eax,eax
c0016d41:	c1 e0 02             	shl    eax,0x2
c0016d44:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016d48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d4c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016d50:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016d54:	39 d8                	cmp    eax,ebx
c0016d56:	7e 49                	jle    c0016da1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016d58:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016d5e:	7c 41                	jl     c0016da1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016d60:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016d64:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016d68:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016d6c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016d70:	39 f9                	cmp    ecx,edi
c0016d72:	7e 22                	jle    c0016d96 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016d74:	83 c5 04             	add    ebp,0x4
c0016d77:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016d7d:	7c 14                	jl     c0016d93 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016d7f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016d81:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016d84:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d88:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d8c:	56                   	push   esi
c0016d8d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016d90:	83 c4 10             	add    esp,0x10
c0016d93:	47                   	inc    edi
c0016d94:	eb d2                	jmp    c0016d68 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016d96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d9a:	43                   	inc    ebx
c0016d9b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016d9f:	eb ab                	jmp    c0016d4c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016da1:	83 c4 1c             	add    esp,0x1c
c0016da4:	5b                   	pop    ebx
c0016da5:	5e                   	pop    esi
c0016da6:	5f                   	pop    edi
c0016da7:	5d                   	pop    ebp
c0016da8:	c3                   	ret    
c0016da9:	90                   	nop

c0016daa <Video::clearScreen(unsigned int)>:
c0016daa:	57                   	push   edi
c0016dab:	56                   	push   esi
c0016dac:	53                   	push   ebx
c0016dad:	31 db                	xor    ebx,ebx
c0016daf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016db3:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016db9:	7e 1f                	jle    c0016dda <Video::clearScreen(unsigned int)+0x30>
c0016dbb:	31 ff                	xor    edi,edi
c0016dbd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016dc3:	7e 12                	jle    c0016dd7 <Video::clearScreen(unsigned int)+0x2d>
c0016dc5:	8b 06                	mov    eax,DWORD PTR [esi]
c0016dc7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016dcb:	53                   	push   ebx
c0016dcc:	57                   	push   edi
c0016dcd:	47                   	inc    edi
c0016dce:	56                   	push   esi
c0016dcf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016dd2:	83 c4 10             	add    esp,0x10
c0016dd5:	eb e6                	jmp    c0016dbd <Video::clearScreen(unsigned int)+0x13>
c0016dd7:	43                   	inc    ebx
c0016dd8:	eb d9                	jmp    c0016db3 <Video::clearScreen(unsigned int)+0x9>
c0016dda:	5b                   	pop    ebx
c0016ddb:	5e                   	pop    esi
c0016ddc:	5f                   	pop    edi
c0016ddd:	c3                   	ret    

c0016dde <Video::putpixel(int, int, unsigned int)>:
c0016dde:	c7 44 24 04 d4 b0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b0d4
c0016de6:	e9 84 30 00 00       	jmp    c0019e6f <Krnl::panic(char const*)>
c0016deb:	90                   	nop

c0016dec <Video::Video(char const*)>:
c0016dec:	83 ec 0c             	sub    esp,0xc
c0016def:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016df3:	83 ec 08             	sub    esp,0x8
c0016df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dfa:	50                   	push   eax
c0016dfb:	e8 40 cf ff ff       	call   c0013d40 <Device::Device(char const*)>
c0016e00:	83 c4 10             	add    esp,0x10
c0016e03:	ba 44 b1 02 c0       	mov    edx,0xc002b144
c0016e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e0c:	89 10                	mov    DWORD PTR [eax],edx
c0016e0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e12:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016e1c:	90                   	nop
c0016e1d:	83 c4 0c             	add    esp,0xc
c0016e20:	c3                   	ret    
c0016e21:	90                   	nop

c0016e22 <Video::~Video()>:
c0016e22:	83 ec 0c             	sub    esp,0xc
c0016e25:	ba 44 b1 02 c0       	mov    edx,0xc002b144
c0016e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e2e:	89 10                	mov    DWORD PTR [eax],edx
c0016e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e34:	83 ec 0c             	sub    esp,0xc
c0016e37:	50                   	push   eax
c0016e38:	e8 cd cb ff ff       	call   c0013a0a <Device::~Device()>
c0016e3d:	83 c4 10             	add    esp,0x10
c0016e40:	90                   	nop
c0016e41:	83 c4 0c             	add    esp,0xc
c0016e44:	c3                   	ret    
c0016e45:	90                   	nop

c0016e46 <Video::~Video()>:
c0016e46:	83 ec 0c             	sub    esp,0xc
c0016e49:	83 ec 0c             	sub    esp,0xc
c0016e4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e50:	e8 cd ff ff ff       	call   c0016e22 <Video::~Video()>
c0016e55:	83 c4 10             	add    esp,0x10
c0016e58:	83 ec 08             	sub    esp,0x8
c0016e5b:	68 64 01 00 00       	push   0x164
c0016e60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e64:	e8 c2 b7 ff ff       	call   c001262b <operator delete(void*, unsigned long)>
c0016e69:	83 c4 10             	add    esp,0x10
c0016e6c:	83 c4 0c             	add    esp,0xc
c0016e6f:	c3                   	ret    

c0016e70 <Video::isMonochrome()>:
c0016e70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e74:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016e7a:	c3                   	ret    
c0016e7b:	90                   	nop

c0016e7c <Video::getWidth()>:
c0016e7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e80:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016e86:	c3                   	ret    
c0016e87:	90                   	nop

c0016e88 <Video::getHeight()>:
c0016e88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e8c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016e92:	c3                   	ret    
c0016e93:	90                   	nop

c0016e94 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016e94:	55                   	push   ebp
c0016e95:	57                   	push   edi
c0016e96:	56                   	push   esi
c0016e97:	53                   	push   ebx
c0016e98:	83 ec 2c             	sub    esp,0x2c
c0016e9b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e9f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016ea3:	83 f8 01             	cmp    eax,0x1
c0016ea6:	19 c9                	sbb    ecx,ecx
c0016ea8:	31 db                	xor    ebx,ebx
c0016eaa:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016eae:	89 cd                	mov    ebp,ecx
c0016eb0:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016eb8:	f7 d5                	not    ebp
c0016eba:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016ec0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016ec4:	01 d8                	add    eax,ebx
c0016ec6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016eca:	56                   	push   esi
c0016ecb:	e8 b8 ff ff ff       	call   c0016e88 <Video::getHeight()>
c0016ed0:	59                   	pop    ecx
c0016ed1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016ed5:	7e 70                	jle    c0016f47 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016ed7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016edb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016edf:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016ee2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ee6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016eea:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016ef1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ef5:	89 f8                	mov    eax,edi
c0016ef7:	83 c0 20             	add    eax,0x20
c0016efa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016efe:	56                   	push   esi
c0016eff:	e8 78 ff ff ff       	call   c0016e7c <Video::getWidth()>
c0016f04:	5a                   	pop    edx
c0016f05:	39 c7                	cmp    edi,eax
c0016f07:	7d 34                	jge    c0016f3d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016f09:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016f0e:	74 05                	je     c0016f15 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016f10:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f12:	55                   	push   ebp
c0016f13:	eb 0d                	jmp    c0016f22 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016f15:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016f1a:	74 12                	je     c0016f2e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016f1c:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f1e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f22:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016f26:	57                   	push   edi
c0016f27:	56                   	push   esi
c0016f28:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f2b:	83 c4 10             	add    esp,0x10
c0016f2e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016f32:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016f36:	47                   	inc    edi
c0016f37:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016f3b:	75 c1                	jne    c0016efe <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016f3d:	43                   	inc    ebx
c0016f3e:	83 fb 20             	cmp    ebx,0x20
c0016f41:	0f 85 79 ff ff ff    	jne    c0016ec0 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016f47:	83 c4 2c             	add    esp,0x2c
c0016f4a:	5b                   	pop    ebx
c0016f4b:	5e                   	pop    esi
c0016f4c:	5f                   	pop    edi
c0016f4d:	5d                   	pop    ebp
c0016f4e:	c3                   	ret    
c0016f4f:	90                   	nop

c0016f50 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016f50:	55                   	push   ebp
c0016f51:	57                   	push   edi
c0016f52:	56                   	push   esi
c0016f53:	53                   	push   ebx
c0016f54:	83 ec 28             	sub    esp,0x28
c0016f57:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016f5b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016f5f:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0016f63:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016f67:	c1 e6 08             	shl    esi,0x8
c0016f6a:	01 c6                	add    esi,eax
c0016f6c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016f70:	c1 e0 08             	shl    eax,0x8
c0016f73:	01 d0                	add    eax,edx
c0016f75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f7d:	0f af c6             	imul   eax,esi
c0016f80:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016f87:	50                   	push   eax
c0016f88:	e8 0c 86 ff ff       	call   c000f599 <malloc>
c0016f8d:	83 c4 10             	add    esp,0x10
c0016f90:	89 c7                	mov    edi,eax
c0016f92:	85 c0                	test   eax,eax
c0016f94:	75 10                	jne    c0016fa6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0016f96:	83 ec 0c             	sub    esp,0xc
c0016f99:	68 f5 b0 02 c0       	push   0xc002b0f5
c0016f9e:	e8 cc 2e 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c0016fa3:	83 c4 10             	add    esp,0x10
c0016fa6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0016fa9:	ba 12 00 00 00       	mov    edx,0x12
c0016fae:	84 c0                	test   al,al
c0016fb0:	74 11                	je     c0016fc3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0016fb2:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0016fb6:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0016fba:	c1 fa 03             	sar    edx,0x3
c0016fbd:	0f af d1             	imul   edx,ecx
c0016fc0:	83 c2 12             	add    edx,0x12
c0016fc3:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016fc7:	74 04                	je     c0016fcd <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0016fc9:	85 f6                	test   esi,esi
c0016fcb:	75 12                	jne    c0016fdf <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0016fcd:	83 ec 0c             	sub    esp,0xc
c0016fd0:	68 05 b1 02 c0       	push   0xc002b105
c0016fd5:	e8 29 b7 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0016fda:	e9 b8 00 00 00       	jmp    c0017097 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0016fdf:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0016fe3:	80 f9 02             	cmp    cl,0x2
c0016fe6:	0f 85 96 00 00 00    	jne    c0017082 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0016fec:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016ff1:	75 0e                	jne    c0017001 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016ff3:	84 c0                	test   al,al
c0016ff5:	75 0a                	jne    c0017001 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016ff7:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016ffa:	83 e8 18             	sub    eax,0x18
c0016ffd:	a8 f7                	test   al,0xf7
c0016fff:	74 0a                	je     c001700b <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0017001:	83 ec 0c             	sub    esp,0xc
c0017004:	68 1a b1 02 c0       	push   0xc002b11a
c0017009:	eb 7f                	jmp    c001708a <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c001700b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017013:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001701b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c001701f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017027:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001702b:	75 0c                	jne    c0017039 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001702d:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0017032:	c1 e0 18             	shl    eax,0x18
c0017035:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017039:	45                   	inc    ebp
c001703a:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c001703f:	c1 e1 10             	shl    ecx,0x10
c0017042:	89 c8                	mov    eax,ecx
c0017044:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0017049:	c1 e1 08             	shl    ecx,0x8
c001704c:	09 c1                	or     ecx,eax
c001704e:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0017052:	09 c1                	or     ecx,eax
c0017054:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0017058:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c001705c:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017060:	c1 f8 03             	sar    eax,0x3
c0017063:	01 c2                	add    edx,eax
c0017065:	89 e8                	mov    eax,ebp
c0017067:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001706b:	39 c6                	cmp    esi,eax
c001706d:	7f b0                	jg     c001701f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c001706f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017073:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017077:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c001707a:	7e 22                	jle    c001709e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001707c:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0017080:	eb 99                	jmp    c001701b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017082:	50                   	push   eax
c0017083:	50                   	push   eax
c0017084:	51                   	push   ecx
c0017085:	68 28 b1 02 c0       	push   0xc002b128
c001708a:	e8 74 b6 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001708f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017092:	e8 12 85 ff ff       	call   c000f5a9 <free>
c0017097:	83 c4 10             	add    esp,0x10
c001709a:	31 ff                	xor    edi,edi
c001709c:	eb 0f                	jmp    c00170ad <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c001709e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00170a2:	89 30                	mov    DWORD PTR [eax],esi
c00170a4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00170a8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00170ab:	89 30                	mov    DWORD PTR [eax],esi
c00170ad:	83 c4 1c             	add    esp,0x1c
c00170b0:	89 f8                	mov    eax,edi
c00170b2:	5b                   	pop    ebx
c00170b3:	5e                   	pop    esi
c00170b4:	5f                   	pop    edi
c00170b5:	5d                   	pop    ebp
c00170b6:	c3                   	ret    
c00170b7:	90                   	nop

c00170b8 <Video::putTGA(int, int, unsigned char*, int)>:
c00170b8:	55                   	push   ebp
c00170b9:	57                   	push   edi
c00170ba:	56                   	push   esi
c00170bb:	53                   	push   ebx
c00170bc:	83 ec 28             	sub    esp,0x28
c00170bf:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00170c3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00170c7:	50                   	push   eax
c00170c8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00170cc:	50                   	push   eax
c00170cd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00170d1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00170d5:	56                   	push   esi
c00170d6:	e8 75 fe ff ff       	call   c0016f50 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00170db:	83 c4 20             	add    esp,0x20
c00170de:	85 c0                	test   eax,eax
c00170e0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00170e4:	74 35                	je     c001711b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00170e6:	89 c7                	mov    edi,eax
c00170e8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00170ec:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00170f0:	39 d8                	cmp    eax,ebx
c00170f2:	7e 27                	jle    c001711b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00170f4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00170f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170fc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017100:	39 e8                	cmp    eax,ebp
c0017102:	7e 14                	jle    c0017118 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017104:	8b 06                	mov    eax,DWORD PTR [esi]
c0017106:	83 c7 04             	add    edi,0x4
c0017109:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001710c:	53                   	push   ebx
c001710d:	55                   	push   ebp
c001710e:	45                   	inc    ebp
c001710f:	56                   	push   esi
c0017110:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017113:	83 c4 10             	add    esp,0x10
c0017116:	eb e0                	jmp    c00170f8 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017118:	43                   	inc    ebx
c0017119:	eb cd                	jmp    c00170e8 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001711b:	83 c4 1c             	add    esp,0x1c
c001711e:	5b                   	pop    ebx
c001711f:	5e                   	pop    esi
c0017120:	5f                   	pop    edi
c0017121:	5d                   	pop    ebp
c0017122:	c3                   	ret    
c0017123:	90                   	nop

c0017124 <ACPI::close(int, int, void*)>:
c0017124:	83 ec 1c             	sub    esp,0x1c
c0017127:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001712f:	74 0a                	je     c001713b <ACPI::close(int, int, void*)+0x17>
c0017131:	b8 00 00 00 00       	mov    eax,0x0
c0017136:	e9 8a 00 00 00       	jmp    c00171c5 <ACPI::close(int, int, void*)+0xa1>
c001713b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017140:	75 27                	jne    c0017169 <ACPI::close(int, int, void*)+0x45>
c0017142:	a1 88 00 03 c0       	mov    eax,ds:0xc0030088
c0017147:	85 c0                	test   eax,eax
c0017149:	74 07                	je     c0017152 <ACPI::close(int, int, void*)+0x2e>
c001714b:	a1 88 00 03 c0       	mov    eax,ds:0xc0030088
c0017150:	ff d0                	call   eax
c0017152:	83 ec 0c             	sub    esp,0xc
c0017155:	68 84 b1 02 c0       	push   0xc002b184
c001715a:	e8 10 2d 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c001715f:	83 c4 10             	add    esp,0x10
c0017162:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017167:	eb 5c                	jmp    c00171c5 <ACPI::close(int, int, void*)+0xa1>
c0017169:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001716e:	75 50                	jne    c00171c0 <ACPI::close(int, int, void*)+0x9c>
c0017170:	a1 84 00 03 c0       	mov    eax,ds:0xc0030084
c0017175:	85 c0                	test   eax,eax
c0017177:	74 07                	je     c0017180 <ACPI::close(int, int, void*)+0x5c>
c0017179:	a1 84 00 03 c0       	mov    eax,ds:0xc0030084
c001717e:	ff d0                	call   eax
c0017180:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017185:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001718a:	83 e0 02             	and    eax,0x2
c001718d:	74 1c                	je     c00171ab <ACPI::close(int, int, void*)+0x87>
c001718f:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017196:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001719a:	89 c2                	mov    edx,eax
c001719c:	ec                   	in     al,dx
c001719d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00171a1:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00171a5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00171a9:	eb da                	jmp    c0017185 <ACPI::close(int, int, void*)+0x61>
c00171ab:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00171b2:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00171b7:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00171bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00171bf:	ee                   	out    dx,al
c00171c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00171c5:	83 c4 1c             	add    esp,0x1c
c00171c8:	c3                   	ret    

c00171c9 <findRSDP()>:
c00171c9:	83 ec 1c             	sub    esp,0x1c
c00171cc:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c00171d1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00171d7:	83 e0 04             	and    eax,0x4
c00171da:	84 c0                	test   al,al
c00171dc:	75 07                	jne    c00171e5 <findRSDP()+0x1c>
c00171de:	b8 00 00 00 00       	mov    eax,0x0
c00171e3:	eb 6a                	jmp    c001724f <findRSDP()+0x86>
c00171e5:	a1 34 da 02 c0       	mov    eax,ds:0xc002da34
c00171ea:	3d ff 07 00 00       	cmp    eax,0x7ff
c00171ef:	7f 1b                	jg     c001720c <findRSDP()+0x43>
c00171f1:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c00171f6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00171fc:	83 e2 fb             	and    edx,0xfffffffb
c00171ff:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017205:	b8 00 00 00 00       	mov    eax,0x0
c001720a:	eb 43                	jmp    c001724f <findRSDP()+0x86>
c001720c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017214:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001721c:	77 2c                	ja     c001724a <findRSDP()+0x81>
c001721e:	83 ec 04             	sub    esp,0x4
c0017221:	6a 08                	push   0x8
c0017223:	68 1f b2 02 c0       	push   0xc002b21f
c0017228:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001722c:	e8 1b 94 fe ff       	call   c000064c <memcmp>
c0017231:	83 c4 10             	add    esp,0x10
c0017234:	85 c0                	test   eax,eax
c0017236:	0f 94 c0             	sete   al
c0017239:	84 c0                	test   al,al
c001723b:	74 06                	je     c0017243 <findRSDP()+0x7a>
c001723d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017241:	eb 0c                	jmp    c001724f <findRSDP()+0x86>
c0017243:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017248:	eb ca                	jmp    c0017214 <findRSDP()+0x4b>
c001724a:	b8 00 00 00 00       	mov    eax,0x0
c001724f:	83 c4 1c             	add    esp,0x1c
c0017252:	c3                   	ret    

c0017253 <loadACPITables(unsigned char*)>:
c0017253:	57                   	push   edi
c0017254:	56                   	push   esi
c0017255:	53                   	push   ebx
c0017256:	83 ec 60             	sub    esp,0x60
c0017259:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c001725e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017264:	83 e0 04             	and    eax,0x4
c0017267:	84 c0                	test   al,al
c0017269:	0f 84 33 02 00 00    	je     c00174a2 <loadACPITables(unsigned char*)+0x24f>
c001726f:	a0 a0 02 03 c0       	mov    al,ds:0xc00302a0
c0017274:	84 c0                	test   al,al
c0017276:	74 75                	je     c00172ed <loadACPITables(unsigned char*)+0x9a>
c0017278:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001727c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017280:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017284:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017287:	83 e8 24             	sub    eax,0x24
c001728a:	c1 e8 03             	shr    eax,0x3
c001728d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017291:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017299:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001729d:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c00172a1:	0f 8d b2 00 00 00    	jge    c0017359 <loadACPITables(unsigned char*)+0x106>
c00172a7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00172ab:	83 c0 24             	add    eax,0x24
c00172ae:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00172b2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00172b6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00172ba:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00172be:	c1 e0 03             	shl    eax,0x3
c00172c1:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00172c5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00172c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00172cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00172ce:	89 c1                	mov    ecx,eax
c00172d0:	a1 8c 00 03 c0       	mov    eax,ds:0xc003008c
c00172d5:	8d 50 01             	lea    edx,[eax+0x1]
c00172d8:	89 15 8c 00 03 c0    	mov    DWORD PTR ds:0xc003008c,edx
c00172de:	89 ca                	mov    edx,ecx
c00172e0:	89 14 c5 a4 00 03 c0 	mov    DWORD PTR [eax*8-0x3ffcff5c],edx
c00172e7:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00172eb:	eb ac                	jmp    c0017299 <loadACPITables(unsigned char*)+0x46>
c00172ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00172f1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00172f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00172fc:	83 e8 24             	sub    eax,0x24
c00172ff:	c1 e8 02             	shr    eax,0x2
c0017302:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017306:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001730e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017312:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017316:	7d 41                	jge    c0017359 <loadACPITables(unsigned char*)+0x106>
c0017318:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001731c:	83 c0 24             	add    eax,0x24
c001731f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017323:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017327:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001732b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001732f:	c1 e0 02             	shl    eax,0x2
c0017332:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017336:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001733a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001733c:	a1 8c 00 03 c0       	mov    eax,ds:0xc003008c
c0017341:	8d 50 01             	lea    edx,[eax+0x1]
c0017344:	89 15 8c 00 03 c0    	mov    DWORD PTR ds:0xc003008c,edx
c001734a:	89 ca                	mov    edx,ecx
c001734c:	89 14 c5 a4 00 03 c0 	mov    DWORD PTR [eax*8-0x3ffcff5c],edx
c0017353:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017357:	eb b5                	jmp    c001730e <loadACPITables(unsigned char*)+0xbb>
c0017359:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017361:	a1 8c 00 03 c0       	mov    eax,ds:0xc003008c
c0017366:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001736a:	0f 8d 33 01 00 00    	jge    c00174a3 <loadACPITables(unsigned char*)+0x250>
c0017370:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017374:	8b 04 c5 a4 00 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcff5c]
c001737b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001737f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017383:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017387:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001738b:	25 ff 0f 00 00       	and    eax,0xfff
c0017390:	89 c6                	mov    esi,eax
c0017392:	8b 1d 50 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db50
c0017398:	83 ec 0c             	sub    esp,0xc
c001739b:	6a 01                	push   0x1
c001739d:	e8 b5 9e ff ff       	call   c0011257 <Virt::allocateKernelVirtualPages(int)>
c00173a2:	83 c4 10             	add    esp,0x10
c00173a5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00173a9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00173af:	83 ec 0c             	sub    esp,0xc
c00173b2:	6a 01                	push   0x1
c00173b4:	6a 01                	push   0x1
c00173b6:	50                   	push   eax
c00173b7:	52                   	push   edx
c00173b8:	53                   	push   ebx
c00173b9:	e8 4c a9 ff ff       	call   c0011d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00173be:	83 c4 20             	add    esp,0x20
c00173c1:	09 f0                	or     eax,esi
c00173c3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00173c7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00173cb:	c1 e0 03             	shl    eax,0x3
c00173ce:	05 a0 00 03 c0       	add    eax,0xc00300a0
c00173d3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00173d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00173df:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00173e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00173ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00173f7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00173fb:	89 c6                	mov    esi,eax
c00173fd:	89 d7                	mov    edi,edx
c00173ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017401:	89 c8                	mov    eax,ecx
c0017403:	89 fa                	mov    edx,edi
c0017405:	89 f3                	mov    ebx,esi
c0017407:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001740b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001740f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017413:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017417:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001741a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001741e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017422:	05 00 10 00 00       	add    eax,0x1000
c0017427:	c1 e8 0c             	shr    eax,0xc
c001742a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001742e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017432:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017436:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001743a:	25 ff 0f 00 00       	and    eax,0xfff
c001743f:	89 c6                	mov    esi,eax
c0017441:	8b 1d 50 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db50
c0017447:	83 ec 0c             	sub    esp,0xc
c001744a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001744e:	e8 04 9e ff ff       	call   c0011257 <Virt::allocateKernelVirtualPages(int)>
c0017453:	83 c4 10             	add    esp,0x10
c0017456:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001745a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017460:	83 ec 0c             	sub    esp,0xc
c0017463:	6a 01                	push   0x1
c0017465:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017469:	50                   	push   eax
c001746a:	52                   	push   edx
c001746b:	53                   	push   ebx
c001746c:	e8 99 a8 ff ff       	call   c0011d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017471:	83 c4 20             	add    esp,0x20
c0017474:	09 f0                	or     eax,esi
c0017476:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001747a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001747e:	83 ec 0c             	sub    esp,0xc
c0017481:	50                   	push   eax
c0017482:	e8 16 a2 ff ff       	call   c001169d <Virt::freeKernelVirtualPages(unsigned long)>
c0017487:	83 c4 10             	add    esp,0x10
c001748a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001748e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017492:	89 14 c5 a4 00 03 c0 	mov    DWORD PTR [eax*8-0x3ffcff5c],edx
c0017499:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c001749d:	e9 bf fe ff ff       	jmp    c0017361 <loadACPITables(unsigned char*)+0x10e>
c00174a2:	90                   	nop
c00174a3:	83 c4 60             	add    esp,0x60
c00174a6:	5b                   	pop    ebx
c00174a7:	5e                   	pop    esi
c00174a8:	5f                   	pop    edi
c00174a9:	c3                   	ret    

c00174aa <findRSDT(unsigned char*)>:
c00174aa:	57                   	push   edi
c00174ab:	56                   	push   esi
c00174ac:	53                   	push   ebx
c00174ad:	83 ec 50             	sub    esp,0x50
c00174b0:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c00174b5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00174bb:	83 e0 04             	and    eax,0x4
c00174be:	84 c0                	test   al,al
c00174c0:	75 0a                	jne    c00174cc <findRSDT(unsigned char*)+0x22>
c00174c2:	b8 00 00 00 00       	mov    eax,0x0
c00174c7:	e9 21 01 00 00       	jmp    c00175ed <findRSDT(unsigned char*)+0x143>
c00174cc:	89 e0                	mov    eax,esp
c00174ce:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00174d2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00174d6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00174da:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00174e2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174e6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00174ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00174ee:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00174f2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00174f6:	89 c6                	mov    esi,eax
c00174f8:	89 d7                	mov    edi,edx
c00174fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00174fc:	89 c8                	mov    eax,ecx
c00174fe:	89 fa                	mov    edx,edi
c0017500:	89 f3                	mov    ebx,esi
c0017502:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017506:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001750a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001750e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017512:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017516:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001751e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017522:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017526:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001752a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001752e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017532:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017536:	25 ff 0f 00 00       	and    eax,0xfff
c001753b:	89 c6                	mov    esi,eax
c001753d:	8b 1d 50 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db50
c0017543:	83 ec 0c             	sub    esp,0xc
c0017546:	6a 02                	push   0x2
c0017548:	e8 0a 9d ff ff       	call   c0011257 <Virt::allocateKernelVirtualPages(int)>
c001754d:	83 c4 10             	add    esp,0x10
c0017550:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017554:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001755a:	83 ec 0c             	sub    esp,0xc
c001755d:	6a 01                	push   0x1
c001755f:	6a 02                	push   0x2
c0017561:	50                   	push   eax
c0017562:	52                   	push   edx
c0017563:	53                   	push   ebx
c0017564:	e8 a1 a7 ff ff       	call   c0011d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017569:	83 c4 20             	add    esp,0x20
c001756c:	09 f0                	or     eax,esi
c001756e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017572:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017576:	25 ff 0f 00 00       	and    eax,0xfff
c001757b:	89 c6                	mov    esi,eax
c001757d:	8b 1d 50 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db50
c0017583:	83 ec 0c             	sub    esp,0xc
c0017586:	6a 02                	push   0x2
c0017588:	e8 ca 9c ff ff       	call   c0011257 <Virt::allocateKernelVirtualPages(int)>
c001758d:	83 c4 10             	add    esp,0x10
c0017590:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017594:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001759a:	83 ec 0c             	sub    esp,0xc
c001759d:	6a 01                	push   0x1
c001759f:	6a 02                	push   0x2
c00175a1:	50                   	push   eax
c00175a2:	52                   	push   edx
c00175a3:	53                   	push   ebx
c00175a4:	e8 61 a7 ff ff       	call   c0011d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00175a9:	83 c4 20             	add    esp,0x20
c00175ac:	09 f0                	or     eax,esi
c00175ae:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00175b2:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00175b7:	75 11                	jne    c00175ca <findRSDT(unsigned char*)+0x120>
c00175b9:	c6 05 a0 02 03 c0 00 	mov    BYTE PTR ds:0xc00302a0,0x0
c00175c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00175c4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00175c8:	eb 1f                	jmp    c00175e9 <findRSDT(unsigned char*)+0x13f>
c00175ca:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00175cf:	75 11                	jne    c00175e2 <findRSDT(unsigned char*)+0x138>
c00175d1:	c6 05 a0 02 03 c0 01 	mov    BYTE PTR ds:0xc00302a0,0x1
c00175d8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00175dc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00175e0:	eb 07                	jmp    c00175e9 <findRSDT(unsigned char*)+0x13f>
c00175e2:	b8 00 00 00 00       	mov    eax,0x0
c00175e7:	eb 04                	jmp    c00175ed <findRSDT(unsigned char*)+0x143>
c00175e9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175ed:	83 c4 50             	add    esp,0x50
c00175f0:	5b                   	pop    ebx
c00175f1:	5e                   	pop    esi
c00175f2:	5f                   	pop    edi
c00175f3:	c3                   	ret    

c00175f4 <findDataTable(unsigned char*, char*)>:
c00175f4:	83 ec 1c             	sub    esp,0x1c
c00175f7:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c00175fc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017602:	83 e0 04             	and    eax,0x4
c0017605:	84 c0                	test   al,al
c0017607:	75 07                	jne    c0017610 <findDataTable(unsigned char*, char*)+0x1c>
c0017609:	b8 00 00 00 00       	mov    eax,0x0
c001760e:	eb 52                	jmp    c0017662 <findDataTable(unsigned char*, char*)+0x6e>
c0017610:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017618:	a1 8c 00 03 c0       	mov    eax,ds:0xc003008c
c001761d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017621:	7d 3a                	jge    c001765d <findDataTable(unsigned char*, char*)+0x69>
c0017623:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017627:	c1 e0 03             	shl    eax,0x3
c001762a:	05 a0 00 03 c0       	add    eax,0xc00300a0
c001762f:	83 ec 04             	sub    esp,0x4
c0017632:	6a 04                	push   0x4
c0017634:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017638:	50                   	push   eax
c0017639:	e8 0e 90 fe ff       	call   c000064c <memcmp>
c001763e:	83 c4 10             	add    esp,0x10
c0017641:	85 c0                	test   eax,eax
c0017643:	0f 94 c0             	sete   al
c0017646:	84 c0                	test   al,al
c0017648:	74 0d                	je     c0017657 <findDataTable(unsigned char*, char*)+0x63>
c001764a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001764e:	8b 04 c5 a4 00 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcff5c]
c0017655:	eb 0b                	jmp    c0017662 <findDataTable(unsigned char*, char*)+0x6e>
c0017657:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001765b:	eb bb                	jmp    c0017618 <findDataTable(unsigned char*, char*)+0x24>
c001765d:	b8 00 00 00 00       	mov    eax,0x0
c0017662:	83 c4 1c             	add    esp,0x1c
c0017665:	c3                   	ret    

c0017666 <scanMADT()>:
c0017666:	53                   	push   ebx
c0017667:	83 ec 38             	sub    esp,0x38
c001766a:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c001766f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017675:	83 e0 04             	and    eax,0x4
c0017678:	84 c0                	test   al,al
c001767a:	0f 84 4a 04 00 00    	je     c0017aca <scanMADT()+0x464>
c0017680:	e8 44 fb ff ff       	call   c00171c9 <findRSDP()>
c0017685:	a3 ac 02 03 c0       	mov    ds:0xc00302ac,eax
c001768a:	a1 ac 02 03 c0       	mov    eax,ds:0xc00302ac
c001768f:	85 c0                	test   eax,eax
c0017691:	75 19                	jne    c00176ac <scanMADT()+0x46>
c0017693:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0017698:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001769e:	83 e2 fb             	and    edx,0xfffffffb
c00176a1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00176a7:	e9 22 04 00 00       	jmp    c0017ace <scanMADT()+0x468>
c00176ac:	a1 ac 02 03 c0       	mov    eax,ds:0xc00302ac
c00176b1:	83 ec 0c             	sub    esp,0xc
c00176b4:	50                   	push   eax
c00176b5:	e8 f0 fd ff ff       	call   c00174aa <findRSDT(unsigned char*)>
c00176ba:	83 c4 10             	add    esp,0x10
c00176bd:	a3 a8 02 03 c0       	mov    ds:0xc00302a8,eax
c00176c2:	a1 a8 02 03 c0       	mov    eax,ds:0xc00302a8
c00176c7:	85 c0                	test   eax,eax
c00176c9:	75 19                	jne    c00176e4 <scanMADT()+0x7e>
c00176cb:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c00176d0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00176d6:	83 e2 fb             	and    edx,0xfffffffb
c00176d9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00176df:	e9 ea 03 00 00       	jmp    c0017ace <scanMADT()+0x468>
c00176e4:	a1 a8 02 03 c0       	mov    eax,ds:0xc00302a8
c00176e9:	83 ec 0c             	sub    esp,0xc
c00176ec:	50                   	push   eax
c00176ed:	e8 61 fb ff ff       	call   c0017253 <loadACPITables(unsigned char*)>
c00176f2:	83 c4 10             	add    esp,0x10
c00176f5:	a1 a8 02 03 c0       	mov    eax,ds:0xc00302a8
c00176fa:	83 ec 08             	sub    esp,0x8
c00176fd:	68 28 b2 02 c0       	push   0xc002b228
c0017702:	50                   	push   eax
c0017703:	e8 ec fe ff ff       	call   c00175f4 <findDataTable(unsigned char*, char*)>
c0017708:	83 c4 10             	add    esp,0x10
c001770b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001770f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017714:	75 19                	jne    c001772f <scanMADT()+0xc9>
c0017716:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c001771b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017721:	83 e2 fe             	and    edx,0xfffffffe
c0017724:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001772a:	e9 9f 03 00 00       	jmp    c0017ace <scanMADT()+0x468>
c001772f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017737:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001773b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001773e:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017742:	0f 87 86 03 00 00    	ja     c0017ace <scanMADT()+0x468>
c0017748:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017750:	0f 87 78 03 00 00    	ja     c0017ace <scanMADT()+0x468>
c0017756:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001775a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001775e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017762:	8d 50 01             	lea    edx,[eax+0x1]
c0017765:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017769:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001776d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017771:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017775:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017779:	8d 50 01             	lea    edx,[eax+0x1]
c001777c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017780:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017784:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017788:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001778c:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017791:	0f 86 36 03 00 00    	jbe    c0017acd <scanMADT()+0x467>
c0017797:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c001779c:	75 57                	jne    c00177f5 <scanMADT()+0x18f>
c001779e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177a2:	8d 50 01             	lea    edx,[eax+0x1]
c00177a5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177a9:	8a 15 a0 04 03 c0    	mov    dl,BYTE PTR ds:0xc00304a0
c00177af:	0f b6 d2             	movzx  edx,dl
c00177b2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00177b6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00177ba:	88 82 e0 04 03 c0    	mov    BYTE PTR [edx-0x3ffcfb20],al
c00177c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177c4:	8d 50 01             	lea    edx,[eax+0x1]
c00177c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177cb:	8a 15 a0 04 03 c0    	mov    dl,BYTE PTR ds:0xc00304a0
c00177d1:	8d 4a 01             	lea    ecx,[edx+0x1]
c00177d4:	88 0d a0 04 03 c0    	mov    BYTE PTR ds:0xc00304a0,cl
c00177da:	0f b6 d2             	movzx  edx,dl
c00177dd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00177e1:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00177e5:	88 82 c0 04 03 c0    	mov    BYTE PTR [edx-0x3ffcfb40],al
c00177eb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00177f0:	e9 c1 02 00 00       	jmp    c0017ab6 <scanMADT()+0x450>
c00177f5:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00177fa:	0f 85 14 01 00 00    	jne    c0017914 <scanMADT()+0x2ae>
c0017800:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017804:	8d 50 01             	lea    edx,[eax+0x1]
c0017807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001780b:	8a 15 60 03 03 c0    	mov    dl,BYTE PTR ds:0xc0030360
c0017811:	0f b6 d2             	movzx  edx,dl
c0017814:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017818:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001781c:	88 82 80 03 03 c0    	mov    BYTE PTR [edx-0x3ffcfc80],al
c0017822:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017826:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001782a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001782e:	01 d0                	add    eax,edx
c0017830:	83 c0 2c             	add    eax,0x2c
c0017833:	8a 00                	mov    al,BYTE PTR [eax]
c0017835:	0f b6 d0             	movzx  edx,al
c0017838:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001783c:	8d 48 01             	lea    ecx,[eax+0x1]
c001783f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017843:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017847:	0f b6 c0             	movzx  eax,al
c001784a:	c1 e0 08             	shl    eax,0x8
c001784d:	89 d1                	mov    ecx,edx
c001784f:	09 c1                	or     ecx,eax
c0017851:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017855:	8d 50 02             	lea    edx,[eax+0x2]
c0017858:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001785c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017860:	0f b6 c0             	movzx  eax,al
c0017863:	c1 e0 10             	shl    eax,0x10
c0017866:	09 c1                	or     ecx,eax
c0017868:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001786c:	8d 50 03             	lea    edx,[eax+0x3]
c001786f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017873:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017877:	0f b6 c0             	movzx  eax,al
c001787a:	c1 e0 18             	shl    eax,0x18
c001787d:	09 c1                	or     ecx,eax
c001787f:	89 ca                	mov    edx,ecx
c0017881:	a0 60 03 03 c0       	mov    al,ds:0xc0030360
c0017886:	0f b6 c0             	movzx  eax,al
c0017889:	89 14 85 a0 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfc60],edx
c0017890:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017895:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017899:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001789d:	01 d0                	add    eax,edx
c001789f:	83 c0 2c             	add    eax,0x2c
c00178a2:	8a 00                	mov    al,BYTE PTR [eax]
c00178a4:	0f b6 d0             	movzx  edx,al
c00178a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178ab:	8d 48 01             	lea    ecx,[eax+0x1]
c00178ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178b2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00178b6:	0f b6 c0             	movzx  eax,al
c00178b9:	c1 e0 08             	shl    eax,0x8
c00178bc:	89 d1                	mov    ecx,edx
c00178be:	09 c1                	or     ecx,eax
c00178c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178c4:	8d 50 02             	lea    edx,[eax+0x2]
c00178c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178cb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00178cf:	0f b6 c0             	movzx  eax,al
c00178d2:	c1 e0 10             	shl    eax,0x10
c00178d5:	09 c1                	or     ecx,eax
c00178d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178db:	8d 50 03             	lea    edx,[eax+0x3]
c00178de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178e2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00178e6:	0f b6 c0             	movzx  eax,al
c00178e9:	c1 e0 18             	shl    eax,0x18
c00178ec:	09 c1                	or     ecx,eax
c00178ee:	89 ca                	mov    edx,ecx
c00178f0:	a0 60 03 03 c0       	mov    al,ds:0xc0030360
c00178f5:	0f b6 c0             	movzx  eax,al
c00178f8:	89 14 85 20 04 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfbe0],edx
c00178ff:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017904:	a0 60 03 03 c0       	mov    al,ds:0xc0030360
c0017909:	40                   	inc    eax
c001790a:	a2 60 03 03 c0       	mov    ds:0xc0030360,al
c001790f:	e9 a2 01 00 00       	jmp    c0017ab6 <scanMADT()+0x450>
c0017914:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017919:	0f 85 e9 00 00 00    	jne    c0017a08 <scanMADT()+0x3a2>
c001791f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017923:	8d 50 01             	lea    edx,[eax+0x1]
c0017926:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001792a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001792e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017932:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017936:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001793a:	8d 50 01             	lea    edx,[eax+0x1]
c001793d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017941:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017945:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017949:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001794d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017951:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017955:	01 d0                	add    eax,edx
c0017957:	83 c0 2c             	add    eax,0x2c
c001795a:	8a 00                	mov    al,BYTE PTR [eax]
c001795c:	0f b6 d0             	movzx  edx,al
c001795f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017963:	8d 48 01             	lea    ecx,[eax+0x1]
c0017966:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001796a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001796e:	0f b6 c0             	movzx  eax,al
c0017971:	c1 e0 08             	shl    eax,0x8
c0017974:	89 d1                	mov    ecx,edx
c0017976:	09 c1                	or     ecx,eax
c0017978:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001797c:	8d 50 02             	lea    edx,[eax+0x2]
c001797f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017983:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017987:	0f b6 c0             	movzx  eax,al
c001798a:	c1 e0 10             	shl    eax,0x10
c001798d:	09 c1                	or     ecx,eax
c001798f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017993:	8d 50 03             	lea    edx,[eax+0x3]
c0017996:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001799a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001799e:	0f b6 c0             	movzx  eax,al
c00179a1:	c1 e0 18             	shl    eax,0x18
c00179a4:	09 c8                	or     eax,ecx
c00179a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179aa:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00179af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179b7:	01 d0                	add    eax,edx
c00179b9:	83 c0 2c             	add    eax,0x2c
c00179bc:	8a 00                	mov    al,BYTE PTR [eax]
c00179be:	0f b6 c0             	movzx  eax,al
c00179c1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00179c5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00179c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179cc:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00179d0:	0f b6 d2             	movzx  edx,dl
c00179d3:	c1 e2 08             	shl    edx,0x8
c00179d6:	09 d0                	or     eax,edx
c00179d8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00179dd:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00179e2:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00179e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00179eb:	88 90 40 cc 02 c0    	mov    BYTE PTR [eax-0x3ffd33c0],dl
c00179f1:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00179f6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00179fb:	66 89 84 12 40 03 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcfcc0],ax
c0017a03:	e9 ae 00 00 00       	jmp    c0017ab6 <scanMADT()+0x450>
c0017a08:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017a0d:	0f 85 97 00 00 00    	jne    c0017aaa <scanMADT()+0x444>
c0017a13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a17:	8d 50 01             	lea    edx,[eax+0x1]
c0017a1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a1e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a22:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a26:	0f b6 c0             	movzx  eax,al
c0017a29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a2d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a35:	01 d0                	add    eax,edx
c0017a37:	83 c0 2c             	add    eax,0x2c
c0017a3a:	8a 00                	mov    al,BYTE PTR [eax]
c0017a3c:	0f b6 d0             	movzx  edx,al
c0017a3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a43:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a46:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a4a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017a4e:	0f b6 c0             	movzx  eax,al
c0017a51:	c1 e0 08             	shl    eax,0x8
c0017a54:	09 d0                	or     eax,edx
c0017a56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a5a:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017a5f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a63:	8d 50 01             	lea    edx,[eax+0x1]
c0017a66:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a6a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a6e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a72:	0f b6 c0             	movzx  eax,al
c0017a75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a7d:	c1 e0 08             	shl    eax,0x8
c0017a80:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017a84:	89 c1                	mov    ecx,eax
c0017a86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a8a:	c1 e0 18             	shl    eax,0x18
c0017a8d:	89 c3                	mov    ebx,eax
c0017a8f:	a1 b0 02 03 c0       	mov    eax,ds:0xc00302b0
c0017a94:	8d 50 01             	lea    edx,[eax+0x1]
c0017a97:	89 15 b0 02 03 c0    	mov    DWORD PTR ds:0xc00302b0,edx
c0017a9d:	09 d9                	or     ecx,ebx
c0017a9f:	89 ca                	mov    edx,ecx
c0017aa1:	89 14 85 c0 02 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfd40],edx
c0017aa8:	eb 0c                	jmp    c0017ab6 <scanMADT()+0x450>
c0017aaa:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017aaf:	75 05                	jne    c0017ab6 <scanMADT()+0x450>
c0017ab1:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017ab6:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017abb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017abf:	01 d0                	add    eax,edx
c0017ac1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017ac5:	e9 6d fc ff ff       	jmp    c0017737 <scanMADT()+0xd1>
c0017aca:	90                   	nop
c0017acb:	eb 01                	jmp    c0017ace <scanMADT()+0x468>
c0017acd:	90                   	nop
c0017ace:	83 c4 38             	add    esp,0x38
c0017ad1:	5b                   	pop    ebx
c0017ad2:	c3                   	ret    
c0017ad3:	90                   	nop

c0017ad4 <ACPI::ACPI()>:
c0017ad4:	83 ec 0c             	sub    esp,0xc
c0017ad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017adb:	83 ec 08             	sub    esp,0x8
c0017ade:	68 2d b2 02 c0       	push   0xc002b22d
c0017ae3:	50                   	push   eax
c0017ae4:	e8 57 c2 ff ff       	call   c0013d40 <Device::Device(char const*)>
c0017ae9:	83 c4 10             	add    esp,0x10
c0017aec:	ba 88 b3 02 c0       	mov    edx,0xc002b388
c0017af1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017af5:	89 10                	mov    DWORD PTR [eax],edx
c0017af7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017afb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b06:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b14:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017b1e:	e8 43 fb ff ff       	call   c0017666 <scanMADT()>
c0017b23:	90                   	nop
c0017b24:	83 c4 0c             	add    esp,0xc
c0017b27:	c3                   	ret    

c0017b28 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017b28:	83 ec 2c             	sub    esp,0x2c
c0017b2b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017b2f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017b33:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017b37:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017b3b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017b40:	88 d0                	mov    al,dl
c0017b42:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017b46:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017b4b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017b53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b57:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b5d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017b61:	0f 8d 97 00 00 00    	jge    c0017bfe <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017b67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b6b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b6f:	83 c2 2a             	add    edx,0x2a
c0017b72:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017b76:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017b7b:	75 78                	jne    c0017bf5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017b7d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b81:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b85:	83 c2 2a             	add    edx,0x2a
c0017b88:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017b8c:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017b90:	75 63                	jne    c0017bf5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017b92:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017b97:	74 3a                	je     c0017bd3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017b99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ba1:	83 c2 2a             	add    edx,0x2a
c0017ba4:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017ba8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017baf:	39 c2                	cmp    edx,eax
c0017bb1:	74 10                	je     c0017bc3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017bb3:	83 ec 0c             	sub    esp,0xc
c0017bb6:	68 a8 b1 02 c0       	push   0xc002b1a8
c0017bbb:	e8 af 22 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c0017bc0:	83 c4 10             	add    esp,0x10
c0017bc3:	83 ec 0c             	sub    esp,0xc
c0017bc6:	68 32 b2 02 c0       	push   0xc002b232
c0017bcb:	e8 9f 22 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c0017bd0:	83 c4 10             	add    esp,0x10
c0017bd3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017bd7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bdb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017bdf:	83 c2 2a             	add    edx,0x2a
c0017be2:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017be6:	8b 02                	mov    eax,DWORD PTR [edx]
c0017be8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017beb:	89 01                	mov    DWORD PTR [ecx],eax
c0017bed:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017bf0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017bf5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017bf9:	e9 55 ff ff ff       	jmp    c0017b53 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017bfe:	90                   	nop
c0017bff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c03:	83 c4 2c             	add    esp,0x2c
c0017c06:	c2 04 00             	ret    0x4
c0017c09:	90                   	nop

c0017c0a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017c0a:	83 ec 1c             	sub    esp,0x1c
c0017c0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c11:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017c15:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c19:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017c1e:	88 c8                	mov    al,cl
c0017c20:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017c24:	88 d0                	mov    al,dl
c0017c26:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c2e:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c38:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017c3b:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017c3f:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017c43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c47:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c4d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c51:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017c54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c58:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017c5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c61:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c67:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017c6b:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c72:	83 c2 2a             	add    edx,0x2a
c0017c75:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017c79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c7d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c87:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017c8a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017c8e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017c92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c96:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c9c:	8d 50 01             	lea    edx,[eax+0x1]
c0017c9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ca3:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017ca9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cad:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017cb3:	3d 00 02 00 00       	cmp    eax,0x200
c0017cb8:	75 10                	jne    c0017cca <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017cba:	83 ec 0c             	sub    esp,0xc
c0017cbd:	68 41 b2 02 c0       	push   0xc002b241
c0017cc2:	e8 a8 21 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c0017cc7:	83 c4 10             	add    esp,0x10
c0017cca:	90                   	nop
c0017ccb:	83 c4 1c             	add    esp,0x1c
c0017cce:	c3                   	ret    
c0017ccf:	90                   	nop

c0017cd0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017cd0:	b8 00 00 00 00       	mov    eax,0x0
c0017cd5:	c3                   	ret    

c0017cd6 <ACPI::detectPCI()>:
c0017cd6:	53                   	push   ebx
c0017cd7:	83 ec 28             	sub    esp,0x28
c0017cda:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017cdf:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017ce4:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0017ce9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017cef:	83 e0 04             	and    eax,0x4
c0017cf2:	84 c0                	test   al,al
c0017cf4:	74 2b                	je     c0017d21 <ACPI::detectPCI()+0x4b>
c0017cf6:	a1 a8 02 03 c0       	mov    eax,ds:0xc00302a8
c0017cfb:	83 ec 08             	sub    esp,0x8
c0017cfe:	68 5e b2 02 c0       	push   0xc002b25e
c0017d03:	50                   	push   eax
c0017d04:	e8 eb f8 ff ff       	call   c00175f4 <findDataTable(unsigned char*, char*)>
c0017d09:	83 c4 10             	add    esp,0x10
c0017d0c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017d10:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017d15:	74 0a                	je     c0017d21 <ACPI::detectPCI()+0x4b>
c0017d17:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d1c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017d21:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017d29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d2d:	8a 00                	mov    al,BYTE PTR [eax]
c0017d2f:	3c 01                	cmp    al,0x1
c0017d31:	75 0c                	jne    c0017d3f <ACPI::detectPCI()+0x69>
c0017d33:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d38:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017d3d:	eb 26                	jmp    c0017d65 <ACPI::detectPCI()+0x8f>
c0017d3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d43:	8a 00                	mov    al,BYTE PTR [eax]
c0017d45:	3c 02                	cmp    al,0x2
c0017d47:	75 1c                	jne    c0017d65 <ACPI::detectPCI()+0x8f>
c0017d49:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d4e:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017d53:	74 10                	je     c0017d65 <ACPI::detectPCI()+0x8f>
c0017d55:	83 ec 0c             	sub    esp,0xc
c0017d58:	68 d8 b1 02 c0       	push   0xc002b1d8
c0017d5d:	e8 0d 21 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c0017d62:	83 c4 10             	add    esp,0x10
c0017d65:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017d69:	83 f0 01             	xor    eax,0x1
c0017d6c:	84 c0                	test   al,al
c0017d6e:	74 3f                	je     c0017daf <ACPI::detectPCI()+0xd9>
c0017d70:	e8 db 83 fe ff       	call   c0000150 <manualPCIProbe>
c0017d75:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d79:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017d7e:	75 0c                	jne    c0017d8c <ACPI::detectPCI()+0xb6>
c0017d80:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d85:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017d8a:	eb 23                	jmp    c0017daf <ACPI::detectPCI()+0xd9>
c0017d8c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017d91:	75 1c                	jne    c0017daf <ACPI::detectPCI()+0xd9>
c0017d93:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d98:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017d9d:	74 10                	je     c0017daf <ACPI::detectPCI()+0xd9>
c0017d9f:	83 ec 0c             	sub    esp,0xc
c0017da2:	68 d8 b1 02 c0       	push   0xc002b1d8
c0017da7:	e8 c3 20 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c0017dac:	83 c4 10             	add    esp,0x10
c0017daf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017db4:	74 7e                	je     c0017e34 <ACPI::detectPCI()+0x15e>
c0017db6:	83 ec 0c             	sub    esp,0xc
c0017db9:	68 63 b2 02 c0       	push   0xc002b263
c0017dbe:	e8 30 78 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017dc3:	83 c4 10             	add    esp,0x10
c0017dc6:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017dce:	83 ec 0c             	sub    esp,0xc
c0017dd1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017dd5:	e8 bf 77 ff ff       	call   c000f599 <malloc>
c0017dda:	83 c4 10             	add    esp,0x10
c0017ddd:	89 c3                	mov    ebx,eax
c0017ddf:	83 ec 0c             	sub    esp,0xc
c0017de2:	53                   	push   ebx
c0017de3:	e8 aa a5 00 00       	call   c0022392 <PCI::PCI()>
c0017de8:	83 c4 10             	add    esp,0x10
c0017deb:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017def:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017df3:	83 ec 08             	sub    esp,0x8
c0017df6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017dfa:	50                   	push   eax
c0017dfb:	e8 3c bd ff ff       	call   c0013b3c <Device::addChild(Device*)>
c0017e00:	83 c4 10             	add    esp,0x10
c0017e03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e07:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e09:	83 c0 08             	add    eax,0x8
c0017e0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e0e:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017e13:	74 07                	je     c0017e1c <ACPI::detectPCI()+0x146>
c0017e15:	ba 01 00 00 00       	mov    edx,0x1
c0017e1a:	eb 05                	jmp    c0017e21 <ACPI::detectPCI()+0x14b>
c0017e1c:	ba 02 00 00 00       	mov    edx,0x2
c0017e21:	6a 00                	push   0x0
c0017e23:	6a 00                	push   0x0
c0017e25:	52                   	push   edx
c0017e26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e2a:	ff d0                	call   eax
c0017e2c:	83 c4 10             	add    esp,0x10
c0017e2f:	e9 9e 00 00 00       	jmp    c0017ed2 <ACPI::detectPCI()+0x1fc>
c0017e34:	83 ec 0c             	sub    esp,0xc
c0017e37:	68 7b b2 02 c0       	push   0xc002b27b
c0017e3c:	e8 c2 a8 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0017e41:	83 c4 10             	add    esp,0x10
c0017e44:	83 ec 0c             	sub    esp,0xc
c0017e47:	68 86 b2 02 c0       	push   0xc002b286
c0017e4c:	e8 a2 77 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017e51:	83 c4 10             	add    esp,0x10
c0017e54:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017e5b:	83 ec 0c             	sub    esp,0xc
c0017e5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017e62:	e8 32 77 ff ff       	call   c000f599 <malloc>
c0017e67:	83 c4 10             	add    esp,0x10
c0017e6a:	89 c3                	mov    ebx,eax
c0017e6c:	83 ec 0c             	sub    esp,0xc
c0017e6f:	53                   	push   ebx
c0017e70:	e8 87 b0 00 00       	call   c0022efc <IDE::IDE()>
c0017e75:	83 c4 10             	add    esp,0x10
c0017e78:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017e7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e80:	83 ec 08             	sub    esp,0x8
c0017e83:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017e87:	50                   	push   eax
c0017e88:	e8 af bc ff ff       	call   c0013b3c <Device::addChild(Device*)>
c0017e8d:	83 c4 10             	add    esp,0x10
c0017e90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e94:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017e9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ea2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017eab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017eaf:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017eb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ebc:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ebe:	83 c0 08             	add    eax,0x8
c0017ec1:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ec3:	6a 00                	push   0x0
c0017ec5:	6a 00                	push   0x0
c0017ec7:	6a 00                	push   0x0
c0017ec9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017ecd:	ff d0                	call   eax
c0017ecf:	83 c4 10             	add    esp,0x10
c0017ed2:	90                   	nop
c0017ed3:	83 c4 28             	add    esp,0x28
c0017ed6:	5b                   	pop    ebx
c0017ed7:	c3                   	ret    

c0017ed8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017ed8:	83 ec 1c             	sub    esp,0x1c
c0017edb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017edf:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017ee2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017ee6:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0017eeb:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017ef0:	83 ec 08             	sub    esp,0x8
c0017ef3:	52                   	push   edx
c0017ef4:	50                   	push   eax
c0017ef5:	e8 b6 6c ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017efa:	83 c4 10             	add    esp,0x10
c0017efd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017f01:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0017f06:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017f0b:	83 ec 04             	sub    esp,0x4
c0017f0e:	6a 01                	push   0x1
c0017f10:	52                   	push   edx
c0017f11:	50                   	push   eax
c0017f12:	e8 cb 6d ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017f17:	83 c4 10             	add    esp,0x10
c0017f1a:	90                   	nop
c0017f1b:	83 c4 1c             	add    esp,0x1c
c0017f1e:	c3                   	ret    
c0017f1f:	90                   	nop

c0017f20 <ACPI::sleep()>:
c0017f20:	83 ec 0c             	sub    esp,0xc
c0017f23:	a1 80 00 03 c0       	mov    eax,ds:0xc0030080
c0017f28:	85 c0                	test   eax,eax
c0017f2a:	74 07                	je     c0017f33 <ACPI::sleep()+0x13>
c0017f2c:	a1 80 00 03 c0       	mov    eax,ds:0xc0030080
c0017f31:	ff d0                	call   eax
c0017f33:	90                   	nop
c0017f34:	83 c4 0c             	add    esp,0xc
c0017f37:	c3                   	ret    

c0017f38 <ACPI::open(int, int, void*)>:
c0017f38:	57                   	push   edi
c0017f39:	56                   	push   esi
c0017f3a:	53                   	push   ebx
c0017f3b:	81 ec 60 01 00 00    	sub    esp,0x160
c0017f41:	83 ec 0c             	sub    esp,0xc
c0017f44:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017f4b:	e8 86 fd ff ff       	call   c0017cd6 <ACPI::detectPCI()>
c0017f50:	83 c4 10             	add    esp,0x10
c0017f53:	83 ec 0c             	sub    esp,0xc
c0017f56:	68 00 b2 02 c0       	push   0xc002b200
c0017f5b:	e8 93 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f60:	83 c4 10             	add    esp,0x10
c0017f63:	83 ec 0c             	sub    esp,0xc
c0017f66:	68 9b b2 02 c0       	push   0xc002b29b
c0017f6b:	e8 52 46 00 00       	call   c001c5c2 <Thr::loadKernelSymbolTable(char const*)>
c0017f70:	83 c4 10             	add    esp,0x10
c0017f73:	83 ec 0c             	sub    esp,0xc
c0017f76:	68 b9 b2 02 c0       	push   0xc002b2b9
c0017f7b:	e8 73 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f80:	83 c4 10             	add    esp,0x10
c0017f83:	83 ec 04             	sub    esp,0x4
c0017f86:	6a 0c                	push   0xc
c0017f88:	68 d4 b2 02 c0       	push   0xc002b2d4
c0017f8d:	68 e5 b2 02 c0       	push   0xc002b2e5
c0017f92:	e8 94 2c 00 00       	call   c001ac2b <Reg::readIntWithDefault(char*, char*, int)>
c0017f97:	83 c4 10             	add    esp,0x10
c0017f9a:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0017fa1:	83 ec 0c             	sub    esp,0xc
c0017fa4:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0017fab:	e8 b1 94 ff ff       	call   c0011461 <Virt::setupPageSwapping(int)>
c0017fb0:	83 c4 10             	add    esp,0x10
c0017fb3:	83 ec 0c             	sub    esp,0xc
c0017fb6:	68 35 9e 02 c0       	push   0xc0029e35
c0017fbb:	e8 33 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017fc0:	83 c4 10             	add    esp,0x10
c0017fc3:	8b 1d e8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9e8
c0017fc9:	83 ec 08             	sub    esp,0x8
c0017fcc:	6a 01                	push   0x1
c0017fce:	68 ec b2 02 c0       	push   0xc002b2ec
c0017fd3:	e8 61 50 00 00       	call   c001d039 <Thr::loadDLL(char const*, bool)>
c0017fd8:	83 c4 10             	add    esp,0x10
c0017fdb:	83 ec 08             	sub    esp,0x8
c0017fde:	53                   	push   ebx
c0017fdf:	50                   	push   eax
c0017fe0:	e8 7f 52 00 00       	call   c001d264 <Thr::executeDLL(unsigned long, void*)>
c0017fe5:	83 c4 10             	add    esp,0x10
c0017fe8:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0017fef:	83 ec 08             	sub    esp,0x8
c0017ff2:	6a 12                	push   0x12
c0017ff4:	50                   	push   eax
c0017ff5:	e8 c6 be ff ff       	call   c0013ec0 <getDevicesOfType(DeviceType)>
c0017ffa:	83 c4 0c             	add    esp,0xc
c0017ffd:	83 ec 0c             	sub    esp,0xc
c0018000:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018007:	50                   	push   eax
c0018008:	e8 87 09 01 00       	call   c0028994 <LinkedList<Device>::isEmpty()>
c001800d:	83 c4 10             	add    esp,0x10
c0018010:	83 f0 01             	xor    eax,0x1
c0018013:	84 c0                	test   al,al
c0018015:	0f 84 43 01 00 00    	je     c001815e <ACPI::open(int, int, void*)+0x226>
c001801b:	83 ec 0c             	sub    esp,0xc
c001801e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018025:	50                   	push   eax
c0018026:	e8 85 09 01 00       	call   c00289b0 <LinkedList<Device>::getFirstElement()>
c001802b:	83 c4 10             	add    esp,0x10
c001802e:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0018035:	83 ec 0c             	sub    esp,0xc
c0018038:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001803f:	50                   	push   eax
c0018040:	e8 73 09 01 00       	call   c00289b8 <LinkedList<Device>::removeFirst()>
c0018045:	83 c4 10             	add    esp,0x10
c0018048:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c001804f:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0018056:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c001805d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018061:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018067:	ba 09 00 00 00       	mov    edx,0x9
c001806c:	fc                   	cld    
c001806d:	89 c7                	mov    edi,eax
c001806f:	89 de                	mov    esi,ebx
c0018071:	89 d1                	mov    ecx,edx
c0018073:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018075:	83 ec 08             	sub    esp,0x8
c0018078:	8d 44 24 38          	lea    eax,[esp+0x38]
c001807c:	50                   	push   eax
c001807d:	83 ec 24             	sub    esp,0x24
c0018080:	89 e0                	mov    eax,esp
c0018082:	89 c3                	mov    ebx,eax
c0018084:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018088:	ba 09 00 00 00       	mov    edx,0x9
c001808d:	89 df                	mov    edi,ebx
c001808f:	89 c6                	mov    esi,eax
c0018091:	89 d1                	mov    ecx,edx
c0018093:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018095:	e8 d6 a7 00 00       	call   c0022870 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001809a:	83 c4 30             	add    esp,0x30
c001809d:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c00180a4:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00180ac:	0f 84 4b ff ff ff    	je     c0017ffd <ACPI::open(int, int, void*)+0xc5>
c00180b2:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00180bd:	83 ec 0c             	sub    esp,0xc
c00180c0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00180c7:	e8 cd 74 ff ff       	call   c000f599 <malloc>
c00180cc:	83 c4 10             	add    esp,0x10
c00180cf:	89 c3                	mov    ebx,eax
c00180d1:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c00180d6:	83 ec 04             	sub    esp,0x4
c00180d9:	50                   	push   eax
c00180da:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00180e1:	53                   	push   ebx
c00180e2:	e8 7b ab ff ff       	call   c0012c62 <File::File(char const*, Process*)>
c00180e7:	83 c4 10             	add    esp,0x10
c00180ea:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00180f1:	83 ec 0c             	sub    esp,0xc
c00180f4:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00180fb:	e8 34 ae ff ff       	call   c0012f34 <File::exists()>
c0018100:	83 c4 10             	add    esp,0x10
c0018103:	84 c0                	test   al,al
c0018105:	74 27                	je     c001812e <ACPI::open(int, int, void*)+0x1f6>
c0018107:	83 ec 08             	sub    esp,0x8
c001810a:	6a 01                	push   0x1
c001810c:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018113:	e8 21 4f 00 00       	call   c001d039 <Thr::loadDLL(char const*, bool)>
c0018118:	83 c4 10             	add    esp,0x10
c001811b:	83 ec 08             	sub    esp,0x8
c001811e:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018125:	50                   	push   eax
c0018126:	e8 39 51 00 00       	call   c001d264 <Thr::executeDLL(unsigned long, void*)>
c001812b:	83 c4 10             	add    esp,0x10
c001812e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018136:	0f 84 c1 fe ff ff    	je     c0017ffd <ACPI::open(int, int, void*)+0xc5>
c001813c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0018143:	8b 00                	mov    eax,DWORD PTR [eax]
c0018145:	83 c0 08             	add    eax,0x8
c0018148:	8b 00                	mov    eax,DWORD PTR [eax]
c001814a:	83 ec 0c             	sub    esp,0xc
c001814d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018154:	ff d0                	call   eax
c0018156:	83 c4 10             	add    esp,0x10
c0018159:	e9 9f fe ff ff       	jmp    c0017ffd <ACPI::open(int, int, void*)+0xc5>
c001815e:	83 ec 0c             	sub    esp,0xc
c0018161:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018168:	50                   	push   eax
c0018169:	e8 24 08 01 00       	call   c0028992 <LinkedList<Device>::~LinkedList()>
c001816e:	83 c4 10             	add    esp,0x10
c0018171:	8b 1d e8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9e8
c0018177:	83 ec 08             	sub    esp,0x8
c001817a:	6a 01                	push   0x1
c001817c:	68 07 b3 02 c0       	push   0xc002b307
c0018181:	e8 b3 4e 00 00       	call   c001d039 <Thr::loadDLL(char const*, bool)>
c0018186:	83 c4 10             	add    esp,0x10
c0018189:	83 ec 08             	sub    esp,0x8
c001818c:	53                   	push   ebx
c001818d:	50                   	push   eax
c001818e:	e8 d1 50 00 00       	call   c001d264 <Thr::executeDLL(unsigned long, void*)>
c0018193:	83 c4 10             	add    esp,0x10
c0018196:	8b 1d e8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9e8
c001819c:	83 ec 08             	sub    esp,0x8
c001819f:	6a 01                	push   0x1
c00181a1:	68 24 b3 02 c0       	push   0xc002b324
c00181a6:	e8 8e 4e 00 00       	call   c001d039 <Thr::loadDLL(char const*, bool)>
c00181ab:	83 c4 10             	add    esp,0x10
c00181ae:	83 ec 08             	sub    esp,0x8
c00181b1:	53                   	push   ebx
c00181b2:	50                   	push   eax
c00181b3:	e8 ac 50 00 00       	call   c001d264 <Thr::executeDLL(unsigned long, void*)>
c00181b8:	83 c4 10             	add    esp,0x10
c00181bb:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c00181c0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00181c6:	83 e0 04             	and    eax,0x4
c00181c9:	84 c0                	test   al,al
c00181cb:	0f 84 0d 01 00 00    	je     c00182de <ACPI::open(int, int, void*)+0x3a6>
c00181d1:	83 ec 0c             	sub    esp,0xc
c00181d4:	68 41 b3 02 c0       	push   0xc002b341
c00181d9:	e8 15 74 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c00181de:	83 c4 10             	add    esp,0x10
c00181e1:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00181ec:	83 ec 0c             	sub    esp,0xc
c00181ef:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00181f6:	e8 9e 73 ff ff       	call   c000f599 <malloc>
c00181fb:	83 c4 10             	add    esp,0x10
c00181fe:	89 c3                	mov    ebx,eax
c0018200:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0018205:	83 ec 04             	sub    esp,0x4
c0018208:	50                   	push   eax
c0018209:	68 5e b3 02 c0       	push   0xc002b35e
c001820e:	53                   	push   ebx
c001820f:	e8 4e aa ff ff       	call   c0012c62 <File::File(char const*, Process*)>
c0018214:	83 c4 10             	add    esp,0x10
c0018217:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c001821e:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018226:	74 1a                	je     c0018242 <ACPI::open(int, int, void*)+0x30a>
c0018228:	83 ec 0c             	sub    esp,0xc
c001822b:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018232:	e8 fd ac ff ff       	call   c0012f34 <File::exists()>
c0018237:	83 c4 10             	add    esp,0x10
c001823a:	84 c0                	test   al,al
c001823c:	74 04                	je     c0018242 <ACPI::open(int, int, void*)+0x30a>
c001823e:	b0 01                	mov    al,0x1
c0018240:	eb 02                	jmp    c0018244 <ACPI::open(int, int, void*)+0x30c>
c0018242:	b0 00                	mov    al,0x0
c0018244:	84 c0                	test   al,al
c0018246:	74 25                	je     c001826d <ACPI::open(int, int, void*)+0x335>
c0018248:	83 ec 08             	sub    esp,0x8
c001824b:	6a 01                	push   0x1
c001824d:	68 5e b3 02 c0       	push   0xc002b35e
c0018252:	e8 e2 4d 00 00       	call   c001d039 <Thr::loadDLL(char const*, bool)>
c0018257:	83 c4 10             	add    esp,0x10
c001825a:	83 ec 08             	sub    esp,0x8
c001825d:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c0018264:	50                   	push   eax
c0018265:	e8 fa 4f 00 00       	call   c001d264 <Thr::executeDLL(unsigned long, void*)>
c001826a:	83 c4 10             	add    esp,0x10
c001826d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018275:	74 27                	je     c001829e <ACPI::open(int, int, void*)+0x366>
c0018277:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001827f:	74 1d                	je     c001829e <ACPI::open(int, int, void*)+0x366>
c0018281:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018288:	8b 00                	mov    eax,DWORD PTR [eax]
c001828a:	83 c0 08             	add    eax,0x8
c001828d:	8b 00                	mov    eax,DWORD PTR [eax]
c001828f:	83 ec 0c             	sub    esp,0xc
c0018292:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018299:	ff d0                	call   eax
c001829b:	83 c4 10             	add    esp,0x10
c001829e:	a1 a8 02 03 c0       	mov    eax,ds:0xc00302a8
c00182a3:	83 ec 08             	sub    esp,0x8
c00182a6:	68 7b b3 02 c0       	push   0xc002b37b
c00182ab:	50                   	push   eax
c00182ac:	e8 43 f3 ff ff       	call   c00175f4 <findDataTable(unsigned char*, char*)>
c00182b1:	83 c4 10             	add    esp,0x10
c00182b4:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c00182bb:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c00182c3:	74 19                	je     c00182de <ACPI::open(int, int, void*)+0x3a6>
c00182c5:	83 ec 08             	sub    esp,0x8
c00182c8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00182cf:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00182d6:	e8 fd fb ff ff       	call   c0017ed8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00182db:	83 c4 10             	add    esp,0x10
c00182de:	b8 00 00 00 00       	mov    eax,0x0
c00182e3:	81 c4 60 01 00 00    	add    esp,0x160
c00182e9:	5b                   	pop    ebx
c00182ea:	5e                   	pop    esi
c00182eb:	5f                   	pop    edi
c00182ec:	c3                   	ret    
c00182ed:	90                   	nop

c00182ee <CPU::close(int, int, void*)>:
c00182ee:	31 c0                	xor    eax,eax
c00182f0:	c3                   	ret    
c00182f1:	90                   	nop

c00182f2 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00182f2:	55                   	push   ebp
c00182f3:	57                   	push   edi
c00182f4:	56                   	push   esi
c00182f5:	53                   	push   ebx
c00182f6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00182fa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182fe:	89 ce                	mov    esi,ecx
c0018300:	89 d5                	mov    ebp,edx
c0018302:	80 f9 04             	cmp    cl,0x4
c0018305:	75 28                	jne    c001832f <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018307:	8d 42 f9             	lea    eax,[edx-0x7]
c001830a:	3c 03                	cmp    al,0x3
c001830c:	0f 86 63 01 00 00    	jbe    c0018475 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018312:	80 fa 03             	cmp    dl,0x3
c0018315:	0f 84 5a 01 00 00    	je     c0018475 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001831b:	8d 7a f2             	lea    edi,[edx-0xe]
c001831e:	b8 10 ce 02 c0       	mov    eax,0xc002ce10
c0018323:	89 fb                	mov    ebx,edi
c0018325:	80 fb 01             	cmp    bl,0x1
c0018328:	77 4e                	ja     c0018378 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001832a:	e9 52 01 00 00       	jmp    c0018481 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001832f:	80 f9 05             	cmp    cl,0x5
c0018332:	75 4d                	jne    c0018381 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018334:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c0018339:	80 fa 03             	cmp    dl,0x3
c001833c:	0f 86 3f 01 00 00    	jbe    c0018481 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018342:	8d 7a fa             	lea    edi,[edx-0x6]
c0018345:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c001834a:	89 fb                	mov    ebx,edi
c001834c:	80 fb 01             	cmp    bl,0x1
c001834f:	0f 86 2c 01 00 00    	jbe    c0018481 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018355:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c001835a:	80 fa 08             	cmp    dl,0x8
c001835d:	0f 84 1e 01 00 00    	je     c0018481 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018363:	89 d7                	mov    edi,edx
c0018365:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c001836a:	83 e7 fb             	and    edi,0xfffffffb
c001836d:	89 fb                	mov    ebx,edi
c001836f:	80 fb 09             	cmp    bl,0x9
c0018372:	0f 84 09 01 00 00    	je     c0018481 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018378:	31 c0                	xor    eax,eax
c001837a:	89 eb                	mov    ebx,ebp
c001837c:	0f b6 fb             	movzx  edi,bl
c001837f:	eb 30                	jmp    c00183b1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018381:	31 c0                	xor    eax,eax
c0018383:	80 f9 06             	cmp    cl,0x6
c0018386:	75 f2                	jne    c001837a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018388:	80 fa 0a             	cmp    dl,0xa
c001838b:	77 ed                	ja     c001837a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001838d:	bf de 05 00 00       	mov    edi,0x5de
c0018392:	0f a3 d7             	bt     edi,edx
c0018395:	73 e3                	jae    c001837a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018397:	b8 60 ce 02 c0       	mov    eax,0xc002ce60
c001839c:	e9 e0 00 00 00       	jmp    c0018481 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183a1:	39 c7                	cmp    edi,eax
c00183a3:	0f 84 d3 00 00 00    	je     c001847c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00183a9:	40                   	inc    eax
c00183aa:	3d d0 00 00 00       	cmp    eax,0xd0
c00183af:	74 09                	je     c00183ba <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00183b1:	89 f3                	mov    ebx,esi
c00183b3:	80 fb 0f             	cmp    bl,0xf
c00183b6:	75 f1                	jne    c00183a9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00183b8:	eb e7                	jmp    c00183a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00183ba:	80 f9 10             	cmp    cl,0x10
c00183bd:	75 14                	jne    c00183d3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00183bf:	8d 42 fc             	lea    eax,[edx-0x4]
c00183c2:	83 e0 fb             	and    eax,0xfffffffb
c00183c5:	3c 02                	cmp    al,0x2
c00183c7:	76 34                	jbe    c00183fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00183c9:	b8 01 b5 02 c0       	mov    eax,0xc002b501
c00183ce:	80 fa 02             	cmp    dl,0x2
c00183d1:	eb 24                	jmp    c00183f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00183d3:	80 f9 11             	cmp    cl,0x11
c00183d6:	75 13                	jne    c00183eb <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00183d8:	b8 01 b5 02 c0       	mov    eax,0xc002b501
c00183dd:	80 fa 03             	cmp    dl,0x3
c00183e0:	0f 85 9b 00 00 00    	jne    c0018481 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183e6:	e9 91 00 00 00       	jmp    c001847c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00183eb:	80 f9 12             	cmp    cl,0x12
c00183ee:	75 14                	jne    c0018404 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00183f0:	b8 01 b5 02 c0       	mov    eax,0xc002b501
c00183f5:	fe ca                	dec    dl
c00183f7:	0f 85 84 00 00 00    	jne    c0018481 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183fd:	b8 80 ce 02 c0       	mov    eax,0xc002ce80
c0018402:	eb 7d                	jmp    c0018481 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018404:	80 f9 14             	cmp    cl,0x14
c0018407:	75 12                	jne    c001841b <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018409:	4a                   	dec    edx
c001840a:	b8 01 b5 02 c0       	mov    eax,0xc002b501
c001840f:	80 fa 01             	cmp    dl,0x1
c0018412:	77 6d                	ja     c0018481 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018414:	b8 90 ce 02 c0       	mov    eax,0xc002ce90
c0018419:	eb 66                	jmp    c0018481 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001841b:	80 f9 15             	cmp    cl,0x15
c001841e:	75 31                	jne    c0018451 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018420:	b8 a0 ce 02 c0       	mov    eax,0xc002cea0
c0018425:	80 fa 01             	cmp    dl,0x1
c0018428:	74 57                	je     c0018481 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001842a:	b8 01 b5 02 c0       	mov    eax,0xc002b501
c001842f:	80 fa 13             	cmp    dl,0x13
c0018432:	76 0c                	jbe    c0018440 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018434:	80 fa 30             	cmp    dl,0x30
c0018437:	75 48                	jne    c0018481 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018439:	b8 c0 ce 02 c0       	mov    eax,0xc002cec0
c001843e:	eb 41                	jmp    c0018481 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018440:	b9 04 00 09 00       	mov    ecx,0x90004
c0018445:	0f a3 d1             	bt     ecx,edx
c0018448:	73 37                	jae    c0018481 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001844a:	b8 b0 ce 02 c0       	mov    eax,0xc002ceb0
c001844f:	eb 30                	jmp    c0018481 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018451:	b8 01 b5 02 c0       	mov    eax,0xc002b501
c0018456:	80 f9 16             	cmp    cl,0x16
c0018459:	75 26                	jne    c0018481 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001845b:	b8 d0 ce 02 c0       	mov    eax,0xc002ced0
c0018460:	84 d2                	test   dl,dl
c0018462:	74 1d                	je     c0018481 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018464:	b8 01 b5 02 c0       	mov    eax,0xc002b501
c0018469:	80 fa 30             	cmp    dl,0x30
c001846c:	75 13                	jne    c0018481 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001846e:	b8 e0 ce 02 c0       	mov    eax,0xc002cee0
c0018473:	eb 0c                	jmp    c0018481 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018475:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c001847a:	eb 05                	jmp    c0018481 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001847c:	b8 70 ce 02 c0       	mov    eax,0xc002ce70
c0018481:	5b                   	pop    ebx
c0018482:	5e                   	pop    esi
c0018483:	5f                   	pop    edi
c0018484:	5d                   	pop    ebp
c0018485:	c3                   	ret    

c0018486 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018486:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001848a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001848e:	80 f9 04             	cmp    cl,0x4
c0018491:	75 6b                	jne    c00184fe <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018493:	b8 60 cc 02 c0       	mov    eax,0xc002cc60
c0018498:	80 fa 01             	cmp    dl,0x1
c001849b:	0f 86 92 02 00 00    	jbe    c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184a1:	b8 70 cc 02 c0       	mov    eax,0xc002cc70
c00184a6:	80 fa 02             	cmp    dl,0x2
c00184a9:	0f 84 84 02 00 00    	je     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184af:	b8 80 cc 02 c0       	mov    eax,0xc002cc80
c00184b4:	80 fa 03             	cmp    dl,0x3
c00184b7:	0f 84 76 02 00 00    	je     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184bd:	b8 90 cc 02 c0       	mov    eax,0xc002cc90
c00184c2:	80 fa 04             	cmp    dl,0x4
c00184c5:	0f 84 68 02 00 00    	je     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184cb:	b8 a0 cc 02 c0       	mov    eax,0xc002cca0
c00184d0:	80 fa 05             	cmp    dl,0x5
c00184d3:	0f 84 5a 02 00 00    	je     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184d9:	b8 80 cc 02 c0       	mov    eax,0xc002cc80
c00184de:	80 fa 07             	cmp    dl,0x7
c00184e1:	0f 84 4c 02 00 00    	je     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184e7:	83 ea 08             	sub    edx,0x8
c00184ea:	b8 01 b5 02 c0       	mov    eax,0xc002b501
c00184ef:	80 fa 01             	cmp    dl,0x1
c00184f2:	0f 87 3b 02 00 00    	ja     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184f8:	b8 b0 cc 02 c0       	mov    eax,0xc002ccb0
c00184fd:	c3                   	ret    
c00184fe:	80 f9 05             	cmp    cl,0x5
c0018501:	75 45                	jne    c0018548 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018503:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018506:	b8 c0 cc 02 c0       	mov    eax,0xc002ccc0
c001850b:	80 f9 02             	cmp    cl,0x2
c001850e:	0f 86 1f 02 00 00    	jbe    c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018514:	80 fa 04             	cmp    dl,0x4
c0018517:	0f 84 f3 01 00 00    	je     c0018710 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001851d:	80 fa 07             	cmp    dl,0x7
c0018520:	0f 84 0d 02 00 00    	je     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018526:	b8 d0 cc 02 c0       	mov    eax,0xc002ccd0
c001852b:	80 fa 08             	cmp    dl,0x8
c001852e:	0f 84 ff 01 00 00    	je     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018534:	b8 01 b5 02 c0       	mov    eax,0xc002b501
c0018539:	80 fa 09             	cmp    dl,0x9
c001853c:	0f 85 f1 01 00 00    	jne    c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018542:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c0018547:	c3                   	ret    
c0018548:	80 f9 06             	cmp    cl,0x6
c001854b:	0f 85 85 01 00 00    	jne    c00186d6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018551:	b8 f0 cc 02 c0       	mov    eax,0xc002ccf0
c0018556:	80 fa 01             	cmp    dl,0x1
c0018559:	0f 84 d4 01 00 00    	je     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001855f:	8d 42 fb             	lea    eax,[edx-0x5]
c0018562:	3c 01                	cmp    al,0x1
c0018564:	0f 86 ac 01 00 00    	jbe    c0018716 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001856a:	80 fa 03             	cmp    dl,0x3
c001856d:	0f 84 a3 01 00 00    	je     c0018716 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018573:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018576:	b8 10 cd 02 c0       	mov    eax,0xc002cd10
c001857b:	80 f9 01             	cmp    cl,0x1
c001857e:	0f 86 af 01 00 00    	jbe    c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018584:	80 fa 09             	cmp    dl,0x9
c0018587:	0f 84 8f 01 00 00    	je     c001871c <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001858d:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018590:	80 f9 01             	cmp    cl,0x1
c0018593:	0f 86 9a 01 00 00    	jbe    c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018599:	b8 20 cd 02 c0       	mov    eax,0xc002cd20
c001859e:	80 fa 0d             	cmp    dl,0xd
c00185a1:	0f 84 8c 01 00 00    	je     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185a7:	b8 30 cd 02 c0       	mov    eax,0xc002cd30
c00185ac:	80 fa 0e             	cmp    dl,0xe
c00185af:	0f 84 7e 01 00 00    	je     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185b5:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c00185ba:	80 fa 0f             	cmp    dl,0xf
c00185bd:	0f 84 70 01 00 00    	je     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185c3:	b8 20 cd 02 c0       	mov    eax,0xc002cd20
c00185c8:	80 fa 15             	cmp    dl,0x15
c00185cb:	0f 84 62 01 00 00    	je     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185d1:	8d 4a ea             	lea    ecx,[edx-0x16]
c00185d4:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c00185d9:	80 f9 01             	cmp    cl,0x1
c00185dc:	0f 86 51 01 00 00    	jbe    c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185e2:	80 fa 1a             	cmp    dl,0x1a
c00185e5:	0f 84 37 01 00 00    	je     c0018722 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00185eb:	80 fa 1c             	cmp    dl,0x1c
c00185ee:	0f 84 34 01 00 00    	je     c0018728 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00185f4:	80 fa 1d             	cmp    dl,0x1d
c00185f7:	0f 84 36 01 00 00    	je     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185fd:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c0018602:	80 fa 25             	cmp    dl,0x25
c0018605:	0f 84 28 01 00 00    	je     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001860b:	8d 4a da             	lea    ecx,[edx-0x26]
c001860e:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c0018613:	80 f9 01             	cmp    cl,0x1
c0018616:	0f 86 17 01 00 00    	jbe    c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001861c:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c0018621:	80 fa 2a             	cmp    dl,0x2a
c0018624:	0f 84 09 01 00 00    	je     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001862a:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c001862f:	80 fa 2c             	cmp    dl,0x2c
c0018632:	0f 84 fb 00 00 00    	je     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018638:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c001863d:	80 fa 2d             	cmp    dl,0x2d
c0018640:	0f 84 ed 00 00 00    	je     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018646:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c001864b:	80 fa 2e             	cmp    dl,0x2e
c001864e:	0f 84 df 00 00 00    	je     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018654:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c0018659:	80 fa 2f             	cmp    dl,0x2f
c001865c:	0f 84 d1 00 00 00    	je     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018662:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018665:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c001866a:	80 f9 01             	cmp    cl,0x1
c001866d:	0f 86 c0 00 00 00    	jbe    c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018673:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c0018678:	80 fa 37             	cmp    dl,0x37
c001867b:	0f 84 b2 00 00 00    	je     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018681:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c0018686:	80 fa 3a             	cmp    dl,0x3a
c0018689:	0f 84 a4 00 00 00    	je     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001868f:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c0018694:	80 fa 3c             	cmp    dl,0x3c
c0018697:	0f 84 96 00 00 00    	je     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001869d:	b8 c0 cd 02 c0       	mov    eax,0xc002cdc0
c00186a2:	80 fa 3d             	cmp    dl,0x3d
c00186a5:	0f 84 88 00 00 00    	je     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186ab:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c00186b0:	80 fa 3e             	cmp    dl,0x3e
c00186b3:	74 7e                	je     c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186b5:	8d 42 bb             	lea    eax,[edx-0x45]
c00186b8:	3c 01                	cmp    al,0x1
c00186ba:	76 72                	jbe    c001872e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00186bc:	80 fa 3f             	cmp    dl,0x3f
c00186bf:	74 6d                	je     c001872e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00186c1:	80 fa 4a             	cmp    dl,0x4a
c00186c4:	74 0a                	je     c00186d0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00186c6:	b8 01 b5 02 c0       	mov    eax,0xc002b501
c00186cb:	80 fa 4d             	cmp    dl,0x4d
c00186ce:	75 63                	jne    c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186d0:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c00186d5:	c3                   	ret    
c00186d6:	b8 01 b5 02 c0       	mov    eax,0xc002b501
c00186db:	80 f9 0b             	cmp    cl,0xb
c00186de:	75 0a                	jne    c00186ea <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00186e0:	fe ca                	dec    dl
c00186e2:	75 4f                	jne    c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186e4:	b8 d0 cd 02 c0       	mov    eax,0xc002cdd0
c00186e9:	c3                   	ret    
c00186ea:	80 f9 0f             	cmp    cl,0xf
c00186ed:	75 44                	jne    c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186ef:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c00186f4:	80 fa 02             	cmp    dl,0x2
c00186f7:	76 3a                	jbe    c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186f9:	8d 42 fd             	lea    eax,[edx-0x3]
c00186fc:	3c 01                	cmp    al,0x1
c00186fe:	76 0a                	jbe    c001870a <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018700:	b8 01 b5 02 c0       	mov    eax,0xc002b501
c0018705:	80 fa 06             	cmp    dl,0x6
c0018708:	75 29                	jne    c0018733 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001870a:	b8 f0 cd 02 c0       	mov    eax,0xc002cdf0
c001870f:	c3                   	ret    
c0018710:	b8 d0 cc 02 c0       	mov    eax,0xc002ccd0
c0018715:	c3                   	ret    
c0018716:	b8 00 cd 02 c0       	mov    eax,0xc002cd00
c001871b:	c3                   	ret    
c001871c:	b8 20 cd 02 c0       	mov    eax,0xc002cd20
c0018721:	c3                   	ret    
c0018722:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c0018727:	c3                   	ret    
c0018728:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c001872d:	c3                   	ret    
c001872e:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c0018733:	c3                   	ret    

c0018734 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018734:	60                   	pusha  
c0018735:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001873d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018741:	9c                   	pushf  
c0018742:	fa                   	cli    
c0018743:	0f 09                	wbinvd 
c0018745:	0f 30                	wrmsr  
c0018747:	9d                   	popf   
c0018748:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001874c:	89 02                	mov    DWORD PTR [edx],eax
c001874e:	61                   	popa   
c001874f:	c3                   	ret    

c0018750 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018750:	60                   	pusha  
c0018751:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018755:	9c                   	pushf  
c0018756:	fa                   	cli    
c0018757:	0f 09                	wbinvd 
c0018759:	31 c0                	xor    eax,eax
c001875b:	31 d2                	xor    edx,edx
c001875d:	0f 32                	rdmsr  
c001875f:	9d                   	popf   
c0018760:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018764:	89 02                	mov    DWORD PTR [edx],eax
c0018766:	61                   	popa   
c0018767:	c3                   	ret    

c0018768 <CPU::AMD_K6_writeback(int, int, int)>:
c0018768:	56                   	push   esi
c0018769:	53                   	push   ebx
c001876a:	83 ec 10             	sub    esp,0x10
c001876d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018771:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018776:	75 5d                	jne    c00187d5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018778:	83 f8 08             	cmp    eax,0x8
c001877b:	75 09                	jne    c0018786 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001877d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018782:	7e 13                	jle    c0018797 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018784:	eb 30                	jmp    c00187b6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018786:	83 f8 06             	cmp    eax,0x6
c0018789:	7c 4a                	jl     c00187d5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001878b:	83 f8 07             	cmp    eax,0x7
c001878e:	7e 07                	jle    c0018797 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018790:	83 f8 09             	cmp    eax,0x9
c0018793:	74 21                	je     c00187b6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018795:	eb 3e                	jmp    c00187d5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018797:	89 e6                	mov    esi,esp
c0018799:	8b 1d 28 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da28
c001879f:	56                   	push   esi
c00187a0:	c1 eb 15             	shr    ebx,0x15
c00187a3:	68 82 00 00 c0       	push   0xc0000082
c00187a8:	83 e3 7e             	and    ebx,0x7e
c00187ab:	e8 a0 ff ff ff       	call   c0018750 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00187b0:	56                   	push   esi
c00187b1:	6a 00                	push   0x0
c00187b3:	53                   	push   ebx
c00187b4:	eb 12                	jmp    c00187c8 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00187b6:	89 e3                	mov    ebx,esp
c00187b8:	53                   	push   ebx
c00187b9:	68 82 00 00 c0       	push   0xc0000082
c00187be:	e8 8d ff ff ff       	call   c0018750 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00187c3:	53                   	push   ebx
c00187c4:	6a 00                	push   0x0
c00187c6:	6a 00                	push   0x0
c00187c8:	68 82 00 00 c0       	push   0xc0000082
c00187cd:	e8 62 ff ff ff       	call   c0018734 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00187d2:	83 c4 18             	add    esp,0x18
c00187d5:	83 c4 10             	add    esp,0x10
c00187d8:	5b                   	pop    ebx
c00187d9:	5e                   	pop    esi
c00187da:	c3                   	ret    
c00187db:	90                   	nop

c00187dc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00187dc:	55                   	push   ebp
c00187dd:	57                   	push   edi
c00187de:	56                   	push   esi
c00187df:	53                   	push   ebx
c00187e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187e4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00187e8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00187ec:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00187f0:	39 05 00 cf 02 c0    	cmp    DWORD PTR ds:0xc002cf00,eax
c00187f6:	75 23                	jne    c001881b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00187f8:	a1 0c 05 03 c0       	mov    eax,ds:0xc003050c
c00187fd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018801:	89 06                	mov    DWORD PTR [esi],eax
c0018803:	a1 08 05 03 c0       	mov    eax,ds:0xc0030508
c0018808:	89 07                	mov    DWORD PTR [edi],eax
c001880a:	a1 04 05 03 c0       	mov    eax,ds:0xc0030504
c001880f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018812:	a1 00 05 03 c0       	mov    eax,ds:0xc0030500
c0018817:	89 02                	mov    DWORD PTR [edx],eax
c0018819:	eb 3f                	jmp    c001885a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001881b:	31 c9                	xor    ecx,ecx
c001881d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018821:	0f a2                	cpuid  
c0018823:	89 06                	mov    DWORD PTR [esi],eax
c0018825:	89 1f                	mov    DWORD PTR [edi],ebx
c0018827:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001882b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001882e:	89 10                	mov    DWORD PTR [eax],edx
c0018830:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018834:	a3 00 cf 02 c0       	mov    ds:0xc002cf00,eax
c0018839:	8b 06                	mov    eax,DWORD PTR [esi]
c001883b:	a3 0c 05 03 c0       	mov    ds:0xc003050c,eax
c0018840:	8b 07                	mov    eax,DWORD PTR [edi]
c0018842:	a3 08 05 03 c0       	mov    ds:0xc0030508,eax
c0018847:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001884a:	a3 04 05 03 c0       	mov    ds:0xc0030504,eax
c001884f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018853:	8b 00                	mov    eax,DWORD PTR [eax]
c0018855:	a3 00 05 03 c0       	mov    ds:0xc0030500,eax
c001885a:	5b                   	pop    ebx
c001885b:	5e                   	pop    esi
c001885c:	5f                   	pop    edi
c001885d:	5d                   	pop    ebp
c001885e:	c3                   	ret    
c001885f:	90                   	nop

c0018860 <CPU::cpuidCheckEDX(unsigned int)>:
c0018860:	83 ec 10             	sub    esp,0x10
c0018863:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018867:	50                   	push   eax
c0018868:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001886c:	50                   	push   eax
c001886d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018871:	50                   	push   eax
c0018872:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018876:	50                   	push   eax
c0018877:	6a 01                	push   0x1
c0018879:	e8 5e ff ff ff       	call   c00187dc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001887e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018882:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018886:	0f 95 c0             	setne  al
c0018889:	83 c4 24             	add    esp,0x24
c001888c:	c3                   	ret    
c001888d:	90                   	nop

c001888e <CPU::cpuidCheckECX(unsigned int)>:
c001888e:	83 ec 10             	sub    esp,0x10
c0018891:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018895:	50                   	push   eax
c0018896:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001889a:	50                   	push   eax
c001889b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001889f:	50                   	push   eax
c00188a0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188a4:	50                   	push   eax
c00188a5:	6a 01                	push   0x1
c00188a7:	e8 30 ff ff ff       	call   c00187dc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188b0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00188b4:	0f 95 c0             	setne  al
c00188b7:	83 c4 24             	add    esp,0x24
c00188ba:	c3                   	ret    
c00188bb:	90                   	nop

c00188bc <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00188bc:	83 ec 10             	sub    esp,0x10
c00188bf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188c3:	50                   	push   eax
c00188c4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188c8:	50                   	push   eax
c00188c9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188cd:	50                   	push   eax
c00188ce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188d2:	50                   	push   eax
c00188d3:	6a 07                	push   0x7
c00188d5:	e8 02 ff ff ff       	call   c00187dc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188de:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00188e2:	0f 95 c0             	setne  al
c00188e5:	83 c4 24             	add    esp,0x24
c00188e8:	c3                   	ret    
c00188e9:	90                   	nop

c00188ea <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00188ea:	83 ec 10             	sub    esp,0x10
c00188ed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188f1:	50                   	push   eax
c00188f2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188f6:	50                   	push   eax
c00188f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188fb:	50                   	push   eax
c00188fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018900:	50                   	push   eax
c0018901:	6a 07                	push   0x7
c0018903:	e8 d4 fe ff ff       	call   c00187dc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018908:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001890c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018910:	0f 95 c0             	setne  al
c0018913:	83 c4 24             	add    esp,0x24
c0018916:	c3                   	ret    
c0018917:	90                   	nop

c0018918 <CPU::CPU()>:
c0018918:	83 ec 0c             	sub    esp,0xc
c001891b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001891f:	83 ec 08             	sub    esp,0x8
c0018922:	68 01 b5 02 c0       	push   0xc002b501
c0018927:	50                   	push   eax
c0018928:	e8 13 b4 ff ff       	call   c0013d40 <Device::Device(char const*)>
c001892d:	83 c4 10             	add    esp,0x10
c0018930:	ba d8 b5 02 c0       	mov    edx,0xc002b5d8
c0018935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018939:	89 10                	mov    DWORD PTR [eax],edx
c001893b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001893f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001894d:	05 78 01 00 00       	add    eax,0x178
c0018952:	83 ec 0c             	sub    esp,0xc
c0018955:	50                   	push   eax
c0018956:	e8 71 64 ff ff       	call   c000edcc <GDT::GDT()>
c001895b:	83 c4 10             	add    esp,0x10
c001895e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018962:	05 7c 09 00 00       	add    eax,0x97c
c0018967:	83 ec 0c             	sub    esp,0xc
c001896a:	50                   	push   eax
c001896b:	e8 ac 66 ff ff       	call   c000f01c <IDT::IDT()>
c0018970:	83 c4 10             	add    esp,0x10
c0018973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018977:	05 7c 11 00 00       	add    eax,0x117c
c001897c:	83 ec 0c             	sub    esp,0xc
c001897f:	50                   	push   eax
c0018980:	e8 19 82 ff ff       	call   c0010b9e <TSS::TSS()>
c0018985:	83 c4 10             	add    esp,0x10
c0018988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001898c:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018997:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00189a1:	90                   	nop
c00189a2:	83 c4 0c             	add    esp,0xc
c00189a5:	c3                   	ret    

c00189a6 <CPU::displayFeatures()>:
c00189a6:	c3                   	ret    
c00189a7:	90                   	nop

c00189a8 <CPU::detectFeatures()>:
c00189a8:	55                   	push   ebp
c00189a9:	57                   	push   edi
c00189aa:	56                   	push   esi
c00189ab:	53                   	push   ebx
c00189ac:	83 ec 50             	sub    esp,0x50
c00189af:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00189b3:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00189bd:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00189c4:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00189ca:	6a 0d                	push   0xd
c00189cc:	6a 00                	push   0x0
c00189ce:	55                   	push   ebp
c00189cf:	e8 7c 7d fe ff       	call   c0000750 <memset>
c00189d4:	83 c4 10             	add    esp,0x10
c00189d7:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c00189dc:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00189e3:	0f 84 22 09 00 00    	je     c001930b <CPU::detectFeatures()+0x963>
c00189e9:	83 ec 0c             	sub    esp,0xc
c00189ec:	89 ef                	mov    edi,ebp
c00189ee:	6a 10                	push   0x10
c00189f0:	e8 6b fe ff ff       	call   c0018860 <CPU::cpuidCheckEDX(unsigned int)>
c00189f5:	83 e0 01             	and    eax,0x1
c00189f8:	8d 14 00             	lea    edx,[eax+eax*1]
c00189fb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a01:	83 e0 fd             	and    eax,0xfffffffd
c0018a04:	09 d0                	or     eax,edx
c0018a06:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a0c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018a13:	e8 48 fe ff ff       	call   c0018860 <CPU::cpuidCheckEDX(unsigned int)>
c0018a18:	83 e0 01             	and    eax,0x1
c0018a1b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018a22:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a28:	83 e0 fb             	and    eax,0xfffffffb
c0018a2b:	09 d0                	or     eax,edx
c0018a2d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a33:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018a3a:	e8 21 fe ff ff       	call   c0018860 <CPU::cpuidCheckEDX(unsigned int)>
c0018a3f:	83 e0 01             	and    eax,0x1
c0018a42:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018a49:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a4f:	83 e0 f7             	and    eax,0xfffffff7
c0018a52:	09 d0                	or     eax,edx
c0018a54:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a5a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018a61:	e8 fa fd ff ff       	call   c0018860 <CPU::cpuidCheckEDX(unsigned int)>
c0018a66:	83 e0 01             	and    eax,0x1
c0018a69:	c1 e0 04             	shl    eax,0x4
c0018a6c:	88 c2                	mov    dl,al
c0018a6e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a74:	83 e0 ef             	and    eax,0xffffffef
c0018a77:	09 d0                	or     eax,edx
c0018a79:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a7f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018a86:	e8 d5 fd ff ff       	call   c0018860 <CPU::cpuidCheckEDX(unsigned int)>
c0018a8b:	83 e0 01             	and    eax,0x1
c0018a8e:	c1 e0 05             	shl    eax,0x5
c0018a91:	88 c2                	mov    dl,al
c0018a93:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a99:	83 e0 df             	and    eax,0xffffffdf
c0018a9c:	09 d0                	or     eax,edx
c0018a9e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018aa4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018aab:	e8 b0 fd ff ff       	call   c0018860 <CPU::cpuidCheckEDX(unsigned int)>
c0018ab0:	83 e0 01             	and    eax,0x1
c0018ab3:	8d 14 00             	lea    edx,[eax+eax*1]
c0018ab6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018abc:	83 e0 fd             	and    eax,0xfffffffd
c0018abf:	09 d0                	or     eax,edx
c0018ac1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018ac7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018ace:	e8 8d fd ff ff       	call   c0018860 <CPU::cpuidCheckEDX(unsigned int)>
c0018ad3:	83 e0 01             	and    eax,0x1
c0018ad6:	c1 e0 06             	shl    eax,0x6
c0018ad9:	88 c2                	mov    dl,al
c0018adb:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018ae1:	83 e0 bf             	and    eax,0xffffffbf
c0018ae4:	09 d0                	or     eax,edx
c0018ae6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018aec:	58                   	pop    eax
c0018aed:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018af1:	50                   	push   eax
c0018af2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018af6:	50                   	push   eax
c0018af7:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018afb:	56                   	push   esi
c0018afc:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018b00:	50                   	push   eax
c0018b01:	6a 00                	push   0x0
c0018b03:	e8 d4 fc ff ff       	call   c00187dc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b08:	b8 04 00 00 00       	mov    eax,0x4
c0018b0d:	89 c1                	mov    ecx,eax
c0018b0f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018b11:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018b17:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018b1b:	89 c1                	mov    ecx,eax
c0018b1d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018b1f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018b25:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018b29:	89 c1                	mov    ecx,eax
c0018b2b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018b2d:	83 c4 18             	add    esp,0x18
c0018b30:	68 ac b3 02 c0       	push   0xc002b3ac
c0018b35:	55                   	push   ebp
c0018b36:	e8 5d 7d fe ff       	call   c0000898 <strcmp>
c0018b3b:	83 c4 10             	add    esp,0x10
c0018b3e:	85 c0                	test   eax,eax
c0018b40:	75 0f                	jne    c0018b51 <CPU::detectFeatures()+0x1a9>
c0018b42:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018b4c:	e9 22 02 00 00       	jmp    c0018d73 <CPU::detectFeatures()+0x3cb>
c0018b51:	50                   	push   eax
c0018b52:	50                   	push   eax
c0018b53:	68 b9 b3 02 c0       	push   0xc002b3b9
c0018b58:	55                   	push   ebp
c0018b59:	e8 3a 7d fe ff       	call   c0000898 <strcmp>
c0018b5e:	83 c4 10             	add    esp,0x10
c0018b61:	85 c0                	test   eax,eax
c0018b63:	74 dd                	je     c0018b42 <CPU::detectFeatures()+0x19a>
c0018b65:	50                   	push   eax
c0018b66:	50                   	push   eax
c0018b67:	68 c6 b3 02 c0       	push   0xc002b3c6
c0018b6c:	55                   	push   ebp
c0018b6d:	e8 26 7d fe ff       	call   c0000898 <strcmp>
c0018b72:	83 c4 10             	add    esp,0x10
c0018b75:	85 c0                	test   eax,eax
c0018b77:	74 2a                	je     c0018ba3 <CPU::detectFeatures()+0x1fb>
c0018b79:	50                   	push   eax
c0018b7a:	50                   	push   eax
c0018b7b:	68 d3 b3 02 c0       	push   0xc002b3d3
c0018b80:	55                   	push   ebp
c0018b81:	e8 12 7d fe ff       	call   c0000898 <strcmp>
c0018b86:	83 c4 10             	add    esp,0x10
c0018b89:	85 c0                	test   eax,eax
c0018b8b:	74 16                	je     c0018ba3 <CPU::detectFeatures()+0x1fb>
c0018b8d:	50                   	push   eax
c0018b8e:	50                   	push   eax
c0018b8f:	68 e0 b3 02 c0       	push   0xc002b3e0
c0018b94:	55                   	push   ebp
c0018b95:	e8 fe 7c fe ff       	call   c0000898 <strcmp>
c0018b9a:	83 c4 10             	add    esp,0x10
c0018b9d:	85 c0                	test   eax,eax
c0018b9f:	74 48                	je     c0018be9 <CPU::detectFeatures()+0x241>
c0018ba1:	eb 0f                	jmp    c0018bb2 <CPU::detectFeatures()+0x20a>
c0018ba3:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018bad:	e9 c1 01 00 00       	jmp    c0018d73 <CPU::detectFeatures()+0x3cb>
c0018bb2:	50                   	push   eax
c0018bb3:	50                   	push   eax
c0018bb4:	68 ed b3 02 c0       	push   0xc002b3ed
c0018bb9:	55                   	push   ebp
c0018bba:	e8 d9 7c fe ff       	call   c0000898 <strcmp>
c0018bbf:	83 c4 10             	add    esp,0x10
c0018bc2:	85 c0                	test   eax,eax
c0018bc4:	74 23                	je     c0018be9 <CPU::detectFeatures()+0x241>
c0018bc6:	57                   	push   edi
c0018bc7:	57                   	push   edi
c0018bc8:	68 fa b3 02 c0       	push   0xc002b3fa
c0018bcd:	55                   	push   ebp
c0018bce:	e8 c5 7c fe ff       	call   c0000898 <strcmp>
c0018bd3:	83 c4 10             	add    esp,0x10
c0018bd6:	85 c0                	test   eax,eax
c0018bd8:	75 1e                	jne    c0018bf8 <CPU::detectFeatures()+0x250>
c0018bda:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018be4:	e9 8a 01 00 00       	jmp    c0018d73 <CPU::detectFeatures()+0x3cb>
c0018be9:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018bf3:	e9 7b 01 00 00       	jmp    c0018d73 <CPU::detectFeatures()+0x3cb>
c0018bf8:	56                   	push   esi
c0018bf9:	56                   	push   esi
c0018bfa:	68 07 b4 02 c0       	push   0xc002b407
c0018bff:	55                   	push   ebp
c0018c00:	e8 93 7c fe ff       	call   c0000898 <strcmp>
c0018c05:	83 c4 10             	add    esp,0x10
c0018c08:	85 c0                	test   eax,eax
c0018c0a:	75 0f                	jne    c0018c1b <CPU::detectFeatures()+0x273>
c0018c0c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018c16:	e9 58 01 00 00       	jmp    c0018d73 <CPU::detectFeatures()+0x3cb>
c0018c1b:	51                   	push   ecx
c0018c1c:	51                   	push   ecx
c0018c1d:	68 c6 b3 02 c0       	push   0xc002b3c6
c0018c22:	55                   	push   ebp
c0018c23:	e8 70 7c fe ff       	call   c0000898 <strcmp>
c0018c28:	83 c4 10             	add    esp,0x10
c0018c2b:	85 c0                	test   eax,eax
c0018c2d:	75 0f                	jne    c0018c3e <CPU::detectFeatures()+0x296>
c0018c2f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018c39:	e9 35 01 00 00       	jmp    c0018d73 <CPU::detectFeatures()+0x3cb>
c0018c3e:	52                   	push   edx
c0018c3f:	52                   	push   edx
c0018c40:	68 14 b4 02 c0       	push   0xc002b414
c0018c45:	55                   	push   ebp
c0018c46:	e8 4d 7c fe ff       	call   c0000898 <strcmp>
c0018c4b:	83 c4 10             	add    esp,0x10
c0018c4e:	85 c0                	test   eax,eax
c0018c50:	75 0f                	jne    c0018c61 <CPU::detectFeatures()+0x2b9>
c0018c52:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018c5c:	e9 12 01 00 00       	jmp    c0018d73 <CPU::detectFeatures()+0x3cb>
c0018c61:	50                   	push   eax
c0018c62:	50                   	push   eax
c0018c63:	68 21 b4 02 c0       	push   0xc002b421
c0018c68:	55                   	push   ebp
c0018c69:	e8 2a 7c fe ff       	call   c0000898 <strcmp>
c0018c6e:	83 c4 10             	add    esp,0x10
c0018c71:	85 c0                	test   eax,eax
c0018c73:	75 0f                	jne    c0018c84 <CPU::detectFeatures()+0x2dc>
c0018c75:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018c7f:	e9 ef 00 00 00       	jmp    c0018d73 <CPU::detectFeatures()+0x3cb>
c0018c84:	50                   	push   eax
c0018c85:	50                   	push   eax
c0018c86:	68 2e b4 02 c0       	push   0xc002b42e
c0018c8b:	55                   	push   ebp
c0018c8c:	e8 07 7c fe ff       	call   c0000898 <strcmp>
c0018c91:	83 c4 10             	add    esp,0x10
c0018c94:	85 c0                	test   eax,eax
c0018c96:	75 0f                	jne    c0018ca7 <CPU::detectFeatures()+0x2ff>
c0018c98:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018ca2:	e9 cc 00 00 00       	jmp    c0018d73 <CPU::detectFeatures()+0x3cb>
c0018ca7:	50                   	push   eax
c0018ca8:	50                   	push   eax
c0018ca9:	68 3b b4 02 c0       	push   0xc002b43b
c0018cae:	55                   	push   ebp
c0018caf:	e8 e4 7b fe ff       	call   c0000898 <strcmp>
c0018cb4:	83 c4 10             	add    esp,0x10
c0018cb7:	85 c0                	test   eax,eax
c0018cb9:	75 0f                	jne    c0018cca <CPU::detectFeatures()+0x322>
c0018cbb:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018cc5:	e9 a9 00 00 00       	jmp    c0018d73 <CPU::detectFeatures()+0x3cb>
c0018cca:	50                   	push   eax
c0018ccb:	50                   	push   eax
c0018ccc:	68 48 b4 02 c0       	push   0xc002b448
c0018cd1:	55                   	push   ebp
c0018cd2:	e8 c1 7b fe ff       	call   c0000898 <strcmp>
c0018cd7:	83 c4 10             	add    esp,0x10
c0018cda:	85 c0                	test   eax,eax
c0018cdc:	75 0f                	jne    c0018ced <CPU::detectFeatures()+0x345>
c0018cde:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018ce8:	e9 86 00 00 00       	jmp    c0018d73 <CPU::detectFeatures()+0x3cb>
c0018ced:	50                   	push   eax
c0018cee:	50                   	push   eax
c0018cef:	68 55 b4 02 c0       	push   0xc002b455
c0018cf4:	55                   	push   ebp
c0018cf5:	e8 9e 7b fe ff       	call   c0000898 <strcmp>
c0018cfa:	83 c4 10             	add    esp,0x10
c0018cfd:	85 c0                	test   eax,eax
c0018cff:	75 0c                	jne    c0018d0d <CPU::detectFeatures()+0x365>
c0018d01:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018d0b:	eb 66                	jmp    c0018d73 <CPU::detectFeatures()+0x3cb>
c0018d0d:	50                   	push   eax
c0018d0e:	50                   	push   eax
c0018d0f:	68 62 b4 02 c0       	push   0xc002b462
c0018d14:	55                   	push   ebp
c0018d15:	e8 7e 7b fe ff       	call   c0000898 <strcmp>
c0018d1a:	83 c4 10             	add    esp,0x10
c0018d1d:	85 c0                	test   eax,eax
c0018d1f:	75 0c                	jne    c0018d2d <CPU::detectFeatures()+0x385>
c0018d21:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018d2b:	eb 46                	jmp    c0018d73 <CPU::detectFeatures()+0x3cb>
c0018d2d:	57                   	push   edi
c0018d2e:	57                   	push   edi
c0018d2f:	68 6f b4 02 c0       	push   0xc002b46f
c0018d34:	55                   	push   ebp
c0018d35:	e8 5e 7b fe ff       	call   c0000898 <strcmp>
c0018d3a:	83 c4 10             	add    esp,0x10
c0018d3d:	85 c0                	test   eax,eax
c0018d3f:	74 e0                	je     c0018d21 <CPU::detectFeatures()+0x379>
c0018d41:	56                   	push   esi
c0018d42:	56                   	push   esi
c0018d43:	68 7c b4 02 c0       	push   0xc002b47c
c0018d48:	55                   	push   ebp
c0018d49:	e8 4a 7b fe ff       	call   c0000898 <strcmp>
c0018d4e:	83 c4 10             	add    esp,0x10
c0018d51:	85 c0                	test   eax,eax
c0018d53:	74 cc                	je     c0018d21 <CPU::detectFeatures()+0x379>
c0018d55:	51                   	push   ecx
c0018d56:	51                   	push   ecx
c0018d57:	68 89 b4 02 c0       	push   0xc002b489
c0018d5c:	55                   	push   ebp
c0018d5d:	e8 36 7b fe ff       	call   c0000898 <strcmp>
c0018d62:	83 c4 10             	add    esp,0x10
c0018d65:	85 c0                	test   eax,eax
c0018d67:	74 b8                	je     c0018d21 <CPU::detectFeatures()+0x379>
c0018d69:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018d73:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018d78:	0f 86 be 00 00 00    	jbe    c0018e3c <CPU::detectFeatures()+0x494>
c0018d7e:	83 ec 0c             	sub    esp,0xc
c0018d81:	68 80 00 00 00       	push   0x80
c0018d86:	e8 31 fb ff ff       	call   c00188bc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d8b:	83 e0 01             	and    eax,0x1
c0018d8e:	c1 e0 06             	shl    eax,0x6
c0018d91:	88 c2                	mov    dl,al
c0018d93:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d99:	83 e0 bf             	and    eax,0xffffffbf
c0018d9c:	09 d0                	or     eax,edx
c0018d9e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018da4:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018dab:	e8 0c fb ff ff       	call   c00188bc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018db0:	83 e0 01             	and    eax,0x1
c0018db3:	c1 e0 04             	shl    eax,0x4
c0018db6:	88 c2                	mov    dl,al
c0018db8:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018dbe:	83 e0 ef             	and    eax,0xffffffef
c0018dc1:	09 d0                	or     eax,edx
c0018dc3:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018dc9:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018dd0:	e8 e7 fa ff ff       	call   c00188bc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018dd5:	c1 e0 07             	shl    eax,0x7
c0018dd8:	88 c2                	mov    dl,al
c0018dda:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018de0:	83 e0 7f             	and    eax,0x7f
c0018de3:	09 d0                	or     eax,edx
c0018de5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018deb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018df2:	e8 f3 fa ff ff       	call   c00188ea <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018df7:	83 e0 01             	and    eax,0x1
c0018dfa:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018e01:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018e07:	83 e0 f7             	and    eax,0xfffffff7
c0018e0a:	09 d0                	or     eax,edx
c0018e0c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018e12:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018e19:	e8 cc fa ff ff       	call   c00188ea <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018e1e:	83 c4 10             	add    esp,0x10
c0018e21:	83 e0 01             	and    eax,0x1
c0018e24:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018e2b:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018e31:	83 e0 fb             	and    eax,0xfffffffb
c0018e34:	09 d0                	or     eax,edx
c0018e36:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018e3c:	83 ec 0c             	sub    esp,0xc
c0018e3f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e43:	50                   	push   eax
c0018e44:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e48:	50                   	push   eax
c0018e49:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018e4d:	56                   	push   esi
c0018e4e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e52:	50                   	push   eax
c0018e53:	6a 01                	push   0x1
c0018e55:	e8 82 f9 ff ff       	call   c00187dc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e5a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018e5e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018e64:	88 ca                	mov    dl,cl
c0018e66:	83 e0 f0             	and    eax,0xfffffff0
c0018e69:	83 e2 0f             	and    edx,0xf
c0018e6c:	09 d0                	or     eax,edx
c0018e6e:	88 ca                	mov    dl,cl
c0018e70:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018e76:	c0 ea 04             	shr    dl,0x4
c0018e79:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018e7d:	0f b6 c2             	movzx  eax,dl
c0018e80:	83 c4 20             	add    esp,0x20
c0018e83:	c1 e0 06             	shl    eax,0x6
c0018e86:	89 c7                	mov    edi,eax
c0018e88:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e8e:	66 25 3f c0          	and    ax,0xc03f
c0018e92:	09 f8                	or     eax,edi
c0018e94:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018e9b:	89 c8                	mov    eax,ecx
c0018e9d:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018ea4:	c1 e8 08             	shr    eax,0x8
c0018ea7:	83 e5 3f             	and    ebp,0x3f
c0018eaa:	83 e0 0f             	and    eax,0xf
c0018ead:	89 c7                	mov    edi,eax
c0018eaf:	c1 e7 06             	shl    edi,0x6
c0018eb2:	09 ef                	or     edi,ebp
c0018eb4:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018ebb:	89 fa                	mov    edx,edi
c0018ebd:	83 e5 c0             	and    ebp,0xffffffc0
c0018ec0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018ec6:	88 c2                	mov    dl,al
c0018ec8:	c0 ea 02             	shr    dl,0x2
c0018ecb:	89 d7                	mov    edi,edx
c0018ecd:	09 ef                	or     edi,ebp
c0018ecf:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018ed5:	89 fa                	mov    edx,edi
c0018ed7:	83 e5 cf             	and    ebp,0xffffffcf
c0018eda:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018ee0:	89 cf                	mov    edi,ecx
c0018ee2:	c1 ef 0c             	shr    edi,0xc
c0018ee5:	83 e7 03             	and    edi,0x3
c0018ee8:	c1 e7 04             	shl    edi,0x4
c0018eeb:	09 ef                	or     edi,ebp
c0018eed:	3c 06                	cmp    al,0x6
c0018eef:	89 fa                	mov    edx,edi
c0018ef1:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018ef7:	74 04                	je     c0018efd <CPU::detectFeatures()+0x555>
c0018ef9:	3c 0f                	cmp    al,0xf
c0018efb:	75 5c                	jne    c0018f59 <CPU::detectFeatures()+0x5b1>
c0018efd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018f01:	89 cf                	mov    edi,ecx
c0018f03:	c1 ef 10             	shr    edi,0x10
c0018f06:	c1 e7 04             	shl    edi,0x4
c0018f09:	09 fa                	or     edx,edi
c0018f0b:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0018f11:	0f b6 d2             	movzx  edx,dl
c0018f14:	66 81 e7 3f c0       	and    di,0xc03f
c0018f19:	c1 e2 06             	shl    edx,0x6
c0018f1c:	09 fa                	or     edx,edi
c0018f1e:	3c 0f                	cmp    al,0xf
c0018f20:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018f27:	75 30                	jne    c0018f59 <CPU::detectFeatures()+0x5b1>
c0018f29:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018f2f:	c1 e9 14             	shr    ecx,0x14
c0018f32:	83 e0 3f             	and    eax,0x3f
c0018f35:	83 c1 0f             	add    ecx,0xf
c0018f38:	88 ca                	mov    dl,cl
c0018f3a:	c0 e9 02             	shr    cl,0x2
c0018f3d:	c1 e2 06             	shl    edx,0x6
c0018f40:	09 d0                	or     eax,edx
c0018f42:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018f48:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018f4e:	83 e0 c0             	and    eax,0xffffffc0
c0018f51:	09 c1                	or     ecx,eax
c0018f53:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018f59:	83 ec 0c             	sub    esp,0xc
c0018f5c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018f63:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f67:	50                   	push   eax
c0018f68:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018f6c:	55                   	push   ebp
c0018f6d:	56                   	push   esi
c0018f6e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018f72:	57                   	push   edi
c0018f73:	68 00 00 00 80       	push   0x80000000
c0018f78:	e8 5f f8 ff ff       	call   c00187dc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f7d:	83 c4 20             	add    esp,0x20
c0018f80:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018f88:	76 22                	jbe    c0018fac <CPU::detectFeatures()+0x604>
c0018f8a:	83 ec 0c             	sub    esp,0xc
c0018f8d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f91:	50                   	push   eax
c0018f92:	55                   	push   ebp
c0018f93:	56                   	push   esi
c0018f94:	57                   	push   edi
c0018f95:	68 01 00 00 80       	push   0x80000001
c0018f9a:	e8 3d f8 ff ff       	call   c00187dc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f9f:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018fa9:	83 c4 20             	add    esp,0x20
c0018fac:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018fb2:	83 f8 01             	cmp    eax,0x1
c0018fb5:	75 6f                	jne    c0019026 <CPU::detectFeatures()+0x67e>
c0018fb7:	51                   	push   ecx
c0018fb8:	51                   	push   ecx
c0018fb9:	68 95 b4 02 c0       	push   0xc002b495
c0018fbe:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018fc2:	56                   	push   esi
c0018fc3:	e8 44 78 fe ff       	call   c000080c <strcpy>
c0018fc8:	5f                   	pop    edi
c0018fc9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018fcf:	5d                   	pop    ebp
c0018fd0:	66 c1 e8 06          	shr    ax,0x6
c0018fd4:	0f b6 c0             	movzx  eax,al
c0018fd7:	50                   	push   eax
c0018fd8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018fde:	c1 e8 0e             	shr    eax,0xe
c0018fe1:	0f b6 c0             	movzx  eax,al
c0018fe4:	50                   	push   eax
c0018fe5:	e8 9c f4 ff ff       	call   c0018486 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018fea:	5a                   	pop    edx
c0018feb:	59                   	pop    ecx
c0018fec:	50                   	push   eax
c0018fed:	56                   	push   esi
c0018fee:	e8 59 79 fe ff       	call   c000094c <strcat>
c0018ff3:	5f                   	pop    edi
c0018ff4:	5d                   	pop    ebp
c0018ff5:	56                   	push   esi
c0018ff6:	53                   	push   ebx
c0018ff7:	e8 36 ad ff ff       	call   c0013d32 <Device::setName(char const*)>
c0018ffc:	58                   	pop    eax
c0018ffd:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019003:	5a                   	pop    edx
c0019004:	68 9c b4 02 c0       	push   0xc002b49c
c0019009:	50                   	push   eax
c001900a:	e8 89 78 fe ff       	call   c0000898 <strcmp>
c001900f:	83 c4 10             	add    esp,0x10
c0019012:	85 c0                	test   eax,eax
c0019014:	0f 85 71 03 00 00    	jne    c001938b <CPU::detectFeatures()+0x9e3>
c001901a:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019021:	e9 65 03 00 00       	jmp    c001938b <CPU::detectFeatures()+0x9e3>
c0019026:	83 f8 02             	cmp    eax,0x2
c0019029:	0f 85 b5 00 00 00    	jne    c00190e4 <CPU::detectFeatures()+0x73c>
c001902f:	57                   	push   edi
c0019030:	57                   	push   edi
c0019031:	68 ae b4 02 c0       	push   0xc002b4ae
c0019036:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001903a:	56                   	push   esi
c001903b:	e8 cc 77 fe ff       	call   c000080c <strcpy>
c0019040:	5d                   	pop    ebp
c0019041:	58                   	pop    eax
c0019042:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019048:	66 c1 e8 06          	shr    ax,0x6
c001904c:	0f b6 c0             	movzx  eax,al
c001904f:	50                   	push   eax
c0019050:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019056:	c1 e8 0e             	shr    eax,0xe
c0019059:	0f b6 c0             	movzx  eax,al
c001905c:	50                   	push   eax
c001905d:	e8 90 f2 ff ff       	call   c00182f2 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019062:	5a                   	pop    edx
c0019063:	59                   	pop    ecx
c0019064:	50                   	push   eax
c0019065:	56                   	push   esi
c0019066:	e8 e1 78 fe ff       	call   c000094c <strcat>
c001906b:	5f                   	pop    edi
c001906c:	5d                   	pop    ebp
c001906d:	56                   	push   esi
c001906e:	53                   	push   ebx
c001906f:	e8 be ac ff ff       	call   c0013d32 <Device::setName(char const*)>
c0019074:	58                   	pop    eax
c0019075:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001907b:	5a                   	pop    edx
c001907c:	68 b3 b4 02 c0       	push   0xc002b4b3
c0019081:	50                   	push   eax
c0019082:	e8 11 78 fe ff       	call   c0000898 <strcmp>
c0019087:	83 c4 10             	add    esp,0x10
c001908a:	85 c0                	test   eax,eax
c001908c:	75 20                	jne    c00190ae <CPU::detectFeatures()+0x706>
c001908e:	8b 15 e8 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9e8
c0019094:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001909a:	a8 01                	test   al,0x1
c001909c:	74 10                	je     c00190ae <CPU::detectFeatures()+0x706>
c001909e:	83 e0 fe             	and    eax,0xfffffffe
c00190a1:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00190a7:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00190ae:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190b4:	c1 e8 0e             	shr    eax,0xe
c00190b7:	3c 05                	cmp    al,0x5
c00190b9:	0f 85 cc 02 00 00    	jne    c001938b <CPU::detectFeatures()+0x9e3>
c00190bf:	56                   	push   esi
c00190c0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00190c6:	83 e0 0f             	and    eax,0xf
c00190c9:	50                   	push   eax
c00190ca:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190d0:	66 c1 e8 06          	shr    ax,0x6
c00190d4:	0f b6 c0             	movzx  eax,al
c00190d7:	50                   	push   eax
c00190d8:	6a 05                	push   0x5
c00190da:	e8 89 f6 ff ff       	call   c0018768 <CPU::AMD_K6_writeback(int, int, int)>
c00190df:	e9 1f 02 00 00       	jmp    c0019303 <CPU::detectFeatures()+0x95b>
c00190e4:	8d 50 fd             	lea    edx,[eax-0x3]
c00190e7:	83 fa 01             	cmp    edx,0x1
c00190ea:	76 09                	jbe    c00190f5 <CPU::detectFeatures()+0x74d>
c00190ec:	83 f8 06             	cmp    eax,0x6
c00190ef:	0f 85 91 01 00 00    	jne    c0019286 <CPU::detectFeatures()+0x8de>
c00190f5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00190fb:	c1 ea 0e             	shr    edx,0xe
c00190fe:	80 fa 05             	cmp    dl,0x5
c0019101:	75 7b                	jne    c001917e <CPU::detectFeatures()+0x7d6>
c0019103:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019109:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001910e:	66 81 fa 00 01       	cmp    dx,0x100
c0019113:	75 0c                	jne    c0019121 <CPU::detectFeatures()+0x779>
c0019115:	51                   	push   ecx
c0019116:	51                   	push   ecx
c0019117:	68 ba b4 02 c0       	push   0xc002b4ba
c001911c:	e9 dc 01 00 00       	jmp    c00192fd <CPU::detectFeatures()+0x955>
c0019121:	66 81 fa 00 02       	cmp    dx,0x200
c0019126:	75 0c                	jne    c0019134 <CPU::detectFeatures()+0x78c>
c0019128:	52                   	push   edx
c0019129:	52                   	push   edx
c001912a:	68 cd b4 02 c0       	push   0xc002b4cd
c001912f:	e9 c9 01 00 00       	jmp    c00192fd <CPU::detectFeatures()+0x955>
c0019134:	66 81 fa 40 02       	cmp    dx,0x240
c0019139:	75 0c                	jne    c0019147 <CPU::detectFeatures()+0x79f>
c001913b:	50                   	push   eax
c001913c:	50                   	push   eax
c001913d:	68 df b4 02 c0       	push   0xc002b4df
c0019142:	e9 b6 01 00 00       	jmp    c00192fd <CPU::detectFeatures()+0x955>
c0019147:	83 f8 06             	cmp    eax,0x6
c001914a:	75 0c                	jne    c0019158 <CPU::detectFeatures()+0x7b0>
c001914c:	50                   	push   eax
c001914d:	50                   	push   eax
c001914e:	68 f1 b4 02 c0       	push   0xc002b4f1
c0019153:	e9 a5 01 00 00       	jmp    c00192fd <CPU::detectFeatures()+0x955>
c0019158:	83 f8 04             	cmp    eax,0x4
c001915b:	75 0c                	jne    c0019169 <CPU::detectFeatures()+0x7c1>
c001915d:	50                   	push   eax
c001915e:	50                   	push   eax
c001915f:	68 fd b4 02 c0       	push   0xc002b4fd
c0019164:	e9 94 01 00 00       	jmp    c00192fd <CPU::detectFeatures()+0x955>
c0019169:	83 f8 03             	cmp    eax,0x3
c001916c:	0f 85 19 02 00 00    	jne    c001938b <CPU::detectFeatures()+0x9e3>
c0019172:	50                   	push   eax
c0019173:	50                   	push   eax
c0019174:	68 05 b5 02 c0       	push   0xc002b505
c0019179:	e9 7f 01 00 00       	jmp    c00192fd <CPU::detectFeatures()+0x955>
c001917e:	80 fa 06             	cmp    dl,0x6
c0019181:	0f 85 db 00 00 00    	jne    c0019262 <CPU::detectFeatures()+0x8ba>
c0019187:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001918d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019192:	66 81 fa 80 01       	cmp    dx,0x180
c0019197:	75 0c                	jne    c00191a5 <CPU::detectFeatures()+0x7fd>
c0019199:	50                   	push   eax
c001919a:	50                   	push   eax
c001919b:	68 10 b5 02 c0       	push   0xc002b510
c00191a0:	e9 58 01 00 00       	jmp    c00192fd <CPU::detectFeatures()+0x955>
c00191a5:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00191ab:	66 f7 c1 80 ff       	test   cx,0xff80
c00191b0:	75 0c                	jne    c00191be <CPU::detectFeatures()+0x816>
c00191b2:	50                   	push   eax
c00191b3:	50                   	push   eax
c00191b4:	68 20 b5 02 c0       	push   0xc002b520
c00191b9:	e9 3f 01 00 00       	jmp    c00192fd <CPU::detectFeatures()+0x955>
c00191be:	66 81 fa 40 02       	cmp    dx,0x240
c00191c3:	75 0c                	jne    c00191d1 <CPU::detectFeatures()+0x829>
c00191c5:	55                   	push   ebp
c00191c6:	55                   	push   ebp
c00191c7:	68 27 b5 02 c0       	push   0xc002b527
c00191cc:	e9 2c 01 00 00       	jmp    c00192fd <CPU::detectFeatures()+0x955>
c00191d1:	66 81 fa 80 02       	cmp    dx,0x280
c00191d6:	75 0c                	jne    c00191e4 <CPU::detectFeatures()+0x83c>
c00191d8:	57                   	push   edi
c00191d9:	57                   	push   edi
c00191da:	68 30 b5 02 c0       	push   0xc002b530
c00191df:	e9 19 01 00 00       	jmp    c00192fd <CPU::detectFeatures()+0x955>
c00191e4:	66 81 fa 40 03       	cmp    dx,0x340
c00191e9:	74 ed                	je     c00191d8 <CPU::detectFeatures()+0x830>
c00191eb:	66 81 fa c0 03       	cmp    dx,0x3c0
c00191f0:	75 0c                	jne    c00191fe <CPU::detectFeatures()+0x856>
c00191f2:	56                   	push   esi
c00191f3:	56                   	push   esi
c00191f4:	68 37 b5 02 c0       	push   0xc002b537
c00191f9:	e9 ff 00 00 00       	jmp    c00192fd <CPU::detectFeatures()+0x955>
c00191fe:	83 f8 06             	cmp    eax,0x6
c0019201:	0f 84 45 ff ff ff    	je     c001914c <CPU::detectFeatures()+0x7a4>
c0019207:	83 f8 04             	cmp    eax,0x4
c001920a:	0f 84 4d ff ff ff    	je     c001915d <CPU::detectFeatures()+0x7b5>
c0019210:	83 f8 03             	cmp    eax,0x3
c0019213:	0f 85 72 01 00 00    	jne    c001938b <CPU::detectFeatures()+0x9e3>
c0019219:	51                   	push   ecx
c001921a:	51                   	push   ecx
c001921b:	68 40 b5 02 c0       	push   0xc002b540
c0019220:	53                   	push   ebx
c0019221:	e8 0c ab ff ff       	call   c0013d32 <Device::setName(char const*)>
c0019226:	b1 c1                	mov    cl,0xc1
c0019228:	88 c8                	mov    al,cl
c001922a:	e6 22                	out    0x22,al
c001922c:	e4 23                	in     al,0x23
c001922e:	88 c2                	mov    dl,al
c0019230:	88 c8                	mov    al,cl
c0019232:	e6 22                	out    0x22,al
c0019234:	88 d0                	mov    al,dl
c0019236:	83 c8 10             	or     eax,0x10
c0019239:	e6 23                	out    0x23,al
c001923b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019242:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019245:	89 d0                	mov    eax,edx
c0019247:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001924d:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019251:	40                   	inc    eax
c0019252:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019258:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001925d:	e9 a1 00 00 00       	jmp    c0019303 <CPU::detectFeatures()+0x95b>
c0019262:	83 f8 06             	cmp    eax,0x6
c0019265:	0f 84 e1 fe ff ff    	je     c001914c <CPU::detectFeatures()+0x7a4>
c001926b:	83 f8 04             	cmp    eax,0x4
c001926e:	0f 84 e9 fe ff ff    	je     c001915d <CPU::detectFeatures()+0x7b5>
c0019274:	83 f8 03             	cmp    eax,0x3
c0019277:	0f 85 0e 01 00 00    	jne    c001938b <CPU::detectFeatures()+0x9e3>
c001927d:	52                   	push   edx
c001927e:	52                   	push   edx
c001927f:	68 4b b5 02 c0       	push   0xc002b54b
c0019284:	eb 77                	jmp    c00192fd <CPU::detectFeatures()+0x955>
c0019286:	83 f8 07             	cmp    eax,0x7
c0019289:	75 09                	jne    c0019294 <CPU::detectFeatures()+0x8ec>
c001928b:	50                   	push   eax
c001928c:	50                   	push   eax
c001928d:	68 55 b5 02 c0       	push   0xc002b555
c0019292:	eb 69                	jmp    c00192fd <CPU::detectFeatures()+0x955>
c0019294:	83 f8 0a             	cmp    eax,0xa
c0019297:	75 09                	jne    c00192a2 <CPU::detectFeatures()+0x8fa>
c0019299:	50                   	push   eax
c001929a:	50                   	push   eax
c001929b:	68 60 b5 02 c0       	push   0xc002b560
c00192a0:	eb 5b                	jmp    c00192fd <CPU::detectFeatures()+0x955>
c00192a2:	83 f8 0b             	cmp    eax,0xb
c00192a5:	75 09                	jne    c00192b0 <CPU::detectFeatures()+0x908>
c00192a7:	50                   	push   eax
c00192a8:	50                   	push   eax
c00192a9:	68 68 b5 02 c0       	push   0xc002b568
c00192ae:	eb 4d                	jmp    c00192fd <CPU::detectFeatures()+0x955>
c00192b0:	83 f8 08             	cmp    eax,0x8
c00192b3:	75 09                	jne    c00192be <CPU::detectFeatures()+0x916>
c00192b5:	50                   	push   eax
c00192b6:	50                   	push   eax
c00192b7:	68 71 b5 02 c0       	push   0xc002b571
c00192bc:	eb 3f                	jmp    c00192fd <CPU::detectFeatures()+0x955>
c00192be:	83 f8 09             	cmp    eax,0x9
c00192c1:	75 09                	jne    c00192cc <CPU::detectFeatures()+0x924>
c00192c3:	50                   	push   eax
c00192c4:	50                   	push   eax
c00192c5:	68 79 b5 02 c0       	push   0xc002b579
c00192ca:	eb 31                	jmp    c00192fd <CPU::detectFeatures()+0x955>
c00192cc:	83 f8 05             	cmp    eax,0x5
c00192cf:	75 09                	jne    c00192da <CPU::detectFeatures()+0x932>
c00192d1:	50                   	push   eax
c00192d2:	50                   	push   eax
c00192d3:	68 81 b5 02 c0       	push   0xc002b581
c00192d8:	eb 23                	jmp    c00192fd <CPU::detectFeatures()+0x955>
c00192da:	83 f8 0c             	cmp    eax,0xc
c00192dd:	75 09                	jne    c00192e8 <CPU::detectFeatures()+0x940>
c00192df:	55                   	push   ebp
c00192e0:	55                   	push   ebp
c00192e1:	68 8f b5 02 c0       	push   0xc002b58f
c00192e6:	eb 15                	jmp    c00192fd <CPU::detectFeatures()+0x955>
c00192e8:	83 f8 0d             	cmp    eax,0xd
c00192eb:	75 09                	jne    c00192f6 <CPU::detectFeatures()+0x94e>
c00192ed:	57                   	push   edi
c00192ee:	57                   	push   edi
c00192ef:	68 9a b5 02 c0       	push   0xc002b59a
c00192f4:	eb 07                	jmp    c00192fd <CPU::detectFeatures()+0x955>
c00192f6:	56                   	push   esi
c00192f7:	56                   	push   esi
c00192f8:	68 ae b5 02 c0       	push   0xc002b5ae
c00192fd:	53                   	push   ebx
c00192fe:	e8 2f aa ff ff       	call   c0013d32 <Device::setName(char const*)>
c0019303:	83 c4 10             	add    esp,0x10
c0019306:	e9 80 00 00 00       	jmp    c001938b <CPU::detectFeatures()+0x9e3>
c001930b:	51                   	push   ecx
c001930c:	51                   	push   ecx
c001930d:	68 fa b3 02 c0       	push   0xc002b3fa
c0019312:	55                   	push   ebp
c0019313:	e8 f4 74 fe ff       	call   c000080c <strcpy>
c0019318:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019322:	e8 87 6f fe ff       	call   c00002ae <is486>
c0019327:	83 c4 10             	add    esp,0x10
c001932a:	85 c0                	test   eax,eax
c001932c:	74 2b                	je     c0019359 <CPU::detectFeatures()+0x9b1>
c001932e:	52                   	push   edx
c001932f:	52                   	push   edx
c0019330:	68 ba b5 02 c0       	push   0xc002b5ba
c0019335:	53                   	push   ebx
c0019336:	e8 f7 a9 ff ff       	call   c0013d32 <Device::setName(char const*)>
c001933b:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019342:	0f 20 c0             	mov    eax,cr0
c0019345:	83 e0 14             	and    eax,0x14
c0019348:	83 c4 10             	add    esp,0x10
c001934b:	83 f8 04             	cmp    eax,0x4
c001934e:	75 1f                	jne    c001936f <CPU::detectFeatures()+0x9c7>
c0019350:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019357:	eb 32                	jmp    c001938b <CPU::detectFeatures()+0x9e3>
c0019359:	50                   	push   eax
c001935a:	50                   	push   eax
c001935b:	68 c5 b5 02 c0       	push   0xc002b5c5
c0019360:	53                   	push   ebx
c0019361:	e8 cc a9 ff ff       	call   c0013d32 <Device::setName(char const*)>
c0019366:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001936d:	eb d3                	jmp    c0019342 <CPU::detectFeatures()+0x99a>
c001936f:	e8 15 6f fe ff       	call   c0000289 <hasLegacyFPU>
c0019374:	83 e0 01             	and    eax,0x1
c0019377:	8d 14 00             	lea    edx,[eax+eax*1]
c001937a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019380:	83 e0 fd             	and    eax,0xfffffffd
c0019383:	09 d0                	or     eax,edx
c0019385:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001938b:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019392:	83 c4 4c             	add    esp,0x4c
c0019395:	5b                   	pop    ebx
c0019396:	5e                   	pop    esi
c0019397:	5f                   	pop    edi
c0019398:	5d                   	pop    ebp
c0019399:	c3                   	ret    

c001939a <CPU::setupSMEP()>:
c001939a:	0f 20 e0             	mov    eax,cr4
c001939d:	0d 00 00 10 00       	or     eax,0x100000
c00193a2:	0f 22 e0             	mov    cr4,eax
c00193a5:	c3                   	ret    

c00193a6 <CPU::setupUMIP()>:
c00193a6:	0f 20 e0             	mov    eax,cr4
c00193a9:	80 cc 08             	or     ah,0x8
c00193ac:	0f 22 e0             	mov    cr4,eax
c00193af:	c3                   	ret    

c00193b0 <CPU::setupTSC()>:
c00193b0:	0f 20 e0             	mov    eax,cr4
c00193b3:	83 c8 04             	or     eax,0x4
c00193b6:	0f 22 e0             	mov    cr4,eax
c00193b9:	c3                   	ret    

c00193ba <CPU::setupLargePages()>:
c00193ba:	0f 20 e0             	mov    eax,cr4
c00193bd:	83 c8 10             	or     eax,0x10
c00193c0:	0f 22 e0             	mov    cr4,eax
c00193c3:	c3                   	ret    

c00193c4 <CPU::setupPAT()>:
c00193c4:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c00193c9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00193d0:	74 2c                	je     c00193fe <CPU::setupPAT()+0x3a>
c00193d2:	53                   	push   ebx
c00193d3:	83 ec 10             	sub    esp,0x10
c00193d6:	68 77 02 00 00       	push   0x277
c00193db:	50                   	push   eax
c00193dc:	e8 5f 57 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00193e1:	83 e2 f8             	and    edx,0xfffffff8
c00193e4:	83 ca 01             	or     edx,0x1
c00193e7:	52                   	push   edx
c00193e8:	50                   	push   eax
c00193e9:	68 77 02 00 00       	push   0x277
c00193ee:	ff 35 e8 d9 02 c0    	push   DWORD PTR ds:0xc002d9e8
c00193f4:	e8 73 57 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c00193f9:	83 c4 28             	add    esp,0x28
c00193fc:	5b                   	pop    ebx
c00193fd:	c3                   	ret    
c00193fe:	c3                   	ret    
c00193ff:	90                   	nop

c0019400 <CPU::setupMTRR()>:
c0019400:	c3                   	ret    
c0019401:	90                   	nop

c0019402 <CPU::setupGlobalPages()>:
c0019402:	0f 20 e0             	mov    eax,cr4
c0019405:	0c 80                	or     al,0x80
c0019407:	0f 22 e0             	mov    cr4,eax
c001940a:	c3                   	ret    
c001940b:	90                   	nop

c001940c <CPU::allowUsermodeDataAccess()>:
c001940c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019410:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019417:	74 03                	je     c001941c <CPU::allowUsermodeDataAccess()+0x10>
c0019419:	0f 01 cb             	stac   
c001941c:	c3                   	ret    
c001941d:	90                   	nop

c001941e <CPU::prohibitUsermodeDataAccess()>:
c001941e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019422:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019429:	74 03                	je     c001942e <CPU::prohibitUsermodeDataAccess()+0x10>
c001942b:	0f 01 ca             	clac   
c001942e:	c3                   	ret    
c001942f:	90                   	nop

c0019430 <CPU::setupSMAP()>:
c0019430:	0f 20 e0             	mov    eax,cr4
c0019433:	0d 00 00 20 00       	or     eax,0x200000
c0019438:	0f 22 e0             	mov    cr4,eax
c001943b:	eb e1                	jmp    c001941e <CPU::prohibitUsermodeDataAccess()>
c001943d:	90                   	nop

c001943e <CPU::setupFeatures()>:
c001943e:	83 ec 0c             	sub    esp,0xc
c0019441:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019445:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c001944c:	74 07                	je     c0019455 <CPU::setupFeatures()+0x17>
c001944e:	52                   	push   edx
c001944f:	e8 46 ff ff ff       	call   c001939a <CPU::setupSMEP()>
c0019454:	58                   	pop    eax
c0019455:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c001945c:	74 07                	je     c0019465 <CPU::setupFeatures()+0x27>
c001945e:	52                   	push   edx
c001945f:	e8 cc ff ff ff       	call   c0019430 <CPU::setupSMAP()>
c0019464:	58                   	pop    eax
c0019465:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c001946c:	74 07                	je     c0019475 <CPU::setupFeatures()+0x37>
c001946e:	52                   	push   edx
c001946f:	e8 32 ff ff ff       	call   c00193a6 <CPU::setupUMIP()>
c0019474:	58                   	pop    eax
c0019475:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c001947c:	74 07                	je     c0019485 <CPU::setupFeatures()+0x47>
c001947e:	52                   	push   edx
c001947f:	e8 2c ff ff ff       	call   c00193b0 <CPU::setupTSC()>
c0019484:	58                   	pop    eax
c0019485:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c001948c:	74 07                	je     c0019495 <CPU::setupFeatures()+0x57>
c001948e:	52                   	push   edx
c001948f:	e8 26 ff ff ff       	call   c00193ba <CPU::setupLargePages()>
c0019494:	59                   	pop    ecx
c0019495:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c001949c:	74 07                	je     c00194a5 <CPU::setupFeatures()+0x67>
c001949e:	52                   	push   edx
c001949f:	e8 5e ff ff ff       	call   c0019402 <CPU::setupGlobalPages()>
c00194a4:	58                   	pop    eax
c00194a5:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00194ac:	74 0c                	je     c00194ba <CPU::setupFeatures()+0x7c>
c00194ae:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00194b2:	83 c4 0c             	add    esp,0xc
c00194b5:	e9 0a ff ff ff       	jmp    c00193c4 <CPU::setupPAT()>
c00194ba:	83 c4 0c             	add    esp,0xc
c00194bd:	c3                   	ret    

c00194be <CPU::open(int, int, void*)>:
c00194be:	57                   	push   edi
c00194bf:	56                   	push   esi
c00194c0:	53                   	push   ebx
c00194c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00194c5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00194c9:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00194cf:	83 ec 0c             	sub    esp,0xc
c00194d2:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00194d8:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00194de:	50                   	push   eax
c00194df:	e8 4a 59 ff ff       	call   c000ee2e <GDT::setup()>
c00194e4:	83 c4 0c             	add    esp,0xc
c00194e7:	6a 00                	push   0x0
c00194e9:	68 ef be ad de       	push   0xdeadbeef
c00194ee:	57                   	push   edi
c00194ef:	e8 ea 76 ff ff       	call   c0010bde <TSS::setup(unsigned long, unsigned long)>
c00194f4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00194f7:	e8 c2 76 ff ff       	call   c0010bbe <TSS::flush()>
c00194fc:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019502:	89 04 24             	mov    DWORD PTR [esp],eax
c0019505:	e8 88 5b ff ff       	call   c000f092 <IDT::setup()>
c001950a:	b8 00 04 00 00       	mov    eax,0x400
c001950f:	0f 23 f8             	mov    db7,eax
c0019512:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001951c:	e8 74 64 ff ff       	call   c000f995 <Phys::allocatePage()>
c0019521:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019527:	89 30                	mov    DWORD PTR [eax],esi
c0019529:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001952f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019532:	58                   	pop    eax
c0019533:	5a                   	pop    edx
c0019534:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001953a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001953e:	e8 ab 87 ff ff       	call   c0011cee <VAS::setCPUSpecific(unsigned long)>
c0019543:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019546:	e8 5d f4 ff ff       	call   c00189a8 <CPU::detectFeatures()>
c001954b:	e8 35 bc ff ff       	call   c0015185 <setupInterruptController()>
c0019550:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019556:	a1 00 da 02 c0       	mov    eax,ds:0xc002da00
c001955b:	83 e0 10             	and    eax,0x10
c001955e:	83 f8 01             	cmp    eax,0x1
c0019561:	19 c0                	sbb    eax,eax
c0019563:	83 e0 46             	and    eax,0x46
c0019566:	83 c0 1e             	add    eax,0x1e
c0019569:	89 04 24             	mov    DWORD PTR [esp],eax
c001956c:	e8 02 d2 ff ff       	call   c0016773 <setupTimer(int)>
c0019571:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019577:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001957a:	e8 bf fe ff ff       	call   c001943e <CPU::setupFeatures()>
c001957f:	83 c4 10             	add    esp,0x10
c0019582:	31 c0                	xor    eax,eax
c0019584:	5b                   	pop    ebx
c0019585:	5e                   	pop    esi
c0019586:	5f                   	pop    edi
c0019587:	c3                   	ret    

c0019588 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019588:	57                   	push   edi
c0019589:	56                   	push   esi
c001958a:	53                   	push   ebx
c001958b:	51                   	push   ecx
c001958c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019590:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019593:	0f 02 c0             	lar    eax,ax
c0019596:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019599:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001959d:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00195a0:	88 ca                	mov    dl,cl
c00195a2:	c0 ea 06             	shr    dl,0x6
c00195a5:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00195a9:	89 ca                	mov    edx,ecx
c00195ab:	66 c1 ea 03          	shr    dx,0x3
c00195af:	83 e2 07             	and    edx,0x7
c00195b2:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00195b7:	88 17                	mov    BYTE PTR [edi],dl
c00195b9:	0f 84 a6 01 00 00    	je     c0019765 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00195bf:	83 e1 07             	and    ecx,0x7
c00195c2:	80 f9 04             	cmp    cl,0x4
c00195c5:	0f 84 98 00 00 00    	je     c0019663 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00195cb:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00195d0:	0f 95 c0             	setne  al
c00195d3:	80 f9 05             	cmp    cl,0x5
c00195d6:	0f 95 c2             	setne  dl
c00195d9:	08 c2                	or     dl,al
c00195db:	74 79                	je     c0019656 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00195dd:	84 c9                	test   cl,cl
c00195df:	75 05                	jne    c00195e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00195e1:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00195e4:	eb 3c                	jmp    c0019622 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195e6:	80 f9 01             	cmp    cl,0x1
c00195e9:	75 05                	jne    c00195f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00195eb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00195ee:	eb 32                	jmp    c0019622 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195f0:	80 f9 02             	cmp    cl,0x2
c00195f3:	75 05                	jne    c00195fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00195f5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00195f8:	eb 28                	jmp    c0019622 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195fa:	31 c0                	xor    eax,eax
c00195fc:	80 f9 03             	cmp    cl,0x3
c00195ff:	75 05                	jne    c0019606 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019601:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019604:	eb 1c                	jmp    c0019622 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019606:	80 f9 05             	cmp    cl,0x5
c0019609:	75 05                	jne    c0019610 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001960b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001960e:	eb 12                	jmp    c0019622 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019610:	80 f9 06             	cmp    cl,0x6
c0019613:	75 05                	jne    c001961a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019615:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019618:	eb 08                	jmp    c0019622 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001961a:	80 f9 07             	cmp    cl,0x7
c001961d:	75 03                	jne    c0019622 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001961f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019622:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019627:	75 10                	jne    c0019639 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019629:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001962d:	b9 03 00 00 00       	mov    ecx,0x3
c0019632:	01 d0                	add    eax,edx
c0019634:	e9 37 01 00 00       	jmp    c0019770 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019639:	b9 02 00 00 00       	mov    ecx,0x2
c001963e:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019643:	0f 85 27 01 00 00    	jne    c0019770 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019649:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001964c:	b9 06 00 00 00       	mov    ecx,0x6
c0019651:	e9 1a 01 00 00       	jmp    c0019770 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019656:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019659:	b9 06 00 00 00       	mov    ecx,0x6
c001965e:	e9 0f 01 00 00       	jmp    c0019772 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019663:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019666:	88 ca                	mov    dl,cl
c0019668:	c0 ea 06             	shr    dl,0x6
c001966b:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001966f:	89 ca                	mov    edx,ecx
c0019671:	66 c1 ea 03          	shr    dx,0x3
c0019675:	83 e2 07             	and    edx,0x7
c0019678:	80 e1 07             	and    cl,0x7
c001967b:	75 05                	jne    c0019682 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001967d:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019680:	eb 4c                	jmp    c00196ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019682:	80 f9 01             	cmp    cl,0x1
c0019685:	75 05                	jne    c001968c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019687:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001968a:	eb 42                	jmp    c00196ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001968c:	80 f9 02             	cmp    cl,0x2
c001968f:	75 05                	jne    c0019696 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019691:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019694:	eb 38                	jmp    c00196ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019696:	80 f9 03             	cmp    cl,0x3
c0019699:	75 05                	jne    c00196a0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001969b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001969e:	eb 2e                	jmp    c00196ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00196a0:	80 f9 04             	cmp    cl,0x4
c00196a3:	75 12                	jne    c00196b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00196a5:	f6 c4 60             	test   ah,0x60
c00196a8:	75 08                	jne    c00196b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00196aa:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00196ad:	8d 78 14             	lea    edi,[eax+0x14]
c00196b0:	eb 1c                	jmp    c00196ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00196b2:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00196b5:	eb 17                	jmp    c00196ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00196b7:	80 f9 05             	cmp    cl,0x5
c00196ba:	75 05                	jne    c00196c1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00196bc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00196bf:	eb 0d                	jmp    c00196ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00196c1:	80 f9 06             	cmp    cl,0x6
c00196c4:	75 05                	jne    c00196cb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00196c6:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00196c9:	eb 03                	jmp    c00196ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00196cb:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00196ce:	84 d2                	test   dl,dl
c00196d0:	75 05                	jne    c00196d7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00196d2:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00196d5:	eb 3c                	jmp    c0019713 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196d7:	80 fa 01             	cmp    dl,0x1
c00196da:	75 05                	jne    c00196e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00196dc:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00196df:	eb 32                	jmp    c0019713 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196e1:	80 fa 02             	cmp    dl,0x2
c00196e4:	75 05                	jne    c00196eb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00196e6:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00196e9:	eb 28                	jmp    c0019713 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196eb:	80 fa 03             	cmp    dl,0x3
c00196ee:	75 05                	jne    c00196f5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00196f0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00196f3:	eb 1e                	jmp    c0019713 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196f5:	31 c0                	xor    eax,eax
c00196f7:	80 fa 04             	cmp    dl,0x4
c00196fa:	74 17                	je     c0019713 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196fc:	80 fa 05             	cmp    dl,0x5
c00196ff:	75 05                	jne    c0019706 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019701:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019704:	eb 0d                	jmp    c0019713 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019706:	80 fa 06             	cmp    dl,0x6
c0019709:	75 05                	jne    c0019710 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001970b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001970e:	eb 03                	jmp    c0019713 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019710:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019713:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019718:	0f 94 c2             	sete   dl
c001971b:	80 f9 05             	cmp    cl,0x5
c001971e:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019722:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019727:	d3 e0                	shl    eax,cl
c0019729:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001972d:	74 0a                	je     c0019739 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001972f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019732:	b9 07 00 00 00       	mov    ecx,0x7
c0019737:	eb 37                	jmp    c0019770 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019739:	01 f8                	add    eax,edi
c001973b:	b9 03 00 00 00       	mov    ecx,0x3
c0019740:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019745:	74 2b                	je     c0019772 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019747:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001974c:	75 0d                	jne    c001975b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001974e:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019752:	01 c8                	add    eax,ecx
c0019754:	b9 04 00 00 00       	mov    ecx,0x4
c0019759:	eb 17                	jmp    c0019772 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001975b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001975e:	b9 07 00 00 00       	mov    ecx,0x7
c0019763:	eb 0d                	jmp    c0019772 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019765:	b9 02 00 00 00       	mov    ecx,0x2
c001976a:	b2 01                	mov    dl,0x1
c001976c:	31 c0                	xor    eax,eax
c001976e:	eb 02                	jmp    c0019772 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019770:	31 d2                	xor    edx,edx
c0019772:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019776:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019778:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001977c:	88 11                	mov    BYTE PTR [ecx],dl
c001977e:	5a                   	pop    edx
c001977f:	5b                   	pop    ebx
c0019780:	5e                   	pop    esi
c0019781:	5f                   	pop    edi
c0019782:	c3                   	ret    

c0019783 <Krnl::smpEntry()>:
c0019783:	eb fe                	jmp    c0019783 <Krnl::smpEntry()>

c0019785 <Krnl::startCPU(int)>:
c0019785:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c001978a:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019791:	0f 84 36 01 00 00    	je     c00198cd <Krnl::startCPU(int)+0x148>
c0019797:	53                   	push   ebx
c0019798:	83 ec 10             	sub    esp,0x10
c001979b:	fa                   	cli    
c001979c:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c00197a2:	6a 1b                	push   0x1b
c00197a4:	ff 35 e8 d9 02 c0    	push   DWORD PTR ds:0xc002d9e8
c00197aa:	e8 91 53 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00197af:	25 00 f0 ff ff       	and    eax,0xfffff000
c00197b4:	89 c3                	mov    ebx,eax
c00197b6:	58                   	pop    eax
c00197b7:	5a                   	pop    edx
c00197b8:	53                   	push   ebx
c00197b9:	68 fc b5 02 c0       	push   0xc002b5fc
c00197be:	e8 40 8f ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c00197c3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00197cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197d1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00197db:	c1 e0 18             	shl    eax,0x18
c00197de:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c00197e4:	83 c4 10             	add    esp,0x10
c00197e7:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00197ed:	09 c2                	or     edx,eax
c00197ef:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00197f5:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00197fb:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019801:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019807:	80 cd c5             	or     ch,0xc5
c001980a:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019810:	f3 90                	pause  
c0019812:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019814:	0f ba e1 0c          	bt     ecx,0xc
c0019818:	72 f6                	jb     c0019810 <Krnl::startCPU(int)+0x8b>
c001981a:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019820:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019826:	09 c1                	or     ecx,eax
c0019828:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001982e:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019834:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001983a:	80 cd 85             	or     ch,0x85
c001983d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019843:	f3 90                	pause  
c0019845:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019847:	0f ba e1 0c          	bt     ecx,0xc
c001984b:	72 f6                	jb     c0019843 <Krnl::startCPU(int)+0xbe>
c001984d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019857:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001985d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019863:	09 c1                	or     ecx,eax
c0019865:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001986b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019871:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019877:	81 c9 02 06 00 00    	or     ecx,0x602
c001987d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019883:	f3 90                	pause  
c0019885:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019887:	0f ba e1 0c          	bt     ecx,0xc
c001988b:	72 f6                	jb     c0019883 <Krnl::startCPU(int)+0xfe>
c001988d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019897:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001989d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00198a3:	09 c8                	or     eax,ecx
c00198a5:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c00198ab:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c00198b1:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c00198b6:	0d 02 06 00 00       	or     eax,0x602
c00198bb:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c00198c1:	f3 90                	pause  
c00198c3:	8b 02                	mov    eax,DWORD PTR [edx]
c00198c5:	0f ba e0 0c          	bt     eax,0xc
c00198c9:	72 f6                	jb     c00198c1 <Krnl::startCPU(int)+0x13c>
c00198cb:	eb fe                	jmp    c00198cb <Krnl::startCPU(int)+0x146>
c00198cd:	c3                   	ret    

c00198ce <Krnl::startCPUs()>:
c00198ce:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c00198d3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00198d9:	88 c2                	mov    dl,al
c00198db:	83 e2 0a             	and    edx,0xa
c00198de:	80 fa 0a             	cmp    dl,0xa
c00198e1:	75 09                	jne    c00198ec <Krnl::startCPUs()+0x1e>
c00198e3:	a8 01                	test   al,0x1
c00198e5:	74 05                	je     c00198ec <Krnl::startCPUs()+0x1e>
c00198e7:	e9 af 68 fe ff       	jmp    c000019b <prepareTramp>
c00198ec:	c3                   	ret    
c00198ed:	90                   	nop

c00198ee <EnvVarContainer::getEnv(char const*)>:
c00198ee:	57                   	push   edi
c00198ef:	56                   	push   esi
c00198f0:	53                   	push   ebx
c00198f1:	31 db                	xor    ebx,ebx
c00198f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00198f7:	39 1e                	cmp    DWORD PTR [esi],ebx
c00198f9:	7e 2b                	jle    c0019926 <EnvVarContainer::getEnv(char const*)+0x38>
c00198fb:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019902:	50                   	push   eax
c0019903:	50                   	push   eax
c0019904:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019907:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001990a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001990e:	e8 85 6f fe ff       	call   c0000898 <strcmp>
c0019913:	83 c4 10             	add    esp,0x10
c0019916:	85 c0                	test   eax,eax
c0019918:	75 09                	jne    c0019923 <EnvVarContainer::getEnv(char const*)+0x35>
c001991a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001991d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019921:	eb 05                	jmp    c0019928 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019923:	43                   	inc    ebx
c0019924:	eb d1                	jmp    c00198f7 <EnvVarContainer::getEnv(char const*)+0x9>
c0019926:	31 c0                	xor    eax,eax
c0019928:	5b                   	pop    ebx
c0019929:	5e                   	pop    esi
c001992a:	5f                   	pop    edi
c001992b:	c3                   	ret    

c001992c <EnvVarContainer::setEnv(char const*, char const*)>:
c001992c:	55                   	push   ebp
c001992d:	57                   	push   edi
c001992e:	56                   	push   esi
c001992f:	53                   	push   ebx
c0019930:	83 ec 28             	sub    esp,0x28
c0019933:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019937:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001993b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001993f:	56                   	push   esi
c0019940:	e8 27 6e fe ff       	call   c000076c <strlen>
c0019945:	40                   	inc    eax
c0019946:	89 04 24             	mov    DWORD PTR [esp],eax
c0019949:	e8 4b 5c ff ff       	call   c000f599 <malloc>
c001994e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019951:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019955:	e8 12 6e fe ff       	call   c000076c <strlen>
c001995a:	40                   	inc    eax
c001995b:	89 04 24             	mov    DWORD PTR [esp],eax
c001995e:	e8 36 5c ff ff       	call   c000f599 <malloc>
c0019963:	89 34 24             	mov    DWORD PTR [esp],esi
c0019966:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001996a:	e8 fd 6d fe ff       	call   c000076c <strlen>
c001996f:	83 c4 0c             	add    esp,0xc
c0019972:	40                   	inc    eax
c0019973:	50                   	push   eax
c0019974:	6a 00                	push   0x0
c0019976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001997a:	e8 d1 6d fe ff       	call   c0000750 <memset>
c001997f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019982:	e8 e5 6d fe ff       	call   c000076c <strlen>
c0019987:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001998b:	8d 48 01             	lea    ecx,[eax+0x1]
c001998e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019990:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019993:	89 de                	mov    esi,ebx
c0019995:	e8 d2 6d fe ff       	call   c000076c <strlen>
c001999a:	83 c4 0c             	add    esp,0xc
c001999d:	40                   	inc    eax
c001999e:	50                   	push   eax
c001999f:	6a 00                	push   0x0
c00199a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00199a5:	e8 a6 6d fe ff       	call   c0000750 <memset>
c00199aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199ad:	e8 ba 6d fe ff       	call   c000076c <strlen>
c00199b2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00199b6:	8d 48 01             	lea    ecx,[eax+0x1]
c00199b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00199be:	40                   	inc    eax
c00199bf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00199c2:	c1 e0 03             	shl    eax,0x3
c00199c5:	5a                   	pop    edx
c00199c6:	59                   	pop    ecx
c00199c7:	50                   	push   eax
c00199c8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00199cb:	e8 b5 5b ff ff       	call   c000f585 <realloc>
c00199d0:	8d 74 24 18          	lea    esi,[esp+0x18]
c00199d4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00199d7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00199da:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00199de:	b9 08 00 00 00       	mov    ecx,0x8
c00199e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199e5:	83 c4 2c             	add    esp,0x2c
c00199e8:	5b                   	pop    ebx
c00199e9:	5e                   	pop    esi
c00199ea:	5f                   	pop    edi
c00199eb:	5d                   	pop    ebp
c00199ec:	c3                   	ret    
c00199ed:	90                   	nop

c00199ee <EnvVarContainer::deleteEnv(char const*)>:
c00199ee:	c3                   	ret    
c00199ef:	90                   	nop

c00199f0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00199f0:	55                   	push   ebp
c00199f1:	57                   	push   edi
c00199f2:	56                   	push   esi
c00199f3:	53                   	push   ebx
c00199f4:	81 ec 38 01 00 00    	sub    esp,0x138
c00199fa:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0019a01:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019a08:	68 14 01 00 00       	push   0x114
c0019a0d:	e8 87 5b ff ff       	call   c000f599 <malloc>
c0019a12:	83 c4 0c             	add    esp,0xc
c0019a15:	89 c3                	mov    ebx,eax
c0019a17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019a1a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019a21:	50                   	push   eax
c0019a22:	e8 3b 92 ff ff       	call   c0012c62 <File::File(char const*, Process*)>
c0019a27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a2a:	e8 05 95 ff ff       	call   c0012f34 <File::exists()>
c0019a2f:	83 c4 10             	add    esp,0x10
c0019a32:	84 c0                	test   al,al
c0019a34:	75 31                	jne    c0019a67 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019a36:	50                   	push   eax
c0019a37:	50                   	push   eax
c0019a38:	6a 12                	push   0x12
c0019a3a:	53                   	push   ebx
c0019a3b:	e8 86 92 ff ff       	call   c0012cc6 <File::open(FileOpenMode)>
c0019a40:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a42:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019a45:	89 34 24             	mov    DWORD PTR [esp],esi
c0019a48:	e8 1f 6d fe ff       	call   c000076c <strlen>
c0019a4d:	5a                   	pop    edx
c0019a4e:	31 d2                	xor    edx,edx
c0019a50:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a54:	51                   	push   ecx
c0019a55:	56                   	push   esi
c0019a56:	52                   	push   edx
c0019a57:	50                   	push   eax
c0019a58:	53                   	push   ebx
c0019a59:	ff d7                	call   edi
c0019a5b:	83 c4 14             	add    esp,0x14
c0019a5e:	53                   	push   ebx
c0019a5f:	e8 c0 92 ff ff       	call   c0012d24 <File::close()>
c0019a64:	83 c4 10             	add    esp,0x10
c0019a67:	56                   	push   esi
c0019a68:	31 f6                	xor    esi,esi
c0019a6a:	68 00 01 00 00       	push   0x100
c0019a6f:	6a 00                	push   0x0
c0019a71:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019a75:	50                   	push   eax
c0019a76:	e8 d5 6c fe ff       	call   c0000750 <memset>
c0019a7b:	5f                   	pop    edi
c0019a7c:	58                   	pop    eax
c0019a7d:	6a 01                	push   0x1
c0019a7f:	53                   	push   ebx
c0019a80:	e8 41 92 ff ff       	call   c0012cc6 <File::open(FileOpenMode)>
c0019a85:	83 c4 10             	add    esp,0x10
c0019a88:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019a90:	83 ec 0c             	sub    esp,0xc
c0019a93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a95:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a99:	51                   	push   ecx
c0019a9a:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019a9e:	52                   	push   edx
c0019a9f:	6a 00                	push   0x0
c0019aa1:	6a 01                	push   0x1
c0019aa3:	53                   	push   ebx
c0019aa4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019aa7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019aab:	83 c4 20             	add    esp,0x20
c0019aae:	3c 0d                	cmp    al,0xd
c0019ab0:	0f 84 09 01 00 00    	je     c0019bbf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019ab6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019abb:	0f 84 ef 00 00 00    	je     c0019bb0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019ac1:	3c 0a                	cmp    al,0xa
c0019ac3:	74 13                	je     c0019ad8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019ac5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019aca:	74 0c                	je     c0019ad8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019acc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019ad2:	0f 8e d8 00 00 00    	jle    c0019bb0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019adc:	83 ec 0c             	sub    esp,0xc
c0019adf:	8d 78 01             	lea    edi,[eax+0x1]
c0019ae2:	57                   	push   edi
c0019ae3:	e8 b1 5a ff ff       	call   c000f599 <malloc>
c0019ae8:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019aec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019af0:	8d 56 04             	lea    edx,[esi+0x4]
c0019af3:	89 14 24             	mov    DWORD PTR [esp],edx
c0019af6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019afa:	e8 9a 5a ff ff       	call   c000f599 <malloc>
c0019aff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019b03:	83 c4 0c             	add    esp,0xc
c0019b06:	57                   	push   edi
c0019b07:	6a 00                	push   0x0
c0019b09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019b0d:	e8 3e 6c fe ff       	call   c0000750 <memset>
c0019b12:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019b16:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019b1e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b20:	83 c4 0c             	add    esp,0xc
c0019b23:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b27:	52                   	push   edx
c0019b28:	6a 00                	push   0x0
c0019b2a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019b2e:	e8 1d 6c fe ff       	call   c0000750 <memset>
c0019b33:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019b37:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019b3b:	89 34 24             	mov    DWORD PTR [esp],esi
c0019b3e:	e8 29 6c fe ff       	call   c000076c <strlen>
c0019b43:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019b47:	89 c1                	mov    ecx,eax
c0019b49:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b4b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019b4e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019b51:	40                   	inc    eax
c0019b52:	83 c4 10             	add    esp,0x10
c0019b55:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019b58:	85 d2                	test   edx,edx
c0019b5a:	75 0c                	jne    c0019b68 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019b5c:	83 ec 0c             	sub    esp,0xc
c0019b5f:	6a 08                	push   0x8
c0019b61:	e8 33 5a ff ff       	call   c000f599 <malloc>
c0019b66:	eb 0c                	jmp    c0019b74 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019b68:	c1 e0 03             	shl    eax,0x3
c0019b6b:	51                   	push   ecx
c0019b6c:	51                   	push   ecx
c0019b6d:	50                   	push   eax
c0019b6e:	52                   	push   edx
c0019b6f:	e8 11 5a ff ff       	call   c000f585 <realloc>
c0019b74:	83 c4 10             	add    esp,0x10
c0019b77:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019b7a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b7d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019b80:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019b84:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019b88:	b9 08 00 00 00       	mov    ecx,0x8
c0019b8d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b8f:	31 f6                	xor    esi,esi
c0019b91:	50                   	push   eax
c0019b92:	68 00 01 00 00       	push   0x100
c0019b97:	6a 00                	push   0x0
c0019b99:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019b9d:	50                   	push   eax
c0019b9e:	e8 ad 6b fe ff       	call   c0000750 <memset>
c0019ba3:	83 c4 10             	add    esp,0x10
c0019ba6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019bae:	eb 0f                	jmp    c0019bbf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019bb0:	3c 3d                	cmp    al,0x3d
c0019bb2:	74 07                	je     c0019bbb <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019bb4:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019bb8:	46                   	inc    esi
c0019bb9:	eb 04                	jmp    c0019bbf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019bbb:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019bbf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019bc4:	0f 85 c6 fe ff ff    	jne    c0019a90 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019bca:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019bd0:	5b                   	pop    ebx
c0019bd1:	5e                   	pop    esi
c0019bd2:	5f                   	pop    edi
c0019bd3:	5d                   	pop    ebp
c0019bd4:	c3                   	ret    
c0019bd5:	90                   	nop

c0019bd6 <EnvVarContainer::__loadSystem()>:
c0019bd6:	83 ec 10             	sub    esp,0x10
c0019bd9:	68 20 cf 02 c0       	push   0xc002cf20
c0019bde:	68 0d b6 02 c0       	push   0xc002b60d
c0019be3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019be7:	e8 04 fe ff ff       	call   c00199f0 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019bec:	83 c4 1c             	add    esp,0x1c
c0019bef:	c3                   	ret    

c0019bf0 <EnvVarContainer::__loadUser()>:
c0019bf0:	c3                   	ret    
c0019bf1:	90                   	nop

c0019bf2 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019bf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bf6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019bfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019c04:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019c07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c0b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019c12:	90                   	nop
c0019c13:	c3                   	ret    

c0019c14 <EnvVarContainer::~EnvVarContainer()>:
c0019c14:	83 ec 0c             	sub    esp,0xc
c0019c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019c1e:	85 c0                	test   eax,eax
c0019c20:	74 1d                	je     c0019c3f <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c26:	8b 00                	mov    eax,DWORD PTR [eax]
c0019c28:	85 c0                	test   eax,eax
c0019c2a:	74 13                	je     c0019c3f <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019c33:	83 ec 0c             	sub    esp,0xc
c0019c36:	50                   	push   eax
c0019c37:	e8 6d 59 ff ff       	call   c000f5a9 <free>
c0019c3c:	83 c4 10             	add    esp,0x10
c0019c3f:	90                   	nop
c0019c40:	83 c4 0c             	add    esp,0xc
c0019c43:	c3                   	ret    

c0019c44 <Krnl::getEnv(Process*, char const*)>:
c0019c44:	53                   	push   ebx
c0019c45:	83 ec 08             	sub    esp,0x8
c0019c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c4c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019c50:	39 05 30 0f 03 c0    	cmp    DWORD PTR ds:0xc0030f30,eax
c0019c56:	74 04                	je     c0019c5c <Krnl::getEnv(Process*, char const*)+0x18>
c0019c58:	85 c0                	test   eax,eax
c0019c5a:	75 0b                	jne    c0019c67 <Krnl::getEnv(Process*, char const*)+0x23>
c0019c5c:	a1 14 05 03 c0       	mov    eax,ds:0xc0030514
c0019c61:	85 c0                	test   eax,eax
c0019c63:	75 19                	jne    c0019c7e <Krnl::getEnv(Process*, char const*)+0x3a>
c0019c65:	eb 27                	jmp    c0019c8e <Krnl::getEnv(Process*, char const*)+0x4a>
c0019c67:	52                   	push   edx
c0019c68:	52                   	push   edx
c0019c69:	53                   	push   ebx
c0019c6a:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019c70:	e8 79 fc ff ff       	call   c00198ee <EnvVarContainer::getEnv(char const*)>
c0019c75:	83 c4 10             	add    esp,0x10
c0019c78:	85 c0                	test   eax,eax
c0019c7a:	75 28                	jne    c0019ca4 <Krnl::getEnv(Process*, char const*)+0x60>
c0019c7c:	eb de                	jmp    c0019c5c <Krnl::getEnv(Process*, char const*)+0x18>
c0019c7e:	52                   	push   edx
c0019c7f:	52                   	push   edx
c0019c80:	53                   	push   ebx
c0019c81:	50                   	push   eax
c0019c82:	e8 67 fc ff ff       	call   c00198ee <EnvVarContainer::getEnv(char const*)>
c0019c87:	83 c4 10             	add    esp,0x10
c0019c8a:	85 c0                	test   eax,eax
c0019c8c:	75 16                	jne    c0019ca4 <Krnl::getEnv(Process*, char const*)+0x60>
c0019c8e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019c92:	a1 18 05 03 c0       	mov    eax,ds:0xc0030518
c0019c97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019c9b:	83 c4 08             	add    esp,0x8
c0019c9e:	5b                   	pop    ebx
c0019c9f:	e9 4a fc ff ff       	jmp    c00198ee <EnvVarContainer::getEnv(char const*)>
c0019ca4:	83 c4 08             	add    esp,0x8
c0019ca7:	5b                   	pop    ebx
c0019ca8:	c3                   	ret    

c0019ca9 <Krnl::setEnvSystem(char const*, char const*)>:
c0019ca9:	83 ec 10             	sub    esp,0x10
c0019cac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019cb0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019cb4:	ff 35 18 05 03 c0    	push   DWORD PTR ds:0xc0030518
c0019cba:	e8 6d fc ff ff       	call   c001992c <EnvVarContainer::setEnv(char const*, char const*)>
c0019cbf:	83 c4 1c             	add    esp,0x1c
c0019cc2:	c3                   	ret    

c0019cc3 <Krnl::setEnvUser(char const*, char const*)>:
c0019cc3:	a1 14 05 03 c0       	mov    eax,ds:0xc0030514
c0019cc8:	85 c0                	test   eax,eax
c0019cca:	74 15                	je     c0019ce1 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019ccc:	83 ec 10             	sub    esp,0x10
c0019ccf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019cd3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019cd7:	50                   	push   eax
c0019cd8:	e8 4f fc ff ff       	call   c001992c <EnvVarContainer::setEnv(char const*, char const*)>
c0019cdd:	83 c4 1c             	add    esp,0x1c
c0019ce0:	c3                   	ret    
c0019ce1:	c3                   	ret    

c0019ce2 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ce6:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019cec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019cf0:	e9 37 fc ff ff       	jmp    c001992c <EnvVarContainer::setEnv(char const*, char const*)>

c0019cf5 <Krnl::deleteEnvSystem(char const*)>:
c0019cf5:	c3                   	ret    

c0019cf6 <Krnl::deleteEnvUser(char const*)>:
c0019cf6:	c3                   	ret    

c0019cf7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019cf7:	c3                   	ret    

c0019cf8 <Krnl::newProcessEnv(Process*)>:
c0019cf8:	83 ec 28             	sub    esp,0x28
c0019cfb:	6a 0c                	push   0xc
c0019cfd:	e8 97 58 ff ff       	call   c000f599 <malloc>
c0019d02:	5a                   	pop    edx
c0019d03:	59                   	pop    ecx
c0019d04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019d08:	50                   	push   eax
c0019d09:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d0d:	e8 e0 fe ff ff       	call   c0019bf2 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d16:	83 c4 2c             	add    esp,0x2c
c0019d19:	c3                   	ret    

c0019d1a <Krnl::copyProcessEnv(Process*, Process*)>:
c0019d1a:	57                   	push   edi
c0019d1b:	56                   	push   esi
c0019d1c:	53                   	push   ebx
c0019d1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d21:	83 ec 0c             	sub    esp,0xc
c0019d24:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019d2a:	6a 0c                	push   0xc
c0019d2c:	e8 68 58 ff ff       	call   c000f599 <malloc>
c0019d31:	89 c3                	mov    ebx,eax
c0019d33:	58                   	pop    eax
c0019d34:	5a                   	pop    edx
c0019d35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d39:	53                   	push   ebx
c0019d3a:	e8 b3 fe ff ff       	call   c0019bf2 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d3f:	8b 07                	mov    eax,DWORD PTR [edi]
c0019d41:	89 03                	mov    DWORD PTR [ebx],eax
c0019d43:	c1 e0 03             	shl    eax,0x3
c0019d46:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d49:	e8 4b 58 ff ff       	call   c000f599 <malloc>
c0019d4e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019d51:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019d53:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019d56:	c1 e1 03             	shl    ecx,0x3
c0019d59:	89 c7                	mov    edi,eax
c0019d5b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d5d:	83 c4 10             	add    esp,0x10
c0019d60:	89 d8                	mov    eax,ebx
c0019d62:	5b                   	pop    ebx
c0019d63:	5e                   	pop    esi
c0019d64:	5f                   	pop    edi
c0019d65:	c3                   	ret    

c0019d66 <Krnl::loadSystemEnv()>:
c0019d66:	53                   	push   ebx
c0019d67:	83 ec 14             	sub    esp,0x14
c0019d6a:	6a 0c                	push   0xc
c0019d6c:	e8 28 58 ff ff       	call   c000f599 <malloc>
c0019d71:	89 c3                	mov    ebx,eax
c0019d73:	58                   	pop    eax
c0019d74:	5a                   	pop    edx
c0019d75:	ff 35 30 0f 03 c0    	push   DWORD PTR ds:0xc0030f30
c0019d7b:	53                   	push   ebx
c0019d7c:	e8 71 fe ff ff       	call   c0019bf2 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d84:	89 1d 18 05 03 c0    	mov    DWORD PTR ds:0xc0030518,ebx
c0019d8a:	e8 47 fe ff ff       	call   c0019bd6 <EnvVarContainer::__loadSystem()>
c0019d8f:	83 c4 18             	add    esp,0x18
c0019d92:	5b                   	pop    ebx
c0019d93:	c3                   	ret    

c0019d94 <Krnl::loadUserEnv()>:
c0019d94:	53                   	push   ebx
c0019d95:	83 ec 14             	sub    esp,0x14
c0019d98:	6a 0c                	push   0xc
c0019d9a:	e8 fa 57 ff ff       	call   c000f599 <malloc>
c0019d9f:	89 c3                	mov    ebx,eax
c0019da1:	58                   	pop    eax
c0019da2:	5a                   	pop    edx
c0019da3:	ff 35 30 0f 03 c0    	push   DWORD PTR ds:0xc0030f30
c0019da9:	53                   	push   ebx
c0019daa:	e8 43 fe ff ff       	call   c0019bf2 <EnvVarContainer::EnvVarContainer(Process*)>
c0019daf:	89 1d 14 05 03 c0    	mov    DWORD PTR ds:0xc0030514,ebx
c0019db5:	83 c4 18             	add    esp,0x18
c0019db8:	5b                   	pop    ebx
c0019db9:	c3                   	ret    

c0019dba <Krnl::flushEnv()>:
c0019dba:	c3                   	ret    

c0019dbb <Krnl::getProcessTotalEnvCount(Process*)>:
c0019dbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dbf:	8b 15 14 05 03 c0    	mov    edx,DWORD PTR ds:0xc0030514
c0019dc5:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019dcb:	a1 18 05 03 c0       	mov    eax,ds:0xc0030518
c0019dd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0019dd2:	03 01                	add    eax,DWORD PTR [ecx]
c0019dd4:	85 d2                	test   edx,edx
c0019dd6:	74 02                	je     c0019dda <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019dd8:	03 02                	add    eax,DWORD PTR [edx]
c0019dda:	c3                   	ret    

c0019ddb <Krnl::getProcessEnvPair(Process*, int)>:
c0019ddb:	57                   	push   edi
c0019ddc:	56                   	push   esi
c0019ddd:	8b 35 14 05 03 c0    	mov    esi,DWORD PTR ds:0xc0030514
c0019de3:	53                   	push   ebx
c0019de4:	85 f6                	test   esi,esi
c0019de6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019dea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019dee:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019df4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019df8:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019dfa:	75 16                	jne    c0019e12 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019dfc:	39 c2                	cmp    edx,eax
c0019dfe:	7c 16                	jl     c0019e16 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019e00:	8b 0d 18 05 03 c0    	mov    ecx,DWORD PTR ds:0xc0030518
c0019e06:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019e08:	01 c6                	add    esi,eax
c0019e0a:	39 d6                	cmp    esi,edx
c0019e0c:	7e 3c                	jle    c0019e4a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019e0e:	29 c2                	sub    edx,eax
c0019e10:	eb 04                	jmp    c0019e16 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019e12:	39 c2                	cmp    edx,eax
c0019e14:	7d 05                	jge    c0019e1b <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019e16:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019e19:	eb 20                	jmp    c0019e3b <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019e1b:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019e1d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019e20:	39 d1                	cmp    ecx,edx
c0019e22:	7e 04                	jle    c0019e28 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019e24:	29 c2                	sub    edx,eax
c0019e26:	eb 10                	jmp    c0019e38 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019e28:	8b 35 18 05 03 c0    	mov    esi,DWORD PTR ds:0xc0030518
c0019e2e:	03 0e                	add    ecx,DWORD PTR [esi]
c0019e30:	39 d1                	cmp    ecx,edx
c0019e32:	7e 16                	jle    c0019e4a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019e34:	29 c2                	sub    edx,eax
c0019e36:	29 fa                	sub    edx,edi
c0019e38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e3b:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019e3e:	8b 02                	mov    eax,DWORD PTR [edx]
c0019e40:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019e43:	89 03                	mov    DWORD PTR [ebx],eax
c0019e45:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019e48:	eb 1d                	jmp    c0019e67 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019e4a:	83 ec 0c             	sub    esp,0xc
c0019e4d:	68 2f b6 02 c0       	push   0xc002b62f
c0019e52:	e8 18 00 00 00       	call   c0019e6f <Krnl::panic(char const*)>
c0019e57:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019e5d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019e64:	83 c4 10             	add    esp,0x10
c0019e67:	89 d8                	mov    eax,ebx
c0019e69:	5b                   	pop    ebx
c0019e6a:	5e                   	pop    esi
c0019e6b:	5f                   	pop    edi
c0019e6c:	c2 04 00             	ret    0x4

c0019e6f <Krnl::panic(char const*)>:
c0019e6f:	55                   	push   ebp
c0019e70:	89 e5                	mov    ebp,esp
c0019e72:	53                   	push   ebx
c0019e73:	83 ec 10             	sub    esp,0x10
c0019e76:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019e79:	fa                   	cli    
c0019e7a:	c6 05 24 05 03 c0 01 	mov    BYTE PTR ds:0xc0030524,0x1
c0019e81:	53                   	push   ebx
c0019e82:	e8 6c 57 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0019e87:	58                   	pop    eax
c0019e88:	c6 05 20 c9 02 c0 00 	mov    BYTE PTR ds:0xc002c920,0x0
c0019e8f:	5a                   	pop    edx
c0019e90:	53                   	push   ebx
c0019e91:	68 49 b6 02 c0       	push   0xc002b649
c0019e96:	e8 68 88 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0019e9b:	59                   	pop    ecx
c0019e9c:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0019ea1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ea7:	e8 e1 64 ff ff       	call   c001038d <setActiveTerminal(VgaText*)>
c0019eac:	83 c4 0c             	add    esp,0xc
c0019eaf:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0019eb4:	6a 01                	push   0x1
c0019eb6:	6a 0f                	push   0xf
c0019eb8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ebe:	e8 29 63 ff ff       	call   c00101ec <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019ec3:	58                   	pop    eax
c0019ec4:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0019ec9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ecf:	e8 3a 68 ff ff       	call   c001070e <VgaText::clearScreen()>
c0019ed4:	58                   	pop    eax
c0019ed5:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0019eda:	5a                   	pop    edx
c0019edb:	68 62 b6 02 c0       	push   0xc002b662
c0019ee0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ee6:	e8 af 69 ff ff       	call   c001089a <VgaText::puts(char const*)>
c0019eeb:	59                   	pop    ecx
c0019eec:	58                   	pop    eax
c0019eed:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0019ef2:	68 08 b7 02 c0       	push   0xc002b708
c0019ef7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019efd:	e8 98 69 ff ff       	call   c001089a <VgaText::puts(char const*)>
c0019f02:	58                   	pop    eax
c0019f03:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0019f08:	5a                   	pop    edx
c0019f09:	68 7e b6 02 c0       	push   0xc002b67e
c0019f0e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f14:	e8 81 69 ff ff       	call   c001089a <VgaText::puts(char const*)>
c0019f19:	59                   	pop    ecx
c0019f1a:	58                   	pop    eax
c0019f1b:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0019f20:	53                   	push   ebx
c0019f21:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f27:	e8 6e 69 ff ff       	call   c001089a <VgaText::puts(char const*)>
c0019f2c:	58                   	pop    eax
c0019f2d:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0019f32:	5a                   	pop    edx
c0019f33:	68 9e b6 02 c0       	push   0xc002b69e
c0019f38:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f3e:	e8 57 69 ff ff       	call   c001089a <VgaText::puts(char const*)>
c0019f43:	a1 20 05 03 c0       	mov    eax,ds:0xc0030520
c0019f48:	83 c4 10             	add    esp,0x10
c0019f4b:	85 c0                	test   eax,eax
c0019f4d:	74 02                	je     c0019f51 <Krnl::panic(char const*)+0xe2>
c0019f4f:	ff d0                	call   eax
c0019f51:	83 ec 0c             	sub    esp,0xc
c0019f54:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f57:	e8 8c 30 00 00       	call   c001cfe8 <Thr::getDriverNameFromAddress(unsigned long)>
c0019f5c:	83 c4 10             	add    esp,0x10
c0019f5f:	89 c3                	mov    ebx,eax
c0019f61:	85 c0                	test   eax,eax
c0019f63:	0f 84 4e 02 00 00    	je     c001a1b7 <Krnl::panic(char const*)+0x348>
c0019f69:	83 ec 08             	sub    esp,0x8
c0019f6c:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0019f71:	68 44 b7 02 c0       	push   0xc002b744
c0019f76:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f7c:	e8 19 69 ff ff       	call   c001089a <VgaText::puts(char const*)>
c0019f81:	58                   	pop    eax
c0019f82:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0019f87:	5a                   	pop    edx
c0019f88:	68 7e b6 02 c0       	push   0xc002b67e
c0019f8d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f93:	e8 02 69 ff ff       	call   c001089a <VgaText::puts(char const*)>
c0019f98:	59                   	pop    ecx
c0019f99:	58                   	pop    eax
c0019f9a:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0019f9f:	53                   	push   ebx
c0019fa0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fa6:	e8 ef 68 ff ff       	call   c001089a <VgaText::puts(char const*)>
c0019fab:	83 c4 10             	add    esp,0x10
c0019fae:	83 ec 08             	sub    esp,0x8
c0019fb1:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0019fb6:	68 9d b6 02 c0       	push   0xc002b69d
c0019fbb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fc1:	e8 d4 68 ff ff       	call   c001089a <VgaText::puts(char const*)>
c0019fc6:	58                   	pop    eax
c0019fc7:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0019fcc:	5a                   	pop    edx
c0019fcd:	68 9c b7 02 c0       	push   0xc002b79c
c0019fd2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fd8:	e8 bd 68 ff ff       	call   c001089a <VgaText::puts(char const*)>
c0019fdd:	59                   	pop    ecx
c0019fde:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0019fe3:	5b                   	pop    ebx
c0019fe4:	68 dc b7 02 c0       	push   0xc002b7dc
c0019fe9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fef:	e8 a6 68 ff ff       	call   c001089a <VgaText::puts(char const*)>
c0019ff4:	58                   	pop    eax
c0019ff5:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0019ffa:	5a                   	pop    edx
c0019ffb:	68 89 b6 02 c0       	push   0xc002b689
c001a000:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a006:	e8 8f 68 ff ff       	call   c001089a <VgaText::puts(char const*)>
c001a00b:	59                   	pop    ecx
c001a00c:	5b                   	pop    ebx
c001a00d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a010:	68 a1 b6 02 c0       	push   0xc002b6a1
c001a015:	e8 e9 86 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001a01a:	58                   	pop    eax
c001a01b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a01e:	5a                   	pop    edx
c001a01f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a022:	68 aa b6 02 c0       	push   0xc002b6aa
c001a027:	e8 d7 86 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001a02c:	59                   	pop    ecx
c001a02d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a030:	5b                   	pop    ebx
c001a031:	8b 00                	mov    eax,DWORD PTR [eax]
c001a033:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a036:	68 b3 b6 02 c0       	push   0xc002b6b3
c001a03b:	e8 c3 86 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001a040:	58                   	pop    eax
c001a041:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001a046:	5a                   	pop    edx
c001a047:	68 20 b8 02 c0       	push   0xc002b820
c001a04c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a052:	e8 43 68 ff ff       	call   c001089a <VgaText::puts(char const*)>
c001a057:	59                   	pop    ecx
c001a058:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001a05d:	5b                   	pop    ebx
c001a05e:	68 bc b6 02 c0       	push   0xc002b6bc
c001a063:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a069:	e8 2c 68 ff ff       	call   c001089a <VgaText::puts(char const*)>
c001a06e:	0f 20 c0             	mov    eax,cr0
c001a071:	5a                   	pop    edx
c001a072:	59                   	pop    ecx
c001a073:	50                   	push   eax
c001a074:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001a079:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a07f:	e8 d0 67 ff ff       	call   c0010854 <VgaText::putx(unsigned int)>
c001a084:	5b                   	pop    ebx
c001a085:	58                   	pop    eax
c001a086:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001a08b:	68 c6 b6 02 c0       	push   0xc002b6c6
c001a090:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a096:	e8 ff 67 ff ff       	call   c001089a <VgaText::puts(char const*)>
c001a09b:	0f 20 d0             	mov    eax,cr2
c001a09e:	5a                   	pop    edx
c001a09f:	59                   	pop    ecx
c001a0a0:	50                   	push   eax
c001a0a1:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001a0a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0ac:	e8 a3 67 ff ff       	call   c0010854 <VgaText::putx(unsigned int)>
c001a0b1:	5b                   	pop    ebx
c001a0b2:	58                   	pop    eax
c001a0b3:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001a0b8:	68 d0 b6 02 c0       	push   0xc002b6d0
c001a0bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0c3:	e8 d2 67 ff ff       	call   c001089a <VgaText::puts(char const*)>
c001a0c8:	0f 20 d8             	mov    eax,cr3
c001a0cb:	5a                   	pop    edx
c001a0cc:	59                   	pop    ecx
c001a0cd:	50                   	push   eax
c001a0ce:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001a0d3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0d9:	e8 76 67 ff ff       	call   c0010854 <VgaText::putx(unsigned int)>
c001a0de:	5b                   	pop    ebx
c001a0df:	58                   	pop    eax
c001a0e0:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001a0e5:	68 e3 b6 02 c0       	push   0xc002b6e3
c001a0ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0f0:	e8 a5 67 ff ff       	call   c001089a <VgaText::puts(char const*)>
c001a0f5:	0f 20 e0             	mov    eax,cr4
c001a0f8:	5a                   	pop    edx
c001a0f9:	59                   	pop    ecx
c001a0fa:	50                   	push   eax
c001a0fb:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001a100:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a106:	e8 49 67 ff ff       	call   c0010854 <VgaText::putx(unsigned int)>
c001a10b:	5b                   	pop    ebx
c001a10c:	58                   	pop    eax
c001a10d:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001a112:	68 ed b6 02 c0       	push   0xc002b6ed
c001a117:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a11d:	e8 78 67 ff ff       	call   c001089a <VgaText::puts(char const*)>
c001a122:	5a                   	pop    edx
c001a123:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001a128:	59                   	pop    ecx
c001a129:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a12f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a132:	50                   	push   eax
c001a133:	e8 1c 67 ff ff       	call   c0010854 <VgaText::putx(unsigned int)>
c001a138:	5b                   	pop    ebx
c001a139:	58                   	pop    eax
c001a13a:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001a13f:	68 04 b7 02 c0       	push   0xc002b704
c001a144:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a14a:	e8 4b 67 ff ff       	call   c001089a <VgaText::puts(char const*)>
c001a14f:	5a                   	pop    edx
c001a150:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001a155:	59                   	pop    ecx
c001a156:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a15c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a15f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a162:	50                   	push   eax
c001a163:	e8 ec 66 ff ff       	call   c0010854 <VgaText::putx(unsigned int)>
c001a168:	5b                   	pop    ebx
c001a169:	58                   	pop    eax
c001a16a:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001a16f:	68 04 b7 02 c0       	push   0xc002b704
c001a174:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a17a:	e8 1b 67 ff ff       	call   c001089a <VgaText::puts(char const*)>
c001a17f:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001a184:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a187:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a18d:	8b 12                	mov    edx,DWORD PTR [edx]
c001a18f:	59                   	pop    ecx
c001a190:	5b                   	pop    ebx
c001a191:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a194:	50                   	push   eax
c001a195:	e8 ba 66 ff ff       	call   c0010854 <VgaText::putx(unsigned int)>
c001a19a:	83 c4 10             	add    esp,0x10
c001a19d:	b2 fe                	mov    dl,0xfe
c001a19f:	e4 60                	in     al,0x60
c001a1a1:	3c 1c                	cmp    al,0x1c
c001a1a3:	74 04                	je     c001a1a9 <Krnl::panic(char const*)+0x33a>
c001a1a5:	3c 5a                	cmp    al,0x5a
c001a1a7:	75 f6                	jne    c001a19f <Krnl::panic(char const*)+0x330>
c001a1a9:	e4 64                	in     al,0x64
c001a1ab:	a8 02                	test   al,0x2
c001a1ad:	75 fa                	jne    c001a1a9 <Krnl::panic(char const*)+0x33a>
c001a1af:	88 d0                	mov    al,dl
c001a1b1:	e6 64                	out    0x64,al
c001a1b3:	fa                   	cli    
c001a1b4:	f4                   	hlt    
c001a1b5:	eb e8                	jmp    c001a19f <Krnl::panic(char const*)+0x330>
c001a1b7:	50                   	push   eax
c001a1b8:	50                   	push   eax
c001a1b9:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001a1be:	68 70 b7 02 c0       	push   0xc002b770
c001a1c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1c9:	e8 cc 66 ff ff       	call   c001089a <VgaText::puts(char const*)>
c001a1ce:	58                   	pop    eax
c001a1cf:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001a1d4:	5a                   	pop    edx
c001a1d5:	68 7e b6 02 c0       	push   0xc002b67e
c001a1da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1e0:	e8 b5 66 ff ff       	call   c001089a <VgaText::puts(char const*)>
c001a1e5:	59                   	pop    ecx
c001a1e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a1eb:	5b                   	pop    ebx
c001a1ec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a1ef:	83 c0 0c             	add    eax,0xc
c001a1f2:	50                   	push   eax
c001a1f3:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001a1f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1fe:	e8 97 66 ff ff       	call   c001089a <VgaText::puts(char const*)>
c001a203:	83 c4 10             	add    esp,0x10
c001a206:	e9 a3 fd ff ff       	jmp    c0019fae <Krnl::panic(char const*)+0x13f>

c001a20b <Net::switchEndian16(unsigned short)>:
c001a20b:	83 ec 04             	sub    esp,0x4
c001a20e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a212:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a216:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a21a:	c1 f8 08             	sar    eax,0x8
c001a21d:	89 c2                	mov    edx,eax
c001a21f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a223:	c1 e0 08             	shl    eax,0x8
c001a226:	09 d0                	or     eax,edx
c001a228:	83 c4 04             	add    esp,0x4
c001a22b:	c3                   	ret    

c001a22c <Net::switchEndian32(unsigned int)>:
c001a22c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a230:	c1 e8 18             	shr    eax,0x18
c001a233:	89 c2                	mov    edx,eax
c001a235:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a239:	c1 e0 08             	shl    eax,0x8
c001a23c:	25 00 00 ff 00       	and    eax,0xff0000
c001a241:	09 c2                	or     edx,eax
c001a243:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a247:	c1 e8 08             	shr    eax,0x8
c001a24a:	25 00 ff 00 00       	and    eax,0xff00
c001a24f:	09 c2                	or     edx,eax
c001a251:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a255:	c1 e0 18             	shl    eax,0x18
c001a258:	09 d0                	or     eax,edx
c001a25a:	c3                   	ret    

c001a25b <Net::crc32Calc(unsigned char*, int)>:
c001a25b:	83 ec 10             	sub    esp,0x10
c001a25e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a263:	75 07                	jne    c001a26c <Net::crc32Calc(unsigned char*, int)+0x11>
c001a265:	b8 00 00 00 00       	mov    eax,0x0
c001a26a:	eb 7c                	jmp    c001a2e8 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a26c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a271:	7f 07                	jg     c001a27a <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a273:	b8 00 00 00 00       	mov    eax,0x0
c001a278:	eb 6e                	jmp    c001a2e8 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a27a:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a282:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a28a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a28e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a292:	7d 4e                	jge    c001a2e2 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a294:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a298:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a29c:	01 d0                	add    eax,edx
c001a29e:	8a 00                	mov    al,BYTE PTR [eax]
c001a2a0:	0f b6 c0             	movzx  eax,al
c001a2a3:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a2a7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a2af:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a2b4:	7f 26                	jg     c001a2dc <Net::crc32Calc(unsigned char*, int)+0x81>
c001a2b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2ba:	83 e0 01             	and    eax,0x1
c001a2bd:	74 0d                	je     c001a2cc <Net::crc32Calc(unsigned char*, int)+0x71>
c001a2bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2c3:	d1 e8                	shr    eax,1
c001a2c5:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a2ca:	eb 06                	jmp    c001a2d2 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a2cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2d0:	d1 e8                	shr    eax,1
c001a2d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a2d6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a2da:	eb d3                	jmp    c001a2af <Net::crc32Calc(unsigned char*, int)+0x54>
c001a2dc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a2e0:	eb a8                	jmp    c001a28a <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a2e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2e6:	f7 d0                	not    eax
c001a2e8:	83 c4 10             	add    esp,0x10
c001a2eb:	c3                   	ret    

c001a2ec <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a2ec:	57                   	push   edi
c001a2ed:	56                   	push   esi
c001a2ee:	53                   	push   ebx
c001a2ef:	83 ec 60             	sub    esp,0x60
c001a2f2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2f9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a2fd:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a305:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a30a:	7f 1a                	jg     c001a326 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a30c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a313:	8d 50 01             	lea    edx,[eax+0x1]
c001a316:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a31d:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a320:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a324:	eb df                	jmp    c001a305 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a326:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a32d:	8d 50 01             	lea    edx,[eax+0x1]
c001a330:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a337:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a33a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a341:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a345:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a349:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a34d:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a355:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a359:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a35d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a361:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a365:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a369:	89 c6                	mov    esi,eax
c001a36b:	89 d7                	mov    edi,edx
c001a36d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a36f:	89 c8                	mov    eax,ecx
c001a371:	89 fa                	mov    edx,edi
c001a373:	89 f3                	mov    ebx,esi
c001a375:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a379:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a37d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a380:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a388:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a38f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a393:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a397:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a39b:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a3a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a3a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a3ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a3af:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a3b3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a3b7:	89 c6                	mov    esi,eax
c001a3b9:	89 d7                	mov    edi,edx
c001a3bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3bd:	89 c8                	mov    eax,ecx
c001a3bf:	89 fa                	mov    edx,edi
c001a3c1:	89 f3                	mov    ebx,esi
c001a3c3:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a3c7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a3cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a3cf:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a3d7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a3de:	0f b7 c0             	movzx  eax,ax
c001a3e1:	c1 f8 08             	sar    eax,0x8
c001a3e4:	89 c1                	mov    ecx,eax
c001a3e6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3ed:	8d 50 01             	lea    edx,[eax+0x1]
c001a3f0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a3f7:	88 ca                	mov    dl,cl
c001a3f9:	88 10                	mov    BYTE PTR [eax],dl
c001a3fb:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a402:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a409:	8d 48 01             	lea    ecx,[eax+0x1]
c001a40c:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a413:	88 10                	mov    BYTE PTR [eax],dl
c001a415:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a419:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a41d:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a424:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a428:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a42c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a430:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a434:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a438:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a43c:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a440:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a444:	89 c6                	mov    esi,eax
c001a446:	89 d7                	mov    edi,edx
c001a448:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a44a:	89 c8                	mov    eax,ecx
c001a44c:	89 fa                	mov    edx,edi
c001a44e:	89 f3                	mov    ebx,esi
c001a450:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a454:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a458:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a45c:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a460:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a467:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a46e:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a472:	50                   	push   eax
c001a473:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a477:	e8 df fd ff ff       	call   c001a25b <Net::crc32Calc(unsigned char*, int)>
c001a47c:	83 c4 08             	add    esp,0x8
c001a47f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a483:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a487:	c1 e8 18             	shr    eax,0x18
c001a48a:	89 c1                	mov    ecx,eax
c001a48c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a493:	8d 50 01             	lea    edx,[eax+0x1]
c001a496:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a49d:	88 ca                	mov    dl,cl
c001a49f:	88 10                	mov    BYTE PTR [eax],dl
c001a4a1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a4a5:	c1 e8 10             	shr    eax,0x10
c001a4a8:	89 c1                	mov    ecx,eax
c001a4aa:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4b1:	8d 50 01             	lea    edx,[eax+0x1]
c001a4b4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a4bb:	88 ca                	mov    dl,cl
c001a4bd:	88 10                	mov    BYTE PTR [eax],dl
c001a4bf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a4c3:	c1 e8 08             	shr    eax,0x8
c001a4c6:	89 c1                	mov    ecx,eax
c001a4c8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4cf:	8d 50 01             	lea    edx,[eax+0x1]
c001a4d2:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a4d9:	88 ca                	mov    dl,cl
c001a4db:	88 10                	mov    BYTE PTR [eax],dl
c001a4dd:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4e4:	8d 50 01             	lea    edx,[eax+0x1]
c001a4e7:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a4ee:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a4f2:	88 10                	mov    BYTE PTR [eax],dl
c001a4f4:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a4f8:	83 c4 60             	add    esp,0x60
c001a4fb:	5b                   	pop    ebx
c001a4fc:	5e                   	pop    esi
c001a4fd:	5f                   	pop    edi
c001a4fe:	c3                   	ret    

c001a4ff <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a4ff:	57                   	push   edi
c001a500:	56                   	push   esi
c001a501:	53                   	push   ebx
c001a502:	83 ec 70             	sub    esp,0x70
c001a505:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a50c:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a510:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a518:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a51f:	83 c0 0e             	add    eax,0xe
c001a522:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a526:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a52d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a531:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a539:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a53d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a541:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a545:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a549:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a54d:	89 c6                	mov    esi,eax
c001a54f:	89 d7                	mov    edi,edx
c001a551:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a553:	89 c8                	mov    eax,ecx
c001a555:	89 fa                	mov    edx,edi
c001a557:	89 f3                	mov    ebx,esi
c001a559:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a561:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a565:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a56d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a574:	83 c0 08             	add    eax,0x8
c001a577:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a57b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a582:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a586:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a58e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a592:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a596:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a59a:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a59e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a5a2:	89 c6                	mov    esi,eax
c001a5a4:	89 d7                	mov    edi,edx
c001a5a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a5a8:	89 c8                	mov    eax,ecx
c001a5aa:	89 fa                	mov    edx,edi
c001a5ac:	89 f3                	mov    ebx,esi
c001a5ae:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a5b2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a5b6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a5ba:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a5c2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5c9:	8d 50 01             	lea    edx,[eax+0x1]
c001a5cc:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a5d3:	8a 00                	mov    al,BYTE PTR [eax]
c001a5d5:	0f b6 c0             	movzx  eax,al
c001a5d8:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a5dd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5e4:	8d 50 01             	lea    edx,[eax+0x1]
c001a5e7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a5ee:	8a 00                	mov    al,BYTE PTR [eax]
c001a5f0:	0f b6 c0             	movzx  eax,al
c001a5f3:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a5f8:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a5fd:	c1 e0 08             	shl    eax,0x8
c001a600:	89 c2                	mov    edx,eax
c001a602:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a606:	09 d0                	or     eax,edx
c001a608:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a60f:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a613:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a61b:	75 46                	jne    c001a663 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a61d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a624:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a627:	66 3d dc 05          	cmp    ax,0x5dc
c001a62b:	77 16                	ja     c001a643 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a62d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a634:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a637:	0f b7 c0             	movzx  eax,ax
c001a63a:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a641:	eb 20                	jmp    c001a663 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a643:	83 ec 0c             	sub    esp,0xc
c001a646:	68 48 b8 02 c0       	push   0xc002b848
c001a64b:	e8 b3 80 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001a650:	83 c4 10             	add    esp,0x10
c001a653:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a65a:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a65e:	e9 17 01 00 00       	jmp    c001a77a <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a663:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a66a:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a671:	8b 12                	mov    edx,DWORD PTR [edx]
c001a673:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a677:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a67e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a682:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a686:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a68a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a68e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a692:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a696:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a69a:	89 c6                	mov    esi,eax
c001a69c:	89 d7                	mov    edi,edx
c001a69e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a6a0:	89 c8                	mov    eax,ecx
c001a6a2:	89 fa                	mov    edx,edi
c001a6a4:	89 f3                	mov    ebx,esi
c001a6a6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a6aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a6ae:	89 04 24             	mov    DWORD PTR [esp],eax
c001a6b1:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a6b8:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a6bf:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6c6:	8d 50 01             	lea    edx,[eax+0x1]
c001a6c9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6d0:	8a 00                	mov    al,BYTE PTR [eax]
c001a6d2:	0f b6 c0             	movzx  eax,al
c001a6d5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a6d9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6e0:	8d 50 01             	lea    edx,[eax+0x1]
c001a6e3:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6ea:	8a 00                	mov    al,BYTE PTR [eax]
c001a6ec:	0f b6 c0             	movzx  eax,al
c001a6ef:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a6f3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6fa:	8d 50 01             	lea    edx,[eax+0x1]
c001a6fd:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a704:	8a 00                	mov    al,BYTE PTR [eax]
c001a706:	0f b6 c0             	movzx  eax,al
c001a709:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a70d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a714:	8d 50 01             	lea    edx,[eax+0x1]
c001a717:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a71e:	8a 00                	mov    al,BYTE PTR [eax]
c001a720:	0f b6 c0             	movzx  eax,al
c001a723:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a727:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a72b:	c1 e0 18             	shl    eax,0x18
c001a72e:	89 c2                	mov    edx,eax
c001a730:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a734:	c1 e0 10             	shl    eax,0x10
c001a737:	09 c2                	or     edx,eax
c001a739:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a73d:	c1 e0 08             	shl    eax,0x8
c001a740:	09 d0                	or     eax,edx
c001a742:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a746:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a74a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a751:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a755:	83 e8 04             	sub    eax,0x4
c001a758:	83 ec 08             	sub    esp,0x8
c001a75b:	50                   	push   eax
c001a75c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a760:	e8 f6 fa ff ff       	call   c001a25b <Net::crc32Calc(unsigned char*, int)>
c001a765:	83 c4 10             	add    esp,0x10
c001a768:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a76c:	0f 94 c2             	sete   dl
c001a76f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a776:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a779:	90                   	nop
c001a77a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a781:	83 c4 70             	add    esp,0x70
c001a784:	5b                   	pop    ebx
c001a785:	5e                   	pop    esi
c001a786:	5f                   	pop    edi
c001a787:	c2 04 00             	ret    0x4

c001a78a <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a78a:	55                   	push   ebp
c001a78b:	57                   	push   edi
c001a78c:	56                   	push   esi
c001a78d:	53                   	push   ebx
c001a78e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a794:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a79b:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a79d:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a7a0:	80 fb 40             	cmp    bl,0x40
c001a7a3:	75 1b                	jne    c001a7c0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a7a5:	8a 16                	mov    dl,BYTE PTR [esi]
c001a7a7:	84 d2                	test   dl,dl
c001a7a9:	0f 84 f1 00 00 00    	je     c001a8a0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7af:	8d 46 01             	lea    eax,[esi+0x1]
c001a7b2:	80 fa 3a             	cmp    dl,0x3a
c001a7b5:	74 04                	je     c001a7bb <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a7b7:	89 c6                	mov    esi,eax
c001a7b9:	eb ea                	jmp    c001a7a5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a7bb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a7be:	89 c6                	mov    esi,eax
c001a7c0:	50                   	push   eax
c001a7c1:	6a 40                	push   0x40
c001a7c3:	6a 00                	push   0x0
c001a7c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a7c9:	50                   	push   eax
c001a7ca:	e8 81 5f fe ff       	call   c0000750 <memset>
c001a7cf:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a7d6:	31 c0                	xor    eax,eax
c001a7d8:	83 c4 10             	add    esp,0x10
c001a7db:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a7dd:	84 c9                	test   cl,cl
c001a7df:	0f 84 bb 00 00 00    	je     c001a8a0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7e5:	3d c7 00 00 00       	cmp    eax,0xc7
c001a7ea:	0f 8f b0 00 00 00    	jg     c001a8a0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7f0:	80 f9 0a             	cmp    cl,0xa
c001a7f3:	0f 85 98 00 00 00    	jne    c001a891 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a7f9:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a7fe:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a802:	a8 df                	test   al,0xdf
c001a804:	0f 94 c1             	sete   cl
c001a807:	3c 23                	cmp    al,0x23
c001a809:	0f 94 c2             	sete   dl
c001a80c:	08 d1                	or     cl,dl
c001a80e:	75 4a                	jne    c001a85a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a810:	8d 50 f7             	lea    edx,[eax-0x9]
c001a813:	80 fa 01             	cmp    dl,0x1
c001a816:	76 42                	jbe    c001a85a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a818:	3c 5b                	cmp    al,0x5b
c001a81a:	75 42                	jne    c001a85e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a81c:	80 fb 40             	cmp    bl,0x40
c001a81f:	75 39                	jne    c001a85a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a821:	83 ec 0c             	sub    esp,0xc
c001a824:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a828:	52                   	push   edx
c001a829:	e8 3e 5f fe ff       	call   c000076c <strlen>
c001a82e:	83 c4 10             	add    esp,0x10
c001a831:	83 f8 3f             	cmp    eax,0x3f
c001a834:	77 6a                	ja     c001a8a0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a836:	50                   	push   eax
c001a837:	50                   	push   eax
c001a838:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a83c:	52                   	push   edx
c001a83d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a841:	52                   	push   edx
c001a842:	e8 c5 5f fe ff       	call   c000080c <strcpy>
c001a847:	58                   	pop    eax
c001a848:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a84c:	52                   	push   edx
c001a84d:	e8 1a 5f fe ff       	call   c000076c <strlen>
c001a852:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a857:	83 c4 10             	add    esp,0x10
c001a85a:	31 d2                	xor    edx,edx
c001a85c:	eb 3a                	jmp    c001a898 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a85e:	80 fb 40             	cmp    bl,0x40
c001a861:	74 06                	je     c001a869 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a863:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a867:	eb 20                	jmp    c001a889 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a869:	50                   	push   eax
c001a86a:	50                   	push   eax
c001a86b:	55                   	push   ebp
c001a86c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a870:	50                   	push   eax
c001a871:	e8 22 60 fe ff       	call   c0000898 <strcmp>
c001a876:	83 c4 10             	add    esp,0x10
c001a879:	85 c0                	test   eax,eax
c001a87b:	75 dd                	jne    c001a85a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a87d:	eb e4                	jmp    c001a863 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a87f:	8d 50 01             	lea    edx,[eax+0x1]
c001a882:	80 f9 3d             	cmp    cl,0x3d
c001a885:	74 1d                	je     c001a8a4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a887:	89 d0                	mov    eax,edx
c001a889:	8a 08                	mov    cl,BYTE PTR [eax]
c001a88b:	84 c9                	test   cl,cl
c001a88d:	75 f0                	jne    c001a87f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a88f:	eb 0f                	jmp    c001a8a0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a891:	8d 50 01             	lea    edx,[eax+0x1]
c001a894:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a898:	47                   	inc    edi
c001a899:	89 d0                	mov    eax,edx
c001a89b:	e9 3b ff ff ff       	jmp    c001a7db <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a8a0:	31 c0                	xor    eax,eax
c001a8a2:	eb 33                	jmp    c001a8d7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a8a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a8a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a8ab:	50                   	push   eax
c001a8ac:	50                   	push   eax
c001a8ad:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a8b1:	50                   	push   eax
c001a8b2:	56                   	push   esi
c001a8b3:	e8 e0 5f fe ff       	call   c0000898 <strcmp>
c001a8b8:	83 c4 10             	add    esp,0x10
c001a8bb:	85 c0                	test   eax,eax
c001a8bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a8c1:	75 97                	jne    c001a85a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a8c3:	51                   	push   ecx
c001a8c4:	51                   	push   ecx
c001a8c5:	52                   	push   edx
c001a8c6:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a8cd:	e8 3a 5f fe ff       	call   c000080c <strcpy>
c001a8d2:	83 c4 10             	add    esp,0x10
c001a8d5:	b0 01                	mov    al,0x1
c001a8d7:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a8dd:	5b                   	pop    ebx
c001a8de:	5e                   	pop    esi
c001a8df:	5f                   	pop    edi
c001a8e0:	5d                   	pop    ebp
c001a8e1:	c3                   	ret    

c001a8e2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a8e2:	57                   	push   edi
c001a8e3:	56                   	push   esi
c001a8e4:	53                   	push   ebx
c001a8e5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a8eb:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a8f2:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a8f9:	53                   	push   ebx
c001a8fa:	e8 6d 5e fe ff       	call   c000076c <strlen>
c001a8ff:	89 34 24             	mov    DWORD PTR [esp],esi
c001a902:	89 c7                	mov    edi,eax
c001a904:	e8 63 5e fe ff       	call   c000076c <strlen>
c001a909:	83 c4 10             	add    esp,0x10
c001a90c:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a910:	3d ff 00 00 00       	cmp    eax,0xff
c001a915:	0f 87 d3 00 00 00    	ja     c001a9ee <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a91b:	57                   	push   edi
c001a91c:	57                   	push   edi
c001a91d:	56                   	push   esi
c001a91e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a922:	56                   	push   esi
c001a923:	e8 e4 5e fe ff       	call   c000080c <strcpy>
c001a928:	58                   	pop    eax
c001a929:	5a                   	pop    edx
c001a92a:	68 ea bb 02 c0       	push   0xc002bbea
c001a92f:	56                   	push   esi
c001a930:	e8 17 60 fe ff       	call   c000094c <strcat>
c001a935:	59                   	pop    ecx
c001a936:	5f                   	pop    edi
c001a937:	53                   	push   ebx
c001a938:	56                   	push   esi
c001a939:	e8 0e 60 fe ff       	call   c000094c <strcat>
c001a93e:	58                   	pop    eax
c001a93f:	5a                   	pop    edx
c001a940:	68 94 b8 02 c0       	push   0xc002b894
c001a945:	56                   	push   esi
c001a946:	e8 01 60 fe ff       	call   c000094c <strcat>
c001a94b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a952:	e8 42 4c ff ff       	call   c000f599 <malloc>
c001a957:	83 c4 0c             	add    esp,0xc
c001a95a:	89 c3                	mov    ebx,eax
c001a95c:	ff 35 30 0f 03 c0    	push   DWORD PTR ds:0xc0030f30
c001a962:	56                   	push   esi
c001a963:	50                   	push   eax
c001a964:	e8 f9 82 ff ff       	call   c0012c62 <File::File(char const*, Process*)>
c001a969:	83 c4 10             	add    esp,0x10
c001a96c:	85 db                	test   ebx,ebx
c001a96e:	74 7e                	je     c001a9ee <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a970:	51                   	push   ecx
c001a971:	51                   	push   ecx
c001a972:	6a 01                	push   0x1
c001a974:	53                   	push   ebx
c001a975:	e8 4c 83 ff ff       	call   c0012cc6 <File::open(FileOpenMode)>
c001a97a:	83 c4 10             	add    esp,0x10
c001a97d:	85 c0                	test   eax,eax
c001a97f:	74 08                	je     c001a989 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a981:	83 ec 0c             	sub    esp,0xc
c001a984:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a986:	53                   	push   ebx
c001a987:	eb 5f                	jmp    c001a9e8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a989:	52                   	push   edx
c001a98a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a98e:	50                   	push   eax
c001a98f:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a993:	50                   	push   eax
c001a994:	53                   	push   ebx
c001a995:	e8 d8 85 ff ff       	call   c0012f72 <File::stat(unsigned long long*, bool*)>
c001a99a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a99e:	83 c4 10             	add    esp,0x10
c001a9a1:	89 c1                	mov    ecx,eax
c001a9a3:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a9a7:	74 31                	je     c001a9da <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a9a9:	83 ec 0c             	sub    esp,0xc
c001a9ac:	50                   	push   eax
c001a9ad:	e8 e7 4b ff ff       	call   c000f599 <malloc>
c001a9b2:	89 c6                	mov    esi,eax
c001a9b4:	58                   	pop    eax
c001a9b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9b7:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a9bb:	52                   	push   edx
c001a9bc:	56                   	push   esi
c001a9bd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a9c1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a9c5:	53                   	push   ebx
c001a9c6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a9c9:	83 c4 20             	add    esp,0x20
c001a9cc:	85 c0                	test   eax,eax
c001a9ce:	75 0a                	jne    c001a9da <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a9d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a9d4:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a9d8:	74 18                	je     c001a9f2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a9da:	83 ec 0c             	sub    esp,0xc
c001a9dd:	53                   	push   ebx
c001a9de:	e8 41 83 ff ff       	call   c0012d24 <File::close()>
c001a9e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9e8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a9eb:	83 c4 10             	add    esp,0x10
c001a9ee:	31 c0                	xor    eax,eax
c001a9f0:	eb 3b                	jmp    c001aa2d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a9f2:	83 ec 0c             	sub    esp,0xc
c001a9f5:	53                   	push   ebx
c001a9f6:	e8 29 83 ff ff       	call   c0012d24 <File::close()>
c001a9fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa00:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aa03:	83 c4 0c             	add    esp,0xc
c001aa06:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aa0d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aa14:	56                   	push   esi
c001aa15:	e8 70 fd ff ff       	call   c001a78a <Reg::findLineFromLoadedData(char*, char*, char*)>
c001aa1a:	89 34 24             	mov    DWORD PTR [esp],esi
c001aa1d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001aa21:	e8 83 4b ff ff       	call   c000f5a9 <free>
c001aa26:	83 c4 10             	add    esp,0x10
c001aa29:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001aa2d:	81 c4 20 01 00 00    	add    esp,0x120
c001aa33:	5b                   	pop    ebx
c001aa34:	5e                   	pop    esi
c001aa35:	5f                   	pop    edi
c001aa36:	c3                   	ret    

c001aa37 <Reg::getLine(char*, char*, char*)>:
c001aa37:	57                   	push   edi
c001aa38:	56                   	push   esi
c001aa39:	53                   	push   ebx
c001aa3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa3e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aa42:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aa46:	57                   	push   edi
c001aa47:	56                   	push   esi
c001aa48:	53                   	push   ebx
c001aa49:	68 99 b8 02 c0       	push   0xc002b899
c001aa4e:	e8 8f fe ff ff       	call   c001a8e2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa53:	83 c4 10             	add    esp,0x10
c001aa56:	84 c0                	test   al,al
c001aa58:	75 10                	jne    c001aa6a <Reg::getLine(char*, char*, char*)+0x33>
c001aa5a:	57                   	push   edi
c001aa5b:	56                   	push   esi
c001aa5c:	53                   	push   ebx
c001aa5d:	68 be b8 02 c0       	push   0xc002b8be
c001aa62:	e8 7b fe ff ff       	call   c001a8e2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa67:	83 c4 10             	add    esp,0x10
c001aa6a:	5b                   	pop    ebx
c001aa6b:	5e                   	pop    esi
c001aa6c:	5f                   	pop    edi
c001aa6d:	c3                   	ret    

c001aa6e <Reg::readInt(char*, char*, int*)>:
c001aa6e:	55                   	push   ebp
c001aa6f:	57                   	push   edi
c001aa70:	56                   	push   esi
c001aa71:	53                   	push   ebx
c001aa72:	81 ec f0 00 00 00    	sub    esp,0xf0
c001aa78:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001aa7c:	57                   	push   edi
c001aa7d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa84:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa8b:	e8 a7 ff ff ff       	call   c001aa37 <Reg::getLine(char*, char*, char*)>
c001aa90:	83 c4 10             	add    esp,0x10
c001aa93:	84 c0                	test   al,al
c001aa95:	0f 84 b3 00 00 00    	je     c001ab4e <Reg::readInt(char*, char*, int*)+0xe0>
c001aa9b:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001aa9f:	80 fa 2b             	cmp    dl,0x2b
c001aaa2:	74 0c                	je     c001aab0 <Reg::readInt(char*, char*, int*)+0x42>
c001aaa4:	80 fa 2d             	cmp    dl,0x2d
c001aaa7:	75 0e                	jne    c001aab7 <Reg::readInt(char*, char*, int*)+0x49>
c001aaa9:	ba 01 00 00 00       	mov    edx,0x1
c001aaae:	eb 0b                	jmp    c001aabb <Reg::readInt(char*, char*, int*)+0x4d>
c001aab0:	ba 01 00 00 00       	mov    edx,0x1
c001aab5:	eb 02                	jmp    c001aab9 <Reg::readInt(char*, char*, int*)+0x4b>
c001aab7:	31 d2                	xor    edx,edx
c001aab9:	31 c0                	xor    eax,eax
c001aabb:	be 0a 00 00 00       	mov    esi,0xa
c001aac0:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001aac5:	75 20                	jne    c001aae7 <Reg::readInt(char*, char*, int*)+0x79>
c001aac7:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001aacb:	80 f9 78             	cmp    cl,0x78
c001aace:	75 0a                	jne    c001aada <Reg::readInt(char*, char*, int*)+0x6c>
c001aad0:	83 c2 02             	add    edx,0x2
c001aad3:	be 10 00 00 00       	mov    esi,0x10
c001aad8:	eb 0d                	jmp    c001aae7 <Reg::readInt(char*, char*, int*)+0x79>
c001aada:	80 f9 62             	cmp    cl,0x62
c001aadd:	75 08                	jne    c001aae7 <Reg::readInt(char*, char*, int*)+0x79>
c001aadf:	83 c2 02             	add    edx,0x2
c001aae2:	be 02 00 00 00       	mov    esi,0x2
c001aae7:	01 d7                	add    edi,edx
c001aae9:	31 d2                	xor    edx,edx
c001aaeb:	8a 1f                	mov    bl,BYTE PTR [edi]
c001aaed:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001aaf1:	80 fb 0d             	cmp    bl,0xd
c001aaf4:	0f 94 c3             	sete   bl
c001aaf7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001aafc:	0f 94 c1             	sete   cl
c001aaff:	08 cb                	or     bl,cl
c001ab01:	75 3a                	jne    c001ab3d <Reg::readInt(char*, char*, int*)+0xcf>
c001ab03:	0f af d6             	imul   edx,esi
c001ab06:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001ab0b:	83 fe 10             	cmp    esi,0x10
c001ab0e:	75 26                	jne    c001ab36 <Reg::readInt(char*, char*, int*)+0xc8>
c001ab10:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ab14:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001ab17:	89 e9                	mov    ecx,ebp
c001ab19:	80 f9 05             	cmp    cl,0x5
c001ab1c:	77 06                	ja     c001ab24 <Reg::readInt(char*, char*, int*)+0xb6>
c001ab1e:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001ab22:	eb 16                	jmp    c001ab3a <Reg::readInt(char*, char*, int*)+0xcc>
c001ab24:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ab28:	83 e9 61             	sub    ecx,0x61
c001ab2b:	80 f9 05             	cmp    cl,0x5
c001ab2e:	77 06                	ja     c001ab36 <Reg::readInt(char*, char*, int*)+0xc8>
c001ab30:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001ab34:	eb 04                	jmp    c001ab3a <Reg::readInt(char*, char*, int*)+0xcc>
c001ab36:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001ab3a:	47                   	inc    edi
c001ab3b:	eb ae                	jmp    c001aaeb <Reg::readInt(char*, char*, int*)+0x7d>
c001ab3d:	84 c0                	test   al,al
c001ab3f:	74 02                	je     c001ab43 <Reg::readInt(char*, char*, int*)+0xd5>
c001ab41:	f7 da                	neg    edx
c001ab43:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001ab4a:	89 10                	mov    DWORD PTR [eax],edx
c001ab4c:	88 d8                	mov    al,bl
c001ab4e:	81 c4 ec 00 00 00    	add    esp,0xec
c001ab54:	5b                   	pop    ebx
c001ab55:	5e                   	pop    esi
c001ab56:	5f                   	pop    edi
c001ab57:	5d                   	pop    ebp
c001ab58:	c3                   	ret    

c001ab59 <Reg::readString(char*, char*, char*, int)>:
c001ab59:	57                   	push   edi
c001ab5a:	56                   	push   esi
c001ab5b:	53                   	push   ebx
c001ab5c:	81 ec d4 00 00 00    	sub    esp,0xd4
c001ab62:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001ab69:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001ab6d:	57                   	push   edi
c001ab6e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab75:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab7c:	e8 b6 fe ff ff       	call   c001aa37 <Reg::getLine(char*, char*, char*)>
c001ab81:	83 c4 10             	add    esp,0x10
c001ab84:	89 c6                	mov    esi,eax
c001ab86:	84 c0                	test   al,al
c001ab88:	74 44                	je     c001abce <Reg::readString(char*, char*, char*, int)+0x75>
c001ab8a:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001ab91:	31 c0                	xor    eax,eax
c001ab93:	4a                   	dec    edx
c001ab94:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001ab97:	84 c9                	test   cl,cl
c001ab99:	74 0f                	je     c001abaa <Reg::readString(char*, char*, char*, int)+0x51>
c001ab9b:	39 c2                	cmp    edx,eax
c001ab9d:	7e 0b                	jle    c001abaa <Reg::readString(char*, char*, char*, int)+0x51>
c001ab9f:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001aba2:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001aba7:	40                   	inc    eax
c001aba8:	eb ea                	jmp    c001ab94 <Reg::readString(char*, char*, char*, int)+0x3b>
c001abaa:	83 ec 0c             	sub    esp,0xc
c001abad:	53                   	push   ebx
c001abae:	e8 b9 5b fe ff       	call   c000076c <strlen>
c001abb3:	83 c4 10             	add    esp,0x10
c001abb6:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001abbb:	75 11                	jne    c001abce <Reg::readString(char*, char*, char*, int)+0x75>
c001abbd:	83 ec 0c             	sub    esp,0xc
c001abc0:	53                   	push   ebx
c001abc1:	e8 a6 5b fe ff       	call   c000076c <strlen>
c001abc6:	83 c4 10             	add    esp,0x10
c001abc9:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001abce:	81 c4 d0 00 00 00    	add    esp,0xd0
c001abd4:	89 f0                	mov    eax,esi
c001abd6:	5b                   	pop    ebx
c001abd7:	5e                   	pop    esi
c001abd8:	5f                   	pop    edi
c001abd9:	c3                   	ret    

c001abda <Reg::readBool(char*, char*, bool*)>:
c001abda:	83 ec 20             	sub    esp,0x20
c001abdd:	8d 44 24 10          	lea    eax,[esp+0x10]
c001abe1:	50                   	push   eax
c001abe2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abe6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abea:	e8 7f fe ff ff       	call   c001aa6e <Reg::readInt(char*, char*, int*)>
c001abef:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001abf4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001abf8:	0f 95 02             	setne  BYTE PTR [edx]
c001abfb:	83 c4 2c             	add    esp,0x2c
c001abfe:	c3                   	ret    

c001abff <Reg::readBoolWithDefault(char*, char*, bool)>:
c001abff:	53                   	push   ebx
c001ac00:	83 ec 1c             	sub    esp,0x1c
c001ac03:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ac07:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ac0b:	50                   	push   eax
c001ac0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac14:	e8 c1 ff ff ff       	call   c001abda <Reg::readBool(char*, char*, bool*)>
c001ac19:	83 c4 10             	add    esp,0x10
c001ac1c:	84 c0                	test   al,al
c001ac1e:	74 04                	je     c001ac24 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001ac20:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001ac24:	88 d8                	mov    al,bl
c001ac26:	83 c4 18             	add    esp,0x18
c001ac29:	5b                   	pop    ebx
c001ac2a:	c3                   	ret    

c001ac2b <Reg::readIntWithDefault(char*, char*, int)>:
c001ac2b:	53                   	push   ebx
c001ac2c:	83 ec 1c             	sub    esp,0x1c
c001ac2f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ac33:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ac37:	50                   	push   eax
c001ac38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac40:	e8 29 fe ff ff       	call   c001aa6e <Reg::readInt(char*, char*, int*)>
c001ac45:	83 c4 10             	add    esp,0x10
c001ac48:	84 c0                	test   al,al
c001ac4a:	74 04                	je     c001ac50 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001ac4c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ac50:	89 d8                	mov    eax,ebx
c001ac52:	83 c4 18             	add    esp,0x18
c001ac55:	5b                   	pop    ebx
c001ac56:	c3                   	ret    

c001ac57 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ac57:	57                   	push   edi
c001ac58:	56                   	push   esi
c001ac59:	56                   	push   esi
c001ac5a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ac5e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ac62:	56                   	push   esi
c001ac63:	57                   	push   edi
c001ac64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac6c:	e8 e8 fe ff ff       	call   c001ab59 <Reg::readString(char*, char*, char*, int)>
c001ac71:	83 c4 10             	add    esp,0x10
c001ac74:	84 c0                	test   al,al
c001ac76:	75 1a                	jne    c001ac92 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001ac78:	51                   	push   ecx
c001ac79:	56                   	push   esi
c001ac7a:	6a 00                	push   0x0
c001ac7c:	57                   	push   edi
c001ac7d:	e8 ce 5a fe ff       	call   c0000750 <memset>
c001ac82:	8d 4e ff             	lea    ecx,[esi-0x1]
c001ac85:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ac89:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac8b:	83 c4 10             	add    esp,0x10
c001ac8e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ac92:	89 f8                	mov    eax,edi
c001ac94:	5a                   	pop    edx
c001ac95:	5e                   	pop    esi
c001ac96:	5f                   	pop    edi
c001ac97:	c3                   	ret    

c001ac98 <Sys::eject(regs*)>:
c001ac98:	83 ec 0c             	sub    esp,0xc
c001ac9b:	83 ca ff             	or     edx,0xffffffff
c001ac9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aca2:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001aca5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001acaa:	83 e9 41             	sub    ecx,0x41
c001acad:	83 f9 19             	cmp    ecx,0x19
c001acb0:	77 18                	ja     c001acca <Sys::eject(regs*)+0x32>
c001acb2:	8b 0c 8d e0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2020]
c001acb9:	85 c9                	test   ecx,ecx
c001acbb:	74 0d                	je     c001acca <Sys::eject(regs*)+0x32>
c001acbd:	83 ec 0c             	sub    esp,0xc
c001acc0:	51                   	push   ecx
c001acc1:	e8 28 b3 ff ff       	call   c0015fee <LogicalDisk::eject()>
c001acc6:	83 c4 10             	add    esp,0x10
c001acc9:	99                   	cdq    
c001acca:	83 c4 0c             	add    esp,0xc
c001accd:	c3                   	ret    

c001acce <Sys::exit(regs*)>:
c001acce:	83 ec 18             	sub    esp,0x18
c001acd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001acd5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001acd8:	e8 bc 35 00 00       	call   c001e299 <terminateTask(int)>
c001acdd:	83 c8 ff             	or     eax,0xffffffff
c001ace0:	83 c4 1c             	add    esp,0x1c
c001ace3:	89 c2                	mov    edx,eax
c001ace5:	c3                   	ret    

c001ace6 <Sys::getCwd(regs*)>:
c001ace6:	83 ec 10             	sub    esp,0x10
c001ace9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aced:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001acf0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001acf3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acf8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001acfb:	e8 64 7d ff ff       	call   c0012a64 <Fs::getcwd(Process*, char*, int)>
c001ad00:	83 c4 1c             	add    esp,0x1c
c001ad03:	99                   	cdq    
c001ad04:	c3                   	ret    

c001ad05 <Sys::getPID(regs*)>:
c001ad05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad0a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad0d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad0f:	99                   	cdq    
c001ad10:	c3                   	ret    

c001ad11 <Sys::getRAMData(regs*)>:
c001ad11:	8b 0d 34 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da34
c001ad17:	6b 05 30 da 02 c0 64 	imul   eax,DWORD PTR ds:0xc002da30,0x64
c001ad1e:	99                   	cdq    
c001ad1f:	f7 f9                	idiv   ecx
c001ad21:	c1 e0 18             	shl    eax,0x18
c001ad24:	09 c8                	or     eax,ecx
c001ad26:	99                   	cdq    
c001ad27:	c3                   	ret    

c001ad28 <Sys::getVGAPtr(regs*)>:
c001ad28:	55                   	push   ebp
c001ad29:	57                   	push   edi
c001ad2a:	56                   	push   esi
c001ad2b:	53                   	push   ebx
c001ad2c:	83 ec 18             	sub    esp,0x18
c001ad2f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad33:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ad36:	e8 aa 30 00 00       	call   c001dde5 <Thr::processFromPID(int)>
c001ad3b:	83 c4 10             	add    esp,0x10
c001ad3e:	89 c1                	mov    ecx,eax
c001ad40:	b8 01 00 00 00       	mov    eax,0x1
c001ad45:	85 c9                	test   ecx,ecx
c001ad47:	74 59                	je     c001ada2 <Sys::getVGAPtr(regs*)+0x7a>
c001ad49:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001ad4f:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001ad53:	74 0c                	je     c001ad61 <Sys::getVGAPtr(regs*)+0x39>
c001ad55:	83 ec 0c             	sub    esp,0xc
c001ad58:	53                   	push   ebx
c001ad59:	e8 2f 56 ff ff       	call   c001038d <setActiveTerminal(VgaText*)>
c001ad5e:	83 c4 10             	add    esp,0x10
c001ad61:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001ad64:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ad67:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001ad6c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad6e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ad71:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad74:	81 c3 82 00 00 00    	add    ebx,0x82
c001ad7a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001ad80:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad83:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001ad86:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001ad8c:	50                   	push   eax
c001ad8d:	50                   	push   eax
c001ad8e:	53                   	push   ebx
c001ad8f:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad92:	05 a8 0f 00 00       	add    eax,0xfa8
c001ad97:	50                   	push   eax
c001ad98:	e8 6f 5a fe ff       	call   c000080c <strcpy>
c001ad9d:	83 c4 10             	add    esp,0x10
c001ada0:	31 c0                	xor    eax,eax
c001ada2:	83 c4 0c             	add    esp,0xc
c001ada5:	31 d2                	xor    edx,edx
c001ada7:	5b                   	pop    ebx
c001ada8:	5e                   	pop    esi
c001ada9:	5f                   	pop    edi
c001adaa:	5d                   	pop    ebp
c001adab:	c3                   	ret    

c001adac <Sys::loadDLL(regs*)>:
c001adac:	56                   	push   esi
c001adad:	53                   	push   ebx
c001adae:	31 d2                	xor    edx,edx
c001adb0:	51                   	push   ecx
c001adb1:	b8 01 00 00 00       	mov    eax,0x1
c001adb6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001adba:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001adbe:	0f 84 8c 00 00 00    	je     c001ae50 <Sys::loadDLL(regs*)+0xa4>
c001adc4:	83 ec 0c             	sub    esp,0xc
c001adc7:	68 14 01 00 00       	push   0x114
c001adcc:	e8 c8 47 ff ff       	call   c000f599 <malloc>
c001add1:	83 c4 0c             	add    esp,0xc
c001add4:	89 c3                	mov    ebx,eax
c001add6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001addb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001adde:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ade1:	53                   	push   ebx
c001ade2:	e8 7b 7e ff ff       	call   c0012c62 <File::File(char const*, Process*)>
c001ade7:	83 c4 10             	add    esp,0x10
c001adea:	31 d2                	xor    edx,edx
c001adec:	b8 02 00 00 00       	mov    eax,0x2
c001adf1:	85 db                	test   ebx,ebx
c001adf3:	74 5b                	je     c001ae50 <Sys::loadDLL(regs*)+0xa4>
c001adf5:	83 ec 0c             	sub    esp,0xc
c001adf8:	53                   	push   ebx
c001adf9:	e8 36 81 ff ff       	call   c0012f34 <File::exists()>
c001adfe:	83 c4 10             	add    esp,0x10
c001ae01:	84 c0                	test   al,al
c001ae03:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae05:	75 11                	jne    c001ae18 <Sys::loadDLL(regs*)+0x6c>
c001ae07:	83 ec 0c             	sub    esp,0xc
c001ae0a:	53                   	push   ebx
c001ae0b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae0e:	83 c4 10             	add    esp,0x10
c001ae11:	b8 03 00 00 00       	mov    eax,0x3
c001ae16:	eb 36                	jmp    c001ae4e <Sys::loadDLL(regs*)+0xa2>
c001ae18:	83 ec 0c             	sub    esp,0xc
c001ae1b:	53                   	push   ebx
c001ae1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae1f:	58                   	pop    eax
c001ae20:	5a                   	pop    edx
c001ae21:	6a 00                	push   0x0
c001ae23:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ae26:	e8 0e 22 00 00       	call   c001d039 <Thr::loadDLL(char const*, bool)>
c001ae2b:	83 c4 10             	add    esp,0x10
c001ae2e:	89 c1                	mov    ecx,eax
c001ae30:	31 d2                	xor    edx,edx
c001ae32:	b8 04 00 00 00       	mov    eax,0x4
c001ae37:	85 c9                	test   ecx,ecx
c001ae39:	74 15                	je     c001ae50 <Sys::loadDLL(regs*)+0xa4>
c001ae3b:	53                   	push   ebx
c001ae3c:	53                   	push   ebx
c001ae3d:	ff 35 e8 d9 02 c0    	push   DWORD PTR ds:0xc002d9e8
c001ae43:	51                   	push   ecx
c001ae44:	e8 1b 24 00 00       	call   c001d264 <Thr::executeDLL(unsigned long, void*)>
c001ae49:	83 c4 10             	add    esp,0x10
c001ae4c:	31 c0                	xor    eax,eax
c001ae4e:	31 d2                	xor    edx,edx
c001ae50:	59                   	pop    ecx
c001ae51:	5b                   	pop    ebx
c001ae52:	5e                   	pop    esi
c001ae53:	c3                   	ret    

c001ae54 <Sys::read(regs*)>:
c001ae54:	57                   	push   edi
c001ae55:	56                   	push   esi
c001ae56:	53                   	push   ebx
c001ae57:	83 ec 10             	sub    esp,0x10
c001ae5a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae5e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ae61:	83 f8 02             	cmp    eax,0x2
c001ae64:	77 10                	ja     c001ae76 <Sys::read(regs*)+0x22>
c001ae66:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae6b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae6e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ae74:	eb 0e                	jmp    c001ae84 <Sys::read(regs*)+0x30>
c001ae76:	83 ec 0c             	sub    esp,0xc
c001ae79:	50                   	push   eax
c001ae7a:	e8 82 62 ff ff       	call   c0011101 <getFromFileDescriptor(int)>
c001ae7f:	83 c4 10             	add    esp,0x10
c001ae82:	89 c1                	mov    ecx,eax
c001ae84:	83 c8 ff             	or     eax,0xffffffff
c001ae87:	85 c9                	test   ecx,ecx
c001ae89:	89 c2                	mov    edx,eax
c001ae8b:	74 28                	je     c001aeb5 <Sys::read(regs*)+0x61>
c001ae8d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae95:	31 ff                	xor    edi,edi
c001ae97:	83 ec 0c             	sub    esp,0xc
c001ae9a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae9c:	8d 54 24 18          	lea    edx,[esp+0x18]
c001aea0:	52                   	push   edx
c001aea1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001aea4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001aea7:	57                   	push   edi
c001aea8:	56                   	push   esi
c001aea9:	51                   	push   ecx
c001aeaa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aead:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001aeb1:	83 c4 20             	add    esp,0x20
c001aeb4:	99                   	cdq    
c001aeb5:	83 c4 10             	add    esp,0x10
c001aeb8:	5b                   	pop    ebx
c001aeb9:	5e                   	pop    esi
c001aeba:	5f                   	pop    edi
c001aebb:	c3                   	ret    

c001aebc <Sys::sbrk(regs*)>:
c001aebc:	56                   	push   esi
c001aebd:	53                   	push   ebx
c001aebe:	50                   	push   eax
c001aebf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aec4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aec8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aecb:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001aece:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001aed4:	85 db                	test   ebx,ebx
c001aed6:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001aed9:	74 02                	je     c001aedd <Sys::sbrk(regs*)+0x21>
c001aedb:	79 06                	jns    c001aee3 <Sys::sbrk(regs*)+0x27>
c001aedd:	89 f0                	mov    eax,esi
c001aedf:	31 d2                	xor    edx,edx
c001aee1:	eb 2a                	jmp    c001af0d <Sys::sbrk(regs*)+0x51>
c001aee3:	83 c8 ff             	or     eax,0xffffffff
c001aee6:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001aeec:	89 c2                	mov    edx,eax
c001aeee:	77 1d                	ja     c001af0d <Sys::sbrk(regs*)+0x51>
c001aef0:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001aef6:	50                   	push   eax
c001aef7:	c1 ea 0c             	shr    edx,0xc
c001aefa:	68 07 0c 00 00       	push   0xc07
c001aeff:	52                   	push   edx
c001af00:	51                   	push   ecx
c001af01:	e8 10 6c ff ff       	call   c0011b16 <VAS::allocatePages(int, int)>
c001af06:	89 f0                	mov    eax,esi
c001af08:	31 d2                	xor    edx,edx
c001af0a:	83 c4 10             	add    esp,0x10
c001af0d:	59                   	pop    ecx
c001af0e:	5b                   	pop    ebx
c001af0f:	5e                   	pop    esi
c001af10:	c3                   	ret    

c001af11 <Sys::setCwd(regs*)>:
c001af11:	83 ec 14             	sub    esp,0x14
c001af14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001af18:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001af1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af20:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001af23:	e8 ab 80 ff ff       	call   c0012fd3 <Fs::setcwd(Process*, char*)>
c001af28:	83 c4 1c             	add    esp,0x1c
c001af2b:	99                   	cdq    
c001af2c:	c3                   	ret    

c001af2d <Sys::setTime(regs*)>:
c001af2d:	55                   	push   ebp
c001af2e:	31 c9                	xor    ecx,ecx
c001af30:	57                   	push   edi
c001af31:	bd 0c 00 00 00       	mov    ebp,0xc
c001af36:	56                   	push   esi
c001af37:	53                   	push   ebx
c001af38:	31 db                	xor    ebx,ebx
c001af3a:	83 ec 10             	sub    esp,0x10
c001af3d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001af41:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001af44:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001af47:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001af4a:	89 c2                	mov    edx,eax
c001af4c:	66 81 ef 6c 07       	sub    di,0x76c
c001af51:	83 e2 1f             	and    edx,0x1f
c001af54:	c1 e7 10             	shl    edi,0x10
c001af57:	42                   	inc    edx
c001af58:	c1 e8 05             	shr    eax,0x5
c001af5b:	88 d1                	mov    cl,dl
c001af5d:	31 d2                	xor    edx,edx
c001af5f:	f7 f5                	div    ebp
c001af61:	89 dd                	mov    ebp,ebx
c001af63:	88 d5                	mov    ch,dl
c001af65:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001af6b:	0f b7 c1             	movzx  eax,cx
c001af6e:	31 d2                	xor    edx,edx
c001af70:	09 f8                	or     eax,edi
c001af72:	bf 3c 00 00 00       	mov    edi,0x3c
c001af77:	89 c1                	mov    ecx,eax
c001af79:	89 f0                	mov    eax,esi
c001af7b:	f7 f7                	div    edi
c001af7d:	c1 e2 10             	shl    edx,0x10
c001af80:	09 d5                	or     ebp,edx
c001af82:	31 d2                	xor    edx,edx
c001af84:	89 eb                	mov    ebx,ebp
c001af86:	f7 f7                	div    edi
c001af88:	bf 10 0e 00 00       	mov    edi,0xe10
c001af8d:	88 d7                	mov    bh,dl
c001af8f:	89 f0                	mov    eax,esi
c001af91:	31 d2                	xor    edx,edx
c001af93:	f7 f7                	div    edi
c001af95:	bf 18 00 00 00       	mov    edi,0x18
c001af9a:	31 d2                	xor    edx,edx
c001af9c:	f7 f7                	div    edi
c001af9e:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c001afa3:	88 d3                	mov    bl,dl
c001afa5:	53                   	push   ebx
c001afa6:	51                   	push   ecx
c001afa7:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001afad:	e8 6a 88 ff ff       	call   c001381c <Clock::setTimeInDatetimeLocal(datetime_t)>
c001afb2:	83 c4 1c             	add    esp,0x1c
c001afb5:	83 f0 01             	xor    eax,0x1
c001afb8:	5b                   	pop    ebx
c001afb9:	0f b6 c0             	movzx  eax,al
c001afbc:	5e                   	pop    esi
c001afbd:	31 d2                	xor    edx,edx
c001afbf:	5f                   	pop    edi
c001afc0:	5d                   	pop    ebp
c001afc1:	c3                   	ret    

c001afc2 <Sys::timezone(regs*)>:
c001afc2:	53                   	push   ebx
c001afc3:	83 ec 08             	sub    esp,0x8
c001afc6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afca:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001afce:	75 17                	jne    c001afe7 <Sys::timezone(regs*)+0x25>
c001afd0:	83 ec 0c             	sub    esp,0xc
c001afd3:	68 d9 b8 02 c0       	push   0xc002b8d9
c001afd8:	e8 26 77 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001afdd:	83 c8 ff             	or     eax,0xffffffff
c001afe0:	83 c4 10             	add    esp,0x10
c001afe3:	89 c2                	mov    edx,eax
c001afe5:	eb 20                	jmp    c001b007 <Sys::timezone(regs*)+0x45>
c001afe7:	83 ec 0c             	sub    esp,0xc
c001afea:	68 ee b8 02 c0       	push   0xc002b8ee
c001afef:	e8 0f 77 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001aff4:	58                   	pop    eax
c001aff5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001aff8:	e8 81 85 ff ff       	call   c001357e <User::loadClockSettings(int)>
c001affd:	83 c4 10             	add    esp,0x10
c001b000:	b8 01 00 00 00       	mov    eax,0x1
c001b005:	31 d2                	xor    edx,edx
c001b007:	83 c4 08             	add    esp,0x8
c001b00a:	5b                   	pop    ebx
c001b00b:	c3                   	ret    

c001b00c <Sys::write(regs*)>:
c001b00c:	57                   	push   edi
c001b00d:	56                   	push   esi
c001b00e:	53                   	push   ebx
c001b00f:	83 ec 10             	sub    esp,0x10
c001b012:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b016:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b019:	83 f8 02             	cmp    eax,0x2
c001b01c:	77 10                	ja     c001b02e <Sys::write(regs*)+0x22>
c001b01e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b023:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b026:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b02c:	eb 0e                	jmp    c001b03c <Sys::write(regs*)+0x30>
c001b02e:	83 ec 0c             	sub    esp,0xc
c001b031:	50                   	push   eax
c001b032:	e8 ca 60 ff ff       	call   c0011101 <getFromFileDescriptor(int)>
c001b037:	83 c4 10             	add    esp,0x10
c001b03a:	89 c1                	mov    ecx,eax
c001b03c:	83 c8 ff             	or     eax,0xffffffff
c001b03f:	85 c9                	test   ecx,ecx
c001b041:	89 c2                	mov    edx,eax
c001b043:	74 28                	je     c001b06d <Sys::write(regs*)+0x61>
c001b045:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b04d:	31 ff                	xor    edi,edi
c001b04f:	83 ec 0c             	sub    esp,0xc
c001b052:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b054:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b058:	52                   	push   edx
c001b059:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b05c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b05f:	57                   	push   edi
c001b060:	56                   	push   esi
c001b061:	51                   	push   ecx
c001b062:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b065:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b069:	83 c4 20             	add    esp,0x20
c001b06c:	99                   	cdq    
c001b06d:	83 c4 10             	add    esp,0x10
c001b070:	5b                   	pop    ebx
c001b071:	5e                   	pop    esi
c001b072:	5f                   	pop    edi
c001b073:	c3                   	ret    

c001b074 <Sys::wsbe(regs*)>:
c001b074:	57                   	push   edi
c001b075:	b9 0b 00 00 00       	mov    ecx,0xb
c001b07a:	56                   	push   esi
c001b07b:	be 2d b9 02 c0       	mov    esi,0xc002b92d
c001b080:	53                   	push   ebx
c001b081:	83 ec 30             	sub    esp,0x30
c001b084:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b088:	fc                   	cld    
c001b089:	83 ec 0c             	sub    esp,0xc
c001b08c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b08e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b092:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b097:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b09a:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b0a0:	8b 06                	mov    eax,DWORD PTR [esi]
c001b0a2:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b0a5:	57                   	push   edi
c001b0a6:	e8 c1 56 fe ff       	call   c000076c <strlen>
c001b0ab:	5a                   	pop    edx
c001b0ac:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b0b0:	52                   	push   edx
c001b0b1:	31 d2                	xor    edx,edx
c001b0b3:	57                   	push   edi
c001b0b4:	52                   	push   edx
c001b0b5:	50                   	push   eax
c001b0b6:	56                   	push   esi
c001b0b7:	ff d3                	call   ebx
c001b0b9:	83 c4 14             	add    esp,0x14
c001b0bc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b0c0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b0c3:	e8 d1 31 00 00       	call   c001e299 <terminateTask(int)>
c001b0c8:	83 c4 40             	add    esp,0x40
c001b0cb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b0d0:	5b                   	pop    ebx
c001b0d1:	31 d2                	xor    edx,edx
c001b0d3:	5e                   	pop    esi
c001b0d4:	5f                   	pop    edi
c001b0d5:	c3                   	ret    

c001b0d6 <Sys::yield(regs*)>:
c001b0d6:	57                   	push   edi
c001b0d7:	56                   	push   esi
c001b0d8:	53                   	push   ebx
c001b0d9:	fa                   	cli    
c001b0da:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c001b0e0:	e8 14 29 00 00       	call   c001d9f9 <schedule()>
c001b0e5:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001b0ea:	48                   	dec    eax
c001b0eb:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001b0f0:	75 01                	jne    c001b0f3 <Sys::yield(regs*)+0x1d>
c001b0f2:	fb                   	sti    
c001b0f3:	8b 35 50 e0 02 c0    	mov    esi,DWORD PTR ds:0xc002e050
c001b0f9:	8b 3d 54 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e054
c001b0ff:	89 f0                	mov    eax,esi
c001b101:	89 fb                	mov    ebx,edi
c001b103:	89 f1                	mov    ecx,esi
c001b105:	c1 e0 07             	shl    eax,0x7
c001b108:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b10c:	25 80 30 0f 00       	and    eax,0xf3080
c001b111:	c1 eb 17             	shr    ebx,0x17
c001b114:	31 c8                	xor    eax,ecx
c001b116:	89 da                	mov    edx,ebx
c001b118:	5b                   	pop    ebx
c001b119:	5e                   	pop    esi
c001b11a:	5f                   	pop    edi
c001b11b:	c3                   	ret    

c001b11c <sysCallSeekDir(regs*)>:
c001b11c:	31 c0                	xor    eax,eax
c001b11e:	31 d2                	xor    edx,edx
c001b120:	c3                   	ret    

c001b121 <sysCallTellDir(regs*)>:
c001b121:	31 c0                	xor    eax,eax
c001b123:	31 d2                	xor    edx,edx
c001b125:	c3                   	ret    

c001b126 <sysCallVerify(regs*)>:
c001b126:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b12a:	31 d2                	xor    edx,edx
c001b12c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b12f:	c3                   	ret    

c001b130 <sysCallGetArgc(regs*)>:
c001b130:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b135:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b138:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b13e:	99                   	cdq    
c001b13f:	c3                   	ret    

c001b140 <sysFormatDisk(regs*)>:
c001b140:	56                   	push   esi
c001b141:	53                   	push   ebx
c001b142:	53                   	push   ebx
c001b143:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b147:	8b 1d 54 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db54
c001b14d:	eb 25                	jmp    c001b174 <sysFormatDisk(regs*)+0x34>
c001b14f:	83 ec 0c             	sub    esp,0xc
c001b152:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b155:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b157:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b15a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b15d:	50                   	push   eax
c001b15e:	ff 34 85 e0 df 02 c0 	push   DWORD PTR [eax*4-0x3ffd2020]
c001b165:	53                   	push   ebx
c001b166:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b169:	83 c4 20             	add    esp,0x20
c001b16c:	83 f8 08             	cmp    eax,0x8
c001b16f:	75 12                	jne    c001b183 <sysFormatDisk(regs*)+0x43>
c001b171:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b174:	85 db                	test   ebx,ebx
c001b176:	75 d7                	jne    c001b14f <sysFormatDisk(regs*)+0xf>
c001b178:	59                   	pop    ecx
c001b179:	b8 03 00 00 00       	mov    eax,0x3
c001b17e:	31 d2                	xor    edx,edx
c001b180:	5b                   	pop    ebx
c001b181:	5e                   	pop    esi
c001b182:	c3                   	ret    
c001b183:	85 c0                	test   eax,eax
c001b185:	74 1b                	je     c001b1a2 <sysFormatDisk(regs*)+0x62>
c001b187:	83 f8 09             	cmp    eax,0x9
c001b18a:	74 0b                	je     c001b197 <sysFormatDisk(regs*)+0x57>
c001b18c:	59                   	pop    ecx
c001b18d:	b8 02 00 00 00       	mov    eax,0x2
c001b192:	31 d2                	xor    edx,edx
c001b194:	5b                   	pop    ebx
c001b195:	5e                   	pop    esi
c001b196:	c3                   	ret    
c001b197:	59                   	pop    ecx
c001b198:	b8 01 00 00 00       	mov    eax,0x1
c001b19d:	31 d2                	xor    edx,edx
c001b19f:	5b                   	pop    ebx
c001b1a0:	5e                   	pop    esi
c001b1a1:	c3                   	ret    
c001b1a2:	59                   	pop    ecx
c001b1a3:	31 c0                	xor    eax,eax
c001b1a5:	31 d2                	xor    edx,edx
c001b1a7:	5b                   	pop    ebx
c001b1a8:	5e                   	pop    esi
c001b1a9:	c3                   	ret    

c001b1aa <sysSetDiskVolumeLabel(regs*)>:
c001b1aa:	56                   	push   esi
c001b1ab:	53                   	push   ebx
c001b1ac:	53                   	push   ebx
c001b1ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b1b1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b1b4:	83 f8 19             	cmp    eax,0x19
c001b1b7:	77 29                	ja     c001b1e2 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b1b9:	8b 0c 85 e0 df 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2020]
c001b1c0:	85 c9                	test   ecx,ecx
c001b1c2:	74 1e                	je     c001b1e2 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b1c4:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b1c7:	85 d2                	test   edx,edx
c001b1c9:	74 17                	je     c001b1e2 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b1cb:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b1d1:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b1d3:	52                   	push   edx
c001b1d4:	50                   	push   eax
c001b1d5:	51                   	push   ecx
c001b1d6:	53                   	push   ebx
c001b1d7:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b1da:	83 c4 10             	add    esp,0x10
c001b1dd:	99                   	cdq    
c001b1de:	59                   	pop    ecx
c001b1df:	5b                   	pop    ebx
c001b1e0:	5e                   	pop    esi
c001b1e1:	c3                   	ret    
c001b1e2:	59                   	pop    ecx
c001b1e3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b1e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1ed:	5b                   	pop    ebx
c001b1ee:	5e                   	pop    esi
c001b1ef:	c3                   	ret    

c001b1f0 <sysGetDiskVolumeLabel(regs*)>:
c001b1f0:	57                   	push   edi
c001b1f1:	56                   	push   esi
c001b1f2:	53                   	push   ebx
c001b1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1f7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b1fa:	83 fa 19             	cmp    edx,0x19
c001b1fd:	77 34                	ja     c001b233 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1ff:	8b 0c 95 e0 df 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2020]
c001b206:	85 c9                	test   ecx,ecx
c001b208:	74 29                	je     c001b233 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b20a:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b20d:	85 db                	test   ebx,ebx
c001b20f:	74 22                	je     c001b233 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b211:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b214:	85 c0                	test   eax,eax
c001b216:	74 1b                	je     c001b233 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b218:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b21e:	83 ec 0c             	sub    esp,0xc
c001b221:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b223:	50                   	push   eax
c001b224:	53                   	push   ebx
c001b225:	52                   	push   edx
c001b226:	51                   	push   ecx
c001b227:	56                   	push   esi
c001b228:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b22b:	83 c4 20             	add    esp,0x20
c001b22e:	99                   	cdq    
c001b22f:	5b                   	pop    ebx
c001b230:	5e                   	pop    esi
c001b231:	5f                   	pop    edi
c001b232:	c3                   	ret    
c001b233:	5b                   	pop    ebx
c001b234:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b239:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b23e:	5e                   	pop    esi
c001b23f:	5f                   	pop    edi
c001b240:	c3                   	ret    

c001b241 <sysShutdown(regs*)>:
c001b241:	83 ec 0c             	sub    esp,0xc
c001b244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b248:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b24b:	85 c0                	test   eax,eax
c001b24d:	74 18                	je     c001b267 <sysShutdown(regs*)+0x26>
c001b24f:	83 f8 01             	cmp    eax,0x1
c001b252:	74 38                	je     c001b28c <sysShutdown(regs*)+0x4b>
c001b254:	83 f8 02             	cmp    eax,0x2
c001b257:	74 24                	je     c001b27d <sysShutdown(regs*)+0x3c>
c001b259:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b25e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b263:	83 c4 0c             	add    esp,0xc
c001b266:	c3                   	ret    
c001b267:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c001b26c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b26e:	6a 00                	push   0x0
c001b270:	6a 00                	push   0x0
c001b272:	6a 00                	push   0x0
c001b274:	50                   	push   eax
c001b275:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b278:	83 c4 10             	add    esp,0x10
c001b27b:	eb dc                	jmp    c001b259 <sysShutdown(regs*)+0x18>
c001b27d:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c001b282:	8b 10                	mov    edx,DWORD PTR [eax]
c001b284:	6a 00                	push   0x0
c001b286:	6a 00                	push   0x0
c001b288:	6a 01                	push   0x1
c001b28a:	eb e8                	jmp    c001b274 <sysShutdown(regs*)+0x33>
c001b28c:	a1 80 00 03 c0       	mov    eax,ds:0xc0030080
c001b291:	85 c0                	test   eax,eax
c001b293:	74 02                	je     c001b297 <sysShutdown(regs*)+0x56>
c001b295:	ff d0                	call   eax
c001b297:	31 c0                	xor    eax,eax
c001b299:	31 d2                	xor    edx,edx
c001b29b:	83 c4 0c             	add    esp,0xc
c001b29e:	c3                   	ret    

c001b29f <sysCallRealpath(regs*)>:
c001b29f:	83 ec 0c             	sub    esp,0xc
c001b2a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2a6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b2a9:	85 d2                	test   edx,edx
c001b2ab:	74 07                	je     c001b2b4 <sysCallRealpath(regs*)+0x15>
c001b2ad:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b2b0:	85 c0                	test   eax,eax
c001b2b2:	75 0b                	jne    c001b2bf <sysCallRealpath(regs*)+0x20>
c001b2b4:	b8 01 00 00 00       	mov    eax,0x1
c001b2b9:	31 d2                	xor    edx,edx
c001b2bb:	83 c4 0c             	add    esp,0xc
c001b2be:	c3                   	ret    
c001b2bf:	51                   	push   ecx
c001b2c0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b2c6:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b2c9:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b2cf:	51                   	push   ecx
c001b2d0:	52                   	push   edx
c001b2d1:	50                   	push   eax
c001b2d2:	e8 e1 77 ff ff       	call   c0012ab8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b2d7:	83 c4 10             	add    esp,0x10
c001b2da:	31 c0                	xor    eax,eax
c001b2dc:	31 d2                	xor    edx,edx
c001b2de:	83 c4 0c             	add    esp,0xc
c001b2e1:	c3                   	ret    

c001b2e2 <sysCallReadDir(regs*)>:
c001b2e2:	53                   	push   ebx
c001b2e3:	83 ec 18             	sub    esp,0x18
c001b2e6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2ea:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b2ed:	83 f8 02             	cmp    eax,0x2
c001b2f0:	76 60                	jbe    c001b352 <sysCallReadDir(regs*)+0x70>
c001b2f2:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b2f9:	77 48                	ja     c001b343 <sysCallReadDir(regs*)+0x61>
c001b2fb:	83 ec 0c             	sub    esp,0xc
c001b2fe:	50                   	push   eax
c001b2ff:	e8 fd 5d ff ff       	call   c0011101 <getFromFileDescriptor(int)>
c001b304:	83 c4 10             	add    esp,0x10
c001b307:	85 c0                	test   eax,eax
c001b309:	74 38                	je     c001b343 <sysCallReadDir(regs*)+0x61>
c001b30b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b313:	83 ec 0c             	sub    esp,0xc
c001b316:	8b 10                	mov    edx,DWORD PTR [eax]
c001b318:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b31c:	51                   	push   ecx
c001b31d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b320:	6a 00                	push   0x0
c001b322:	68 10 01 00 00       	push   0x110
c001b327:	50                   	push   eax
c001b328:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b32b:	83 c4 20             	add    esp,0x20
c001b32e:	85 c0                	test   eax,eax
c001b330:	74 29                	je     c001b35b <sysCallReadDir(regs*)+0x79>
c001b332:	83 f8 07             	cmp    eax,0x7
c001b335:	74 1b                	je     c001b352 <sysCallReadDir(regs*)+0x70>
c001b337:	b8 02 00 00 00       	mov    eax,0x2
c001b33c:	31 d2                	xor    edx,edx
c001b33e:	83 c4 18             	add    esp,0x18
c001b341:	5b                   	pop    ebx
c001b342:	c3                   	ret    
c001b343:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b348:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b34d:	83 c4 18             	add    esp,0x18
c001b350:	5b                   	pop    ebx
c001b351:	c3                   	ret    
c001b352:	b8 01 00 00 00       	mov    eax,0x1
c001b357:	31 d2                	xor    edx,edx
c001b359:	eb e3                	jmp    c001b33e <sysCallReadDir(regs*)+0x5c>
c001b35b:	31 c0                	xor    eax,eax
c001b35d:	31 d2                	xor    edx,edx
c001b35f:	eb dd                	jmp    c001b33e <sysCallReadDir(regs*)+0x5c>

c001b361 <sysCallIsATTY(regs*)>:
c001b361:	83 ec 0c             	sub    esp,0xc
c001b364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b368:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b36b:	83 f8 02             	cmp    eax,0x2
c001b36e:	76 07                	jbe    c001b377 <sysCallIsATTY(regs*)+0x16>
c001b370:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b375:	75 26                	jne    c001b39d <sysCallIsATTY(regs*)+0x3c>
c001b377:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b37c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b37f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b385:	85 c0                	test   eax,eax
c001b387:	74 24                	je     c001b3ad <sysCallIsATTY(regs*)+0x4c>
c001b389:	83 ec 0c             	sub    esp,0xc
c001b38c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b38e:	50                   	push   eax
c001b38f:	ff 12                	call   DWORD PTR [edx]
c001b391:	31 d2                	xor    edx,edx
c001b393:	0f b6 c0             	movzx  eax,al
c001b396:	83 c4 10             	add    esp,0x10
c001b399:	83 c4 0c             	add    esp,0xc
c001b39c:	c3                   	ret    
c001b39d:	83 ec 0c             	sub    esp,0xc
c001b3a0:	50                   	push   eax
c001b3a1:	e8 5b 5d ff ff       	call   c0011101 <getFromFileDescriptor(int)>
c001b3a6:	83 c4 10             	add    esp,0x10
c001b3a9:	85 c0                	test   eax,eax
c001b3ab:	75 dc                	jne    c001b389 <sysCallIsATTY(regs*)+0x28>
c001b3ad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3b2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3b7:	83 c4 0c             	add    esp,0xc
c001b3ba:	c3                   	ret    

c001b3bb <sysCallSeek(regs*)>:
c001b3bb:	53                   	push   ebx
c001b3bc:	83 ec 08             	sub    esp,0x8
c001b3bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b3c3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3c6:	8d 50 fd             	lea    edx,[eax-0x3]
c001b3c9:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b3cf:	77 32                	ja     c001b403 <sysCallSeek(regs*)+0x48>
c001b3d1:	83 ec 0c             	sub    esp,0xc
c001b3d4:	50                   	push   eax
c001b3d5:	e8 27 5d ff ff       	call   c0011101 <getFromFileDescriptor(int)>
c001b3da:	83 c4 0c             	add    esp,0xc
c001b3dd:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b3e0:	31 db                	xor    ebx,ebx
c001b3e2:	53                   	push   ebx
c001b3e3:	51                   	push   ecx
c001b3e4:	50                   	push   eax
c001b3e5:	e8 9a 79 ff ff       	call   c0012d84 <File::seek(unsigned long long)>
c001b3ea:	83 c4 10             	add    esp,0x10
c001b3ed:	85 c0                	test   eax,eax
c001b3ef:	0f 95 c0             	setne  al
c001b3f2:	31 d2                	xor    edx,edx
c001b3f4:	0f b6 c0             	movzx  eax,al
c001b3f7:	f7 d8                	neg    eax
c001b3f9:	83 d2 00             	adc    edx,0x0
c001b3fc:	83 c4 08             	add    esp,0x8
c001b3ff:	f7 da                	neg    edx
c001b401:	5b                   	pop    ebx
c001b402:	c3                   	ret    
c001b403:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b408:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b40d:	83 c4 08             	add    esp,0x8
c001b410:	5b                   	pop    ebx
c001b411:	c3                   	ret    

c001b412 <sysCallTell(regs*)>:
c001b412:	53                   	push   ebx
c001b413:	83 ec 08             	sub    esp,0x8
c001b416:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b41a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b41d:	83 f8 02             	cmp    eax,0x2
c001b420:	76 4d                	jbe    c001b46f <sysCallTell(regs*)+0x5d>
c001b422:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b427:	76 19                	jbe    c001b442 <sysCallTell(regs*)+0x30>
c001b429:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b42c:	31 d2                	xor    edx,edx
c001b42e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b434:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b43b:	31 c0                	xor    eax,eax
c001b43d:	83 c4 08             	add    esp,0x8
c001b440:	5b                   	pop    ebx
c001b441:	c3                   	ret    
c001b442:	83 ec 0c             	sub    esp,0xc
c001b445:	50                   	push   eax
c001b446:	e8 b6 5c ff ff       	call   c0011101 <getFromFileDescriptor(int)>
c001b44b:	5a                   	pop    edx
c001b44c:	59                   	pop    ecx
c001b44d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b450:	50                   	push   eax
c001b451:	e8 84 79 ff ff       	call   c0012dda <File::tell(unsigned long long*)>
c001b456:	83 c4 10             	add    esp,0x10
c001b459:	85 c0                	test   eax,eax
c001b45b:	0f 95 c0             	setne  al
c001b45e:	31 d2                	xor    edx,edx
c001b460:	0f b6 c0             	movzx  eax,al
c001b463:	f7 d8                	neg    eax
c001b465:	83 d2 00             	adc    edx,0x0
c001b468:	83 c4 08             	add    esp,0x8
c001b46b:	f7 da                	neg    edx
c001b46d:	5b                   	pop    ebx
c001b46e:	c3                   	ret    
c001b46f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b474:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b479:	83 c4 08             	add    esp,0x8
c001b47c:	5b                   	pop    ebx
c001b47d:	c3                   	ret    

c001b47e <sysCallSize(regs*)>:
c001b47e:	53                   	push   ebx
c001b47f:	83 ec 18             	sub    esp,0x18
c001b482:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b486:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b489:	83 f8 02             	cmp    eax,0x2
c001b48c:	76 53                	jbe    c001b4e1 <sysCallSize(regs*)+0x63>
c001b48e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b493:	76 19                	jbe    c001b4ae <sysCallSize(regs*)+0x30>
c001b495:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b498:	31 d2                	xor    edx,edx
c001b49a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b4a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b4a7:	31 c0                	xor    eax,eax
c001b4a9:	83 c4 18             	add    esp,0x18
c001b4ac:	5b                   	pop    ebx
c001b4ad:	c3                   	ret    
c001b4ae:	83 ec 0c             	sub    esp,0xc
c001b4b1:	50                   	push   eax
c001b4b2:	e8 4a 5c ff ff       	call   c0011101 <getFromFileDescriptor(int)>
c001b4b7:	83 c4 0c             	add    esp,0xc
c001b4ba:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b4be:	52                   	push   edx
c001b4bf:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b4c2:	50                   	push   eax
c001b4c3:	e8 aa 7a ff ff       	call   c0012f72 <File::stat(unsigned long long*, bool*)>
c001b4c8:	83 c4 10             	add    esp,0x10
c001b4cb:	85 c0                	test   eax,eax
c001b4cd:	0f 95 c0             	setne  al
c001b4d0:	31 d2                	xor    edx,edx
c001b4d2:	0f b6 c0             	movzx  eax,al
c001b4d5:	f7 d8                	neg    eax
c001b4d7:	83 d2 00             	adc    edx,0x0
c001b4da:	83 c4 18             	add    esp,0x18
c001b4dd:	f7 da                	neg    edx
c001b4df:	5b                   	pop    ebx
c001b4e0:	c3                   	ret    
c001b4e1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4e6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4eb:	83 c4 18             	add    esp,0x18
c001b4ee:	5b                   	pop    ebx
c001b4ef:	c3                   	ret    

c001b4f0 <sysCallSizeFromFilename(regs*)>:
c001b4f0:	57                   	push   edi
c001b4f1:	56                   	push   esi
c001b4f2:	53                   	push   ebx
c001b4f3:	83 ec 20             	sub    esp,0x20
c001b4f6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b4fa:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b4fd:	83 fb 02             	cmp    ebx,0x2
c001b500:	0f 86 88 00 00 00    	jbe    c001b58e <sysCallSizeFromFilename(regs*)+0x9e>
c001b506:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b50c:	76 1b                	jbe    c001b529 <sysCallSizeFromFilename(regs*)+0x39>
c001b50e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b511:	31 d2                	xor    edx,edx
c001b513:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b519:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b520:	83 c4 20             	add    esp,0x20
c001b523:	31 c0                	xor    eax,eax
c001b525:	5b                   	pop    ebx
c001b526:	5e                   	pop    esi
c001b527:	5f                   	pop    edi
c001b528:	c3                   	ret    
c001b529:	83 ec 0c             	sub    esp,0xc
c001b52c:	68 14 01 00 00       	push   0x114
c001b531:	e8 63 40 ff ff       	call   c000f599 <malloc>
c001b536:	83 c4 0c             	add    esp,0xc
c001b539:	89 c7                	mov    edi,eax
c001b53b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b540:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b543:	53                   	push   ebx
c001b544:	57                   	push   edi
c001b545:	e8 18 77 ff ff       	call   c0012c62 <File::File(char const*, Process*)>
c001b54a:	83 c4 0c             	add    esp,0xc
c001b54d:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b551:	50                   	push   eax
c001b552:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b555:	57                   	push   edi
c001b556:	e8 17 7a ff ff       	call   c0012f72 <File::stat(unsigned long long*, bool*)>
c001b55b:	83 c4 10             	add    esp,0x10
c001b55e:	85 ff                	test   edi,edi
c001b560:	74 14                	je     c001b576 <sysCallSizeFromFilename(regs*)+0x86>
c001b562:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b566:	8b 17                	mov    edx,DWORD PTR [edi]
c001b568:	83 ec 0c             	sub    esp,0xc
c001b56b:	57                   	push   edi
c001b56c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b56f:	83 c4 10             	add    esp,0x10
c001b572:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b576:	85 c0                	test   eax,eax
c001b578:	0f 95 c0             	setne  al
c001b57b:	31 d2                	xor    edx,edx
c001b57d:	0f b6 c0             	movzx  eax,al
c001b580:	f7 d8                	neg    eax
c001b582:	83 d2 00             	adc    edx,0x0
c001b585:	83 c4 20             	add    esp,0x20
c001b588:	f7 da                	neg    edx
c001b58a:	5b                   	pop    ebx
c001b58b:	5e                   	pop    esi
c001b58c:	5f                   	pop    edi
c001b58d:	c3                   	ret    
c001b58e:	83 c4 20             	add    esp,0x20
c001b591:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b596:	5b                   	pop    ebx
c001b597:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b59c:	5e                   	pop    esi
c001b59d:	5f                   	pop    edi
c001b59e:	c3                   	ret    

c001b59f <sysCallClose(regs*)>:
c001b59f:	53                   	push   ebx
c001b5a0:	83 ec 08             	sub    esp,0x8
c001b5a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5a7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b5aa:	83 f8 02             	cmp    eax,0x2
c001b5ad:	76 41                	jbe    c001b5f0 <sysCallClose(regs*)+0x51>
c001b5af:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b5b5:	83 fa 01             	cmp    edx,0x1
c001b5b8:	76 2d                	jbe    c001b5e7 <sysCallClose(regs*)+0x48>
c001b5ba:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b5bf:	77 2f                	ja     c001b5f0 <sysCallClose(regs*)+0x51>
c001b5c1:	83 ec 0c             	sub    esp,0xc
c001b5c4:	50                   	push   eax
c001b5c5:	e8 37 5b ff ff       	call   c0011101 <getFromFileDescriptor(int)>
c001b5ca:	89 c3                	mov    ebx,eax
c001b5cc:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5cf:	e8 50 77 ff ff       	call   c0012d24 <File::close()>
c001b5d4:	83 c4 10             	add    esp,0x10
c001b5d7:	85 db                	test   ebx,ebx
c001b5d9:	74 0c                	je     c001b5e7 <sysCallClose(regs*)+0x48>
c001b5db:	83 ec 0c             	sub    esp,0xc
c001b5de:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5e0:	53                   	push   ebx
c001b5e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b5e4:	83 c4 10             	add    esp,0x10
c001b5e7:	31 c0                	xor    eax,eax
c001b5e9:	31 d2                	xor    edx,edx
c001b5eb:	83 c4 08             	add    esp,0x8
c001b5ee:	5b                   	pop    ebx
c001b5ef:	c3                   	ret    
c001b5f0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5f5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5fa:	83 c4 08             	add    esp,0x8
c001b5fd:	5b                   	pop    ebx
c001b5fe:	c3                   	ret    

c001b5ff <sysCallOpenDir(regs*)>:
c001b5ff:	56                   	push   esi
c001b600:	53                   	push   ebx
c001b601:	53                   	push   ebx
c001b602:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b606:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b609:	85 f6                	test   esi,esi
c001b60b:	74 59                	je     c001b666 <sysCallOpenDir(regs*)+0x67>
c001b60d:	83 ec 0c             	sub    esp,0xc
c001b610:	68 14 01 00 00       	push   0x114
c001b615:	e8 7f 3f ff ff       	call   c000f599 <malloc>
c001b61a:	83 c4 0c             	add    esp,0xc
c001b61d:	89 c6                	mov    esi,eax
c001b61f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b624:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b627:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b62a:	56                   	push   esi
c001b62b:	e8 de 7a ff ff       	call   c001310e <Directory::Directory(char const*, Process*)>
c001b630:	83 c4 10             	add    esp,0x10
c001b633:	85 f6                	test   esi,esi
c001b635:	74 2f                	je     c001b666 <sysCallOpenDir(regs*)+0x67>
c001b637:	83 ec 0c             	sub    esp,0xc
c001b63a:	56                   	push   esi
c001b63b:	e8 32 7b ff ff       	call   c0013172 <Directory::open()>
c001b640:	83 c4 10             	add    esp,0x10
c001b643:	85 c0                	test   eax,eax
c001b645:	75 1f                	jne    c001b666 <sysCallOpenDir(regs*)+0x67>
c001b647:	83 ec 0c             	sub    esp,0xc
c001b64a:	56                   	push   esi
c001b64b:	e8 bc 57 ff ff       	call   c0010e0c <UnixFile::getFileDescriptor()>
c001b650:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b653:	83 c4 10             	add    esp,0x10
c001b656:	89 02                	mov    DWORD PTR [edx],eax
c001b658:	c1 f8 1f             	sar    eax,0x1f
c001b65b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b65e:	31 c0                	xor    eax,eax
c001b660:	59                   	pop    ecx
c001b661:	31 d2                	xor    edx,edx
c001b663:	5b                   	pop    ebx
c001b664:	5e                   	pop    esi
c001b665:	c3                   	ret    
c001b666:	59                   	pop    ecx
c001b667:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b66c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b671:	5b                   	pop    ebx
c001b672:	5e                   	pop    esi
c001b673:	c3                   	ret    

c001b674 <sysCallCloseDir(regs*)>:
c001b674:	53                   	push   ebx
c001b675:	83 ec 08             	sub    esp,0x8
c001b678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b67c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b67f:	8d 50 fd             	lea    edx,[eax-0x3]
c001b682:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b688:	77 2f                	ja     c001b6b9 <sysCallCloseDir(regs*)+0x45>
c001b68a:	83 ec 0c             	sub    esp,0xc
c001b68d:	50                   	push   eax
c001b68e:	e8 6e 5a ff ff       	call   c0011101 <getFromFileDescriptor(int)>
c001b693:	89 c3                	mov    ebx,eax
c001b695:	89 04 24             	mov    DWORD PTR [esp],eax
c001b698:	e8 31 7b ff ff       	call   c00131ce <Directory::close()>
c001b69d:	83 c4 10             	add    esp,0x10
c001b6a0:	85 db                	test   ebx,ebx
c001b6a2:	74 0c                	je     c001b6b0 <sysCallCloseDir(regs*)+0x3c>
c001b6a4:	83 ec 0c             	sub    esp,0xc
c001b6a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6a9:	53                   	push   ebx
c001b6aa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b6ad:	83 c4 10             	add    esp,0x10
c001b6b0:	31 c0                	xor    eax,eax
c001b6b2:	31 d2                	xor    edx,edx
c001b6b4:	83 c4 08             	add    esp,0x8
c001b6b7:	5b                   	pop    ebx
c001b6b8:	c3                   	ret    
c001b6b9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6be:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6c3:	83 c4 08             	add    esp,0x8
c001b6c6:	5b                   	pop    ebx
c001b6c7:	c3                   	ret    

c001b6c8 <sysCallMakeDir(regs*)>:
c001b6c8:	56                   	push   esi
c001b6c9:	53                   	push   ebx
c001b6ca:	83 ec 10             	sub    esp,0x10
c001b6cd:	68 14 01 00 00       	push   0x114
c001b6d2:	e8 c2 3e ff ff       	call   c000f599 <malloc>
c001b6d7:	83 c4 0c             	add    esp,0xc
c001b6da:	89 c3                	mov    ebx,eax
c001b6dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6e1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b6e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b6e8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6eb:	53                   	push   ebx
c001b6ec:	e8 1d 7a ff ff       	call   c001310e <Directory::Directory(char const*, Process*)>
c001b6f1:	83 c4 10             	add    esp,0x10
c001b6f4:	85 db                	test   ebx,ebx
c001b6f6:	74 32                	je     c001b72a <sysCallMakeDir(regs*)+0x62>
c001b6f8:	83 ec 0c             	sub    esp,0xc
c001b6fb:	53                   	push   ebx
c001b6fc:	e8 51 7c ff ff       	call   c0013352 <Directory::create()>
c001b701:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b704:	89 c6                	mov    esi,eax
c001b706:	e8 c3 7a ff ff       	call   c00131ce <Directory::close()>
c001b70b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b70d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b710:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b713:	83 c4 10             	add    esp,0x10
c001b716:	31 c0                	xor    eax,eax
c001b718:	59                   	pop    ecx
c001b719:	85 f6                	test   esi,esi
c001b71b:	5b                   	pop    ebx
c001b71c:	0f 95 c0             	setne  al
c001b71f:	5e                   	pop    esi
c001b720:	31 d2                	xor    edx,edx
c001b722:	f7 d8                	neg    eax
c001b724:	83 d2 00             	adc    edx,0x0
c001b727:	f7 da                	neg    edx
c001b729:	c3                   	ret    
c001b72a:	59                   	pop    ecx
c001b72b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b730:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b735:	5b                   	pop    ebx
c001b736:	5e                   	pop    esi
c001b737:	c3                   	ret    

c001b738 <sysCallWait(regs*)>:
c001b738:	83 ec 10             	sub    esp,0x10
c001b73b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b73f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b742:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b745:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b748:	e8 af 24 00 00       	call   c001dbfc <waitTask(int, int*, int)>
c001b74d:	83 c4 1c             	add    esp,0x1c
c001b750:	99                   	cdq    
c001b751:	c3                   	ret    

c001b752 <sysCallNotImpl(regs*)>:
c001b752:	83 ec 18             	sub    esp,0x18
c001b755:	68 59 b9 02 c0       	push   0xc002b959
c001b75a:	e8 10 e7 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c001b75f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b764:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b769:	83 c4 1c             	add    esp,0x1c
c001b76c:	c3                   	ret    

c001b76d <sysPanic(regs*)>:
c001b76d:	83 ec 18             	sub    esp,0x18
c001b770:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b774:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b777:	e8 f3 e6 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c001b77c:	b8 01 00 00 00       	mov    eax,0x1
c001b781:	31 d2                	xor    edx,edx
c001b783:	83 c4 1c             	add    esp,0x1c
c001b786:	c3                   	ret    

c001b787 <sysCallRmdir(regs*)>:
c001b787:	56                   	push   esi
c001b788:	53                   	push   ebx
c001b789:	83 ec 20             	sub    esp,0x20
c001b78c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b790:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b793:	68 14 01 00 00       	push   0x114
c001b798:	e8 fc 3d ff ff       	call   c000f599 <malloc>
c001b79d:	83 c4 0c             	add    esp,0xc
c001b7a0:	89 c3                	mov    ebx,eax
c001b7a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7a7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7aa:	56                   	push   esi
c001b7ab:	53                   	push   ebx
c001b7ac:	e8 b1 74 ff ff       	call   c0012c62 <File::File(char const*, Process*)>
c001b7b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b7b4:	e8 85 76 ff ff       	call   c0012e3e <File::unlink()>
c001b7b9:	83 c4 10             	add    esp,0x10
c001b7bc:	85 db                	test   ebx,ebx
c001b7be:	74 14                	je     c001b7d4 <sysCallRmdir(regs*)+0x4d>
c001b7c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7c4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7c6:	83 ec 0c             	sub    esp,0xc
c001b7c9:	53                   	push   ebx
c001b7ca:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b7cd:	83 c4 10             	add    esp,0x10
c001b7d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7d4:	85 c0                	test   eax,eax
c001b7d6:	0f 95 c0             	setne  al
c001b7d9:	31 d2                	xor    edx,edx
c001b7db:	0f b6 c0             	movzx  eax,al
c001b7de:	f7 d8                	neg    eax
c001b7e0:	83 d2 00             	adc    edx,0x0
c001b7e3:	83 c4 14             	add    esp,0x14
c001b7e6:	f7 da                	neg    edx
c001b7e8:	5b                   	pop    ebx
c001b7e9:	5e                   	pop    esi
c001b7ea:	c3                   	ret    

c001b7eb <sysCallUnlink(regs*)>:
c001b7eb:	56                   	push   esi
c001b7ec:	53                   	push   ebx
c001b7ed:	83 ec 20             	sub    esp,0x20
c001b7f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b7f4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b7f7:	68 14 01 00 00       	push   0x114
c001b7fc:	e8 98 3d ff ff       	call   c000f599 <malloc>
c001b801:	83 c4 0c             	add    esp,0xc
c001b804:	89 c3                	mov    ebx,eax
c001b806:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b80b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b80e:	56                   	push   esi
c001b80f:	53                   	push   ebx
c001b810:	e8 4d 74 ff ff       	call   c0012c62 <File::File(char const*, Process*)>
c001b815:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b818:	e8 21 76 ff ff       	call   c0012e3e <File::unlink()>
c001b81d:	83 c4 10             	add    esp,0x10
c001b820:	85 db                	test   ebx,ebx
c001b822:	74 14                	je     c001b838 <sysCallUnlink(regs*)+0x4d>
c001b824:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b828:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b82a:	83 ec 0c             	sub    esp,0xc
c001b82d:	53                   	push   ebx
c001b82e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b831:	83 c4 10             	add    esp,0x10
c001b834:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b838:	85 c0                	test   eax,eax
c001b83a:	0f 95 c0             	setne  al
c001b83d:	31 d2                	xor    edx,edx
c001b83f:	0f b6 c0             	movzx  eax,al
c001b842:	f7 d8                	neg    eax
c001b844:	83 d2 00             	adc    edx,0x0
c001b847:	83 c4 14             	add    esp,0x14
c001b84a:	f7 da                	neg    edx
c001b84c:	5b                   	pop    ebx
c001b84d:	5e                   	pop    esi
c001b84e:	c3                   	ret    

c001b84f <sysCallGetArgv(regs*)>:
c001b84f:	83 ec 0c             	sub    esp,0xc
c001b852:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b856:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b859:	85 c0                	test   eax,eax
c001b85b:	78 2b                	js     c001b888 <sysCallGetArgv(regs*)+0x39>
c001b85d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b863:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b866:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b86c:	7d 1a                	jge    c001b888 <sysCallGetArgv(regs*)+0x39>
c001b86e:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b875:	85 c0                	test   eax,eax
c001b877:	74 17                	je     c001b890 <sysCallGetArgv(regs*)+0x41>
c001b879:	83 ec 08             	sub    esp,0x8
c001b87c:	50                   	push   eax
c001b87d:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b880:	e8 87 4f fe ff       	call   c000080c <strcpy>
c001b885:	83 c4 10             	add    esp,0x10
c001b888:	31 c0                	xor    eax,eax
c001b88a:	31 d2                	xor    edx,edx
c001b88c:	83 c4 0c             	add    esp,0xc
c001b88f:	c3                   	ret    
c001b890:	b8 01 00 00 00       	mov    eax,0x1
c001b895:	31 d2                	xor    edx,edx
c001b897:	83 c4 0c             	add    esp,0xc
c001b89a:	c3                   	ret    

c001b89b <sysCallTTYName(regs*)>:
c001b89b:	56                   	push   esi
c001b89c:	53                   	push   ebx
c001b89d:	53                   	push   ebx
c001b89e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b8a2:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b8a5:	85 c0                	test   eax,eax
c001b8a7:	74 5f                	je     c001b908 <sysCallTTYName(regs*)+0x6d>
c001b8a9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b8ac:	83 f8 02             	cmp    eax,0x2
c001b8af:	77 3e                	ja     c001b8ef <sysCallTTYName(regs*)+0x54>
c001b8b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8b9:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b8bf:	85 db                	test   ebx,ebx
c001b8c1:	74 45                	je     c001b908 <sysCallTTYName(regs*)+0x6d>
c001b8c3:	83 ec 0c             	sub    esp,0xc
c001b8c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b8c8:	53                   	push   ebx
c001b8c9:	ff 10                	call   DWORD PTR [eax]
c001b8cb:	83 c4 10             	add    esp,0x10
c001b8ce:	84 c0                	test   al,al
c001b8d0:	74 41                	je     c001b913 <sysCallTTYName(regs*)+0x78>
c001b8d2:	83 ec 08             	sub    esp,0x8
c001b8d5:	81 c3 82 00 00 00    	add    ebx,0x82
c001b8db:	53                   	push   ebx
c001b8dc:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b8df:	e8 28 4f fe ff       	call   c000080c <strcpy>
c001b8e4:	83 c4 10             	add    esp,0x10
c001b8e7:	31 c0                	xor    eax,eax
c001b8e9:	59                   	pop    ecx
c001b8ea:	31 d2                	xor    edx,edx
c001b8ec:	5b                   	pop    ebx
c001b8ed:	5e                   	pop    esi
c001b8ee:	c3                   	ret    
c001b8ef:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b8f4:	74 bb                	je     c001b8b1 <sysCallTTYName(regs*)+0x16>
c001b8f6:	83 ec 0c             	sub    esp,0xc
c001b8f9:	50                   	push   eax
c001b8fa:	e8 02 58 ff ff       	call   c0011101 <getFromFileDescriptor(int)>
c001b8ff:	83 c4 10             	add    esp,0x10
c001b902:	89 c3                	mov    ebx,eax
c001b904:	85 db                	test   ebx,ebx
c001b906:	75 bb                	jne    c001b8c3 <sysCallTTYName(regs*)+0x28>
c001b908:	59                   	pop    ecx
c001b909:	b8 01 00 00 00       	mov    eax,0x1
c001b90e:	31 d2                	xor    edx,edx
c001b910:	5b                   	pop    ebx
c001b911:	5e                   	pop    esi
c001b912:	c3                   	ret    
c001b913:	59                   	pop    ecx
c001b914:	b8 02 00 00 00       	mov    eax,0x2
c001b919:	31 d2                	xor    edx,edx
c001b91b:	5b                   	pop    ebx
c001b91c:	5e                   	pop    esi
c001b91d:	c3                   	ret    

c001b91e <sysCallUSleep(regs*)>:
c001b91e:	83 ec 14             	sub    esp,0x14
c001b921:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b926:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b92a:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b931:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b934:	01 ca                	add    edx,ecx
c001b936:	52                   	push   edx
c001b937:	50                   	push   eax
c001b938:	e8 96 23 00 00       	call   c001dcd3 <nanoSleep(unsigned long long)>
c001b93d:	31 c0                	xor    eax,eax
c001b93f:	31 d2                	xor    edx,edx
c001b941:	83 c4 1c             	add    esp,0x1c
c001b944:	c3                   	ret    

c001b945 <sysCallSpawn(regs*)>:
c001b945:	56                   	push   esi
c001b946:	53                   	push   ebx
c001b947:	50                   	push   eax
c001b948:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b94c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b94f:	85 c0                	test   eax,eax
c001b951:	75 08                	jne    c001b95b <sysCallSpawn(regs*)+0x16>
c001b953:	59                   	pop    ecx
c001b954:	31 c0                	xor    eax,eax
c001b956:	31 d2                	xor    edx,edx
c001b958:	5b                   	pop    ebx
c001b959:	5e                   	pop    esi
c001b95a:	c3                   	ret    
c001b95b:	83 ec 0c             	sub    esp,0xc
c001b95e:	68 3f 07 00 00       	push   0x73f
c001b963:	e8 31 3c ff ff       	call   c000f599 <malloc>
c001b968:	83 c4 10             	add    esp,0x10
c001b96b:	89 c6                	mov    esi,eax
c001b96d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b970:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b973:	85 c0                	test   eax,eax
c001b975:	75 32                	jne    c001b9a9 <sysCallSpawn(regs*)+0x64>
c001b977:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b97c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b97f:	52                   	push   edx
c001b980:	50                   	push   eax
c001b981:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b984:	56                   	push   esi
c001b985:	e8 6e 1a 00 00       	call   c001d3f8 <Process::Process(char const*, Process*, char**)>
c001b98a:	83 c4 10             	add    esp,0x10
c001b98d:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b994:	75 bd                	jne    c001b953 <sysCallSpawn(regs*)+0xe>
c001b996:	83 ec 0c             	sub    esp,0xc
c001b999:	56                   	push   esi
c001b99a:	e8 3b 1f 00 00       	call   c001d8da <Process::createUserThread()>
c001b99f:	8b 06                	mov    eax,DWORD PTR [esi]
c001b9a1:	83 c4 10             	add    esp,0x10
c001b9a4:	99                   	cdq    
c001b9a5:	59                   	pop    ecx
c001b9a6:	5b                   	pop    ebx
c001b9a7:	5e                   	pop    esi
c001b9a8:	c3                   	ret    
c001b9a9:	31 c0                	xor    eax,eax
c001b9ab:	eb d2                	jmp    c001b97f <sysCallSpawn(regs*)+0x3a>

c001b9ad <sysCallGetEnv(regs*)>:
c001b9ad:	57                   	push   edi
c001b9ae:	56                   	push   esi
c001b9af:	53                   	push   ebx
c001b9b0:	83 ec 1c             	sub    esp,0x1c
c001b9b3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b9b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9bc:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b9bf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b9c2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9c5:	e8 f1 e3 ff ff       	call   c0019dbb <Krnl::getProcessTotalEnvCount(Process*)>
c001b9ca:	83 c4 10             	add    esp,0x10
c001b9cd:	39 c7                	cmp    edi,eax
c001b9cf:	7c 14                	jl     c001b9e5 <sysCallGetEnv(regs*)+0x38>
c001b9d1:	85 f6                	test   esi,esi
c001b9d3:	75 0b                	jne    c001b9e0 <sysCallGetEnv(regs*)+0x33>
c001b9d5:	83 c4 10             	add    esp,0x10
c001b9d8:	31 c0                	xor    eax,eax
c001b9da:	5b                   	pop    ebx
c001b9db:	31 d2                	xor    edx,edx
c001b9dd:	5e                   	pop    esi
c001b9de:	5f                   	pop    edi
c001b9df:	c3                   	ret    
c001b9e0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b9e3:	eb f0                	jmp    c001b9d5 <sysCallGetEnv(regs*)+0x28>
c001b9e5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b9e9:	52                   	push   edx
c001b9ea:	57                   	push   edi
c001b9eb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b9f1:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b9f4:	50                   	push   eax
c001b9f5:	e8 e1 e3 ff ff       	call   c0019ddb <Krnl::getProcessEnvPair(Process*, int)>
c001b9fa:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b9fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba01:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ba05:	83 c4 0c             	add    esp,0xc
c001ba08:	85 c9                	test   ecx,ecx
c001ba0a:	75 23                	jne    c001ba2f <sysCallGetEnv(regs*)+0x82>
c001ba0c:	83 ec 0c             	sub    esp,0xc
c001ba0f:	50                   	push   eax
c001ba10:	e8 57 4d fe ff       	call   c000076c <strlen>
c001ba15:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba18:	89 c3                	mov    ebx,eax
c001ba1a:	e8 4d 4d fe ff       	call   c000076c <strlen>
c001ba1f:	83 c4 10             	add    esp,0x10
c001ba22:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001ba26:	83 c4 10             	add    esp,0x10
c001ba29:	31 d2                	xor    edx,edx
c001ba2b:	5b                   	pop    ebx
c001ba2c:	5e                   	pop    esi
c001ba2d:	5f                   	pop    edi
c001ba2e:	c3                   	ret    
c001ba2f:	83 ec 08             	sub    esp,0x8
c001ba32:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ba35:	50                   	push   eax
c001ba36:	56                   	push   esi
c001ba37:	e8 d0 4d fe ff       	call   c000080c <strcpy>
c001ba3c:	58                   	pop    eax
c001ba3d:	5a                   	pop    edx
c001ba3e:	68 73 b9 02 c0       	push   0xc002b973
c001ba43:	56                   	push   esi
c001ba44:	e8 03 4f fe ff       	call   c000094c <strcat>
c001ba49:	59                   	pop    ecx
c001ba4a:	5b                   	pop    ebx
c001ba4b:	57                   	push   edi
c001ba4c:	56                   	push   esi
c001ba4d:	e8 fa 4e fe ff       	call   c000094c <strcat>
c001ba52:	83 c4 10             	add    esp,0x10
c001ba55:	e9 7b ff ff ff       	jmp    c001b9d5 <sysCallGetEnv(regs*)+0x28>

c001ba5a <sysAppSettings(regs*)>:
c001ba5a:	57                   	push   edi
c001ba5b:	56                   	push   esi
c001ba5c:	56                   	push   esi
c001ba5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba61:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ba64:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001ba6a:	25 e0 1f 00 00       	and    eax,0x1fe0
c001ba6f:	66 3d c0 09          	cmp    ax,0x9c0
c001ba73:	75 2e                	jne    c001baa3 <sysAppSettings(regs*)+0x49>
c001ba75:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001ba7b:	83 e0 1f             	and    eax,0x1f
c001ba7e:	3c 01                	cmp    al,0x1
c001ba80:	74 2c                	je     c001baae <sysAppSettings(regs*)+0x54>
c001ba82:	3c 07                	cmp    al,0x7
c001ba84:	0f 84 b3 00 00 00    	je     c001bb3d <sysAppSettings(regs*)+0xe3>
c001ba8a:	84 c0                	test   al,al
c001ba8c:	0f 84 d2 00 00 00    	je     c001bb64 <sysAppSettings(regs*)+0x10a>
c001ba92:	3c 08                	cmp    al,0x8
c001ba94:	74 63                	je     c001baf9 <sysAppSettings(regs*)+0x9f>
c001ba96:	59                   	pop    ecx
c001ba97:	0f b6 c0             	movzx  eax,al
c001ba9a:	5e                   	pop    esi
c001ba9b:	05 e8 03 00 00       	add    eax,0x3e8
c001baa0:	5f                   	pop    edi
c001baa1:	99                   	cdq    
c001baa2:	c3                   	ret    
c001baa3:	b8 01 00 00 00       	mov    eax,0x1
c001baa8:	59                   	pop    ecx
c001baa9:	31 d2                	xor    edx,edx
c001baab:	5e                   	pop    esi
c001baac:	5f                   	pop    edi
c001baad:	c3                   	ret    
c001baae:	50                   	push   eax
c001baaf:	68 00 01 00 00       	push   0x100
c001bab4:	6a 00                	push   0x0
c001bab6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001babb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001babe:	83 c0 0c             	add    eax,0xc
c001bac1:	50                   	push   eax
c001bac2:	e8 89 4c fe ff       	call   c0000750 <memset>
c001bac7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bacc:	b9 ff 00 00 00       	mov    ecx,0xff
c001bad1:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001bad4:	83 c7 0c             	add    edi,0xc
c001bad7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bad9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bade:	5a                   	pop    edx
c001badf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bae2:	59                   	pop    ecx
c001bae3:	8d 50 0c             	lea    edx,[eax+0xc]
c001bae6:	52                   	push   edx
c001bae7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001baed:	e8 3a 47 ff ff       	call   c001022c <VgaText::setTitle(char*)>
c001baf2:	83 c4 10             	add    esp,0x10
c001baf5:	31 c0                	xor    eax,eax
c001baf7:	eb af                	jmp    c001baa8 <sysAppSettings(regs*)+0x4e>
c001baf9:	83 ec 08             	sub    esp,0x8
c001bafc:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bb02:	83 e0 0f             	and    eax,0xf
c001bb05:	50                   	push   eax
c001bb06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb0b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb0e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bb14:	e8 03 47 ff ff       	call   c001021c <VgaText::setTitleColour(VgaColour)>
c001bb19:	5f                   	pop    edi
c001bb1a:	58                   	pop    eax
c001bb1b:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bb21:	c1 e8 04             	shr    eax,0x4
c001bb24:	83 e0 0f             	and    eax,0xf
c001bb27:	50                   	push   eax
c001bb28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb2d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb30:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bb36:	e8 d1 46 ff ff       	call   c001020c <VgaText::setTitleTextColour(VgaColour)>
c001bb3b:	eb b5                	jmp    c001baf2 <sysAppSettings(regs*)+0x98>
c001bb3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb42:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb45:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bb4b:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001bb51:	c0 e8 06             	shr    al,0x6
c001bb54:	83 e0 01             	and    eax,0x1
c001bb57:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001bb5d:	31 c0                	xor    eax,eax
c001bb5f:	e9 44 ff ff ff       	jmp    c001baa8 <sysAppSettings(regs*)+0x4e>
c001bb64:	b8 02 00 00 00       	mov    eax,0x2
c001bb69:	e9 3a ff ff ff       	jmp    c001baa8 <sysAppSettings(regs*)+0x4e>

c001bb6e <sysSetFatAttrib(regs*)>:
c001bb6e:	57                   	push   edi
c001bb6f:	56                   	push   esi
c001bb70:	53                   	push   ebx
c001bb71:	83 ec 1c             	sub    esp,0x1c
c001bb74:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bb78:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bb7b:	68 14 01 00 00       	push   0x114
c001bb80:	e8 14 3a ff ff       	call   c000f599 <malloc>
c001bb85:	83 c4 0c             	add    esp,0xc
c001bb88:	89 c3                	mov    ebx,eax
c001bb8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb8f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb92:	57                   	push   edi
c001bb93:	53                   	push   ebx
c001bb94:	e8 c9 70 ff ff       	call   c0012c62 <File::File(char const*, Process*)>
c001bb99:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bb9c:	83 c4 0c             	add    esp,0xc
c001bb9f:	0f b6 d4             	movzx  edx,ah
c001bba2:	0f b6 c0             	movzx  eax,al
c001bba5:	52                   	push   edx
c001bba6:	50                   	push   eax
c001bba7:	53                   	push   ebx
c001bba8:	e8 2b 73 ff ff       	call   c0012ed8 <File::chfatattr(unsigned char, unsigned char)>
c001bbad:	83 c4 10             	add    esp,0x10
c001bbb0:	85 db                	test   ebx,ebx
c001bbb2:	74 14                	je     c001bbc8 <sysSetFatAttrib(regs*)+0x5a>
c001bbb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbb8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bbba:	83 ec 0c             	sub    esp,0xc
c001bbbd:	53                   	push   ebx
c001bbbe:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bbc1:	83 c4 10             	add    esp,0x10
c001bbc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbc8:	85 c0                	test   eax,eax
c001bbca:	0f 95 c0             	setne  al
c001bbcd:	31 d2                	xor    edx,edx
c001bbcf:	0f b6 c0             	movzx  eax,al
c001bbd2:	f7 d8                	neg    eax
c001bbd4:	83 d2 00             	adc    edx,0x0
c001bbd7:	83 c4 10             	add    esp,0x10
c001bbda:	f7 da                	neg    edx
c001bbdc:	5b                   	pop    ebx
c001bbdd:	5e                   	pop    esi
c001bbde:	5f                   	pop    edi
c001bbdf:	c3                   	ret    

c001bbe0 <sysPipe(regs*)>:
c001bbe0:	57                   	push   edi
c001bbe1:	56                   	push   esi
c001bbe2:	53                   	push   ebx
c001bbe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbe7:	83 ec 0c             	sub    esp,0xc
c001bbea:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bbed:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bbf0:	6a 20                	push   0x20
c001bbf2:	e8 a2 39 ff ff       	call   c000f599 <malloc>
c001bbf7:	89 c3                	mov    ebx,eax
c001bbf9:	58                   	pop    eax
c001bbfa:	5a                   	pop    edx
c001bbfb:	68 00 50 00 00       	push   0x5000
c001bc00:	53                   	push   ebx
c001bc01:	e8 9e 43 ff ff       	call   c000ffa4 <Pipe::Pipe(int)>
c001bc06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc09:	e8 fe 51 ff ff       	call   c0010e0c <UnixFile::getFileDescriptor()>
c001bc0e:	89 07                	mov    DWORD PTR [edi],eax
c001bc10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc13:	e8 f4 51 ff ff       	call   c0010e0c <UnixFile::getFileDescriptor()>
c001bc18:	83 c4 10             	add    esp,0x10
c001bc1b:	89 06                	mov    DWORD PTR [esi],eax
c001bc1d:	31 d2                	xor    edx,edx
c001bc1f:	5b                   	pop    ebx
c001bc20:	31 c0                	xor    eax,eax
c001bc22:	5e                   	pop    esi
c001bc23:	5f                   	pop    edi
c001bc24:	c3                   	ret    

c001bc25 <sysGetUnixTime(regs*)>:
c001bc25:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c001bc2a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bc30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bc34:	e9 1b 7a ff ff       	jmp    c0013654 <Clock::timeInSecondsLocal()>

c001bc39 <string_ends_with(char const*, char const*)>:
c001bc39:	57                   	push   edi
c001bc3a:	56                   	push   esi
c001bc3b:	53                   	push   ebx
c001bc3c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc40:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bc44:	83 ec 0c             	sub    esp,0xc
c001bc47:	53                   	push   ebx
c001bc48:	e8 1f 4b fe ff       	call   c000076c <strlen>
c001bc4d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bc50:	89 c6                	mov    esi,eax
c001bc52:	e8 15 4b fe ff       	call   c000076c <strlen>
c001bc57:	83 c4 10             	add    esp,0x10
c001bc5a:	39 c6                	cmp    esi,eax
c001bc5c:	7d 06                	jge    c001bc64 <string_ends_with(char const*, char const*)+0x2b>
c001bc5e:	5b                   	pop    ebx
c001bc5f:	31 c0                	xor    eax,eax
c001bc61:	5e                   	pop    esi
c001bc62:	5f                   	pop    edi
c001bc63:	c3                   	ret    
c001bc64:	83 ec 08             	sub    esp,0x8
c001bc67:	29 c6                	sub    esi,eax
c001bc69:	57                   	push   edi
c001bc6a:	01 f3                	add    ebx,esi
c001bc6c:	53                   	push   ebx
c001bc6d:	e8 26 4c fe ff       	call   c0000898 <strcmp>
c001bc72:	83 c4 10             	add    esp,0x10
c001bc75:	85 c0                	test   eax,eax
c001bc77:	5b                   	pop    ebx
c001bc78:	0f 94 c0             	sete   al
c001bc7b:	5e                   	pop    esi
c001bc7c:	0f b6 c0             	movzx  eax,al
c001bc7f:	5f                   	pop    edi
c001bc80:	c3                   	ret    

c001bc81 <sysCallOpen(regs*)>:
c001bc81:	56                   	push   esi
c001bc82:	53                   	push   ebx
c001bc83:	81 ec 04 01 00 00    	sub    esp,0x104
c001bc89:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bc90:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bc93:	85 c9                	test   ecx,ecx
c001bc95:	0f 84 ad 01 00 00    	je     c001be48 <sysCallOpen(regs*)+0x1c7>
c001bc9b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bc9e:	85 c0                	test   eax,eax
c001bca0:	0f 84 a2 01 00 00    	je     c001be48 <sysCallOpen(regs*)+0x1c7>
c001bca6:	52                   	push   edx
c001bca7:	68 75 b9 02 c0       	push   0xc002b975
c001bcac:	50                   	push   eax
c001bcad:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bcb1:	56                   	push   esi
c001bcb2:	e8 01 6e ff ff       	call   c0012ab8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bcb7:	89 34 24             	mov    DWORD PTR [esp],esi
c001bcba:	e8 ad 4a fe ff       	call   c000076c <strlen>
c001bcbf:	83 c4 10             	add    esp,0x10
c001bcc2:	48                   	dec    eax
c001bcc3:	74 1d                	je     c001bce2 <sysCallOpen(regs*)+0x61>
c001bcc5:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bcc8:	eb 0f                	jmp    c001bcd9 <sysCallOpen(regs*)+0x58>
c001bcca:	80 fa 3a             	cmp    dl,0x3a
c001bccd:	74 0f                	je     c001bcde <sysCallOpen(regs*)+0x5d>
c001bccf:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bcd3:	48                   	dec    eax
c001bcd4:	74 0c                	je     c001bce2 <sysCallOpen(regs*)+0x61>
c001bcd6:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bcd9:	80 fa 2e             	cmp    dl,0x2e
c001bcdc:	75 ec                	jne    c001bcca <sysCallOpen(regs*)+0x49>
c001bcde:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bce2:	83 ec 08             	sub    esp,0x8
c001bce5:	68 79 b9 02 c0       	push   0xc002b979
c001bcea:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bced:	e8 47 ff ff ff       	call   c001bc39 <string_ends_with(char const*, char const*)>
c001bcf2:	83 c4 10             	add    esp,0x10
c001bcf5:	85 c0                	test   eax,eax
c001bcf7:	74 1d                	je     c001bd16 <sysCallOpen(regs*)+0x95>
c001bcf9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bcfc:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bd02:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bd09:	81 c4 04 01 00 00    	add    esp,0x104
c001bd0f:	31 c0                	xor    eax,eax
c001bd11:	31 d2                	xor    edx,edx
c001bd13:	5b                   	pop    ebx
c001bd14:	5e                   	pop    esi
c001bd15:	c3                   	ret    
c001bd16:	83 ec 08             	sub    esp,0x8
c001bd19:	68 7e b9 02 c0       	push   0xc002b97e
c001bd1e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd21:	e8 13 ff ff ff       	call   c001bc39 <string_ends_with(char const*, char const*)>
c001bd26:	83 c4 10             	add    esp,0x10
c001bd29:	85 c0                	test   eax,eax
c001bd2b:	75 cc                	jne    c001bcf9 <sysCallOpen(regs*)+0x78>
c001bd2d:	83 ec 08             	sub    esp,0x8
c001bd30:	68 7a b9 02 c0       	push   0xc002b97a
c001bd35:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd38:	e8 5b 4b fe ff       	call   c0000898 <strcmp>
c001bd3d:	83 c4 10             	add    esp,0x10
c001bd40:	85 c0                	test   eax,eax
c001bd42:	74 b5                	je     c001bcf9 <sysCallOpen(regs*)+0x78>
c001bd44:	83 ec 08             	sub    esp,0x8
c001bd47:	68 79 b9 02 c0       	push   0xc002b979
c001bd4c:	56                   	push   esi
c001bd4d:	e8 e7 fe ff ff       	call   c001bc39 <string_ends_with(char const*, char const*)>
c001bd52:	83 c4 10             	add    esp,0x10
c001bd55:	85 c0                	test   eax,eax
c001bd57:	75 a0                	jne    c001bcf9 <sysCallOpen(regs*)+0x78>
c001bd59:	83 ec 08             	sub    esp,0x8
c001bd5c:	68 83 b9 02 c0       	push   0xc002b983
c001bd61:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd64:	e8 d0 fe ff ff       	call   c001bc39 <string_ends_with(char const*, char const*)>
c001bd69:	83 c4 10             	add    esp,0x10
c001bd6c:	85 c0                	test   eax,eax
c001bd6e:	0f 85 e7 00 00 00    	jne    c001be5b <sysCallOpen(regs*)+0x1da>
c001bd74:	83 ec 08             	sub    esp,0x8
c001bd77:	68 88 b9 02 c0       	push   0xc002b988
c001bd7c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd7f:	e8 b5 fe ff ff       	call   c001bc39 <string_ends_with(char const*, char const*)>
c001bd84:	83 c4 10             	add    esp,0x10
c001bd87:	85 c0                	test   eax,eax
c001bd89:	0f 85 cc 00 00 00    	jne    c001be5b <sysCallOpen(regs*)+0x1da>
c001bd8f:	83 ec 08             	sub    esp,0x8
c001bd92:	68 84 b9 02 c0       	push   0xc002b984
c001bd97:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd9a:	e8 f9 4a fe ff       	call   c0000898 <strcmp>
c001bd9f:	83 c4 10             	add    esp,0x10
c001bda2:	85 c0                	test   eax,eax
c001bda4:	0f 84 b1 00 00 00    	je     c001be5b <sysCallOpen(regs*)+0x1da>
c001bdaa:	83 ec 08             	sub    esp,0x8
c001bdad:	68 83 b9 02 c0       	push   0xc002b983
c001bdb2:	56                   	push   esi
c001bdb3:	e8 81 fe ff ff       	call   c001bc39 <string_ends_with(char const*, char const*)>
c001bdb8:	83 c4 10             	add    esp,0x10
c001bdbb:	85 c0                	test   eax,eax
c001bdbd:	0f 85 98 00 00 00    	jne    c001be5b <sysCallOpen(regs*)+0x1da>
c001bdc3:	83 ec 0c             	sub    esp,0xc
c001bdc6:	68 14 01 00 00       	push   0x114
c001bdcb:	e8 c9 37 ff ff       	call   c000f599 <malloc>
c001bdd0:	83 c4 0c             	add    esp,0xc
c001bdd3:	89 c6                	mov    esi,eax
c001bdd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdda:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bddd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bde0:	56                   	push   esi
c001bde1:	e8 7c 6e ff ff       	call   c0012c62 <File::File(char const*, Process*)>
c001bde6:	83 c4 10             	add    esp,0x10
c001bde9:	85 f6                	test   esi,esi
c001bdeb:	74 5b                	je     c001be48 <sysCallOpen(regs*)+0x1c7>
c001bded:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bdf0:	0f b6 c2             	movzx  eax,dl
c001bdf3:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bdf6:	89 d0                	mov    eax,edx
c001bdf8:	83 e0 01             	and    eax,0x1
c001bdfb:	f6 c2 02             	test   dl,0x2
c001bdfe:	74 03                	je     c001be03 <sysCallOpen(regs*)+0x182>
c001be00:	83 c8 02             	or     eax,0x2
c001be03:	f6 c2 04             	test   dl,0x4
c001be06:	74 03                	je     c001be0b <sysCallOpen(regs*)+0x18a>
c001be08:	83 c8 04             	or     eax,0x4
c001be0b:	f6 c2 08             	test   dl,0x8
c001be0e:	74 03                	je     c001be13 <sysCallOpen(regs*)+0x192>
c001be10:	83 c8 0a             	or     eax,0xa
c001be13:	83 e2 10             	and    edx,0x10
c001be16:	74 03                	je     c001be1b <sysCallOpen(regs*)+0x19a>
c001be18:	83 c8 12             	or     eax,0x12
c001be1b:	83 ec 08             	sub    esp,0x8
c001be1e:	50                   	push   eax
c001be1f:	56                   	push   esi
c001be20:	e8 a1 6e ff ff       	call   c0012cc6 <File::open(FileOpenMode)>
c001be25:	83 c4 10             	add    esp,0x10
c001be28:	85 c0                	test   eax,eax
c001be2a:	75 1c                	jne    c001be48 <sysCallOpen(regs*)+0x1c7>
c001be2c:	83 ec 0c             	sub    esp,0xc
c001be2f:	56                   	push   esi
c001be30:	e8 d7 4f ff ff       	call   c0010e0c <UnixFile::getFileDescriptor()>
c001be35:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001be38:	83 c4 10             	add    esp,0x10
c001be3b:	89 02                	mov    DWORD PTR [edx],eax
c001be3d:	c1 f8 1f             	sar    eax,0x1f
c001be40:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001be43:	e9 c1 fe ff ff       	jmp    c001bd09 <sysCallOpen(regs*)+0x88>
c001be48:	81 c4 04 01 00 00    	add    esp,0x104
c001be4e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be53:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be58:	5b                   	pop    ebx
c001be59:	5e                   	pop    esi
c001be5a:	c3                   	ret    
c001be5b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be5e:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001be64:	e9 99 fe ff ff       	jmp    c001bd02 <sysCallOpen(regs*)+0x81>

c001be69 <Sys::loadSyscalls()>:
c001be69:	c7 05 40 05 03 c0 d6 b0 01 c0 	mov    DWORD PTR ds:0xc0030540,0xc001b0d6
c001be73:	c7 05 44 05 03 c0 ce ac 01 c0 	mov    DWORD PTR ds:0xc0030544,0xc001acce
c001be7d:	c7 05 48 05 03 c0 bc ae 01 c0 	mov    DWORD PTR ds:0xc0030548,0xc001aebc
c001be87:	c7 05 4c 05 03 c0 0c b0 01 c0 	mov    DWORD PTR ds:0xc003054c,0xc001b00c
c001be91:	c7 05 50 05 03 c0 54 ae 01 c0 	mov    DWORD PTR ds:0xc0030550,0xc001ae54
c001be9b:	c7 05 54 05 03 c0 05 ad 01 c0 	mov    DWORD PTR ds:0xc0030554,0xc001ad05
c001bea5:	c7 05 58 05 03 c0 e6 ac 01 c0 	mov    DWORD PTR ds:0xc0030558,0xc001ace6
c001beaf:	c7 05 5c 05 03 c0 11 af 01 c0 	mov    DWORD PTR ds:0xc003055c,0xc001af11
c001beb9:	c7 05 64 05 03 c0 9f b5 01 c0 	mov    DWORD PTR ds:0xc0030564,0xc001b59f
c001bec3:	c7 05 60 05 03 c0 81 bc 01 c0 	mov    DWORD PTR ds:0xc0030560,0xc001bc81
c001becd:	c7 05 68 05 03 c0 ff b5 01 c0 	mov    DWORD PTR ds:0xc0030568,0xc001b5ff
c001bed7:	c7 05 6c 05 03 c0 e2 b2 01 c0 	mov    DWORD PTR ds:0xc003056c,0xc001b2e2
c001bee1:	c7 05 70 05 03 c0 1c b1 01 c0 	mov    DWORD PTR ds:0xc0030570,0xc001b11c
c001beeb:	c7 05 74 05 03 c0 21 b1 01 c0 	mov    DWORD PTR ds:0xc0030574,0xc001b121
c001bef5:	c7 05 78 05 03 c0 c8 b6 01 c0 	mov    DWORD PTR ds:0xc0030578,0xc001b6c8
c001beff:	c7 05 7c 05 03 c0 74 b6 01 c0 	mov    DWORD PTR ds:0xc003057c,0xc001b674
c001bf09:	c7 05 80 05 03 c0 bb b3 01 c0 	mov    DWORD PTR ds:0xc0030580,0xc001b3bb
c001bf13:	c7 05 84 05 03 c0 12 b4 01 c0 	mov    DWORD PTR ds:0xc0030584,0xc001b412
c001bf1d:	c7 05 88 05 03 c0 7e b4 01 c0 	mov    DWORD PTR ds:0xc0030588,0xc001b47e
c001bf27:	c7 05 8c 05 03 c0 26 b1 01 c0 	mov    DWORD PTR ds:0xc003058c,0xc001b126
c001bf31:	c7 05 90 05 03 c0 38 b7 01 c0 	mov    DWORD PTR ds:0xc0030590,0xc001b738
c001bf3b:	c7 05 94 05 03 c0 52 b7 01 c0 	mov    DWORD PTR ds:0xc0030594,0xc001b752
c001bf45:	c7 05 98 05 03 c0 52 b7 01 c0 	mov    DWORD PTR ds:0xc0030598,0xc001b752
c001bf4f:	c7 05 9c 05 03 c0 87 b7 01 c0 	mov    DWORD PTR ds:0xc003059c,0xc001b787
c001bf59:	c7 05 a0 05 03 c0 eb b7 01 c0 	mov    DWORD PTR ds:0xc00305a0,0xc001b7eb
c001bf63:	c7 05 a4 05 03 c0 30 b1 01 c0 	mov    DWORD PTR ds:0xc00305a4,0xc001b130
c001bf6d:	c7 05 a8 05 03 c0 4f b8 01 c0 	mov    DWORD PTR ds:0xc00305a8,0xc001b84f
c001bf77:	c7 05 ac 05 03 c0 9f b2 01 c0 	mov    DWORD PTR ds:0xc00305ac,0xc001b29f
c001bf81:	c7 05 b0 05 03 c0 9b b8 01 c0 	mov    DWORD PTR ds:0xc00305b0,0xc001b89b
c001bf8b:	c7 05 b4 05 03 c0 61 b3 01 c0 	mov    DWORD PTR ds:0xc00305b4,0xc001b361
c001bf95:	c7 05 b8 05 03 c0 1e b9 01 c0 	mov    DWORD PTR ds:0xc00305b8,0xc001b91e
c001bf9f:	c7 05 bc 05 03 c0 f0 b4 01 c0 	mov    DWORD PTR ds:0xc00305bc,0xc001b4f0
c001bfa9:	c7 05 c0 05 03 c0 45 b9 01 c0 	mov    DWORD PTR ds:0xc00305c0,0xc001b945
c001bfb3:	c7 05 c4 05 03 c0 ad b9 01 c0 	mov    DWORD PTR ds:0xc00305c4,0xc001b9ad
c001bfbd:	c7 05 c8 05 03 c0 5a ba 01 c0 	mov    DWORD PTR ds:0xc00305c8,0xc001ba5a
c001bfc7:	c7 05 cc 05 03 c0 40 b1 01 c0 	mov    DWORD PTR ds:0xc00305cc,0xc001b140
c001bfd1:	c7 05 d0 05 03 c0 aa b1 01 c0 	mov    DWORD PTR ds:0xc00305d0,0xc001b1aa
c001bfdb:	c7 05 d4 05 03 c0 f0 b1 01 c0 	mov    DWORD PTR ds:0xc00305d4,0xc001b1f0
c001bfe5:	c7 05 d8 05 03 c0 6e bb 01 c0 	mov    DWORD PTR ds:0xc00305d8,0xc001bb6e
c001bfef:	c7 05 dc 05 03 c0 6d b7 01 c0 	mov    DWORD PTR ds:0xc00305dc,0xc001b76d
c001bff9:	c7 05 e0 05 03 c0 41 b2 01 c0 	mov    DWORD PTR ds:0xc00305e0,0xc001b241
c001c003:	c7 05 e4 05 03 c0 e0 bb 01 c0 	mov    DWORD PTR ds:0xc00305e4,0xc001bbe0
c001c00d:	c7 05 e8 05 03 c0 25 bc 01 c0 	mov    DWORD PTR ds:0xc00305e8,0xc001bc25
c001c017:	c7 05 ec 05 03 c0 ac ad 01 c0 	mov    DWORD PTR ds:0xc00305ec,0xc001adac
c001c021:	c7 05 f0 05 03 c0 2d af 01 c0 	mov    DWORD PTR ds:0xc00305f0,0xc001af2d
c001c02b:	c7 05 f4 05 03 c0 c2 af 01 c0 	mov    DWORD PTR ds:0xc00305f4,0xc001afc2
c001c035:	c7 05 f8 05 03 c0 98 ac 01 c0 	mov    DWORD PTR ds:0xc00305f8,0xc001ac98
c001c03f:	c7 05 fc 05 03 c0 74 b0 01 c0 	mov    DWORD PTR ds:0xc00305fc,0xc001b074
c001c049:	c7 05 00 06 03 c0 11 ad 01 c0 	mov    DWORD PTR ds:0xc0030600,0xc001ad11
c001c053:	c7 05 04 06 03 c0 28 ad 01 c0 	mov    DWORD PTR ds:0xc0030604,0xc001ad28
c001c05d:	c3                   	ret    

c001c05e <Sys::systemCall(regs*, void*)>:
c001c05e:	53                   	push   ebx
c001c05f:	83 ec 08             	sub    esp,0x8
c001c062:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c066:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c069:	83 f8 7f             	cmp    eax,0x7f
c001c06c:	77 16                	ja     c001c084 <Sys::systemCall(regs*, void*)+0x26>
c001c06e:	8b 14 85 40 05 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfac0]
c001c075:	85 d2                	test   edx,edx
c001c077:	74 0b                	je     c001c084 <Sys::systemCall(regs*, void*)+0x26>
c001c079:	83 ec 0c             	sub    esp,0xc
c001c07c:	53                   	push   ebx
c001c07d:	ff d2                	call   edx
c001c07f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c082:	eb 0d                	jmp    c001c091 <Sys::systemCall(regs*, void*)+0x33>
c001c084:	52                   	push   edx
c001c085:	52                   	push   edx
c001c086:	50                   	push   eax
c001c087:	68 8d b9 02 c0       	push   0xc002b98d
c001c08c:	e8 72 66 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001c091:	83 c4 10             	add    esp,0x10
c001c094:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c099:	31 d2                	xor    edx,edx
c001c09b:	83 c4 08             	add    esp,0x8
c001c09e:	5b                   	pop    ebx
c001c09f:	c3                   	ret    

c001c0a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c0a0:	55                   	push   ebp
c001c0a1:	57                   	push   edi
c001c0a2:	56                   	push   esi
c001c0a3:	53                   	push   ebx
c001c0a4:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c0aa:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c0b1:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c0b8:	85 c0                	test   eax,eax
c001c0ba:	0f 95 c1             	setne  cl
c001c0bd:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c0c5:	0f 94 c2             	sete   dl
c001c0c8:	84 d1                	test   cl,dl
c001c0ca:	74 23                	je     c001c0ef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c0cc:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c0d2:	74 1b                	je     c001c0ef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c0d4:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c0da:	89 da                	mov    edx,ebx
c001c0dc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c0e2:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c0e8:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c0ef:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c0f6:	05 ff 0f 00 00       	add    eax,0xfff
c001c0fb:	83 ec 0c             	sub    esp,0xc
c001c0fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c102:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c108:	c1 e8 0c             	shr    eax,0xc
c001c10b:	89 fe                	mov    esi,edi
c001c10d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c111:	c1 ee 0c             	shr    esi,0xc
c001c114:	6a 01                	push   0x1
c001c116:	e8 3c 51 ff ff       	call   c0011257 <Virt::allocateKernelVirtualPages(int)>
c001c11b:	89 c5                	mov    ebp,eax
c001c11d:	58                   	pop    eax
c001c11e:	5a                   	pop    edx
c001c11f:	56                   	push   esi
c001c120:	68 a1 b9 02 c0       	push   0xc002b9a1
c001c125:	e8 d9 65 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001c12a:	59                   	pop    ecx
c001c12b:	58                   	pop    eax
c001c12c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c130:	68 b3 b9 02 c0       	push   0xc002b9b3
c001c135:	e8 c9 65 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001c13a:	83 c4 10             	add    esp,0x10
c001c13d:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c143:	0f 86 31 01 00 00    	jbe    c001c27a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c149:	c1 e6 0c             	shl    esi,0xc
c001c14c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c14f:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c152:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c156:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c15d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c160:	01 df                	add    edi,ebx
c001c162:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c165:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c169:	0f 84 08 01 00 00    	je     c001c277 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c16f:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c175:	76 05                	jbe    c001c17c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c177:	bf 00 10 00 00       	mov    edi,0x1000
c001c17c:	83 ec 0c             	sub    esp,0xc
c001c17f:	31 d2                	xor    edx,edx
c001c181:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c188:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c18a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c18e:	50                   	push   eax
c001c18f:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c193:	56                   	push   esi
c001c194:	52                   	push   edx
c001c195:	57                   	push   edi
c001c196:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c19d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c1a0:	83 c4 20             	add    esp,0x20
c001c1a3:	85 c0                	test   eax,eax
c001c1a5:	74 0a                	je     c001c1b1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c1a7:	53                   	push   ebx
c001c1a8:	53                   	push   ebx
c001c1a9:	50                   	push   eax
c001c1aa:	68 c5 b9 02 c0       	push   0xc002b9c5
c001c1af:	eb 0f                	jmp    c001c1c0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c1b1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c1b5:	74 20                	je     c001c1d7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c1b7:	51                   	push   ecx
c001c1b8:	51                   	push   ecx
c001c1b9:	6a 00                	push   0x0
c001c1bb:	68 f0 b9 02 c0       	push   0xc002b9f0
c001c1c0:	e8 3e 65 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001c1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c1c8:	e8 d0 54 ff ff       	call   c001169d <Virt::freeKernelVirtualPages(unsigned long)>
c001c1cd:	83 c4 10             	add    esp,0x10
c001c1d0:	31 c0                	xor    eax,eax
c001c1d2:	e9 68 01 00 00       	jmp    c001c33f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c1d7:	fa                   	cli    
c001c1d8:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c001c1de:	e8 b2 37 ff ff       	call   c000f995 <Phys::allocatePage()>
c001c1e3:	6a 07                	push   0x7
c001c1e5:	89 c7                	mov    edi,eax
c001c1e7:	55                   	push   ebp
c001c1e8:	50                   	push   eax
c001c1e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1f1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1f7:	e8 18 58 ff ff       	call   c0011a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c1fc:	83 c4 0c             	add    esp,0xc
c001c1ff:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c206:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c20c:	6a 00                	push   0x0
c001c20e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c213:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c216:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c21c:	e8 4d 56 ff ff       	call   c001186e <VAS::mapOtherVASIn(bool, VAS*)>
c001c221:	58                   	pop    eax
c001c222:	5a                   	pop    edx
c001c223:	68 07 0c 00 00       	push   0xc07
c001c228:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c22c:	57                   	push   edi
c001c22d:	89 ef                	mov    edi,ebp
c001c22f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c236:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c23c:	6a 00                	push   0x0
c001c23e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c243:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c246:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c24c:	e8 7f 5b ff ff       	call   c0011dd0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c251:	b9 00 10 00 00       	mov    ecx,0x1000
c001c256:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c258:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001c25d:	83 c4 20             	add    esp,0x20
c001c260:	48                   	dec    eax
c001c261:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001c266:	85 c0                	test   eax,eax
c001c268:	75 01                	jne    c001c26b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c26a:	fb                   	sti    
c001c26b:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c272:	e9 df fe ff ff       	jmp    c001c156 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c277:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c27a:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c282:	0f 86 a9 00 00 00    	jbe    c001c331 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c288:	fa                   	cli    
c001c289:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c001c28f:	51                   	push   ecx
c001c290:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c297:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c29d:	6a 00                	push   0x0
c001c29f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2a7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2ad:	e8 bc 55 ff ff       	call   c001186e <VAS::mapOtherVASIn(bool, VAS*)>
c001c2b2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c2b6:	c1 e6 0c             	shl    esi,0xc
c001c2b9:	01 de                	add    esi,ebx
c001c2bb:	83 c4 10             	add    esp,0x10
c001c2be:	39 de                	cmp    esi,ebx
c001c2c0:	74 61                	je     c001c323 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c2c2:	e8 ce 36 ff ff       	call   c000f995 <Phys::allocatePage()>
c001c2c7:	6a 07                	push   0x7
c001c2c9:	89 c7                	mov    edi,eax
c001c2cb:	55                   	push   ebp
c001c2cc:	50                   	push   eax
c001c2cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2d5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2db:	e8 34 57 ff ff       	call   c0011a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c2e0:	58                   	pop    eax
c001c2e1:	5a                   	pop    edx
c001c2e2:	68 07 0c 00 00       	push   0xc07
c001c2e7:	53                   	push   ebx
c001c2e8:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c2ee:	57                   	push   edi
c001c2ef:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c2f6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2fc:	6a 00                	push   0x0
c001c2fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c303:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c306:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c30c:	e8 bf 5a ff ff       	call   c0011dd0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c311:	83 c4 1c             	add    esp,0x1c
c001c314:	68 00 10 00 00       	push   0x1000
c001c319:	6a 00                	push   0x0
c001c31b:	55                   	push   ebp
c001c31c:	e8 2f 44 fe ff       	call   c0000750 <memset>
c001c321:	eb 98                	jmp    c001c2bb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c323:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001c328:	48                   	dec    eax
c001c329:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001c32e:	75 01                	jne    c001c331 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c330:	fb                   	sti    
c001c331:	83 ec 0c             	sub    esp,0xc
c001c334:	55                   	push   ebp
c001c335:	e8 63 53 ff ff       	call   c001169d <Virt::freeKernelVirtualPages(unsigned long)>
c001c33a:	83 c4 10             	add    esp,0x10
c001c33d:	b0 01                	mov    al,0x1
c001c33f:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c345:	5b                   	pop    ebx
c001c346:	5e                   	pop    esi
c001c347:	5f                   	pop    edi
c001c348:	5d                   	pop    ebp
c001c349:	c3                   	ret    

c001c34a <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c34a:	55                   	push   ebp
c001c34b:	57                   	push   edi
c001c34c:	56                   	push   esi
c001c34d:	53                   	push   ebx
c001c34e:	83 ec 48             	sub    esp,0x48
c001c351:	68 14 01 00 00       	push   0x114
c001c356:	e8 3e 32 ff ff       	call   c000f599 <malloc>
c001c35b:	83 c4 0c             	add    esp,0xc
c001c35e:	89 c6                	mov    esi,eax
c001c360:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c364:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c368:	50                   	push   eax
c001c369:	e8 f4 68 ff ff       	call   c0012c62 <File::File(char const*, Process*)>
c001c36e:	58                   	pop    eax
c001c36f:	5a                   	pop    edx
c001c370:	6a 01                	push   0x1
c001c372:	56                   	push   esi
c001c373:	e8 4e 69 ff ff       	call   c0012cc6 <File::open(FileOpenMode)>
c001c378:	83 c4 10             	add    esp,0x10
c001c37b:	85 c0                	test   eax,eax
c001c37d:	0f 85 47 01 00 00    	jne    c001c4ca <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c383:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c38b:	83 ec 0c             	sub    esp,0xc
c001c38e:	6a 34                	push   0x34
c001c390:	e8 04 32 ff ff       	call   c000f599 <malloc>
c001c395:	89 c3                	mov    ebx,eax
c001c397:	58                   	pop    eax
c001c398:	8b 06                	mov    eax,DWORD PTR [esi]
c001c39a:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c39e:	57                   	push   edi
c001c39f:	53                   	push   ebx
c001c3a0:	6a 00                	push   0x0
c001c3a2:	6a 34                	push   0x34
c001c3a4:	56                   	push   esi
c001c3a5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c3a8:	83 c4 20             	add    esp,0x20
c001c3ab:	85 c0                	test   eax,eax
c001c3ad:	0f 85 17 01 00 00    	jne    c001c4ca <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3b3:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c3b9:	0f 85 0b 01 00 00    	jne    c001c4ca <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3bf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c3c2:	85 c0                	test   eax,eax
c001c3c4:	0f 84 00 01 00 00    	je     c001c4ca <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3ca:	31 d2                	xor    edx,edx
c001c3cc:	55                   	push   ebp
c001c3cd:	52                   	push   edx
c001c3ce:	50                   	push   eax
c001c3cf:	56                   	push   esi
c001c3d0:	e8 af 69 ff ff       	call   c0012d84 <File::seek(unsigned long long)>
c001c3d5:	83 c4 10             	add    esp,0x10
c001c3d8:	85 c0                	test   eax,eax
c001c3da:	0f 85 ea 00 00 00    	jne    c001c4ca <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3e0:	83 ec 0c             	sub    esp,0xc
c001c3e3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c3e6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c3ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c3ee:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c3f2:	0f af c2             	imul   eax,edx
c001c3f5:	50                   	push   eax
c001c3f6:	e8 9e 31 ff ff       	call   c000f599 <malloc>
c001c3fb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c3fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c401:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c404:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c408:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c40c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c410:	0f af c2             	imul   eax,edx
c001c413:	99                   	cdq    
c001c414:	52                   	push   edx
c001c415:	50                   	push   eax
c001c416:	56                   	push   esi
c001c417:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c41a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c41d:	83 c4 20             	add    esp,0x20
c001c420:	85 c0                	test   eax,eax
c001c422:	0f 84 a2 00 00 00    	je     c001c4ca <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c428:	31 d2                	xor    edx,edx
c001c42a:	51                   	push   ecx
c001c42b:	52                   	push   edx
c001c42c:	50                   	push   eax
c001c42d:	56                   	push   esi
c001c42e:	e8 51 69 ff ff       	call   c0012d84 <File::seek(unsigned long long)>
c001c433:	83 c4 10             	add    esp,0x10
c001c436:	85 c0                	test   eax,eax
c001c438:	0f 85 8c 00 00 00    	jne    c001c4ca <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c43e:	83 ec 0c             	sub    esp,0xc
c001c441:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c445:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c449:	31 ed                	xor    ebp,ebp
c001c44b:	0f af c2             	imul   eax,edx
c001c44e:	50                   	push   eax
c001c44f:	e8 45 31 ff ff       	call   c000f599 <malloc>
c001c454:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c456:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c45a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c45d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c461:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c465:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c469:	0f af c2             	imul   eax,edx
c001c46c:	99                   	cdq    
c001c46d:	52                   	push   edx
c001c46e:	50                   	push   eax
c001c46f:	56                   	push   esi
c001c470:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c473:	83 c4 20             	add    esp,0x20
c001c476:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c47e:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c482:	0f 86 80 00 00 00    	jbe    c001c508 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c488:	0f b7 fd             	movzx  edi,bp
c001c48b:	c1 e7 05             	shl    edi,0x5
c001c48e:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c492:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c495:	75 6b                	jne    c001c502 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c497:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c49a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c49e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c4a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4a5:	52                   	push   edx
c001c4a6:	31 d2                	xor    edx,edx
c001c4a8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c4ab:	52                   	push   edx
c001c4ac:	50                   	push   eax
c001c4ad:	56                   	push   esi
c001c4ae:	e8 d1 68 ff ff       	call   c0012d84 <File::seek(unsigned long long)>
c001c4b3:	83 c4 10             	add    esp,0x10
c001c4b6:	85 c0                	test   eax,eax
c001c4b8:	74 17                	je     c001c4d1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c4ba:	83 ec 0c             	sub    esp,0xc
c001c4bd:	68 1c ba 02 c0       	push   0xc002ba1c
c001c4c2:	e8 3c 62 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001c4c7:	83 c4 10             	add    esp,0x10
c001c4ca:	31 c0                	xor    eax,eax
c001c4cc:	e9 87 00 00 00       	jmp    c001c558 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c4d1:	83 ec 0c             	sub    esp,0xc
c001c4d4:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c4d7:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c4da:	50                   	push   eax
c001c4db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c4df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c4e3:	56                   	push   esi
c001c4e4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c4e8:	e8 b3 fb ff ff       	call   c001c0a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c4ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c4f1:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c4f5:	83 c4 20             	add    esp,0x20
c001c4f8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c4fc:	73 04                	jae    c001c502 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c4fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c502:	45                   	inc    ebp
c001c503:	e9 76 ff ff ff       	jmp    c001c47e <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c508:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c50c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c510:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c514:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c51a:	83 ec 0c             	sub    esp,0xc
c001c51d:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c523:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c528:	05 00 10 00 00       	add    eax,0x1000
c001c52d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c534:	e8 70 30 ff ff       	call   c000f5a9 <free>
c001c539:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c53c:	e8 68 30 ff ff       	call   c000f5a9 <free>
c001c541:	58                   	pop    eax
c001c542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c546:	e8 5e 30 ff ff       	call   c000f5a9 <free>
c001c54b:	89 34 24             	mov    DWORD PTR [esp],esi
c001c54e:	e8 d1 67 ff ff       	call   c0012d24 <File::close()>
c001c553:	83 c4 10             	add    esp,0x10
c001c556:	b0 01                	mov    al,0x1
c001c558:	83 c4 3c             	add    esp,0x3c
c001c55b:	5b                   	pop    ebx
c001c55c:	5e                   	pop    esi
c001c55d:	5f                   	pop    edi
c001c55e:	5d                   	pop    ebp
c001c55f:	c3                   	ret    

c001c560 <Thr::runtimeReferenceHelper()>:
c001c560:	83 ec 18             	sub    esp,0x18
c001c563:	68 24 ba 02 c0       	push   0xc002ba24
c001c568:	e8 96 61 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001c56d:	fa                   	cli    
c001c56e:	83 c4 10             	add    esp,0x10
c001c571:	eb fe                	jmp    c001c571 <Thr::runtimeReferenceHelper()+0x11>

c001c573 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c573:	57                   	push   edi
c001c574:	56                   	push   esi
c001c575:	53                   	push   ebx
c001c576:	31 db                	xor    ebx,ebx
c001c578:	39 1d e0 0e 03 c0    	cmp    DWORD PTR ds:0xc0030ee0,ebx
c001c57e:	7e 3c                	jle    c001c5bc <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c580:	8b 34 9d 60 0e 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf1a0]
c001c587:	31 ff                	xor    edi,edi
c001c589:	39 3c 9d 60 0d 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf2a0],edi
c001c590:	7e 27                	jle    c001c5b9 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c592:	50                   	push   eax
c001c593:	50                   	push   eax
c001c594:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c598:	8b 06                	mov    eax,DWORD PTR [esi]
c001c59a:	03 04 9d e0 0d 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf220]
c001c5a1:	50                   	push   eax
c001c5a2:	e8 f1 42 fe ff       	call   c0000898 <strcmp>
c001c5a7:	83 c4 10             	add    esp,0x10
c001c5aa:	85 c0                	test   eax,eax
c001c5ac:	75 05                	jne    c001c5b3 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c5ae:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c5b1:	eb 0b                	jmp    c001c5be <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c5b3:	83 c6 10             	add    esi,0x10
c001c5b6:	47                   	inc    edi
c001c5b7:	eb d0                	jmp    c001c589 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c5b9:	43                   	inc    ebx
c001c5ba:	eb bc                	jmp    c001c578 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c5bc:	31 c0                	xor    eax,eax
c001c5be:	5b                   	pop    ebx
c001c5bf:	5e                   	pop    esi
c001c5c0:	5f                   	pop    edi
c001c5c1:	c3                   	ret    

c001c5c2 <Thr::loadKernelSymbolTable(char const*)>:
c001c5c2:	55                   	push   ebp
c001c5c3:	57                   	push   edi
c001c5c4:	56                   	push   esi
c001c5c5:	53                   	push   ebx
c001c5c6:	83 ec 68             	sub    esp,0x68
c001c5c9:	8b 35 30 0f 03 c0    	mov    esi,DWORD PTR ds:0xc0030f30
c001c5cf:	68 14 01 00 00       	push   0x114
c001c5d4:	e8 c0 2f ff ff       	call   c000f599 <malloc>
c001c5d9:	83 c4 0c             	add    esp,0xc
c001c5dc:	89 c3                	mov    ebx,eax
c001c5de:	56                   	push   esi
c001c5df:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c5e3:	50                   	push   eax
c001c5e4:	e8 79 66 ff ff       	call   c0012c62 <File::File(char const*, Process*)>
c001c5e9:	5e                   	pop    esi
c001c5ea:	5f                   	pop    edi
c001c5eb:	6a 01                	push   0x1
c001c5ed:	53                   	push   ebx
c001c5ee:	e8 d3 66 ff ff       	call   c0012cc6 <File::open(FileOpenMode)>
c001c5f3:	83 c4 10             	add    esp,0x10
c001c5f6:	85 c0                	test   eax,eax
c001c5f8:	74 0a                	je     c001c604 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c5fa:	83 ec 0c             	sub    esp,0xc
c001c5fd:	68 46 ba 02 c0       	push   0xc002ba46
c001c602:	eb 34                	jmp    c001c638 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c604:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c60c:	83 ec 0c             	sub    esp,0xc
c001c60f:	6a 34                	push   0x34
c001c611:	e8 83 2f ff ff       	call   c000f599 <malloc>
c001c616:	59                   	pop    ecx
c001c617:	89 c7                	mov    edi,eax
c001c619:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c61d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c61f:	56                   	push   esi
c001c620:	57                   	push   edi
c001c621:	6a 00                	push   0x0
c001c623:	6a 34                	push   0x34
c001c625:	53                   	push   ebx
c001c626:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c629:	83 c4 20             	add    esp,0x20
c001c62c:	85 c0                	test   eax,eax
c001c62e:	74 17                	je     c001c647 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c630:	83 ec 0c             	sub    esp,0xc
c001c633:	68 5d ba 02 c0       	push   0xc002ba5d
c001c638:	e8 32 d8 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c001c63d:	83 c4 10             	add    esp,0x10
c001c640:	31 c0                	xor    eax,eax
c001c642:	e9 31 02 00 00       	jmp    c001c878 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c647:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c64d:	75 e1                	jne    c001c630 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c64f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c652:	85 c0                	test   eax,eax
c001c654:	74 da                	je     c001c630 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c656:	52                   	push   edx
c001c657:	31 d2                	xor    edx,edx
c001c659:	52                   	push   edx
c001c65a:	50                   	push   eax
c001c65b:	53                   	push   ebx
c001c65c:	e8 23 67 ff ff       	call   c0012d84 <File::seek(unsigned long long)>
c001c661:	83 c4 10             	add    esp,0x10
c001c664:	85 c0                	test   eax,eax
c001c666:	75 c8                	jne    c001c630 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c668:	83 ec 0c             	sub    esp,0xc
c001c66b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c66f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c673:	31 ed                	xor    ebp,ebp
c001c675:	0f af c2             	imul   eax,edx
c001c678:	50                   	push   eax
c001c679:	e8 1b 2f ff ff       	call   c000f599 <malloc>
c001c67e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c680:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c684:	89 34 24             	mov    DWORD PTR [esp],esi
c001c687:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c68b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c68f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c693:	0f af c2             	imul   eax,edx
c001c696:	99                   	cdq    
c001c697:	52                   	push   edx
c001c698:	50                   	push   eax
c001c699:	53                   	push   ebx
c001c69a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c69d:	83 c4 20             	add    esp,0x20
c001c6a0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c6a8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c6b0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c6b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c6c0:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c6c4:	0f 86 aa 00 00 00    	jbe    c001c774 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c6ca:	0f b7 f5             	movzx  esi,bp
c001c6cd:	6b f6 28             	imul   esi,esi,0x28
c001c6d0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c6d4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c6d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c6db:	50                   	push   eax
c001c6dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c6e0:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c6e4:	8b 16                	mov    edx,DWORD PTR [esi]
c001c6e6:	6b c0 28             	imul   eax,eax,0x28
c001c6e9:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c6ed:	89 d0                	mov    eax,edx
c001c6ef:	31 d2                	xor    edx,edx
c001c6f1:	52                   	push   edx
c001c6f2:	50                   	push   eax
c001c6f3:	53                   	push   ebx
c001c6f4:	e8 8b 66 ff ff       	call   c0012d84 <File::seek(unsigned long long)>
c001c6f9:	83 c4 0c             	add    esp,0xc
c001c6fc:	6a 20                	push   0x20
c001c6fe:	6a 00                	push   0x0
c001c700:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c704:	52                   	push   edx
c001c705:	e8 46 40 fe ff       	call   c0000750 <memset>
c001c70a:	58                   	pop    eax
c001c70b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c70d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c711:	51                   	push   ecx
c001c712:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c716:	52                   	push   edx
c001c717:	6a 00                	push   0x0
c001c719:	6a 1f                	push   0x1f
c001c71b:	53                   	push   ebx
c001c71c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c71f:	83 c4 18             	add    esp,0x18
c001c722:	68 74 ba 02 c0       	push   0xc002ba74
c001c727:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c72b:	52                   	push   edx
c001c72c:	e8 67 41 fe ff       	call   c0000898 <strcmp>
c001c731:	83 c4 10             	add    esp,0x10
c001c734:	85 c0                	test   eax,eax
c001c736:	75 0f                	jne    c001c747 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c738:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c73b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c73f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c743:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c747:	50                   	push   eax
c001c748:	50                   	push   eax
c001c749:	68 7c ba 02 c0       	push   0xc002ba7c
c001c74e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c752:	50                   	push   eax
c001c753:	e8 40 41 fe ff       	call   c0000898 <strcmp>
c001c758:	83 c4 10             	add    esp,0x10
c001c75b:	85 c0                	test   eax,eax
c001c75d:	75 0f                	jne    c001c76e <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c75f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c762:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c766:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c76a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c76e:	45                   	inc    ebp
c001c76f:	e9 4c ff ff ff       	jmp    c001c6c0 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c774:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c779:	75 10                	jne    c001c78b <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c77b:	83 ec 0c             	sub    esp,0xc
c001c77e:	68 84 ba 02 c0       	push   0xc002ba84
c001c783:	e8 e7 d6 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c001c788:	83 c4 10             	add    esp,0x10
c001c78b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c790:	75 10                	jne    c001c7a2 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c792:	83 ec 0c             	sub    esp,0xc
c001c795:	68 84 ba 02 c0       	push   0xc002ba84
c001c79a:	e8 d0 d6 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c001c79f:	83 c4 10             	add    esp,0x10
c001c7a2:	31 d2                	xor    edx,edx
c001c7a4:	50                   	push   eax
c001c7a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a9:	52                   	push   edx
c001c7aa:	50                   	push   eax
c001c7ab:	53                   	push   ebx
c001c7ac:	e8 d3 65 ff ff       	call   c0012d84 <File::seek(unsigned long long)>
c001c7b1:	5a                   	pop    edx
c001c7b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c7b6:	e8 de 2d ff ff       	call   c000f599 <malloc>
c001c7bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c7c3:	31 c9                	xor    ecx,ecx
c001c7c5:	5e                   	pop    esi
c001c7c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c7c8:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c7cc:	55                   	push   ebp
c001c7cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7d1:	51                   	push   ecx
c001c7d2:	52                   	push   edx
c001c7d3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c7d7:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c7db:	53                   	push   ebx
c001c7dc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7df:	83 c4 14             	add    esp,0x14
c001c7e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c7e6:	e8 ae 2d ff ff       	call   c000f599 <malloc>
c001c7eb:	89 c6                	mov    esi,eax
c001c7ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c7ef:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c7f2:	56                   	push   esi
c001c7f3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c7f7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c7fb:	51                   	push   ecx
c001c7fc:	52                   	push   edx
c001c7fd:	53                   	push   ebx
c001c7fe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c801:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c805:	8b 15 e0 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030ee0
c001c80b:	83 c4 1c             	add    esp,0x1c
c001c80e:	c1 e8 04             	shr    eax,0x4
c001c811:	89 04 95 60 0d 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf2a0],eax
c001c818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c81c:	31 d2                	xor    edx,edx
c001c81e:	52                   	push   edx
c001c81f:	50                   	push   eax
c001c820:	53                   	push   ebx
c001c821:	e8 5e 65 ff ff       	call   c0012d84 <File::seek(unsigned long long)>
c001c826:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c828:	31 d2                	xor    edx,edx
c001c82a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c82d:	56                   	push   esi
c001c82e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c832:	52                   	push   edx
c001c833:	50                   	push   eax
c001c834:	53                   	push   ebx
c001c835:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c838:	83 c4 14             	add    esp,0x14
c001c83b:	53                   	push   ebx
c001c83c:	e8 e3 64 ff ff       	call   c0012d24 <File::close()>
c001c841:	5d                   	pop    ebp
c001c842:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c846:	e8 5e 2d ff ff       	call   c000f5a9 <free>
c001c84b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c84e:	e8 56 2d ff ff       	call   c000f5a9 <free>
c001c853:	a1 e0 0e 03 c0       	mov    eax,ds:0xc0030ee0
c001c858:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c85c:	8d 50 01             	lea    edx,[eax+0x1]
c001c85f:	89 0c 85 60 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1a0],ecx
c001c866:	89 34 85 e0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf220],esi
c001c86d:	89 15 e0 0e 03 c0    	mov    DWORD PTR ds:0xc0030ee0,edx
c001c873:	83 c4 10             	add    esp,0x10
c001c876:	b0 01                	mov    al,0x1
c001c878:	83 c4 5c             	add    esp,0x5c
c001c87b:	5b                   	pop    ebx
c001c87c:	5e                   	pop    esi
c001c87d:	5f                   	pop    edi
c001c87e:	5d                   	pop    ebp
c001c87f:	c3                   	ret    

c001c880 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c880:	55                   	push   ebp
c001c881:	57                   	push   edi
c001c882:	56                   	push   esi
c001c883:	53                   	push   ebx
c001c884:	81 ec 68 03 00 00    	sub    esp,0x368
c001c88a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c891:	8b 1d 30 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030f30
c001c897:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c89b:	68 14 01 00 00       	push   0x114
c001c8a0:	e8 f4 2c ff ff       	call   c000f599 <malloc>
c001c8a5:	83 c4 0c             	add    esp,0xc
c001c8a8:	89 c5                	mov    ebp,eax
c001c8aa:	53                   	push   ebx
c001c8ab:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c8b2:	50                   	push   eax
c001c8b3:	e8 aa 63 ff ff       	call   c0012c62 <File::File(char const*, Process*)>
c001c8b8:	5e                   	pop    esi
c001c8b9:	5f                   	pop    edi
c001c8ba:	6a 01                	push   0x1
c001c8bc:	55                   	push   ebp
c001c8bd:	e8 04 64 ff ff       	call   c0012cc6 <File::open(FileOpenMode)>
c001c8c2:	83 c4 10             	add    esp,0x10
c001c8c5:	85 c0                	test   eax,eax
c001c8c7:	0f 85 a7 06 00 00    	jne    c001cf74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8cd:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c8d5:	83 ec 0c             	sub    esp,0xc
c001c8d8:	6a 34                	push   0x34
c001c8da:	e8 ba 2c ff ff       	call   c000f599 <malloc>
c001c8df:	5b                   	pop    ebx
c001c8e0:	89 c7                	mov    edi,eax
c001c8e2:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c8e6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c8e9:	53                   	push   ebx
c001c8ea:	57                   	push   edi
c001c8eb:	6a 00                	push   0x0
c001c8ed:	6a 34                	push   0x34
c001c8ef:	55                   	push   ebp
c001c8f0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c8f3:	83 c4 20             	add    esp,0x20
c001c8f6:	85 c0                	test   eax,eax
c001c8f8:	0f 85 76 06 00 00    	jne    c001cf74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8fe:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c904:	0f 85 6a 06 00 00    	jne    c001cf74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c90a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c90d:	85 c0                	test   eax,eax
c001c90f:	0f 84 5f 06 00 00    	je     c001cf74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c915:	31 d2                	xor    edx,edx
c001c917:	51                   	push   ecx
c001c918:	52                   	push   edx
c001c919:	50                   	push   eax
c001c91a:	55                   	push   ebp
c001c91b:	e8 64 64 ff ff       	call   c0012d84 <File::seek(unsigned long long)>
c001c920:	83 c4 10             	add    esp,0x10
c001c923:	85 c0                	test   eax,eax
c001c925:	0f 85 49 06 00 00    	jne    c001cf74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c92b:	83 ec 0c             	sub    esp,0xc
c001c92e:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c931:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c935:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c939:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c93d:	0f af c2             	imul   eax,edx
c001c940:	50                   	push   eax
c001c941:	e8 53 2c ff ff       	call   c000f599 <malloc>
c001c946:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c949:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c94d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c950:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c954:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c958:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c95c:	0f af c2             	imul   eax,edx
c001c95f:	99                   	cdq    
c001c960:	52                   	push   edx
c001c961:	50                   	push   eax
c001c962:	55                   	push   ebp
c001c963:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c966:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c969:	83 c4 20             	add    esp,0x20
c001c96c:	85 c0                	test   eax,eax
c001c96e:	0f 84 00 06 00 00    	je     c001cf74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c974:	52                   	push   edx
c001c975:	31 d2                	xor    edx,edx
c001c977:	52                   	push   edx
c001c978:	50                   	push   eax
c001c979:	55                   	push   ebp
c001c97a:	e8 05 64 ff ff       	call   c0012d84 <File::seek(unsigned long long)>
c001c97f:	83 c4 10             	add    esp,0x10
c001c982:	85 c0                	test   eax,eax
c001c984:	0f 85 ea 05 00 00    	jne    c001cf74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c98a:	83 ec 0c             	sub    esp,0xc
c001c98d:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c991:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c995:	31 f6                	xor    esi,esi
c001c997:	0f af c2             	imul   eax,edx
c001c99a:	50                   	push   eax
c001c99b:	e8 f9 2b ff ff       	call   c000f599 <malloc>
c001c9a0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c9a3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c9a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c9ae:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c9b2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c9b6:	0f af c2             	imul   eax,edx
c001c9b9:	99                   	cdq    
c001c9ba:	52                   	push   edx
c001c9bb:	50                   	push   eax
c001c9bc:	55                   	push   ebp
c001c9bd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9c0:	83 c4 20             	add    esp,0x20
c001c9c3:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c9c7:	0f 86 8a 00 00 00    	jbe    c001ca57 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c9cd:	0f b7 de             	movzx  ebx,si
c001c9d0:	c1 e3 05             	shl    ebx,0x5
c001c9d3:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c9d7:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c9da:	75 75                	jne    c001ca51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c9dc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c9df:	31 d2                	xor    edx,edx
c001c9e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c9e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c9e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c9ec:	50                   	push   eax
c001c9ed:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c9f0:	52                   	push   edx
c001c9f1:	50                   	push   eax
c001c9f2:	55                   	push   ebp
c001c9f3:	e8 8c 63 ff ff       	call   c0012d84 <File::seek(unsigned long long)>
c001c9f8:	83 c4 10             	add    esp,0x10
c001c9fb:	85 c0                	test   eax,eax
c001c9fd:	0f 85 71 05 00 00    	jne    c001cf74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca03:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001ca0a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca0d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001ca11:	31 d2                	xor    edx,edx
c001ca13:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ca17:	83 ec 0c             	sub    esp,0xc
c001ca1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ca1e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ca25:	50                   	push   eax
c001ca26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ca2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca2e:	52                   	push   edx
c001ca2f:	50                   	push   eax
c001ca30:	55                   	push   ebp
c001ca31:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca34:	83 c4 1c             	add    esp,0x1c
c001ca37:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ca3a:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ca3d:	50                   	push   eax
c001ca3e:	6a 00                	push   0x0
c001ca40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca44:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001ca48:	50                   	push   eax
c001ca49:	e8 02 3d fe ff       	call   c0000750 <memset>
c001ca4e:	83 c4 10             	add    esp,0x10
c001ca51:	46                   	inc    esi
c001ca52:	e9 6c ff ff ff       	jmp    c001c9c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001ca57:	53                   	push   ebx
c001ca58:	31 db                	xor    ebx,ebx
c001ca5a:	68 00 01 00 00       	push   0x100
c001ca5f:	6a 00                	push   0x0
c001ca61:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ca65:	50                   	push   eax
c001ca66:	e8 e5 3c fe ff       	call   c0000750 <memset>
c001ca6b:	83 c4 0c             	add    esp,0xc
c001ca6e:	68 00 01 00 00       	push   0x100
c001ca73:	6a 00                	push   0x0
c001ca75:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ca7c:	50                   	push   eax
c001ca7d:	e8 ce 3c fe ff       	call   c0000750 <memset>
c001ca82:	83 c4 10             	add    esp,0x10
c001ca85:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ca8d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ca95:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001ca9d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001caa5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001caad:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001cab1:	0f 86 30 01 00 00    	jbe    c001cbe7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001cab7:	0f b7 f3             	movzx  esi,bx
c001caba:	6b f6 28             	imul   esi,esi,0x28
c001cabd:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cac1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cac4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cac8:	52                   	push   edx
c001cac9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cacd:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001cad1:	8b 06                	mov    eax,DWORD PTR [esi]
c001cad3:	6b d2 28             	imul   edx,edx,0x28
c001cad6:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001cada:	31 d2                	xor    edx,edx
c001cadc:	52                   	push   edx
c001cadd:	50                   	push   eax
c001cade:	55                   	push   ebp
c001cadf:	e8 a0 62 ff ff       	call   c0012d84 <File::seek(unsigned long long)>
c001cae4:	83 c4 0c             	add    esp,0xc
c001cae7:	6a 20                	push   0x20
c001cae9:	6a 00                	push   0x0
c001caeb:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001caf2:	51                   	push   ecx
c001caf3:	e8 58 3c fe ff       	call   c0000750 <memset>
c001caf8:	59                   	pop    ecx
c001caf9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cafc:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cb00:	52                   	push   edx
c001cb01:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cb08:	51                   	push   ecx
c001cb09:	6a 00                	push   0x0
c001cb0b:	6a 1f                	push   0x1f
c001cb0d:	55                   	push   ebp
c001cb0e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb11:	83 c4 1c             	add    esp,0x1c
c001cb14:	6a 09                	push   0x9
c001cb16:	68 9e ba 02 c0       	push   0xc002ba9e
c001cb1b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cb22:	51                   	push   ecx
c001cb23:	e8 24 3b fe ff       	call   c000064c <memcmp>
c001cb28:	83 c4 10             	add    esp,0x10
c001cb2b:	85 c0                	test   eax,eax
c001cb2d:	75 21                	jne    c001cb50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001cb2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb37:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cb3b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb3f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb42:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cb49:	89 d0                	mov    eax,edx
c001cb4b:	40                   	inc    eax
c001cb4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb50:	50                   	push   eax
c001cb51:	6a 09                	push   0x9
c001cb53:	68 a8 ba 02 c0       	push   0xc002baa8
c001cb58:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb5f:	50                   	push   eax
c001cb60:	e8 e7 3a fe ff       	call   c000064c <memcmp>
c001cb65:	83 c4 10             	add    esp,0x10
c001cb68:	85 c0                	test   eax,eax
c001cb6a:	75 21                	jne    c001cb8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cb6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb70:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb74:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cb78:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb7c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb7f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cb86:	89 d0                	mov    eax,edx
c001cb88:	40                   	inc    eax
c001cb89:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb8d:	50                   	push   eax
c001cb8e:	50                   	push   eax
c001cb8f:	68 74 ba 02 c0       	push   0xc002ba74
c001cb94:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb9b:	50                   	push   eax
c001cb9c:	e8 f7 3c fe ff       	call   c0000898 <strcmp>
c001cba1:	83 c4 10             	add    esp,0x10
c001cba4:	85 c0                	test   eax,eax
c001cba6:	75 0f                	jne    c001cbb7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cba8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cbab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbb7:	50                   	push   eax
c001cbb8:	50                   	push   eax
c001cbb9:	68 7c ba 02 c0       	push   0xc002ba7c
c001cbbe:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbc5:	50                   	push   eax
c001cbc6:	e8 cd 3c fe ff       	call   c0000898 <strcmp>
c001cbcb:	83 c4 10             	add    esp,0x10
c001cbce:	85 c0                	test   eax,eax
c001cbd0:	75 0f                	jne    c001cbe1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cbd2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cbd5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cbd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbdd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cbe1:	43                   	inc    ebx
c001cbe2:	e9 c6 fe ff ff       	jmp    c001caad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cbe7:	31 d2                	xor    edx,edx
c001cbe9:	50                   	push   eax
c001cbea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cbee:	52                   	push   edx
c001cbef:	50                   	push   eax
c001cbf0:	55                   	push   ebp
c001cbf1:	e8 8e 61 ff ff       	call   c0012d84 <File::seek(unsigned long long)>
c001cbf6:	58                   	pop    eax
c001cbf7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cbfb:	e8 99 29 ff ff       	call   c000f599 <malloc>
c001cc00:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc03:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cc07:	31 d2                	xor    edx,edx
c001cc09:	58                   	pop    eax
c001cc0a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cc0e:	53                   	push   ebx
c001cc0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cc13:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc17:	52                   	push   edx
c001cc18:	50                   	push   eax
c001cc19:	55                   	push   ebp
c001cc1a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc1d:	83 c4 14             	add    esp,0x14
c001cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc24:	e8 70 29 ff ff       	call   c000f599 <malloc>
c001cc29:	31 d2                	xor    edx,edx
c001cc2b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cc2f:	83 c4 0c             	add    esp,0xc
c001cc32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc36:	52                   	push   edx
c001cc37:	50                   	push   eax
c001cc38:	55                   	push   ebp
c001cc39:	e8 46 61 ff ff       	call   c0012d84 <File::seek(unsigned long long)>
c001cc3e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc41:	31 d2                	xor    edx,edx
c001cc43:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cc4a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc4e:	52                   	push   edx
c001cc4f:	50                   	push   eax
c001cc50:	55                   	push   ebp
c001cc51:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc54:	83 c4 20             	add    esp,0x20
c001cc57:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc5f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cc63:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cc67:	0f 84 0b 03 00 00    	je     c001cf78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001cc6d:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cc74:	31 d2                	xor    edx,edx
c001cc76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc7a:	c1 e8 03             	shr    eax,0x3
c001cc7d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cc81:	51                   	push   ecx
c001cc82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc86:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cc8a:	52                   	push   edx
c001cc8b:	50                   	push   eax
c001cc8c:	55                   	push   ebp
c001cc8d:	e8 f2 60 ff ff       	call   c0012d84 <File::seek(unsigned long long)>
c001cc92:	5b                   	pop    ebx
c001cc93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc97:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cc9e:	e8 f6 28 ff ff       	call   c000f599 <malloc>
c001cca3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cca6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ccaa:	31 d2                	xor    edx,edx
c001ccac:	5e                   	pop    esi
c001ccad:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ccb1:	50                   	push   eax
c001ccb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccb6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ccba:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001ccc1:	52                   	push   edx
c001ccc2:	50                   	push   eax
c001ccc3:	55                   	push   ebp
c001ccc4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ccc7:	83 c4 20             	add    esp,0x20
c001ccca:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ccd2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ccd6:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001ccda:	0f 8d 7c 02 00 00    	jge    c001cf5c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001cce0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cce4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cce8:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cced:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001ccf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ccf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccf8:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001ccfc:	89 d8                	mov    eax,ebx
c001ccfe:	c1 e8 08             	shr    eax,0x8
c001cd01:	89 c6                	mov    esi,eax
c001cd03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cd07:	c1 e6 04             	shl    esi,0x4
c001cd0a:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001cd0e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001cd11:	85 d2                	test   edx,edx
c001cd13:	0f 85 bf 00 00 00    	jne    c001cdd8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd19:	83 ec 0c             	sub    esp,0xc
c001cd1c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd20:	03 06                	add    eax,DWORD PTR [esi]
c001cd22:	50                   	push   eax
c001cd23:	e8 4b f8 ff ff       	call   c001c573 <Thr::getAddressOfKernelSymbol(char const*)>
c001cd28:	83 c4 10             	add    esp,0x10
c001cd2b:	89 c2                	mov    edx,eax
c001cd2d:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cd32:	85 c0                	test   eax,eax
c001cd34:	0f 85 9e 00 00 00    	jne    c001cdd8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd3a:	83 ec 0c             	sub    esp,0xc
c001cd3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd41:	03 06                	add    eax,DWORD PTR [esi]
c001cd43:	50                   	push   eax
c001cd44:	e8 f6 17 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001cd49:	83 c4 10             	add    esp,0x10
c001cd4c:	89 c2                	mov    edx,eax
c001cd4e:	85 c0                	test   eax,eax
c001cd50:	0f 85 82 00 00 00    	jne    c001cdd8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd56:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cd5a:	50                   	push   eax
c001cd5b:	50                   	push   eax
c001cd5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd60:	03 06                	add    eax,DWORD PTR [esi]
c001cd62:	50                   	push   eax
c001cd63:	68 b2 ba 02 c0       	push   0xc002bab2
c001cd68:	e8 96 59 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001cd6d:	58                   	pop    eax
c001cd6e:	5a                   	pop    edx
c001cd6f:	68 cc ba 02 c0       	push   0xc002bacc
c001cd74:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd7b:	50                   	push   eax
c001cd7c:	e8 8b 3a fe ff       	call   c000080c <strcpy>
c001cd81:	59                   	pop    ecx
c001cd82:	58                   	pop    eax
c001cd83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd87:	03 06                	add    eax,DWORD PTR [esi]
c001cd89:	50                   	push   eax
c001cd8a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd91:	50                   	push   eax
c001cd92:	e8 b5 3b fe ff       	call   c000094c <strcat>
c001cd97:	58                   	pop    eax
c001cd98:	5a                   	pop    edx
c001cd99:	68 62 bb 02 c0       	push   0xc002bb62
c001cd9e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cda5:	50                   	push   eax
c001cda6:	e8 a1 3b fe ff       	call   c000094c <strcat>
c001cdab:	83 c4 10             	add    esp,0x10
c001cdae:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cdb3:	0f 84 5d 01 00 00    	je     c001cf16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cdb9:	83 ec 0c             	sub    esp,0xc
c001cdbc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cdc3:	50                   	push   eax
c001cdc4:	e8 a6 d0 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c001cdc9:	83 c4 10             	add    esp,0x10
c001cdcc:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cdd0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cdd4:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cdd8:	80 fb 01             	cmp    bl,0x1
c001cddb:	0f 85 88 00 00 00    	jne    c001ce69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001cde1:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cde8:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cdec:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cdf0:	01 ce                	add    esi,ecx
c001cdf2:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cdf8:	0f 94 c0             	sete   al
c001cdfb:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ce01:	0f 94 c3             	sete   bl
c001ce04:	09 c3                	or     ebx,eax
c001ce06:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce08:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ce0d:	74 41                	je     c001ce50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001ce0f:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001ce12:	84 db                	test   bl,bl
c001ce14:	75 15                	jne    c001ce2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001ce16:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce1a:	66 83 f8 0c          	cmp    ax,0xc
c001ce1e:	76 05                	jbe    c001ce25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001ce20:	b8 0c 00 00 00       	mov    eax,0xc
c001ce25:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ce29:	76 37                	jbe    c001ce62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce2b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001ce2f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce34:	0f 84 dc 00 00 00    	je     c001cf16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ce3a:	83 ec 0c             	sub    esp,0xc
c001ce3d:	68 e3 ba 02 c0       	push   0xc002bae3
c001ce42:	e8 28 d0 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c001ce47:	83 c4 10             	add    esp,0x10
c001ce4a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ce4e:	eb 12                	jmp    c001ce62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce50:	01 c1                	add    ecx,eax
c001ce52:	84 db                	test   bl,bl
c001ce54:	75 0c                	jne    c001ce62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce56:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce5a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ce5e:	77 02                	ja     c001ce62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce60:	01 d1                	add    ecx,edx
c001ce62:	89 0e                	mov    DWORD PTR [esi],ecx
c001ce64:	e9 ea 00 00 00       	jmp    c001cf53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ce69:	80 fb 02             	cmp    bl,0x2
c001ce6c:	75 7c                	jne    c001ceea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001ce6e:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001ce75:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001ce79:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001ce7d:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001ce83:	74 20                	je     c001cea5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001ce85:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ce8b:	74 18                	je     c001cea5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001ce8d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce91:	b9 0a 00 00 00       	mov    ecx,0xa
c001ce96:	66 83 f8 0e          	cmp    ax,0xe
c001ce9a:	77 03                	ja     c001ce9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001ce9c:	8d 48 fc             	lea    ecx,[eax-0x4]
c001ce9f:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001cea3:	76 1f                	jbe    c001cec4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001cea5:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001cea9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ceae:	74 66                	je     c001cf16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ceb0:	83 ec 0c             	sub    esp,0xc
c001ceb3:	68 ff ba 02 c0       	push   0xc002baff
c001ceb8:	e8 b2 cf ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c001cebd:	83 c4 10             	add    esp,0x10
c001cec0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cec4:	8b 06                	mov    eax,DWORD PTR [esi]
c001cec6:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cecb:	74 13                	je     c001cee0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001cecd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ced1:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001ced8:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001cedc:	01 c8                	add    eax,ecx
c001cede:	eb 04                	jmp    c001cee4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001cee0:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001cee4:	01 c2                	add    edx,eax
c001cee6:	89 16                	mov    DWORD PTR [esi],edx
c001cee8:	eb 69                	jmp    c001cf53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ceea:	0f b6 db             	movzx  ebx,bl
c001ceed:	50                   	push   eax
c001ceee:	50                   	push   eax
c001ceef:	53                   	push   ebx
c001cef0:	68 1b bb 02 c0       	push   0xc002bb1b
c001cef5:	e8 09 58 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001cefa:	83 c4 10             	add    esp,0x10
c001cefd:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cf02:	74 12                	je     c001cf16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cf04:	83 ec 0c             	sub    esp,0xc
c001cf07:	68 26 bb 02 c0       	push   0xc002bb26
c001cf0c:	e8 5e cf ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c001cf11:	83 c4 10             	add    esp,0x10
c001cf14:	eb 3d                	jmp    c001cf53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cf16:	83 ec 0c             	sub    esp,0xc
c001cf19:	55                   	push   ebp
c001cf1a:	e8 05 5e ff ff       	call   c0012d24 <File::close()>
c001cf1f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf22:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf25:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf28:	59                   	pop    ecx
c001cf29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf2d:	e8 77 26 ff ff       	call   c000f5a9 <free>
c001cf32:	5b                   	pop    ebx
c001cf33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf37:	e8 6d 26 ff ff       	call   c000f5a9 <free>
c001cf3c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf3f:	e8 65 26 ff ff       	call   c000f5a9 <free>
c001cf44:	5e                   	pop    esi
c001cf45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf49:	e8 5b 26 ff ff       	call   c000f5a9 <free>
c001cf4e:	83 c4 10             	add    esp,0x10
c001cf51:	eb 21                	jmp    c001cf74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cf53:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cf57:	e9 76 fd ff ff       	jmp    c001ccd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cf5c:	83 ec 0c             	sub    esp,0xc
c001cf5f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf63:	e8 41 26 ff ff       	call   c000f5a9 <free>
c001cf68:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cf6c:	83 c4 10             	add    esp,0x10
c001cf6f:	e9 eb fc ff ff       	jmp    c001cc5f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cf74:	31 c0                	xor    eax,eax
c001cf76:	eb 33                	jmp    c001cfab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001cf78:	83 ec 0c             	sub    esp,0xc
c001cf7b:	55                   	push   ebp
c001cf7c:	e8 a3 5d ff ff       	call   c0012d24 <File::close()>
c001cf81:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf84:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf87:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf8a:	58                   	pop    eax
c001cf8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf8f:	e8 15 26 ff ff       	call   c000f5a9 <free>
c001cf94:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf97:	e8 0d 26 ff ff       	call   c000f5a9 <free>
c001cf9c:	5a                   	pop    edx
c001cf9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfa1:	e8 03 26 ff ff       	call   c000f5a9 <free>
c001cfa6:	83 c4 10             	add    esp,0x10
c001cfa9:	b0 01                	mov    al,0x1
c001cfab:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cfb1:	5b                   	pop    ebx
c001cfb2:	5e                   	pop    esi
c001cfb3:	5f                   	pop    edi
c001cfb4:	5d                   	pop    ebp
c001cfb5:	c3                   	ret    

c001cfb6 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cfb6:	56                   	push   esi
c001cfb7:	31 d2                	xor    edx,edx
c001cfb9:	53                   	push   ebx
c001cfba:	8b 1d 40 07 03 c0    	mov    ebx,DWORD PTR ds:0xc0030740
c001cfc0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cfc4:	39 d3                	cmp    ebx,edx
c001cfc6:	7e 1b                	jle    c001cfe3 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cfc8:	8b 04 95 60 09 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf6a0]
c001cfcf:	39 c8                	cmp    eax,ecx
c001cfd1:	77 0d                	ja     c001cfe0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cfd3:	8b 34 95 60 07 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf8a0]
c001cfda:	01 c6                	add    esi,eax
c001cfdc:	39 ce                	cmp    esi,ecx
c001cfde:	77 05                	ja     c001cfe5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cfe0:	42                   	inc    edx
c001cfe1:	eb e1                	jmp    c001cfc4 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cfe3:	31 c0                	xor    eax,eax
c001cfe5:	5b                   	pop    ebx
c001cfe6:	5e                   	pop    esi
c001cfe7:	c3                   	ret    

c001cfe8 <Thr::getDriverNameFromAddress(unsigned long)>:
c001cfe8:	53                   	push   ebx
c001cfe9:	31 c0                	xor    eax,eax
c001cfeb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cfef:	8b 1d 40 07 03 c0    	mov    ebx,DWORD PTR ds:0xc0030740
c001cff5:	39 c3                	cmp    ebx,eax
c001cff7:	7e 22                	jle    c001d01b <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001cff9:	8b 14 85 60 09 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf6a0]
c001d000:	39 ca                	cmp    edx,ecx
c001d002:	77 14                	ja     c001d018 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d004:	03 14 85 60 07 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf8a0]
c001d00b:	39 ca                	cmp    edx,ecx
c001d00d:	76 09                	jbe    c001d018 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d00f:	8b 04 85 60 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf4a0]
c001d016:	eb 05                	jmp    c001d01d <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d018:	40                   	inc    eax
c001d019:	eb da                	jmp    c001cff5 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d01b:	31 c0                	xor    eax,eax
c001d01d:	5b                   	pop    ebx
c001d01e:	c3                   	ret    

c001d01f <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d01f:	53                   	push   ebx
c001d020:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d024:	53                   	push   ebx
c001d025:	e8 8c ff ff ff       	call   c001cfb6 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d02a:	5a                   	pop    edx
c001d02b:	31 d2                	xor    edx,edx
c001d02d:	85 c0                	test   eax,eax
c001d02f:	74 04                	je     c001d035 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d031:	89 da                	mov    edx,ebx
c001d033:	29 c2                	sub    edx,eax
c001d035:	89 d0                	mov    eax,edx
c001d037:	5b                   	pop    ebx
c001d038:	c3                   	ret    

c001d039 <Thr::loadDLL(char const*, bool)>:
c001d039:	55                   	push   ebp
c001d03a:	57                   	push   edi
c001d03b:	56                   	push   esi
c001d03c:	53                   	push   ebx
c001d03d:	81 ec 34 01 00 00    	sub    esp,0x134
c001d043:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d04a:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d051:	56                   	push   esi
c001d052:	68 3e bb 02 c0       	push   0xc002bb3e
c001d057:	e8 a7 56 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001d05c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d063:	e8 31 25 ff ff       	call   c000f599 <malloc>
c001d068:	83 c4 0c             	add    esp,0xc
c001d06b:	89 c3                	mov    ebx,eax
c001d06d:	ff 35 30 0f 03 c0    	push   DWORD PTR ds:0xc0030f30
c001d073:	56                   	push   esi
c001d074:	50                   	push   eax
c001d075:	e8 e8 5b ff ff       	call   c0012c62 <File::File(char const*, Process*)>
c001d07a:	83 c4 10             	add    esp,0x10
c001d07d:	85 db                	test   ebx,ebx
c001d07f:	75 3c                	jne    c001d0bd <Thr::loadDLL(char const*, bool)+0x84>
c001d081:	89 f8                	mov    eax,edi
c001d083:	84 c0                	test   al,al
c001d085:	0f 84 cc 01 00 00    	je     c001d257 <Thr::loadDLL(char const*, bool)+0x21e>
c001d08b:	55                   	push   ebp
c001d08c:	55                   	push   ebp
c001d08d:	68 4f bb 02 c0       	push   0xc002bb4f
c001d092:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d096:	55                   	push   ebp
c001d097:	e8 70 37 fe ff       	call   c000080c <strcpy>
c001d09c:	58                   	pop    eax
c001d09d:	5a                   	pop    edx
c001d09e:	56                   	push   esi
c001d09f:	55                   	push   ebp
c001d0a0:	e8 a7 38 fe ff       	call   c000094c <strcat>
c001d0a5:	59                   	pop    ecx
c001d0a6:	58                   	pop    eax
c001d0a7:	68 62 bb 02 c0       	push   0xc002bb62
c001d0ac:	55                   	push   ebp
c001d0ad:	e8 9a 38 fe ff       	call   c000094c <strcat>
c001d0b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d0b5:	e8 b5 cd ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c001d0ba:	83 c4 10             	add    esp,0x10
c001d0bd:	51                   	push   ecx
c001d0be:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d0c2:	50                   	push   eax
c001d0c3:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d0c7:	50                   	push   eax
c001d0c8:	53                   	push   ebx
c001d0c9:	e8 a4 5e ff ff       	call   c0012f72 <File::stat(unsigned long long*, bool*)>
c001d0ce:	83 c4 10             	add    esp,0x10
c001d0d1:	85 db                	test   ebx,ebx
c001d0d3:	74 0c                	je     c001d0e1 <Thr::loadDLL(char const*, bool)+0xa8>
c001d0d5:	83 ec 0c             	sub    esp,0xc
c001d0d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d0da:	53                   	push   ebx
c001d0db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d0de:	83 c4 10             	add    esp,0x10
c001d0e1:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d0e6:	75 0a                	jne    c001d0f2 <Thr::loadDLL(char const*, bool)+0xb9>
c001d0e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d0ec:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d0f0:	75 3c                	jne    c001d12e <Thr::loadDLL(char const*, bool)+0xf5>
c001d0f2:	89 f8                	mov    eax,edi
c001d0f4:	84 c0                	test   al,al
c001d0f6:	0f 84 43 01 00 00    	je     c001d23f <Thr::loadDLL(char const*, bool)+0x206>
c001d0fc:	51                   	push   ecx
c001d0fd:	51                   	push   ecx
c001d0fe:	68 4f bb 02 c0       	push   0xc002bb4f
c001d103:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d107:	53                   	push   ebx
c001d108:	e8 ff 36 fe ff       	call   c000080c <strcpy>
c001d10d:	5d                   	pop    ebp
c001d10e:	58                   	pop    eax
c001d10f:	56                   	push   esi
c001d110:	53                   	push   ebx
c001d111:	e8 36 38 fe ff       	call   c000094c <strcat>
c001d116:	58                   	pop    eax
c001d117:	5a                   	pop    edx
c001d118:	68 62 bb 02 c0       	push   0xc002bb62
c001d11d:	53                   	push   ebx
c001d11e:	e8 29 38 fe ff       	call   c000094c <strcat>
c001d123:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d126:	e8 44 cd ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c001d12b:	83 c4 10             	add    esp,0x10
c001d12e:	52                   	push   edx
c001d12f:	6a 03                	push   0x3
c001d131:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d135:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d139:	05 ff 0f 00 00       	add    eax,0xfff
c001d13e:	83 d2 00             	adc    edx,0x0
c001d141:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d145:	50                   	push   eax
c001d146:	ff 35 50 db 02 c0    	push   DWORD PTR ds:0xc002db50
c001d14c:	e8 c5 49 ff ff       	call   c0011b16 <VAS::allocatePages(int, int)>
c001d151:	59                   	pop    ecx
c001d152:	89 c3                	mov    ebx,eax
c001d154:	5d                   	pop    ebp
c001d155:	50                   	push   eax
c001d156:	68 d1 a0 02 c0       	push   0xc002a0d1
c001d15b:	e8 a3 55 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001d160:	89 34 24             	mov    DWORD PTR [esp],esi
c001d163:	e8 04 36 fe ff       	call   c000076c <strlen>
c001d168:	8b 2d 40 07 03 c0    	mov    ebp,DWORD PTR ds:0xc0030740
c001d16e:	40                   	inc    eax
c001d16f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d172:	e8 22 24 ff ff       	call   c000f599 <malloc>
c001d177:	89 04 ad 60 0b 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf4a0],eax
c001d17e:	58                   	pop    eax
c001d17f:	a1 40 07 03 c0       	mov    eax,ds:0xc0030740
c001d184:	5a                   	pop    edx
c001d185:	56                   	push   esi
c001d186:	ff 34 85 60 0b 03 c0 	push   DWORD PTR [eax*4-0x3ffcf4a0]
c001d18d:	e8 7a 36 fe ff       	call   c000080c <strcpy>
c001d192:	a1 40 07 03 c0       	mov    eax,ds:0xc0030740
c001d197:	8d 50 01             	lea    edx,[eax+0x1]
c001d19a:	89 1c 85 60 09 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf6a0],ebx
c001d1a1:	89 15 40 07 03 c0    	mov    DWORD PTR ds:0xc0030740,edx
c001d1a7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d1ab:	83 c4 0c             	add    esp,0xc
c001d1ae:	89 14 85 60 07 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf8a0],edx
c001d1b5:	6a 01                	push   0x1
c001d1b7:	53                   	push   ebx
c001d1b8:	56                   	push   esi
c001d1b9:	e8 c2 f6 ff ff       	call   c001c880 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d1be:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d1c2:	83 c4 10             	add    esp,0x10
c001d1c5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d1ca:	0f 85 83 00 00 00    	jne    c001d253 <Thr::loadDLL(char const*, bool)+0x21a>
c001d1d0:	89 f8                	mov    eax,edi
c001d1d2:	84 c0                	test   al,al
c001d1d4:	74 6d                	je     c001d243 <Thr::loadDLL(char const*, bool)+0x20a>
c001d1d6:	83 ec 0c             	sub    esp,0xc
c001d1d9:	68 64 bb 02 c0       	push   0xc002bb64
c001d1de:	e8 8c cc ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c001d1e3:	83 c4 10             	add    esp,0x10
c001d1e6:	eb 5b                	jmp    c001d243 <Thr::loadDLL(char const*, bool)+0x20a>
c001d1e8:	89 ee                	mov    esi,ebp
c001d1ea:	50                   	push   eax
c001d1eb:	c1 e6 0c             	shl    esi,0xc
c001d1ee:	50                   	push   eax
c001d1ef:	01 de                	add    esi,ebx
c001d1f1:	56                   	push   esi
c001d1f2:	ff 35 50 db 02 c0    	push   DWORD PTR ds:0xc002db50
c001d1f8:	e8 81 44 ff ff       	call   c001167e <VAS::getPageTableEntry(unsigned long)>
c001d1fd:	83 c4 10             	add    esp,0x10
c001d200:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d203:	75 0c                	jne    c001d211 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d205:	83 ec 0c             	sub    esp,0xc
c001d208:	56                   	push   esi
c001d209:	e8 16 27 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001d20e:	83 c4 10             	add    esp,0x10
c001d211:	45                   	inc    ebp
c001d212:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d216:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d21a:	05 ff 0f 00 00       	add    eax,0xfff
c001d21f:	bf 00 00 00 00       	mov    edi,0x0
c001d224:	83 d2 00             	adc    edx,0x0
c001d227:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d22b:	c1 ea 0c             	shr    edx,0xc
c001d22e:	39 c5                	cmp    ebp,eax
c001d230:	89 d1                	mov    ecx,edx
c001d232:	89 f8                	mov    eax,edi
c001d234:	19 c8                	sbb    eax,ecx
c001d236:	72 b0                	jb     c001d1e8 <Thr::loadDLL(char const*, bool)+0x1af>
c001d238:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d23d:	75 18                	jne    c001d257 <Thr::loadDLL(char const*, bool)+0x21e>
c001d23f:	31 db                	xor    ebx,ebx
c001d241:	eb 14                	jmp    c001d257 <Thr::loadDLL(char const*, bool)+0x21e>
c001d243:	83 ec 0c             	sub    esp,0xc
c001d246:	68 83 bb 02 c0       	push   0xc002bb83
c001d24b:	e8 1f cc ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c001d250:	83 c4 10             	add    esp,0x10
c001d253:	31 ed                	xor    ebp,ebp
c001d255:	eb bb                	jmp    c001d212 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d257:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d25d:	89 d8                	mov    eax,ebx
c001d25f:	5b                   	pop    ebx
c001d260:	5e                   	pop    esi
c001d261:	5f                   	pop    edi
c001d262:	5d                   	pop    ebp
c001d263:	c3                   	ret    

c001d264 <Thr::executeDLL(unsigned long, void*)>:
c001d264:	56                   	push   esi
c001d265:	53                   	push   ebx
c001d266:	52                   	push   edx
c001d267:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d26b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d26f:	85 db                	test   ebx,ebx
c001d271:	75 10                	jne    c001d283 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d273:	83 ec 0c             	sub    esp,0xc
c001d276:	68 9f bb 02 c0       	push   0xc002bb9f
c001d27b:	e8 ef cb ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c001d280:	83 c4 10             	add    esp,0x10
c001d283:	50                   	push   eax
c001d284:	50                   	push   eax
c001d285:	53                   	push   ebx
c001d286:	68 c9 bb 02 c0       	push   0xc002bbc9
c001d28b:	e8 73 54 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001d290:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d294:	89 d8                	mov    eax,ebx
c001d296:	83 c4 14             	add    esp,0x14
c001d299:	5b                   	pop    ebx
c001d29a:	5e                   	pop    esi
c001d29b:	ff e0                	jmp    eax
c001d29d:	90                   	nop

c001d29e <userModeEntryPoint(void*)>:
c001d29e:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001d2a3:	48                   	dec    eax
c001d2a4:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001d2a9:	75 01                	jne    c001d2ac <userModeEntryPoint(void*)+0xe>
c001d2ab:	fb                   	sti    
c001d2ac:	fb                   	sti    
c001d2ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d2b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d2b5:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d2bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2bf:	e9 66 30 fe ff       	jmp    c000032a <goToUsermode>

c001d2c4 <changeTSS>:
c001d2c4:	83 ec 14             	sub    esp,0x14
c001d2c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d2cc:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d2cf:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d2d4:	c1 e2 15             	shl    edx,0x15
c001d2d7:	29 d0                	sub    eax,edx
c001d2d9:	50                   	push   eax
c001d2da:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c001d2df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2e5:	05 7c 11 00 00       	add    eax,0x117c
c001d2ea:	50                   	push   eax
c001d2eb:	e8 bc 38 ff ff       	call   c0010bac <TSS::setESP(unsigned long)>
c001d2f0:	83 c4 1c             	add    esp,0x1c
c001d2f3:	c3                   	ret    

c001d2f4 <switchToThread(ThreadControlBlock*)>:
c001d2f4:	57                   	push   edi
c001d2f5:	a1 04 0f 03 c0       	mov    eax,ds:0xc0030f04
c001d2fa:	56                   	push   esi
c001d2fb:	85 c0                	test   eax,eax
c001d2fd:	53                   	push   ebx
c001d2fe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d302:	0f 85 88 00 00 00    	jne    c001d390 <switchToThread(ThreadControlBlock*)+0x9c>
c001d308:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d30b:	3c ff                	cmp    al,0xff
c001d30d:	74 7d                	je     c001d38c <switchToThread(ThreadControlBlock*)+0x98>
c001d30f:	0f b6 d0             	movzx  edx,al
c001d312:	b8 84 03 00 00       	mov    eax,0x384
c001d317:	29 d0                	sub    eax,edx
c001d319:	c1 e0 10             	shl    eax,0x10
c001d31c:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d31f:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d322:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c001d327:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d32d:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d334:	74 4a                	je     c001d380 <switchToThread(ThreadControlBlock*)+0x8c>
c001d336:	0f 31                	rdtsc  
c001d338:	a3 48 0f 03 c0       	mov    ds:0xc0030f48,eax
c001d33d:	89 c6                	mov    esi,eax
c001d33f:	89 d7                	mov    edi,edx
c001d341:	2b 35 38 0f 03 c0    	sub    esi,DWORD PTR ds:0xc0030f38
c001d347:	89 15 4c 0f 03 c0    	mov    DWORD PTR ds:0xc0030f4c,edx
c001d34d:	1b 3d 3c 0f 03 c0    	sbb    edi,DWORD PTR ds:0xc0030f3c
c001d353:	89 35 40 0f 03 c0    	mov    DWORD PTR ds:0xc0030f40,esi
c001d359:	a3 38 0f 03 c0       	mov    ds:0xc0030f38,eax
c001d35e:	89 3d 44 0f 03 c0    	mov    DWORD PTR ds:0xc0030f44,edi
c001d364:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d36a:	89 15 3c 0f 03 c0    	mov    DWORD PTR ds:0xc0030f3c,edx
c001d370:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d373:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d376:	01 c6                	add    esi,eax
c001d378:	11 d7                	adc    edi,edx
c001d37a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d37d:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d380:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d384:	5b                   	pop    ebx
c001d385:	5e                   	pop    esi
c001d386:	5f                   	pop    edi
c001d387:	e9 d6 2f fe ff       	jmp    c0000362 <switchToThreadASM>
c001d38c:	31 c0                	xor    eax,eax
c001d38e:	eb 8f                	jmp    c001d31f <switchToThread(ThreadControlBlock*)+0x2b>
c001d390:	5b                   	pop    ebx
c001d391:	c7 05 00 0f 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030f00,0x1
c001d39b:	5e                   	pop    esi
c001d39c:	5f                   	pop    edi
c001d39d:	c3                   	ret    

c001d39e <Process::addArgs(char**)>:
c001d39e:	57                   	push   edi
c001d39f:	56                   	push   esi
c001d3a0:	53                   	push   ebx
c001d3a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d3a5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d3a9:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d3b3:	85 ff                	test   edi,edi
c001d3b5:	74 3d                	je     c001d3f4 <Process::addArgs(char**)+0x56>
c001d3b7:	8b 07                	mov    eax,DWORD PTR [edi]
c001d3b9:	85 c0                	test   eax,eax
c001d3bb:	74 37                	je     c001d3f4 <Process::addArgs(char**)+0x56>
c001d3bd:	31 db                	xor    ebx,ebx
c001d3bf:	83 ec 0c             	sub    esp,0xc
c001d3c2:	50                   	push   eax
c001d3c3:	e8 a4 33 fe ff       	call   c000076c <strlen>
c001d3c8:	40                   	inc    eax
c001d3c9:	89 04 24             	mov    DWORD PTR [esp],eax
c001d3cc:	e8 c8 21 ff ff       	call   c000f599 <malloc>
c001d3d1:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d3d8:	5a                   	pop    edx
c001d3d9:	59                   	pop    ecx
c001d3da:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d3dd:	43                   	inc    ebx
c001d3de:	50                   	push   eax
c001d3df:	e8 28 34 fe ff       	call   c000080c <strcpy>
c001d3e4:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d3ea:	83 c4 10             	add    esp,0x10
c001d3ed:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d3f0:	85 c0                	test   eax,eax
c001d3f2:	75 cb                	jne    c001d3bf <Process::addArgs(char**)+0x21>
c001d3f4:	5b                   	pop    ebx
c001d3f5:	5e                   	pop    esi
c001d3f6:	5f                   	pop    edi
c001d3f7:	c3                   	ret    

c001d3f8 <Process::Process(char const*, Process*, char**)>:
c001d3f8:	56                   	push   esi
c001d3f9:	53                   	push   ebx
c001d3fa:	83 ec 14             	sub    esp,0x14
c001d3fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d401:	05 0c 02 00 00       	add    eax,0x20c
c001d406:	bb 07 00 00 00       	mov    ebx,0x7
c001d40b:	89 c6                	mov    esi,eax
c001d40d:	85 db                	test   ebx,ebx
c001d40f:	78 12                	js     c001d423 <Process::Process(char const*, Process*, char**)+0x2b>
c001d411:	83 ec 0c             	sub    esp,0xc
c001d414:	56                   	push   esi
c001d415:	e8 9c b6 00 00       	call   c0028ab6 <ThreadControlBlock::ThreadControlBlock()>
c001d41a:	83 c4 10             	add    esp,0x10
c001d41d:	83 c6 63             	add    esi,0x63
c001d420:	4b                   	dec    ebx
c001d421:	eb ea                	jmp    c001d40d <Process::Process(char const*, Process*, char**)+0x15>
c001d423:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d427:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d42e:	83 ec 0c             	sub    esp,0xc
c001d431:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d435:	e8 be c8 ff ff       	call   c0019cf8 <Krnl::newProcessEnv(Process*)>
c001d43a:	83 c4 10             	add    esp,0x10
c001d43d:	89 c2                	mov    edx,eax
c001d43f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d443:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d449:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d44d:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d456:	a1 70 cf 02 c0       	mov    eax,ds:0xc002cf70
c001d45b:	8d 50 01             	lea    edx,[eax+0x1]
c001d45e:	89 15 70 cf 02 c0    	mov    DWORD PTR ds:0xc002cf70,edx
c001d464:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d468:	89 02                	mov    DWORD PTR [edx],eax
c001d46a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d472:	83 ec 0c             	sub    esp,0xc
c001d475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d479:	e8 1b 21 ff ff       	call   c000f599 <malloc>
c001d47e:	83 c4 10             	add    esp,0x10
c001d481:	89 c3                	mov    ebx,eax
c001d483:	83 ec 08             	sub    esp,0x8
c001d486:	6a 00                	push   0x0
c001d488:	53                   	push   ebx
c001d489:	e8 30 4a ff ff       	call   c0011ebe <VAS::VAS(bool)>
c001d48e:	83 c4 10             	add    esp,0x10
c001d491:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d495:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d49b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d49f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d4a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d4b1:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d4b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4bb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4c1:	85 c0                	test   eax,eax
c001d4c3:	74 42                	je     c001d507 <Process::Process(char const*, Process*, char**)+0x10f>
c001d4c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4c9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4cf:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d4d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4d9:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d4df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4e3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4e9:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d4ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4f3:	05 0c 01 00 00       	add    eax,0x10c
c001d4f8:	83 ec 08             	sub    esp,0x8
c001d4fb:	52                   	push   edx
c001d4fc:	50                   	push   eax
c001d4fd:	e8 0a 33 fe ff       	call   c000080c <strcpy>
c001d502:	83 c4 10             	add    esp,0x10
c001d505:	eb 63                	jmp    c001d56a <Process::Process(char const*, Process*, char**)+0x172>
c001d507:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d50f:	83 ec 0c             	sub    esp,0xc
c001d512:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d516:	e8 7e 20 ff ff       	call   c000f599 <malloc>
c001d51b:	83 c4 10             	add    esp,0x10
c001d51e:	89 c3                	mov    ebx,eax
c001d520:	83 ec 08             	sub    esp,0x8
c001d523:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d527:	53                   	push   ebx
c001d528:	e8 93 33 ff ff       	call   c00108c0 <VgaText::VgaText(char const*)>
c001d52d:	83 c4 10             	add    esp,0x10
c001d530:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d534:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d53a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d53e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d544:	83 ec 0c             	sub    esp,0xc
c001d547:	50                   	push   eax
c001d548:	e8 32 2b ff ff       	call   c001007f <addToTerminalCycle(VgaText*)>
c001d54d:	83 c4 10             	add    esp,0x10
c001d550:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d554:	05 0c 01 00 00       	add    eax,0x10c
c001d559:	83 ec 08             	sub    esp,0x8
c001d55c:	68 e8 bb 02 c0       	push   0xc002bbe8
c001d561:	50                   	push   eax
c001d562:	e8 a5 32 fe ff       	call   c000080c <strcpy>
c001d567:	83 c4 10             	add    esp,0x10
c001d56a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d56e:	83 c0 0c             	add    eax,0xc
c001d571:	83 ec 08             	sub    esp,0x8
c001d574:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d578:	50                   	push   eax
c001d579:	e8 8e 32 fe ff       	call   c000080c <strcpy>
c001d57e:	83 c4 10             	add    esp,0x10
c001d581:	83 ec 08             	sub    esp,0x8
c001d584:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d588:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d58c:	e8 0d fe ff ff       	call   c001d39e <Process::addArgs(char**)>
c001d591:	83 c4 10             	add    esp,0x10
c001d594:	83 ec 08             	sub    esp,0x8
c001d597:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d59b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d59f:	e8 a6 ed ff ff       	call   c001c34a <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d5a4:	83 c4 10             	add    esp,0x10
c001d5a7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d5ab:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d5af:	83 f0 01             	xor    eax,0x1
c001d5b2:	88 c2                	mov    dl,al
c001d5b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5b8:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d5be:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d5c3:	83 ec 08             	sub    esp,0x8
c001d5c6:	50                   	push   eax
c001d5c7:	68 40 bc 02 c0       	push   0xc002bc40
c001d5cc:	e8 32 51 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001d5d1:	83 c4 10             	add    esp,0x10
c001d5d4:	90                   	nop
c001d5d5:	83 c4 14             	add    esp,0x14
c001d5d8:	5b                   	pop    ebx
c001d5d9:	5e                   	pop    esi
c001d5da:	c3                   	ret    
c001d5db:	90                   	nop

c001d5dc <Process::Process(bool, char const*, Process*, char**)>:
c001d5dc:	56                   	push   esi
c001d5dd:	53                   	push   ebx
c001d5de:	83 ec 24             	sub    esp,0x24
c001d5e1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d5e5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d5e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5ed:	05 0c 02 00 00       	add    eax,0x20c
c001d5f2:	bb 07 00 00 00       	mov    ebx,0x7
c001d5f7:	89 c6                	mov    esi,eax
c001d5f9:	85 db                	test   ebx,ebx
c001d5fb:	78 12                	js     c001d60f <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d5fd:	83 ec 0c             	sub    esp,0xc
c001d600:	56                   	push   esi
c001d601:	e8 b0 b4 00 00       	call   c0028ab6 <ThreadControlBlock::ThreadControlBlock()>
c001d606:	83 c4 10             	add    esp,0x10
c001d609:	83 c6 63             	add    esi,0x63
c001d60c:	4b                   	dec    ebx
c001d60d:	eb ea                	jmp    c001d5f9 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d60f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d613:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d61a:	83 ec 0c             	sub    esp,0xc
c001d61d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d621:	e8 d2 c6 ff ff       	call   c0019cf8 <Krnl::newProcessEnv(Process*)>
c001d626:	83 c4 10             	add    esp,0x10
c001d629:	89 c2                	mov    edx,eax
c001d62b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d62f:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d635:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d639:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d642:	a1 70 cf 02 c0       	mov    eax,ds:0xc002cf70
c001d647:	8d 50 01             	lea    edx,[eax+0x1]
c001d64a:	89 15 70 cf 02 c0    	mov    DWORD PTR ds:0xc002cf70,edx
c001d650:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d654:	89 02                	mov    DWORD PTR [edx],eax
c001d656:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d65e:	83 ec 0c             	sub    esp,0xc
c001d661:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d665:	e8 2f 1f ff ff       	call   c000f599 <malloc>
c001d66a:	83 c4 10             	add    esp,0x10
c001d66d:	89 c3                	mov    ebx,eax
c001d66f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d674:	83 ec 08             	sub    esp,0x8
c001d677:	50                   	push   eax
c001d678:	53                   	push   ebx
c001d679:	e8 40 48 ff ff       	call   c0011ebe <VAS::VAS(bool)>
c001d67e:	83 c4 10             	add    esp,0x10
c001d681:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d685:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d68b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d68f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d699:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d69d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d6a1:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d6a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6ab:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d6b1:	85 c0                	test   eax,eax
c001d6b3:	74 42                	je     c001d6f7 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d6b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6b9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d6bf:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d6c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6c9:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d6cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6d3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d6d9:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d6df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6e3:	05 0c 01 00 00       	add    eax,0x10c
c001d6e8:	83 ec 08             	sub    esp,0x8
c001d6eb:	52                   	push   edx
c001d6ec:	50                   	push   eax
c001d6ed:	e8 1a 31 fe ff       	call   c000080c <strcpy>
c001d6f2:	83 c4 10             	add    esp,0x10
c001d6f5:	eb 63                	jmp    c001d75a <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d6f7:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d6ff:	83 ec 0c             	sub    esp,0xc
c001d702:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d706:	e8 8e 1e ff ff       	call   c000f599 <malloc>
c001d70b:	83 c4 10             	add    esp,0x10
c001d70e:	89 c3                	mov    ebx,eax
c001d710:	83 ec 08             	sub    esp,0x8
c001d713:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d717:	53                   	push   ebx
c001d718:	e8 a3 31 ff ff       	call   c00108c0 <VgaText::VgaText(char const*)>
c001d71d:	83 c4 10             	add    esp,0x10
c001d720:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d724:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d72a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d72e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d734:	83 ec 0c             	sub    esp,0xc
c001d737:	50                   	push   eax
c001d738:	e8 42 29 ff ff       	call   c001007f <addToTerminalCycle(VgaText*)>
c001d73d:	83 c4 10             	add    esp,0x10
c001d740:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d744:	05 0c 01 00 00       	add    eax,0x10c
c001d749:	83 ec 08             	sub    esp,0x8
c001d74c:	68 e8 bb 02 c0       	push   0xc002bbe8
c001d751:	50                   	push   eax
c001d752:	e8 b5 30 fe ff       	call   c000080c <strcpy>
c001d757:	83 c4 10             	add    esp,0x10
c001d75a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d75e:	83 c0 0c             	add    eax,0xc
c001d761:	83 ec 08             	sub    esp,0x8
c001d764:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d768:	50                   	push   eax
c001d769:	e8 9e 30 fe ff       	call   c000080c <strcpy>
c001d76e:	83 c4 10             	add    esp,0x10
c001d771:	83 ec 08             	sub    esp,0x8
c001d774:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d778:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d77c:	e8 1d fc ff ff       	call   c001d39e <Process::addArgs(char**)>
c001d781:	83 c4 10             	add    esp,0x10
c001d784:	90                   	nop
c001d785:	83 c4 24             	add    esp,0x24
c001d788:	5b                   	pop    ebx
c001d789:	5e                   	pop    esi
c001d78a:	c3                   	ret    

c001d78b <taskStartupFunction>:
c001d78b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d790:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d793:	c3                   	ret    

c001d794 <Semaphore::Semaphore(int)>:
c001d794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d798:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d79c:	89 10                	mov    DWORD PTR [eax],edx
c001d79e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7a2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d7a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d7b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7b8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d7bf:	90                   	nop
c001d7c0:	c3                   	ret    
c001d7c1:	90                   	nop

c001d7c2 <Mutex::Mutex()>:
c001d7c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7c6:	6a 01                	push   0x1
c001d7c8:	50                   	push   eax
c001d7c9:	e8 c6 ff ff ff       	call   c001d794 <Semaphore::Semaphore(int)>
c001d7ce:	83 c4 08             	add    esp,0x8
c001d7d1:	90                   	nop
c001d7d2:	c3                   	ret    
c001d7d3:	90                   	nop

c001d7d4 <Process::createThread(void (*)(void*), void*, int)>:
c001d7d4:	55                   	push   ebp
c001d7d5:	31 c9                	xor    ecx,ecx
c001d7d7:	57                   	push   edi
c001d7d8:	56                   	push   esi
c001d7d9:	53                   	push   ebx
c001d7da:	83 ec 1c             	sub    esp,0x1c
c001d7dd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d7e1:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d7e8:	89 f2                	mov    edx,esi
c001d7ea:	0f b7 c2             	movzx  eax,dx
c001d7ed:	83 e2 01             	and    edx,0x1
c001d7f0:	74 16                	je     c001d808 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d7f2:	d1 f8                	sar    eax,1
c001d7f4:	41                   	inc    ecx
c001d7f5:	89 c2                	mov    edx,eax
c001d7f7:	83 f9 10             	cmp    ecx,0x10
c001d7fa:	75 ee                	jne    c001d7ea <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d7fc:	83 c4 1c             	add    esp,0x1c
c001d7ff:	31 db                	xor    ebx,ebx
c001d801:	89 d8                	mov    eax,ebx
c001d803:	5b                   	pop    ebx
c001d804:	5e                   	pop    esi
c001d805:	5f                   	pop    edi
c001d806:	5d                   	pop    ebp
c001d807:	c3                   	ret    
c001d808:	b8 01 00 00 00       	mov    eax,0x1
c001d80d:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d810:	d3 e0                	shl    eax,cl
c001d812:	09 c6                	or     esi,eax
c001d814:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d817:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d81e:	89 c6                	mov    esi,eax
c001d820:	c1 e6 05             	shl    esi,0x5
c001d823:	01 f0                	add    eax,esi
c001d825:	01 d8                	add    eax,ebx
c001d827:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d82e:	75 0a                	jne    c001d83a <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d830:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d83a:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d840:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d844:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d847:	01 ca                	add    edx,ecx
c001d849:	83 ec 08             	sub    esp,0x8
c001d84c:	89 d0                	mov    eax,edx
c001d84e:	c1 e0 05             	shl    eax,0x5
c001d851:	01 d0                	add    eax,edx
c001d853:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d857:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d85b:	01 d8                	add    eax,ebx
c001d85d:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d863:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d869:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d86f:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d875:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d87b:	89 cd                	mov    ebp,ecx
c001d87d:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d881:	f7 dd                	neg    ebp
c001d883:	c1 e5 15             	shl    ebp,0x15
c001d886:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d88c:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d892:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d89c:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d8a2:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d8ac:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d8b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d8ba:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d8c1:	53                   	push   ebx
c001d8c2:	68 24 0f 03 c0       	push   0xc0030f24
c001d8c7:	e8 a4 af 00 00       	call   c0028870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d8cc:	89 d8                	mov    eax,ebx
c001d8ce:	83 c4 10             	add    esp,0x10
c001d8d1:	83 c4 1c             	add    esp,0x1c
c001d8d4:	5b                   	pop    ebx
c001d8d5:	5e                   	pop    esi
c001d8d6:	5f                   	pop    edi
c001d8d7:	5d                   	pop    ebp
c001d8d8:	c3                   	ret    
c001d8d9:	90                   	nop

c001d8da <Process::createUserThread()>:
c001d8da:	83 ec 0c             	sub    esp,0xc
c001d8dd:	68 80 00 00 00       	push   0x80
c001d8e2:	6a 00                	push   0x0
c001d8e4:	68 9e d2 01 c0       	push   0xc001d29e
c001d8e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d8ed:	e8 e2 fe ff ff       	call   c001d7d4 <Process::createThread(void (*)(void*), void*, int)>
c001d8f2:	83 c4 1c             	add    esp,0x1c
c001d8f5:	c3                   	ret    

c001d8f6 <setupMultitasking(void (*)())>:
c001d8f6:	56                   	push   esi
c001d8f7:	53                   	push   ebx
c001d8f8:	51                   	push   ecx
c001d8f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d8fd:	eb 10                	jmp    c001d90f <setupMultitasking(void (*)())+0x19>
c001d8ff:	83 ec 0c             	sub    esp,0xc
c001d902:	68 24 0f 03 c0       	push   0xc0030f24
c001d907:	e8 b6 ae 00 00       	call   c00287c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d90c:	83 c4 10             	add    esp,0x10
c001d90f:	83 ec 0c             	sub    esp,0xc
c001d912:	68 24 0f 03 c0       	push   0xc0030f24
c001d917:	e8 82 ae 00 00       	call   c002879e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d91c:	83 c4 10             	add    esp,0x10
c001d91f:	84 c0                	test   al,al
c001d921:	74 dc                	je     c001d8ff <setupMultitasking(void (*)())+0x9>
c001d923:	83 ec 0c             	sub    esp,0xc
c001d926:	68 3f 07 00 00       	push   0x73f
c001d92b:	e8 69 1c ff ff       	call   c000f599 <malloc>
c001d930:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d937:	89 c3                	mov    ebx,eax
c001d939:	6a 00                	push   0x0
c001d93b:	68 ec bb 02 c0       	push   0xc002bbec
c001d940:	6a 01                	push   0x1
c001d942:	50                   	push   eax
c001d943:	e8 94 fc ff ff       	call   c001d5dc <Process::Process(bool, char const*, Process*, char**)>
c001d948:	83 c4 14             	add    esp,0x14
c001d94b:	89 1d 30 0f 03 c0    	mov    DWORD PTR ds:0xc0030f30,ebx
c001d951:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d957:	e8 31 2a ff ff       	call   c001038d <setActiveTerminal(VgaText*)>
c001d95c:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d964:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001d96e:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d974:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d977:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d981:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d987:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d98d:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d997:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d9a1:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d9ab:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d9b1:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d9bb:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d9c1:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d9cb:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d9d1:	58                   	pop    eax
c001d9d2:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d9d8:	5a                   	pop    edx
c001d9d9:	68 e8 bb 02 c0       	push   0xc002bbe8
c001d9de:	50                   	push   eax
c001d9df:	e8 28 2e fe ff       	call   c000080c <strcpy>
c001d9e4:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d9eb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d9ef:	83 c4 14             	add    esp,0x14
c001d9f2:	5b                   	pop    ebx
c001d9f3:	5e                   	pop    esi
c001d9f4:	e9 5b 29 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d9f9 <schedule()>:
c001d9f9:	a1 04 0f 03 c0       	mov    eax,ds:0xc0030f04
c001d9fe:	85 c0                	test   eax,eax
c001da00:	74 0b                	je     c001da0d <schedule()+0x14>
c001da02:	c7 05 00 0f 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030f00,0x1
c001da0c:	c3                   	ret    
c001da0d:	53                   	push   ebx
c001da0e:	83 ec 14             	sub    esp,0x14
c001da11:	68 24 0f 03 c0       	push   0xc0030f24
c001da16:	e8 83 ad 00 00       	call   c002879e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001da1b:	83 c4 10             	add    esp,0x10
c001da1e:	84 c0                	test   al,al
c001da20:	75 38                	jne    c001da5a <schedule()+0x61>
c001da22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da27:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001da2a:	4a                   	dec    edx
c001da2b:	74 32                	je     c001da5f <schedule()+0x66>
c001da2d:	83 ec 0c             	sub    esp,0xc
c001da30:	68 24 0f 03 c0       	push   0xc0030f24
c001da35:	e8 80 ad 00 00       	call   c00287ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001da3a:	c7 04 24 24 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f24
c001da41:	89 c3                	mov    ebx,eax
c001da43:	e8 7a ad 00 00       	call   c00287c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001da48:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001da4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da52:	e8 9d f8 ff ff       	call   c001d2f4 <switchToThread(ThreadControlBlock*)>
c001da57:	83 c4 10             	add    esp,0x10
c001da5a:	83 c4 08             	add    esp,0x8
c001da5d:	5b                   	pop    ebx
c001da5e:	c3                   	ret    
c001da5f:	83 ec 08             	sub    esp,0x8
c001da62:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001da69:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001da6f:	68 24 0f 03 c0       	push   0xc0030f24
c001da74:	e8 f7 ad 00 00       	call   c0028870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da79:	83 c4 10             	add    esp,0x10
c001da7c:	eb af                	jmp    c001da2d <schedule()+0x34>

c001da7e <Semaphore::tryAcquire()>:
c001da7e:	53                   	push   ebx
c001da7f:	83 ec 08             	sub    esp,0x8
c001da82:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da86:	fa                   	cli    
c001da87:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001da8c:	8d 50 01             	lea    edx,[eax+0x1]
c001da8f:	89 15 08 0f 03 c0    	mov    DWORD PTR ds:0xc0030f08,edx
c001da95:	8b 15 04 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f04
c001da9b:	8d 5a 01             	lea    ebx,[edx+0x1]
c001da9e:	89 1d 04 0f 03 c0    	mov    DWORD PTR ds:0xc0030f04,ebx
c001daa4:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001daa7:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001daa9:	7c 2a                	jl     c001dad5 <Semaphore::tryAcquire()+0x57>
c001daab:	89 15 04 0f 03 c0    	mov    DWORD PTR ds:0xc0030f04,edx
c001dab1:	85 d2                	test   edx,edx
c001dab3:	75 0a                	jne    c001dabf <Semaphore::tryAcquire()+0x41>
c001dab5:	8b 15 00 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f00
c001dabb:	85 d2                	test   edx,edx
c001dabd:	75 5b                	jne    c001db1a <Semaphore::tryAcquire()+0x9c>
c001dabf:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001dac4:	85 c0                	test   eax,eax
c001dac6:	74 07                	je     c001dacf <Semaphore::tryAcquire()+0x51>
c001dac8:	31 c0                	xor    eax,eax
c001daca:	83 c4 08             	add    esp,0x8
c001dacd:	5b                   	pop    ebx
c001dace:	c3                   	ret    
c001dacf:	fb                   	sti    
c001dad0:	83 c4 08             	add    esp,0x8
c001dad3:	5b                   	pop    ebx
c001dad4:	c3                   	ret    
c001dad5:	43                   	inc    ebx
c001dad6:	89 15 04 0f 03 c0    	mov    DWORD PTR ds:0xc0030f04,edx
c001dadc:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001dadf:	85 d2                	test   edx,edx
c001dae1:	75 1f                	jne    c001db02 <Semaphore::tryAcquire()+0x84>
c001dae3:	8b 0d 00 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f00
c001dae9:	85 c9                	test   ecx,ecx
c001daeb:	74 15                	je     c001db02 <Semaphore::tryAcquire()+0x84>
c001daed:	c7 05 00 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f00,0x0
c001daf7:	e8 fd fe ff ff       	call   c001d9f9 <schedule()>
c001dafc:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001db01:	48                   	dec    eax
c001db02:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001db07:	85 c0                	test   eax,eax
c001db09:	75 08                	jne    c001db13 <Semaphore::tryAcquire()+0x95>
c001db0b:	fb                   	sti    
c001db0c:	b0 01                	mov    al,0x1
c001db0e:	83 c4 08             	add    esp,0x8
c001db11:	5b                   	pop    ebx
c001db12:	c3                   	ret    
c001db13:	b0 01                	mov    al,0x1
c001db15:	83 c4 08             	add    esp,0x8
c001db18:	5b                   	pop    ebx
c001db19:	c3                   	ret    
c001db1a:	c7 05 00 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f00,0x0
c001db24:	e8 d0 fe ff ff       	call   c001d9f9 <schedule()>
c001db29:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001db2e:	48                   	dec    eax
c001db2f:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001db34:	85 c0                	test   eax,eax
c001db36:	75 90                	jne    c001dac8 <Semaphore::tryAcquire()+0x4a>
c001db38:	eb 95                	jmp    c001dacf <Semaphore::tryAcquire()+0x51>

c001db3a <Semaphore::assertLocked(char const*)>:
c001db3a:	83 ec 0c             	sub    esp,0xc
c001db3d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db41:	fa                   	cli    
c001db42:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c001db48:	a1 04 0f 03 c0       	mov    eax,ds:0xc0030f04
c001db4d:	8d 48 01             	lea    ecx,[eax+0x1]
c001db50:	89 0d 04 0f 03 c0    	mov    DWORD PTR ds:0xc0030f04,ecx
c001db56:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001db58:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001db5b:	7c 24                	jl     c001db81 <Semaphore::assertLocked(char const*)+0x47>
c001db5d:	a3 04 0f 03 c0       	mov    ds:0xc0030f04,eax
c001db62:	85 c0                	test   eax,eax
c001db64:	75 09                	jne    c001db6f <Semaphore::assertLocked(char const*)+0x35>
c001db66:	a1 00 0f 03 c0       	mov    eax,ds:0xc0030f00
c001db6b:	85 c0                	test   eax,eax
c001db6d:	75 29                	jne    c001db98 <Semaphore::assertLocked(char const*)+0x5e>
c001db6f:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001db74:	48                   	dec    eax
c001db75:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001db7a:	75 01                	jne    c001db7d <Semaphore::assertLocked(char const*)+0x43>
c001db7c:	fb                   	sti    
c001db7d:	83 c4 0c             	add    esp,0xc
c001db80:	c3                   	ret    
c001db81:	83 ec 0c             	sub    esp,0xc
c001db84:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001db88:	e8 e2 c2 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c001db8d:	a1 04 0f 03 c0       	mov    eax,ds:0xc0030f04
c001db92:	83 c4 10             	add    esp,0x10
c001db95:	48                   	dec    eax
c001db96:	eb c5                	jmp    c001db5d <Semaphore::assertLocked(char const*)+0x23>
c001db98:	c7 05 00 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f00,0x0
c001dba2:	e8 52 fe ff ff       	call   c001d9f9 <schedule()>
c001dba7:	eb c6                	jmp    c001db6f <Semaphore::assertLocked(char const*)+0x35>

c001dba9 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001dba9:	83 ec 0c             	sub    esp,0xc
c001dbac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbb1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dbb5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dbb8:	e8 3c fe ff ff       	call   c001d9f9 <schedule()>
c001dbbd:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001dbc2:	48                   	dec    eax
c001dbc3:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001dbc8:	75 01                	jne    c001dbcb <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001dbca:	fb                   	sti    
c001dbcb:	83 c4 0c             	add    esp,0xc
c001dbce:	c3                   	ret    

c001dbcf <blockTask(TaskState)>:
c001dbcf:	83 ec 0c             	sub    esp,0xc
c001dbd2:	fa                   	cli    
c001dbd3:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c001dbd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dbdd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbe2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dbe5:	e8 0f fe ff ff       	call   c001d9f9 <schedule()>
c001dbea:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001dbef:	48                   	dec    eax
c001dbf0:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001dbf5:	75 01                	jne    c001dbf8 <blockTask(TaskState)+0x29>
c001dbf7:	fb                   	sti    
c001dbf8:	83 c4 0c             	add    esp,0xc
c001dbfb:	c3                   	ret    

c001dbfc <waitTask(int, int*, int)>:
c001dbfc:	83 ec 18             	sub    esp,0x18
c001dbff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc04:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dc08:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dc0b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dc0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc14:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001dc17:	6a 07                	push   0x7
c001dc19:	e8 b1 ff ff ff       	call   c001dbcf <blockTask(TaskState)>
c001dc1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc23:	83 c4 10             	add    esp,0x10
c001dc26:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001dc29:	85 d2                	test   edx,edx
c001dc2b:	74 0a                	je     c001dc37 <waitTask(int, int*, int)+0x3b>
c001dc2d:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001dc30:	89 02                	mov    DWORD PTR [edx],eax
c001dc32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc37:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dc3a:	83 c4 0c             	add    esp,0xc
c001dc3d:	c3                   	ret    

c001dc3e <nanoSleepUntil(unsigned long long)>:
c001dc3e:	83 ec 0c             	sub    esp,0xc
c001dc41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc45:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc49:	3b 05 50 e0 02 c0    	cmp    eax,DWORD PTR ds:0xc002e050
c001dc4f:	89 d1                	mov    ecx,edx
c001dc51:	1b 0d 54 e0 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e054
c001dc57:	73 04                	jae    c001dc5d <nanoSleepUntil(unsigned long long)+0x1f>
c001dc59:	83 c4 0c             	add    esp,0xc
c001dc5c:	c3                   	ret    
c001dc5d:	fa                   	cli    
c001dc5e:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c001dc64:	83 ec 08             	sub    esp,0x8
c001dc67:	ff 05 04 0f 03 c0    	inc    DWORD PTR ds:0xc0030f04
c001dc6d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dc73:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001dc76:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001dc79:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dc7f:	68 18 0f 03 c0       	push   0xc0030f18
c001dc84:	e8 e7 ab 00 00       	call   c0028870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dc89:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001dc90:	e8 3a ff ff ff       	call   c001dbcf <blockTask(TaskState)>
c001dc95:	a1 04 0f 03 c0       	mov    eax,ds:0xc0030f04
c001dc9a:	83 c4 10             	add    esp,0x10
c001dc9d:	48                   	dec    eax
c001dc9e:	a3 04 0f 03 c0       	mov    ds:0xc0030f04,eax
c001dca3:	85 c0                	test   eax,eax
c001dca5:	75 09                	jne    c001dcb0 <nanoSleepUntil(unsigned long long)+0x72>
c001dca7:	a1 00 0f 03 c0       	mov    eax,ds:0xc0030f00
c001dcac:	85 c0                	test   eax,eax
c001dcae:	75 12                	jne    c001dcc2 <nanoSleepUntil(unsigned long long)+0x84>
c001dcb0:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001dcb5:	48                   	dec    eax
c001dcb6:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001dcbb:	75 9c                	jne    c001dc59 <nanoSleepUntil(unsigned long long)+0x1b>
c001dcbd:	fb                   	sti    
c001dcbe:	83 c4 0c             	add    esp,0xc
c001dcc1:	c3                   	ret    
c001dcc2:	c7 05 00 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f00,0x0
c001dccc:	e8 28 fd ff ff       	call   c001d9f9 <schedule()>
c001dcd1:	eb dd                	jmp    c001dcb0 <nanoSleepUntil(unsigned long long)+0x72>

c001dcd3 <nanoSleep(unsigned long long)>:
c001dcd3:	a1 50 e0 02 c0       	mov    eax,ds:0xc002e050
c001dcd8:	8b 15 54 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e054
c001dcde:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dce2:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dce6:	e9 53 ff ff ff       	jmp    c001dc3e <nanoSleepUntil(unsigned long long)>

c001dceb <sleep(unsigned long long)>:
c001dceb:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dcf3:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dcf8:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dcfc:	01 ca                	add    edx,ecx
c001dcfe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dd02:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dd06:	eb cb                	jmp    c001dcd3 <nanoSleep(unsigned long long)>

c001dd08 <Semaphore::acquire()>:
c001dd08:	83 ec 0c             	sub    esp,0xc
c001dd0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd0f:	fa                   	cli    
c001dd10:	a1 04 0f 03 c0       	mov    eax,ds:0xc0030f04
c001dd15:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c001dd1b:	8d 48 01             	lea    ecx,[eax+0x1]
c001dd1e:	89 0d 04 0f 03 c0    	mov    DWORD PTR ds:0xc0030f04,ecx
c001dd24:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001dd27:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001dd29:	7d 28                	jge    c001dd53 <Semaphore::acquire()+0x4b>
c001dd2b:	41                   	inc    ecx
c001dd2c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001dd2f:	a3 04 0f 03 c0       	mov    ds:0xc0030f04,eax
c001dd34:	85 c0                	test   eax,eax
c001dd36:	75 09                	jne    c001dd41 <Semaphore::acquire()+0x39>
c001dd38:	a1 00 0f 03 c0       	mov    eax,ds:0xc0030f00
c001dd3d:	85 c0                	test   eax,eax
c001dd3f:	75 4e                	jne    c001dd8f <Semaphore::acquire()+0x87>
c001dd41:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001dd46:	48                   	dec    eax
c001dd47:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001dd4c:	75 01                	jne    c001dd4f <Semaphore::acquire()+0x47>
c001dd4e:	fb                   	sti    
c001dd4f:	83 c4 0c             	add    esp,0xc
c001dd52:	c3                   	ret    
c001dd53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd58:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001dd5f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001dd62:	85 c9                	test   ecx,ecx
c001dd64:	74 3a                	je     c001dda0 <Semaphore::acquire()+0x98>
c001dd66:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001dd69:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dd6f:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001dd72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd77:	83 ec 0c             	sub    esp,0xc
c001dd7a:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001dd7d:	6a 05                	push   0x5
c001dd7f:	e8 4b fe ff ff       	call   c001dbcf <blockTask(TaskState)>
c001dd84:	a1 04 0f 03 c0       	mov    eax,ds:0xc0030f04
c001dd89:	83 c4 10             	add    esp,0x10
c001dd8c:	48                   	dec    eax
c001dd8d:	eb a0                	jmp    c001dd2f <Semaphore::acquire()+0x27>
c001dd8f:	c7 05 00 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f00,0x0
c001dd99:	e8 5b fc ff ff       	call   c001d9f9 <schedule()>
c001dd9e:	eb a1                	jmp    c001dd41 <Semaphore::acquire()+0x39>
c001dda0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dda5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001dda8:	eb c8                	jmp    c001dd72 <Semaphore::acquire()+0x6a>

c001ddaa <taskReturned>:
c001ddaa:	83 ec 18             	sub    esp,0x18
c001ddad:	68 68 bc 02 c0       	push   0xc002bc68
c001ddb2:	e8 b8 c0 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c001ddb7:	83 c4 10             	add    esp,0x10
c001ddba:	83 ec 0c             	sub    esp,0xc
c001ddbd:	6a 02                	push   0x2
c001ddbf:	e8 0b fe ff ff       	call   c001dbcf <blockTask(TaskState)>
c001ddc4:	fa                   	cli    
c001ddc5:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c001ddcb:	e8 29 fc ff ff       	call   c001d9f9 <schedule()>
c001ddd0:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001ddd5:	83 c4 10             	add    esp,0x10
c001ddd8:	48                   	dec    eax
c001ddd9:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001ddde:	85 c0                	test   eax,eax
c001dde0:	75 d8                	jne    c001ddba <taskReturned+0x10>
c001dde2:	fb                   	sti    
c001dde3:	eb d5                	jmp    c001ddba <taskReturned+0x10>

c001dde5 <Thr::processFromPID(int)>:
c001dde5:	57                   	push   edi
c001dde6:	56                   	push   esi
c001dde7:	53                   	push   ebx
c001dde8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ddec:	fa                   	cli    
c001dded:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c001ddf3:	83 ec 0c             	sub    esp,0xc
c001ddf6:	68 24 0f 03 c0       	push   0xc0030f24
c001ddfb:	e8 ba a9 00 00       	call   c00287ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de00:	83 c4 10             	add    esp,0x10
c001de03:	89 c7                	mov    edi,eax
c001de05:	eb 14                	jmp    c001de1b <Thr::processFromPID(int)+0x36>
c001de07:	83 ec 0c             	sub    esp,0xc
c001de0a:	68 24 0f 03 c0       	push   0xc0030f24
c001de0f:	e8 a6 a9 00 00       	call   c00287ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de14:	83 c4 10             	add    esp,0x10
c001de17:	39 f8                	cmp    eax,edi
c001de19:	74 49                	je     c001de64 <Thr::processFromPID(int)+0x7f>
c001de1b:	83 ec 0c             	sub    esp,0xc
c001de1e:	68 24 0f 03 c0       	push   0xc0030f24
c001de23:	e8 92 a9 00 00       	call   c00287ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de28:	c7 04 24 24 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f24
c001de2f:	89 c3                	mov    ebx,eax
c001de31:	e8 8c a9 00 00       	call   c00287c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001de36:	58                   	pop    eax
c001de37:	5a                   	pop    edx
c001de38:	53                   	push   ebx
c001de39:	68 24 0f 03 c0       	push   0xc0030f24
c001de3e:	e8 2d aa 00 00       	call   c0028870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de43:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de46:	83 c4 10             	add    esp,0x10
c001de49:	39 30                	cmp    DWORD PTR [eax],esi
c001de4b:	75 ba                	jne    c001de07 <Thr::processFromPID(int)+0x22>
c001de4d:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001de52:	48                   	dec    eax
c001de53:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001de58:	74 07                	je     c001de61 <Thr::processFromPID(int)+0x7c>
c001de5a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de5d:	5b                   	pop    ebx
c001de5e:	5e                   	pop    esi
c001de5f:	5f                   	pop    edi
c001de60:	c3                   	ret    
c001de61:	fb                   	sti    
c001de62:	eb f6                	jmp    c001de5a <Thr::processFromPID(int)+0x75>
c001de64:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001de69:	48                   	dec    eax
c001de6a:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001de6f:	75 05                	jne    c001de76 <Thr::processFromPID(int)+0x91>
c001de71:	fb                   	sti    
c001de72:	5b                   	pop    ebx
c001de73:	5e                   	pop    esi
c001de74:	5f                   	pop    edi
c001de75:	c3                   	ret    
c001de76:	5b                   	pop    ebx
c001de77:	31 c0                	xor    eax,eax
c001de79:	5e                   	pop    esi
c001de7a:	5f                   	pop    edi
c001de7b:	c3                   	ret    

c001de7c <unblockTask(ThreadControlBlock*)>:
c001de7c:	53                   	push   ebx
c001de7d:	83 ec 08             	sub    esp,0x8
c001de80:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de84:	fa                   	cli    
c001de85:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c001de8b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001de8e:	85 c0                	test   eax,eax
c001de90:	74 5a                	je     c001deec <unblockTask(ThreadControlBlock*)+0x70>
c001de92:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001de95:	48                   	dec    eax
c001de96:	74 31                	je     c001dec9 <unblockTask(ThreadControlBlock*)+0x4d>
c001de98:	83 ec 0c             	sub    esp,0xc
c001de9b:	68 24 0f 03 c0       	push   0xc0030f24
c001dea0:	e8 15 a9 00 00       	call   c00287ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dea5:	83 c4 10             	add    esp,0x10
c001dea8:	85 c0                	test   eax,eax
c001deaa:	75 17                	jne    c001dec3 <unblockTask(ThreadControlBlock*)+0x47>
c001deac:	eb 50                	jmp    c001defe <unblockTask(ThreadControlBlock*)+0x82>
c001deae:	83 ec 08             	sub    esp,0x8
c001deb1:	50                   	push   eax
c001deb2:	68 24 0f 03 c0       	push   0xc0030f24
c001deb7:	e8 86 ac 00 00       	call   c0028b42 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001debc:	83 c4 10             	add    esp,0x10
c001debf:	85 c0                	test   eax,eax
c001dec1:	74 3b                	je     c001defe <unblockTask(ThreadControlBlock*)+0x82>
c001dec3:	39 c3                	cmp    ebx,eax
c001dec5:	75 e7                	jne    c001deae <unblockTask(ThreadControlBlock*)+0x32>
c001dec7:	eb 10                	jmp    c001ded9 <unblockTask(ThreadControlBlock*)+0x5d>
c001dec9:	83 ec 0c             	sub    esp,0xc
c001decc:	68 0a bc 02 c0       	push   0xc002bc0a
c001ded1:	e8 2d 48 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001ded6:	83 c4 10             	add    esp,0x10
c001ded9:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001dede:	48                   	dec    eax
c001dedf:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001dee4:	75 01                	jne    c001dee7 <unblockTask(ThreadControlBlock*)+0x6b>
c001dee6:	fb                   	sti    
c001dee7:	83 c4 08             	add    esp,0x8
c001deea:	5b                   	pop    ebx
c001deeb:	c3                   	ret    
c001deec:	83 ec 0c             	sub    esp,0xc
c001deef:	68 f3 bb 02 c0       	push   0xc002bbf3
c001def4:	e8 0a 48 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001def9:	83 c4 10             	add    esp,0x10
c001defc:	eb db                	jmp    c001ded9 <unblockTask(ThreadControlBlock*)+0x5d>
c001defe:	83 ec 08             	sub    esp,0x8
c001df01:	53                   	push   ebx
c001df02:	68 24 0f 03 c0       	push   0xc0030f24
c001df07:	e8 64 a9 00 00       	call   c0028870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df0c:	83 c4 10             	add    esp,0x10
c001df0f:	eb c8                	jmp    c001ded9 <unblockTask(ThreadControlBlock*)+0x5d>

c001df11 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001df11:	55                   	push   ebp
c001df12:	57                   	push   edi
c001df13:	56                   	push   esi
c001df14:	53                   	push   ebx
c001df15:	83 ec 1c             	sub    esp,0x1c
c001df18:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df1c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df1f:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001df25:	85 ff                	test   edi,edi
c001df27:	7e 20                	jle    c001df49 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001df29:	31 f6                	xor    esi,esi
c001df2b:	83 ec 0c             	sub    esp,0xc
c001df2e:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001df35:	46                   	inc    esi
c001df36:	e8 6e 16 ff ff       	call   c000f5a9 <free>
c001df3b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df3e:	83 c4 10             	add    esp,0x10
c001df41:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001df47:	7f e2                	jg     c001df2b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001df49:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001df53:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001df58:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001df5b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001df5e:	d3 c0                	rol    eax,cl
c001df60:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001df67:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df6a:	89 f7                	mov    edi,esi
c001df6c:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001df74:	0f 85 64 01 00 00    	jne    c001e0de <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001df7a:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001df80:	85 ed                	test   ebp,ebp
c001df82:	74 1b                	je     c001df9f <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001df84:	83 ec 0c             	sub    esp,0xc
c001df87:	55                   	push   ebp
c001df88:	e8 87 bc ff ff       	call   c0019c14 <EnvVarContainer::~EnvVarContainer()>
c001df8d:	59                   	pop    ecx
c001df8e:	5e                   	pop    esi
c001df8f:	6a 0c                	push   0xc
c001df91:	55                   	push   ebp
c001df92:	e8 94 46 ff ff       	call   c001262b <operator delete(void*, unsigned long)>
c001df97:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df9a:	83 c4 10             	add    esp,0x10
c001df9d:	89 f7                	mov    edi,esi
c001df9f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dfa5:	85 c0                	test   eax,eax
c001dfa7:	0f 84 aa 00 00 00    	je     c001e057 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001dfad:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001dfb0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001dfb4:	31 c9                	xor    ecx,ecx
c001dfb6:	eb 10                	jmp    c001dfc8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001dfb8:	41                   	inc    ecx
c001dfb9:	83 f9 10             	cmp    ecx,0x10
c001dfbc:	0f 84 95 00 00 00    	je     c001e057 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001dfc2:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dfc8:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001dfcf:	d3 fa                	sar    edx,cl
c001dfd1:	83 e2 01             	and    edx,0x1
c001dfd4:	74 e2                	je     c001dfb8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfd6:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dfd9:	01 ca                	add    edx,ecx
c001dfdb:	89 d5                	mov    ebp,edx
c001dfdd:	c1 e5 05             	shl    ebp,0x5
c001dfe0:	01 ea                	add    edx,ebp
c001dfe2:	01 d0                	add    eax,edx
c001dfe4:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001dfea:	83 fd 07             	cmp    ebp,0x7
c001dfed:	75 c9                	jne    c001dfb8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfef:	05 40 02 00 00       	add    eax,0x240
c001dff4:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001dff7:	83 fd ff             	cmp    ebp,0xffffffff
c001dffa:	0f 8c e6 00 00 00    	jl     c001e0e6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001e000:	0f 84 97 01 00 00    	je     c001e19d <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001e006:	85 ed                	test   ebp,ebp
c001e008:	0f 84 7e 01 00 00    	je     c001e18c <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001e00e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e010:	75 a6                	jne    c001dfb8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e012:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e018:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e01c:	01 d0                	add    eax,edx
c001e01e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e022:	83 ec 0c             	sub    esp,0xc
c001e025:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e02b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e02e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e034:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e03b:	50                   	push   eax
c001e03c:	e8 3b fe ff ff       	call   c001de7c <unblockTask(ThreadControlBlock*)>
c001e041:	83 c4 10             	add    esp,0x10
c001e044:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e047:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e04b:	89 f7                	mov    edi,esi
c001e04d:	41                   	inc    ecx
c001e04e:	83 f9 10             	cmp    ecx,0x10
c001e051:	0f 85 6b ff ff ff    	jne    c001dfc2 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e057:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e05d:	85 c0                	test   eax,eax
c001e05f:	74 5d                	je     c001e0be <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e061:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e067:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e06d:	74 4f                	je     c001e0be <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e06f:	83 ec 0c             	sub    esp,0xc
c001e072:	68 24 0f 03 c0       	push   0xc0030f24
c001e077:	e8 3e a7 00 00       	call   c00287ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e07c:	c7 04 24 24 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f24
c001e083:	89 c7                	mov    edi,eax
c001e085:	e8 14 a7 00 00       	call   c002879e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e08a:	83 c4 10             	add    esp,0x10
c001e08d:	84 c0                	test   al,al
c001e08f:	0f 84 c2 00 00 00    	je     c001e157 <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e095:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e098:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e09e:	85 d2                	test   edx,edx
c001e0a0:	74 0f                	je     c001e0b1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e0a2:	83 ec 0c             	sub    esp,0xc
c001e0a5:	8b 02                	mov    eax,DWORD PTR [edx]
c001e0a7:	52                   	push   edx
c001e0a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e0ab:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e0ae:	83 c4 10             	add    esp,0x10
c001e0b1:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e0bb:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e0be:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e0c4:	85 db                	test   ebx,ebx
c001e0c6:	74 16                	je     c001e0de <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e0c8:	83 ec 0c             	sub    esp,0xc
c001e0cb:	53                   	push   ebx
c001e0cc:	e8 c7 37 ff ff       	call   c0011898 <VAS::~VAS()>
c001e0d1:	58                   	pop    eax
c001e0d2:	5a                   	pop    edx
c001e0d3:	6a 14                	push   0x14
c001e0d5:	53                   	push   ebx
c001e0d6:	e8 50 45 ff ff       	call   c001262b <operator delete(void*, unsigned long)>
c001e0db:	83 c4 10             	add    esp,0x10
c001e0de:	83 c4 1c             	add    esp,0x1c
c001e0e1:	5b                   	pop    ebx
c001e0e2:	5e                   	pop    esi
c001e0e3:	5f                   	pop    edi
c001e0e4:	5d                   	pop    ebp
c001e0e5:	c3                   	ret    
c001e0e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e0ea:	83 ec 0c             	sub    esp,0xc
c001e0ed:	68 9c bc 02 c0       	push   0xc002bc9c
c001e0f2:	e8 78 bd ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c001e0f7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e0fa:	83 c4 10             	add    esp,0x10
c001e0fd:	89 f7                	mov    edi,esi
c001e0ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e103:	e9 b0 fe ff ff       	jmp    c001dfb8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e108:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e10e:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e114:	75 1c                	jne    c001e132 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e116:	83 ec 0c             	sub    esp,0xc
c001e119:	68 04 bd 02 c0       	push   0xc002bd04
c001e11e:	e8 e0 45 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001e123:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e12a:	e8 a0 fa ff ff       	call   c001dbcf <blockTask(TaskState)>
c001e12f:	83 c4 10             	add    esp,0x10
c001e132:	83 ec 08             	sub    esp,0x8
c001e135:	56                   	push   esi
c001e136:	68 24 0f 03 c0       	push   0xc0030f24
c001e13b:	e8 30 a7 00 00       	call   c0028870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e140:	c7 04 24 24 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f24
c001e147:	e8 6e a6 00 00       	call   c00287ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e14c:	83 c4 10             	add    esp,0x10
c001e14f:	39 f8                	cmp    eax,edi
c001e151:	0f 84 3e ff ff ff    	je     c001e095 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e157:	83 ec 0c             	sub    esp,0xc
c001e15a:	68 24 0f 03 c0       	push   0xc0030f24
c001e15f:	e8 56 a6 00 00       	call   c00287ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e164:	c7 04 24 24 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f24
c001e16b:	89 c6                	mov    esi,eax
c001e16d:	e8 50 a6 00 00       	call   c00287c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e172:	83 c4 10             	add    esp,0x10
c001e175:	39 f3                	cmp    ebx,esi
c001e177:	74 b9                	je     c001e132 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e179:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e17c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e17f:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e185:	75 ab                	jne    c001e132 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e187:	e9 7c ff ff ff       	jmp    c001e108 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e18c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e190:	83 ec 0c             	sub    esp,0xc
c001e193:	68 d0 bc 02 c0       	push   0xc002bcd0
c001e198:	e9 55 ff ff ff       	jmp    c001e0f2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e19d:	8b 36                	mov    esi,DWORD PTR [esi]
c001e19f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e1a3:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e1a6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e1a9:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e1af:	01 d7                	add    edi,edx
c001e1b1:	89 f8                	mov    eax,edi
c001e1b3:	e9 66 fe ff ff       	jmp    c001e01e <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e1b8 <cleanerTaskFunction(void*)>:
c001e1b8:	53                   	push   ebx
c001e1b9:	83 ec 08             	sub    esp,0x8
c001e1bc:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001e1c1:	48                   	dec    eax
c001e1c2:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001e1c7:	75 01                	jne    c001e1ca <cleanerTaskFunction(void*)+0x12>
c001e1c9:	fb                   	sti    
c001e1ca:	fa                   	cli    
c001e1cb:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001e1d0:	80 3d ec 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030eec,0x0
c001e1d7:	8d 50 01             	lea    edx,[eax+0x1]
c001e1da:	89 15 08 0f 03 c0    	mov    DWORD PTR ds:0xc0030f08,edx
c001e1e0:	0f 84 a1 00 00 00    	je     c001e287 <cleanerTaskFunction(void*)+0xcf>
c001e1e6:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001e1eb:	85 c0                	test   eax,eax
c001e1ed:	75 01                	jne    c001e1f0 <cleanerTaskFunction(void*)+0x38>
c001e1ef:	fb                   	sti    
c001e1f0:	c6 05 ec 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030eec,0x0
c001e1f7:	fa                   	cli    
c001e1f8:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c001e1fe:	ff 05 04 0f 03 c0    	inc    DWORD PTR ds:0xc0030f04
c001e204:	fa                   	cli    
c001e205:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c001e20b:	eb 26                	jmp    c001e233 <cleanerTaskFunction(void*)+0x7b>
c001e20d:	83 ec 0c             	sub    esp,0xc
c001e210:	68 0c 0f 03 c0       	push   0xc0030f0c
c001e215:	e8 a0 a5 00 00       	call   c00287ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e21a:	c7 04 24 0c 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f0c
c001e221:	89 c3                	mov    ebx,eax
c001e223:	e8 9a a5 00 00       	call   c00287c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e228:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e22b:	e8 e1 fc ff ff       	call   c001df11 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e230:	83 c4 10             	add    esp,0x10
c001e233:	83 ec 0c             	sub    esp,0xc
c001e236:	68 0c 0f 03 c0       	push   0xc0030f0c
c001e23b:	e8 5e a5 00 00       	call   c002879e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e240:	83 c4 10             	add    esp,0x10
c001e243:	84 c0                	test   al,al
c001e245:	74 c6                	je     c001e20d <cleanerTaskFunction(void*)+0x55>
c001e247:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001e24c:	48                   	dec    eax
c001e24d:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001e252:	75 01                	jne    c001e255 <cleanerTaskFunction(void*)+0x9d>
c001e254:	fb                   	sti    
c001e255:	a1 04 0f 03 c0       	mov    eax,ds:0xc0030f04
c001e25a:	48                   	dec    eax
c001e25b:	a3 04 0f 03 c0       	mov    ds:0xc0030f04,eax
c001e260:	0f 85 56 ff ff ff    	jne    c001e1bc <cleanerTaskFunction(void*)+0x4>
c001e266:	a1 00 0f 03 c0       	mov    eax,ds:0xc0030f00
c001e26b:	85 c0                	test   eax,eax
c001e26d:	0f 84 49 ff ff ff    	je     c001e1bc <cleanerTaskFunction(void*)+0x4>
c001e273:	c7 05 00 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f00,0x0
c001e27d:	e8 77 f7 ff ff       	call   c001d9f9 <schedule()>
c001e282:	e9 35 ff ff ff       	jmp    c001e1bc <cleanerTaskFunction(void*)+0x4>
c001e287:	83 ec 0c             	sub    esp,0xc
c001e28a:	6a 02                	push   0x2
c001e28c:	e8 18 f9 ff ff       	call   c001dba9 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e291:	83 c4 10             	add    esp,0x10
c001e294:	e9 57 ff ff ff       	jmp    c001e1f0 <cleanerTaskFunction(void*)+0x38>

c001e299 <terminateTask(int)>:
c001e299:	83 ec 14             	sub    esp,0x14
c001e29c:	fa                   	cli    
c001e29d:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c001e2a3:	ff 05 04 0f 03 c0    	inc    DWORD PTR ds:0xc0030f04
c001e2a9:	fa                   	cli    
c001e2aa:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c001e2b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e2b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2b9:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e2bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2c1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e2c4:	50                   	push   eax
c001e2c5:	68 0c 0f 03 c0       	push   0xc0030f0c
c001e2ca:	e8 a1 a5 00 00       	call   c0028870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e2cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2d4:	83 c4 10             	add    esp,0x10
c001e2d7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e2de:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e2e3:	85 c0                	test   eax,eax
c001e2e5:	74 53                	je     c001e33a <terminateTask(int)+0xa1>
c001e2e7:	83 ec 0c             	sub    esp,0xc
c001e2ea:	c6 05 ec 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030eec,0x1
c001e2f1:	50                   	push   eax
c001e2f2:	e8 85 fb ff ff       	call   c001de7c <unblockTask(ThreadControlBlock*)>
c001e2f7:	83 c4 10             	add    esp,0x10
c001e2fa:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001e2ff:	48                   	dec    eax
c001e300:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001e305:	75 01                	jne    c001e308 <terminateTask(int)+0x6f>
c001e307:	fb                   	sti    
c001e308:	a1 04 0f 03 c0       	mov    eax,ds:0xc0030f04
c001e30d:	48                   	dec    eax
c001e30e:	a3 04 0f 03 c0       	mov    ds:0xc0030f04,eax
c001e313:	75 09                	jne    c001e31e <terminateTask(int)+0x85>
c001e315:	83 3d 00 0f 03 c0 00 	cmp    DWORD PTR ds:0xc0030f00,0x0
c001e31c:	75 2e                	jne    c001e34c <terminateTask(int)+0xb3>
c001e31e:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001e323:	48                   	dec    eax
c001e324:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001e329:	75 01                	jne    c001e32c <terminateTask(int)+0x93>
c001e32b:	fb                   	sti    
c001e32c:	fa                   	cli    
c001e32d:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c001e333:	e8 c1 f6 ff ff       	call   c001d9f9 <schedule()>
c001e338:	eb e4                	jmp    c001e31e <terminateTask(int)+0x85>
c001e33a:	83 ec 0c             	sub    esp,0xc
c001e33d:	68 21 bc 02 c0       	push   0xc002bc21
c001e342:	e8 bc 43 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001e347:	83 c4 10             	add    esp,0x10
c001e34a:	eb ae                	jmp    c001e2fa <terminateTask(int)+0x61>
c001e34c:	c7 05 00 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f00,0x0
c001e356:	eb db                	jmp    c001e333 <terminateTask(int)+0x9a>

c001e358 <Thr::terminateFromIRQ(int)>:
c001e358:	83 ec 18             	sub    esp,0x18
c001e35b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e35f:	e8 35 ff ff ff       	call   c001e299 <terminateTask(int)>

c001e364 <Semaphore::release()>:
c001e364:	83 ec 0c             	sub    esp,0xc
c001e367:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e36b:	fa                   	cli    
c001e36c:	a1 04 0f 03 c0       	mov    eax,ds:0xc0030f04
c001e371:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c001e377:	8d 48 01             	lea    ecx,[eax+0x1]
c001e37a:	89 0d 04 0f 03 c0    	mov    DWORD PTR ds:0xc0030f04,ecx
c001e380:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e383:	85 c9                	test   ecx,ecx
c001e385:	74 3c                	je     c001e3c3 <Semaphore::release()+0x5f>
c001e387:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e38a:	83 ec 0c             	sub    esp,0xc
c001e38d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e390:	51                   	push   ecx
c001e391:	e8 e6 fa ff ff       	call   c001de7c <unblockTask(ThreadControlBlock*)>
c001e396:	a1 04 0f 03 c0       	mov    eax,ds:0xc0030f04
c001e39b:	83 c4 10             	add    esp,0x10
c001e39e:	48                   	dec    eax
c001e39f:	a3 04 0f 03 c0       	mov    ds:0xc0030f04,eax
c001e3a4:	85 c0                	test   eax,eax
c001e3a6:	75 09                	jne    c001e3b1 <Semaphore::release()+0x4d>
c001e3a8:	a1 00 0f 03 c0       	mov    eax,ds:0xc0030f00
c001e3ad:	85 c0                	test   eax,eax
c001e3af:	75 17                	jne    c001e3c8 <Semaphore::release()+0x64>
c001e3b1:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001e3b6:	48                   	dec    eax
c001e3b7:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001e3bc:	75 01                	jne    c001e3bf <Semaphore::release()+0x5b>
c001e3be:	fb                   	sti    
c001e3bf:	83 c4 0c             	add    esp,0xc
c001e3c2:	c3                   	ret    
c001e3c3:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e3c6:	eb d7                	jmp    c001e39f <Semaphore::release()+0x3b>
c001e3c8:	c7 05 00 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f00,0x0
c001e3d2:	e8 22 f6 ff ff       	call   c001d9f9 <schedule()>
c001e3d7:	eb d8                	jmp    c001e3b1 <Semaphore::release()+0x4d>

c001e3d9 <__static_initialization_and_destruction_0(int, int)>:
c001e3d9:	83 ec 0c             	sub    esp,0xc
c001e3dc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e3e1:	0f 85 88 00 00 00    	jne    c001e46f <__static_initialization_and_destruction_0(int, int)+0x96>
c001e3e7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e3ef:	75 7e                	jne    c001e46f <__static_initialization_and_destruction_0(int, int)+0x96>
c001e3f1:	83 ec 0c             	sub    esp,0xc
c001e3f4:	68 24 0f 03 c0       	push   0xc0030f24
c001e3f9:	e8 02 a7 00 00       	call   c0028b00 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e3fe:	83 c4 10             	add    esp,0x10
c001e401:	83 ec 04             	sub    esp,0x4
c001e404:	68 b8 c7 02 c0       	push   0xc002c7b8
c001e409:	68 24 0f 03 c0       	push   0xc0030f24
c001e40e:	68 b4 8a 02 c0       	push   0xc0028ab4
c001e413:	e8 8d 41 ff ff       	call   c00125a5 <__cxa_atexit>
c001e418:	83 c4 10             	add    esp,0x10
c001e41b:	83 ec 0c             	sub    esp,0xc
c001e41e:	68 18 0f 03 c0       	push   0xc0030f18
c001e423:	e8 d8 a6 00 00       	call   c0028b00 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e428:	83 c4 10             	add    esp,0x10
c001e42b:	83 ec 04             	sub    esp,0x4
c001e42e:	68 b8 c7 02 c0       	push   0xc002c7b8
c001e433:	68 18 0f 03 c0       	push   0xc0030f18
c001e438:	68 b4 8a 02 c0       	push   0xc0028ab4
c001e43d:	e8 63 41 ff ff       	call   c00125a5 <__cxa_atexit>
c001e442:	83 c4 10             	add    esp,0x10
c001e445:	83 ec 0c             	sub    esp,0xc
c001e448:	68 0c 0f 03 c0       	push   0xc0030f0c
c001e44d:	e8 ae a6 00 00       	call   c0028b00 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e452:	83 c4 10             	add    esp,0x10
c001e455:	83 ec 04             	sub    esp,0x4
c001e458:	68 b8 c7 02 c0       	push   0xc002c7b8
c001e45d:	68 0c 0f 03 c0       	push   0xc0030f0c
c001e462:	68 b4 8a 02 c0       	push   0xc0028ab4
c001e467:	e8 39 41 ff ff       	call   c00125a5 <__cxa_atexit>
c001e46c:	83 c4 10             	add    esp,0x10
c001e46f:	90                   	nop
c001e470:	83 c4 0c             	add    esp,0xc
c001e473:	c3                   	ret    

c001e474 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e474:	83 ec 0c             	sub    esp,0xc
c001e477:	83 ec 08             	sub    esp,0x8
c001e47a:	68 ff ff 00 00       	push   0xffff
c001e47f:	6a 01                	push   0x1
c001e481:	e8 53 ff ff ff       	call   c001e3d9 <__static_initialization_and_destruction_0(int, int)>
c001e486:	83 c4 10             	add    esp,0x10
c001e489:	83 c4 0c             	add    esp,0xc
c001e48c:	c3                   	ret    

c001e48d <Vm::inbv(unsigned short)>:
c001e48d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e491:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e496:	75 06                	jne    c001e49e <Vm::inbv(unsigned short)+0x11>
c001e498:	a0 6c 0f 03 c0       	mov    al,ds:0xc0030f6c
c001e49d:	c3                   	ret    
c001e49e:	ec                   	in     al,dx
c001e49f:	c3                   	ret    

c001e4a0 <Vm::outbv(unsigned short, unsigned char)>:
c001e4a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e4a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e4a8:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e4ad:	75 25                	jne    c001e4d4 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e4af:	8b 0d 6c 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f6c
c001e4b5:	8d 51 01             	lea    edx,[ecx+0x1]
c001e4b8:	88 81 80 0f 03 c0    	mov    BYTE PTR [ecx-0x3ffcf080],al
c001e4be:	89 15 6c 0f 03 c0    	mov    DWORD PTR ds:0xc0030f6c,edx
c001e4c4:	83 fa 20             	cmp    edx,0x20
c001e4c7:	75 0c                	jne    c001e4d5 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e4c9:	c7 05 6c 0f 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0030f6c,0x1f
c001e4d3:	c3                   	ret    
c001e4d4:	ee                   	out    dx,al
c001e4d5:	c3                   	ret    

c001e4d6 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e4d6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e4db:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e4e0:	c1 e0 04             	shl    eax,0x4
c001e4e3:	01 d0                	add    eax,edx
c001e4e5:	c3                   	ret    

c001e4e6 <Vm::getSegment(unsigned int)>:
c001e4e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4ea:	c1 e8 10             	shr    eax,0x10
c001e4ed:	c3                   	ret    

c001e4ee <Vm::getOffset(unsigned int)>:
c001e4ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4f2:	c3                   	ret    

c001e4f3 <Vm::mainloop2()>:
c001e4f3:	83 ec 18             	sub    esp,0x18
c001e4f6:	fa                   	cli    
c001e4f7:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c001e4fd:	6a 02                	push   0x2
c001e4ff:	c6 05 65 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f65,0x1
c001e506:	e8 9e f6 ff ff       	call   c001dba9 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e50b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e510:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e514:	52                   	push   edx
c001e515:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e519:	52                   	push   edx
c001e51a:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e51e:	52                   	push   edx
c001e51f:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e523:	50                   	push   eax
c001e524:	e8 d1 1d fe ff       	call   c00002fa <goToVM86>
c001e529:	83 c4 2c             	add    esp,0x2c
c001e52c:	c3                   	ret    

c001e52d <Vm::mainVm8086Loop(void*)>:
c001e52d:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001e532:	48                   	dec    eax
c001e533:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001e538:	75 01                	jne    c001e53b <Vm::mainVm8086Loop(void*)+0xe>
c001e53a:	fb                   	sti    
c001e53b:	eb b6                	jmp    c001e4f3 <Vm::mainloop2()>

c001e53d <Vm::mainloop3(unsigned long)>:
c001e53d:	83 ec 18             	sub    esp,0x18
c001e540:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e544:	fa                   	cli    
c001e545:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c001e54b:	6a 02                	push   0x2
c001e54d:	c6 05 64 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f64,0x1
c001e554:	a3 60 0f 03 c0       	mov    ds:0xc0030f60,eax
c001e559:	e8 4b f6 ff ff       	call   c001dba9 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e55e:	83 c4 1c             	add    esp,0x1c
c001e561:	eb 90                	jmp    c001e4f3 <Vm::mainloop2()>

c001e563 <Vm::initialise8086()>:
c001e563:	83 ec 0c             	sub    esp,0xc
c001e566:	68 80 00 00 00       	push   0x80
c001e56b:	6a 00                	push   0x0
c001e56d:	68 2d e5 01 c0       	push   0xc001e52d
c001e572:	ff 35 30 0f 03 c0    	push   DWORD PTR ds:0xc0030f30
c001e578:	e8 57 f2 ff ff       	call   c001d7d4 <Process::createThread(void (*)(void*), void*, int)>
c001e57d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e584:	a3 68 0f 03 c0       	mov    ds:0xc0030f68,eax
c001e589:	68 00 01 00 00       	push   0x100
c001e58e:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c001e593:	6a 00                	push   0x0
c001e595:	6a 00                	push   0x0
c001e597:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e59d:	e8 68 37 ff ff       	call   c0011d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e5a2:	83 c4 2c             	add    esp,0x2c
c001e5a5:	c3                   	ret    

c001e5a6 <Vm::finish8086()>:
c001e5a6:	53                   	push   ebx
c001e5a7:	83 ec 08             	sub    esp,0x8
c001e5aa:	fa                   	cli    
c001e5ab:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c001e5b1:	80 3d 64 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030f64,0x0
c001e5b8:	75 15                	jne    c001e5cf <Vm::finish8086()+0x29>
c001e5ba:	e8 3a f4 ff ff       	call   c001d9f9 <schedule()>
c001e5bf:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001e5c4:	48                   	dec    eax
c001e5c5:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001e5ca:	75 de                	jne    c001e5aa <Vm::finish8086()+0x4>
c001e5cc:	fb                   	sti    
c001e5cd:	eb db                	jmp    c001e5aa <Vm::finish8086()+0x4>
c001e5cf:	83 ec 0c             	sub    esp,0xc
c001e5d2:	8b 1d 60 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030f60
c001e5d8:	ff 35 68 0f 03 c0    	push   DWORD PTR ds:0xc0030f68
c001e5de:	c6 05 64 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030f64,0x0
c001e5e5:	e8 92 f8 ff ff       	call   c001de7c <unblockTask(ThreadControlBlock*)>
c001e5ea:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001e5ef:	83 c4 10             	add    esp,0x10
c001e5f2:	8d 50 ff             	lea    edx,[eax-0x1]
c001e5f5:	89 15 08 0f 03 c0    	mov    DWORD PTR ds:0xc0030f08,edx
c001e5fb:	85 d2                	test   edx,edx
c001e5fd:	75 01                	jne    c001e600 <Vm::finish8086()+0x5a>
c001e5ff:	fb                   	sti    
c001e600:	89 d8                	mov    eax,ebx
c001e602:	83 c4 08             	add    esp,0x8
c001e605:	5b                   	pop    ebx
c001e606:	c3                   	ret    

c001e607 <Vm::getOutput8086(unsigned char*)>:
c001e607:	57                   	push   edi
c001e608:	8b 0d 6c 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f6c
c001e60e:	56                   	push   esi
c001e60f:	be 80 0f 03 c0       	mov    esi,0xc0030f80
c001e614:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e618:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e61a:	a1 6c 0f 03 c0       	mov    eax,ds:0xc0030f6c
c001e61f:	5e                   	pop    esi
c001e620:	c7 05 6c 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f6c,0x0
c001e62a:	5f                   	pop    edi
c001e62b:	c3                   	ret    

c001e62c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e62c:	55                   	push   ebp
c001e62d:	57                   	push   edi
c001e62e:	56                   	push   esi
c001e62f:	53                   	push   ebx
c001e630:	83 ec 2c             	sub    esp,0x2c
c001e633:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e637:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e63b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e63f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e643:	fa                   	cli    
c001e644:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c001e64a:	0f b6 35 65 0f 03 c0 	movzx  esi,BYTE PTR ds:0xc0030f65
c001e651:	89 f0                	mov    eax,esi
c001e653:	84 c0                	test   al,al
c001e655:	75 1d                	jne    c001e674 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e65b:	e8 99 f3 ff ff       	call   c001d9f9 <schedule()>
c001e660:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001e665:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e669:	48                   	dec    eax
c001e66a:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001e66f:	75 d2                	jne    c001e643 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e671:	fb                   	sti    
c001e672:	eb cf                	jmp    c001e643 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e674:	a1 68 0f 03 c0       	mov    eax,ds:0xc0030f68
c001e679:	c7 05 6c 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f6c,0x0
c001e683:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e687:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e68b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e68f:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e693:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e697:	50                   	push   eax
c001e698:	6a 20                	push   0x20
c001e69a:	6a 00                	push   0x0
c001e69c:	68 80 0f 03 c0       	push   0xc0030f80
c001e6a1:	e8 aa 20 fe ff       	call   c0000750 <memset>
c001e6a6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e6ad:	e8 e7 0e ff ff       	call   c000f599 <malloc>
c001e6b2:	83 c4 0c             	add    esp,0xc
c001e6b5:	89 c3                	mov    ebx,eax
c001e6b7:	ff 35 30 0f 03 c0    	push   DWORD PTR ds:0xc0030f30
c001e6bd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e6c1:	50                   	push   eax
c001e6c2:	e8 9b 45 ff ff       	call   c0012c62 <File::File(char const*, Process*)>
c001e6c7:	83 c4 10             	add    esp,0x10
c001e6ca:	85 db                	test   ebx,ebx
c001e6cc:	75 0a                	jne    c001e6d8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e6ce:	83 ec 0c             	sub    esp,0xc
c001e6d1:	68 2c bd 02 c0       	push   0xc002bd2c
c001e6d6:	eb 3e                	jmp    c001e716 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e6d8:	50                   	push   eax
c001e6d9:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e6dd:	50                   	push   eax
c001e6de:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e6e2:	50                   	push   eax
c001e6e3:	53                   	push   ebx
c001e6e4:	e8 89 48 ff ff       	call   c0012f72 <File::stat(unsigned long long*, bool*)>
c001e6e9:	83 c4 10             	add    esp,0x10
c001e6ec:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e6f1:	74 0a                	je     c001e6fd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e6f3:	83 ec 0c             	sub    esp,0xc
c001e6f6:	68 40 bd 02 c0       	push   0xc002bd40
c001e6fb:	eb 19                	jmp    c001e716 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e6fd:	51                   	push   ecx
c001e6fe:	51                   	push   ecx
c001e6ff:	6a 01                	push   0x1
c001e701:	53                   	push   ebx
c001e702:	e8 bf 45 ff ff       	call   c0012cc6 <File::open(FileOpenMode)>
c001e707:	83 c4 10             	add    esp,0x10
c001e70a:	85 c0                	test   eax,eax
c001e70c:	74 24                	je     c001e732 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e70e:	83 ec 0c             	sub    esp,0xc
c001e711:	68 59 bd 02 c0       	push   0xc002bd59
c001e716:	e8 54 b7 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c001e71b:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001e720:	83 c4 10             	add    esp,0x10
c001e723:	48                   	dec    eax
c001e724:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001e729:	85 c0                	test   eax,eax
c001e72b:	75 01                	jne    c001e72e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e72d:	fb                   	sti    
c001e72e:	31 f6                	xor    esi,esi
c001e730:	eb 58                	jmp    c001e78a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e732:	0f b7 ed             	movzx  ebp,bp
c001e735:	50                   	push   eax
c001e736:	0f b7 ff             	movzx  edi,di
c001e739:	50                   	push   eax
c001e73a:	55                   	push   ebp
c001e73b:	57                   	push   edi
c001e73c:	e8 95 fd ff ff       	call   c001e4d6 <Vm::realToLinear(unsigned short, unsigned short)>
c001e741:	5a                   	pop    edx
c001e742:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e744:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e748:	51                   	push   ecx
c001e749:	50                   	push   eax
c001e74a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e74e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e752:	53                   	push   ebx
c001e753:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e756:	83 c4 14             	add    esp,0x14
c001e759:	53                   	push   ebx
c001e75a:	e8 c5 45 ff ff       	call   c0012d24 <File::close()>
c001e75f:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c001e764:	83 c4 10             	add    esp,0x10
c001e767:	48                   	dec    eax
c001e768:	c6 05 65 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030f65,0x0
c001e76f:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c001e774:	85 c0                	test   eax,eax
c001e776:	75 01                	jne    c001e779 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e778:	fb                   	sti    
c001e779:	83 ec 0c             	sub    esp,0xc
c001e77c:	ff 35 68 0f 03 c0    	push   DWORD PTR ds:0xc0030f68
c001e782:	e8 f5 f6 ff ff       	call   c001de7c <unblockTask(ThreadControlBlock*)>
c001e787:	83 c4 10             	add    esp,0x10
c001e78a:	83 c4 2c             	add    esp,0x2c
c001e78d:	89 f0                	mov    eax,esi
c001e78f:	5b                   	pop    ebx
c001e790:	5e                   	pop    esi
c001e791:	5f                   	pop    edi
c001e792:	5d                   	pop    ebp
c001e793:	c3                   	ret    

c001e794 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e794:	57                   	push   edi
c001e795:	56                   	push   esi
c001e796:	53                   	push   ebx
c001e797:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e79b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e79f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e7a3:	83 e8 06             	sub    eax,0x6
c001e7a6:	0f b7 c0             	movzx  eax,ax
c001e7a9:	50                   	push   eax
c001e7aa:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e7af:	50                   	push   eax
c001e7b0:	e8 21 fd ff ff       	call   c001e4d6 <Vm::realToLinear(unsigned short, unsigned short)>
c001e7b5:	5a                   	pop    edx
c001e7b6:	5e                   	pop    esi
c001e7b7:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e7ba:	8d 56 fa             	lea    edx,[esi-0x6]
c001e7bd:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e7c3:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e7c6:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e7c9:	83 c2 02             	add    edx,0x2
c001e7cc:	66 89 10             	mov    WORD PTR [eax],dx
c001e7cf:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e7d2:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e7d6:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e7d9:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e7dd:	89 d6                	mov    esi,edx
c001e7df:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e7e5:	66 81 e6 ff fd       	and    si,0xfdff
c001e7ea:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e7ee:	74 07                	je     c001e7f7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e7f0:	89 d6                	mov    esi,edx
c001e7f2:	66 81 ce 00 02       	or     si,0x200
c001e7f7:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e7fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e800:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e804:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e80c:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e80f:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e817:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e81a:	5b                   	pop    ebx
c001e81b:	5e                   	pop    esi
c001e81c:	5f                   	pop    edi
c001e81d:	c3                   	ret    

c001e81e <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e81e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e823:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e828:	c1 e0 04             	shl    eax,0x4
c001e82b:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e82e:	c3                   	ret    

c001e82f <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e82f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e834:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e839:	c1 e0 04             	shl    eax,0x4
c001e83c:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e840:	c3                   	ret    

c001e841 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e841:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e846:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e84b:	c1 e0 04             	shl    eax,0x4
c001e84e:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e851:	c3                   	ret    

c001e852 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e852:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e857:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e85c:	c1 e0 04             	shl    eax,0x4
c001e85f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e863:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e866:	c3                   	ret    

c001e867 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e867:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e86c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e871:	c1 e0 04             	shl    eax,0x4
c001e874:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e878:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e87c:	c3                   	ret    

c001e87d <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e87d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e882:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e887:	c1 e0 04             	shl    eax,0x4
c001e88a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e88e:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e891:	c3                   	ret    

c001e892 <Vm::faultHandler(regs*)>:
c001e892:	55                   	push   ebp
c001e893:	57                   	push   edi
c001e894:	56                   	push   esi
c001e895:	53                   	push   ebx
c001e896:	83 ec 1c             	sub    esp,0x1c
c001e899:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e89d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e8a0:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e8a4:	0f b7 f8             	movzx  edi,ax
c001e8a7:	52                   	push   edx
c001e8a8:	0f b7 c0             	movzx  eax,ax
c001e8ab:	50                   	push   eax
c001e8ac:	e8 25 fc ff ff       	call   c001e4d6 <Vm::realToLinear(unsigned short, unsigned short)>
c001e8b1:	5a                   	pop    edx
c001e8b2:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e8b5:	59                   	pop    ecx
c001e8b6:	89 c1                	mov    ecx,eax
c001e8b8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e8bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e8bf:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e8c8:	0f b7 c5             	movzx  eax,bp
c001e8cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e8cf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e8d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e8d7:	e8 fa fb ff ff       	call   c001e4d6 <Vm::realToLinear(unsigned short, unsigned short)>
c001e8dc:	5e                   	pop    esi
c001e8dd:	be 06 00 00 00       	mov    esi,0x6
c001e8e2:	5a                   	pop    edx
c001e8e3:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001e8e8:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001e8ed:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001e8f0:	80 fa 9d             	cmp    dl,0x9d
c001e8f3:	0f 84 2c 02 00 00    	je     c001eb25 <Vm::faultHandler(regs*)+0x293>
c001e8f9:	0f 87 91 00 00 00    	ja     c001e990 <Vm::faultHandler(regs*)+0xfe>
c001e8ff:	80 fa 66             	cmp    dl,0x66
c001e902:	0f 84 98 01 00 00    	je     c001eaa0 <Vm::faultHandler(regs*)+0x20e>
c001e908:	77 47                	ja     c001e951 <Vm::faultHandler(regs*)+0xbf>
c001e90a:	80 fa 36             	cmp    dl,0x36
c001e90d:	0f 84 80 01 00 00    	je     c001ea93 <Vm::faultHandler(regs*)+0x201>
c001e913:	77 1a                	ja     c001e92f <Vm::faultHandler(regs*)+0x9d>
c001e915:	80 fa 26             	cmp    dl,0x26
c001e918:	0f 84 4e 01 00 00    	je     c001ea6c <Vm::faultHandler(regs*)+0x1da>
c001e91e:	80 fa 2e             	cmp    dl,0x2e
c001e921:	0f 85 e2 05 00 00    	jne    c001ef09 <Vm::faultHandler(regs*)+0x677>
c001e927:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e92a:	31 f6                	xor    esi,esi
c001e92c:	41                   	inc    ecx
c001e92d:	eb be                	jmp    c001e8ed <Vm::faultHandler(regs*)+0x5b>
c001e92f:	80 fa 64             	cmp    dl,0x64
c001e932:	0f 84 41 01 00 00    	je     c001ea79 <Vm::faultHandler(regs*)+0x1e7>
c001e938:	0f 87 48 01 00 00    	ja     c001ea86 <Vm::faultHandler(regs*)+0x1f4>
c001e93e:	80 fa 3e             	cmp    dl,0x3e
c001e941:	0f 85 c2 05 00 00    	jne    c001ef09 <Vm::faultHandler(regs*)+0x677>
c001e947:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e94a:	be 01 00 00 00       	mov    esi,0x1
c001e94f:	eb db                	jmp    c001e92c <Vm::faultHandler(regs*)+0x9a>
c001e951:	80 fa 6d             	cmp    dl,0x6d
c001e954:	0f 84 ec 02 00 00    	je     c001ec46 <Vm::faultHandler(regs*)+0x3b4>
c001e95a:	77 17                	ja     c001e973 <Vm::faultHandler(regs*)+0xe1>
c001e95c:	80 fa 67             	cmp    dl,0x67
c001e95f:	0f 84 48 01 00 00    	je     c001eaad <Vm::faultHandler(regs*)+0x21b>
c001e965:	80 fa 6c             	cmp    dl,0x6c
c001e968:	0f 84 69 02 00 00    	je     c001ebd7 <Vm::faultHandler(regs*)+0x345>
c001e96e:	e9 96 05 00 00       	jmp    c001ef09 <Vm::faultHandler(regs*)+0x677>
c001e973:	80 fa 6f             	cmp    dl,0x6f
c001e976:	0f 84 f4 03 00 00    	je     c001ed70 <Vm::faultHandler(regs*)+0x4de>
c001e97c:	0f 82 59 03 00 00    	jb     c001ecdb <Vm::faultHandler(regs*)+0x449>
c001e982:	80 fa 9c             	cmp    dl,0x9c
c001e985:	0f 84 2f 01 00 00    	je     c001eaba <Vm::faultHandler(regs*)+0x228>
c001e98b:	e9 79 05 00 00       	jmp    c001ef09 <Vm::faultHandler(regs*)+0x677>
c001e990:	80 fa ec             	cmp    dl,0xec
c001e993:	0f 84 14 05 00 00    	je     c001eead <Vm::faultHandler(regs*)+0x61b>
c001e999:	77 7b                	ja     c001ea16 <Vm::faultHandler(regs*)+0x184>
c001e99b:	80 fa e4             	cmp    dl,0xe4
c001e99e:	0f 84 93 04 00 00    	je     c001ee37 <Vm::faultHandler(regs*)+0x5a5>
c001e9a4:	77 53                	ja     c001e9f9 <Vm::faultHandler(regs*)+0x167>
c001e9a6:	80 fa cd             	cmp    dl,0xcd
c001e9a9:	0f 84 d9 01 00 00    	je     c001eb88 <Vm::faultHandler(regs*)+0x2f6>
c001e9af:	80 fa cf             	cmp    dl,0xcf
c001e9b2:	0f 85 51 05 00 00    	jne    c001ef09 <Vm::faultHandler(regs*)+0x677>
c001e9b8:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e9bb:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001e9be:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001e9c2:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001e9c5:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001e9c9:	81 ca 00 02 02 00    	or     edx,0x20200
c001e9cf:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e9d2:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001e9d6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e9dc:	66 c1 e8 09          	shr    ax,0x9
c001e9e0:	83 e0 01             	and    eax,0x1
c001e9e3:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e9e6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e9e9:	83 c0 06             	add    eax,0x6
c001e9ec:	25 ff ff 00 00       	and    eax,0xffff
c001e9f1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e9f4:	e9 0c 05 00 00       	jmp    c001ef05 <Vm::faultHandler(regs*)+0x673>
c001e9f9:	80 fa e6             	cmp    dl,0xe6
c001e9fc:	0f 84 7f 04 00 00    	je     c001ee81 <Vm::faultHandler(regs*)+0x5ef>
c001ea02:	0f 82 4b 04 00 00    	jb     c001ee53 <Vm::faultHandler(regs*)+0x5c1>
c001ea08:	80 fa e7             	cmp    dl,0xe7
c001ea0b:	0f 84 87 04 00 00    	je     c001ee98 <Vm::faultHandler(regs*)+0x606>
c001ea11:	e9 f3 04 00 00       	jmp    c001ef09 <Vm::faultHandler(regs*)+0x677>
c001ea16:	80 fa ef             	cmp    dl,0xef
c001ea19:	0f 84 d1 04 00 00    	je     c001eef0 <Vm::faultHandler(regs*)+0x65e>
c001ea1f:	77 28                	ja     c001ea49 <Vm::faultHandler(regs*)+0x1b7>
c001ea21:	80 fa ed             	cmp    dl,0xed
c001ea24:	0f 84 9f 04 00 00    	je     c001eec9 <Vm::faultHandler(regs*)+0x637>
c001ea2a:	80 fa ee             	cmp    dl,0xee
c001ea2d:	0f 85 d6 04 00 00    	jne    c001ef09 <Vm::faultHandler(regs*)+0x677>
c001ea33:	50                   	push   eax
c001ea34:	50                   	push   eax
c001ea35:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ea39:	50                   	push   eax
c001ea3a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ea3e:	50                   	push   eax
c001ea3f:	e8 5c fa ff ff       	call   c001e4a0 <Vm::outbv(unsigned short, unsigned char)>
c001ea44:	e9 9f 04 00 00       	jmp    c001eee8 <Vm::faultHandler(regs*)+0x656>
c001ea49:	80 fa fa             	cmp    dl,0xfa
c001ea4c:	0f 84 69 01 00 00    	je     c001ebbb <Vm::faultHandler(regs*)+0x329>
c001ea52:	80 fa fb             	cmp    dl,0xfb
c001ea55:	0f 84 6e 01 00 00    	je     c001ebc9 <Vm::faultHandler(regs*)+0x337>
c001ea5b:	80 fa f3             	cmp    dl,0xf3
c001ea5e:	0f 85 a5 04 00 00    	jne    c001ef09 <Vm::faultHandler(regs*)+0x677>
c001ea64:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea67:	e9 c0 fe ff ff       	jmp    c001e92c <Vm::faultHandler(regs*)+0x9a>
c001ea6c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea6f:	be 02 00 00 00       	mov    esi,0x2
c001ea74:	e9 b3 fe ff ff       	jmp    c001e92c <Vm::faultHandler(regs*)+0x9a>
c001ea79:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea7c:	be 03 00 00 00       	mov    esi,0x3
c001ea81:	e9 a6 fe ff ff       	jmp    c001e92c <Vm::faultHandler(regs*)+0x9a>
c001ea86:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea89:	be 04 00 00 00       	mov    esi,0x4
c001ea8e:	e9 99 fe ff ff       	jmp    c001e92c <Vm::faultHandler(regs*)+0x9a>
c001ea93:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea96:	be 05 00 00 00       	mov    esi,0x5
c001ea9b:	e9 8c fe ff ff       	jmp    c001e92c <Vm::faultHandler(regs*)+0x9a>
c001eaa0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eaa3:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001eaa8:	e9 7f fe ff ff       	jmp    c001e92c <Vm::faultHandler(regs*)+0x9a>
c001eaad:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eab0:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001eab5:	e9 72 fe ff ff       	jmp    c001e92c <Vm::faultHandler(regs*)+0x9a>
c001eaba:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001eabd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001eac1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eac6:	74 30                	je     c001eaf8 <Vm::faultHandler(regs*)+0x266>
c001eac8:	83 e9 04             	sub    ecx,0x4
c001eacb:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ead1:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ead7:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eada:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eadd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eae3:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eae7:	0f 84 15 04 00 00    	je     c001ef02 <Vm::faultHandler(regs*)+0x670>
c001eaed:	80 ce 02             	or     dh,0x2
c001eaf0:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eaf3:	e9 0a 04 00 00       	jmp    c001ef02 <Vm::faultHandler(regs*)+0x670>
c001eaf8:	83 e9 02             	sub    ecx,0x2
c001eafb:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001eb01:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eb04:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eb08:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eb0e:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eb12:	74 05                	je     c001eb19 <Vm::faultHandler(regs*)+0x287>
c001eb14:	80 ce 02             	or     dh,0x2
c001eb17:	eb 03                	jmp    c001eb1c <Vm::faultHandler(regs*)+0x28a>
c001eb19:	80 e6 fd             	and    dh,0xfd
c001eb1c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eb20:	e9 dd 03 00 00       	jmp    c001ef02 <Vm::faultHandler(regs*)+0x670>
c001eb25:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eb2a:	74 2a                	je     c001eb56 <Vm::faultHandler(regs*)+0x2c4>
c001eb2c:	8b 10                	mov    edx,DWORD PTR [eax]
c001eb2e:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001eb34:	81 ca 00 02 02 00    	or     edx,0x20200
c001eb3a:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eb3d:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb3f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb45:	c1 e8 09             	shr    eax,0x9
c001eb48:	83 e0 01             	and    eax,0x1
c001eb4b:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eb4e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eb51:	83 c0 04             	add    eax,0x4
c001eb54:	eb 25                	jmp    c001eb7b <Vm::faultHandler(regs*)+0x2e9>
c001eb56:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001eb59:	81 ca 00 02 02 00    	or     edx,0x20200
c001eb5f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eb62:	66 8b 00             	mov    ax,WORD PTR [eax]
c001eb65:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb6b:	66 c1 e8 09          	shr    ax,0x9
c001eb6f:	83 e0 01             	and    eax,0x1
c001eb72:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eb75:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eb78:	83 c0 02             	add    eax,0x2
c001eb7b:	25 ff ff 00 00       	and    eax,0xffff
c001eb80:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001eb83:	e9 7a 03 00 00       	jmp    c001ef02 <Vm::faultHandler(regs*)+0x670>
c001eb88:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eb8c:	3c ee                	cmp    al,0xee
c001eb8e:	75 10                	jne    c001eba0 <Vm::faultHandler(regs*)+0x30e>
c001eb90:	83 ec 0c             	sub    esp,0xc
c001eb93:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001eb96:	e8 a2 f9 ff ff       	call   c001e53d <Vm::mainloop3(unsigned long)>
c001eb9b:	e9 4b 03 00 00       	jmp    c001eeeb <Vm::faultHandler(regs*)+0x659>
c001eba0:	83 ec 0c             	sub    esp,0xc
c001eba3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001eba7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebab:	51                   	push   ecx
c001ebac:	50                   	push   eax
c001ebad:	53                   	push   ebx
c001ebae:	e8 e1 fb ff ff       	call   c001e794 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ebb3:	83 c4 20             	add    esp,0x20
c001ebb6:	e9 4a 03 00 00       	jmp    c001ef05 <Vm::faultHandler(regs*)+0x673>
c001ebbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ebc0:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ebc4:	e9 39 03 00 00       	jmp    c001ef02 <Vm::faultHandler(regs*)+0x670>
c001ebc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ebce:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001ebd2:	e9 2b 03 00 00       	jmp    c001ef02 <Vm::faultHandler(regs*)+0x670>
c001ebd7:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ebda:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ebdf:	74 2b                	je     c001ec0c <Vm::faultHandler(regs*)+0x37a>
c001ebe1:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001ebe8:	76 22                	jbe    c001ec0c <Vm::faultHandler(regs*)+0x37a>
c001ebea:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ebee:	50                   	push   eax
c001ebef:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ebf3:	50                   	push   eax
c001ebf4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ebf8:	50                   	push   eax
c001ebf9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ebfd:	50                   	push   eax
c001ebfe:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec02:	50                   	push   eax
c001ec03:	6a 6c                	push   0x6c
c001ec05:	6a 6c                	push   0x6c
c001ec07:	e9 b9 01 00 00       	jmp    c001edc5 <Vm::faultHandler(regs*)+0x533>
c001ec0c:	83 ec 0c             	sub    esp,0xc
c001ec0f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ec13:	0f b7 f6             	movzx  esi,si
c001ec16:	50                   	push   eax
c001ec17:	e8 71 f8 ff ff       	call   c001e48d <Vm::inbv(unsigned short)>
c001ec1c:	83 c4 0c             	add    esp,0xc
c001ec1f:	0f b6 c0             	movzx  eax,al
c001ec22:	50                   	push   eax
c001ec23:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001ec27:	50                   	push   eax
c001ec28:	56                   	push   esi
c001ec29:	e8 24 fc ff ff       	call   c001e852 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001ec2e:	83 c4 10             	add    esp,0x10
c001ec31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec34:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec38:	74 03                	je     c001ec3d <Vm::faultHandler(regs*)+0x3ab>
c001ec3a:	48                   	dec    eax
c001ec3b:	eb 01                	jmp    c001ec3e <Vm::faultHandler(regs*)+0x3ac>
c001ec3d:	40                   	inc    eax
c001ec3e:	0f b7 c0             	movzx  eax,ax
c001ec41:	e9 8d 00 00 00       	jmp    c001ecd3 <Vm::faultHandler(regs*)+0x441>
c001ec46:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ec49:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec4c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ec51:	74 29                	je     c001ec7c <Vm::faultHandler(regs*)+0x3ea>
c001ec53:	3d ff ff 00 00       	cmp    eax,0xffff
c001ec58:	76 22                	jbe    c001ec7c <Vm::faultHandler(regs*)+0x3ea>
c001ec5a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ec5e:	50                   	push   eax
c001ec5f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ec63:	50                   	push   eax
c001ec64:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ec68:	50                   	push   eax
c001ec69:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ec6d:	50                   	push   eax
c001ec6e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec72:	50                   	push   eax
c001ec73:	6a 6d                	push   0x6d
c001ec75:	6a 6d                	push   0x6d
c001ec77:	e9 49 01 00 00       	jmp    c001edc5 <Vm::faultHandler(regs*)+0x533>
c001ec7c:	0f b7 c8             	movzx  ecx,ax
c001ec7f:	0f b7 f6             	movzx  esi,si
c001ec82:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ec85:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ec8a:	74 20                	je     c001ecac <Vm::faultHandler(regs*)+0x41a>
c001ec8c:	ed                   	in     eax,dx
c001ec8d:	55                   	push   ebp
c001ec8e:	50                   	push   eax
c001ec8f:	51                   	push   ecx
c001ec90:	56                   	push   esi
c001ec91:	e8 e7 fb ff ff       	call   c001e87d <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ec96:	83 c4 10             	add    esp,0x10
c001ec99:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec9c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001eca0:	74 05                	je     c001eca7 <Vm::faultHandler(regs*)+0x415>
c001eca2:	83 e8 04             	sub    eax,0x4
c001eca5:	eb 27                	jmp    c001ecce <Vm::faultHandler(regs*)+0x43c>
c001eca7:	83 c0 04             	add    eax,0x4
c001ecaa:	eb 22                	jmp    c001ecce <Vm::faultHandler(regs*)+0x43c>
c001ecac:	66 ed                	in     ax,dx
c001ecae:	0f b7 c0             	movzx  eax,ax
c001ecb1:	57                   	push   edi
c001ecb2:	50                   	push   eax
c001ecb3:	51                   	push   ecx
c001ecb4:	56                   	push   esi
c001ecb5:	e8 ad fb ff ff       	call   c001e867 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ecba:	83 c4 10             	add    esp,0x10
c001ecbd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ecc0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ecc4:	74 05                	je     c001eccb <Vm::faultHandler(regs*)+0x439>
c001ecc6:	83 e8 02             	sub    eax,0x2
c001ecc9:	eb 03                	jmp    c001ecce <Vm::faultHandler(regs*)+0x43c>
c001eccb:	83 c0 02             	add    eax,0x2
c001ecce:	25 ff ff 00 00       	and    eax,0xffff
c001ecd3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001ecd6:	e9 27 02 00 00       	jmp    c001ef02 <Vm::faultHandler(regs*)+0x670>
c001ecdb:	8d 46 ff             	lea    eax,[esi-0x1]
c001ecde:	3c 05                	cmp    al,0x5
c001ece0:	77 24                	ja     c001ed06 <Vm::faultHandler(regs*)+0x474>
c001ece2:	0f b6 c0             	movzx  eax,al
c001ece5:	ff 24 85 cc bd 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4234]
c001ecec:	0f b7 fd             	movzx  edi,bp
c001ecef:	eb 15                	jmp    c001ed06 <Vm::faultHandler(regs*)+0x474>
c001ecf1:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001ecf5:	eb 0f                	jmp    c001ed06 <Vm::faultHandler(regs*)+0x474>
c001ecf7:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001ecfb:	eb 09                	jmp    c001ed06 <Vm::faultHandler(regs*)+0x474>
c001ecfd:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001ed01:	eb 03                	jmp    c001ed06 <Vm::faultHandler(regs*)+0x474>
c001ed03:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001ed06:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ed09:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ed0e:	74 29                	je     c001ed39 <Vm::faultHandler(regs*)+0x4a7>
c001ed10:	3d ff ff 00 00       	cmp    eax,0xffff
c001ed15:	76 22                	jbe    c001ed39 <Vm::faultHandler(regs*)+0x4a7>
c001ed17:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ed1b:	50                   	push   eax
c001ed1c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ed20:	50                   	push   eax
c001ed21:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ed25:	50                   	push   eax
c001ed26:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ed2a:	50                   	push   eax
c001ed2b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed2f:	50                   	push   eax
c001ed30:	6a 6e                	push   0x6e
c001ed32:	6a 6e                	push   0x6e
c001ed34:	e9 8c 00 00 00       	jmp    c001edc5 <Vm::faultHandler(regs*)+0x533>
c001ed39:	0f b7 c0             	movzx  eax,ax
c001ed3c:	52                   	push   edx
c001ed3d:	52                   	push   edx
c001ed3e:	50                   	push   eax
c001ed3f:	57                   	push   edi
c001ed40:	e8 d9 fa ff ff       	call   c001e81e <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ed45:	59                   	pop    ecx
c001ed46:	0f b6 c0             	movzx  eax,al
c001ed49:	5e                   	pop    esi
c001ed4a:	50                   	push   eax
c001ed4b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ed4f:	50                   	push   eax
c001ed50:	e8 4b f7 ff ff       	call   c001e4a0 <Vm::outbv(unsigned short, unsigned char)>
c001ed55:	83 c4 10             	add    esp,0x10
c001ed58:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ed5b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ed5f:	74 03                	je     c001ed64 <Vm::faultHandler(regs*)+0x4d2>
c001ed61:	48                   	dec    eax
c001ed62:	eb 01                	jmp    c001ed65 <Vm::faultHandler(regs*)+0x4d3>
c001ed64:	40                   	inc    eax
c001ed65:	0f b7 c0             	movzx  eax,ax
c001ed68:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ed6b:	e9 92 01 00 00       	jmp    c001ef02 <Vm::faultHandler(regs*)+0x670>
c001ed70:	8d 46 ff             	lea    eax,[esi-0x1]
c001ed73:	3c 05                	cmp    al,0x5
c001ed75:	77 1f                	ja     c001ed96 <Vm::faultHandler(regs*)+0x504>
c001ed77:	0f b6 c0             	movzx  eax,al
c001ed7a:	ff 24 85 e4 bd 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd421c]
c001ed81:	89 ef                	mov    edi,ebp
c001ed83:	eb 11                	jmp    c001ed96 <Vm::faultHandler(regs*)+0x504>
c001ed85:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001ed88:	eb 0c                	jmp    c001ed96 <Vm::faultHandler(regs*)+0x504>
c001ed8a:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001ed8d:	eb 07                	jmp    c001ed96 <Vm::faultHandler(regs*)+0x504>
c001ed8f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001ed92:	eb 02                	jmp    c001ed96 <Vm::faultHandler(regs*)+0x504>
c001ed94:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001ed96:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ed99:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ed9e:	74 37                	je     c001edd7 <Vm::faultHandler(regs*)+0x545>
c001eda0:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001eda6:	76 2f                	jbe    c001edd7 <Vm::faultHandler(regs*)+0x545>
c001eda8:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001edac:	50                   	push   eax
c001edad:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001edb1:	50                   	push   eax
c001edb2:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001edb6:	50                   	push   eax
c001edb7:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001edbb:	50                   	push   eax
c001edbc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001edc0:	50                   	push   eax
c001edc1:	6a 6f                	push   0x6f
c001edc3:	6a 6f                	push   0x6f
c001edc5:	68 72 bd 02 c0       	push   0xc002bd72
c001edca:	e8 34 39 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001edcf:	83 c4 20             	add    esp,0x20
c001edd2:	e9 86 01 00 00       	jmp    c001ef5d <Vm::faultHandler(regs*)+0x6cb>
c001edd7:	0f b7 d7             	movzx  edx,di
c001edda:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001eddd:	0f b7 c6             	movzx  eax,si
c001ede0:	81 e1 00 04 00 00    	and    ecx,0x400
c001ede6:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001ede9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001edee:	74 1d                	je     c001ee0d <Vm::faultHandler(regs*)+0x57b>
c001edf0:	55                   	push   ebp
c001edf1:	55                   	push   ebp
c001edf2:	50                   	push   eax
c001edf3:	52                   	push   edx
c001edf4:	e8 48 fa ff ff       	call   c001e841 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001edf9:	83 c4 10             	add    esp,0x10
c001edfc:	89 fa                	mov    edx,edi
c001edfe:	ef                   	out    dx,eax
c001edff:	85 c9                	test   ecx,ecx
c001ee01:	74 05                	je     c001ee08 <Vm::faultHandler(regs*)+0x576>
c001ee03:	83 ee 04             	sub    esi,0x4
c001ee06:	eb 21                	jmp    c001ee29 <Vm::faultHandler(regs*)+0x597>
c001ee08:	83 c6 04             	add    esi,0x4
c001ee0b:	eb 1c                	jmp    c001ee29 <Vm::faultHandler(regs*)+0x597>
c001ee0d:	55                   	push   ebp
c001ee0e:	55                   	push   ebp
c001ee0f:	50                   	push   eax
c001ee10:	52                   	push   edx
c001ee11:	e8 19 fa ff ff       	call   c001e82f <Vm::readWordFromReal(unsigned short, unsigned short)>
c001ee16:	83 c4 10             	add    esp,0x10
c001ee19:	89 fa                	mov    edx,edi
c001ee1b:	66 ef                	out    dx,ax
c001ee1d:	85 c9                	test   ecx,ecx
c001ee1f:	74 05                	je     c001ee26 <Vm::faultHandler(regs*)+0x594>
c001ee21:	83 ee 02             	sub    esi,0x2
c001ee24:	eb 03                	jmp    c001ee29 <Vm::faultHandler(regs*)+0x597>
c001ee26:	83 c6 02             	add    esi,0x2
c001ee29:	81 e6 ff ff 00 00    	and    esi,0xffff
c001ee2f:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001ee32:	e9 cb 00 00 00       	jmp    c001ef02 <Vm::faultHandler(regs*)+0x670>
c001ee37:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ee3e:	83 ec 0c             	sub    esp,0xc
c001ee41:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee45:	50                   	push   eax
c001ee46:	e8 42 f6 ff ff       	call   c001e48d <Vm::inbv(unsigned short)>
c001ee4b:	0f b6 c0             	movzx  eax,al
c001ee4e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ee51:	eb 3f                	jmp    c001ee92 <Vm::faultHandler(regs*)+0x600>
c001ee53:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee58:	74 07                	je     c001ee61 <Vm::faultHandler(regs*)+0x5cf>
c001ee5a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee5e:	ed                   	in     eax,dx
c001ee5f:	eb 14                	jmp    c001ee75 <Vm::faultHandler(regs*)+0x5e3>
c001ee61:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001ee64:	66 31 f6             	xor    si,si
c001ee67:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001ee6a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee6e:	66 ed                	in     ax,dx
c001ee70:	0f b7 c0             	movzx  eax,ax
c001ee73:	09 f0                	or     eax,esi
c001ee75:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ee78:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ee7c:	e9 84 00 00 00       	jmp    c001ef05 <Vm::faultHandler(regs*)+0x673>
c001ee81:	52                   	push   edx
c001ee82:	52                   	push   edx
c001ee83:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ee87:	50                   	push   eax
c001ee88:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee8c:	50                   	push   eax
c001ee8d:	e8 0e f6 ff ff       	call   c001e4a0 <Vm::outbv(unsigned short, unsigned char)>
c001ee92:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ee96:	eb 53                	jmp    c001eeeb <Vm::faultHandler(regs*)+0x659>
c001ee98:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ee9b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee9f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eea4:	74 03                	je     c001eea9 <Vm::faultHandler(regs*)+0x617>
c001eea6:	ef                   	out    dx,eax
c001eea7:	eb cf                	jmp    c001ee78 <Vm::faultHandler(regs*)+0x5e6>
c001eea9:	66 ef                	out    dx,ax
c001eeab:	eb cb                	jmp    c001ee78 <Vm::faultHandler(regs*)+0x5e6>
c001eead:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001eeb4:	83 ec 0c             	sub    esp,0xc
c001eeb7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001eebb:	50                   	push   eax
c001eebc:	e8 cc f5 ff ff       	call   c001e48d <Vm::inbv(unsigned short)>
c001eec1:	0f b6 c0             	movzx  eax,al
c001eec4:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001eec7:	eb 1f                	jmp    c001eee8 <Vm::faultHandler(regs*)+0x656>
c001eec9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001eecc:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eed1:	74 03                	je     c001eed6 <Vm::faultHandler(regs*)+0x644>
c001eed3:	ed                   	in     eax,dx
c001eed4:	eb 0d                	jmp    c001eee3 <Vm::faultHandler(regs*)+0x651>
c001eed6:	66 ed                	in     ax,dx
c001eed8:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001eedb:	0f b7 c0             	movzx  eax,ax
c001eede:	66 31 d2             	xor    dx,dx
c001eee1:	09 d0                	or     eax,edx
c001eee3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001eee6:	eb 1a                	jmp    c001ef02 <Vm::faultHandler(regs*)+0x670>
c001eee8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eeeb:	83 c4 10             	add    esp,0x10
c001eeee:	eb 15                	jmp    c001ef05 <Vm::faultHandler(regs*)+0x673>
c001eef0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001eef3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001eef6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eefb:	74 03                	je     c001ef00 <Vm::faultHandler(regs*)+0x66e>
c001eefd:	ef                   	out    dx,eax
c001eefe:	eb 02                	jmp    c001ef02 <Vm::faultHandler(regs*)+0x670>
c001ef00:	66 ef                	out    dx,ax
c001ef02:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ef05:	b0 01                	mov    al,0x1
c001ef07:	eb 56                	jmp    c001ef5f <Vm::faultHandler(regs*)+0x6cd>
c001ef09:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ef0d:	50                   	push   eax
c001ef0e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ef12:	50                   	push   eax
c001ef13:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ef17:	50                   	push   eax
c001ef18:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ef1c:	50                   	push   eax
c001ef1d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ef21:	50                   	push   eax
c001ef22:	52                   	push   edx
c001ef23:	52                   	push   edx
c001ef24:	68 9f bd 02 c0       	push   0xc002bd9f
c001ef29:	e8 d5 37 ff ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c001ef2e:	83 c4 20             	add    esp,0x20
c001ef31:	83 ec 0c             	sub    esp,0xc
c001ef34:	6a 60                	push   0x60
c001ef36:	e8 52 f5 ff ff       	call   c001e48d <Vm::inbv(unsigned short)>
c001ef3b:	83 c4 10             	add    esp,0x10
c001ef3e:	3c 1c                	cmp    al,0x1c
c001ef40:	74 04                	je     c001ef46 <Vm::faultHandler(regs*)+0x6b4>
c001ef42:	3c 5a                	cmp    al,0x5a
c001ef44:	75 eb                	jne    c001ef31 <Vm::faultHandler(regs*)+0x69f>
c001ef46:	3c 5a                	cmp    al,0x5a
c001ef48:	74 04                	je     c001ef4e <Vm::faultHandler(regs*)+0x6bc>
c001ef4a:	3c 1c                	cmp    al,0x1c
c001ef4c:	75 0f                	jne    c001ef5d <Vm::faultHandler(regs*)+0x6cb>
c001ef4e:	83 ec 0c             	sub    esp,0xc
c001ef51:	6a 60                	push   0x60
c001ef53:	e8 35 f5 ff ff       	call   c001e48d <Vm::inbv(unsigned short)>
c001ef58:	83 c4 10             	add    esp,0x10
c001ef5b:	eb e9                	jmp    c001ef46 <Vm::faultHandler(regs*)+0x6b4>
c001ef5d:	31 c0                	xor    eax,eax
c001ef5f:	83 c4 1c             	add    esp,0x1c
c001ef62:	5b                   	pop    ebx
c001ef63:	5e                   	pop    esi
c001ef64:	5f                   	pop    edi
c001ef65:	5d                   	pop    ebp
c001ef66:	c3                   	ret    

c001ef67 <Vm::fpuInternalTo32(unsigned long long)>:
c001ef67:	57                   	push   edi
c001ef68:	56                   	push   esi
c001ef69:	53                   	push   ebx
c001ef6a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef72:	89 d6                	mov    esi,edx
c001ef74:	89 d7                	mov    edi,edx
c001ef76:	89 c1                	mov    ecx,eax
c001ef78:	c1 ef 14             	shr    edi,0x14
c001ef7b:	89 d3                	mov    ebx,edx
c001ef7d:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ef83:	31 d2                	xor    edx,edx
c001ef85:	89 f8                	mov    eax,edi
c001ef87:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ef8d:	bf ff 00 00 00       	mov    edi,0xff
c001ef92:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ef97:	83 d2 ff             	adc    edx,0xffffffff
c001ef9a:	39 c7                	cmp    edi,eax
c001ef9c:	bf 00 00 00 00       	mov    edi,0x0
c001efa1:	19 d7                	sbb    edi,edx
c001efa3:	72 15                	jb     c001efba <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001efa5:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001efa9:	c1 e0 17             	shl    eax,0x17
c001efac:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001efb2:	09 f1                	or     ecx,esi
c001efb4:	09 c1                	or     ecx,eax
c001efb6:	89 cf                	mov    edi,ecx
c001efb8:	eb 02                	jmp    c001efbc <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001efba:	31 ff                	xor    edi,edi
c001efbc:	89 f8                	mov    eax,edi
c001efbe:	5b                   	pop    ebx
c001efbf:	5e                   	pop    esi
c001efc0:	5f                   	pop    edi
c001efc1:	c3                   	ret    

c001efc2 <Vm::fpuInternalTo64(unsigned long long)>:
c001efc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001efca:	c3                   	ret    

c001efcb <Vm::fpu32ToInternal(unsigned int)>:
c001efcb:	57                   	push   edi
c001efcc:	31 ff                	xor    edi,edi
c001efce:	56                   	push   esi
c001efcf:	53                   	push   ebx
c001efd0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001efd4:	89 cb                	mov    ebx,ecx
c001efd6:	89 ce                	mov    esi,ecx
c001efd8:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001efde:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001efe4:	c1 e9 17             	shr    ecx,0x17
c001efe7:	89 f0                	mov    eax,esi
c001efe9:	0f b6 d1             	movzx  edx,cl
c001efec:	81 c2 80 03 00 00    	add    edx,0x380
c001eff2:	89 d1                	mov    ecx,edx
c001eff4:	89 fa                	mov    edx,edi
c001eff6:	c1 e1 14             	shl    ecx,0x14
c001eff9:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001effd:	c1 e0 1d             	shl    eax,0x1d
c001f000:	89 d7                	mov    edi,edx
c001f002:	89 c6                	mov    esi,eax
c001f004:	89 ca                	mov    edx,ecx
c001f006:	89 f0                	mov    eax,esi
c001f008:	09 fa                	or     edx,edi
c001f00a:	09 da                	or     edx,ebx
c001f00c:	5b                   	pop    ebx
c001f00d:	5e                   	pop    esi
c001f00e:	5f                   	pop    edi
c001f00f:	c3                   	ret    

c001f010 <Vm::fpu64ToInternal(unsigned long long)>:
c001f010:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f014:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f018:	c3                   	ret    

c001f019 <Vm::fpuFloatToLong(unsigned long long)>:
c001f019:	57                   	push   edi
c001f01a:	31 c0                	xor    eax,eax
c001f01c:	56                   	push   esi
c001f01d:	31 d2                	xor    edx,edx
c001f01f:	53                   	push   ebx
c001f020:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f024:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f028:	89 d9                	mov    ecx,ebx
c001f02a:	c1 e9 14             	shr    ecx,0x14
c001f02d:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f033:	89 cf                	mov    edi,ecx
c001f035:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f03b:	78 33                	js     c001f070 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f03d:	89 d9                	mov    ecx,ebx
c001f03f:	89 f0                	mov    eax,esi
c001f041:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f047:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f04d:	89 ca                	mov    edx,ecx
c001f04f:	b9 34 00 00 00       	mov    ecx,0x34
c001f054:	29 f9                	sub    ecx,edi
c001f056:	0f ad d0             	shrd   eax,edx,cl
c001f059:	d3 fa                	sar    edx,cl
c001f05b:	f6 c1 20             	test   cl,0x20
c001f05e:	74 05                	je     c001f065 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f060:	89 d0                	mov    eax,edx
c001f062:	c1 fa 1f             	sar    edx,0x1f
c001f065:	85 db                	test   ebx,ebx
c001f067:	79 07                	jns    c001f070 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f069:	f7 d8                	neg    eax
c001f06b:	83 d2 00             	adc    edx,0x0
c001f06e:	f7 da                	neg    edx
c001f070:	5b                   	pop    ebx
c001f071:	5e                   	pop    esi
c001f072:	5f                   	pop    edi
c001f073:	c3                   	ret    

c001f074 <Vm::fpuULongToFloat(unsigned long long)>:
c001f074:	57                   	push   edi
c001f075:	31 c9                	xor    ecx,ecx
c001f077:	56                   	push   esi
c001f078:	53                   	push   ebx
c001f079:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f07d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f081:	0f ba e7 14          	bt     edi,0x14
c001f085:	72 07                	jb     c001f08e <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f087:	01 f6                	add    esi,esi
c001f089:	11 ff                	adc    edi,edi
c001f08b:	41                   	inc    ecx
c001f08c:	eb f3                	jmp    c001f081 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f08e:	89 fa                	mov    edx,edi
c001f090:	89 f0                	mov    eax,esi
c001f092:	bb 33 04 00 00       	mov    ebx,0x433
c001f097:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f09d:	29 cb                	sub    ebx,ecx
c001f09f:	89 d9                	mov    ecx,ebx
c001f0a1:	5b                   	pop    ebx
c001f0a2:	c1 e1 14             	shl    ecx,0x14
c001f0a5:	5e                   	pop    esi
c001f0a6:	09 ca                	or     edx,ecx
c001f0a8:	5f                   	pop    edi
c001f0a9:	c3                   	ret    

c001f0aa <Vm::fpuLongToFloat(long long)>:
c001f0aa:	56                   	push   esi
c001f0ab:	31 c0                	xor    eax,eax
c001f0ad:	53                   	push   ebx
c001f0ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f0b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f0b6:	39 c8                	cmp    eax,ecx
c001f0b8:	19 d8                	sbb    eax,ebx
c001f0ba:	7d 04                	jge    c001f0c0 <Vm::fpuLongToFloat(long long)+0x16>
c001f0bc:	31 f6                	xor    esi,esi
c001f0be:	eb 0c                	jmp    c001f0cc <Vm::fpuLongToFloat(long long)+0x22>
c001f0c0:	f7 d9                	neg    ecx
c001f0c2:	be 01 00 00 00       	mov    esi,0x1
c001f0c7:	83 d3 00             	adc    ebx,0x0
c001f0ca:	f7 db                	neg    ebx
c001f0cc:	31 c0                	xor    eax,eax
c001f0ce:	0f ba e3 14          	bt     ebx,0x14
c001f0d2:	72 07                	jb     c001f0db <Vm::fpuLongToFloat(long long)+0x31>
c001f0d4:	01 c9                	add    ecx,ecx
c001f0d6:	11 db                	adc    ebx,ebx
c001f0d8:	40                   	inc    eax
c001f0d9:	eb f3                	jmp    c001f0ce <Vm::fpuLongToFloat(long long)+0x24>
c001f0db:	ba 33 04 00 00       	mov    edx,0x433
c001f0e0:	29 c2                	sub    edx,eax
c001f0e2:	89 c8                	mov    eax,ecx
c001f0e4:	c1 e2 14             	shl    edx,0x14
c001f0e7:	89 d9                	mov    ecx,ebx
c001f0e9:	89 f3                	mov    ebx,esi
c001f0eb:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f0f1:	09 ca                	or     edx,ecx
c001f0f3:	84 db                	test   bl,bl
c001f0f5:	74 06                	je     c001f0fd <Vm::fpuLongToFloat(long long)+0x53>
c001f0f7:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f0fd:	5b                   	pop    ebx
c001f0fe:	5e                   	pop    esi
c001f0ff:	c3                   	ret    

c001f100 <Vm::fpuGet0()>:
c001f100:	31 c0                	xor    eax,eax
c001f102:	31 d2                	xor    edx,edx
c001f104:	c3                   	ret    

c001f105 <Vm::fpuGet1()>:
c001f105:	b8 01 00 00 00       	mov    eax,0x1
c001f10a:	31 d2                	xor    edx,edx
c001f10c:	c3                   	ret    

c001f10d <Vm::fpuGetPi()>:
c001f10d:	b8 03 00 00 00       	mov    eax,0x3
c001f112:	31 d2                	xor    edx,edx
c001f114:	c3                   	ret    

c001f115 <Vm::fpuGetLog2E()>:
c001f115:	83 ec 18             	sub    esp,0x18
c001f118:	68 fc bd 02 c0       	push   0xc002bdfc
c001f11d:	e8 4d ad ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c001f122:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f127:	31 d2                	xor    edx,edx
c001f129:	83 c4 1c             	add    esp,0x1c
c001f12c:	c3                   	ret    

c001f12d <Vm::fpuGetLogE2()>:
c001f12d:	83 ec 18             	sub    esp,0x18
c001f130:	68 08 be 02 c0       	push   0xc002be08
c001f135:	e8 35 ad ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c001f13a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f13f:	31 d2                	xor    edx,edx
c001f141:	83 c4 1c             	add    esp,0x1c
c001f144:	c3                   	ret    

c001f145 <Vm::fpuGetLog210()>:
c001f145:	83 ec 18             	sub    esp,0x18
c001f148:	68 14 be 02 c0       	push   0xc002be14
c001f14d:	e8 1d ad ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c001f152:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f157:	31 d2                	xor    edx,edx
c001f159:	83 c4 1c             	add    esp,0x1c
c001f15c:	c3                   	ret    

c001f15d <Vm::fpuGetLog102()>:
c001f15d:	83 ec 18             	sub    esp,0x18
c001f160:	68 21 be 02 c0       	push   0xc002be21
c001f165:	e8 05 ad ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c001f16a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f16f:	31 d2                	xor    edx,edx
c001f171:	83 c4 1c             	add    esp,0x1c
c001f174:	c3                   	ret    

c001f175 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f175:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f179:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f17d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f181:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f185:	0f 92 c0             	setb   al
c001f188:	c3                   	ret    

c001f189 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f189:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f18d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f191:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f195:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f199:	09 c2                	or     edx,eax
c001f19b:	0f 94 c0             	sete   al
c001f19e:	c3                   	ret    

c001f19f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f19f:	57                   	push   edi
c001f1a0:	56                   	push   esi
c001f1a1:	53                   	push   ebx
c001f1a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f1a6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f1aa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f1ae:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f1b2:	57                   	push   edi
c001f1b3:	56                   	push   esi
c001f1b4:	53                   	push   ebx
c001f1b5:	51                   	push   ecx
c001f1b6:	e8 ce ff ff ff       	call   c001f189 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f1bb:	83 c4 10             	add    esp,0x10
c001f1be:	88 c2                	mov    dl,al
c001f1c0:	31 c0                	xor    eax,eax
c001f1c2:	84 d2                	test   dl,dl
c001f1c4:	75 0c                	jne    c001f1d2 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f1c6:	57                   	push   edi
c001f1c7:	56                   	push   esi
c001f1c8:	53                   	push   ebx
c001f1c9:	51                   	push   ecx
c001f1ca:	e8 a6 ff ff ff       	call   c001f175 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f1cf:	83 c4 10             	add    esp,0x10
c001f1d2:	83 e0 01             	and    eax,0x1
c001f1d5:	5b                   	pop    ebx
c001f1d6:	88 c1                	mov    cl,al
c001f1d8:	83 e2 01             	and    edx,0x1
c001f1db:	a0 a1 0f 03 c0       	mov    al,ds:0xc0030fa1
c001f1e0:	c1 e2 06             	shl    edx,0x6
c001f1e3:	83 e0 ba             	and    eax,0xffffffba
c001f1e6:	5e                   	pop    esi
c001f1e7:	09 c8                	or     eax,ecx
c001f1e9:	5f                   	pop    edi
c001f1ea:	09 d0                	or     eax,edx
c001f1ec:	a2 a1 0f 03 c0       	mov    ds:0xc0030fa1,al
c001f1f1:	c3                   	ret    

c001f1f2 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f1f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f1f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1fa:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f1fe:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f202:	c3                   	ret    

c001f203 <Vm::fpuAbs(unsigned long long)>:
c001f203:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f20b:	c3                   	ret    

c001f20c <Vm::fpuChs(unsigned long long)>:
c001f20c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f210:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f214:	f7 d8                	neg    eax
c001f216:	83 d2 00             	adc    edx,0x0
c001f219:	f7 da                	neg    edx
c001f21b:	c3                   	ret    

c001f21c <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f21c:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f220:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f225:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f229:	eb c7                	jmp    c001f1f2 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f22b <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f22b:	53                   	push   ebx
c001f22c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f230:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f234:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f238:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f23c:	0f af ca             	imul   ecx,edx
c001f23f:	0f af d8             	imul   ebx,eax
c001f242:	f7 e2                	mul    edx
c001f244:	01 d9                	add    ecx,ebx
c001f246:	5b                   	pop    ebx
c001f247:	01 ca                	add    edx,ecx
c001f249:	c3                   	ret    

c001f24a <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f24a:	83 ec 0c             	sub    esp,0xc
c001f24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f25d:	e8 e2 74 00 00       	call   c0026744 <__udivdi3>
c001f262:	83 c4 1c             	add    esp,0x1c
c001f265:	c3                   	ret    

c001f266 <Vm::fpuSquare(unsigned long long)>:
c001f266:	50                   	push   eax
c001f267:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f26b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f26f:	52                   	push   edx
c001f270:	50                   	push   eax
c001f271:	52                   	push   edx
c001f272:	50                   	push   eax
c001f273:	e8 b3 ff ff ff       	call   c001f22b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f278:	83 c4 14             	add    esp,0x14
c001f27b:	c3                   	ret    

c001f27c <Vm::fpuGetReg(int)>:
c001f27c:	83 ec 0c             	sub    esp,0xc
c001f27f:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f284:	76 10                	jbe    c001f296 <Vm::fpuGetReg(int)+0x1a>
c001f286:	83 ec 0c             	sub    esp,0xc
c001f289:	68 2e be 02 c0       	push   0xc002be2e
c001f28e:	e8 dc ab ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c001f293:	83 c4 10             	add    esp,0x10
c001f296:	a0 a1 0f 03 c0       	mov    al,ds:0xc0030fa1
c001f29b:	b9 08 00 00 00       	mov    ecx,0x8
c001f2a0:	c0 e8 03             	shr    al,0x3
c001f2a3:	83 e0 07             	and    eax,0x7
c001f2a6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f2aa:	99                   	cdq    
c001f2ab:	f7 f9                	idiv   ecx
c001f2ad:	8b 04 d5 a4 0f 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcf05c]
c001f2b4:	8b 14 d5 a8 0f 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcf058]
c001f2bb:	83 c4 0c             	add    esp,0xc
c001f2be:	c3                   	ret    

c001f2bf <Vm::fpuSetReg(int, unsigned long long)>:
c001f2bf:	57                   	push   edi
c001f2c0:	56                   	push   esi
c001f2c1:	52                   	push   edx
c001f2c2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f2c6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f2ca:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f2cf:	76 10                	jbe    c001f2e1 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f2d1:	83 ec 0c             	sub    esp,0xc
c001f2d4:	68 41 be 02 c0       	push   0xc002be41
c001f2d9:	e8 91 ab ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c001f2de:	83 c4 10             	add    esp,0x10
c001f2e1:	a0 a1 0f 03 c0       	mov    al,ds:0xc0030fa1
c001f2e6:	b9 08 00 00 00       	mov    ecx,0x8
c001f2eb:	c0 e8 03             	shr    al,0x3
c001f2ee:	83 e0 07             	and    eax,0x7
c001f2f1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f2f5:	99                   	cdq    
c001f2f6:	f7 f9                	idiv   ecx
c001f2f8:	89 34 d5 a4 0f 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf05c],esi
c001f2ff:	89 3c d5 a8 0f 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf058],edi
c001f306:	58                   	pop    eax
c001f307:	5e                   	pop    esi
c001f308:	5f                   	pop    edi
c001f309:	c3                   	ret    

c001f30a <Vm::fpuPush(unsigned long long)>:
c001f30a:	a0 a1 0f 03 c0       	mov    al,ds:0xc0030fa1
c001f30f:	c0 e8 03             	shr    al,0x3
c001f312:	83 e0 07             	and    eax,0x7
c001f315:	83 c0 07             	add    eax,0x7
c001f318:	88 c2                	mov    dl,al
c001f31a:	83 e0 07             	and    eax,0x7
c001f31d:	83 e2 07             	and    edx,0x7
c001f320:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f327:	8a 15 a1 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030fa1
c001f32d:	83 e2 c7             	and    edx,0xffffffc7
c001f330:	09 ca                	or     edx,ecx
c001f332:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f336:	88 15 a1 0f 03 c0    	mov    BYTE PTR ds:0xc0030fa1,dl
c001f33c:	89 0c c5 a8 0f 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf058],ecx
c001f343:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f347:	89 14 c5 a4 0f 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf05c],edx
c001f34e:	a1 e4 0f 03 c0       	mov    eax,ds:0xc0030fe4
c001f353:	83 f8 08             	cmp    eax,0x8
c001f356:	75 08                	jne    c001f360 <Vm::fpuPush(unsigned long long)+0x56>
c001f358:	80 0d a0 0f 03 c0 40 	or     BYTE PTR ds:0xc0030fa0,0x40
c001f35f:	c3                   	ret    
c001f360:	40                   	inc    eax
c001f361:	a3 e4 0f 03 c0       	mov    ds:0xc0030fe4,eax
c001f366:	c3                   	ret    

c001f367 <Vm::fpuPop()>:
c001f367:	8a 0d a1 0f 03 c0    	mov    cl,BYTE PTR ds:0xc0030fa1
c001f36d:	53                   	push   ebx
c001f36e:	c0 e9 03             	shr    cl,0x3
c001f371:	8a 1d a1 0f 03 c0    	mov    bl,BYTE PTR ds:0xc0030fa1
c001f377:	83 e1 07             	and    ecx,0x7
c001f37a:	83 e3 c7             	and    ebx,0xffffffc7
c001f37d:	8b 04 cd a4 0f 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcf05c]
c001f384:	8b 14 cd a8 0f 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcf058]
c001f38b:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f392:	83 e1 38             	and    ecx,0x38
c001f395:	09 d9                	or     ecx,ebx
c001f397:	88 0d a1 0f 03 c0    	mov    BYTE PTR ds:0xc0030fa1,cl
c001f39d:	8b 0d e4 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030fe4
c001f3a3:	85 c9                	test   ecx,ecx
c001f3a5:	74 09                	je     c001f3b0 <Vm::fpuPop()+0x49>
c001f3a7:	49                   	dec    ecx
c001f3a8:	89 0d e4 0f 03 c0    	mov    DWORD PTR ds:0xc0030fe4,ecx
c001f3ae:	eb 07                	jmp    c001f3b7 <Vm::fpuPop()+0x50>
c001f3b0:	80 0d a0 0f 03 c0 40 	or     BYTE PTR ds:0xc0030fa0,0x40
c001f3b7:	5b                   	pop    ebx
c001f3b8:	c3                   	ret    

c001f3b9 <Vm::x87Handler(regs*)>:
c001f3b9:	55                   	push   ebp
c001f3ba:	57                   	push   edi
c001f3bb:	56                   	push   esi
c001f3bc:	53                   	push   ebx
c001f3bd:	83 ec 1c             	sub    esp,0x1c
c001f3c0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f3c4:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f3c9:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f3cc:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f3d4:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f3d8:	50                   	push   eax
c001f3d9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f3dd:	50                   	push   eax
c001f3de:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f3e2:	50                   	push   eax
c001f3e3:	53                   	push   ebx
c001f3e4:	e8 9f a1 ff ff       	call   c0019588 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f3e9:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f3ec:	83 c4 10             	add    esp,0x10
c001f3ef:	89 c6                	mov    esi,eax
c001f3f1:	80 fa d9             	cmp    dl,0xd9
c001f3f4:	0f 85 52 01 00 00    	jne    c001f54c <Vm::x87Handler(regs*)+0x193>
c001f3fa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3fe:	8d 50 20             	lea    edx,[eax+0x20]
c001f401:	80 fa 0e             	cmp    dl,0xe
c001f404:	0f 87 86 00 00 00    	ja     c001f490 <Vm::x87Handler(regs*)+0xd7>
c001f40a:	0f b6 d2             	movzx  edx,dl
c001f40d:	ff 24 95 54 be 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd41ac]
c001f414:	e8 e7 fc ff ff       	call   c001f100 <Vm::fpuGet0()>
c001f419:	eb 05                	jmp    c001f420 <Vm::x87Handler(regs*)+0x67>
c001f41b:	e8 e5 fc ff ff       	call   c001f105 <Vm::fpuGet1()>
c001f420:	57                   	push   edi
c001f421:	57                   	push   edi
c001f422:	52                   	push   edx
c001f423:	50                   	push   eax
c001f424:	e8 e1 fe ff ff       	call   c001f30a <Vm::fpuPush(unsigned long long)>
c001f429:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f42d:	83 c4 10             	add    esp,0x10
c001f430:	b0 01                	mov    al,0x1
c001f432:	e9 e3 09 00 00       	jmp    c001fe1a <Vm::x87Handler(regs*)+0xa61>
c001f437:	83 ec 0c             	sub    esp,0xc
c001f43a:	6a 00                	push   0x0
c001f43c:	e8 3b fe ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f441:	59                   	pop    ecx
c001f442:	5e                   	pop    esi
c001f443:	52                   	push   edx
c001f444:	50                   	push   eax
c001f445:	e8 c2 fd ff ff       	call   c001f20c <Vm::fpuChs(unsigned long long)>
c001f44a:	eb 13                	jmp    c001f45f <Vm::x87Handler(regs*)+0xa6>
c001f44c:	83 ec 0c             	sub    esp,0xc
c001f44f:	6a 00                	push   0x0
c001f451:	e8 26 fe ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f456:	5f                   	pop    edi
c001f457:	5d                   	pop    ebp
c001f458:	52                   	push   edx
c001f459:	50                   	push   eax
c001f45a:	e8 a4 fd ff ff       	call   c001f203 <Vm::fpuAbs(unsigned long long)>
c001f45f:	83 c4 0c             	add    esp,0xc
c001f462:	52                   	push   edx
c001f463:	50                   	push   eax
c001f464:	6a 00                	push   0x0
c001f466:	e8 54 fe ff ff       	call   c001f2bf <Vm::fpuSetReg(int, unsigned long long)>
c001f46b:	eb bc                	jmp    c001f429 <Vm::x87Handler(regs*)+0x70>
c001f46d:	e8 d3 fc ff ff       	call   c001f145 <Vm::fpuGetLog210()>
c001f472:	eb ac                	jmp    c001f420 <Vm::x87Handler(regs*)+0x67>
c001f474:	e8 9c fc ff ff       	call   c001f115 <Vm::fpuGetLog2E()>
c001f479:	eb a5                	jmp    c001f420 <Vm::x87Handler(regs*)+0x67>
c001f47b:	e8 8d fc ff ff       	call   c001f10d <Vm::fpuGetPi()>
c001f480:	eb 9e                	jmp    c001f420 <Vm::x87Handler(regs*)+0x67>
c001f482:	e8 d6 fc ff ff       	call   c001f15d <Vm::fpuGetLog102()>
c001f487:	eb 97                	jmp    c001f420 <Vm::x87Handler(regs*)+0x67>
c001f489:	e8 9f fc ff ff       	call   c001f12d <Vm::fpuGetLogE2()>
c001f48e:	eb 90                	jmp    c001f420 <Vm::x87Handler(regs*)+0x67>
c001f490:	8d 50 40             	lea    edx,[eax+0x40]
c001f493:	80 fa 07             	cmp    dl,0x7
c001f496:	77 15                	ja     c001f4ad <Vm::x87Handler(regs*)+0xf4>
c001f498:	83 ec 0c             	sub    esp,0xc
c001f49b:	2d c0 00 00 00       	sub    eax,0xc0
c001f4a0:	50                   	push   eax
c001f4a1:	e8 d6 fd ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f4a6:	59                   	pop    ecx
c001f4a7:	5e                   	pop    esi
c001f4a8:	e9 75 ff ff ff       	jmp    c001f422 <Vm::x87Handler(regs*)+0x69>
c001f4ad:	8d 50 38             	lea    edx,[eax+0x38]
c001f4b0:	80 fa 07             	cmp    dl,0x7
c001f4b3:	77 3c                	ja     c001f4f1 <Vm::x87Handler(regs*)+0x138>
c001f4b5:	83 ec 0c             	sub    esp,0xc
c001f4b8:	2d c8 00 00 00       	sub    eax,0xc8
c001f4bd:	50                   	push   eax
c001f4be:	e8 b9 fd ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f4c3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4ca:	89 c6                	mov    esi,eax
c001f4cc:	89 d7                	mov    edi,edx
c001f4ce:	e8 a9 fd ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f4d3:	83 c4 0c             	add    esp,0xc
c001f4d6:	52                   	push   edx
c001f4d7:	50                   	push   eax
c001f4d8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4dc:	2d c8 00 00 00       	sub    eax,0xc8
c001f4e1:	50                   	push   eax
c001f4e2:	e8 d8 fd ff ff       	call   c001f2bf <Vm::fpuSetReg(int, unsigned long long)>
c001f4e7:	83 c4 0c             	add    esp,0xc
c001f4ea:	57                   	push   edi
c001f4eb:	56                   	push   esi
c001f4ec:	e9 73 ff ff ff       	jmp    c001f464 <Vm::x87Handler(regs*)+0xab>
c001f4f1:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f4f5:	84 d2                	test   dl,dl
c001f4f7:	75 0f                	jne    c001f508 <Vm::x87Handler(regs*)+0x14f>
c001f4f9:	83 ec 0c             	sub    esp,0xc
c001f4fc:	ff 36                	push   DWORD PTR [esi]
c001f4fe:	e8 c8 fa ff ff       	call   c001efcb <Vm::fpu32ToInternal(unsigned int)>
c001f503:	e9 bf 00 00 00       	jmp    c001f5c7 <Vm::x87Handler(regs*)+0x20e>
c001f508:	80 fa 03             	cmp    dl,0x3
c001f50b:	75 13                	jne    c001f520 <Vm::x87Handler(regs*)+0x167>
c001f50d:	e8 55 fe ff ff       	call   c001f367 <Vm::fpuPop()>
c001f512:	55                   	push   ebp
c001f513:	55                   	push   ebp
c001f514:	52                   	push   edx
c001f515:	50                   	push   eax
c001f516:	e8 4c fa ff ff       	call   c001ef67 <Vm::fpuInternalTo32(unsigned long long)>
c001f51b:	e9 88 00 00 00       	jmp    c001f5a8 <Vm::x87Handler(regs*)+0x1ef>
c001f520:	80 fa 05             	cmp    dl,0x5
c001f523:	75 0e                	jne    c001f533 <Vm::x87Handler(regs*)+0x17a>
c001f525:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f528:	66 a3 a2 0f 03 c0    	mov    ds:0xc0030fa2,ax
c001f52e:	e9 df 00 00 00       	jmp    c001f612 <Vm::x87Handler(regs*)+0x259>
c001f533:	31 c0                	xor    eax,eax
c001f535:	80 fa 07             	cmp    dl,0x7
c001f538:	0f 85 dc 08 00 00    	jne    c001fe1a <Vm::x87Handler(regs*)+0xa61>
c001f53e:	66 a1 a2 0f 03 c0    	mov    ax,ds:0xc0030fa2
c001f544:	66 89 06             	mov    WORD PTR [esi],ax
c001f547:	e9 c6 00 00 00       	jmp    c001f612 <Vm::x87Handler(regs*)+0x259>
c001f54c:	80 fa d8             	cmp    dl,0xd8
c001f54f:	0f 84 c9 00 00 00    	je     c001f61e <Vm::x87Handler(regs*)+0x265>
c001f555:	80 fa dc             	cmp    dl,0xdc
c001f558:	0f 84 0d 02 00 00    	je     c001f76b <Vm::x87Handler(regs*)+0x3b2>
c001f55e:	80 fa de             	cmp    dl,0xde
c001f561:	0f 84 cd 02 00 00    	je     c001f834 <Vm::x87Handler(regs*)+0x47b>
c001f567:	80 fa dd             	cmp    dl,0xdd
c001f56a:	0f 84 5f 04 00 00    	je     c001f9cf <Vm::x87Handler(regs*)+0x616>
c001f570:	80 fa da             	cmp    dl,0xda
c001f573:	0f 84 24 05 00 00    	je     c001fa9d <Vm::x87Handler(regs*)+0x6e4>
c001f579:	80 fa df             	cmp    dl,0xdf
c001f57c:	0f 84 68 05 00 00    	je     c001faea <Vm::x87Handler(regs*)+0x731>
c001f582:	31 c0                	xor    eax,eax
c001f584:	80 fa db             	cmp    dl,0xdb
c001f587:	0f 85 8d 08 00 00    	jne    c001fe1a <Vm::x87Handler(regs*)+0xa61>
c001f58d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f591:	80 fa 03             	cmp    dl,0x3
c001f594:	0f 85 70 06 00 00    	jne    c001fc0a <Vm::x87Handler(regs*)+0x851>
c001f59a:	e8 c8 fd ff ff       	call   c001f367 <Vm::fpuPop()>
c001f59f:	55                   	push   ebp
c001f5a0:	55                   	push   ebp
c001f5a1:	52                   	push   edx
c001f5a2:	50                   	push   eax
c001f5a3:	e8 71 fa ff ff       	call   c001f019 <Vm::fpuFloatToLong(unsigned long long)>
c001f5a8:	83 c4 10             	add    esp,0x10
c001f5ab:	89 06                	mov    DWORD PTR [esi],eax
c001f5ad:	eb 63                	jmp    c001f612 <Vm::x87Handler(regs*)+0x259>
c001f5af:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f5b3:	84 d2                	test   dl,dl
c001f5b5:	0f 85 e6 05 00 00    	jne    c001fba1 <Vm::x87Handler(regs*)+0x7e8>
c001f5bb:	57                   	push   edi
c001f5bc:	57                   	push   edi
c001f5bd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f5c0:	ff 36                	push   DWORD PTR [esi]
c001f5c2:	e8 49 fa ff ff       	call   c001f010 <Vm::fpu64ToInternal(unsigned long long)>
c001f5c7:	5e                   	pop    esi
c001f5c8:	5f                   	pop    edi
c001f5c9:	52                   	push   edx
c001f5ca:	50                   	push   eax
c001f5cb:	e8 3a fd ff ff       	call   c001f30a <Vm::fpuPush(unsigned long long)>
c001f5d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f5d4:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f5d7:	e9 51 fe ff ff       	jmp    c001f42d <Vm::x87Handler(regs*)+0x74>
c001f5dc:	80 fa 03             	cmp    dl,0x3
c001f5df:	0f 85 d7 06 00 00    	jne    c001fcbc <Vm::x87Handler(regs*)+0x903>
c001f5e5:	57                   	push   edi
c001f5e6:	57                   	push   edi
c001f5e7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f5ea:	ff 36                	push   DWORD PTR [esi]
c001f5ec:	e8 1f fa ff ff       	call   c001f010 <Vm::fpu64ToInternal(unsigned long long)>
c001f5f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5f8:	89 c6                	mov    esi,eax
c001f5fa:	89 d7                	mov    edi,edx
c001f5fc:	e8 7b fc ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f601:	57                   	push   edi
c001f602:	56                   	push   esi
c001f603:	52                   	push   edx
c001f604:	50                   	push   eax
c001f605:	e8 95 fb ff ff       	call   c001f19f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f60a:	83 c4 20             	add    esp,0x20
c001f60d:	e8 55 fd ff ff       	call   c001f367 <Vm::fpuPop()>
c001f612:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f616:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f619:	e9 12 fe ff ff       	jmp    c001f430 <Vm::x87Handler(regs*)+0x77>
c001f61e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f622:	8d 50 40             	lea    edx,[eax+0x40]
c001f625:	80 fa 07             	cmp    dl,0x7
c001f628:	77 29                	ja     c001f653 <Vm::x87Handler(regs*)+0x29a>
c001f62a:	83 ec 0c             	sub    esp,0xc
c001f62d:	2d c0 00 00 00       	sub    eax,0xc0
c001f632:	50                   	push   eax
c001f633:	e8 44 fc ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f638:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f63f:	89 c6                	mov    esi,eax
c001f641:	89 d7                	mov    edi,edx
c001f643:	e8 34 fc ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f648:	57                   	push   edi
c001f649:	56                   	push   esi
c001f64a:	52                   	push   edx
c001f64b:	50                   	push   eax
c001f64c:	e8 a1 fb ff ff       	call   c001f1f2 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f651:	eb 2f                	jmp    c001f682 <Vm::x87Handler(regs*)+0x2c9>
c001f653:	8d 50 38             	lea    edx,[eax+0x38]
c001f656:	80 fa 07             	cmp    dl,0x7
c001f659:	77 2f                	ja     c001f68a <Vm::x87Handler(regs*)+0x2d1>
c001f65b:	83 ec 0c             	sub    esp,0xc
c001f65e:	2d c8 00 00 00       	sub    eax,0xc8
c001f663:	50                   	push   eax
c001f664:	e8 13 fc ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f669:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f670:	89 c6                	mov    esi,eax
c001f672:	89 d7                	mov    edi,edx
c001f674:	e8 03 fc ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f679:	57                   	push   edi
c001f67a:	56                   	push   esi
c001f67b:	52                   	push   edx
c001f67c:	50                   	push   eax
c001f67d:	e8 a9 fb ff ff       	call   c001f22b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f682:	83 c4 1c             	add    esp,0x1c
c001f685:	e9 d8 fd ff ff       	jmp    c001f462 <Vm::x87Handler(regs*)+0xa9>
c001f68a:	8d 50 30             	lea    edx,[eax+0x30]
c001f68d:	80 fa 07             	cmp    dl,0x7
c001f690:	77 0d                	ja     c001f69f <Vm::x87Handler(regs*)+0x2e6>
c001f692:	83 ec 0c             	sub    esp,0xc
c001f695:	2d d0 00 00 00       	sub    eax,0xd0
c001f69a:	e9 99 03 00 00       	jmp    c001fa38 <Vm::x87Handler(regs*)+0x67f>
c001f69f:	8d 50 28             	lea    edx,[eax+0x28]
c001f6a2:	80 fa 07             	cmp    dl,0x7
c001f6a5:	77 0d                	ja     c001f6b4 <Vm::x87Handler(regs*)+0x2fb>
c001f6a7:	83 ec 0c             	sub    esp,0xc
c001f6aa:	2d d8 00 00 00       	sub    eax,0xd8
c001f6af:	e9 c0 03 00 00       	jmp    c001fa74 <Vm::x87Handler(regs*)+0x6bb>
c001f6b4:	8d 50 20             	lea    edx,[eax+0x20]
c001f6b7:	80 fa 07             	cmp    dl,0x7
c001f6ba:	77 1b                	ja     c001f6d7 <Vm::x87Handler(regs*)+0x31e>
c001f6bc:	83 ec 0c             	sub    esp,0xc
c001f6bf:	2d e0 00 00 00       	sub    eax,0xe0
c001f6c4:	50                   	push   eax
c001f6c5:	e8 b2 fb ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f6ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6d1:	89 c6                	mov    esi,eax
c001f6d3:	89 d7                	mov    edi,edx
c001f6d5:	eb 22                	jmp    c001f6f9 <Vm::x87Handler(regs*)+0x340>
c001f6d7:	8d 50 18             	lea    edx,[eax+0x18]
c001f6da:	80 fa 07             	cmp    dl,0x7
c001f6dd:	77 2d                	ja     c001f70c <Vm::x87Handler(regs*)+0x353>
c001f6df:	83 ec 0c             	sub    esp,0xc
c001f6e2:	6a 00                	push   0x0
c001f6e4:	e8 93 fb ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f6e9:	89 c6                	mov    esi,eax
c001f6eb:	89 d7                	mov    edi,edx
c001f6ed:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6f1:	2d e8 00 00 00       	sub    eax,0xe8
c001f6f6:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6f9:	e8 7e fb ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f6fe:	57                   	push   edi
c001f6ff:	56                   	push   esi
c001f700:	52                   	push   edx
c001f701:	50                   	push   eax
c001f702:	e8 15 fb ff ff       	call   c001f21c <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f707:	e9 76 ff ff ff       	jmp    c001f682 <Vm::x87Handler(regs*)+0x2c9>
c001f70c:	8d 50 10             	lea    edx,[eax+0x10]
c001f70f:	80 fa 07             	cmp    dl,0x7
c001f712:	77 1b                	ja     c001f72f <Vm::x87Handler(regs*)+0x376>
c001f714:	83 ec 0c             	sub    esp,0xc
c001f717:	2d f0 00 00 00       	sub    eax,0xf0
c001f71c:	50                   	push   eax
c001f71d:	e8 5a fb ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f722:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f729:	89 c6                	mov    esi,eax
c001f72b:	89 d7                	mov    edi,edx
c001f72d:	eb 22                	jmp    c001f751 <Vm::x87Handler(regs*)+0x398>
c001f72f:	3c f7                	cmp    al,0xf7
c001f731:	0f 86 d1 03 00 00    	jbe    c001fb08 <Vm::x87Handler(regs*)+0x74f>
c001f737:	83 ec 0c             	sub    esp,0xc
c001f73a:	6a 00                	push   0x0
c001f73c:	e8 3b fb ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f741:	89 c6                	mov    esi,eax
c001f743:	89 d7                	mov    edi,edx
c001f745:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f749:	2d f8 00 00 00       	sub    eax,0xf8
c001f74e:	89 04 24             	mov    DWORD PTR [esp],eax
c001f751:	e8 26 fb ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f756:	57                   	push   edi
c001f757:	56                   	push   esi
c001f758:	52                   	push   edx
c001f759:	50                   	push   eax
c001f75a:	e8 eb fa ff ff       	call   c001f24a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f75f:	83 c4 1c             	add    esp,0x1c
c001f762:	52                   	push   edx
c001f763:	50                   	push   eax
c001f764:	6a 00                	push   0x0
c001f766:	e9 51 02 00 00       	jmp    c001f9bc <Vm::x87Handler(regs*)+0x603>
c001f76b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f76f:	8d 50 40             	lea    edx,[eax+0x40]
c001f772:	80 fa 07             	cmp    dl,0x7
c001f775:	77 37                	ja     c001f7ae <Vm::x87Handler(regs*)+0x3f5>
c001f777:	83 ec 0c             	sub    esp,0xc
c001f77a:	2d c0 00 00 00       	sub    eax,0xc0
c001f77f:	50                   	push   eax
c001f780:	e8 f7 fa ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f785:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f78c:	89 c6                	mov    esi,eax
c001f78e:	89 d7                	mov    edi,edx
c001f790:	e8 e7 fa ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f795:	57                   	push   edi
c001f796:	56                   	push   esi
c001f797:	52                   	push   edx
c001f798:	50                   	push   eax
c001f799:	e8 54 fa ff ff       	call   c001f1f2 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f79e:	83 c4 1c             	add    esp,0x1c
c001f7a1:	52                   	push   edx
c001f7a2:	50                   	push   eax
c001f7a3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7a7:	2d c0 00 00 00       	sub    eax,0xc0
c001f7ac:	eb 3d                	jmp    c001f7eb <Vm::x87Handler(regs*)+0x432>
c001f7ae:	8d 50 38             	lea    edx,[eax+0x38]
c001f7b1:	80 fa 07             	cmp    dl,0x7
c001f7b4:	77 3b                	ja     c001f7f1 <Vm::x87Handler(regs*)+0x438>
c001f7b6:	83 ec 0c             	sub    esp,0xc
c001f7b9:	2d c8 00 00 00       	sub    eax,0xc8
c001f7be:	50                   	push   eax
c001f7bf:	e8 b8 fa ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f7c4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7cb:	89 c6                	mov    esi,eax
c001f7cd:	89 d7                	mov    edi,edx
c001f7cf:	e8 a8 fa ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f7d4:	57                   	push   edi
c001f7d5:	56                   	push   esi
c001f7d6:	52                   	push   edx
c001f7d7:	50                   	push   eax
c001f7d8:	e8 4e fa ff ff       	call   c001f22b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f7dd:	83 c4 1c             	add    esp,0x1c
c001f7e0:	52                   	push   edx
c001f7e1:	50                   	push   eax
c001f7e2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7e6:	2d c8 00 00 00       	sub    eax,0xc8
c001f7eb:	50                   	push   eax
c001f7ec:	e9 75 fc ff ff       	jmp    c001f466 <Vm::x87Handler(regs*)+0xad>
c001f7f1:	83 c0 18             	add    eax,0x18
c001f7f4:	3c 07                	cmp    al,0x7
c001f7f6:	0f 87 3b 04 00 00    	ja     c001fc37 <Vm::x87Handler(regs*)+0x87e>
c001f7fc:	83 ec 0c             	sub    esp,0xc
c001f7ff:	6a 00                	push   0x0
c001f801:	e8 76 fa ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f806:	89 c6                	mov    esi,eax
c001f808:	89 d7                	mov    edi,edx
c001f80a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f80e:	2d e8 00 00 00       	sub    eax,0xe8
c001f813:	89 04 24             	mov    DWORD PTR [esp],eax
c001f816:	e8 61 fa ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f81b:	57                   	push   edi
c001f81c:	56                   	push   esi
c001f81d:	52                   	push   edx
c001f81e:	50                   	push   eax
c001f81f:	e8 f8 f9 ff ff       	call   c001f21c <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f824:	83 c4 1c             	add    esp,0x1c
c001f827:	52                   	push   edx
c001f828:	50                   	push   eax
c001f829:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f82d:	2d e8 00 00 00       	sub    eax,0xe8
c001f832:	eb b7                	jmp    c001f7eb <Vm::x87Handler(regs*)+0x432>
c001f834:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f838:	8d 50 40             	lea    edx,[eax+0x40]
c001f83b:	80 fa 07             	cmp    dl,0x7
c001f83e:	77 3a                	ja     c001f87a <Vm::x87Handler(regs*)+0x4c1>
c001f840:	83 ec 0c             	sub    esp,0xc
c001f843:	2d c0 00 00 00       	sub    eax,0xc0
c001f848:	50                   	push   eax
c001f849:	e8 2e fa ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f84e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f855:	89 c6                	mov    esi,eax
c001f857:	89 d7                	mov    edi,edx
c001f859:	e8 1e fa ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f85e:	57                   	push   edi
c001f85f:	56                   	push   esi
c001f860:	52                   	push   edx
c001f861:	50                   	push   eax
c001f862:	e8 8b f9 ff ff       	call   c001f1f2 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f867:	83 c4 1c             	add    esp,0x1c
c001f86a:	52                   	push   edx
c001f86b:	50                   	push   eax
c001f86c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f870:	2d c0 00 00 00       	sub    eax,0xc0
c001f875:	e9 9e 01 00 00       	jmp    c001fa18 <Vm::x87Handler(regs*)+0x65f>
c001f87a:	8d 50 20             	lea    edx,[eax+0x20]
c001f87d:	80 fa 07             	cmp    dl,0x7
c001f880:	77 3a                	ja     c001f8bc <Vm::x87Handler(regs*)+0x503>
c001f882:	83 ec 0c             	sub    esp,0xc
c001f885:	2d e0 00 00 00       	sub    eax,0xe0
c001f88a:	50                   	push   eax
c001f88b:	e8 ec f9 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f890:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f897:	89 c6                	mov    esi,eax
c001f899:	89 d7                	mov    edi,edx
c001f89b:	e8 dc f9 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f8a0:	57                   	push   edi
c001f8a1:	56                   	push   esi
c001f8a2:	52                   	push   edx
c001f8a3:	50                   	push   eax
c001f8a4:	e8 73 f9 ff ff       	call   c001f21c <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f8a9:	83 c4 1c             	add    esp,0x1c
c001f8ac:	52                   	push   edx
c001f8ad:	50                   	push   eax
c001f8ae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8b2:	2d e0 00 00 00       	sub    eax,0xe0
c001f8b7:	e9 5c 01 00 00       	jmp    c001fa18 <Vm::x87Handler(regs*)+0x65f>
c001f8bc:	8d 50 18             	lea    edx,[eax+0x18]
c001f8bf:	80 fa 07             	cmp    dl,0x7
c001f8c2:	77 3b                	ja     c001f8ff <Vm::x87Handler(regs*)+0x546>
c001f8c4:	83 ec 0c             	sub    esp,0xc
c001f8c7:	6a 00                	push   0x0
c001f8c9:	e8 ae f9 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f8ce:	89 c6                	mov    esi,eax
c001f8d0:	89 d7                	mov    edi,edx
c001f8d2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8d6:	2d e8 00 00 00       	sub    eax,0xe8
c001f8db:	89 04 24             	mov    DWORD PTR [esp],eax
c001f8de:	e8 99 f9 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f8e3:	57                   	push   edi
c001f8e4:	56                   	push   esi
c001f8e5:	52                   	push   edx
c001f8e6:	50                   	push   eax
c001f8e7:	e8 30 f9 ff ff       	call   c001f21c <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f8ec:	83 c4 1c             	add    esp,0x1c
c001f8ef:	52                   	push   edx
c001f8f0:	50                   	push   eax
c001f8f1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8f5:	2d e8 00 00 00       	sub    eax,0xe8
c001f8fa:	e9 19 01 00 00       	jmp    c001fa18 <Vm::x87Handler(regs*)+0x65f>
c001f8ff:	8d 50 38             	lea    edx,[eax+0x38]
c001f902:	80 fa 07             	cmp    dl,0x7
c001f905:	77 37                	ja     c001f93e <Vm::x87Handler(regs*)+0x585>
c001f907:	83 ec 0c             	sub    esp,0xc
c001f90a:	2d c8 00 00 00       	sub    eax,0xc8
c001f90f:	50                   	push   eax
c001f910:	e8 67 f9 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f915:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f91c:	89 c6                	mov    esi,eax
c001f91e:	89 d7                	mov    edi,edx
c001f920:	e8 57 f9 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f925:	57                   	push   edi
c001f926:	56                   	push   esi
c001f927:	52                   	push   edx
c001f928:	50                   	push   eax
c001f929:	e8 fd f8 ff ff       	call   c001f22b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f92e:	83 c4 1c             	add    esp,0x1c
c001f931:	52                   	push   edx
c001f932:	50                   	push   eax
c001f933:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f937:	2d c8 00 00 00       	sub    eax,0xc8
c001f93c:	eb 7d                	jmp    c001f9bb <Vm::x87Handler(regs*)+0x602>
c001f93e:	3c f7                	cmp    al,0xf7
c001f940:	76 38                	jbe    c001f97a <Vm::x87Handler(regs*)+0x5c1>
c001f942:	83 ec 0c             	sub    esp,0xc
c001f945:	6a 00                	push   0x0
c001f947:	e8 30 f9 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f94c:	89 c6                	mov    esi,eax
c001f94e:	89 d7                	mov    edi,edx
c001f950:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f954:	2d f8 00 00 00       	sub    eax,0xf8
c001f959:	89 04 24             	mov    DWORD PTR [esp],eax
c001f95c:	e8 1b f9 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f961:	57                   	push   edi
c001f962:	56                   	push   esi
c001f963:	52                   	push   edx
c001f964:	50                   	push   eax
c001f965:	e8 e0 f8 ff ff       	call   c001f24a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f96a:	83 c4 1c             	add    esp,0x1c
c001f96d:	52                   	push   edx
c001f96e:	50                   	push   eax
c001f96f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f973:	2d f8 00 00 00       	sub    eax,0xf8
c001f978:	eb 41                	jmp    c001f9bb <Vm::x87Handler(regs*)+0x602>
c001f97a:	8d 50 10             	lea    edx,[eax+0x10]
c001f97d:	80 fa 07             	cmp    dl,0x7
c001f980:	0f 87 5a 01 00 00    	ja     c001fae0 <Vm::x87Handler(regs*)+0x727>
c001f986:	83 ec 0c             	sub    esp,0xc
c001f989:	2d f0 00 00 00       	sub    eax,0xf0
c001f98e:	50                   	push   eax
c001f98f:	e8 e8 f8 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f994:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f99b:	89 c6                	mov    esi,eax
c001f99d:	89 d7                	mov    edi,edx
c001f99f:	e8 d8 f8 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f9a4:	57                   	push   edi
c001f9a5:	56                   	push   esi
c001f9a6:	52                   	push   edx
c001f9a7:	50                   	push   eax
c001f9a8:	e8 9d f8 ff ff       	call   c001f24a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f9ad:	83 c4 1c             	add    esp,0x1c
c001f9b0:	52                   	push   edx
c001f9b1:	50                   	push   eax
c001f9b2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9b6:	2d f0 00 00 00       	sub    eax,0xf0
c001f9bb:	50                   	push   eax
c001f9bc:	e8 fe f8 ff ff       	call   c001f2bf <Vm::fpuSetReg(int, unsigned long long)>
c001f9c1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f9c5:	e8 9d f9 ff ff       	call   c001f367 <Vm::fpuPop()>
c001f9ca:	e9 5e fa ff ff       	jmp    c001f42d <Vm::x87Handler(regs*)+0x74>
c001f9cf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9d3:	8d 50 30             	lea    edx,[eax+0x30]
c001f9d6:	80 fa 07             	cmp    dl,0x7
c001f9d9:	77 1d                	ja     c001f9f8 <Vm::x87Handler(regs*)+0x63f>
c001f9db:	83 ec 0c             	sub    esp,0xc
c001f9de:	6a 00                	push   0x0
c001f9e0:	e8 97 f8 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001f9e5:	83 c4 0c             	add    esp,0xc
c001f9e8:	52                   	push   edx
c001f9e9:	50                   	push   eax
c001f9ea:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9ee:	2d d0 00 00 00       	sub    eax,0xd0
c001f9f3:	e9 f3 fd ff ff       	jmp    c001f7eb <Vm::x87Handler(regs*)+0x432>
c001f9f8:	8d 50 28             	lea    edx,[eax+0x28]
c001f9fb:	80 fa 07             	cmp    dl,0x7
c001f9fe:	77 28                	ja     c001fa28 <Vm::x87Handler(regs*)+0x66f>
c001fa00:	83 ec 0c             	sub    esp,0xc
c001fa03:	6a 00                	push   0x0
c001fa05:	e8 72 f8 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001fa0a:	83 c4 0c             	add    esp,0xc
c001fa0d:	52                   	push   edx
c001fa0e:	50                   	push   eax
c001fa0f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa13:	2d d8 00 00 00       	sub    eax,0xd8
c001fa18:	50                   	push   eax
c001fa19:	e8 a1 f8 ff ff       	call   c001f2bf <Vm::fpuSetReg(int, unsigned long long)>
c001fa1e:	e8 44 f9 ff ff       	call   c001f367 <Vm::fpuPop()>
c001fa23:	e9 01 fa ff ff       	jmp    c001f429 <Vm::x87Handler(regs*)+0x70>
c001fa28:	8d 50 20             	lea    edx,[eax+0x20]
c001fa2b:	80 fa 07             	cmp    dl,0x7
c001fa2e:	77 30                	ja     c001fa60 <Vm::x87Handler(regs*)+0x6a7>
c001fa30:	83 ec 0c             	sub    esp,0xc
c001fa33:	2d e0 00 00 00       	sub    eax,0xe0
c001fa38:	50                   	push   eax
c001fa39:	e8 3e f8 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001fa3e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa45:	89 c6                	mov    esi,eax
c001fa47:	89 d7                	mov    edi,edx
c001fa49:	e8 2e f8 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001fa4e:	57                   	push   edi
c001fa4f:	56                   	push   esi
c001fa50:	52                   	push   edx
c001fa51:	50                   	push   eax
c001fa52:	e8 48 f7 ff ff       	call   c001f19f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa57:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa5b:	e9 54 02 00 00       	jmp    c001fcb4 <Vm::x87Handler(regs*)+0x8fb>
c001fa60:	8d 50 18             	lea    edx,[eax+0x18]
c001fa63:	80 fa 07             	cmp    dl,0x7
c001fa66:	0f 87 43 fb ff ff    	ja     c001f5af <Vm::x87Handler(regs*)+0x1f6>
c001fa6c:	83 ec 0c             	sub    esp,0xc
c001fa6f:	2d e8 00 00 00       	sub    eax,0xe8
c001fa74:	50                   	push   eax
c001fa75:	e8 02 f8 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001fa7a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa81:	89 c6                	mov    esi,eax
c001fa83:	89 d7                	mov    edi,edx
c001fa85:	e8 f2 f7 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001fa8a:	57                   	push   edi
c001fa8b:	56                   	push   esi
c001fa8c:	52                   	push   edx
c001fa8d:	50                   	push   eax
c001fa8e:	e8 0c f7 ff ff       	call   c001f19f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa93:	83 c4 20             	add    esp,0x20
c001fa96:	e8 cc f8 ff ff       	call   c001f367 <Vm::fpuPop()>
c001fa9b:	eb 62                	jmp    c001faff <Vm::x87Handler(regs*)+0x746>
c001fa9d:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001faa1:	0f 85 0f 01 00 00    	jne    c001fbb6 <Vm::x87Handler(regs*)+0x7fd>
c001faa7:	83 ec 0c             	sub    esp,0xc
c001faaa:	6a 01                	push   0x1
c001faac:	e8 cb f7 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001fab1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fab8:	89 c6                	mov    esi,eax
c001faba:	89 d7                	mov    edi,edx
c001fabc:	e8 bb f7 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001fac1:	57                   	push   edi
c001fac2:	56                   	push   esi
c001fac3:	52                   	push   edx
c001fac4:	50                   	push   eax
c001fac5:	e8 d5 f6 ff ff       	call   c001f19f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001faca:	83 c4 20             	add    esp,0x20
c001facd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fad1:	e8 91 f8 ff ff       	call   c001f367 <Vm::fpuPop()>
c001fad6:	e8 8c f8 ff ff       	call   c001f367 <Vm::fpuPop()>
c001fadb:	e9 50 f9 ff ff       	jmp    c001f430 <Vm::x87Handler(regs*)+0x77>
c001fae0:	3c d9                	cmp    al,0xd9
c001fae2:	0f 85 b5 02 00 00    	jne    c001fd9d <Vm::x87Handler(regs*)+0x9e4>
c001fae8:	eb bd                	jmp    c001faa7 <Vm::x87Handler(regs*)+0x6ee>
c001faea:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001faee:	0f 85 ea 02 00 00    	jne    c001fdde <Vm::x87Handler(regs*)+0xa25>
c001faf4:	0f b7 05 a0 0f 03 c0 	movzx  eax,WORD PTR ds:0xc0030fa0
c001fafb:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001faff:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb03:	e9 28 f9 ff ff       	jmp    c001f430 <Vm::x87Handler(regs*)+0x77>
c001fb08:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb0c:	84 d2                	test   dl,dl
c001fb0e:	75 0f                	jne    c001fb1f <Vm::x87Handler(regs*)+0x766>
c001fb10:	83 ec 0c             	sub    esp,0xc
c001fb13:	ff 36                	push   DWORD PTR [esi]
c001fb15:	e8 b1 f4 ff ff       	call   c001efcb <Vm::fpu32ToInternal(unsigned int)>
c001fb1a:	e9 2c 01 00 00       	jmp    c001fc4b <Vm::x87Handler(regs*)+0x892>
c001fb1f:	80 fa 01             	cmp    dl,0x1
c001fb22:	75 0f                	jne    c001fb33 <Vm::x87Handler(regs*)+0x77a>
c001fb24:	83 ec 0c             	sub    esp,0xc
c001fb27:	ff 36                	push   DWORD PTR [esi]
c001fb29:	e8 9d f4 ff ff       	call   c001efcb <Vm::fpu32ToInternal(unsigned int)>
c001fb2e:	e9 81 02 00 00       	jmp    c001fdb4 <Vm::x87Handler(regs*)+0x9fb>
c001fb33:	80 fa 04             	cmp    dl,0x4
c001fb36:	75 0f                	jne    c001fb47 <Vm::x87Handler(regs*)+0x78e>
c001fb38:	83 ec 0c             	sub    esp,0xc
c001fb3b:	ff 36                	push   DWORD PTR [esi]
c001fb3d:	e8 89 f4 ff ff       	call   c001efcb <Vm::fpu32ToInternal(unsigned int)>
c001fb42:	e9 86 01 00 00       	jmp    c001fccd <Vm::x87Handler(regs*)+0x914>
c001fb47:	80 fa 05             	cmp    dl,0x5
c001fb4a:	75 1b                	jne    c001fb67 <Vm::x87Handler(regs*)+0x7ae>
c001fb4c:	83 ec 0c             	sub    esp,0xc
c001fb4f:	6a 00                	push   0x0
c001fb51:	e8 26 f7 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001fb56:	89 c7                	mov    edi,eax
c001fb58:	89 d5                	mov    ebp,edx
c001fb5a:	58                   	pop    eax
c001fb5b:	ff 36                	push   DWORD PTR [esi]
c001fb5d:	e8 69 f4 ff ff       	call   c001efcb <Vm::fpu32ToInternal(unsigned int)>
c001fb62:	e9 a3 01 00 00       	jmp    c001fd0a <Vm::x87Handler(regs*)+0x951>
c001fb67:	80 fa 06             	cmp    dl,0x6
c001fb6a:	75 0f                	jne    c001fb7b <Vm::x87Handler(regs*)+0x7c2>
c001fb6c:	83 ec 0c             	sub    esp,0xc
c001fb6f:	ff 36                	push   DWORD PTR [esi]
c001fb71:	e8 55 f4 ff ff       	call   c001efcb <Vm::fpu32ToInternal(unsigned int)>
c001fb76:	e9 ae 01 00 00       	jmp    c001fd29 <Vm::x87Handler(regs*)+0x970>
c001fb7b:	31 c0                	xor    eax,eax
c001fb7d:	80 fa 07             	cmp    dl,0x7
c001fb80:	0f 85 94 02 00 00    	jne    c001fe1a <Vm::x87Handler(regs*)+0xa61>
c001fb86:	83 ec 0c             	sub    esp,0xc
c001fb89:	6a 00                	push   0x0
c001fb8b:	e8 ec f6 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001fb90:	89 c7                	mov    edi,eax
c001fb92:	89 d5                	mov    ebp,edx
c001fb94:	58                   	pop    eax
c001fb95:	ff 36                	push   DWORD PTR [esi]
c001fb97:	e8 2f f4 ff ff       	call   c001efcb <Vm::fpu32ToInternal(unsigned int)>
c001fb9c:	e9 cb 01 00 00       	jmp    c001fd6c <Vm::x87Handler(regs*)+0x9b3>
c001fba1:	80 fa 03             	cmp    dl,0x3
c001fba4:	0f 85 d3 01 00 00    	jne    c001fd7d <Vm::x87Handler(regs*)+0x9c4>
c001fbaa:	e8 b8 f7 ff ff       	call   c001f367 <Vm::fpuPop()>
c001fbaf:	51                   	push   ecx
c001fbb0:	51                   	push   ecx
c001fbb1:	e9 de 01 00 00       	jmp    c001fd94 <Vm::x87Handler(regs*)+0x9db>
c001fbb6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbba:	80 fa 01             	cmp    dl,0x1
c001fbbd:	75 09                	jne    c001fbc8 <Vm::x87Handler(regs*)+0x80f>
c001fbbf:	57                   	push   edi
c001fbc0:	57                   	push   edi
c001fbc1:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbc3:	e9 e3 01 00 00       	jmp    c001fdab <Vm::x87Handler(regs*)+0x9f2>
c001fbc8:	80 fa 04             	cmp    dl,0x4
c001fbcb:	75 12                	jne    c001fbdf <Vm::x87Handler(regs*)+0x826>
c001fbcd:	31 d2                	xor    edx,edx
c001fbcf:	51                   	push   ecx
c001fbd0:	51                   	push   ecx
c001fbd1:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbd3:	52                   	push   edx
c001fbd4:	50                   	push   eax
c001fbd5:	e8 d0 f4 ff ff       	call   c001f0aa <Vm::fpuLongToFloat(long long)>
c001fbda:	e9 ee 00 00 00       	jmp    c001fccd <Vm::x87Handler(regs*)+0x914>
c001fbdf:	31 c0                	xor    eax,eax
c001fbe1:	80 fa 07             	cmp    dl,0x7
c001fbe4:	0f 85 30 02 00 00    	jne    c001fe1a <Vm::x87Handler(regs*)+0xa61>
c001fbea:	83 ec 0c             	sub    esp,0xc
c001fbed:	6a 00                	push   0x0
c001fbef:	e8 88 f6 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001fbf4:	89 c7                	mov    edi,eax
c001fbf6:	89 d5                	mov    ebp,edx
c001fbf8:	58                   	pop    eax
c001fbf9:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbfb:	5a                   	pop    edx
c001fbfc:	31 d2                	xor    edx,edx
c001fbfe:	52                   	push   edx
c001fbff:	50                   	push   eax
c001fc00:	e8 a5 f4 ff ff       	call   c001f0aa <Vm::fpuLongToFloat(long long)>
c001fc05:	e9 62 01 00 00       	jmp    c001fd6c <Vm::x87Handler(regs*)+0x9b3>
c001fc0a:	84 d2                	test   dl,dl
c001fc0c:	75 0d                	jne    c001fc1b <Vm::x87Handler(regs*)+0x862>
c001fc0e:	31 d2                	xor    edx,edx
c001fc10:	55                   	push   ebp
c001fc11:	55                   	push   ebp
c001fc12:	8b 06                	mov    eax,DWORD PTR [esi]
c001fc14:	52                   	push   edx
c001fc15:	50                   	push   eax
c001fc16:	e9 d3 01 00 00       	jmp    c001fdee <Vm::x87Handler(regs*)+0xa35>
c001fc1b:	31 c0                	xor    eax,eax
c001fc1d:	80 fa 02             	cmp    dl,0x2
c001fc20:	0f 85 f4 01 00 00    	jne    c001fe1a <Vm::x87Handler(regs*)+0xa61>
c001fc26:	83 ec 0c             	sub    esp,0xc
c001fc29:	6a 00                	push   0x0
c001fc2b:	e8 4c f6 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001fc30:	59                   	pop    ecx
c001fc31:	5f                   	pop    edi
c001fc32:	e9 6a f9 ff ff       	jmp    c001f5a1 <Vm::x87Handler(regs*)+0x1e8>
c001fc37:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc3b:	84 d2                	test   dl,dl
c001fc3d:	75 2a                	jne    c001fc69 <Vm::x87Handler(regs*)+0x8b0>
c001fc3f:	50                   	push   eax
c001fc40:	50                   	push   eax
c001fc41:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc44:	ff 36                	push   DWORD PTR [esi]
c001fc46:	e8 c5 f3 ff ff       	call   c001f010 <Vm::fpu64ToInternal(unsigned long long)>
c001fc4b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc52:	89 c6                	mov    esi,eax
c001fc54:	89 d7                	mov    edi,edx
c001fc56:	e8 21 f6 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001fc5b:	57                   	push   edi
c001fc5c:	56                   	push   esi
c001fc5d:	52                   	push   edx
c001fc5e:	50                   	push   eax
c001fc5f:	e8 8e f5 ff ff       	call   c001f1f2 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fc64:	e9 64 01 00 00       	jmp    c001fdcd <Vm::x87Handler(regs*)+0xa14>
c001fc69:	80 fa 01             	cmp    dl,0x1
c001fc6c:	75 11                	jne    c001fc7f <Vm::x87Handler(regs*)+0x8c6>
c001fc6e:	50                   	push   eax
c001fc6f:	50                   	push   eax
c001fc70:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc73:	ff 36                	push   DWORD PTR [esi]
c001fc75:	e8 96 f3 ff ff       	call   c001f010 <Vm::fpu64ToInternal(unsigned long long)>
c001fc7a:	e9 35 01 00 00       	jmp    c001fdb4 <Vm::x87Handler(regs*)+0x9fb>
c001fc7f:	80 fa 02             	cmp    dl,0x2
c001fc82:	0f 85 54 f9 ff ff    	jne    c001f5dc <Vm::x87Handler(regs*)+0x223>
c001fc88:	55                   	push   ebp
c001fc89:	55                   	push   ebp
c001fc8a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc8d:	ff 36                	push   DWORD PTR [esi]
c001fc8f:	e8 7c f3 ff ff       	call   c001f010 <Vm::fpu64ToInternal(unsigned long long)>
c001fc94:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc9b:	89 c6                	mov    esi,eax
c001fc9d:	89 d7                	mov    edi,edx
c001fc9f:	e8 d8 f5 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001fca4:	57                   	push   edi
c001fca5:	56                   	push   esi
c001fca6:	52                   	push   edx
c001fca7:	50                   	push   eax
c001fca8:	e8 f2 f4 ff ff       	call   c001f19f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fcad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fcb1:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fcb4:	83 c4 20             	add    esp,0x20
c001fcb7:	e9 74 f7 ff ff       	jmp    c001f430 <Vm::x87Handler(regs*)+0x77>
c001fcbc:	80 fa 04             	cmp    dl,0x4
c001fcbf:	75 2a                	jne    c001fceb <Vm::x87Handler(regs*)+0x932>
c001fcc1:	51                   	push   ecx
c001fcc2:	51                   	push   ecx
c001fcc3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcc6:	ff 36                	push   DWORD PTR [esi]
c001fcc8:	e8 43 f3 ff ff       	call   c001f010 <Vm::fpu64ToInternal(unsigned long long)>
c001fccd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcd4:	89 c6                	mov    esi,eax
c001fcd6:	89 d7                	mov    edi,edx
c001fcd8:	e8 9f f5 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001fcdd:	57                   	push   edi
c001fcde:	56                   	push   esi
c001fcdf:	52                   	push   edx
c001fce0:	50                   	push   eax
c001fce1:	e8 36 f5 ff ff       	call   c001f21c <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fce6:	e9 e2 00 00 00       	jmp    c001fdcd <Vm::x87Handler(regs*)+0xa14>
c001fceb:	80 fa 05             	cmp    dl,0x5
c001fcee:	75 28                	jne    c001fd18 <Vm::x87Handler(regs*)+0x95f>
c001fcf0:	83 ec 0c             	sub    esp,0xc
c001fcf3:	6a 00                	push   0x0
c001fcf5:	e8 82 f5 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001fcfa:	89 c7                	mov    edi,eax
c001fcfc:	89 d5                	mov    ebp,edx
c001fcfe:	58                   	pop    eax
c001fcff:	5a                   	pop    edx
c001fd00:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd03:	ff 36                	push   DWORD PTR [esi]
c001fd05:	e8 06 f3 ff ff       	call   c001f010 <Vm::fpu64ToInternal(unsigned long long)>
c001fd0a:	83 c4 10             	add    esp,0x10
c001fd0d:	55                   	push   ebp
c001fd0e:	57                   	push   edi
c001fd0f:	52                   	push   edx
c001fd10:	50                   	push   eax
c001fd11:	e8 06 f5 ff ff       	call   c001f21c <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fd16:	eb 60                	jmp    c001fd78 <Vm::x87Handler(regs*)+0x9bf>
c001fd18:	80 fa 06             	cmp    dl,0x6
c001fd1b:	75 2a                	jne    c001fd47 <Vm::x87Handler(regs*)+0x98e>
c001fd1d:	51                   	push   ecx
c001fd1e:	51                   	push   ecx
c001fd1f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd22:	ff 36                	push   DWORD PTR [esi]
c001fd24:	e8 e7 f2 ff ff       	call   c001f010 <Vm::fpu64ToInternal(unsigned long long)>
c001fd29:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd30:	89 c6                	mov    esi,eax
c001fd32:	89 d7                	mov    edi,edx
c001fd34:	e8 43 f5 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001fd39:	57                   	push   edi
c001fd3a:	56                   	push   esi
c001fd3b:	52                   	push   edx
c001fd3c:	50                   	push   eax
c001fd3d:	e8 08 f5 ff ff       	call   c001f24a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd42:	e9 86 00 00 00       	jmp    c001fdcd <Vm::x87Handler(regs*)+0xa14>
c001fd47:	31 c0                	xor    eax,eax
c001fd49:	80 fa 07             	cmp    dl,0x7
c001fd4c:	0f 85 c8 00 00 00    	jne    c001fe1a <Vm::x87Handler(regs*)+0xa61>
c001fd52:	83 ec 0c             	sub    esp,0xc
c001fd55:	6a 00                	push   0x0
c001fd57:	e8 20 f5 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001fd5c:	89 c7                	mov    edi,eax
c001fd5e:	89 d5                	mov    ebp,edx
c001fd60:	58                   	pop    eax
c001fd61:	5a                   	pop    edx
c001fd62:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd65:	ff 36                	push   DWORD PTR [esi]
c001fd67:	e8 a4 f2 ff ff       	call   c001f010 <Vm::fpu64ToInternal(unsigned long long)>
c001fd6c:	83 c4 10             	add    esp,0x10
c001fd6f:	55                   	push   ebp
c001fd70:	57                   	push   edi
c001fd71:	52                   	push   edx
c001fd72:	50                   	push   eax
c001fd73:	e8 d2 f4 ff ff       	call   c001f24a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd78:	83 c4 0c             	add    esp,0xc
c001fd7b:	eb 53                	jmp    c001fdd0 <Vm::x87Handler(regs*)+0xa17>
c001fd7d:	31 c0                	xor    eax,eax
c001fd7f:	80 fa 02             	cmp    dl,0x2
c001fd82:	0f 85 92 00 00 00    	jne    c001fe1a <Vm::x87Handler(regs*)+0xa61>
c001fd88:	83 ec 0c             	sub    esp,0xc
c001fd8b:	6a 00                	push   0x0
c001fd8d:	e8 ea f4 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001fd92:	59                   	pop    ecx
c001fd93:	5f                   	pop    edi
c001fd94:	52                   	push   edx
c001fd95:	50                   	push   eax
c001fd96:	e8 27 f2 ff ff       	call   c001efc2 <Vm::fpuInternalTo64(unsigned long long)>
c001fd9b:	eb 70                	jmp    c001fe0d <Vm::x87Handler(regs*)+0xa54>
c001fd9d:	31 c0                	xor    eax,eax
c001fd9f:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fda4:	75 74                	jne    c001fe1a <Vm::x87Handler(regs*)+0xa61>
c001fda6:	50                   	push   eax
c001fda7:	50                   	push   eax
c001fda8:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fdab:	31 d2                	xor    edx,edx
c001fdad:	52                   	push   edx
c001fdae:	50                   	push   eax
c001fdaf:	e8 f6 f2 ff ff       	call   c001f0aa <Vm::fpuLongToFloat(long long)>
c001fdb4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdbb:	89 c6                	mov    esi,eax
c001fdbd:	89 d7                	mov    edi,edx
c001fdbf:	e8 b8 f4 ff ff       	call   c001f27c <Vm::fpuGetReg(int)>
c001fdc4:	57                   	push   edi
c001fdc5:	56                   	push   esi
c001fdc6:	52                   	push   edx
c001fdc7:	50                   	push   eax
c001fdc8:	e8 5e f4 ff ff       	call   c001f22b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fdcd:	83 c4 1c             	add    esp,0x1c
c001fdd0:	52                   	push   edx
c001fdd1:	50                   	push   eax
c001fdd2:	6a 00                	push   0x0
c001fdd4:	e8 e6 f4 ff ff       	call   c001f2bf <Vm::fpuSetReg(int, unsigned long long)>
c001fdd9:	e9 f2 f7 ff ff       	jmp    c001f5d0 <Vm::x87Handler(regs*)+0x217>
c001fdde:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fde2:	80 fa 05             	cmp    dl,0x5
c001fde5:	75 11                	jne    c001fdf8 <Vm::x87Handler(regs*)+0xa3f>
c001fde7:	55                   	push   ebp
c001fde8:	55                   	push   ebp
c001fde9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fdec:	ff 36                	push   DWORD PTR [esi]
c001fdee:	e8 81 f2 ff ff       	call   c001f074 <Vm::fpuULongToFloat(unsigned long long)>
c001fdf3:	e9 cf f7 ff ff       	jmp    c001f5c7 <Vm::x87Handler(regs*)+0x20e>
c001fdf8:	31 c0                	xor    eax,eax
c001fdfa:	80 fa 07             	cmp    dl,0x7
c001fdfd:	75 1b                	jne    c001fe1a <Vm::x87Handler(regs*)+0xa61>
c001fdff:	e8 63 f5 ff ff       	call   c001f367 <Vm::fpuPop()>
c001fe04:	51                   	push   ecx
c001fe05:	51                   	push   ecx
c001fe06:	52                   	push   edx
c001fe07:	50                   	push   eax
c001fe08:	e8 0c f2 ff ff       	call   c001f019 <Vm::fpuFloatToLong(unsigned long long)>
c001fe0d:	83 c4 10             	add    esp,0x10
c001fe10:	89 06                	mov    DWORD PTR [esi],eax
c001fe12:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fe15:	e9 f8 f7 ff ff       	jmp    c001f612 <Vm::x87Handler(regs*)+0x259>
c001fe1a:	83 c4 1c             	add    esp,0x1c
c001fe1d:	5b                   	pop    ebx
c001fe1e:	5e                   	pop    esi
c001fe1f:	5f                   	pop    edi
c001fe20:	5d                   	pop    ebp
c001fe21:	c3                   	ret    

c001fe22 <__static_initialization_and_destruction_0(int, int)>:
c001fe22:	83 ec 0c             	sub    esp,0xc
c001fe25:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fe2a:	75 1a                	jne    c001fe46 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fe2c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fe34:	75 10                	jne    c001fe46 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fe36:	83 ec 0c             	sub    esp,0xc
c001fe39:	68 a0 0f 03 c0       	push   0xc0030fa0
c001fe3e:	e8 07 8d 00 00       	call   c0028b4a <Vm::_FPUState::_FPUState()>
c001fe43:	83 c4 10             	add    esp,0x10
c001fe46:	90                   	nop
c001fe47:	83 c4 0c             	add    esp,0xc
c001fe4a:	c3                   	ret    

c001fe4b <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fe4b:	83 ec 0c             	sub    esp,0xc
c001fe4e:	83 ec 08             	sub    esp,0x8
c001fe51:	68 ff ff 00 00       	push   0xffff
c001fe56:	6a 01                	push   0x1
c001fe58:	e8 c5 ff ff ff       	call   c001fe22 <__static_initialization_and_destruction_0(int, int)>
c001fe5d:	83 c4 10             	add    esp,0x10
c001fe60:	83 c4 0c             	add    esp,0xc
c001fe63:	c3                   	ret    

c001fe64 <FAT::getName()>:
c001fe64:	b8 90 be 02 c0       	mov    eax,0xc002be90
c001fe69:	c3                   	ret    

c001fe6a <FAT::tell(void*, unsigned long long*)>:
c001fe6a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe6f:	75 06                	jne    c001fe77 <FAT::tell(void*, unsigned long long*)+0xd>
c001fe71:	b8 04 00 00 00       	mov    eax,0x4
c001fe76:	c3                   	ret    
c001fe77:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe7c:	75 06                	jne    c001fe84 <FAT::tell(void*, unsigned long long*)+0x1a>
c001fe7e:	b8 04 00 00 00       	mov    eax,0x4
c001fe83:	c3                   	ret    
c001fe84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe88:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fe8b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fe8e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe92:	89 01                	mov    DWORD PTR [ecx],eax
c001fe94:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe97:	b8 00 00 00 00       	mov    eax,0x0
c001fe9c:	c3                   	ret    
c001fe9d:	90                   	nop

c001fe9e <FAT::stat(void*, unsigned long long*)>:
c001fe9e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fea3:	75 06                	jne    c001feab <FAT::stat(void*, unsigned long long*)+0xd>
c001fea5:	b8 04 00 00 00       	mov    eax,0x4
c001feaa:	c3                   	ret    
c001feab:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001feb0:	75 06                	jne    c001feb8 <FAT::stat(void*, unsigned long long*)+0x1a>
c001feb2:	b8 04 00 00 00       	mov    eax,0x4
c001feb7:	c3                   	ret    
c001feb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001febc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001febf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fec2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fec6:	89 01                	mov    DWORD PTR [ecx],eax
c001fec8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fecb:	b8 00 00 00 00       	mov    eax,0x0
c001fed0:	c3                   	ret    
c001fed1:	90                   	nop

c001fed2 <FAT::~FAT()>:
c001fed2:	83 ec 0c             	sub    esp,0xc
c001fed5:	ba dc be 02 c0       	mov    edx,0xc002bedc
c001feda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fede:	89 10                	mov    DWORD PTR [eax],edx
c001fee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee4:	83 ec 0c             	sub    esp,0xc
c001fee7:	50                   	push   eax
c001fee8:	e8 45 2b ff ff       	call   c0012a32 <Filesystem::~Filesystem()>
c001feed:	83 c4 10             	add    esp,0x10
c001fef0:	90                   	nop
c001fef1:	83 c4 0c             	add    esp,0xc
c001fef4:	c3                   	ret    
c001fef5:	90                   	nop

c001fef6 <FAT::~FAT()>:
c001fef6:	83 ec 0c             	sub    esp,0xc
c001fef9:	83 ec 0c             	sub    esp,0xc
c001fefc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff00:	e8 cd ff ff ff       	call   c001fed2 <FAT::~FAT()>
c001ff05:	83 c4 10             	add    esp,0x10
c001ff08:	83 ec 08             	sub    esp,0x8
c001ff0b:	6a 08                	push   0x8
c001ff0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff11:	e8 15 27 ff ff       	call   c001262b <operator delete(void*, unsigned long)>
c001ff16:	83 c4 10             	add    esp,0x10
c001ff19:	83 c4 0c             	add    esp,0xc
c001ff1c:	c3                   	ret    
c001ff1d:	90                   	nop

c001ff1e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001ff1e:	83 ec 1c             	sub    esp,0x1c
c001ff21:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001ff28:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001ff2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff31:	8b 04 85 20 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefe0]
c001ff38:	83 f8 ff             	cmp    eax,0xffffffff
c001ff3b:	75 34                	jne    c001ff71 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001ff3d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ff41:	88 c2                	mov    dl,al
c001ff43:	a1 00 10 03 c0       	mov    eax,ds:0xc0031000
c001ff48:	01 d0                	add    eax,edx
c001ff4a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ff4e:	8b 15 00 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031000
c001ff54:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff58:	89 14 85 20 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefe0],edx
c001ff5f:	a1 00 10 03 c0       	mov    eax,ds:0xc0031000
c001ff64:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ff68:	89 14 85 a0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef60],edx
c001ff6f:	eb 17                	jmp    c001ff88 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001ff71:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ff75:	88 c2                	mov    dl,al
c001ff77:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff7b:	8b 04 85 20 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefe0]
c001ff82:	01 d0                	add    eax,edx
c001ff84:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ff88:	83 ec 04             	sub    esp,0x4
c001ff8b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff93:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ff97:	50                   	push   eax
c001ff98:	e8 61 6d fe ff       	call   c0006cfe <f_getlabel>
c001ff9d:	83 c4 10             	add    esp,0x10
c001ffa0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ffa4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ffa9:	75 07                	jne    c001ffb2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001ffab:	b8 00 00 00 00       	mov    eax,0x0
c001ffb0:	eb 05                	jmp    c001ffb7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001ffb2:	b8 01 00 00 00       	mov    eax,0x1
c001ffb7:	83 c4 1c             	add    esp,0x1c
c001ffba:	c3                   	ret    
c001ffbb:	90                   	nop

c001ffbc <FAT::setlabel(LogicalDisk*, int, char*)>:
c001ffbc:	57                   	push   edi
c001ffbd:	83 ec 58             	sub    esp,0x58
c001ffc0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001ffc8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ffcc:	b9 0f 00 00 00       	mov    ecx,0xf
c001ffd1:	b8 00 00 00 00       	mov    eax,0x0
c001ffd6:	fc                   	cld    
c001ffd7:	89 d7                	mov    edi,edx
c001ffd9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ffdb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ffdf:	8b 04 85 20 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefe0]
c001ffe6:	83 f8 ff             	cmp    eax,0xffffffff
c001ffe9:	75 34                	jne    c002001f <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001ffeb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ffef:	88 c2                	mov    dl,al
c001fff1:	a1 00 10 03 c0       	mov    eax,ds:0xc0031000
c001fff6:	01 d0                	add    eax,edx
c001fff8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fffc:	8b 15 00 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031000
c0020002:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020006:	89 14 85 20 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefe0],edx
c002000d:	a1 00 10 03 c0       	mov    eax,ds:0xc0031000
c0020012:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020016:	89 14 85 a0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef60],edx
c002001d:	eb 17                	jmp    c0020036 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c002001f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020023:	88 c2                	mov    dl,al
c0020025:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020029:	8b 04 85 20 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefe0]
c0020030:	01 d0                	add    eax,edx
c0020032:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020036:	83 ec 08             	sub    esp,0x8
c0020039:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002003d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020041:	50                   	push   eax
c0020042:	e8 05 09 fe ff       	call   c000094c <strcat>
c0020047:	83 c4 10             	add    esp,0x10
c002004a:	83 ec 0c             	sub    esp,0xc
c002004d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020051:	50                   	push   eax
c0020052:	e8 95 6e fe ff       	call   c0006eec <f_setlabel>
c0020057:	83 c4 10             	add    esp,0x10
c002005a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002005e:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020063:	75 07                	jne    c002006c <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020065:	b8 00 00 00 00       	mov    eax,0x0
c002006a:	eb 05                	jmp    c0020071 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002006c:	b8 01 00 00 00       	mov    eax,0x1
c0020071:	83 c4 58             	add    esp,0x58
c0020074:	5f                   	pop    edi
c0020075:	c3                   	ret    

c0020076 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020076:	83 ec 2c             	sub    esp,0x2c
c0020079:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020081:	83 ec 08             	sub    esp,0x8
c0020084:	68 b4 be 02 c0       	push   0xc002beb4
c0020089:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002008d:	e8 06 08 fe ff       	call   c0000898 <strcmp>
c0020092:	83 c4 10             	add    esp,0x10
c0020095:	85 c0                	test   eax,eax
c0020097:	0f 94 c0             	sete   al
c002009a:	84 c0                	test   al,al
c002009c:	74 0d                	je     c00200ab <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002009e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00200a6:	e9 a6 00 00 00       	jmp    c0020151 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200ab:	83 ec 08             	sub    esp,0x8
c00200ae:	68 a6 be 02 c0       	push   0xc002bea6
c00200b3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200b7:	e8 dc 07 fe ff       	call   c0000898 <strcmp>
c00200bc:	83 c4 10             	add    esp,0x10
c00200bf:	85 c0                	test   eax,eax
c00200c1:	0f 94 c0             	sete   al
c00200c4:	84 c0                	test   al,al
c00200c6:	74 0a                	je     c00200d2 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00200c8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00200d0:	eb 7f                	jmp    c0020151 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200d2:	83 ec 08             	sub    esp,0x8
c00200d5:	68 ac be 02 c0       	push   0xc002beac
c00200da:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200de:	e8 b5 07 fe ff       	call   c0000898 <strcmp>
c00200e3:	83 c4 10             	add    esp,0x10
c00200e6:	85 c0                	test   eax,eax
c00200e8:	0f 94 c0             	sete   al
c00200eb:	84 c0                	test   al,al
c00200ed:	74 0a                	je     c00200f9 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00200ef:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00200f7:	eb 58                	jmp    c0020151 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200f9:	83 ec 08             	sub    esp,0x8
c00200fc:	68 ac 92 02 c0       	push   0xc00292ac
c0020101:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020105:	e8 8e 07 fe ff       	call   c0000898 <strcmp>
c002010a:	83 c4 10             	add    esp,0x10
c002010d:	85 c0                	test   eax,eax
c002010f:	0f 94 c0             	sete   al
c0020112:	84 c0                	test   al,al
c0020114:	74 0a                	je     c0020120 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020116:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c002011e:	eb 31                	jmp    c0020151 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020120:	83 ec 08             	sub    esp,0x8
c0020123:	68 b2 be 02 c0       	push   0xc002beb2
c0020128:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002012c:	e8 67 07 fe ff       	call   c0000898 <strcmp>
c0020131:	83 c4 10             	add    esp,0x10
c0020134:	85 c0                	test   eax,eax
c0020136:	0f 94 c0             	sete   al
c0020139:	84 c0                	test   al,al
c002013b:	74 0a                	je     c0020147 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002013d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020145:	eb 0a                	jmp    c0020151 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020147:	b8 08 00 00 00       	mov    eax,0x8
c002014c:	e9 df 00 00 00       	jmp    c0020230 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020151:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020158:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002015d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020161:	8b 04 85 20 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefe0]
c0020168:	83 f8 ff             	cmp    eax,0xffffffff
c002016b:	75 34                	jne    c00201a1 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002016d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020171:	88 c2                	mov    dl,al
c0020173:	a1 00 10 03 c0       	mov    eax,ds:0xc0031000
c0020178:	01 d0                	add    eax,edx
c002017a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002017e:	8b 15 00 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031000
c0020184:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020188:	89 14 85 20 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefe0],edx
c002018f:	a1 00 10 03 c0       	mov    eax,ds:0xc0031000
c0020194:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020198:	89 14 85 a0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef60],edx
c002019f:	eb 17                	jmp    c00201b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00201a1:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00201a5:	88 c2                	mov    dl,al
c00201a7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00201ab:	8b 04 85 20 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefe0]
c00201b2:	01 d0                	add    eax,edx
c00201b4:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00201b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00201bc:	88 04 24             	mov    BYTE PTR [esp],al
c00201bf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00201c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00201c7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00201cf:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00201d4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00201dc:	83 ec 0c             	sub    esp,0xc
c00201df:	68 00 20 00 00       	push   0x2000
c00201e4:	e8 b0 f3 fe ff       	call   c000f599 <malloc>
c00201e9:	83 c4 10             	add    esp,0x10
c00201ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00201f0:	68 00 20 00 00       	push   0x2000
c00201f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201f9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00201fd:	50                   	push   eax
c00201fe:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020202:	50                   	push   eax
c0020203:	e8 2f 71 fe ff       	call   c0007337 <f_mkfs>
c0020208:	83 c4 10             	add    esp,0x10
c002020b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002020f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020214:	75 07                	jne    c002021d <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020216:	b8 00 00 00 00       	mov    eax,0x0
c002021b:	eb 13                	jmp    c0020230 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c002021d:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020222:	75 07                	jne    c002022b <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c0020224:	b8 09 00 00 00       	mov    eax,0x9
c0020229:	eb 05                	jmp    c0020230 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c002022b:	b8 01 00 00 00       	mov    eax,0x1
c0020230:	83 c4 2c             	add    esp,0x2c
c0020233:	c3                   	ret    

c0020234 <FAT::tryMount(LogicalDisk*, int)>:
c0020234:	81 ec 6c 03 00 00    	sub    esp,0x36c
c002023a:	a1 00 10 03 c0       	mov    eax,ds:0xc0031000
c002023f:	83 f8 14             	cmp    eax,0x14
c0020242:	75 17                	jne    c002025b <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020244:	83 ec 0c             	sub    esp,0xc
c0020247:	68 b8 be 02 c0       	push   0xc002beb8
c002024c:	e8 1e 9c ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c0020251:	83 c4 10             	add    esp,0x10
c0020254:	b0 00                	mov    al,0x0
c0020256:	e9 d7 01 00 00       	jmp    c0020432 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002025b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020262:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020268:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002026e:	3d 00 02 00 00       	cmp    eax,0x200
c0020273:	74 07                	je     c002027c <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020275:	b0 00                	mov    al,0x0
c0020277:	e9 b6 01 00 00       	jmp    c0020432 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002027c:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020284:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002028b:	8b 04 85 20 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefe0]
c0020292:	83 f8 ff             	cmp    eax,0xffffffff
c0020295:	74 07                	je     c002029e <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020297:	b0 01                	mov    al,0x1
c0020299:	e9 94 01 00 00       	jmp    c0020432 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002029e:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00202a8:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00202b0:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00202b7:	88 c2                	mov    dl,al
c00202b9:	a1 00 10 03 c0       	mov    eax,ds:0xc0031000
c00202be:	01 d0                	add    eax,edx
c00202c0:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00202c7:	8b 15 00 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031000
c00202cd:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00202d4:	89 14 85 20 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefe0],edx
c00202db:	a1 00 10 03 c0       	mov    eax,ds:0xc0031000
c00202e0:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00202e7:	89 14 85 a0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef60],edx
c00202ee:	83 ec 0c             	sub    esp,0xc
c00202f1:	68 54 02 00 00       	push   0x254
c00202f6:	e8 9e f2 fe ff       	call   c000f599 <malloc>
c00202fb:	83 c4 10             	add    esp,0x10
c00202fe:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020305:	83 ec 04             	sub    esp,0x4
c0020308:	6a 00                	push   0x0
c002030a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020311:	50                   	push   eax
c0020312:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020319:	e8 d7 4b fe ff       	call   c0004ef5 <f_mount>
c002031e:	83 c4 10             	add    esp,0x10
c0020321:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020328:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020330:	74 19                	je     c002034b <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020332:	83 ec 0c             	sub    esp,0xc
c0020335:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002033c:	e8 78 f2 fe ff       	call   c000f5b9 <rfree>
c0020341:	83 c4 10             	add    esp,0x10
c0020344:	b0 00                	mov    al,0x0
c0020346:	e9 e7 00 00 00       	jmp    c0020432 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002034b:	83 ec 04             	sub    esp,0x4
c002034e:	68 00 01 00 00       	push   0x100
c0020353:	6a 00                	push   0x0
c0020355:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002035c:	50                   	push   eax
c002035d:	e8 ee 03 fe ff       	call   c0000750 <memset>
c0020362:	83 c4 10             	add    esp,0x10
c0020365:	83 ec 08             	sub    esp,0x8
c0020368:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002036f:	50                   	push   eax
c0020370:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020377:	50                   	push   eax
c0020378:	e8 cf 05 fe ff       	call   c000094c <strcat>
c002037d:	83 c4 10             	add    esp,0x10
c0020380:	83 ec 08             	sub    esp,0x8
c0020383:	68 c6 be 02 c0       	push   0xc002bec6
c0020388:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002038f:	50                   	push   eax
c0020390:	e8 b7 05 fe ff       	call   c000094c <strcat>
c0020395:	83 c4 10             	add    esp,0x10
c0020398:	83 ec 04             	sub    esp,0x4
c002039b:	6a 01                	push   0x1
c002039d:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00203a4:	50                   	push   eax
c00203a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00203a9:	50                   	push   eax
c00203aa:	e8 a8 4b fe ff       	call   c0004f57 <f_open>
c00203af:	83 c4 10             	add    esp,0x10
c00203b2:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00203b9:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00203c0:	85 c0                	test   eax,eax
c00203c2:	74 0a                	je     c00203ce <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00203c4:	78 2d                	js     c00203f3 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00203c6:	83 e8 04             	sub    eax,0x4
c00203c9:	83 f8 01             	cmp    eax,0x1
c00203cc:	77 25                	ja     c00203f3 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00203ce:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00203d6:	83 ec 0c             	sub    esp,0xc
c00203d9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00203dd:	50                   	push   eax
c00203de:	e8 c6 56 fe ff       	call   c0005aa9 <f_close>
c00203e3:	83 c4 10             	add    esp,0x10
c00203e6:	90                   	nop
c00203e7:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00203ef:	74 3a                	je     c002042b <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00203f1:	eb 2d                	jmp    c0020420 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00203f3:	83 ec 0c             	sub    esp,0xc
c00203f6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00203fd:	e8 b7 f1 fe ff       	call   c000f5b9 <rfree>
c0020402:	83 c4 10             	add    esp,0x10
c0020405:	83 ec 04             	sub    esp,0x4
c0020408:	6a 00                	push   0x0
c002040a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020411:	50                   	push   eax
c0020412:	6a 00                	push   0x0
c0020414:	e8 dc 4a fe ff       	call   c0004ef5 <f_mount>
c0020419:	83 c4 10             	add    esp,0x10
c002041c:	b0 00                	mov    al,0x0
c002041e:	eb 12                	jmp    c0020432 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020420:	a1 00 10 03 c0       	mov    eax,ds:0xc0031000
c0020425:	40                   	inc    eax
c0020426:	a3 00 10 03 c0       	mov    ds:0xc0031000,eax
c002042b:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020432:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020438:	c3                   	ret    
c0020439:	90                   	nop

c002043a <FAT::getFileFirstSector(char const*)>:
c002043a:	53                   	push   ebx
c002043b:	83 ec 28             	sub    esp,0x28
c002043e:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020446:	83 ec 0c             	sub    esp,0xc
c0020449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002044d:	e8 47 f1 fe ff       	call   c000f599 <malloc>
c0020452:	83 c4 10             	add    esp,0x10
c0020455:	89 c3                	mov    ebx,eax
c0020457:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c002045c:	83 ec 04             	sub    esp,0x4
c002045f:	50                   	push   eax
c0020460:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020464:	53                   	push   ebx
c0020465:	e8 f8 27 ff ff       	call   c0012c62 <File::File(char const*, Process*)>
c002046a:	83 c4 10             	add    esp,0x10
c002046d:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020471:	83 ec 08             	sub    esp,0x8
c0020474:	6a 01                	push   0x1
c0020476:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002047a:	e8 47 28 ff ff       	call   c0012cc6 <File::open(FileOpenMode)>
c002047f:	83 c4 10             	add    esp,0x10
c0020482:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020486:	8b 00                	mov    eax,DWORD PTR [eax]
c0020488:	83 c0 0c             	add    eax,0xc
c002048b:	8b 00                	mov    eax,DWORD PTR [eax]
c002048d:	83 ec 0c             	sub    esp,0xc
c0020490:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020494:	52                   	push   edx
c0020495:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020499:	52                   	push   edx
c002049a:	6a 00                	push   0x0
c002049c:	6a 04                	push   0x4
c002049e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00204a2:	ff d0                	call   eax
c00204a4:	83 c4 20             	add    esp,0x20
c00204a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00204ab:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00204b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00204b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00204b9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00204bc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00204bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00204c3:	83 ec 0c             	sub    esp,0xc
c00204c6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00204ca:	e8 55 28 ff ff       	call   c0012d24 <File::close()>
c00204cf:	83 c4 10             	add    esp,0x10
c00204d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00204d6:	ba 00 00 00 00       	mov    edx,0x0
c00204db:	83 c4 28             	add    esp,0x28
c00204de:	5b                   	pop    ebx
c00204df:	c3                   	ret    

c00204e0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00204e0:	57                   	push   edi
c00204e1:	56                   	push   esi
c00204e2:	53                   	push   ebx
c00204e3:	81 ec 50 02 00 00    	sub    esp,0x250
c00204e9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00204f1:	74 0a                	je     c00204fd <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c00204f3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00204fb:	75 0a                	jne    c0020507 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c00204fd:	b8 04 00 00 00       	mov    eax,0x4
c0020502:	e9 29 01 00 00       	jmp    c0020630 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020507:	83 ec 08             	sub    esp,0x8
c002050a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020511:	50                   	push   eax
c0020512:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020519:	e8 95 5b fe ff       	call   c00060b3 <f_readdir>
c002051e:	83 c4 10             	add    esp,0x10
c0020521:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020528:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c002052f:	83 ec 0c             	sub    esp,0xc
c0020532:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020539:	83 c0 1a             	add    eax,0x1a
c002053c:	50                   	push   eax
c002053d:	e8 2a 02 fe ff       	call   c000076c <strlen>
c0020542:	83 c4 10             	add    esp,0x10
c0020545:	ba 00 00 00 00       	mov    edx,0x0
c002054a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002054e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020552:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020559:	0f b6 c0             	movzx  eax,al
c002055c:	83 e0 10             	and    eax,0x10
c002055f:	74 07                	je     c0020568 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020561:	b8 02 00 00 00       	mov    eax,0x2
c0020566:	eb 05                	jmp    c002056d <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020568:	b8 01 00 00 00       	mov    eax,0x1
c002056d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020571:	83 ec 08             	sub    esp,0x8
c0020574:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c002057b:	83 c0 1a             	add    eax,0x1a
c002057e:	50                   	push   eax
c002057f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020583:	83 c0 10             	add    eax,0x10
c0020586:	50                   	push   eax
c0020587:	e8 80 02 fe ff       	call   c000080c <strcpy>
c002058c:	83 c4 10             	add    esp,0x10
c002058f:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020596:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c002059d:	8d 44 24 04          	lea    eax,[esp+0x4]
c00205a1:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00205a8:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00205af:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00205b6:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00205bd:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00205c4:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00205cb:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00205d2:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00205d9:	89 c6                	mov    esi,eax
c00205db:	89 d7                	mov    edi,edx
c00205dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00205df:	89 c8                	mov    eax,ecx
c00205e1:	89 fa                	mov    edx,edi
c00205e3:	89 f3                	mov    ebx,esi
c00205e5:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00205ec:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00205f3:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00205fa:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020601:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020607:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c002060e:	84 c0                	test   al,al
c0020610:	75 07                	jne    c0020619 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020612:	b8 07 00 00 00       	mov    eax,0x7
c0020617:	eb 17                	jmp    c0020630 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020619:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020620:	85 c0                	test   eax,eax
c0020622:	75 07                	jne    c002062b <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020624:	b8 00 00 00 00       	mov    eax,0x0
c0020629:	eb 05                	jmp    c0020630 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002062b:	b8 01 00 00 00       	mov    eax,0x1
c0020630:	81 c4 50 02 00 00    	add    esp,0x250
c0020636:	5b                   	pop    ebx
c0020637:	5e                   	pop    esi
c0020638:	5f                   	pop    edi
c0020639:	c3                   	ret    

c002063a <FAT::read(void*, unsigned long, void*, int*)>:
c002063a:	83 ec 1c             	sub    esp,0x1c
c002063d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020642:	74 07                	je     c002064b <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020644:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020649:	75 07                	jne    c0020652 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c002064b:	b8 04 00 00 00       	mov    eax,0x4
c0020650:	eb 3d                	jmp    c002068f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020652:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020656:	50                   	push   eax
c0020657:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002065b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002065f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020663:	e8 2b 4d fe ff       	call   c0005393 <f_read>
c0020668:	83 c4 10             	add    esp,0x10
c002066b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002066f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020673:	89 c2                	mov    edx,eax
c0020675:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020679:	89 10                	mov    DWORD PTR [eax],edx
c002067b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002067f:	85 c0                	test   eax,eax
c0020681:	75 07                	jne    c002068a <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020683:	b8 00 00 00 00       	mov    eax,0x0
c0020688:	eb 05                	jmp    c002068f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002068a:	b8 01 00 00 00       	mov    eax,0x1
c002068f:	83 c4 1c             	add    esp,0x1c
c0020692:	c3                   	ret    
c0020693:	90                   	nop

c0020694 <FAT::write(void*, unsigned long, void*, int*)>:
c0020694:	83 ec 1c             	sub    esp,0x1c
c0020697:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002069c:	74 07                	je     c00206a5 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c002069e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00206a3:	75 07                	jne    c00206ac <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00206a5:	b8 04 00 00 00       	mov    eax,0x4
c00206aa:	eb 3d                	jmp    c00206e9 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00206ac:	8d 44 24 08          	lea    eax,[esp+0x8]
c00206b0:	50                   	push   eax
c00206b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00206b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206b9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206bd:	e8 51 4f fe ff       	call   c0005613 <f_write>
c00206c2:	83 c4 10             	add    esp,0x10
c00206c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00206cd:	89 c2                	mov    edx,eax
c00206cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00206d3:	89 10                	mov    DWORD PTR [eax],edx
c00206d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00206d9:	85 c0                	test   eax,eax
c00206db:	75 07                	jne    c00206e4 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00206dd:	b8 00 00 00 00       	mov    eax,0x0
c00206e2:	eb 05                	jmp    c00206e9 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00206e4:	b8 01 00 00 00       	mov    eax,0x1
c00206e9:	83 c4 1c             	add    esp,0x1c
c00206ec:	c3                   	ret    
c00206ed:	90                   	nop

c00206ee <FAT::close(void*)>:
c00206ee:	83 ec 1c             	sub    esp,0x1c
c00206f1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00206f6:	75 07                	jne    c00206ff <FAT::close(void*)+0x11>
c00206f8:	b8 04 00 00 00       	mov    eax,0x4
c00206fd:	eb 36                	jmp    c0020735 <FAT::close(void*)+0x47>
c00206ff:	83 ec 0c             	sub    esp,0xc
c0020702:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020706:	e8 9e 53 fe ff       	call   c0005aa9 <f_close>
c002070b:	83 c4 10             	add    esp,0x10
c002070e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020712:	83 ec 0c             	sub    esp,0xc
c0020715:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020719:	e8 8b ee fe ff       	call   c000f5a9 <free>
c002071e:	83 c4 10             	add    esp,0x10
c0020721:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020725:	85 c0                	test   eax,eax
c0020727:	75 07                	jne    c0020730 <FAT::close(void*)+0x42>
c0020729:	b8 00 00 00 00       	mov    eax,0x0
c002072e:	eb 05                	jmp    c0020735 <FAT::close(void*)+0x47>
c0020730:	b8 01 00 00 00       	mov    eax,0x1
c0020735:	83 c4 1c             	add    esp,0x1c
c0020738:	c3                   	ret    
c0020739:	90                   	nop

c002073a <FAT::closeDir(void*)>:
c002073a:	83 ec 1c             	sub    esp,0x1c
c002073d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020742:	75 07                	jne    c002074b <FAT::closeDir(void*)+0x11>
c0020744:	b8 04 00 00 00       	mov    eax,0x4
c0020749:	eb 36                	jmp    c0020781 <FAT::closeDir(void*)+0x47>
c002074b:	83 ec 0c             	sub    esp,0xc
c002074e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020752:	e8 3a 59 fe ff       	call   c0006091 <f_closedir>
c0020757:	83 c4 10             	add    esp,0x10
c002075a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002075e:	83 ec 0c             	sub    esp,0xc
c0020761:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020765:	e8 3f ee fe ff       	call   c000f5a9 <free>
c002076a:	83 c4 10             	add    esp,0x10
c002076d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020771:	85 c0                	test   eax,eax
c0020773:	75 07                	jne    c002077c <FAT::closeDir(void*)+0x42>
c0020775:	b8 00 00 00 00       	mov    eax,0x0
c002077a:	eb 05                	jmp    c0020781 <FAT::closeDir(void*)+0x47>
c002077c:	b8 01 00 00 00       	mov    eax,0x1
c0020781:	83 c4 1c             	add    esp,0x1c
c0020784:	c3                   	ret    
c0020785:	90                   	nop

c0020786 <FAT::seek(void*, unsigned long long)>:
c0020786:	83 ec 2c             	sub    esp,0x2c
c0020789:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002078d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020791:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020795:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020799:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c002079e:	75 07                	jne    c00207a7 <FAT::seek(void*, unsigned long long)+0x21>
c00207a0:	b8 04 00 00 00       	mov    eax,0x4
c00207a5:	eb 2f                	jmp    c00207d6 <FAT::seek(void*, unsigned long long)+0x50>
c00207a7:	83 ec 04             	sub    esp,0x4
c00207aa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00207ae:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00207b2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00207b6:	e8 1d 53 fe ff       	call   c0005ad8 <f_lseek>
c00207bb:	83 c4 10             	add    esp,0x10
c00207be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00207c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00207c6:	85 c0                	test   eax,eax
c00207c8:	75 07                	jne    c00207d1 <FAT::seek(void*, unsigned long long)+0x4b>
c00207ca:	b8 00 00 00 00       	mov    eax,0x0
c00207cf:	eb 05                	jmp    c00207d6 <FAT::seek(void*, unsigned long long)+0x50>
c00207d1:	b8 01 00 00 00       	mov    eax,0x1
c00207d6:	83 c4 2c             	add    esp,0x2c
c00207d9:	c3                   	ret    

c00207da <fatWrapperReadDisk>:
c00207da:	83 ec 1c             	sub    esp,0x1c
c00207dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207e1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00207ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00207f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00207f4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00207f9:	8b 04 85 e0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2020]
c0020800:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020804:	83 ec 0c             	sub    esp,0xc
c0020807:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002080b:	52                   	push   edx
c002080c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020810:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020814:	50                   	push   eax
c0020815:	e8 3e 58 ff ff       	call   c0016058 <LogicalDisk::read(unsigned long long, int, void*)>
c002081a:	83 c4 20             	add    esp,0x20
c002081d:	83 c4 1c             	add    esp,0x1c
c0020820:	c3                   	ret    

c0020821 <fatWrapperWriteDisk>:
c0020821:	83 ec 1c             	sub    esp,0x1c
c0020824:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020828:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002082c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020830:	89 04 24             	mov    DWORD PTR [esp],eax
c0020833:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020837:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002083b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020840:	8b 04 85 e0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2020]
c0020847:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002084b:	83 ec 0c             	sub    esp,0xc
c002084e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020852:	52                   	push   edx
c0020853:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020857:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002085b:	50                   	push   eax
c002085c:	e8 63 58 ff ff       	call   c00160c4 <LogicalDisk::write(unsigned long long, int, void*)>
c0020861:	83 c4 20             	add    esp,0x20
c0020864:	83 c4 1c             	add    esp,0x1c
c0020867:	c3                   	ret    

c0020868 <fatWrapperIoctl>:
c0020868:	53                   	push   ebx
c0020869:	83 ec 28             	sub    esp,0x28
c002086c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020870:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020874:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020878:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002087c:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020881:	75 31                	jne    c00208b4 <fatWrapperIoctl+0x4c>
c0020883:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020887:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002088b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020890:	8b 04 85 e0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2020]
c0020897:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002089d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00208a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00208a7:	66 89 02             	mov    WORD PTR [edx],ax
c00208aa:	b8 00 00 00 00       	mov    eax,0x0
c00208af:	e9 b2 00 00 00       	jmp    c0020966 <fatWrapperIoctl+0xfe>
c00208b4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00208b9:	75 6a                	jne    c0020925 <fatWrapperIoctl+0xbd>
c00208bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00208c3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00208c8:	8b 04 85 e0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2020]
c00208cf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00208d5:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00208db:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00208e1:	89 c8                	mov    eax,ecx
c00208e3:	89 da                	mov    edx,ebx
c00208e5:	0f a4 c2 0a          	shld   edx,eax,0xa
c00208e9:	c1 e0 0a             	shl    eax,0xa
c00208ec:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00208f1:	8b 0c 8d e0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2020]
c00208f8:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00208fe:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020904:	89 cb                	mov    ebx,ecx
c0020906:	c1 fb 1f             	sar    ebx,0x1f
c0020909:	53                   	push   ebx
c002090a:	51                   	push   ecx
c002090b:	52                   	push   edx
c002090c:	50                   	push   eax
c002090d:	e8 32 5e 00 00       	call   c0026744 <__udivdi3>
c0020912:	83 c4 10             	add    esp,0x10
c0020915:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020919:	89 01                	mov    DWORD PTR [ecx],eax
c002091b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002091e:	b8 00 00 00 00       	mov    eax,0x0
c0020923:	eb 41                	jmp    c0020966 <fatWrapperIoctl+0xfe>
c0020925:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002092a:	75 07                	jne    c0020933 <fatWrapperIoctl+0xcb>
c002092c:	b8 00 00 00 00       	mov    eax,0x0
c0020931:	eb 33                	jmp    c0020966 <fatWrapperIoctl+0xfe>
c0020933:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020938:	75 19                	jne    c0020953 <fatWrapperIoctl+0xeb>
c002093a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002093e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020942:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020946:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002094c:	b8 00 00 00 00       	mov    eax,0x0
c0020951:	eb 13                	jmp    c0020966 <fatWrapperIoctl+0xfe>
c0020953:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020958:	75 07                	jne    c0020961 <fatWrapperIoctl+0xf9>
c002095a:	b8 00 00 00 00       	mov    eax,0x0
c002095f:	eb 05                	jmp    c0020966 <fatWrapperIoctl+0xfe>
c0020961:	b8 04 00 00 00       	mov    eax,0x4
c0020966:	83 c4 28             	add    esp,0x28
c0020969:	5b                   	pop    ebx
c002096a:	c3                   	ret    
c002096b:	90                   	nop

c002096c <FAT::FAT()>:
c002096c:	83 ec 1c             	sub    esp,0x1c
c002096f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020973:	83 ec 0c             	sub    esp,0xc
c0020976:	50                   	push   eax
c0020977:	e8 92 20 ff ff       	call   c0012a0e <Filesystem::Filesystem()>
c002097c:	83 c4 10             	add    esp,0x10
c002097f:	ba dc be 02 c0       	mov    edx,0xc002bedc
c0020984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020988:	89 10                	mov    DWORD PTR [eax],edx
c002098a:	c7 05 00 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031000,0x0
c0020994:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002099c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00209a1:	7f 15                	jg     c00209b8 <FAT::FAT()+0x4c>
c00209a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00209a7:	c7 04 85 20 10 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcefe0],0xffffffff
c00209b2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00209b6:	eb e4                	jmp    c002099c <FAT::FAT()+0x30>
c00209b8:	90                   	nop
c00209b9:	83 c4 1c             	add    esp,0x1c
c00209bc:	c3                   	ret    
c00209bd:	90                   	nop

c00209be <FAT::fixFilepath(char*)>:
c00209be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209c2:	8a 00                	mov    al,BYTE PTR [eax]
c00209c4:	3c 40                	cmp    al,0x40
c00209c6:	7e 2c                	jle    c00209f4 <FAT::fixFilepath(char*)+0x36>
c00209c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209cc:	8a 00                	mov    al,BYTE PTR [eax]
c00209ce:	83 e8 41             	sub    eax,0x41
c00209d1:	88 c2                	mov    dl,al
c00209d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209d7:	88 10                	mov    BYTE PTR [eax],dl
c00209d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209dd:	8a 00                	mov    al,BYTE PTR [eax]
c00209df:	0f be c0             	movsx  eax,al
c00209e2:	8b 04 85 20 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefe0]
c00209e9:	83 c0 30             	add    eax,0x30
c00209ec:	88 c2                	mov    dl,al
c00209ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209f2:	88 10                	mov    BYTE PTR [eax],dl
c00209f4:	90                   	nop
c00209f5:	c3                   	ret    

c00209f6 <FAT::open(char const*, void**, FileOpenMode)>:
c00209f6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00209fc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020a04:	74 0a                	je     c0020a10 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020a06:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020a0e:	75 0a                	jne    c0020a1a <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020a10:	b8 04 00 00 00       	mov    eax,0x4
c0020a15:	e9 fd 00 00 00       	jmp    c0020b17 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020a1a:	83 ec 08             	sub    esp,0x8
c0020a1d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a24:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020a28:	50                   	push   eax
c0020a29:	e8 de fd fd ff       	call   c000080c <strcpy>
c0020a2e:	83 c4 10             	add    esp,0x10
c0020a31:	83 ec 08             	sub    esp,0x8
c0020a34:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020a38:	50                   	push   eax
c0020a39:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a40:	e8 79 ff ff ff       	call   c00209be <FAT::fixFilepath(char*)>
c0020a45:	83 c4 10             	add    esp,0x10
c0020a48:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020a50:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a57:	83 e0 01             	and    eax,0x1
c0020a5a:	74 08                	je     c0020a64 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020a5c:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020a64:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a6b:	83 e0 04             	and    eax,0x4
c0020a6e:	74 10                	je     c0020a80 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020a70:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020a78:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020a80:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a87:	83 e0 02             	and    eax,0x2
c0020a8a:	74 08                	je     c0020a94 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020a8c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020a94:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a9b:	83 e0 08             	and    eax,0x8
c0020a9e:	74 08                	je     c0020aa8 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020aa0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020aa8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020aaf:	83 e0 10             	and    eax,0x10
c0020ab2:	74 08                	je     c0020abc <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020ab4:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020abc:	83 ec 0c             	sub    esp,0xc
c0020abf:	68 50 02 00 00       	push   0x250
c0020ac4:	e8 d0 ea fe ff       	call   c000f599 <malloc>
c0020ac9:	83 c4 10             	add    esp,0x10
c0020acc:	89 c2                	mov    edx,eax
c0020ace:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020ad5:	89 10                	mov    DWORD PTR [eax],edx
c0020ad7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020adf:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020ae6:	8b 00                	mov    eax,DWORD PTR [eax]
c0020ae8:	83 ec 04             	sub    esp,0x4
c0020aeb:	52                   	push   edx
c0020aec:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020af0:	52                   	push   edx
c0020af1:	50                   	push   eax
c0020af2:	e8 60 44 fe ff       	call   c0004f57 <f_open>
c0020af7:	83 c4 10             	add    esp,0x10
c0020afa:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020b01:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020b09:	74 07                	je     c0020b12 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020b0b:	b8 01 00 00 00       	mov    eax,0x1
c0020b10:	eb 05                	jmp    c0020b17 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020b12:	b8 00 00 00 00       	mov    eax,0x0
c0020b17:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020b1d:	c3                   	ret    

c0020b1e <FAT::openDir(char const*, void**)>:
c0020b1e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020b24:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020b2c:	74 0a                	je     c0020b38 <FAT::openDir(char const*, void**)+0x1a>
c0020b2e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020b36:	75 07                	jne    c0020b3f <FAT::openDir(char const*, void**)+0x21>
c0020b38:	b8 04 00 00 00       	mov    eax,0x4
c0020b3d:	eb 7d                	jmp    c0020bbc <FAT::openDir(char const*, void**)+0x9e>
c0020b3f:	83 ec 08             	sub    esp,0x8
c0020b42:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b49:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020b4d:	50                   	push   eax
c0020b4e:	e8 b9 fc fd ff       	call   c000080c <strcpy>
c0020b53:	83 c4 10             	add    esp,0x10
c0020b56:	83 ec 08             	sub    esp,0x8
c0020b59:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020b5d:	50                   	push   eax
c0020b5e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b65:	e8 54 fe ff ff       	call   c00209be <FAT::fixFilepath(char*)>
c0020b6a:	83 c4 10             	add    esp,0x10
c0020b6d:	83 ec 0c             	sub    esp,0xc
c0020b70:	6a 4c                	push   0x4c
c0020b72:	e8 22 ea fe ff       	call   c000f599 <malloc>
c0020b77:	83 c4 10             	add    esp,0x10
c0020b7a:	89 c2                	mov    edx,eax
c0020b7c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b83:	89 10                	mov    DWORD PTR [eax],edx
c0020b85:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b8e:	83 ec 08             	sub    esp,0x8
c0020b91:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020b95:	52                   	push   edx
c0020b96:	50                   	push   eax
c0020b97:	e8 f3 53 fe ff       	call   c0005f8f <f_opendir>
c0020b9c:	83 c4 10             	add    esp,0x10
c0020b9f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020ba6:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020bae:	74 07                	je     c0020bb7 <FAT::openDir(char const*, void**)+0x99>
c0020bb0:	b8 01 00 00 00       	mov    eax,0x1
c0020bb5:	eb 05                	jmp    c0020bbc <FAT::openDir(char const*, void**)+0x9e>
c0020bb7:	b8 00 00 00 00       	mov    eax,0x0
c0020bbc:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020bc2:	c3                   	ret    
c0020bc3:	90                   	nop

c0020bc4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020bc4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020bca:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020bd2:	75 0a                	jne    c0020bde <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020bd4:	b8 04 00 00 00       	mov    eax,0x4
c0020bd9:	e9 c9 00 00 00       	jmp    c0020ca7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020bde:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020be6:	75 0a                	jne    c0020bf2 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020be8:	b8 04 00 00 00       	mov    eax,0x4
c0020bed:	e9 b5 00 00 00       	jmp    c0020ca7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020bf2:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020bfa:	75 0a                	jne    c0020c06 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020bfc:	b8 04 00 00 00       	mov    eax,0x4
c0020c01:	e9 a1 00 00 00       	jmp    c0020ca7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c06:	83 ec 08             	sub    esp,0x8
c0020c09:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020c10:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020c17:	50                   	push   eax
c0020c18:	e8 ef fb fd ff       	call   c000080c <strcpy>
c0020c1d:	83 c4 10             	add    esp,0x10
c0020c20:	83 ec 08             	sub    esp,0x8
c0020c23:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020c2a:	50                   	push   eax
c0020c2b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020c32:	e8 87 fd ff ff       	call   c00209be <FAT::fixFilepath(char*)>
c0020c37:	83 c4 10             	add    esp,0x10
c0020c3a:	83 ec 08             	sub    esp,0x8
c0020c3d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c41:	50                   	push   eax
c0020c42:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020c49:	50                   	push   eax
c0020c4a:	e8 ff 54 fe ff       	call   c000614e <f_stat>
c0020c4f:	83 c4 10             	add    esp,0x10
c0020c52:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020c59:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020c60:	85 c0                	test   eax,eax
c0020c62:	74 07                	je     c0020c6b <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020c64:	83 f8 04             	cmp    eax,0x4
c0020c67:	74 32                	je     c0020c9b <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020c69:	eb 37                	jmp    c0020ca2 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020c6b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020c6f:	0f b6 c0             	movzx  eax,al
c0020c72:	83 e0 10             	and    eax,0x10
c0020c75:	0f 95 c2             	setne  dl
c0020c78:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020c7f:	88 10                	mov    BYTE PTR [eax],dl
c0020c81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020c84:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020c88:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020c8f:	89 01                	mov    DWORD PTR [ecx],eax
c0020c91:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020c94:	b8 00 00 00 00       	mov    eax,0x0
c0020c99:	eb 0c                	jmp    c0020ca7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c9b:	b8 02 00 00 00       	mov    eax,0x2
c0020ca0:	eb 05                	jmp    c0020ca7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020ca2:	b8 01 00 00 00       	mov    eax,0x1
c0020ca7:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020cad:	c3                   	ret    

c0020cae <FAT::unlink(char const*)>:
c0020cae:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020cb4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020cbc:	75 07                	jne    c0020cc5 <FAT::unlink(char const*)+0x17>
c0020cbe:	b8 04 00 00 00       	mov    eax,0x4
c0020cc3:	eb 5c                	jmp    c0020d21 <FAT::unlink(char const*)+0x73>
c0020cc5:	83 ec 08             	sub    esp,0x8
c0020cc8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ccf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020cd3:	50                   	push   eax
c0020cd4:	e8 33 fb fd ff       	call   c000080c <strcpy>
c0020cd9:	83 c4 10             	add    esp,0x10
c0020cdc:	83 ec 08             	sub    esp,0x8
c0020cdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ce3:	50                   	push   eax
c0020ce4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ceb:	e8 ce fc ff ff       	call   c00209be <FAT::fixFilepath(char*)>
c0020cf0:	83 c4 10             	add    esp,0x10
c0020cf3:	83 ec 0c             	sub    esp,0xc
c0020cf6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020cfa:	50                   	push   eax
c0020cfb:	e8 a0 57 fe ff       	call   c00064a0 <f_unlink>
c0020d00:	83 c4 10             	add    esp,0x10
c0020d03:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020d0a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020d11:	85 c0                	test   eax,eax
c0020d13:	75 07                	jne    c0020d1c <FAT::unlink(char const*)+0x6e>
c0020d15:	b8 00 00 00 00       	mov    eax,0x0
c0020d1a:	eb 05                	jmp    c0020d21 <FAT::unlink(char const*)+0x73>
c0020d1c:	b8 01 00 00 00       	mov    eax,0x1
c0020d21:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020d27:	c3                   	ret    

c0020d28 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020d28:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020d2e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020d35:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020d3c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020d40:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020d44:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020d4c:	75 0a                	jne    c0020d58 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020d4e:	b8 04 00 00 00       	mov    eax,0x4
c0020d53:	e9 1c 01 00 00       	jmp    c0020e74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020d58:	83 ec 08             	sub    esp,0x8
c0020d5b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020d62:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020d66:	50                   	push   eax
c0020d67:	e8 a0 fa fd ff       	call   c000080c <strcpy>
c0020d6c:	83 c4 10             	add    esp,0x10
c0020d6f:	83 ec 08             	sub    esp,0x8
c0020d72:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020d76:	50                   	push   eax
c0020d77:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020d7e:	e8 3b fc ff ff       	call   c00209be <FAT::fixFilepath(char*)>
c0020d83:	83 c4 10             	add    esp,0x10
c0020d86:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020d8e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020d96:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d9b:	83 e0 01             	and    eax,0x1
c0020d9e:	74 08                	je     c0020da8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020da0:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020da8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020dad:	83 e0 02             	and    eax,0x2
c0020db0:	74 08                	je     c0020dba <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020db2:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020dba:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020dbf:	83 e0 04             	and    eax,0x4
c0020dc2:	74 08                	je     c0020dcc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020dc4:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020dcc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020dd1:	83 e0 08             	and    eax,0x8
c0020dd4:	74 08                	je     c0020dde <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020dd6:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020dde:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020de3:	83 e0 01             	and    eax,0x1
c0020de6:	74 08                	je     c0020df0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020de8:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020df0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020df5:	83 e0 02             	and    eax,0x2
c0020df8:	74 08                	je     c0020e02 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020dfa:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020e02:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e07:	83 e0 04             	and    eax,0x4
c0020e0a:	74 08                	je     c0020e14 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020e0c:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020e14:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e19:	83 e0 08             	and    eax,0x8
c0020e1c:	74 08                	je     c0020e26 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020e1e:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020e26:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020e2d:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020e34:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020e3c:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020e44:	83 ec 04             	sub    esp,0x4
c0020e47:	52                   	push   edx
c0020e48:	50                   	push   eax
c0020e49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020e4d:	50                   	push   eax
c0020e4e:	e8 ef 5c fe ff       	call   c0006b42 <f_chmod>
c0020e53:	83 c4 10             	add    esp,0x10
c0020e56:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020e5d:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020e64:	85 c0                	test   eax,eax
c0020e66:	75 07                	jne    c0020e6f <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020e68:	b8 00 00 00 00       	mov    eax,0x0
c0020e6d:	eb 05                	jmp    c0020e74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020e6f:	b8 01 00 00 00       	mov    eax,0x1
c0020e74:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020e7a:	c3                   	ret    
c0020e7b:	90                   	nop

c0020e7c <FAT::rename(char const*, char const*)>:
c0020e7c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020e82:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020e8a:	74 0a                	je     c0020e96 <FAT::rename(char const*, char const*)+0x1a>
c0020e8c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020e94:	75 0a                	jne    c0020ea0 <FAT::rename(char const*, char const*)+0x24>
c0020e96:	b8 04 00 00 00       	mov    eax,0x4
c0020e9b:	e9 98 00 00 00       	jmp    c0020f38 <FAT::rename(char const*, char const*)+0xbc>
c0020ea0:	83 ec 08             	sub    esp,0x8
c0020ea3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020eaa:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020eb1:	50                   	push   eax
c0020eb2:	e8 55 f9 fd ff       	call   c000080c <strcpy>
c0020eb7:	83 c4 10             	add    esp,0x10
c0020eba:	83 ec 08             	sub    esp,0x8
c0020ebd:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020ec4:	50                   	push   eax
c0020ec5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020ecc:	e8 ed fa ff ff       	call   c00209be <FAT::fixFilepath(char*)>
c0020ed1:	83 c4 10             	add    esp,0x10
c0020ed4:	83 ec 08             	sub    esp,0x8
c0020ed7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020ede:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ee2:	50                   	push   eax
c0020ee3:	e8 24 f9 fd ff       	call   c000080c <strcpy>
c0020ee8:	83 c4 10             	add    esp,0x10
c0020eeb:	83 ec 08             	sub    esp,0x8
c0020eee:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ef2:	50                   	push   eax
c0020ef3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020efa:	e8 bf fa ff ff       	call   c00209be <FAT::fixFilepath(char*)>
c0020eff:	83 c4 10             	add    esp,0x10
c0020f02:	83 ec 08             	sub    esp,0x8
c0020f05:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f09:	50                   	push   eax
c0020f0a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020f11:	50                   	push   eax
c0020f12:	e8 38 59 fe ff       	call   c000684f <f_rename>
c0020f17:	83 c4 10             	add    esp,0x10
c0020f1a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020f21:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020f28:	85 c0                	test   eax,eax
c0020f2a:	75 07                	jne    c0020f33 <FAT::rename(char const*, char const*)+0xb7>
c0020f2c:	b8 00 00 00 00       	mov    eax,0x0
c0020f31:	eb 05                	jmp    c0020f38 <FAT::rename(char const*, char const*)+0xbc>
c0020f33:	b8 01 00 00 00       	mov    eax,0x1
c0020f38:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020f3e:	c3                   	ret    
c0020f3f:	90                   	nop

c0020f40 <FAT::mkdir(char const*)>:
c0020f40:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020f46:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020f4e:	75 07                	jne    c0020f57 <FAT::mkdir(char const*)+0x17>
c0020f50:	b8 04 00 00 00       	mov    eax,0x4
c0020f55:	eb 5c                	jmp    c0020fb3 <FAT::mkdir(char const*)+0x73>
c0020f57:	83 ec 08             	sub    esp,0x8
c0020f5a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f61:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f65:	50                   	push   eax
c0020f66:	e8 a1 f8 fd ff       	call   c000080c <strcpy>
c0020f6b:	83 c4 10             	add    esp,0x10
c0020f6e:	83 ec 08             	sub    esp,0x8
c0020f71:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f75:	50                   	push   eax
c0020f76:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f7d:	e8 3c fa ff ff       	call   c00209be <FAT::fixFilepath(char*)>
c0020f82:	83 c4 10             	add    esp,0x10
c0020f85:	83 ec 0c             	sub    esp,0xc
c0020f88:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f8c:	50                   	push   eax
c0020f8d:	e8 91 56 fe ff       	call   c0006623 <f_mkdir>
c0020f92:	83 c4 10             	add    esp,0x10
c0020f95:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020f9c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020fa3:	85 c0                	test   eax,eax
c0020fa5:	75 07                	jne    c0020fae <FAT::mkdir(char const*)+0x6e>
c0020fa7:	b8 00 00 00 00       	mov    eax,0x0
c0020fac:	eb 05                	jmp    c0020fb3 <FAT::mkdir(char const*)+0x73>
c0020fae:	b8 01 00 00 00       	mov    eax,0x1
c0020fb3:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020fb9:	c3                   	ret    

c0020fba <FAT::exists(char const*)>:
c0020fba:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020fc0:	83 ec 08             	sub    esp,0x8
c0020fc3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020fca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020fce:	50                   	push   eax
c0020fcf:	e8 38 f8 fd ff       	call   c000080c <strcpy>
c0020fd4:	83 c4 10             	add    esp,0x10
c0020fd7:	83 ec 08             	sub    esp,0x8
c0020fda:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020fde:	50                   	push   eax
c0020fdf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020fe6:	e8 d3 f9 ff ff       	call   c00209be <FAT::fixFilepath(char*)>
c0020feb:	83 c4 10             	add    esp,0x10
c0020fee:	83 ec 08             	sub    esp,0x8
c0020ff1:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020ff8:	50                   	push   eax
c0020ff9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ffd:	50                   	push   eax
c0020ffe:	e8 4b 51 fe ff       	call   c000614e <f_stat>
c0021003:	83 c4 10             	add    esp,0x10
c0021006:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002100d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021014:	85 c0                	test   eax,eax
c0021016:	75 04                	jne    c002101c <FAT::exists(char const*)+0x62>
c0021018:	b0 01                	mov    al,0x1
c002101a:	eb 02                	jmp    c002101e <FAT::exists(char const*)+0x64>
c002101c:	b0 00                	mov    al,0x0
c002101e:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021024:	c3                   	ret    
c0021025:	90                   	nop

c0021026 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021026:	b8 08 00 00 00       	mov    eax,0x8
c002102b:	c3                   	ret    

c002102c <ISO9660::seek(void*, unsigned long long)>:
c002102c:	53                   	push   ebx
c002102d:	b8 04 00 00 00       	mov    eax,0x4
c0021032:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021036:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002103a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002103e:	85 d2                	test   edx,edx
c0021040:	74 17                	je     c0021059 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021042:	89 c8                	mov    eax,ecx
c0021044:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021047:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002104a:	b8 01 00 00 00       	mov    eax,0x1
c002104f:	73 08                	jae    c0021059 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021051:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021054:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021057:	31 c0                	xor    eax,eax
c0021059:	5b                   	pop    ebx
c002105a:	c3                   	ret    
c002105b:	90                   	nop

c002105c <ISO9660::tell(void*, unsigned long long*)>:
c002105c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021060:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021064:	85 d2                	test   edx,edx
c0021066:	74 12                	je     c002107a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021068:	85 c0                	test   eax,eax
c002106a:	74 0e                	je     c002107a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002106c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002106f:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021072:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021075:	89 10                	mov    DWORD PTR [eax],edx
c0021077:	31 c0                	xor    eax,eax
c0021079:	c3                   	ret    
c002107a:	b8 04 00 00 00       	mov    eax,0x4
c002107f:	c3                   	ret    

c0021080 <ISO9660::getName()>:
c0021080:	b8 3c bf 02 c0       	mov    eax,0xc002bf3c
c0021085:	c3                   	ret    

c0021086 <ISO9660::stat(void*, unsigned long long*)>:
c0021086:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002108a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002108e:	85 d2                	test   edx,edx
c0021090:	74 12                	je     c00210a4 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021092:	85 c0                	test   eax,eax
c0021094:	74 0e                	je     c00210a4 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021096:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021099:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002109c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002109f:	89 10                	mov    DWORD PTR [eax],edx
c00210a1:	31 c0                	xor    eax,eax
c00210a3:	c3                   	ret    
c00210a4:	b8 04 00 00 00       	mov    eax,0x4
c00210a9:	c3                   	ret    

c00210aa <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00210aa:	b8 01 00 00 00       	mov    eax,0x1
c00210af:	c3                   	ret    

c00210b0 <ISO9660::unlink(char const*)>:
c00210b0:	b8 01 00 00 00       	mov    eax,0x1
c00210b5:	c3                   	ret    

c00210b6 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00210b6:	b8 01 00 00 00       	mov    eax,0x1
c00210bb:	c3                   	ret    

c00210bc <ISO9660::rename(char const*, char const*)>:
c00210bc:	b8 01 00 00 00       	mov    eax,0x1
c00210c1:	c3                   	ret    

c00210c2 <ISO9660::mkdir(char const*)>:
c00210c2:	b8 01 00 00 00       	mov    eax,0x1
c00210c7:	c3                   	ret    

c00210c8 <ISO9660::close(void*)>:
c00210c8:	83 ec 0c             	sub    esp,0xc
c00210cb:	b8 04 00 00 00       	mov    eax,0x4
c00210d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00210d4:	85 d2                	test   edx,edx
c00210d6:	74 0e                	je     c00210e6 <ISO9660::close(void*)+0x1e>
c00210d8:	83 ec 0c             	sub    esp,0xc
c00210db:	52                   	push   edx
c00210dc:	e8 c8 e4 fe ff       	call   c000f5a9 <free>
c00210e1:	83 c4 10             	add    esp,0x10
c00210e4:	31 c0                	xor    eax,eax
c00210e6:	83 c4 0c             	add    esp,0xc
c00210e9:	c3                   	ret    

c00210ea <ISO9660::closeDir(void*)>:
c00210ea:	83 ec 0c             	sub    esp,0xc
c00210ed:	b8 04 00 00 00       	mov    eax,0x4
c00210f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00210f6:	85 d2                	test   edx,edx
c00210f8:	74 0e                	je     c0021108 <ISO9660::closeDir(void*)+0x1e>
c00210fa:	83 ec 0c             	sub    esp,0xc
c00210fd:	52                   	push   edx
c00210fe:	e8 a6 e4 fe ff       	call   c000f5a9 <free>
c0021103:	83 c4 10             	add    esp,0x10
c0021106:	31 c0                	xor    eax,eax
c0021108:	83 c4 0c             	add    esp,0xc
c002110b:	c3                   	ret    

c002110c <ISO9660::~ISO9660()>:
c002110c:	83 ec 0c             	sub    esp,0xc
c002110f:	ba 60 bf 02 c0       	mov    edx,0xc002bf60
c0021114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021118:	89 10                	mov    DWORD PTR [eax],edx
c002111a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002111e:	83 ec 0c             	sub    esp,0xc
c0021121:	50                   	push   eax
c0021122:	e8 0b 19 ff ff       	call   c0012a32 <Filesystem::~Filesystem()>
c0021127:	83 c4 10             	add    esp,0x10
c002112a:	90                   	nop
c002112b:	83 c4 0c             	add    esp,0xc
c002112e:	c3                   	ret    
c002112f:	90                   	nop

c0021130 <ISO9660::~ISO9660()>:
c0021130:	83 ec 0c             	sub    esp,0xc
c0021133:	83 ec 0c             	sub    esp,0xc
c0021136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002113a:	e8 cd ff ff ff       	call   c002110c <ISO9660::~ISO9660()>
c002113f:	83 c4 10             	add    esp,0x10
c0021142:	83 ec 08             	sub    esp,0x8
c0021145:	6a 08                	push   0x8
c0021147:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002114b:	e8 db 14 ff ff       	call   c001262b <operator delete(void*, unsigned long)>
c0021150:	83 c4 10             	add    esp,0x10
c0021153:	83 c4 0c             	add    esp,0xc
c0021156:	c3                   	ret    

c0021157 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021157:	55                   	push   ebp
c0021158:	31 c9                	xor    ecx,ecx
c002115a:	57                   	push   edi
c002115b:	56                   	push   esi
c002115c:	53                   	push   ebx
c002115d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021161:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021165:	89 eb                	mov    ebx,ebp
c0021167:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002116b:	39 ce                	cmp    esi,ecx
c002116d:	7e 17                	jle    c0021186 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002116f:	31 d2                	xor    edx,edx
c0021171:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021175:	7d 13                	jge    c002118a <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021177:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002117b:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002117e:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021181:	75 0d                	jne    c0021190 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021183:	42                   	inc    edx
c0021184:	eb eb                	jmp    c0021171 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021186:	31 c0                	xor    eax,eax
c0021188:	eb 0a                	jmp    c0021194 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002118a:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002118e:	eb 04                	jmp    c0021194 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021190:	41                   	inc    ecx
c0021191:	43                   	inc    ebx
c0021192:	eb d7                	jmp    c002116b <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021194:	5b                   	pop    ebx
c0021195:	5e                   	pop    esi
c0021196:	5f                   	pop    edi
c0021197:	5d                   	pop    ebp
c0021198:	c3                   	ret    

c0021199 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021199:	57                   	push   edi
c002119a:	56                   	push   esi
c002119b:	53                   	push   ebx
c002119c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00211a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00211a4:	39 0d 00 11 03 c0    	cmp    DWORD PTR ds:0xc0031100,ecx
c00211aa:	75 08                	jne    c00211b4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c00211ac:	38 05 74 cf 02 c0    	cmp    BYTE PTR ds:0xc002cf74,al
c00211b2:	74 2b                	je     c00211df <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c00211b4:	83 ec 0c             	sub    esp,0xc
c00211b7:	a2 74 cf 02 c0       	mov    ds:0xc002cf74,al
c00211bc:	68 20 11 03 c0       	push   0xc0031120
c00211c1:	0f be c0             	movsx  eax,al
c00211c4:	6a 01                	push   0x1
c00211c6:	89 0d 00 11 03 c0    	mov    DWORD PTR ds:0xc0031100,ecx
c00211cc:	31 db                	xor    ebx,ebx
c00211ce:	53                   	push   ebx
c00211cf:	51                   	push   ecx
c00211d0:	ff 34 85 dc de 02 c0 	push   DWORD PTR [eax*4-0x3ffd2124]
c00211d7:	e8 7c 4e ff ff       	call   c0016058 <LogicalDisk::read(unsigned long long, int, void*)>
c00211dc:	83 c4 20             	add    esp,0x20
c00211df:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00211e3:	be 20 11 03 c0       	mov    esi,0xc0031120
c00211e8:	b9 00 08 00 00       	mov    ecx,0x800
c00211ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00211ef:	5b                   	pop    ebx
c00211f0:	5e                   	pop    esi
c00211f1:	5f                   	pop    edi
c00211f2:	c3                   	ret    
c00211f3:	90                   	nop

c00211f4 <ISO9660::tryMount(LogicalDisk*, int)>:
c00211f4:	81 ec 10 08 00 00    	sub    esp,0x810
c00211fa:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021201:	83 c0 41             	add    eax,0x41
c0021204:	0f be c0             	movsx  eax,al
c0021207:	50                   	push   eax
c0021208:	8d 44 24 08          	lea    eax,[esp+0x8]
c002120c:	50                   	push   eax
c002120d:	6a 10                	push   0x10
c002120f:	e8 85 ff ff ff       	call   c0021199 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021214:	83 c4 10             	add    esp,0x10
c0021217:	31 c0                	xor    eax,eax
c0021219:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002121e:	75 1d                	jne    c002123d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021220:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021225:	75 16                	jne    c002123d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021227:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002122c:	75 0f                	jne    c002123d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002122e:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021233:	75 08                	jne    c002123d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021235:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002123a:	0f 94 c0             	sete   al
c002123d:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021243:	c3                   	ret    

c0021244 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021244:	55                   	push   ebp
c0021245:	57                   	push   edi
c0021246:	56                   	push   esi
c0021247:	53                   	push   ebx
c0021248:	81 ec 2c 08 00 00    	sub    esp,0x82c
c002124e:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021255:	85 ed                	test   ebp,ebp
c0021257:	0f 84 da 01 00 00    	je     c0021437 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002125d:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021265:	0f 84 cc 01 00 00    	je     c0021437 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002126b:	b8 01 00 00 00       	mov    eax,0x1
c0021270:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021274:	0f 85 c2 01 00 00    	jne    c002143c <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c002127a:	31 d2                	xor    edx,edx
c002127c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021283:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021286:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021289:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c002128c:	89 04 24             	mov    DWORD PTR [esp],eax
c002128f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021293:	01 c8                	add    eax,ecx
c0021295:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021298:	11 da                	adc    edx,ebx
c002129a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c002129e:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00212a2:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00212a6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00212aa:	19 d7                	sbb    edi,edx
c00212ac:	72 11                	jb     c00212bf <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c00212ae:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00212b1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00212b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00212b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00212bd:	eb 0c                	jmp    c00212cb <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00212bf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00212c3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00212c7:	29 ce                	sub    esi,ecx
c00212c9:	19 df                	sbb    edi,ebx
c00212cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00212ce:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00212d1:	0f a4 c2 0b          	shld   edx,eax,0xb
c00212d5:	c1 e0 0b             	shl    eax,0xb
c00212d8:	01 c8                	add    eax,ecx
c00212da:	11 da                	adc    edx,ebx
c00212dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00212df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00212e3:	51                   	push   ecx
c00212e4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00212e8:	50                   	push   eax
c00212e9:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00212ed:	53                   	push   ebx
c00212ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00212f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212f6:	0f ac d0 0b          	shrd   eax,edx,0xb
c00212fa:	50                   	push   eax
c00212fb:	e8 99 fe ff ff       	call   c0021199 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021300:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021303:	b8 00 08 00 00       	mov    eax,0x800
c0021308:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002130e:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0021312:	29 d0                	sub    eax,edx
c0021314:	83 c4 10             	add    esp,0x10
c0021317:	89 f9                	mov    ecx,edi
c0021319:	39 c6                	cmp    esi,eax
c002131b:	83 d9 00             	sbb    ecx,0x0
c002131e:	7d 1b                	jge    c002133b <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021320:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021325:	75 12                	jne    c0021339 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0021327:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002132e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021334:	e9 fa 00 00 00       	jmp    c0021433 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021339:	89 f0                	mov    eax,esi
c002133b:	01 d3                	add    ebx,edx
c002133d:	31 d2                	xor    edx,edx
c002133f:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021343:	39 c2                	cmp    edx,eax
c0021345:	7d 14                	jge    c002135b <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021347:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c002134e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021352:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021355:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021358:	42                   	inc    edx
c0021359:	eb e8                	jmp    c0021343 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c002135b:	89 c2                	mov    edx,eax
c002135d:	85 c0                	test   eax,eax
c002135f:	79 02                	jns    c0021363 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021361:	31 d2                	xor    edx,edx
c0021363:	01 c2                	add    edx,eax
c0021365:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021368:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c002136f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021373:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021377:	99                   	cdq    
c0021378:	01 c1                	add    ecx,eax
c002137a:	11 d3                	adc    ebx,edx
c002137c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021380:	29 c6                	sub    esi,eax
c0021382:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021386:	19 d7                	sbb    edi,edx
c0021388:	89 34 24             	mov    DWORD PTR [esp],esi
c002138b:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c002138f:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021394:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021397:	b8 00 00 00 00       	mov    eax,0x0
c002139c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00213a0:	7d 43                	jge    c00213e5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c00213a2:	52                   	push   edx
c00213a3:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00213a7:	50                   	push   eax
c00213a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00213ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00213b0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00213b4:	0f ac d0 0b          	shrd   eax,edx,0xb
c00213b8:	50                   	push   eax
c00213b9:	e8 db fd ff ff       	call   c0021199 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00213be:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00213c6:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00213cb:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c00213d3:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00213db:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00213e0:	83 c4 10             	add    esp,0x10
c00213e3:	eb aa                	jmp    c002138f <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c00213e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213e9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00213ec:	74 2a                	je     c0021418 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c00213ee:	50                   	push   eax
c00213ef:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00213f3:	50                   	push   eax
c00213f4:	8d 74 24 28          	lea    esi,[esp+0x28]
c00213f8:	56                   	push   esi
c00213f9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00213fd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021401:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021405:	51                   	push   ecx
c0021406:	e8 8e fd ff ff       	call   c0021199 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002140b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002140f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021413:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021415:	83 c4 10             	add    esp,0x10
c0021418:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002141f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021423:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021427:	89 18                	mov    DWORD PTR [eax],ebx
c0021429:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002142d:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021430:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021433:	31 c0                	xor    eax,eax
c0021435:	eb 05                	jmp    c002143c <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021437:	b8 04 00 00 00       	mov    eax,0x4
c002143c:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021442:	5b                   	pop    ebx
c0021443:	5e                   	pop    esi
c0021444:	5f                   	pop    edi
c0021445:	5d                   	pop    ebp
c0021446:	c3                   	ret    
c0021447:	90                   	nop

c0021448 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021448:	55                   	push   ebp
c0021449:	57                   	push   edi
c002144a:	56                   	push   esi
c002144b:	53                   	push   ebx
c002144c:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021452:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021459:	85 ed                	test   ebp,ebp
c002145b:	0f 84 51 02 00 00    	je     c00216b2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021461:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021469:	0f 84 43 02 00 00    	je     c00216b2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c002146f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021472:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021475:	75 0a                	jne    c0021481 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021477:	b8 07 00 00 00       	mov    eax,0x7
c002147c:	e9 36 02 00 00       	jmp    c00216b7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021481:	50                   	push   eax
c0021482:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021486:	50                   	push   eax
c0021487:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002148e:	53                   	push   ebx
c002148f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021492:	c1 e0 0b             	shl    eax,0xb
c0021495:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021498:	c1 e8 0b             	shr    eax,0xb
c002149b:	50                   	push   eax
c002149c:	e8 f8 fc ff ff       	call   c0021199 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00214a1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00214a4:	83 c4 10             	add    esp,0x10
c00214a7:	89 c1                	mov    ecx,eax
c00214a9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00214ac:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00214b2:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c00214b5:	84 db                	test   bl,bl
c00214b7:	0f 85 8b 00 00 00    	jne    c0021548 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c00214bd:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c00214c3:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00214c6:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00214cc:	29 c6                	sub    esi,eax
c00214ce:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00214d2:	89 f3                	mov    ebx,esi
c00214d4:	89 f1                	mov    ecx,esi
c00214d6:	c1 fb 1f             	sar    ebx,0x1f
c00214d9:	01 f0                	add    eax,esi
c00214db:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00214de:	11 da                	adc    edx,ebx
c00214e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00214e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00214e7:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00214ea:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00214ed:	89 d8                	mov    eax,ebx
c00214ef:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c00214f3:	ba 00 00 00 00       	mov    edx,0x0
c00214f8:	19 f8                	sbb    eax,edi
c00214fa:	b8 00 00 00 00       	mov    eax,0x0
c00214ff:	73 08                	jae    c0021509 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021501:	89 f0                	mov    eax,esi
c0021503:	89 fa                	mov    edx,edi
c0021505:	29 c8                	sub    eax,ecx
c0021507:	19 da                	sbb    edx,ebx
c0021509:	89 d7                	mov    edi,edx
c002150b:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c002150e:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021511:	09 c7                	or     edi,eax
c0021513:	0f 84 5e ff ff ff    	je     c0021477 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021519:	57                   	push   edi
c002151a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002151e:	50                   	push   eax
c002151f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021526:	53                   	push   ebx
c0021527:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002152a:	c1 e0 0b             	shl    eax,0xb
c002152d:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021531:	c1 e8 0b             	shr    eax,0xb
c0021534:	50                   	push   eax
c0021535:	e8 5f fc ff ff       	call   c0021199 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002153a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002153d:	83 c4 10             	add    esp,0x10
c0021540:	25 ff 07 00 00       	and    eax,0x7ff
c0021545:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021548:	31 ff                	xor    edi,edi
c002154a:	56                   	push   esi
c002154b:	6a 28                	push   0x28
c002154d:	6a 00                	push   0x0
c002154f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021553:	50                   	push   eax
c0021554:	e8 f7 f1 fd ff       	call   c0000750 <memset>
c0021559:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002155c:	25 ff 07 00 00       	and    eax,0x7ff
c0021561:	89 c6                	mov    esi,eax
c0021563:	83 c6 21             	add    esi,0x21
c0021566:	83 d7 00             	adc    edi,0x0
c0021569:	83 c4 10             	add    esp,0x10
c002156c:	31 c9                	xor    ecx,ecx
c002156e:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021575:	83 f9 28             	cmp    ecx,0x28
c0021578:	88 04 24             	mov    BYTE PTR [esp],al
c002157b:	0f 94 c2             	sete   dl
c002157e:	88 d0                	mov    al,dl
c0021580:	ba ff 07 00 00       	mov    edx,0x7ff
c0021585:	39 f2                	cmp    edx,esi
c0021587:	ba 00 00 00 00       	mov    edx,0x0
c002158c:	19 fa                	sbb    edx,edi
c002158e:	0f 92 c2             	setb   dl
c0021591:	09 c2                	or     edx,eax
c0021593:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021597:	0f 94 c0             	sete   al
c002159a:	08 d0                	or     al,dl
c002159c:	75 16                	jne    c00215b4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002159e:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c00215a2:	74 10                	je     c00215b4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00215a4:	8a 04 24             	mov    al,BYTE PTR [esp]
c00215a7:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00215ab:	41                   	inc    ecx
c00215ac:	83 c6 01             	add    esi,0x1
c00215af:	83 d7 00             	adc    edi,0x0
c00215b2:	eb ba                	jmp    c002156e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c00215b4:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00215bb:	83 ec 0c             	sub    esp,0xc
c00215be:	8d 74 24 24          	lea    esi,[esp+0x24]
c00215c2:	56                   	push   esi
c00215c3:	e8 a4 f1 fd ff       	call   c000076c <strlen>
c00215c8:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c00215cf:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00215d3:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00215db:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00215de:	5a                   	pop    edx
c00215df:	25 ff 07 00 00       	and    eax,0x7ff
c00215e4:	59                   	pop    ecx
c00215e5:	01 f8                	add    eax,edi
c00215e7:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00215ed:	83 e0 02             	and    eax,0x2
c00215f0:	3c 01                	cmp    al,0x1
c00215f2:	19 c0                	sbb    eax,eax
c00215f4:	83 c0 02             	add    eax,0x2
c00215f7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00215fb:	56                   	push   esi
c00215fc:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021600:	50                   	push   eax
c0021601:	e8 06 f2 fd ff       	call   c000080c <strcpy>
c0021606:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c002160a:	83 c4 10             	add    esp,0x10
c002160d:	84 c0                	test   al,al
c002160f:	75 21                	jne    c0021632 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021611:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021619:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021621:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021629:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021630:	eb 28                	jmp    c002165a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021632:	fe c8                	dec    al
c0021634:	75 24                	jne    c002165a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021636:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c002163e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021646:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002164e:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021655:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c002165a:	8d 74 24 40          	lea    esi,[esp+0x40]
c002165e:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021665:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c002166c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002166e:	0f b6 f3             	movzx  esi,bl
c0021671:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021678:	31 db                	xor    ebx,ebx
c002167a:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021680:	89 df                	mov    edi,ebx
c0021682:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021685:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021688:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c002168b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002168e:	39 c6                	cmp    esi,eax
c0021690:	19 d7                	sbb    edi,edx
c0021692:	72 10                	jb     c00216a4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021694:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c002169b:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c00216a2:	eb 0a                	jmp    c00216ae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c00216a4:	29 f0                	sub    eax,esi
c00216a6:	19 da                	sbb    edx,ebx
c00216a8:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00216ab:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00216ae:	31 c0                	xor    eax,eax
c00216b0:	eb 05                	jmp    c00216b7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00216b2:	b8 04 00 00 00       	mov    eax,0x4
c00216b7:	81 c4 5c 09 00 00    	add    esp,0x95c
c00216bd:	5b                   	pop    ebx
c00216be:	5e                   	pop    esi
c00216bf:	5f                   	pop    edi
c00216c0:	5d                   	pop    ebp
c00216c1:	c3                   	ret    

c00216c2 <readRoot(unsigned int*, unsigned int*, char)>:
c00216c2:	57                   	push   edi
c00216c3:	56                   	push   esi
c00216c4:	81 ec 38 08 00 00    	sub    esp,0x838
c00216ca:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00216d2:	50                   	push   eax
c00216d3:	8d 44 24 38          	lea    eax,[esp+0x38]
c00216d7:	50                   	push   eax
c00216d8:	6a 10                	push   0x10
c00216da:	e8 ba fa ff ff       	call   c0021199 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216df:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c00216e6:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c00216ea:	b9 22 00 00 00       	mov    ecx,0x22
c00216ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00216f1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00216f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00216fc:	89 10                	mov    DWORD PTR [eax],edx
c00216fe:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021705:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021709:	89 10                	mov    DWORD PTR [eax],edx
c002170b:	81 c4 44 08 00 00    	add    esp,0x844
c0021711:	b0 01                	mov    al,0x1
c0021713:	5e                   	pop    esi
c0021714:	5f                   	pop    edi
c0021715:	c3                   	ret    

c0021716 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021716:	55                   	push   ebp
c0021717:	57                   	push   edi
c0021718:	56                   	push   esi
c0021719:	53                   	push   ebx
c002171a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021720:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021727:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c002172e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021732:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021736:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002173a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002173e:	75 03                	jne    c0021743 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021740:	83 c3 02             	add    ebx,0x2
c0021743:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021746:	75 03                	jne    c002174b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021748:	43                   	inc    ebx
c0021749:	eb f8                	jmp    c0021743 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002174b:	51                   	push   ecx
c002174c:	68 00 01 00 00       	push   0x100
c0021751:	6a 00                	push   0x0
c0021753:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021757:	50                   	push   eax
c0021758:	e8 f3 ef fd ff       	call   c0000750 <memset>
c002175d:	83 c4 10             	add    esp,0x10
c0021760:	31 d2                	xor    edx,edx
c0021762:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021765:	84 c0                	test   al,al
c0021767:	74 21                	je     c002178a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021769:	3c 2f                	cmp    al,0x2f
c002176b:	75 0b                	jne    c0021778 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c002176d:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021771:	bd 01 00 00 00       	mov    ebp,0x1
c0021776:	eb 14                	jmp    c002178c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021778:	8d 48 9f             	lea    ecx,[eax-0x61]
c002177b:	80 f9 19             	cmp    cl,0x19
c002177e:	77 03                	ja     c0021783 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021780:	83 e8 20             	sub    eax,0x20
c0021783:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021787:	42                   	inc    edx
c0021788:	eb d8                	jmp    c0021762 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c002178a:	31 ed                	xor    ebp,ebp
c002178c:	83 ec 0c             	sub    esp,0xc
c002178f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021796:	e8 fe dd fe ff       	call   c000f599 <malloc>
c002179b:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00217a2:	89 c6                	mov    esi,eax
c00217a4:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00217aa:	c1 ef 0b             	shr    edi,0xb
c00217ad:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00217b4:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00217b8:	83 c4 10             	add    esp,0x10
c00217bb:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00217c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00217c4:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00217cb:	74 28                	je     c00217f5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00217cd:	52                   	push   edx
c00217ce:	57                   	push   edi
c00217cf:	50                   	push   eax
c00217d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00217d4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00217db:	e8 b9 f9 ff ff       	call   c0021199 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00217e4:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00217eb:	05 00 08 00 00       	add    eax,0x800
c00217f0:	83 c4 10             	add    esp,0x10
c00217f3:	eb cb                	jmp    c00217c0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00217f5:	83 ec 0c             	sub    esp,0xc
c00217f8:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00217fc:	57                   	push   edi
c00217fd:	e8 6a ef fd ff       	call   c000076c <strlen>
c0021802:	50                   	push   eax
c0021803:	57                   	push   edi
c0021804:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c002180b:	56                   	push   esi
c002180c:	e8 46 f9 ff ff       	call   c0021157 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021811:	83 c4 20             	add    esp,0x20
c0021814:	85 c0                	test   eax,eax
c0021816:	75 13                	jne    c002182b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021818:	83 ec 0c             	sub    esp,0xc
c002181b:	56                   	push   esi
c002181c:	e8 88 dd fe ff       	call   c000f5a9 <free>
c0021821:	83 c4 10             	add    esp,0x10
c0021824:	31 c0                	xor    eax,eax
c0021826:	e9 b3 00 00 00       	jmp    c00218de <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002182b:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c002182f:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021833:	c1 e7 08             	shl    edi,0x8
c0021836:	c1 e2 10             	shl    edx,0x10
c0021839:	09 d7                	or     edi,edx
c002183b:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c002183f:	09 d7                	or     edi,edx
c0021841:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021845:	c1 e2 18             	shl    edx,0x18
c0021848:	09 d7                	or     edi,edx
c002184a:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c002184e:	89 d1                	mov    ecx,edx
c0021850:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021854:	c1 e1 08             	shl    ecx,0x8
c0021857:	c1 e2 10             	shl    edx,0x10
c002185a:	09 ca                	or     edx,ecx
c002185c:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021860:	09 ca                	or     edx,ecx
c0021862:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021866:	c1 e1 18             	shl    ecx,0x18
c0021869:	09 ca                	or     edx,ecx
c002186b:	89 e9                	mov    ecx,ebp
c002186d:	84 c9                	test   cl,cl
c002186f:	74 3c                	je     c00218ad <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021871:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021875:	83 ec 0c             	sub    esp,0xc
c0021878:	56                   	push   esi
c0021879:	e8 2b dd fe ff       	call   c000f5a9 <free>
c002187e:	83 c4 0c             	add    esp,0xc
c0021881:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021888:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c002188d:	50                   	push   eax
c002188e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021895:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002189c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00218a0:	52                   	push   edx
c00218a1:	57                   	push   edi
c00218a2:	53                   	push   ebx
c00218a3:	e8 6e fe ff ff       	call   c0021716 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00218a8:	83 c4 20             	add    esp,0x20
c00218ab:	eb 31                	jmp    c00218de <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00218ad:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00218b0:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00218b7:	d0 e8                	shr    al,1
c00218b9:	89 3b                	mov    DWORD PTR [ebx],edi
c00218bb:	83 e0 01             	and    eax,0x1
c00218be:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00218c5:	83 ec 0c             	sub    esp,0xc
c00218c8:	89 13                	mov    DWORD PTR [ebx],edx
c00218ca:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00218d1:	89 03                	mov    DWORD PTR [ebx],eax
c00218d3:	56                   	push   esi
c00218d4:	e8 d0 dc fe ff       	call   c000f5a9 <free>
c00218d9:	83 c4 10             	add    esp,0x10
c00218dc:	b0 01                	mov    al,0x1
c00218de:	81 c4 1c 01 00 00    	add    esp,0x11c
c00218e4:	5b                   	pop    ebx
c00218e5:	5e                   	pop    esi
c00218e6:	5f                   	pop    edi
c00218e7:	5d                   	pop    ebp
c00218e8:	c3                   	ret    

c00218e9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00218e9:	55                   	push   ebp
c00218ea:	57                   	push   edi
c00218eb:	56                   	push   esi
c00218ec:	53                   	push   ebx
c00218ed:	83 ec 20             	sub    esp,0x20
c00218f0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00218f4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00218f8:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00218fc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021904:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002190c:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021911:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021917:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c002191d:	57                   	push   edi
c002191e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021922:	50                   	push   eax
c0021923:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021927:	50                   	push   eax
c0021928:	e8 95 fd ff ff       	call   c00216c2 <readRoot(unsigned int*, unsigned int*, char)>
c002192d:	5a                   	pop    edx
c002192e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021932:	e8 35 ee fd ff       	call   c000076c <strlen>
c0021937:	83 c4 10             	add    esp,0x10
c002193a:	83 f8 03             	cmp    eax,0x3
c002193d:	77 17                	ja     c0021956 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c002193f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021943:	89 03                	mov    DWORD PTR [ebx],eax
c0021945:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021949:	89 06                	mov    DWORD PTR [esi],eax
c002194b:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021952:	b0 01                	mov    al,0x1
c0021954:	eb 19                	jmp    c002196f <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021956:	50                   	push   eax
c0021957:	55                   	push   ebp
c0021958:	57                   	push   edi
c0021959:	56                   	push   esi
c002195a:	53                   	push   ebx
c002195b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002195f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021963:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021967:	e8 aa fd ff ff       	call   c0021716 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002196c:	83 c4 20             	add    esp,0x20
c002196f:	83 c4 1c             	add    esp,0x1c
c0021972:	5b                   	pop    ebx
c0021973:	5e                   	pop    esi
c0021974:	5f                   	pop    edi
c0021975:	5d                   	pop    ebp
c0021976:	c3                   	ret    
c0021977:	90                   	nop

c0021978 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021978:	57                   	push   edi
c0021979:	56                   	push   esi
c002197a:	53                   	push   ebx
c002197b:	83 ec 10             	sub    esp,0x10
c002197e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021982:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021986:	85 ff                	test   edi,edi
c0021988:	0f 84 8b 00 00 00    	je     c0021a19 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c002198e:	85 f6                	test   esi,esi
c0021990:	0f 84 83 00 00 00    	je     c0021a19 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021996:	b8 03 00 00 00       	mov    eax,0x3
c002199b:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00219a0:	75 7c                	jne    c0021a1e <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00219a2:	83 ec 0c             	sub    esp,0xc
c00219a5:	6a 1c                	push   0x1c
c00219a7:	e8 ed db fe ff       	call   c000f599 <malloc>
c00219ac:	89 07                	mov    DWORD PTR [edi],eax
c00219ae:	89 c3                	mov    ebx,eax
c00219b0:	58                   	pop    eax
c00219b1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00219b5:	50                   	push   eax
c00219b6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00219b9:	50                   	push   eax
c00219ba:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00219be:	50                   	push   eax
c00219bf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00219c3:	50                   	push   eax
c00219c4:	56                   	push   esi
c00219c5:	e8 1f ff ff ff       	call   c00218e9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00219ca:	83 c4 20             	add    esp,0x20
c00219cd:	84 c0                	test   al,al
c00219cf:	74 07                	je     c00219d8 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c00219d1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00219d6:	74 0b                	je     c00219e3 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c00219d8:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00219dc:	b8 01 00 00 00       	mov    eax,0x1
c00219e1:	eb 3b                	jmp    c0021a1e <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00219e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219e7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00219eb:	89 03                	mov    DWORD PTR [ebx],eax
c00219ed:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00219f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219f8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00219ff:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a06:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021a09:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021a10:	8a 06                	mov    al,BYTE PTR [esi]
c0021a12:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021a15:	31 c0                	xor    eax,eax
c0021a17:	eb 05                	jmp    c0021a1e <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021a19:	b8 04 00 00 00       	mov    eax,0x4
c0021a1e:	83 c4 10             	add    esp,0x10
c0021a21:	5b                   	pop    ebx
c0021a22:	5e                   	pop    esi
c0021a23:	5f                   	pop    edi
c0021a24:	c3                   	ret    
c0021a25:	90                   	nop

c0021a26 <ISO9660::exists(char const*)>:
c0021a26:	83 ec 28             	sub    esp,0x28
c0021a29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021a2d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021a31:	52                   	push   edx
c0021a32:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021a35:	52                   	push   edx
c0021a36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021a3a:	52                   	push   edx
c0021a3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021a3f:	52                   	push   edx
c0021a40:	50                   	push   eax
c0021a41:	e8 a3 fe ff ff       	call   c00218e9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a46:	83 c4 3c             	add    esp,0x3c
c0021a49:	c3                   	ret    

c0021a4a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021a4a:	56                   	push   esi
c0021a4b:	53                   	push   ebx
c0021a4c:	83 ec 14             	sub    esp,0x14
c0021a4f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021a53:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021a57:	85 db                	test   ebx,ebx
c0021a59:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021a5d:	0f 94 c2             	sete   dl
c0021a60:	85 f6                	test   esi,esi
c0021a62:	0f 94 c0             	sete   al
c0021a65:	08 c2                	or     dl,al
c0021a67:	75 68                	jne    c0021ad1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021a69:	85 c9                	test   ecx,ecx
c0021a6b:	74 64                	je     c0021ad1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021a6d:	83 ec 0c             	sub    esp,0xc
c0021a70:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021a73:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a77:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021a7d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a84:	50                   	push   eax
c0021a85:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021a88:	50                   	push   eax
c0021a89:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a8d:	50                   	push   eax
c0021a8e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a92:	50                   	push   eax
c0021a93:	51                   	push   ecx
c0021a94:	e8 50 fe ff ff       	call   c00218e9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a99:	83 c4 20             	add    esp,0x20
c0021a9c:	ba 01 00 00 00       	mov    edx,0x1
c0021aa1:	84 c0                	test   al,al
c0021aa3:	74 31                	je     c0021ad6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021aa5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021aa9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021ab0:	89 03                	mov    DWORD PTR [ebx],eax
c0021ab2:	ba 00 00 00 00       	mov    edx,0x0
c0021ab7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021abb:	85 c0                	test   eax,eax
c0021abd:	0f 95 06             	setne  BYTE PTR [esi]
c0021ac0:	74 14                	je     c0021ad6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021ac2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021ac8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021acf:	eb 05                	jmp    c0021ad6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021ad1:	ba 04 00 00 00       	mov    edx,0x4
c0021ad6:	83 c4 14             	add    esp,0x14
c0021ad9:	89 d0                	mov    eax,edx
c0021adb:	5b                   	pop    ebx
c0021adc:	5e                   	pop    esi
c0021add:	c3                   	ret    

c0021ade <ISO9660::openDir(char const*, void**)>:
c0021ade:	57                   	push   edi
c0021adf:	56                   	push   esi
c0021ae0:	53                   	push   ebx
c0021ae1:	83 ec 10             	sub    esp,0x10
c0021ae4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021ae8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021aec:	85 ff                	test   edi,edi
c0021aee:	74 7b                	je     c0021b6b <ISO9660::openDir(char const*, void**)+0x8d>
c0021af0:	85 f6                	test   esi,esi
c0021af2:	74 77                	je     c0021b6b <ISO9660::openDir(char const*, void**)+0x8d>
c0021af4:	83 ec 0c             	sub    esp,0xc
c0021af7:	6a 1c                	push   0x1c
c0021af9:	e8 9b da fe ff       	call   c000f599 <malloc>
c0021afe:	89 07                	mov    DWORD PTR [edi],eax
c0021b00:	89 c3                	mov    ebx,eax
c0021b02:	58                   	pop    eax
c0021b03:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021b07:	50                   	push   eax
c0021b08:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021b0b:	50                   	push   eax
c0021b0c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021b10:	50                   	push   eax
c0021b11:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021b15:	50                   	push   eax
c0021b16:	56                   	push   esi
c0021b17:	e8 cd fd ff ff       	call   c00218e9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021b1c:	83 c4 20             	add    esp,0x20
c0021b1f:	84 c0                	test   al,al
c0021b21:	74 07                	je     c0021b2a <ISO9660::openDir(char const*, void**)+0x4c>
c0021b23:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021b28:	75 0b                	jne    c0021b35 <ISO9660::openDir(char const*, void**)+0x57>
c0021b2a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021b2e:	b8 01 00 00 00       	mov    eax,0x1
c0021b33:	eb 3b                	jmp    c0021b70 <ISO9660::openDir(char const*, void**)+0x92>
c0021b35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b39:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0021b3f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021b46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b4a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021b51:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b58:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021b5b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021b62:	8a 06                	mov    al,BYTE PTR [esi]
c0021b64:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021b67:	31 c0                	xor    eax,eax
c0021b69:	eb 05                	jmp    c0021b70 <ISO9660::openDir(char const*, void**)+0x92>
c0021b6b:	b8 04 00 00 00       	mov    eax,0x4
c0021b70:	83 c4 10             	add    esp,0x10
c0021b73:	5b                   	pop    ebx
c0021b74:	5e                   	pop    esi
c0021b75:	5f                   	pop    edi
c0021b76:	c3                   	ret    
c0021b77:	90                   	nop

c0021b78 <ISO9660::ISO9660()>:
c0021b78:	83 ec 0c             	sub    esp,0xc
c0021b7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b7f:	83 ec 0c             	sub    esp,0xc
c0021b82:	50                   	push   eax
c0021b83:	e8 86 0e ff ff       	call   c0012a0e <Filesystem::Filesystem()>
c0021b88:	83 c4 10             	add    esp,0x10
c0021b8b:	ba 60 bf 02 c0       	mov    edx,0xc002bf60
c0021b90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b94:	89 10                	mov    DWORD PTR [eax],edx
c0021b96:	90                   	nop
c0021b97:	83 c4 0c             	add    esp,0xc
c0021b9a:	c3                   	ret    
c0021b9b:	90                   	nop

c0021b9c <SoundChannel::SoundChannel(int, int, int, int)>:
c0021b9c:	83 ec 1c             	sub    esp,0x1c
c0021b9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ba3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021ba7:	89 10                	mov    DWORD PTR [eax],edx
c0021ba9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021bb1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021bb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bb8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021bbc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021bbf:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021bc4:	75 23                	jne    c0021be9 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021bc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bca:	8b 10                	mov    edx,DWORD PTR [eax]
c0021bcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021bd3:	0f af c2             	imul   eax,edx
c0021bd6:	85 c0                	test   eax,eax
c0021bd8:	79 03                	jns    c0021bdd <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021bda:	83 c0 03             	add    eax,0x3
c0021bdd:	c1 f8 02             	sar    eax,0x2
c0021be0:	05 a0 0f 00 00       	add    eax,0xfa0
c0021be5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021be9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bed:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021bf1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021bf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bf8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021bff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c03:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021c0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c0e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021c11:	c1 e0 02             	shl    eax,0x2
c0021c14:	83 ec 0c             	sub    esp,0xc
c0021c17:	50                   	push   eax
c0021c18:	e8 7c d9 fe ff       	call   c000f599 <malloc>
c0021c1d:	83 c4 10             	add    esp,0x10
c0021c20:	89 c2                	mov    edx,eax
c0021c22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c26:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021c29:	83 ec 04             	sub    esp,0x4
c0021c2c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021c30:	50                   	push   eax
c0021c31:	6a 01                	push   0x1
c0021c33:	6a 04                	push   0x4
c0021c35:	e8 2b 6f fe ff       	call   c0008b65 <src_new>
c0021c3a:	83 c4 10             	add    esp,0x10
c0021c3d:	89 c2                	mov    edx,eax
c0021c3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c43:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021c46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c4a:	85 c0                	test   eax,eax
c0021c4c:	74 10                	je     c0021c5e <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021c4e:	83 ec 0c             	sub    esp,0xc
c0021c51:	68 c0 bf 02 c0       	push   0xc002bfc0
c0021c56:	e8 14 82 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c0021c5b:	83 c4 10             	add    esp,0x10
c0021c5e:	a0 20 1d 03 c0       	mov    al,ds:0xc0031d20
c0021c63:	83 f0 01             	xor    eax,0x1
c0021c66:	84 c0                	test   al,al
c0021c68:	74 57                	je     c0021cc1 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021c6a:	a1 dc bf 02 c0       	mov    eax,ds:0xc002bfdc
c0021c6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c7b:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021c83:	7f 35                	jg     c0021cba <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021c85:	83 ec 0c             	sub    esp,0xc
c0021c88:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021c8c:	e8 de 53 00 00       	call   c002706f <__floatsisf>
c0021c91:	83 c4 10             	add    esp,0x10
c0021c94:	8b 15 dc bf 02 c0    	mov    edx,DWORD PTR ds:0xc002bfdc
c0021c9a:	83 ec 08             	sub    esp,0x8
c0021c9d:	52                   	push   edx
c0021c9e:	50                   	push   eax
c0021c9f:	e8 dd 4f 00 00       	call   c0026c81 <__mulsf3>
c0021ca4:	83 c4 10             	add    esp,0x10
c0021ca7:	89 c2                	mov    edx,eax
c0021ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021cad:	89 14 85 20 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6e0],edx
c0021cb4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021cb8:	eb c1                	jmp    c0021c7b <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021cba:	c6 05 20 1d 03 c0 01 	mov    BYTE PTR ds:0xc0031d20,0x1
c0021cc1:	90                   	nop
c0021cc2:	83 c4 1c             	add    esp,0x1c
c0021cc5:	c3                   	ret    

c0021cc6 <SoundChannel::~SoundChannel()>:
c0021cc6:	83 ec 0c             	sub    esp,0xc
c0021cc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ccd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021cd0:	83 ec 0c             	sub    esp,0xc
c0021cd3:	50                   	push   eax
c0021cd4:	e8 d0 d8 fe ff       	call   c000f5a9 <free>
c0021cd9:	83 c4 10             	add    esp,0x10
c0021cdc:	90                   	nop
c0021cdd:	83 c4 0c             	add    esp,0xc
c0021ce0:	c3                   	ret    
c0021ce1:	90                   	nop

c0021ce2 <SoundChannel::getSampleRate()>:
c0021ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ce6:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ce8:	c3                   	ret    
c0021ce9:	90                   	nop

c0021cea <SoundChannel::getBits()>:
c0021cea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021cf1:	c3                   	ret    

c0021cf2 <SoundChannel::getBufferUsed()>:
c0021cf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cf6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021cf9:	c3                   	ret    

c0021cfa <SoundChannel::getBufferSize()>:
c0021cfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cfe:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021d01:	c3                   	ret    

c0021d02 <SoundChannel::unbuffer(float*, int, int)>:
c0021d02:	56                   	push   esi
c0021d03:	53                   	push   ebx
c0021d04:	83 ec 40             	sub    esp,0x40
c0021d07:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021d0b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021d0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021d12:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021d15:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021d19:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021d1d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021d21:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021d25:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021d29:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021d2d:	e8 3d 53 00 00       	call   c002706f <__floatsisf>
c0021d32:	5a                   	pop    edx
c0021d33:	89 c6                	mov    esi,eax
c0021d35:	ff 33                	push   DWORD PTR [ebx]
c0021d37:	e8 33 53 00 00       	call   c002706f <__floatsisf>
c0021d3c:	59                   	pop    ecx
c0021d3d:	5a                   	pop    edx
c0021d3e:	50                   	push   eax
c0021d3f:	56                   	push   esi
c0021d40:	e8 ff 50 00 00       	call   c0026e44 <__divsf3>
c0021d45:	89 04 24             	mov    DWORD PTR [esp],eax
c0021d48:	e8 f2 65 00 00       	call   c002833f <__extendsfdf2>
c0021d4d:	59                   	pop    ecx
c0021d4e:	5e                   	pop    esi
c0021d4f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021d53:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021d57:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021d5f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021d63:	50                   	push   eax
c0021d64:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021d67:	e8 ee 69 fe ff       	call   c000875a <src_process>
c0021d6c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021d70:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021d73:	83 c4 0c             	add    esp,0xc
c0021d76:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021d79:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021d7c:	29 d0                	sub    eax,edx
c0021d7e:	c1 e0 02             	shl    eax,0x2
c0021d81:	50                   	push   eax
c0021d82:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021d85:	50                   	push   eax
c0021d86:	51                   	push   ecx
c0021d87:	e8 fc e8 fd ff       	call   c0000688 <memmove>
c0021d8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021d90:	83 c4 44             	add    esp,0x44
c0021d93:	5b                   	pop    ebx
c0021d94:	5e                   	pop    esi
c0021d95:	c3                   	ret    

c0021d96 <SoundChannel::buffer16(short*, int)>:
c0021d96:	55                   	push   ebp
c0021d97:	57                   	push   edi
c0021d98:	56                   	push   esi
c0021d99:	53                   	push   ebx
c0021d9a:	83 ec 1c             	sub    esp,0x1c
c0021d9d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021da1:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021da4:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021da7:	0f 84 d2 00 00 00    	je     c0021e7f <SoundChannel::buffer16(short*, int)+0xe9>
c0021dad:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021db1:	85 ed                	test   ebp,ebp
c0021db3:	0f 8e c6 00 00 00    	jle    c0021e7f <SoundChannel::buffer16(short*, int)+0xe9>
c0021db9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021dbd:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021dc2:	83 ec 0c             	sub    esp,0xc
c0021dc5:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021dc8:	50                   	push   eax
c0021dc9:	e8 a1 52 00 00       	call   c002706f <__floatsisf>
c0021dce:	59                   	pop    ecx
c0021dcf:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021dd2:	5f                   	pop    edi
c0021dd3:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021dd6:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021dd9:	55                   	push   ebp
c0021dda:	50                   	push   eax
c0021ddb:	e8 a1 4e 00 00       	call   c0026c81 <__mulsf3>
c0021de0:	83 c4 10             	add    esp,0x10
c0021de3:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021de6:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021de9:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021dec:	0f 84 99 00 00 00    	je     c0021e8b <SoundChannel::buffer16(short*, int)+0xf5>
c0021df2:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021df7:	74 78                	je     c0021e71 <SoundChannel::buffer16(short*, int)+0xdb>
c0021df9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021dfd:	83 ec 0c             	sub    esp,0xc
c0021e00:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021e04:	50                   	push   eax
c0021e05:	e8 65 52 00 00       	call   c002706f <__floatsisf>
c0021e0a:	5f                   	pop    edi
c0021e0b:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021e0e:	5a                   	pop    edx
c0021e0f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021e12:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021e15:	55                   	push   ebp
c0021e16:	50                   	push   eax
c0021e17:	e8 65 4e 00 00       	call   c0026c81 <__mulsf3>
c0021e1c:	83 c4 10             	add    esp,0x10
c0021e1f:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021e22:	be 02 00 00 00       	mov    esi,0x2
c0021e27:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021e2a:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021e2d:	74 46                	je     c0021e75 <SoundChannel::buffer16(short*, int)+0xdf>
c0021e2f:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021e33:	eb 36                	jmp    c0021e6b <SoundChannel::buffer16(short*, int)+0xd5>
c0021e35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021e39:	83 ec 0c             	sub    esp,0xc
c0021e3c:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021e40:	46                   	inc    esi
c0021e41:	50                   	push   eax
c0021e42:	e8 28 52 00 00       	call   c002706f <__floatsisf>
c0021e47:	5a                   	pop    edx
c0021e48:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021e4b:	59                   	pop    ecx
c0021e4c:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021e4f:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021e52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e56:	50                   	push   eax
c0021e57:	e8 25 4e 00 00       	call   c0026c81 <__mulsf3>
c0021e5c:	83 c4 10             	add    esp,0x10
c0021e5f:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021e63:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021e66:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021e69:	74 0a                	je     c0021e75 <SoundChannel::buffer16(short*, int)+0xdf>
c0021e6b:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021e6f:	75 c4                	jne    c0021e35 <SoundChannel::buffer16(short*, int)+0x9f>
c0021e71:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021e75:	83 c4 1c             	add    esp,0x1c
c0021e78:	89 f0                	mov    eax,esi
c0021e7a:	5b                   	pop    ebx
c0021e7b:	5e                   	pop    esi
c0021e7c:	5f                   	pop    edi
c0021e7d:	5d                   	pop    ebp
c0021e7e:	c3                   	ret    
c0021e7f:	83 c4 1c             	add    esp,0x1c
c0021e82:	31 f6                	xor    esi,esi
c0021e84:	5b                   	pop    ebx
c0021e85:	89 f0                	mov    eax,esi
c0021e87:	5e                   	pop    esi
c0021e88:	5f                   	pop    edi
c0021e89:	5d                   	pop    ebp
c0021e8a:	c3                   	ret    
c0021e8b:	be 01 00 00 00       	mov    esi,0x1
c0021e90:	eb e3                	jmp    c0021e75 <SoundChannel::buffer16(short*, int)+0xdf>

c0021e92 <SoundChannel::buffer8(unsigned char*, int)>:
c0021e92:	55                   	push   ebp
c0021e93:	57                   	push   edi
c0021e94:	56                   	push   esi
c0021e95:	53                   	push   ebx
c0021e96:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e9a:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021e9e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021ea1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021ea5:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021ea8:	74 7a                	je     c0021f24 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021eaa:	85 ff                	test   edi,edi
c0021eac:	7e 76                	jle    c0021f24 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021eae:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021eb2:	8d 70 01             	lea    esi,[eax+0x1]
c0021eb5:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021eb8:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021ebb:	8b 1c 9d 20 19 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce6e0]
c0021ec2:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021ec5:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021ec8:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021ecb:	74 5e                	je     c0021f2b <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021ecd:	83 ff 01             	cmp    edi,0x1
c0021ed0:	74 4b                	je     c0021f1d <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021ed2:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021ed6:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021ed9:	8d 70 01             	lea    esi,[eax+0x1]
c0021edc:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021edf:	8b 1c 9d 20 19 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce6e0]
c0021ee6:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021ee9:	b8 02 00 00 00       	mov    eax,0x2
c0021eee:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021ef1:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021ef4:	75 23                	jne    c0021f19 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021ef6:	eb 27                	jmp    c0021f1f <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021ef8:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021efd:	8d 71 01             	lea    esi,[ecx+0x1]
c0021f00:	40                   	inc    eax
c0021f01:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021f04:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021f07:	8b 1c 9d 20 19 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce6e0]
c0021f0e:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021f11:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021f14:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021f17:	74 06                	je     c0021f1f <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021f19:	39 c7                	cmp    edi,eax
c0021f1b:	75 db                	jne    c0021ef8 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021f1d:	89 f8                	mov    eax,edi
c0021f1f:	5b                   	pop    ebx
c0021f20:	5e                   	pop    esi
c0021f21:	5f                   	pop    edi
c0021f22:	5d                   	pop    ebp
c0021f23:	c3                   	ret    
c0021f24:	5b                   	pop    ebx
c0021f25:	31 c0                	xor    eax,eax
c0021f27:	5e                   	pop    esi
c0021f28:	5f                   	pop    edi
c0021f29:	5d                   	pop    ebp
c0021f2a:	c3                   	ret    
c0021f2b:	b8 01 00 00 00       	mov    eax,0x1
c0021f30:	eb ed                	jmp    c0021f1f <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021f32 <SoundDevice::SoundDevice(char const*)>:
c0021f32:	83 ec 1c             	sub    esp,0x1c
c0021f35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f39:	83 ec 08             	sub    esp,0x8
c0021f3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021f40:	50                   	push   eax
c0021f41:	e8 fa 1d ff ff       	call   c0013d40 <Device::Device(char const*)>
c0021f46:	83 c4 10             	add    esp,0x10
c0021f49:	ba e8 bf 02 c0       	mov    edx,0xc002bfe8
c0021f4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f52:	89 10                	mov    DWORD PTR [eax],edx
c0021f54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f58:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021f62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f66:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021f70:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f78:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021f7d:	7f 19                	jg     c0021f98 <SoundDevice::SoundDevice(char const*)+0x66>
c0021f7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f87:	83 c2 54             	add    edx,0x54
c0021f8a:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021f92:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021f96:	eb e0                	jmp    c0021f78 <SoundDevice::SoundDevice(char const*)+0x46>
c0021f98:	90                   	nop
c0021f99:	83 c4 1c             	add    esp,0x1c
c0021f9c:	c3                   	ret    
c0021f9d:	90                   	nop

c0021f9e <SoundDevice::~SoundDevice()>:
c0021f9e:	53                   	push   ebx
c0021f9f:	83 ec 18             	sub    esp,0x18
c0021fa2:	ba e8 bf 02 c0       	mov    edx,0xc002bfe8
c0021fa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fab:	89 10                	mov    DWORD PTR [eax],edx
c0021fad:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021fb5:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021fba:	7f 46                	jg     c0022002 <SoundDevice::~SoundDevice()+0x64>
c0021fbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021fc4:	83 c2 54             	add    edx,0x54
c0021fc7:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021fcb:	85 c0                	test   eax,eax
c0021fcd:	74 2d                	je     c0021ffc <SoundDevice::~SoundDevice()+0x5e>
c0021fcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fd3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021fd7:	83 c2 54             	add    edx,0x54
c0021fda:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021fde:	85 db                	test   ebx,ebx
c0021fe0:	74 1a                	je     c0021ffc <SoundDevice::~SoundDevice()+0x5e>
c0021fe2:	83 ec 0c             	sub    esp,0xc
c0021fe5:	53                   	push   ebx
c0021fe6:	e8 db fc ff ff       	call   c0021cc6 <SoundChannel::~SoundChannel()>
c0021feb:	83 c4 10             	add    esp,0x10
c0021fee:	83 ec 08             	sub    esp,0x8
c0021ff1:	6a 2c                	push   0x2c
c0021ff3:	53                   	push   ebx
c0021ff4:	e8 32 06 ff ff       	call   c001262b <operator delete(void*, unsigned long)>
c0021ff9:	83 c4 10             	add    esp,0x10
c0021ffc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022000:	eb b3                	jmp    c0021fb5 <SoundDevice::~SoundDevice()+0x17>
c0022002:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022006:	83 ec 0c             	sub    esp,0xc
c0022009:	50                   	push   eax
c002200a:	e8 fb 19 ff ff       	call   c0013a0a <Device::~Device()>
c002200f:	83 c4 10             	add    esp,0x10
c0022012:	90                   	nop
c0022013:	83 c4 18             	add    esp,0x18
c0022016:	5b                   	pop    ebx
c0022017:	c3                   	ret    

c0022018 <SoundDevice::~SoundDevice()>:
c0022018:	83 ec 0c             	sub    esp,0xc
c002201b:	83 ec 0c             	sub    esp,0xc
c002201e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022022:	e8 77 ff ff ff       	call   c0021f9e <SoundDevice::~SoundDevice()>
c0022027:	83 c4 10             	add    esp,0x10
c002202a:	83 ec 08             	sub    esp,0x8
c002202d:	68 e4 01 00 00       	push   0x1e4
c0022032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022036:	e8 f0 05 ff ff       	call   c001262b <operator delete(void*, unsigned long)>
c002203b:	83 c4 10             	add    esp,0x10
c002203e:	83 c4 0c             	add    esp,0xc
c0022041:	c3                   	ret    

c0022042 <SoundDevice::getFreeChannelNum()>:
c0022042:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022046:	31 c0                	xor    eax,eax
c0022048:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022050:	74 09                	je     c002205b <SoundDevice::getFreeChannelNum()+0x19>
c0022052:	40                   	inc    eax
c0022053:	83 f8 20             	cmp    eax,0x20
c0022056:	75 f0                	jne    c0022048 <SoundDevice::getFreeChannelNum()+0x6>
c0022058:	83 c8 ff             	or     eax,0xffffffff
c002205b:	c3                   	ret    

c002205c <SoundDevice::addChannel(SoundChannel*)>:
c002205c:	56                   	push   esi
c002205d:	53                   	push   ebx
c002205e:	51                   	push   ecx
c002205f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022063:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022067:	53                   	push   ebx
c0022068:	e8 d5 ff ff ff       	call   c0022042 <SoundDevice::getFreeChannelNum()>
c002206d:	5a                   	pop    edx
c002206e:	83 f8 ff             	cmp    eax,0xffffffff
c0022071:	74 51                	je     c00220c4 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022073:	85 f6                	test   esi,esi
c0022075:	74 4d                	je     c00220c4 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022077:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c002207e:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022085:	75 30                	jne    c00220b7 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022087:	83 ec 0c             	sub    esp,0xc
c002208a:	56                   	push   esi
c002208b:	e8 52 fc ff ff       	call   c0021ce2 <SoundChannel::getSampleRate()>
c0022090:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022096:	89 34 24             	mov    DWORD PTR [esp],esi
c0022099:	e8 4c fc ff ff       	call   c0021cea <SoundChannel::getBits()>
c002209e:	83 c4 0c             	add    esp,0xc
c00220a1:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00220a7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00220a9:	50                   	push   eax
c00220aa:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00220b0:	53                   	push   ebx
c00220b1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00220b4:	83 c4 10             	add    esp,0x10
c00220b7:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00220bd:	b8 01 00 00 00       	mov    eax,0x1
c00220c2:	eb 03                	jmp    c00220c7 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00220c4:	83 c8 ff             	or     eax,0xffffffff
c00220c7:	5a                   	pop    edx
c00220c8:	5b                   	pop    ebx
c00220c9:	5e                   	pop    esi
c00220ca:	c3                   	ret    
c00220cb:	90                   	nop

c00220cc <SoundDevice::removeChannel(int)>:
c00220cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00220d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220d4:	83 fa 1f             	cmp    edx,0x1f
c00220d7:	77 23                	ja     c00220fc <SoundDevice::removeChannel(int)+0x30>
c00220d9:	8d 14 90             	lea    edx,[eax+edx*4]
c00220dc:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00220e3:	74 17                	je     c00220fc <SoundDevice::removeChannel(int)+0x30>
c00220e5:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00220ef:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00220f5:	75 05                	jne    c00220fc <SoundDevice::removeChannel(int)+0x30>
c00220f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00220f9:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c00220fc:	c3                   	ret    
c00220fd:	90                   	nop

c00220fe <SoundDevice::floatTo16(float*, short*, int)>:
c00220fe:	57                   	push   edi
c00220ff:	56                   	push   esi
c0022100:	53                   	push   ebx
c0022101:	31 db                	xor    ebx,ebx
c0022103:	83 ec 10             	sub    esp,0x10
c0022106:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002210a:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002210e:	0f 8d d0 00 00 00    	jge    c00221e4 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0022114:	83 ec 0c             	sub    esp,0xc
c0022117:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002211b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002211e:	e8 1c 62 00 00       	call   c002833f <__extendsfdf2>
c0022123:	83 c4 10             	add    esp,0x10
c0022126:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002212a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002212e:	68 00 00 f0 3f       	push   0x3ff00000
c0022133:	6a 00                	push   0x0
c0022135:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022139:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002213d:	e8 89 51 00 00       	call   c00272cb <__adddf3>
c0022142:	83 c4 10             	add    esp,0x10
c0022145:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022149:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002214d:	68 00 00 e0 3f       	push   0x3fe00000
c0022152:	6a 00                	push   0x0
c0022154:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022158:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002215c:	e8 e7 57 00 00       	call   c0027948 <__muldf3>
c0022161:	83 c4 10             	add    esp,0x10
c0022164:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022168:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002216c:	68 c0 ff df 40       	push   0x40dfffc0
c0022171:	6a 00                	push   0x0
c0022173:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022177:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002217b:	e8 c8 57 00 00       	call   c0027948 <__muldf3>
c0022180:	59                   	pop    ecx
c0022181:	5f                   	pop    edi
c0022182:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022186:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002218a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002218e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022192:	e8 84 60 00 00       	call   c002821b <__truncdfsf2>
c0022197:	5a                   	pop    edx
c0022198:	89 c7                	mov    edi,eax
c002219a:	59                   	pop    ecx
c002219b:	68 00 fe ff 46       	push   0x46fffe00
c00221a0:	50                   	push   eax
c00221a1:	e8 1f 51 00 00       	call   c00272c5 <__gesf2>
c00221a6:	83 c4 10             	add    esp,0x10
c00221a9:	85 c0                	test   eax,eax
c00221ab:	78 08                	js     c00221b5 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c00221ad:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c00221b3:	eb 29                	jmp    c00221de <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00221b5:	50                   	push   eax
c00221b6:	50                   	push   eax
c00221b7:	6a 00                	push   0x0
c00221b9:	57                   	push   edi
c00221ba:	e8 0a 51 00 00       	call   c00272c9 <__lesf2>
c00221bf:	83 c4 10             	add    esp,0x10
c00221c2:	85 c0                	test   eax,eax
c00221c4:	7f 08                	jg     c00221ce <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c00221c6:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c00221cc:	eb 10                	jmp    c00221de <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00221ce:	83 ec 0c             	sub    esp,0xc
c00221d1:	57                   	push   edi
c00221d2:	e8 05 62 00 00       	call   c00283dc <lrintf>
c00221d7:	83 c4 10             	add    esp,0x10
c00221da:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00221de:	43                   	inc    ebx
c00221df:	e9 26 ff ff ff       	jmp    c002210a <SoundDevice::floatTo16(float*, short*, int)+0xc>
c00221e4:	83 c4 10             	add    esp,0x10
c00221e7:	5b                   	pop    ebx
c00221e8:	5e                   	pop    esi
c00221e9:	5f                   	pop    edi
c00221ea:	c3                   	ret    
c00221eb:	90                   	nop

c00221ec <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00221ec:	57                   	push   edi
c00221ed:	56                   	push   esi
c00221ee:	53                   	push   ebx
c00221ef:	31 db                	xor    ebx,ebx
c00221f1:	83 ec 10             	sub    esp,0x10
c00221f4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00221f8:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00221fc:	0f 8d cb 00 00 00    	jge    c00222cd <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022202:	83 ec 0c             	sub    esp,0xc
c0022205:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022209:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002220c:	e8 2e 61 00 00       	call   c002833f <__extendsfdf2>
c0022211:	83 c4 10             	add    esp,0x10
c0022214:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022218:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002221c:	68 00 00 f0 3f       	push   0x3ff00000
c0022221:	6a 00                	push   0x0
c0022223:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022227:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002222b:	e8 9b 50 00 00       	call   c00272cb <__adddf3>
c0022230:	83 c4 10             	add    esp,0x10
c0022233:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022237:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002223b:	68 00 00 e0 3f       	push   0x3fe00000
c0022240:	6a 00                	push   0x0
c0022242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002224a:	e8 f9 56 00 00       	call   c0027948 <__muldf3>
c002224f:	83 c4 10             	add    esp,0x10
c0022252:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022256:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002225a:	68 00 00 60 40       	push   0x40600000
c002225f:	6a 00                	push   0x0
c0022261:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022265:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022269:	e8 da 56 00 00       	call   c0027948 <__muldf3>
c002226e:	59                   	pop    ecx
c002226f:	5f                   	pop    edi
c0022270:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022274:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022278:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002227c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022280:	e8 96 5f 00 00       	call   c002821b <__truncdfsf2>
c0022285:	5a                   	pop    edx
c0022286:	89 c7                	mov    edi,eax
c0022288:	59                   	pop    ecx
c0022289:	68 00 00 fe 42       	push   0x42fe0000
c002228e:	50                   	push   eax
c002228f:	e8 31 50 00 00       	call   c00272c5 <__gesf2>
c0022294:	83 c4 10             	add    esp,0x10
c0022297:	85 c0                	test   eax,eax
c0022299:	78 06                	js     c00222a1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002229b:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002229f:	eb 26                	jmp    c00222c7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00222a1:	50                   	push   eax
c00222a2:	50                   	push   eax
c00222a3:	6a 00                	push   0x0
c00222a5:	57                   	push   edi
c00222a6:	e8 1e 50 00 00       	call   c00272c9 <__lesf2>
c00222ab:	83 c4 10             	add    esp,0x10
c00222ae:	85 c0                	test   eax,eax
c00222b0:	7f 06                	jg     c00222b8 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00222b2:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00222b6:	eb 0f                	jmp    c00222c7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00222b8:	83 ec 0c             	sub    esp,0xc
c00222bb:	57                   	push   edi
c00222bc:	e8 1b 61 00 00       	call   c00283dc <lrintf>
c00222c1:	83 c4 10             	add    esp,0x10
c00222c4:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00222c7:	43                   	inc    ebx
c00222c8:	e9 2b ff ff ff       	jmp    c00221f8 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00222cd:	83 c4 10             	add    esp,0x10
c00222d0:	5b                   	pop    ebx
c00222d1:	5e                   	pop    esi
c00222d2:	5f                   	pop    edi
c00222d3:	c3                   	ret    

c00222d4 <SoundDevice::getAudio(int, float*, float*)>:
c00222d4:	55                   	push   ebp
c00222d5:	31 ed                	xor    ebp,ebp
c00222d7:	57                   	push   edi
c00222d8:	56                   	push   esi
c00222d9:	31 f6                	xor    esi,esi
c00222db:	53                   	push   ebx
c00222dc:	83 ec 20             	sub    esp,0x20
c00222df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00222e3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00222e7:	c1 e0 02             	shl    eax,0x2
c00222ea:	50                   	push   eax
c00222eb:	6a 00                	push   0x0
c00222ed:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00222f1:	e8 5a e4 fd ff       	call   c0000750 <memset>
c00222f6:	83 c4 10             	add    esp,0x10
c00222f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022301:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c0022308:	85 c9                	test   ecx,ecx
c002230a:	74 52                	je     c002235e <SoundDevice::getAudio(int, float*, float*)+0x8a>
c002230c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022310:	99                   	cdq    
c0022311:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022317:	50                   	push   eax
c0022318:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002231e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0022322:	51                   	push   ecx
c0022323:	e8 da f9 ff ff       	call   c0021d02 <SoundChannel::unbuffer(float*, int, int)>
c0022328:	31 d2                	xor    edx,edx
c002232a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002232e:	83 c4 10             	add    esp,0x10
c0022331:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022335:	7d 1e                	jge    c0022355 <SoundDevice::getAudio(int, float*, float*)+0x81>
c0022337:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c002233b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002233f:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0022342:	89 cf                	mov    edi,ecx
c0022344:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c002234a:	0f af ca             	imul   ecx,edx
c002234d:	42                   	inc    edx
c002234e:	01 e9                	add    ecx,ebp
c0022350:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c0022353:	eb dc                	jmp    c0022331 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c0022355:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0022359:	45                   	inc    ebp
c002235a:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c002235e:	46                   	inc    esi
c002235f:	83 fe 20             	cmp    esi,0x20
c0022362:	75 9d                	jne    c0022301 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c0022364:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022368:	83 c4 1c             	add    esp,0x1c
c002236b:	5b                   	pop    ebx
c002236c:	5e                   	pop    esi
c002236d:	5f                   	pop    edi
c002236e:	5d                   	pop    ebp
c002236f:	c3                   	ret    

c0022370 <PCI::open(int, int, void*)>:
c0022370:	83 ec 18             	sub    esp,0x18
c0022373:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022377:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002237b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022381:	8b 10                	mov    edx,DWORD PTR [eax]
c0022383:	50                   	push   eax
c0022384:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022387:	31 c0                	xor    eax,eax
c0022389:	83 c4 1c             	add    esp,0x1c
c002238c:	c3                   	ret    
c002238d:	90                   	nop

c002238e <PCI::close(int, int, void*)>:
c002238e:	31 c0                	xor    eax,eax
c0022390:	c3                   	ret    
c0022391:	90                   	nop

c0022392 <PCI::PCI()>:
c0022392:	83 ec 0c             	sub    esp,0xc
c0022395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022399:	83 ec 08             	sub    esp,0x8
c002239c:	68 18 c0 02 c0       	push   0xc002c018
c00223a1:	50                   	push   eax
c00223a2:	e8 fd 0f ff ff       	call   c00133a4 <Bus::Bus(char const*)>
c00223a7:	83 c4 10             	add    esp,0x10
c00223aa:	ba 04 c1 02 c0       	mov    edx,0xc002c104
c00223af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223b3:	89 10                	mov    DWORD PTR [eax],edx
c00223b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223b9:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00223c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223c7:	a3 24 1d 03 c0       	mov    ds:0xc0031d24,eax
c00223cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223d0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223d6:	0f b6 d0             	movzx  edx,al
c00223d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223dd:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00223e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223e8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223ee:	0f b6 d0             	movzx  edx,al
c00223f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223f5:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00223fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223fe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022404:	8d 50 01             	lea    edx,[eax+0x1]
c0022407:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002240b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022411:	0f b6 d0             	movzx  edx,al
c0022414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022418:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002241c:	83 c9 c0             	or     ecx,0xffffffc0
c002241f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022423:	90                   	nop
c0022424:	83 c4 0c             	add    esp,0xc
c0022427:	c3                   	ret    

c0022428 <PCI::readBAR8(unsigned int, int)>:
c0022428:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002242c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022430:	f6 c2 01             	test   dl,0x1
c0022433:	74 07                	je     c002243c <PCI::readBAR8(unsigned int, int)+0x14>
c0022435:	83 e2 fc             	and    edx,0xfffffffc
c0022438:	01 c2                	add    edx,eax
c002243a:	ec                   	in     al,dx
c002243b:	c3                   	ret    
c002243c:	83 e2 f0             	and    edx,0xfffffff0
c002243f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022442:	c3                   	ret    
c0022443:	90                   	nop

c0022444 <PCI::readBAR16(unsigned int, int)>:
c0022444:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022448:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002244c:	f6 c2 01             	test   dl,0x1
c002244f:	74 08                	je     c0022459 <PCI::readBAR16(unsigned int, int)+0x15>
c0022451:	83 e2 fc             	and    edx,0xfffffffc
c0022454:	01 c2                	add    edx,eax
c0022456:	66 ed                	in     ax,dx
c0022458:	c3                   	ret    
c0022459:	83 e2 f0             	and    edx,0xfffffff0
c002245c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022460:	c3                   	ret    
c0022461:	90                   	nop

c0022462 <PCI::readBAR32(unsigned int, int)>:
c0022462:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022466:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002246a:	f6 c2 01             	test   dl,0x1
c002246d:	74 07                	je     c0022476 <PCI::readBAR32(unsigned int, int)+0x14>
c002246f:	83 e2 fc             	and    edx,0xfffffffc
c0022472:	01 c2                	add    edx,eax
c0022474:	ed                   	in     eax,dx
c0022475:	c3                   	ret    
c0022476:	83 e2 f0             	and    edx,0xfffffff0
c0022479:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002247c:	c3                   	ret    
c002247d:	90                   	nop

c002247e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002247e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022482:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022486:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002248a:	f6 c2 01             	test   dl,0x1
c002248d:	74 07                	je     c0022496 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002248f:	83 e2 fc             	and    edx,0xfffffffc
c0022492:	01 ca                	add    edx,ecx
c0022494:	ee                   	out    dx,al
c0022495:	c3                   	ret    
c0022496:	83 e2 f0             	and    edx,0xfffffff0
c0022499:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002249c:	c3                   	ret    
c002249d:	90                   	nop

c002249e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002249e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00224a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224a6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00224aa:	f6 c2 01             	test   dl,0x1
c00224ad:	74 08                	je     c00224b7 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00224af:	83 e2 fc             	and    edx,0xfffffffc
c00224b2:	01 ca                	add    edx,ecx
c00224b4:	66 ef                	out    dx,ax
c00224b6:	c3                   	ret    
c00224b7:	83 e2 f0             	and    edx,0xfffffff0
c00224ba:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00224be:	c3                   	ret    
c00224bf:	90                   	nop

c00224c0 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00224c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00224c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00224cc:	f6 c2 01             	test   dl,0x1
c00224cf:	74 07                	je     c00224d8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00224d1:	83 e2 fc             	and    edx,0xfffffffc
c00224d4:	01 ca                	add    edx,ecx
c00224d6:	ef                   	out    dx,eax
c00224d7:	c3                   	ret    
c00224d8:	83 e2 f0             	and    edx,0xfffffff0
c00224db:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00224de:	c3                   	ret    
c00224df:	90                   	nop

c00224e0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00224e0:	55                   	push   ebp
c00224e1:	57                   	push   edi
c00224e2:	56                   	push   esi
c00224e3:	53                   	push   ebx
c00224e4:	83 ec 0c             	sub    esp,0xc
c00224e7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00224eb:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00224ef:	89 f0                	mov    eax,esi
c00224f1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00224f5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00224f9:	3c 07                	cmp    al,0x7
c00224fb:	76 10                	jbe    c002250d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00224fd:	83 ec 0c             	sub    esp,0xc
c0022500:	68 20 c0 02 c0       	push   0xc002c020
c0022505:	e8 65 79 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c002250a:	83 c4 10             	add    esp,0x10
c002250d:	80 fb 0f             	cmp    bl,0xf
c0022510:	76 10                	jbe    c0022522 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022512:	83 ec 0c             	sub    esp,0xc
c0022515:	68 50 c0 02 c0       	push   0xc002c050
c002251a:	e8 50 79 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c002251f:	83 c4 10             	add    esp,0x10
c0022522:	8d 04 36             	lea    eax,[esi+esi*1]
c0022525:	ba f8 0c 00 00       	mov    edx,0xcf8
c002252a:	83 c8 f0             	or     eax,0xfffffff0
c002252d:	ee                   	out    dx,al
c002252e:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022533:	89 e8                	mov    eax,ebp
c0022535:	ee                   	out    dx,al
c0022536:	83 c4 0c             	add    esp,0xc
c0022539:	89 d8                	mov    eax,ebx
c002253b:	66 81 e7 fc 00       	and    di,0xfc
c0022540:	5b                   	pop    ebx
c0022541:	c1 e0 08             	shl    eax,0x8
c0022544:	5e                   	pop    esi
c0022545:	09 f8                	or     eax,edi
c0022547:	5f                   	pop    edi
c0022548:	66 0d 00 c0          	or     ax,0xc000
c002254c:	5d                   	pop    ebp
c002254d:	c3                   	ret    

c002254e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002254e:	57                   	push   edi
c002254f:	56                   	push   esi
c0022550:	53                   	push   ebx
c0022551:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022555:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022559:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002255f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022563:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022567:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002256b:	83 ff 01             	cmp    edi,0x1
c002256e:	75 3e                	jne    c00225ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022570:	89 de                	mov    esi,ebx
c0022572:	0f b6 c0             	movzx  eax,al
c0022575:	81 e6 fc 00 00 00    	and    esi,0xfc
c002257b:	c1 e0 10             	shl    eax,0x10
c002257e:	0f b6 c9             	movzx  ecx,cl
c0022581:	09 f0                	or     eax,esi
c0022583:	c1 e1 08             	shl    ecx,0x8
c0022586:	0f b6 d2             	movzx  edx,dl
c0022589:	09 c8                	or     eax,ecx
c002258b:	c1 e2 0b             	shl    edx,0xb
c002258e:	09 d0                	or     eax,edx
c0022590:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022595:	0d 00 00 00 80       	or     eax,0x80000000
c002259a:	ef                   	out    dx,eax
c002259b:	ba fc 0c 00 00       	mov    edx,0xcfc
c00225a0:	ed                   	in     eax,dx
c00225a1:	83 e3 02             	and    ebx,0x2
c00225a4:	0f b6 cb             	movzx  ecx,bl
c00225a7:	c1 e1 03             	shl    ecx,0x3
c00225aa:	d3 e8                	shr    eax,cl
c00225ac:	eb 43                	jmp    c00225f1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00225ae:	83 ff 02             	cmp    edi,0x2
c00225b1:	75 2c                	jne    c00225df <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00225b3:	83 ec 0c             	sub    esp,0xc
c00225b6:	0f b6 c9             	movzx  ecx,cl
c00225b9:	0f b6 d2             	movzx  edx,dl
c00225bc:	0f b6 fb             	movzx  edi,bl
c00225bf:	0f b6 c0             	movzx  eax,al
c00225c2:	57                   	push   edi
c00225c3:	51                   	push   ecx
c00225c4:	52                   	push   edx
c00225c5:	50                   	push   eax
c00225c6:	56                   	push   esi
c00225c7:	e8 14 ff ff ff       	call   c00224e0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225cc:	89 c2                	mov    edx,eax
c00225ce:	ed                   	in     eax,dx
c00225cf:	83 e3 02             	and    ebx,0x2
c00225d2:	83 c4 20             	add    esp,0x20
c00225d5:	0f b6 cb             	movzx  ecx,bl
c00225d8:	c1 e1 03             	shl    ecx,0x3
c00225db:	d3 e8                	shr    eax,cl
c00225dd:	eb 12                	jmp    c00225f1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00225df:	83 ec 0c             	sub    esp,0xc
c00225e2:	68 80 c0 02 c0       	push   0xc002c080
c00225e7:	e8 83 78 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c00225ec:	83 c4 10             	add    esp,0x10
c00225ef:	31 c0                	xor    eax,eax
c00225f1:	5b                   	pop    ebx
c00225f2:	5e                   	pop    esi
c00225f3:	5f                   	pop    edi
c00225f4:	c3                   	ret    
c00225f5:	90                   	nop

c00225f6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00225f6:	83 ec 18             	sub    esp,0x18
c00225f9:	6a 00                	push   0x0
c00225fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022600:	50                   	push   eax
c0022601:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022606:	50                   	push   eax
c0022607:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002260c:	50                   	push   eax
c002260d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022611:	e8 38 ff ff ff       	call   c002254e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022616:	83 c4 2c             	add    esp,0x2c
c0022619:	c3                   	ret    

c002261a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002261a:	83 ec 18             	sub    esp,0x18
c002261d:	6a 0e                	push   0xe
c002261f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022624:	50                   	push   eax
c0022625:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002262a:	50                   	push   eax
c002262b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022630:	50                   	push   eax
c0022631:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022635:	e8 14 ff ff ff       	call   c002254e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002263a:	83 c4 2c             	add    esp,0x2c
c002263d:	0f b6 c0             	movzx  eax,al
c0022640:	c3                   	ret    
c0022641:	90                   	nop

c0022642 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022642:	55                   	push   ebp
c0022643:	57                   	push   edi
c0022644:	56                   	push   esi
c0022645:	53                   	push   ebx
c0022646:	83 ec 18             	sub    esp,0x18
c0022649:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002264e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022653:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022658:	6a 0a                	push   0xa
c002265a:	56                   	push   esi
c002265b:	55                   	push   ebp
c002265c:	57                   	push   edi
c002265d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022661:	e8 e8 fe ff ff       	call   c002254e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022666:	83 c4 14             	add    esp,0x14
c0022669:	89 c3                	mov    ebx,eax
c002266b:	6a 0a                	push   0xa
c002266d:	0f b6 db             	movzx  ebx,bl
c0022670:	56                   	push   esi
c0022671:	55                   	push   ebp
c0022672:	57                   	push   edi
c0022673:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022677:	e8 d2 fe ff ff       	call   c002254e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002267c:	83 c4 2c             	add    esp,0x2c
c002267f:	25 00 ff 00 00       	and    eax,0xff00
c0022684:	09 d8                	or     eax,ebx
c0022686:	5b                   	pop    ebx
c0022687:	5e                   	pop    esi
c0022688:	5f                   	pop    edi
c0022689:	5d                   	pop    ebp
c002268a:	c3                   	ret    
c002268b:	90                   	nop

c002268c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002268c:	83 ec 18             	sub    esp,0x18
c002268f:	6a 08                	push   0x8
c0022691:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022696:	50                   	push   eax
c0022697:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002269c:	50                   	push   eax
c002269d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226a2:	50                   	push   eax
c00226a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226a7:	e8 a2 fe ff ff       	call   c002254e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226ac:	83 c4 2c             	add    esp,0x2c
c00226af:	0f b6 c4             	movzx  eax,ah
c00226b2:	c3                   	ret    
c00226b3:	90                   	nop

c00226b4 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00226b4:	83 ec 18             	sub    esp,0x18
c00226b7:	6a 08                	push   0x8
c00226b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226be:	50                   	push   eax
c00226bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226c4:	50                   	push   eax
c00226c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226ca:	50                   	push   eax
c00226cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226cf:	e8 7a fe ff ff       	call   c002254e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226d4:	83 c4 2c             	add    esp,0x2c
c00226d7:	c3                   	ret    

c00226d8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00226d8:	83 ec 18             	sub    esp,0x18
c00226db:	6a 3c                	push   0x3c
c00226dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226e2:	50                   	push   eax
c00226e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226e8:	50                   	push   eax
c00226e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226ee:	50                   	push   eax
c00226ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226f3:	e8 56 fe ff ff       	call   c002254e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226f8:	83 c4 2c             	add    esp,0x2c
c00226fb:	c3                   	ret    

c00226fc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00226fc:	83 ec 18             	sub    esp,0x18
c00226ff:	6a 18                	push   0x18
c0022701:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022706:	50                   	push   eax
c0022707:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002270c:	50                   	push   eax
c002270d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022712:	50                   	push   eax
c0022713:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022717:	e8 32 fe ff ff       	call   c002254e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002271c:	83 c4 2c             	add    esp,0x2c
c002271f:	0f b6 c4             	movzx  eax,ah
c0022722:	c3                   	ret    
c0022723:	90                   	nop

c0022724 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022724:	55                   	push   ebp
c0022725:	57                   	push   edi
c0022726:	56                   	push   esi
c0022727:	53                   	push   ebx
c0022728:	83 ec 28             	sub    esp,0x28
c002272b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002272f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0022734:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0022739:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002273e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022745:	8d 43 12             	lea    eax,[ebx+0x12]
c0022748:	83 c3 10             	add    ebx,0x10
c002274b:	0f b6 c0             	movzx  eax,al
c002274e:	0f b6 db             	movzx  ebx,bl
c0022751:	50                   	push   eax
c0022752:	51                   	push   ecx
c0022753:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0022757:	57                   	push   edi
c0022758:	55                   	push   ebp
c0022759:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002275d:	e8 ec fd ff ff       	call   c002254e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022762:	83 c4 14             	add    esp,0x14
c0022765:	89 c6                	mov    esi,eax
c0022767:	53                   	push   ebx
c0022768:	c1 e6 10             	shl    esi,0x10
c002276b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002276f:	51                   	push   ecx
c0022770:	57                   	push   edi
c0022771:	55                   	push   ebp
c0022772:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022776:	e8 d3 fd ff ff       	call   c002254e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002277b:	83 c4 3c             	add    esp,0x3c
c002277e:	0f b7 c0             	movzx  eax,ax
c0022781:	5b                   	pop    ebx
c0022782:	09 f0                	or     eax,esi
c0022784:	5e                   	pop    esi
c0022785:	5f                   	pop    edi
c0022786:	5d                   	pop    ebp
c0022787:	c3                   	ret    

c0022788 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022788:	55                   	push   ebp
c0022789:	57                   	push   edi
c002278a:	56                   	push   esi
c002278b:	53                   	push   ebx
c002278c:	83 ec 0c             	sub    esp,0xc
c002278f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022793:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022797:	89 f5                	mov    ebp,esi
c0022799:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c002279f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00227a3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00227a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00227ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00227af:	83 f9 01             	cmp    ecx,0x1
c00227b2:	75 5d                	jne    c0022811 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00227b4:	0f b6 c8             	movzx  ecx,al
c00227b7:	0f b6 d2             	movzx  edx,dl
c00227ba:	c1 e1 10             	shl    ecx,0x10
c00227bd:	c1 e2 0b             	shl    edx,0xb
c00227c0:	89 f0                	mov    eax,esi
c00227c2:	25 fc 00 00 00       	and    eax,0xfc
c00227c7:	09 c1                	or     ecx,eax
c00227c9:	89 e8                	mov    eax,ebp
c00227cb:	0f b6 c0             	movzx  eax,al
c00227ce:	c1 e0 08             	shl    eax,0x8
c00227d1:	09 c1                	or     ecx,eax
c00227d3:	09 d1                	or     ecx,edx
c00227d5:	ba f8 0c 00 00       	mov    edx,0xcf8
c00227da:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00227e0:	89 c8                	mov    eax,ecx
c00227e2:	ef                   	out    dx,eax
c00227e3:	ba fc 0c 00 00       	mov    edx,0xcfc
c00227e8:	ed                   	in     eax,dx
c00227e9:	0f b7 db             	movzx  ebx,bx
c00227ec:	83 e6 02             	and    esi,0x2
c00227ef:	74 0a                	je     c00227fb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00227f1:	0f b7 d0             	movzx  edx,ax
c00227f4:	c1 e3 10             	shl    ebx,0x10
c00227f7:	09 d3                	or     ebx,edx
c00227f9:	eb 05                	jmp    c0022800 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00227fb:	66 31 c0             	xor    ax,ax
c00227fe:	09 c3                	or     ebx,eax
c0022800:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022805:	89 c8                	mov    eax,ecx
c0022807:	ef                   	out    dx,eax
c0022808:	ba fc 0c 00 00       	mov    edx,0xcfc
c002280d:	89 d8                	mov    eax,ebx
c002280f:	eb 41                	jmp    c0022852 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022811:	83 f9 02             	cmp    ecx,0x2
c0022814:	75 45                	jne    c002285b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0022816:	83 ec 0c             	sub    esp,0xc
c0022819:	0f b6 d2             	movzx  edx,dl
c002281c:	89 f1                	mov    ecx,esi
c002281e:	0f b6 c0             	movzx  eax,al
c0022821:	0f b6 f1             	movzx  esi,cl
c0022824:	89 e9                	mov    ecx,ebp
c0022826:	56                   	push   esi
c0022827:	0f b6 c9             	movzx  ecx,cl
c002282a:	51                   	push   ecx
c002282b:	52                   	push   edx
c002282c:	50                   	push   eax
c002282d:	57                   	push   edi
c002282e:	e8 ad fc ff ff       	call   c00224e0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022833:	89 c2                	mov    edx,eax
c0022835:	ed                   	in     eax,dx
c0022836:	83 c4 20             	add    esp,0x20
c0022839:	0f b7 db             	movzx  ebx,bx
c002283c:	f6 c2 02             	test   dl,0x2
c002283f:	74 0c                	je     c002284d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022841:	0f b7 c8             	movzx  ecx,ax
c0022844:	89 d8                	mov    eax,ebx
c0022846:	c1 e0 10             	shl    eax,0x10
c0022849:	09 c8                	or     eax,ecx
c002284b:	eb 05                	jmp    c0022852 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002284d:	66 31 c0             	xor    ax,ax
c0022850:	09 d8                	or     eax,ebx
c0022852:	ef                   	out    dx,eax
c0022853:	83 c4 0c             	add    esp,0xc
c0022856:	5b                   	pop    ebx
c0022857:	5e                   	pop    esi
c0022858:	5f                   	pop    edi
c0022859:	5d                   	pop    ebp
c002285a:	c3                   	ret    
c002285b:	c7 44 24 20 80 c0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c080
c0022863:	83 c4 0c             	add    esp,0xc
c0022866:	5b                   	pop    ebx
c0022867:	5e                   	pop    esi
c0022868:	5f                   	pop    edi
c0022869:	5d                   	pop    ebp
c002286a:	e9 00 76 ff ff       	jmp    c0019e6f <Krnl::panic(char const*)>
c002286f:	90                   	nop

c0022870 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022870:	55                   	push   ebp
c0022871:	57                   	push   edi
c0022872:	56                   	push   esi
c0022873:	53                   	push   ebx
c0022874:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002287a:	80 3d 30 1d 03 c0 00 	cmp    BYTE PTR ds:0xc0031d30,0x0
c0022881:	0f 85 84 00 00 00    	jne    c002290b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0022887:	83 ec 0c             	sub    esp,0xc
c002288a:	68 14 01 00 00       	push   0x114
c002288f:	e8 05 cd fe ff       	call   c000f599 <malloc>
c0022894:	83 c4 0c             	add    esp,0xc
c0022897:	89 c3                	mov    ebx,eax
c0022899:	ff 35 30 0f 03 c0    	push   DWORD PTR ds:0xc0030f30
c002289f:	68 86 c0 02 c0       	push   0xc002c086
c00228a4:	50                   	push   eax
c00228a5:	e8 b8 03 ff ff       	call   c0012c62 <File::File(char const*, Process*)>
c00228aa:	5a                   	pop    edx
c00228ab:	59                   	pop    ecx
c00228ac:	6a 01                	push   0x1
c00228ae:	53                   	push   ebx
c00228af:	e8 12 04 ff ff       	call   c0012cc6 <File::open(FileOpenMode)>
c00228b4:	83 c4 0c             	add    esp,0xc
c00228b7:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00228bb:	50                   	push   eax
c00228bc:	8d 44 24 28          	lea    eax,[esp+0x28]
c00228c0:	50                   	push   eax
c00228c1:	53                   	push   ebx
c00228c2:	e8 ab 06 ff ff       	call   c0012f72 <File::stat(unsigned long long*, bool*)>
c00228c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00228cb:	40                   	inc    eax
c00228cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00228cf:	e8 c5 cc fe ff       	call   c000f599 <malloc>
c00228d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00228d8:	a3 2c 1d 03 c0       	mov    ds:0xc0031d2c,eax
c00228dd:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00228e1:	5e                   	pop    esi
c00228e2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00228e4:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00228e8:	51                   	push   ecx
c00228e9:	50                   	push   eax
c00228ea:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00228ee:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00228f2:	53                   	push   ebx
c00228f3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00228f6:	83 c4 14             	add    esp,0x14
c00228f9:	53                   	push   ebx
c00228fa:	e8 25 04 ff ff       	call   c0012d24 <File::close()>
c00228ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022903:	83 c4 10             	add    esp,0x10
c0022906:	a3 28 1d 03 c0       	mov    ds:0xc0031d28,eax
c002290b:	a1 28 1d 03 c0       	mov    eax,ds:0xc0031d28
c0022910:	8b 15 2c 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031d2c
c0022916:	89 04 24             	mov    DWORD PTR [esp],eax
c0022919:	31 ff                	xor    edi,edi
c002291b:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0022923:	31 f6                	xor    esi,esi
c0022925:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c002292a:	31 db                	xor    ebx,ebx
c002292c:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0022934:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0022939:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022940:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0022944:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c002294b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002294f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022952:	0f 8e 6b 01 00 00    	jle    c0022ac3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0022958:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c002295b:	d4 40                	aam    0x40
c002295d:	d5 39                	aad    0x39
c002295f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022963:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0022967:	d4 40                	aam    0x40
c0022969:	d5 39                	aad    0x39
c002296b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002296f:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022973:	d4 40                	aam    0x40
c0022975:	d5 39                	aad    0x39
c0022977:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c002297b:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c002297f:	d4 40                	aam    0x40
c0022981:	d5 39                	aad    0x39
c0022983:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022987:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c002298b:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002298f:	3c 56                	cmp    al,0x56
c0022991:	74 45                	je     c00229d8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022993:	d4 40                	aam    0x40
c0022995:	d5 39                	aad    0x39
c0022997:	8d 48 d0             	lea    ecx,[eax-0x30]
c002299a:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c002299e:	0f b6 c9             	movzx  ecx,cl
c00229a1:	c1 e1 04             	shl    ecx,0x4
c00229a4:	d4 40                	aam    0x40
c00229a6:	d5 39                	aad    0x39
c00229a8:	8d 58 d0             	lea    ebx,[eax-0x30]
c00229ab:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c00229af:	0f b6 db             	movzx  ebx,bl
c00229b2:	09 cb                	or     ebx,ecx
c00229b4:	c1 e3 04             	shl    ebx,0x4
c00229b7:	d4 40                	aam    0x40
c00229b9:	d5 39                	aad    0x39
c00229bb:	8d 48 d0             	lea    ecx,[eax-0x30]
c00229be:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c00229c2:	0f b6 c9             	movzx  ecx,cl
c00229c5:	09 cb                	or     ebx,ecx
c00229c7:	c1 e3 04             	shl    ebx,0x4
c00229ca:	89 d9                	mov    ecx,ebx
c00229cc:	d4 40                	aam    0x40
c00229ce:	d5 39                	aad    0x39
c00229d0:	8d 58 d0             	lea    ebx,[eax-0x30]
c00229d3:	0f b6 db             	movzx  ebx,bl
c00229d6:	09 cb                	or     ebx,ecx
c00229d8:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c00229dc:	80 f9 44             	cmp    cl,0x44
c00229df:	74 47                	je     c0022a28 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c00229e1:	88 c8                	mov    al,cl
c00229e3:	d4 40                	aam    0x40
c00229e5:	d5 39                	aad    0x39
c00229e7:	83 e8 30             	sub    eax,0x30
c00229ea:	0f b6 e8             	movzx  ebp,al
c00229ed:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c00229f1:	c1 e5 04             	shl    ebp,0x4
c00229f4:	d4 40                	aam    0x40
c00229f6:	d5 39                	aad    0x39
c00229f8:	83 e8 30             	sub    eax,0x30
c00229fb:	0f b6 f0             	movzx  esi,al
c00229fe:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0022a02:	09 ee                	or     esi,ebp
c0022a04:	c1 e6 04             	shl    esi,0x4
c0022a07:	d4 40                	aam    0x40
c0022a09:	d5 39                	aad    0x39
c0022a0b:	83 e8 30             	sub    eax,0x30
c0022a0e:	0f b6 e8             	movzx  ebp,al
c0022a11:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0022a15:	09 ee                	or     esi,ebp
c0022a17:	c1 e6 04             	shl    esi,0x4
c0022a1a:	89 f5                	mov    ebp,esi
c0022a1c:	d4 40                	aam    0x40
c0022a1e:	d5 39                	aad    0x39
c0022a20:	83 e8 30             	sub    eax,0x30
c0022a23:	0f b6 f0             	movzx  esi,al
c0022a26:	09 ee                	or     esi,ebp
c0022a28:	83 c7 10             	add    edi,0x10
c0022a2b:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0022a2f:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022a32:	3c 0a                	cmp    al,0xa
c0022a34:	74 09                	je     c0022a3f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0022a36:	45                   	inc    ebp
c0022a37:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022a3a:	75 16                	jne    c0022a52 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022a3c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022a3f:	3c 0a                	cmp    al,0xa
c0022a41:	0f 94 c0             	sete   al
c0022a44:	0f b6 c0             	movzx  eax,al
c0022a47:	01 c7                	add    edi,eax
c0022a49:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0022a4e:	75 0c                	jne    c0022a5c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022a50:	eb 15                	jmp    c0022a67 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022a52:	47                   	inc    edi
c0022a53:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0022a56:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022a5a:	eb d3                	jmp    c0022a2f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022a5c:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022a61:	0f 85 e8 fe ff ff    	jne    c002294f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a67:	80 f9 44             	cmp    cl,0x44
c0022a6a:	74 0b                	je     c0022a77 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022a6c:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022a71:	0f 85 d8 fe ff ff    	jne    c002294f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a77:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022a7b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022a7f:	c1 e1 04             	shl    ecx,0x4
c0022a82:	83 e8 30             	sub    eax,0x30
c0022a85:	09 c8                	or     eax,ecx
c0022a87:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022a8b:	0f 85 be fe ff ff    	jne    c002294f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a91:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022a95:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022a99:	c1 e1 04             	shl    ecx,0x4
c0022a9c:	83 e8 30             	sub    eax,0x30
c0022a9f:	09 c8                	or     eax,ecx
c0022aa1:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022aa5:	0f 85 a4 fe ff ff    	jne    c002294f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022aab:	50                   	push   eax
c0022aac:	50                   	push   eax
c0022aad:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022ab1:	50                   	push   eax
c0022ab2:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0022ab9:	e8 4e dd fd ff       	call   c000080c <strcpy>
c0022abe:	83 c4 10             	add    esp,0x10
c0022ac1:	eb 15                	jmp    c0022ad8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022ac3:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022aca:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022ad5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022ad8:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022adf:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022ae5:	5b                   	pop    ebx
c0022ae6:	5e                   	pop    esi
c0022ae7:	5f                   	pop    edi
c0022ae8:	5d                   	pop    ebp
c0022ae9:	c3                   	ret    

c0022aea <PCI::checkBus(unsigned char)>:
c0022aea:	56                   	push   esi
c0022aeb:	53                   	push   ebx
c0022aec:	31 db                	xor    ebx,ebx
c0022aee:	51                   	push   ecx
c0022aef:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022af4:	52                   	push   edx
c0022af5:	53                   	push   ebx
c0022af6:	43                   	inc    ebx
c0022af7:	56                   	push   esi
c0022af8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022afc:	e8 37 03 00 00       	call   c0022e38 <PCI::checkDevice(unsigned char, unsigned char)>
c0022b01:	83 c4 10             	add    esp,0x10
c0022b04:	83 fb 20             	cmp    ebx,0x20
c0022b07:	75 eb                	jne    c0022af4 <PCI::checkBus(unsigned char)+0xa>
c0022b09:	58                   	pop    eax
c0022b0a:	5b                   	pop    ebx
c0022b0b:	5e                   	pop    esi
c0022b0c:	c3                   	ret    
c0022b0d:	90                   	nop

c0022b0e <PCI::foundDevice(PCIDeviceInfo)>:
c0022b0e:	55                   	push   ebp
c0022b0f:	57                   	push   edi
c0022b10:	56                   	push   esi
c0022b11:	53                   	push   ebx
c0022b12:	83 ec 1c             	sub    esp,0x1c
c0022b15:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022b19:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022b1f:	0f 84 52 01 00 00    	je     c0022c77 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b25:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022b29:	66 81 f9 06 04       	cmp    cx,0x406
c0022b2e:	75 2c                	jne    c0022b5c <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022b30:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022b35:	50                   	push   eax
c0022b36:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022b3b:	50                   	push   eax
c0022b3c:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022b41:	50                   	push   eax
c0022b42:	56                   	push   esi
c0022b43:	e8 b4 fb ff ff       	call   c00226fc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022b48:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022b4c:	0f b6 c0             	movzx  eax,al
c0022b4f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022b53:	83 c4 2c             	add    esp,0x2c
c0022b56:	5b                   	pop    ebx
c0022b57:	5e                   	pop    esi
c0022b58:	5f                   	pop    edi
c0022b59:	5d                   	pop    ebp
c0022b5a:	eb 8e                	jmp    c0022aea <PCI::checkBus(unsigned char)>
c0022b5c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022b60:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022b66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b6a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022b6e:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022b72:	88 d3                	mov    bl,dl
c0022b74:	85 c0                	test   eax,eax
c0022b76:	74 33                	je     c0022bab <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022b78:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022b7b:	85 d2                	test   edx,edx
c0022b7d:	74 28                	je     c0022ba7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b7f:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022b85:	31 ef                	xor    edi,ebp
c0022b87:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022b8d:	75 18                	jne    c0022ba7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b8f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022b93:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022b99:	75 0c                	jne    c0022ba7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b9b:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022ba1:	0f 84 d0 00 00 00    	je     c0022c77 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022ba7:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ba9:	eb c9                	jmp    c0022b74 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022bab:	66 81 f9 01 06       	cmp    cx,0x601
c0022bb0:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022bb4:	75 19                	jne    c0022bcf <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022bb6:	83 ec 0c             	sub    esp,0xc
c0022bb9:	68 64 01 00 00       	push   0x164
c0022bbe:	e8 d6 c9 fe ff       	call   c000f599 <malloc>
c0022bc3:	89 c5                	mov    ebp,eax
c0022bc5:	89 04 24             	mov    DWORD PTR [esp],eax
c0022bc8:	e8 85 0e 00 00       	call   c0023a52 <SATABus::SATABus()>
c0022bcd:	eb 1e                	jmp    c0022bed <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022bcf:	66 81 f9 01 01       	cmp    cx,0x101
c0022bd4:	75 60                	jne    c0022c36 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022bd6:	83 ec 0c             	sub    esp,0xc
c0022bd9:	68 70 02 00 00       	push   0x270
c0022bde:	e8 b6 c9 fe ff       	call   c000f599 <malloc>
c0022be3:	89 c5                	mov    ebp,eax
c0022be5:	89 04 24             	mov    DWORD PTR [esp],eax
c0022be8:	e8 0f 03 00 00       	call   c0022efc <IDE::IDE()>
c0022bed:	58                   	pop    eax
c0022bee:	5a                   	pop    edx
c0022bef:	55                   	push   ebp
c0022bf0:	56                   	push   esi
c0022bf1:	e8 46 0f ff ff       	call   c0013b3c <Device::addChild(Device*)>
c0022bf6:	83 ec 1c             	sub    esp,0x1c
c0022bf9:	b9 09 00 00 00       	mov    ecx,0x9
c0022bfe:	fc                   	cld    
c0022bff:	89 e7                	mov    edi,esp
c0022c01:	89 de                	mov    esi,ebx
c0022c03:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c05:	55                   	push   ebp
c0022c06:	e8 43 0e ff ff       	call   c0013a4e <Device::preOpenPCI(PCIDeviceInfo)>
c0022c0b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022c0e:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022c12:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022c1a:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022c22:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022c2a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c2d:	83 c4 4c             	add    esp,0x4c
c0022c30:	5b                   	pop    ebx
c0022c31:	5e                   	pop    esi
c0022c32:	5f                   	pop    edi
c0022c33:	5d                   	pop    ebp
c0022c34:	ff e0                	jmp    eax
c0022c36:	83 ec 0c             	sub    esp,0xc
c0022c39:	68 58 01 00 00       	push   0x158
c0022c3e:	e8 56 c9 fe ff       	call   c000f599 <malloc>
c0022c43:	89 c5                	mov    ebp,eax
c0022c45:	58                   	pop    eax
c0022c46:	5a                   	pop    edx
c0022c47:	68 9f c0 02 c0       	push   0xc002c09f
c0022c4c:	55                   	push   ebp
c0022c4d:	e8 f4 11 ff ff       	call   c0013e46 <DriverlessDevice::DriverlessDevice(char const*)>
c0022c52:	59                   	pop    ecx
c0022c53:	5f                   	pop    edi
c0022c54:	55                   	push   ebp
c0022c55:	56                   	push   esi
c0022c56:	e8 e1 0e ff ff       	call   c0013b3c <Device::addChild(Device*)>
c0022c5b:	b9 09 00 00 00       	mov    ecx,0x9
c0022c60:	fc                   	cld    
c0022c61:	89 df                	mov    edi,ebx
c0022c63:	89 de                	mov    esi,ebx
c0022c65:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c67:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022c6b:	83 c4 2c             	add    esp,0x2c
c0022c6e:	5b                   	pop    ebx
c0022c6f:	5e                   	pop    esi
c0022c70:	5f                   	pop    edi
c0022c71:	5d                   	pop    ebp
c0022c72:	e9 d7 0d ff ff       	jmp    c0013a4e <Device::preOpenPCI(PCIDeviceInfo)>
c0022c77:	83 c4 1c             	add    esp,0x1c
c0022c7a:	5b                   	pop    ebx
c0022c7b:	5e                   	pop    esi
c0022c7c:	5f                   	pop    edi
c0022c7d:	5d                   	pop    ebp
c0022c7e:	c3                   	ret    
c0022c7f:	90                   	nop

c0022c80 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022c80:	55                   	push   ebp
c0022c81:	57                   	push   edi
c0022c82:	56                   	push   esi
c0022c83:	53                   	push   ebx
c0022c84:	83 ec 68             	sub    esp,0x68
c0022c87:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022c8b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022c92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022c96:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022c9d:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022ca2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022ca6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022cad:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022cb2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022cb6:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022cbb:	6a 0c                	push   0xc
c0022cbd:	57                   	push   edi
c0022cbe:	53                   	push   ebx
c0022cbf:	56                   	push   esi
c0022cc0:	55                   	push   ebp
c0022cc1:	e8 88 f8 ff ff       	call   c002254e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cc6:	83 c4 20             	add    esp,0x20
c0022cc9:	57                   	push   edi
c0022cca:	53                   	push   ebx
c0022ccb:	56                   	push   esi
c0022ccc:	55                   	push   ebp
c0022ccd:	e8 70 f9 ff ff       	call   c0022642 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022cd2:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022cd7:	57                   	push   edi
c0022cd8:	53                   	push   ebx
c0022cd9:	56                   	push   esi
c0022cda:	55                   	push   ebp
c0022cdb:	e8 f8 f9 ff ff       	call   c00226d8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022ce0:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022ce4:	83 c4 14             	add    esp,0x14
c0022ce7:	6a 3c                	push   0x3c
c0022ce9:	57                   	push   edi
c0022cea:	53                   	push   ebx
c0022ceb:	56                   	push   esi
c0022cec:	55                   	push   ebp
c0022ced:	e8 5c f8 ff ff       	call   c002254e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cf2:	0f b6 c4             	movzx  eax,ah
c0022cf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022cf9:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022cfd:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022d01:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0022d06:	83 c4 20             	add    esp,0x20
c0022d09:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022d0f:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022d16:	74 7c                	je     c0022d94 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022d18:	31 c0                	xor    eax,eax
c0022d1a:	8b 15 e8 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9e8
c0022d20:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d26:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022d2c:	7e 66                	jle    c0022d94 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022d2e:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022d31:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022d38:	39 cb                	cmp    ebx,ecx
c0022d3a:	75 55                	jne    c0022d91 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022d3c:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022d43:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022d47:	75 48                	jne    c0022d91 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022d49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022d4d:	83 ec 0c             	sub    esp,0xc
c0022d50:	68 b9 c0 02 c0       	push   0xc002c0b9
c0022d55:	e8 a9 f9 fe ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0022d5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022d5e:	8b 15 e8 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9e8
c0022d64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022d68:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d6e:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022d76:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022d7a:	52                   	push   edx
c0022d7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d7f:	53                   	push   ebx
c0022d80:	68 de c0 02 c0       	push   0xc002c0de
c0022d85:	e8 79 f9 fe ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0022d8a:	83 c4 20             	add    esp,0x20
c0022d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d91:	40                   	inc    eax
c0022d92:	eb 86                	jmp    c0022d1a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022d94:	31 d2                	xor    edx,edx
c0022d96:	83 ec 0c             	sub    esp,0xc
c0022d99:	57                   	push   edi
c0022d9a:	53                   	push   ebx
c0022d9b:	56                   	push   esi
c0022d9c:	52                   	push   edx
c0022d9d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022da1:	55                   	push   ebp
c0022da2:	e8 7d f9 ff ff       	call   c0022724 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022da7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022dab:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022daf:	42                   	inc    edx
c0022db0:	83 c4 20             	add    esp,0x20
c0022db3:	83 fa 06             	cmp    edx,0x6
c0022db6:	75 de                	jne    c0022d96 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022db8:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022dbd:	83 ec 0c             	sub    esp,0xc
c0022dc0:	86 e0                	xchg   al,ah
c0022dc2:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022dc7:	6a 02                	push   0x2
c0022dc9:	57                   	push   edi
c0022dca:	53                   	push   ebx
c0022dcb:	56                   	push   esi
c0022dcc:	55                   	push   ebp
c0022dcd:	e8 7c f7 ff ff       	call   c002254e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022dd2:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022dd7:	83 c4 20             	add    esp,0x20
c0022dda:	57                   	push   edi
c0022ddb:	53                   	push   ebx
c0022ddc:	56                   	push   esi
c0022ddd:	55                   	push   ebp
c0022dde:	e8 a9 f8 ff ff       	call   c002268c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022de3:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022de7:	57                   	push   edi
c0022de8:	53                   	push   ebx
c0022de9:	56                   	push   esi
c0022dea:	55                   	push   ebp
c0022deb:	e8 06 f8 ff ff       	call   c00225f6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022df0:	b9 09 00 00 00       	mov    ecx,0x9
c0022df5:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022dfa:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022dfe:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022e02:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022e06:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022e0a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022e0e:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022e12:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022e16:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022e1a:	83 ec 0c             	sub    esp,0xc
c0022e1d:	fc                   	cld    
c0022e1e:	89 e7                	mov    edi,esp
c0022e20:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022e24:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022e26:	55                   	push   ebp
c0022e27:	e8 e2 fc ff ff       	call   c0022b0e <PCI::foundDevice(PCIDeviceInfo)>
c0022e2c:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022e32:	5b                   	pop    ebx
c0022e33:	5e                   	pop    esi
c0022e34:	5f                   	pop    edi
c0022e35:	5d                   	pop    ebp
c0022e36:	c3                   	ret    
c0022e37:	90                   	nop

c0022e38 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022e38:	55                   	push   ebp
c0022e39:	57                   	push   edi
c0022e3a:	56                   	push   esi
c0022e3b:	53                   	push   ebx
c0022e3c:	83 ec 0c             	sub    esp,0xc
c0022e3f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022e43:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022e48:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022e4d:	6a 00                	push   0x0
c0022e4f:	56                   	push   esi
c0022e50:	57                   	push   edi
c0022e51:	55                   	push   ebp
c0022e52:	e8 9f f7 ff ff       	call   c00225f6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e57:	6a 00                	push   0x0
c0022e59:	56                   	push   esi
c0022e5a:	57                   	push   edi
c0022e5b:	55                   	push   ebp
c0022e5c:	e8 1f fe ff ff       	call   c0022c80 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e61:	83 c4 20             	add    esp,0x20
c0022e64:	6a 00                	push   0x0
c0022e66:	56                   	push   esi
c0022e67:	57                   	push   edi
c0022e68:	55                   	push   ebp
c0022e69:	e8 ac f7 ff ff       	call   c002261a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e6e:	83 c4 10             	add    esp,0x10
c0022e71:	84 c0                	test   al,al
c0022e73:	79 27                	jns    c0022e9c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022e75:	bb 01 00 00 00       	mov    ebx,0x1
c0022e7a:	53                   	push   ebx
c0022e7b:	56                   	push   esi
c0022e7c:	57                   	push   edi
c0022e7d:	55                   	push   ebp
c0022e7e:	e8 73 f7 ff ff       	call   c00225f6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e83:	83 c4 10             	add    esp,0x10
c0022e86:	66 40                	inc    ax
c0022e88:	74 0c                	je     c0022e96 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022e8a:	53                   	push   ebx
c0022e8b:	56                   	push   esi
c0022e8c:	57                   	push   edi
c0022e8d:	55                   	push   ebp
c0022e8e:	e8 ed fd ff ff       	call   c0022c80 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e93:	83 c4 10             	add    esp,0x10
c0022e96:	43                   	inc    ebx
c0022e97:	83 fb 08             	cmp    ebx,0x8
c0022e9a:	75 de                	jne    c0022e7a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022e9c:	83 c4 0c             	add    esp,0xc
c0022e9f:	5b                   	pop    ebx
c0022ea0:	5e                   	pop    esi
c0022ea1:	5f                   	pop    edi
c0022ea2:	5d                   	pop    ebp
c0022ea3:	c3                   	ret    

c0022ea4 <PCI::detect()>:
c0022ea4:	56                   	push   esi
c0022ea5:	53                   	push   ebx
c0022ea6:	53                   	push   ebx
c0022ea7:	31 db                	xor    ebx,ebx
c0022ea9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022ead:	6a 00                	push   0x0
c0022eaf:	6a 00                	push   0x0
c0022eb1:	6a 00                	push   0x0
c0022eb3:	56                   	push   esi
c0022eb4:	e8 61 f7 ff ff       	call   c002261a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022eb9:	83 c4 10             	add    esp,0x10
c0022ebc:	a8 80                	test   al,0x80
c0022ebe:	75 21                	jne    c0022ee1 <PCI::detect()+0x3d>
c0022ec0:	51                   	push   ecx
c0022ec1:	51                   	push   ecx
c0022ec2:	6a 00                	push   0x0
c0022ec4:	56                   	push   esi
c0022ec5:	e8 20 fc ff ff       	call   c0022aea <PCI::checkBus(unsigned char)>
c0022eca:	83 c4 10             	add    esp,0x10
c0022ecd:	eb 24                	jmp    c0022ef3 <PCI::detect()+0x4f>
c0022ecf:	52                   	push   edx
c0022ed0:	52                   	push   edx
c0022ed1:	53                   	push   ebx
c0022ed2:	43                   	inc    ebx
c0022ed3:	56                   	push   esi
c0022ed4:	e8 11 fc ff ff       	call   c0022aea <PCI::checkBus(unsigned char)>
c0022ed9:	83 c4 10             	add    esp,0x10
c0022edc:	83 fb 08             	cmp    ebx,0x8
c0022edf:	74 12                	je     c0022ef3 <PCI::detect()+0x4f>
c0022ee1:	53                   	push   ebx
c0022ee2:	6a 00                	push   0x0
c0022ee4:	6a 00                	push   0x0
c0022ee6:	56                   	push   esi
c0022ee7:	e8 0a f7 ff ff       	call   c00225f6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022eec:	83 c4 10             	add    esp,0x10
c0022eef:	66 40                	inc    ax
c0022ef1:	74 dc                	je     c0022ecf <PCI::detect()+0x2b>
c0022ef3:	58                   	pop    eax
c0022ef4:	5b                   	pop    ebx
c0022ef5:	5e                   	pop    esi
c0022ef6:	c3                   	ret    
c0022ef7:	90                   	nop

c0022ef8 <IDE::close(int, int, void*)>:
c0022ef8:	83 c8 ff             	or     eax,0xffffffff
c0022efb:	c3                   	ret    

c0022efc <IDE::IDE()>:
c0022efc:	83 ec 0c             	sub    esp,0xc
c0022eff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f03:	83 ec 08             	sub    esp,0x8
c0022f06:	68 28 c1 02 c0       	push   0xc002c128
c0022f0b:	50                   	push   eax
c0022f0c:	e8 d9 0f ff ff       	call   c0013eea <HardDiskController::HardDiskController(char const*)>
c0022f11:	83 c4 10             	add    esp,0x10
c0022f14:	ba b8 c1 02 c0       	mov    edx,0xc002c1b8
c0022f19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f1d:	89 10                	mov    DWORD PTR [eax],edx
c0022f1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f23:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022f2a:	90                   	nop
c0022f2b:	83 c4 0c             	add    esp,0xc
c0022f2e:	c3                   	ret    
c0022f2f:	90                   	nop

c0022f30 <IDE::prepareInterrupt(unsigned char)>:
c0022f30:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022f35:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022f39:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022f41:	c3                   	ret    

c0022f42 <selectDrive(unsigned char, unsigned char)>:
c0022f42:	c3                   	ret    
c0022f43:	90                   	nop

c0022f44 <IDE::getBase(unsigned char)>:
c0022f44:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f4d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022f55:	c3                   	ret    

c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022f56:	55                   	push   ebp
c0022f57:	57                   	push   edi
c0022f58:	56                   	push   esi
c0022f59:	53                   	push   ebx
c0022f5a:	83 ec 1c             	sub    esp,0x1c
c0022f5d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022f61:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022f65:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022f68:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022f6c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022f70:	80 f9 03             	cmp    cl,0x3
c0022f73:	77 51                	ja     c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022f75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022f79:	0f b6 f2             	movzx  esi,dl
c0022f7c:	0f b6 db             	movzx  ebx,bl
c0022f7f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022f82:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022f86:	83 ca 80             	or     edx,0xffffff80
c0022f89:	0f b6 d2             	movzx  edx,dl
c0022f8c:	52                   	push   edx
c0022f8d:	6a 0c                	push   0xc
c0022f8f:	56                   	push   esi
c0022f90:	57                   	push   edi
c0022f91:	e8 c0 ff ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f96:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022f9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f9f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022fa3:	ee                   	out    dx,al
c0022fa4:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022fa9:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022fad:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022fb1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022fb5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022fbd:	83 c4 2c             	add    esp,0x2c
c0022fc0:	5b                   	pop    ebx
c0022fc1:	5e                   	pop    esi
c0022fc2:	5f                   	pop    edi
c0022fc3:	5d                   	pop    ebp
c0022fc4:	eb 90                	jmp    c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fc6:	80 fb 07             	cmp    bl,0x7
c0022fc9:	77 12                	ja     c0022fdd <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022fcb:	0f b6 d2             	movzx  edx,dl
c0022fce:	0f b6 db             	movzx  ebx,bl
c0022fd1:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022fd9:	89 da                	mov    edx,ebx
c0022fdb:	eb 2f                	jmp    c002300c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022fdd:	80 fb 0d             	cmp    bl,0xd
c0022fe0:	77 13                	ja     c0022ff5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022fe2:	0f b6 d2             	movzx  edx,dl
c0022fe5:	0f b6 db             	movzx  ebx,bl
c0022fe8:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022fef:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022ff3:	eb 17                	jmp    c002300c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022ff5:	80 fb 15             	cmp    bl,0x15
c0022ff8:	77 13                	ja     c002300d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022ffa:	0f b6 d2             	movzx  edx,dl
c0022ffd:	0f b6 db             	movzx  ebx,bl
c0023000:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023008:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002300c:	ee                   	out    dx,al
c002300d:	83 c4 1c             	add    esp,0x1c
c0023010:	5b                   	pop    ebx
c0023011:	5e                   	pop    esi
c0023012:	5f                   	pop    edi
c0023013:	5d                   	pop    ebp
c0023014:	c3                   	ret    
c0023015:	90                   	nop

c0023016 <IDE::read(unsigned char, unsigned char)>:
c0023016:	55                   	push   ebp
c0023017:	57                   	push   edi
c0023018:	56                   	push   esi
c0023019:	53                   	push   ebx
c002301a:	83 ec 1c             	sub    esp,0x1c
c002301d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023021:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023025:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023028:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002302c:	3c 03                	cmp    al,0x3
c002302e:	77 43                	ja     c0023073 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023030:	0f b6 f2             	movzx  esi,dl
c0023033:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023036:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c002303a:	83 c8 80             	or     eax,0xffffff80
c002303d:	0f b6 c0             	movzx  eax,al
c0023040:	50                   	push   eax
c0023041:	6a 0c                	push   0xc
c0023043:	56                   	push   esi
c0023044:	57                   	push   edi
c0023045:	e8 0c ff ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002304a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002304f:	0f b6 c3             	movzx  eax,bl
c0023052:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023056:	ec                   	in     al,dx
c0023057:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002305b:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023060:	52                   	push   edx
c0023061:	6a 0c                	push   0xc
c0023063:	56                   	push   esi
c0023064:	57                   	push   edi
c0023065:	e8 ec fe ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002306a:	83 c4 20             	add    esp,0x20
c002306d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023071:	eb 49                	jmp    c00230bc <IDE::read(unsigned char, unsigned char)+0xa6>
c0023073:	80 fb 07             	cmp    bl,0x7
c0023076:	77 12                	ja     c002308a <IDE::read(unsigned char, unsigned char)+0x74>
c0023078:	0f b6 d2             	movzx  edx,dl
c002307b:	0f b6 c3             	movzx  eax,bl
c002307e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023086:	89 c2                	mov    edx,eax
c0023088:	eb 31                	jmp    c00230bb <IDE::read(unsigned char, unsigned char)+0xa5>
c002308a:	80 fb 0d             	cmp    bl,0xd
c002308d:	77 13                	ja     c00230a2 <IDE::read(unsigned char, unsigned char)+0x8c>
c002308f:	0f b6 d2             	movzx  edx,dl
c0023092:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023099:	0f b6 d3             	movzx  edx,bl
c002309c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00230a0:	eb 19                	jmp    c00230bb <IDE::read(unsigned char, unsigned char)+0xa5>
c00230a2:	31 c0                	xor    eax,eax
c00230a4:	80 fb 15             	cmp    bl,0x15
c00230a7:	77 13                	ja     c00230bc <IDE::read(unsigned char, unsigned char)+0xa6>
c00230a9:	0f b6 d2             	movzx  edx,dl
c00230ac:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00230b4:	0f b6 d3             	movzx  edx,bl
c00230b7:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00230bb:	ec                   	in     al,dx
c00230bc:	83 c4 1c             	add    esp,0x1c
c00230bf:	5b                   	pop    ebx
c00230c0:	5e                   	pop    esi
c00230c1:	5f                   	pop    edi
c00230c2:	5d                   	pop    ebp
c00230c3:	c3                   	ret    

c00230c4 <IDE::waitInterrupt(unsigned char)>:
c00230c4:	55                   	push   ebp
c00230c5:	57                   	push   edi
c00230c6:	56                   	push   esi
c00230c7:	53                   	push   ebx
c00230c8:	31 db                	xor    ebx,ebx
c00230ca:	83 ec 0c             	sub    esp,0xc
c00230cd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00230d1:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00230d6:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00230de:	89 e8                	mov    eax,ebp
c00230e0:	84 c0                	test   al,al
c00230e2:	75 34                	jne    c0023118 <IDE::waitInterrupt(unsigned char)+0x54>
c00230e4:	52                   	push   edx
c00230e5:	6a 0c                	push   0xc
c00230e7:	56                   	push   esi
c00230e8:	57                   	push   edi
c00230e9:	e8 28 ff ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c00230ee:	83 c4 10             	add    esp,0x10
c00230f1:	a8 01                	test   al,0x1
c00230f3:	75 2b                	jne    c0023120 <IDE::waitInterrupt(unsigned char)+0x5c>
c00230f5:	f6 c3 04             	test   bl,0x4
c00230f8:	75 16                	jne    c0023110 <IDE::waitInterrupt(unsigned char)+0x4c>
c00230fa:	83 fb 32             	cmp    ebx,0x32
c00230fd:	7e 11                	jle    c0023110 <IDE::waitInterrupt(unsigned char)+0x4c>
c00230ff:	50                   	push   eax
c0023100:	50                   	push   eax
c0023101:	6a 00                	push   0x0
c0023103:	68 80 96 98 00       	push   0x989680
c0023108:	e8 c6 ab ff ff       	call   c001dcd3 <nanoSleep(unsigned long long)>
c002310d:	83 c4 10             	add    esp,0x10
c0023110:	83 fb 3c             	cmp    ebx,0x3c
c0023113:	74 0b                	je     c0023120 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023115:	43                   	inc    ebx
c0023116:	eb be                	jmp    c00230d6 <IDE::waitInterrupt(unsigned char)+0x12>
c0023118:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023120:	83 c4 0c             	add    esp,0xc
c0023123:	89 e8                	mov    eax,ebp
c0023125:	5b                   	pop    ebx
c0023126:	5e                   	pop    esi
c0023127:	5f                   	pop    edi
c0023128:	5d                   	pop    ebp
c0023129:	c3                   	ret    

c002312a <ideChannel0IRQHandler(regs*, void*)>:
c002312a:	83 ec 10             	sub    esp,0x10
c002312d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023131:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023138:	6a 07                	push   0x7
c002313a:	6a 00                	push   0x0
c002313c:	50                   	push   eax
c002313d:	e8 d4 fe ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c0023142:	83 c4 1c             	add    esp,0x1c
c0023145:	c3                   	ret    

c0023146 <ideChannel1IRQHandler(regs*, void*)>:
c0023146:	83 ec 10             	sub    esp,0x10
c0023149:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002314d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023154:	6a 07                	push   0x7
c0023156:	6a 01                	push   0x1
c0023158:	50                   	push   eax
c0023159:	e8 b8 fe ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c002315e:	83 c4 1c             	add    esp,0x1c
c0023161:	c3                   	ret    

c0023162 <IDE::enableIRQs(unsigned char, bool)>:
c0023162:	57                   	push   edi
c0023163:	56                   	push   esi
c0023164:	be 04 00 00 00       	mov    esi,0x4
c0023169:	53                   	push   ebx
c002316a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002316f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023173:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023178:	0f 94 c0             	sete   al
c002317b:	d1 e0                	shl    eax,1
c002317d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023184:	0f b6 c0             	movzx  eax,al
c0023187:	50                   	push   eax
c0023188:	6a 0c                	push   0xc
c002318a:	57                   	push   edi
c002318b:	53                   	push   ebx
c002318c:	e8 c5 fd ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023191:	83 c4 10             	add    esp,0x10
c0023194:	50                   	push   eax
c0023195:	6a 0c                	push   0xc
c0023197:	57                   	push   edi
c0023198:	53                   	push   ebx
c0023199:	e8 78 fe ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c002319e:	83 c4 10             	add    esp,0x10
c00231a1:	4e                   	dec    esi
c00231a2:	75 f0                	jne    c0023194 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00231a4:	5b                   	pop    ebx
c00231a5:	5e                   	pop    esi
c00231a6:	5f                   	pop    edi
c00231a7:	c3                   	ret    

c00231a8 <IDE::open(int, int, void*)>:
c00231a8:	55                   	push   ebp
c00231a9:	57                   	push   edi
c00231aa:	56                   	push   esi
c00231ab:	53                   	push   ebx
c00231ac:	83 ec 1c             	sub    esp,0x1c
c00231af:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00231b3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00231bc:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00231c5:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00231cc:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00231d3:	0f 85 b0 02 00 00    	jne    c0023489 <IDE::open(int, int, void*)+0x2e1>
c00231d9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00231df:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00231e3:	83 e0 7f             	and    eax,0x7f
c00231e6:	3c 05                	cmp    al,0x5
c00231e8:	74 04                	je     c00231ee <IDE::open(int, int, void*)+0x46>
c00231ea:	3c 0f                	cmp    al,0xf
c00231ec:	75 32                	jne    c0023220 <IDE::open(int, int, void*)+0x78>
c00231ee:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00231f4:	83 e0 fc             	and    eax,0xfffffffc
c00231f7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00231fe:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023204:	83 e0 fc             	and    eax,0xfffffffc
c0023207:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002320e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023214:	83 e0 fc             	and    eax,0xfffffffc
c0023217:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002321e:	eb 14                	jmp    c0023234 <IDE::open(int, int, void*)+0x8c>
c0023220:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002322a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023234:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002323b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023242:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023246:	89 c6                	mov    esi,eax
c0023248:	bf f8 0c 00 00       	mov    edi,0xcf8
c002324d:	c1 e6 10             	shl    esi,0x10
c0023250:	89 e8                	mov    eax,ebp
c0023252:	89 fa                	mov    edx,edi
c0023254:	c1 e0 0b             	shl    eax,0xb
c0023257:	09 f0                	or     eax,esi
c0023259:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023260:	c1 e6 08             	shl    esi,0x8
c0023263:	09 c6                	or     esi,eax
c0023265:	89 f0                	mov    eax,esi
c0023267:	0d 08 00 00 80       	or     eax,0x80000008
c002326c:	ef                   	out    dx,eax
c002326d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023272:	89 ca                	mov    edx,ecx
c0023274:	ed                   	in     eax,dx
c0023275:	c1 e8 10             	shr    eax,0x10
c0023278:	3d ff ff 00 00       	cmp    eax,0xffff
c002327d:	0f 84 f5 00 00 00    	je     c0023378 <IDE::open(int, int, void*)+0x1d0>
c0023283:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023289:	89 fa                	mov    edx,edi
c002328b:	89 f0                	mov    eax,esi
c002328d:	ef                   	out    dx,eax
c002328e:	b0 fe                	mov    al,0xfe
c0023290:	89 ca                	mov    edx,ecx
c0023292:	ee                   	out    dx,al
c0023293:	89 f0                	mov    eax,esi
c0023295:	89 fa                	mov    edx,edi
c0023297:	ef                   	out    dx,eax
c0023298:	89 ca                	mov    edx,ecx
c002329a:	ed                   	in     eax,dx
c002329b:	3c fe                	cmp    al,0xfe
c002329d:	0f 85 a9 00 00 00    	jne    c002334c <IDE::open(int, int, void*)+0x1a4>
c00232a3:	8b 15 e8 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9e8
c00232a9:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00232b0:	74 33                	je     c00232e5 <IDE::open(int, int, void*)+0x13d>
c00232b2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00232b8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00232bc:	40                   	inc    eax
c00232bd:	83 ec 0c             	sub    esp,0xc
c00232c0:	0f b6 c0             	movzx  eax,al
c00232c3:	50                   	push   eax
c00232c4:	55                   	push   ebp
c00232c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00232c9:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00232cf:	51                   	push   ecx
c00232d0:	e8 53 48 ff ff       	call   c0017b28 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00232d5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00232da:	83 c4 1c             	add    esp,0x1c
c00232dd:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00232e3:	eb 0a                	jmp    c00232ef <IDE::open(int, int, void*)+0x147>
c00232e5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00232ef:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00232f6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00232fd:	c1 e1 10             	shl    ecx,0x10
c0023300:	c1 e0 08             	shl    eax,0x8
c0023303:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023308:	09 c1                	or     ecx,eax
c002330a:	89 fa                	mov    edx,edi
c002330c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023313:	c1 e0 0b             	shl    eax,0xb
c0023316:	09 c1                	or     ecx,eax
c0023318:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002331e:	89 c8                	mov    eax,ecx
c0023320:	ef                   	out    dx,eax
c0023321:	be fc 0c 00 00       	mov    esi,0xcfc
c0023326:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002332c:	89 f2                	mov    edx,esi
c002332e:	ee                   	out    dx,al
c002332f:	89 c8                	mov    eax,ecx
c0023331:	89 fa                	mov    edx,edi
c0023333:	ef                   	out    dx,eax
c0023334:	89 f2                	mov    edx,esi
c0023336:	ed                   	in     eax,dx
c0023337:	0f b6 c0             	movzx  eax,al
c002333a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023340:	74 46                	je     c0023388 <IDE::open(int, int, void*)+0x1e0>
c0023342:	83 ec 0c             	sub    esp,0xc
c0023345:	68 40 c1 02 c0       	push   0xc002c140
c002334a:	eb 34                	jmp    c0023380 <IDE::open(int, int, void*)+0x1d8>
c002334c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023355:	75 17                	jne    c002336e <IDE::open(int, int, void*)+0x1c6>
c0023357:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002335c:	74 07                	je     c0023365 <IDE::open(int, int, void*)+0x1bd>
c002335e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023363:	75 09                	jne    c002336e <IDE::open(int, int, void*)+0x1c6>
c0023365:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002336c:	eb 1a                	jmp    c0023388 <IDE::open(int, int, void*)+0x1e0>
c002336e:	83 ec 0c             	sub    esp,0xc
c0023371:	68 48 c1 02 c0       	push   0xc002c148
c0023376:	eb 08                	jmp    c0023380 <IDE::open(int, int, void*)+0x1d8>
c0023378:	83 ec 0c             	sub    esp,0xc
c002337b:	68 79 c1 02 c0       	push   0xc002c179
c0023380:	e8 ea 6a ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c0023385:	83 c4 10             	add    esp,0x10
c0023388:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002338f:	79 1a                	jns    c00233ab <IDE::open(int, int, void*)+0x203>
c0023391:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023397:	83 e0 fc             	and    eax,0xfffffffc
c002339a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00233a1:	83 c0 08             	add    eax,0x8
c00233a4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00233ab:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00233b1:	89 c2                	mov    edx,eax
c00233b3:	83 e2 0f             	and    edx,0xf
c00233b6:	66 83 fa 08          	cmp    dx,0x8
c00233ba:	75 0a                	jne    c00233c6 <IDE::open(int, int, void*)+0x21e>
c00233bc:	83 e8 02             	sub    eax,0x2
c00233bf:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00233c6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00233cc:	89 c2                	mov    edx,eax
c00233ce:	83 e2 0f             	and    edx,0xf
c00233d1:	66 83 fa 08          	cmp    dx,0x8
c00233d5:	75 0a                	jne    c00233e1 <IDE::open(int, int, void*)+0x239>
c00233d7:	83 e8 02             	sub    eax,0x2
c00233da:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00233e1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00233e8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00233ef:	89 d0                	mov    eax,edx
c00233f1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233f4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233f8:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00233fc:	8d 4a 01             	lea    ecx,[edx+0x1]
c00233ff:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023404:	0f b6 c9             	movzx  ecx,cl
c0023407:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002340e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023411:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023415:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023419:	8d 50 02             	lea    edx,[eax+0x2]
c002341c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023421:	0f b6 d2             	movzx  edx,dl
c0023424:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002342a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002342d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023431:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023435:	8d 48 03             	lea    ecx,[eax+0x3]
c0023438:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002343d:	0f b6 c9             	movzx  ecx,cl
c0023440:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023446:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023449:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002344d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023451:	8d 50 04             	lea    edx,[eax+0x4]
c0023454:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002345a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002345f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023466:	66 85 f6             	test   si,si
c0023469:	74 5b                	je     c00234c6 <IDE::open(int, int, void*)+0x31e>
c002346b:	0f b6 d2             	movzx  edx,dl
c002346e:	83 c0 05             	add    eax,0x5
c0023471:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023474:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023478:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002347c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023482:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023487:	eb 3d                	jmp    c00234c6 <IDE::open(int, int, void*)+0x31e>
c0023489:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002348f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023496:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002349d:	66 05 06 02          	add    ax,0x206
c00234a1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00234a8:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00234af:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00234b6:	66 05 06 02          	add    ax,0x206
c00234ba:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00234c1:	e9 e5 fe ff ff       	jmp    c00233ab <IDE::open(int, int, void*)+0x203>
c00234c6:	50                   	push   eax
c00234c7:	50                   	push   eax
c00234c8:	6a 00                	push   0x0
c00234ca:	53                   	push   ebx
c00234cb:	e8 60 fa ff ff       	call   c0022f30 <IDE::prepareInterrupt(unsigned char)>
c00234d0:	5a                   	pop    edx
c00234d1:	59                   	pop    ecx
c00234d2:	6a 01                	push   0x1
c00234d4:	53                   	push   ebx
c00234d5:	e8 56 fa ff ff       	call   c0022f30 <IDE::prepareInterrupt(unsigned char)>
c00234da:	83 c4 0c             	add    esp,0xc
c00234dd:	6a 00                	push   0x0
c00234df:	6a 00                	push   0x0
c00234e1:	53                   	push   ebx
c00234e2:	e8 7b fc ff ff       	call   c0023162 <IDE::enableIRQs(unsigned char, bool)>
c00234e7:	83 c4 0c             	add    esp,0xc
c00234ea:	6a 00                	push   0x0
c00234ec:	6a 01                	push   0x1
c00234ee:	53                   	push   ebx
c00234ef:	e8 6e fc ff ff       	call   c0023162 <IDE::enableIRQs(unsigned char, bool)>
c00234f4:	83 c4 10             	add    esp,0x10
c00234f7:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00234fe:	74 34                	je     c0023534 <IDE::open(int, int, void*)+0x38c>
c0023500:	83 ec 0c             	sub    esp,0xc
c0023503:	53                   	push   ebx
c0023504:	6a 01                	push   0x1
c0023506:	68 2a 31 02 c0       	push   0xc002312a
c002350b:	6a 0e                	push   0xe
c002350d:	53                   	push   ebx
c002350e:	e8 a1 05 ff ff       	call   c0013ab4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023513:	83 c4 14             	add    esp,0x14
c0023516:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002351c:	53                   	push   ebx
c002351d:	6a 01                	push   0x1
c002351f:	68 46 31 02 c0       	push   0xc0023146
c0023524:	6a 0f                	push   0xf
c0023526:	53                   	push   ebx
c0023527:	e8 88 05 ff ff       	call   c0013ab4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002352c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023532:	eb 38                	jmp    c002356c <IDE::open(int, int, void*)+0x3c4>
c0023534:	83 ec 0c             	sub    esp,0xc
c0023537:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023541:	53                   	push   ebx
c0023542:	6a 00                	push   0x0
c0023544:	68 2a 31 02 c0       	push   0xc002312a
c0023549:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002354f:	53                   	push   ebx
c0023550:	e8 5f 05 ff ff       	call   c0013ab4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023555:	83 c4 14             	add    esp,0x14
c0023558:	53                   	push   ebx
c0023559:	6a 00                	push   0x0
c002355b:	68 46 31 02 c0       	push   0xc0023146
c0023560:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023566:	53                   	push   ebx
c0023567:	e8 48 05 ff ff       	call   c0013ab4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002356c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002356e:	83 c4 20             	add    esp,0x20
c0023571:	83 ec 0c             	sub    esp,0xc
c0023574:	53                   	push   ebx
c0023575:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023578:	83 c4 0c             	add    esp,0xc
c002357b:	6a 07                	push   0x7
c002357d:	6a 00                	push   0x0
c002357f:	53                   	push   ebx
c0023580:	e8 91 fa ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c0023585:	83 c4 0c             	add    esp,0xc
c0023588:	6a 07                	push   0x7
c002358a:	6a 01                	push   0x1
c002358c:	53                   	push   ebx
c002358d:	e8 84 fa ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c0023592:	83 c4 0c             	add    esp,0xc
c0023595:	6a 01                	push   0x1
c0023597:	6a 00                	push   0x0
c0023599:	53                   	push   ebx
c002359a:	e8 c3 fb ff ff       	call   c0023162 <IDE::enableIRQs(unsigned char, bool)>
c002359f:	83 c4 0c             	add    esp,0xc
c00235a2:	6a 01                	push   0x1
c00235a4:	6a 01                	push   0x1
c00235a6:	53                   	push   ebx
c00235a7:	e8 b6 fb ff ff       	call   c0023162 <IDE::enableIRQs(unsigned char, bool)>
c00235ac:	83 c4 2c             	add    esp,0x2c
c00235af:	31 c0                	xor    eax,eax
c00235b1:	5b                   	pop    ebx
c00235b2:	5e                   	pop    esi
c00235b3:	5f                   	pop    edi
c00235b4:	5d                   	pop    ebp
c00235b5:	c3                   	ret    

c00235b6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00235b6:	55                   	push   ebp
c00235b7:	57                   	push   edi
c00235b8:	56                   	push   esi
c00235b9:	53                   	push   ebx
c00235ba:	83 ec 1c             	sub    esp,0x1c
c00235bd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00235c1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00235c5:	8d 50 f8             	lea    edx,[eax-0x8]
c00235c8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00235cc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00235d0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00235d4:	80 fa 03             	cmp    dl,0x3
c00235d7:	77 5d                	ja     c0023636 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00235d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00235dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00235e1:	0f b6 db             	movzx  ebx,bl
c00235e4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00235e7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00235eb:	83 ca 80             	or     edx,0xffffff80
c00235ee:	0f b6 d2             	movzx  edx,dl
c00235f1:	52                   	push   edx
c00235f2:	6a 0c                	push   0xc
c00235f4:	53                   	push   ebx
c00235f5:	56                   	push   esi
c00235f6:	e8 5b f9 ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235fb:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023600:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023604:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023608:	0f b6 c0             	movzx  eax,al
c002360b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002360f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023611:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023616:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002361a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002361e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023622:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002362a:	83 c4 2c             	add    esp,0x2c
c002362d:	5b                   	pop    ebx
c002362e:	5e                   	pop    esi
c002362f:	5f                   	pop    edi
c0023630:	5d                   	pop    ebp
c0023631:	e9 20 f9 ff ff       	jmp    c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023636:	3c 07                	cmp    al,0x7
c0023638:	77 10                	ja     c002364a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002363a:	0f b6 db             	movzx  ebx,bl
c002363d:	0f b6 d0             	movzx  edx,al
c0023640:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023648:	eb 2d                	jmp    c0023677 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002364a:	3c 0d                	cmp    al,0xd
c002364c:	77 13                	ja     c0023661 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002364e:	0f b6 db             	movzx  ebx,bl
c0023651:	0f b6 c0             	movzx  eax,al
c0023654:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002365b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002365f:	eb 16                	jmp    c0023677 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023661:	3c 15                	cmp    al,0x15
c0023663:	77 14                	ja     c0023679 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023665:	0f b6 db             	movzx  ebx,bl
c0023668:	0f b6 c0             	movzx  eax,al
c002366b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023673:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023677:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023679:	83 c4 1c             	add    esp,0x1c
c002367c:	5b                   	pop    ebx
c002367d:	5e                   	pop    esi
c002367e:	5f                   	pop    edi
c002367f:	5d                   	pop    ebp
c0023680:	c3                   	ret    
c0023681:	90                   	nop

c0023682 <IDE::detect()>:
c0023682:	55                   	push   ebp
c0023683:	57                   	push   edi
c0023684:	56                   	push   esi
c0023685:	53                   	push   ebx
c0023686:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002368c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023693:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002369a:	0f 85 9d 02 00 00    	jne    c002393d <IDE::detect()+0x2bb>
c00236a0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00236a7:	31 f6                	xor    esi,esi
c00236a9:	31 ed                	xor    ebp,ebp
c00236ab:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00236b3:	89 e8                	mov    eax,ebp
c00236b5:	c1 e0 06             	shl    eax,0x6
c00236b8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00236c0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00236c4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00236c8:	c1 e0 04             	shl    eax,0x4
c00236cb:	83 c8 a0             	or     eax,0xffffffa0
c00236ce:	0f b6 c0             	movzx  eax,al
c00236d1:	50                   	push   eax
c00236d2:	6a 06                	push   0x6
c00236d4:	56                   	push   esi
c00236d5:	53                   	push   ebx
c00236d6:	e8 7b f8 ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236db:	83 c4 0c             	add    esp,0xc
c00236de:	6a 0c                	push   0xc
c00236e0:	56                   	push   esi
c00236e1:	53                   	push   ebx
c00236e2:	e8 2f f9 ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c00236e7:	83 c4 0c             	add    esp,0xc
c00236ea:	6a 0c                	push   0xc
c00236ec:	56                   	push   esi
c00236ed:	53                   	push   ebx
c00236ee:	e8 23 f9 ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c00236f3:	83 c4 0c             	add    esp,0xc
c00236f6:	6a 0c                	push   0xc
c00236f8:	56                   	push   esi
c00236f9:	53                   	push   ebx
c00236fa:	e8 17 f9 ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c00236ff:	83 c4 0c             	add    esp,0xc
c0023702:	6a 0c                	push   0xc
c0023704:	56                   	push   esi
c0023705:	53                   	push   ebx
c0023706:	e8 0b f9 ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c002370b:	68 ec 00 00 00       	push   0xec
c0023710:	6a 07                	push   0x7
c0023712:	56                   	push   esi
c0023713:	53                   	push   ebx
c0023714:	e8 3d f8 ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023719:	83 c4 1c             	add    esp,0x1c
c002371c:	6a 0c                	push   0xc
c002371e:	56                   	push   esi
c002371f:	53                   	push   ebx
c0023720:	e8 f1 f8 ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c0023725:	83 c4 0c             	add    esp,0xc
c0023728:	6a 0c                	push   0xc
c002372a:	56                   	push   esi
c002372b:	53                   	push   ebx
c002372c:	e8 e5 f8 ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c0023731:	83 c4 0c             	add    esp,0xc
c0023734:	6a 0c                	push   0xc
c0023736:	56                   	push   esi
c0023737:	53                   	push   ebx
c0023738:	e8 d9 f8 ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c002373d:	83 c4 0c             	add    esp,0xc
c0023740:	6a 0c                	push   0xc
c0023742:	56                   	push   esi
c0023743:	53                   	push   ebx
c0023744:	e8 cd f8 ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c0023749:	83 c4 0c             	add    esp,0xc
c002374c:	6a 0c                	push   0xc
c002374e:	56                   	push   esi
c002374f:	53                   	push   ebx
c0023750:	e8 c1 f8 ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c0023755:	83 c4 10             	add    esp,0x10
c0023758:	84 c0                	test   al,al
c002375a:	0f 84 63 01 00 00    	je     c00238c3 <IDE::detect()+0x241>
c0023760:	31 ff                	xor    edi,edi
c0023762:	50                   	push   eax
c0023763:	6a 0c                	push   0xc
c0023765:	56                   	push   esi
c0023766:	53                   	push   ebx
c0023767:	e8 aa f8 ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c002376c:	83 c4 10             	add    esp,0x10
c002376f:	a8 01                	test   al,0x1
c0023771:	0f 85 6d 01 00 00    	jne    c00238e4 <IDE::detect()+0x262>
c0023777:	84 c0                	test   al,al
c0023779:	78 04                	js     c002377f <IDE::detect()+0xfd>
c002377b:	a8 08                	test   al,0x8
c002377d:	75 27                	jne    c00237a6 <IDE::detect()+0x124>
c002377f:	47                   	inc    edi
c0023780:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023786:	7e da                	jle    c0023762 <IDE::detect()+0xe0>
c0023788:	50                   	push   eax
c0023789:	50                   	push   eax
c002378a:	6a 00                	push   0x0
c002378c:	68 40 4b 4c 00       	push   0x4c4b40
c0023791:	e8 3d a5 ff ff       	call   c001dcd3 <nanoSleep(unsigned long long)>
c0023796:	83 c4 10             	add    esp,0x10
c0023799:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002379f:	75 c1                	jne    c0023762 <IDE::detect()+0xe0>
c00237a1:	e9 3e 01 00 00       	jmp    c00238e4 <IDE::detect()+0x262>
c00237a6:	31 c9                	xor    ecx,ecx
c00237a8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00237ac:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00237b0:	83 ec 0c             	sub    esp,0xc
c00237b3:	68 80 00 00 00       	push   0x80
c00237b8:	57                   	push   edi
c00237b9:	6a 00                	push   0x0
c00237bb:	56                   	push   esi
c00237bc:	53                   	push   ebx
c00237bd:	e8 f4 fd ff ff       	call   c00235b6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00237c2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00237c7:	89 e8                	mov    eax,ebp
c00237c9:	89 d1                	mov    ecx,edx
c00237cb:	c1 e0 06             	shl    eax,0x6
c00237ce:	01 d8                	add    eax,ebx
c00237d0:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00237d7:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00237de:	89 f2                	mov    edx,esi
c00237e0:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00237e6:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00237ea:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00237f0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00237f4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00237fb:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023803:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002380a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023812:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023818:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002381f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023825:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023829:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002382d:	83 c4 20             	add    esp,0x20
c0023830:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023833:	83 c0 02             	add    eax,0x2
c0023836:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002383c:	83 c7 02             	add    edi,0x2
c002383f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023842:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023848:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002384c:	75 e2                	jne    c0023830 <IDE::detect()+0x1ae>
c002384e:	89 e8                	mov    eax,ebp
c0023850:	c1 e0 06             	shl    eax,0x6
c0023853:	01 d8                	add    eax,ebx
c0023855:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002385b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023862:	66 c1 ea 09          	shr    dx,0x9
c0023866:	83 e2 01             	and    edx,0x1
c0023869:	84 c9                	test   cl,cl
c002386b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023871:	75 22                	jne    c0023895 <IDE::detect()+0x213>
c0023873:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002387a:	74 46                	je     c00238c2 <IDE::detect()+0x240>
c002387c:	83 ec 0c             	sub    esp,0xc
c002387f:	68 7c 01 00 00       	push   0x17c
c0023884:	e8 10 bd fe ff       	call   c000f599 <malloc>
c0023889:	89 c7                	mov    edi,eax
c002388b:	89 04 24             	mov    DWORD PTR [esp],eax
c002388e:	e8 15 05 00 00       	call   c0023da8 <ATA::ATA()>
c0023893:	eb 17                	jmp    c00238ac <IDE::detect()+0x22a>
c0023895:	83 ec 0c             	sub    esp,0xc
c0023898:	68 80 01 00 00       	push   0x180
c002389d:	e8 f7 bc fe ff       	call   c000f599 <malloc>
c00238a2:	89 c7                	mov    edi,eax
c00238a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00238a7:	e8 04 0b 00 00       	call   c00243b0 <ATAPI::ATAPI()>
c00238ac:	5a                   	pop    edx
c00238ad:	59                   	pop    ecx
c00238ae:	57                   	push   edi
c00238af:	53                   	push   ebx
c00238b0:	e8 87 02 ff ff       	call   c0013b3c <Device::addChild(Device*)>
c00238b5:	8b 07                	mov    eax,DWORD PTR [edi]
c00238b7:	53                   	push   ebx
c00238b8:	55                   	push   ebp
c00238b9:	6a 00                	push   0x0
c00238bb:	57                   	push   edi
c00238bc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00238bf:	83 c4 20             	add    esp,0x20
c00238c2:	45                   	inc    ebp
c00238c3:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00238c8:	74 0d                	je     c00238d7 <IDE::detect()+0x255>
c00238ca:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00238d2:	e9 dc fd ff ff       	jmp    c00236b3 <IDE::detect()+0x31>
c00238d7:	4e                   	dec    esi
c00238d8:	74 63                	je     c002393d <IDE::detect()+0x2bb>
c00238da:	be 01 00 00 00       	mov    esi,0x1
c00238df:	e9 c7 fd ff ff       	jmp    c00236ab <IDE::detect()+0x29>
c00238e4:	50                   	push   eax
c00238e5:	6a 04                	push   0x4
c00238e7:	56                   	push   esi
c00238e8:	53                   	push   ebx
c00238e9:	e8 28 f7 ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c00238ee:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00238f2:	83 c4 0c             	add    esp,0xc
c00238f5:	6a 05                	push   0x5
c00238f7:	56                   	push   esi
c00238f8:	53                   	push   ebx
c00238f9:	e8 18 f7 ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c00238fe:	83 c4 10             	add    esp,0x10
c0023901:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023905:	80 fa 14             	cmp    dl,0x14
c0023908:	75 04                	jne    c002390e <IDE::detect()+0x28c>
c002390a:	3c eb                	cmp    al,0xeb
c002390c:	eb 07                	jmp    c0023915 <IDE::detect()+0x293>
c002390e:	3c 96                	cmp    al,0x96
c0023910:	75 b1                	jne    c00238c3 <IDE::detect()+0x241>
c0023912:	80 fa 69             	cmp    dl,0x69
c0023915:	75 ac                	jne    c00238c3 <IDE::detect()+0x241>
c0023917:	68 a1 00 00 00       	push   0xa1
c002391c:	6a 07                	push   0x7
c002391e:	56                   	push   esi
c002391f:	53                   	push   ebx
c0023920:	e8 31 f6 ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023925:	5f                   	pop    edi
c0023926:	58                   	pop    eax
c0023927:	6a 00                	push   0x0
c0023929:	68 40 42 0f 00       	push   0xf4240
c002392e:	e8 a0 a3 ff ff       	call   c001dcd3 <nanoSleep(unsigned long long)>
c0023933:	83 c4 10             	add    esp,0x10
c0023936:	b1 01                	mov    cl,0x1
c0023938:	e9 6b fe ff ff       	jmp    c00237a8 <IDE::detect()+0x126>
c002393d:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023943:	5b                   	pop    ebx
c0023944:	5e                   	pop    esi
c0023945:	5f                   	pop    edi
c0023946:	5d                   	pop    ebp
c0023947:	c3                   	ret    

c0023948 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023948:	55                   	push   ebp
c0023949:	57                   	push   edi
c002394a:	56                   	push   esi
c002394b:	53                   	push   ebx
c002394c:	83 ec 1c             	sub    esp,0x1c
c002394f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023953:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023957:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002395b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c002395f:	88 c3                	mov    bl,al
c0023961:	84 c0                	test   al,al
c0023963:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023967:	0f 84 81 00 00 00    	je     c00239ee <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002396d:	83 ec 0c             	sub    esp,0xc
c0023970:	68 a3 c1 02 c0       	push   0xc002c1a3
c0023975:	e8 89 ed fe ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c002397a:	83 c4 10             	add    esp,0x10
c002397d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023981:	3c 01                	cmp    al,0x1
c0023983:	74 63                	je     c00239e8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023985:	3c 02                	cmp    al,0x2
c0023987:	75 53                	jne    c00239dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023989:	d1 e6                	shl    esi,1
c002398b:	09 ee                	or     esi,ebp
c002398d:	50                   	push   eax
c002398e:	89 f0                	mov    eax,esi
c0023990:	6a 01                	push   0x1
c0023992:	0f b6 f0             	movzx  esi,al
c0023995:	c1 e6 06             	shl    esi,0x6
c0023998:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00239a0:	50                   	push   eax
c00239a1:	57                   	push   edi
c00239a2:	e8 6f f6 ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c00239a7:	83 c4 10             	add    esp,0x10
c00239aa:	a8 01                	test   al,0x1
c00239ac:	74 02                	je     c00239b0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c00239ae:	b3 07                	mov    bl,0x7
c00239b0:	a8 02                	test   al,0x2
c00239b2:	74 02                	je     c00239b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c00239b4:	b3 03                	mov    bl,0x3
c00239b6:	a8 04                	test   al,0x4
c00239b8:	74 02                	je     c00239bc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c00239ba:	b3 14                	mov    bl,0x14
c00239bc:	a8 08                	test   al,0x8
c00239be:	74 02                	je     c00239c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c00239c0:	b3 03                	mov    bl,0x3
c00239c2:	a8 10                	test   al,0x10
c00239c4:	74 02                	je     c00239c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c00239c6:	b3 15                	mov    bl,0x15
c00239c8:	a8 20                	test   al,0x20
c00239ca:	74 02                	je     c00239ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c00239cc:	b3 03                	mov    bl,0x3
c00239ce:	a8 40                	test   al,0x40
c00239d0:	74 02                	je     c00239d4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c00239d2:	b3 16                	mov    bl,0x16
c00239d4:	84 c0                	test   al,al
c00239d6:	79 16                	jns    c00239ee <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239d8:	b3 0d                	mov    bl,0xd
c00239da:	eb 12                	jmp    c00239ee <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239dc:	3c 03                	cmp    al,0x3
c00239de:	74 0c                	je     c00239ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c00239e0:	3c 04                	cmp    al,0x4
c00239e2:	75 0a                	jne    c00239ee <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239e4:	b3 08                	mov    bl,0x8
c00239e6:	eb 06                	jmp    c00239ee <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239e8:	b3 13                	mov    bl,0x13
c00239ea:	eb 02                	jmp    c00239ee <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239ec:	b3 17                	mov    bl,0x17
c00239ee:	83 c4 1c             	add    esp,0x1c
c00239f1:	88 d8                	mov    al,bl
c00239f3:	5b                   	pop    ebx
c00239f4:	5e                   	pop    esi
c00239f5:	5f                   	pop    edi
c00239f6:	5d                   	pop    ebp
c00239f7:	c3                   	ret    

c00239f8 <IDE::polling(unsigned char, unsigned int)>:
c00239f8:	57                   	push   edi
c00239f9:	56                   	push   esi
c00239fa:	53                   	push   ebx
c00239fb:	bb 04 00 00 00       	mov    ebx,0x4
c0023a00:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023a04:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023a09:	52                   	push   edx
c0023a0a:	6a 0c                	push   0xc
c0023a0c:	56                   	push   esi
c0023a0d:	57                   	push   edi
c0023a0e:	e8 03 f6 ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c0023a13:	83 c4 10             	add    esp,0x10
c0023a16:	4b                   	dec    ebx
c0023a17:	75 f0                	jne    c0023a09 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023a19:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023a1e:	50                   	push   eax
c0023a1f:	6a 0c                	push   0xc
c0023a21:	56                   	push   esi
c0023a22:	57                   	push   edi
c0023a23:	e8 ee f5 ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c0023a28:	83 c4 10             	add    esp,0x10
c0023a2b:	a8 01                	test   al,0x1
c0023a2d:	75 17                	jne    c0023a46 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023a2f:	a8 20                	test   al,0x20
c0023a31:	75 0f                	jne    c0023a42 <IDE::polling(unsigned char, unsigned int)+0x4a>
c0023a33:	4b                   	dec    ebx
c0023a34:	74 10                	je     c0023a46 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023a36:	84 c0                	test   al,al
c0023a38:	78 e4                	js     c0023a1e <IDE::polling(unsigned char, unsigned int)+0x26>
c0023a3a:	a8 08                	test   al,0x8
c0023a3c:	74 e0                	je     c0023a1e <IDE::polling(unsigned char, unsigned int)+0x26>
c0023a3e:	31 c0                	xor    eax,eax
c0023a40:	eb 06                	jmp    c0023a48 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023a42:	b0 01                	mov    al,0x1
c0023a44:	eb 02                	jmp    c0023a48 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023a46:	b0 02                	mov    al,0x2
c0023a48:	5b                   	pop    ebx
c0023a49:	5e                   	pop    esi
c0023a4a:	5f                   	pop    edi
c0023a4b:	c3                   	ret    

c0023a4c <SATABus::close(int, int, void*)>:
c0023a4c:	31 c0                	xor    eax,eax
c0023a4e:	c3                   	ret    
c0023a4f:	90                   	nop

c0023a50 <SATABus::detect()>:
c0023a50:	c3                   	ret    
c0023a51:	90                   	nop

c0023a52 <SATABus::SATABus()>:
c0023a52:	83 ec 0c             	sub    esp,0xc
c0023a55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a59:	83 ec 08             	sub    esp,0x8
c0023a5c:	68 dc c1 02 c0       	push   0xc002c1dc
c0023a61:	50                   	push   eax
c0023a62:	e8 83 04 ff ff       	call   c0013eea <HardDiskController::HardDiskController(char const*)>
c0023a67:	83 c4 10             	add    esp,0x10
c0023a6a:	ba 30 c2 02 c0       	mov    edx,0xc002c230
c0023a6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a73:	89 10                	mov    DWORD PTR [eax],edx
c0023a75:	83 ec 0c             	sub    esp,0xc
c0023a78:	6a 50                	push   0x50
c0023a7a:	e8 0e c0 fe ff       	call   c000fa8d <Phys::allocateContiguousPages(int)>
c0023a7f:	83 c4 10             	add    esp,0x10
c0023a82:	89 c2                	mov    edx,eax
c0023a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a88:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023a8e:	83 ec 0c             	sub    esp,0xc
c0023a91:	6a 50                	push   0x50
c0023a93:	e8 bf d7 fe ff       	call   c0011257 <Virt::allocateKernelVirtualPages(int)>
c0023a98:	83 c4 10             	add    esp,0x10
c0023a9b:	89 c2                	mov    edx,eax
c0023a9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023aa1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023aa7:	a1 50 db 02 c0       	mov    eax,ds:0xc002db50
c0023aac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023ab0:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023ab6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023aba:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023ac0:	83 ec 0c             	sub    esp,0xc
c0023ac3:	6a 03                	push   0x3
c0023ac5:	6a 50                	push   0x50
c0023ac7:	51                   	push   ecx
c0023ac8:	52                   	push   edx
c0023ac9:	50                   	push   eax
c0023aca:	e8 3b e2 fe ff       	call   c0011d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023acf:	83 c4 20             	add    esp,0x20
c0023ad2:	90                   	nop
c0023ad3:	83 c4 0c             	add    esp,0xc
c0023ad6:	c3                   	ret    
c0023ad7:	90                   	nop

c0023ad8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023ad8:	83 ec 0c             	sub    esp,0xc
c0023adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023adf:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023ae2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023ae5:	09 c2                	or     edx,eax
c0023ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023aeb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023af1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023af3:	31 c0                	xor    eax,eax
c0023af5:	c1 e9 08             	shr    ecx,0x8
c0023af8:	83 e1 0f             	and    ecx,0xf
c0023afb:	39 c8                	cmp    eax,ecx
c0023afd:	74 0a                	je     c0023b09 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023aff:	f6 c2 01             	test   dl,0x1
c0023b02:	74 18                	je     c0023b1c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b04:	d1 ea                	shr    edx,1
c0023b06:	40                   	inc    eax
c0023b07:	eb f2                	jmp    c0023afb <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023b09:	83 ec 0c             	sub    esp,0xc
c0023b0c:	68 00 c2 02 c0       	push   0xc002c200
c0023b11:	e8 59 63 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c0023b16:	83 c4 10             	add    esp,0x10
c0023b19:	83 c8 ff             	or     eax,0xffffffff
c0023b1c:	83 c4 0c             	add    esp,0xc
c0023b1f:	c3                   	ret    

c0023b20 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023b20:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023b24:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023b27:	89 c2                	mov    edx,eax
c0023b29:	c1 ea 08             	shr    edx,0x8
c0023b2c:	83 e2 0f             	and    edx,0xf
c0023b2f:	fe ca                	dec    dl
c0023b31:	75 31                	jne    c0023b64 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b33:	83 e0 0f             	and    eax,0xf
c0023b36:	3c 03                	cmp    al,0x3
c0023b38:	75 2a                	jne    c0023b64 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b3a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023b3d:	b8 02 00 00 00       	mov    eax,0x2
c0023b42:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023b48:	74 1c                	je     c0023b66 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023b4a:	b8 04 00 00 00       	mov    eax,0x4
c0023b4f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023b55:	74 0f                	je     c0023b66 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023b57:	31 c0                	xor    eax,eax
c0023b59:	83 fa 03             	cmp    edx,0x3
c0023b5c:	0f 94 c0             	sete   al
c0023b5f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023b63:	c3                   	ret    
c0023b64:	31 c0                	xor    eax,eax
c0023b66:	c3                   	ret    
c0023b67:	90                   	nop

c0023b68 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023b68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023b6c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b6f:	0f ba e2 0f          	bt     edx,0xf
c0023b73:	72 f7                	jb     c0023b6c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023b75:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b78:	83 ca 10             	or     edx,0x10
c0023b7b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b7e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b81:	83 ca 01             	or     edx,0x1
c0023b84:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b87:	c3                   	ret    

c0023b88 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023b88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023b8c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b8f:	83 e2 fe             	and    edx,0xfffffffe
c0023b92:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b95:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b98:	83 e2 ef             	and    edx,0xffffffef
c0023b9b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b9e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ba1:	0f ba e2 0e          	bt     edx,0xe
c0023ba5:	72 f7                	jb     c0023b9e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023ba7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023baa:	0f ba e2 0f          	bt     edx,0xf
c0023bae:	72 ee                	jb     c0023b9e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023bb0:	c3                   	ret    
c0023bb1:	90                   	nop

c0023bb2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023bb2:	55                   	push   ebp
c0023bb3:	57                   	push   edi
c0023bb4:	56                   	push   esi
c0023bb5:	53                   	push   ebx
c0023bb6:	83 ec 1c             	sub    esp,0x1c
c0023bb9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023bbd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023bc1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023bc5:	53                   	push   ebx
c0023bc6:	89 fd                	mov    ebp,edi
c0023bc8:	56                   	push   esi
c0023bc9:	c1 e5 0a             	shl    ebp,0xa
c0023bcc:	e8 b7 ff ff ff       	call   c0023b88 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023bd1:	83 ec 0c             	sub    esp,0xc
c0023bd4:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023bda:	01 e8                	add    eax,ebp
c0023bdc:	89 03                	mov    DWORD PTR [ebx],eax
c0023bde:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023be0:	68 00 04 00 00       	push   0x400
c0023be5:	6a 00                	push   0x0
c0023be7:	50                   	push   eax
c0023be8:	e8 63 cb fd ff       	call   c0000750 <memset>
c0023bed:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023bf3:	89 fa                	mov    edx,edi
c0023bf5:	01 e8                	add    eax,ebp
c0023bf7:	c1 e7 0d             	shl    edi,0xd
c0023bfa:	89 03                	mov    DWORD PTR [ebx],eax
c0023bfc:	c1 e2 08             	shl    edx,0x8
c0023bff:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023c06:	81 c2 00 80 00 00    	add    edx,0x8000
c0023c0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023c10:	89 d0                	mov    eax,edx
c0023c12:	83 c4 1c             	add    esp,0x1c
c0023c15:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023c1b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023c1e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023c21:	68 00 01 00 00       	push   0x100
c0023c26:	6a 00                	push   0x0
c0023c28:	50                   	push   eax
c0023c29:	e8 22 cb fd ff       	call   c0000750 <memset>
c0023c2e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023c32:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023c38:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023c3e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023c42:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023c45:	83 c4 10             	add    esp,0x10
c0023c48:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023c4f:	31 ff                	xor    edi,edi
c0023c51:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023c57:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023c5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023c61:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023c67:	83 c5 20             	add    ebp,0x20
c0023c6a:	01 f8                	add    eax,edi
c0023c6c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023c6f:	52                   	push   edx
c0023c70:	68 00 01 00 00       	push   0x100
c0023c75:	6a 00                	push   0x0
c0023c77:	50                   	push   eax
c0023c78:	e8 d3 ca fd ff       	call   c0000750 <memset>
c0023c7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023c81:	83 c4 10             	add    esp,0x10
c0023c84:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023c8a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023c91:	01 f8                	add    eax,edi
c0023c93:	81 c7 00 01 00 00    	add    edi,0x100
c0023c99:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023c9c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023ca2:	75 b3                	jne    c0023c57 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023ca4:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023ca8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023cac:	83 c4 1c             	add    esp,0x1c
c0023caf:	5b                   	pop    ebx
c0023cb0:	5e                   	pop    esi
c0023cb1:	5f                   	pop    edi
c0023cb2:	5d                   	pop    ebp
c0023cb3:	e9 b0 fe ff ff       	jmp    c0023b68 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023cb8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023cb8:	55                   	push   ebp
c0023cb9:	57                   	push   edi
c0023cba:	56                   	push   esi
c0023cbb:	53                   	push   ebx
c0023cbc:	31 db                	xor    ebx,ebx
c0023cbe:	83 ec 0c             	sub    esp,0xc
c0023cc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023cc5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023cc9:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023ccc:	f7 c7 01 00 00 00    	test   edi,0x1
c0023cd2:	74 7a                	je     c0023d4e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023cd4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023cd8:	89 d8                	mov    eax,ebx
c0023cda:	c1 e0 07             	shl    eax,0x7
c0023cdd:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023ce4:	55                   	push   ebp
c0023ce5:	56                   	push   esi
c0023ce6:	e8 35 fe ff ff       	call   c0023b20 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023ceb:	5a                   	pop    edx
c0023cec:	83 f8 01             	cmp    eax,0x1
c0023cef:	59                   	pop    ecx
c0023cf0:	75 21                	jne    c0023d13 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023cf2:	50                   	push   eax
c0023cf3:	53                   	push   ebx
c0023cf4:	55                   	push   ebp
c0023cf5:	56                   	push   esi
c0023cf6:	e8 b7 fe ff ff       	call   c0023bb2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023cfb:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023d02:	e8 92 b8 fe ff       	call   c000f599 <malloc>
c0023d07:	89 c5                	mov    ebp,eax
c0023d09:	89 04 24             	mov    DWORD PTR [esp],eax
c0023d0c:	e8 03 0d 00 00       	call   c0024a14 <SATA::SATA()>
c0023d11:	eb 24                	jmp    c0023d37 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023d13:	83 f8 04             	cmp    eax,0x4
c0023d16:	75 36                	jne    c0023d4e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023d18:	51                   	push   ecx
c0023d19:	53                   	push   ebx
c0023d1a:	55                   	push   ebp
c0023d1b:	56                   	push   esi
c0023d1c:	e8 91 fe ff ff       	call   c0023bb2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023d21:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023d28:	e8 6c b8 fe ff       	call   c000f599 <malloc>
c0023d2d:	89 c5                	mov    ebp,eax
c0023d2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0023d32:	e8 53 10 00 00       	call   c0024d8a <SATAPI::SATAPI()>
c0023d37:	58                   	pop    eax
c0023d38:	5a                   	pop    edx
c0023d39:	55                   	push   ebp
c0023d3a:	56                   	push   esi
c0023d3b:	e8 fc fd fe ff       	call   c0013b3c <Device::addChild(Device*)>
c0023d40:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023d43:	56                   	push   esi
c0023d44:	6a 00                	push   0x0
c0023d46:	53                   	push   ebx
c0023d47:	55                   	push   ebp
c0023d48:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023d4b:	83 c4 20             	add    esp,0x20
c0023d4e:	d1 ef                	shr    edi,1
c0023d50:	43                   	inc    ebx
c0023d51:	83 fb 20             	cmp    ebx,0x20
c0023d54:	0f 85 72 ff ff ff    	jne    c0023ccc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023d5a:	83 c4 0c             	add    esp,0xc
c0023d5d:	5b                   	pop    ebx
c0023d5e:	5e                   	pop    esi
c0023d5f:	5f                   	pop    edi
c0023d60:	5d                   	pop    ebp
c0023d61:	c3                   	ret    

c0023d62 <SATABus::open(int, int, void*)>:
c0023d62:	83 ec 14             	sub    esp,0x14
c0023d65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023d69:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023d6f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023d75:	52                   	push   edx
c0023d76:	50                   	push   eax
c0023d77:	e8 3c ff ff ff       	call   c0023cb8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023d7c:	31 c0                	xor    eax,eax
c0023d7e:	83 c4 1c             	add    esp,0x1c
c0023d81:	c3                   	ret    

c0023d82 <ATA::close(int, int, void*)>:
c0023d82:	83 ec 0c             	sub    esp,0xc
c0023d85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d89:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023d8f:	85 c0                	test   eax,eax
c0023d91:	74 0c                	je     c0023d9f <ATA::close(int, int, void*)+0x1d>
c0023d93:	83 ec 0c             	sub    esp,0xc
c0023d96:	8b 10                	mov    edx,DWORD PTR [eax]
c0023d98:	50                   	push   eax
c0023d99:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023d9c:	83 c4 10             	add    esp,0x10
c0023d9f:	31 c0                	xor    eax,eax
c0023da1:	83 c4 0c             	add    esp,0xc
c0023da4:	c3                   	ret    
c0023da5:	90                   	nop

c0023da6 <ATA::powerSaving(PowerSavingLevel)>:
c0023da6:	c3                   	ret    
c0023da7:	90                   	nop

c0023da8 <ATA::ATA()>:
c0023da8:	83 ec 0c             	sub    esp,0xc
c0023dab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023daf:	83 ec 04             	sub    esp,0x4
c0023db2:	68 00 02 00 00       	push   0x200
c0023db7:	68 f9 c2 02 c0       	push   0xc002c2f9
c0023dbc:	50                   	push   eax
c0023dbd:	e8 b0 01 ff ff       	call   c0013f72 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023dc2:	83 c4 10             	add    esp,0x10
c0023dc5:	ba 7c c2 02 c0       	mov    edx,0xc002c27c
c0023dca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023dce:	89 10                	mov    DWORD PTR [eax],edx
c0023dd0:	90                   	nop
c0023dd1:	83 c4 0c             	add    esp,0xc
c0023dd4:	c3                   	ret    
c0023dd5:	90                   	nop

c0023dd6 <ATA::flush(bool)>:
c0023dd6:	53                   	push   ebx
c0023dd7:	83 ec 08             	sub    esp,0x8
c0023dda:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023ddf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023de3:	19 c0                	sbb    eax,eax
c0023de5:	83 e0 fd             	and    eax,0xfffffffd
c0023de8:	05 ea 00 00 00       	add    eax,0xea
c0023ded:	50                   	push   eax
c0023dee:	6a 07                	push   0x7
c0023df0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023df7:	50                   	push   eax
c0023df8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023dfe:	e8 53 f1 ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e03:	83 c4 0c             	add    esp,0xc
c0023e06:	6a 00                	push   0x0
c0023e08:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e0f:	50                   	push   eax
c0023e10:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e16:	e8 dd fb ff ff       	call   c00239f8 <IDE::polling(unsigned char, unsigned int)>
c0023e1b:	83 c4 18             	add    esp,0x18
c0023e1e:	5b                   	pop    ebx
c0023e1f:	c3                   	ret    

c0023e20 <ATA::readyForCommand()>:
c0023e20:	56                   	push   esi
c0023e21:	53                   	push   ebx
c0023e22:	31 db                	xor    ebx,ebx
c0023e24:	50                   	push   eax
c0023e25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023e29:	50                   	push   eax
c0023e2a:	6a 0c                	push   0xc
c0023e2c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023e33:	50                   	push   eax
c0023e34:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023e3a:	e8 d7 f1 ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c0023e3f:	83 c4 10             	add    esp,0x10
c0023e42:	a8 88                	test   al,0x88
c0023e44:	74 23                	je     c0023e69 <ATA::readyForCommand()+0x49>
c0023e46:	43                   	inc    ebx
c0023e47:	83 fb 63             	cmp    ebx,0x63
c0023e4a:	7e dd                	jle    c0023e29 <ATA::readyForCommand()+0x9>
c0023e4c:	51                   	push   ecx
c0023e4d:	51                   	push   ecx
c0023e4e:	6a 00                	push   0x0
c0023e50:	68 40 42 0f 00       	push   0xf4240
c0023e55:	e8 79 9e ff ff       	call   c001dcd3 <nanoSleep(unsigned long long)>
c0023e5a:	83 c4 10             	add    esp,0x10
c0023e5d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023e63:	75 c4                	jne    c0023e29 <ATA::readyForCommand()+0x9>
c0023e65:	31 c0                	xor    eax,eax
c0023e67:	eb 02                	jmp    c0023e6b <ATA::readyForCommand()+0x4b>
c0023e69:	b0 01                	mov    al,0x1
c0023e6b:	5a                   	pop    edx
c0023e6c:	5b                   	pop    ebx
c0023e6d:	5e                   	pop    esi
c0023e6e:	c3                   	ret    
c0023e6f:	90                   	nop

c0023e70 <ATA::access(unsigned long long, int, void*, bool)>:
c0023e70:	55                   	push   ebp
c0023e71:	57                   	push   edi
c0023e72:	56                   	push   esi
c0023e73:	53                   	push   ebx
c0023e74:	83 ec 2c             	sub    esp,0x2c
c0023e77:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023e7b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023e7f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023e83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023e87:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023e8b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023e8f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023e93:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023e99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023e9d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023ea3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023ea7:	c1 e0 06             	shl    eax,0x6
c0023eaa:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023eb2:	74 5d                	je     c0023f11 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023eb4:	89 fa                	mov    edx,edi
c0023eb6:	89 f0                	mov    eax,esi
c0023eb8:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023ebc:	c1 ea 1c             	shr    edx,0x1c
c0023ebf:	89 d1                	mov    ecx,edx
c0023ec1:	09 c1                	or     ecx,eax
c0023ec3:	74 25                	je     c0023eea <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023ec5:	31 ed                	xor    ebp,ebp
c0023ec7:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023ece:	89 fa                	mov    edx,edi
c0023ed0:	89 f0                	mov    eax,esi
c0023ed2:	0f ad d0             	shrd   eax,edx,cl
c0023ed5:	d3 ea                	shr    edx,cl
c0023ed7:	f6 c1 20             	test   cl,0x20
c0023eda:	74 02                	je     c0023ede <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023edc:	89 d0                	mov    eax,edx
c0023ede:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023ee2:	45                   	inc    ebp
c0023ee3:	83 fd 06             	cmp    ebp,0x6
c0023ee6:	75 df                	jne    c0023ec7 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023ee8:	eb 76                	jmp    c0023f60 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023eea:	89 f0                	mov    eax,esi
c0023eec:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023ef1:	89 fa                	mov    edx,edi
c0023ef3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023efa:	0f ac d0 10          	shrd   eax,edx,0x10
c0023efe:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023f03:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023f07:	c1 ee 18             	shr    esi,0x18
c0023f0a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023f0f:	eb 56                	jmp    c0023f67 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023f11:	6a 00                	push   0x0
c0023f13:	6a 3f                	push   0x3f
c0023f15:	57                   	push   edi
c0023f16:	56                   	push   esi
c0023f17:	e8 28 29 00 00       	call   c0026844 <__umoddi3>
c0023f1c:	83 c4 10             	add    esp,0x10
c0023f1f:	40                   	inc    eax
c0023f20:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023f24:	6a 00                	push   0x0
c0023f26:	68 f0 03 00 00       	push   0x3f0
c0023f2b:	57                   	push   edi
c0023f2c:	56                   	push   esi
c0023f2d:	e8 12 28 00 00       	call   c0026744 <__udivdi3>
c0023f32:	83 c4 10             	add    esp,0x10
c0023f35:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023f3a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023f41:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023f46:	6a 00                	push   0x0
c0023f48:	6a 3f                	push   0x3f
c0023f4a:	57                   	push   edi
c0023f4b:	56                   	push   esi
c0023f4c:	e8 f3 27 00 00       	call   c0026744 <__udivdi3>
c0023f51:	83 c4 10             	add    esp,0x10
c0023f54:	89 c6                	mov    esi,eax
c0023f56:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023f5b:	83 e6 0f             	and    esi,0xf
c0023f5e:	eb 07                	jmp    c0023f67 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023f60:	31 f6                	xor    esi,esi
c0023f62:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023f67:	bf 01 00 00 00       	mov    edi,0x1
c0023f6c:	50                   	push   eax
c0023f6d:	6a 00                	push   0x0
c0023f6f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f76:	50                   	push   eax
c0023f77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023f7b:	e8 e2 f1 ff ff       	call   c0023162 <IDE::enableIRQs(unsigned char, bool)>
c0023f80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f83:	e8 98 fe ff ff       	call   c0023e20 <ATA::readyForCommand()>
c0023f88:	83 c4 10             	add    esp,0x10
c0023f8b:	84 c0                	test   al,al
c0023f8d:	0f 84 5a 02 00 00    	je     c00241ed <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023f93:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023f99:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023f9f:	c1 e0 04             	shl    eax,0x4
c0023fa2:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023fa9:	09 c6                	or     esi,eax
c0023fab:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023fb0:	75 05                	jne    c0023fb7 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023fb2:	83 ce a0             	or     esi,0xffffffa0
c0023fb5:	eb 03                	jmp    c0023fba <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023fb7:	83 ce e0             	or     esi,0xffffffe0
c0023fba:	89 f0                	mov    eax,esi
c0023fbc:	0f b6 f0             	movzx  esi,al
c0023fbf:	56                   	push   esi
c0023fc0:	6a 06                	push   0x6
c0023fc2:	51                   	push   ecx
c0023fc3:	52                   	push   edx
c0023fc4:	e8 8d ef ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fc9:	83 c4 10             	add    esp,0x10
c0023fcc:	6a 00                	push   0x0
c0023fce:	6a 01                	push   0x1
c0023fd0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fd7:	50                   	push   eax
c0023fd8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fde:	e8 73 ef ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fe3:	83 c4 10             	add    esp,0x10
c0023fe6:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023feb:	75 6e                	jne    c002405b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023fed:	6a 00                	push   0x0
c0023fef:	6a 08                	push   0x8
c0023ff1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ff8:	50                   	push   eax
c0023ff9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fff:	e8 52 ef ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024004:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024009:	50                   	push   eax
c002400a:	6a 09                	push   0x9
c002400c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024013:	50                   	push   eax
c0024014:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002401a:	e8 37 ef ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002401f:	83 c4 20             	add    esp,0x20
c0024022:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024027:	50                   	push   eax
c0024028:	6a 0a                	push   0xa
c002402a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024031:	50                   	push   eax
c0024032:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024038:	e8 19 ef ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002403d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024042:	50                   	push   eax
c0024043:	6a 0b                	push   0xb
c0024045:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002404c:	50                   	push   eax
c002404d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024053:	e8 fe ee ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024058:	83 c4 20             	add    esp,0x20
c002405b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024060:	50                   	push   eax
c0024061:	6a 02                	push   0x2
c0024063:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002406a:	50                   	push   eax
c002406b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024071:	e8 e0 ee ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024076:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002407b:	50                   	push   eax
c002407c:	6a 03                	push   0x3
c002407e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024085:	50                   	push   eax
c0024086:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002408c:	e8 c5 ee ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024091:	83 c4 20             	add    esp,0x20
c0024094:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024099:	50                   	push   eax
c002409a:	6a 04                	push   0x4
c002409c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240a3:	50                   	push   eax
c00240a4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240aa:	e8 a7 ee ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00240b4:	50                   	push   eax
c00240b5:	6a 05                	push   0x5
c00240b7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240be:	50                   	push   eax
c00240bf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240c5:	e8 8c ee ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240ca:	83 c4 20             	add    esp,0x20
c00240cd:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00240d2:	0f 94 c0             	sete   al
c00240d5:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00240da:	74 09                	je     c00240e5 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00240dc:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00240e3:	eb 07                	jmp    c00240ec <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00240e5:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00240ec:	0f b6 c0             	movzx  eax,al
c00240ef:	50                   	push   eax
c00240f0:	6a 07                	push   0x7
c00240f2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240f9:	50                   	push   eax
c00240fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024100:	e8 51 ee ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024105:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024109:	83 c4 10             	add    esp,0x10
c002410c:	85 f6                	test   esi,esi
c002410e:	0f 84 ba 00 00 00    	je     c00241ce <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024114:	50                   	push   eax
c0024115:	6a 01                	push   0x1
c0024117:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002411e:	50                   	push   eax
c002411f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024125:	e8 ce f8 ff ff       	call   c00239f8 <IDE::polling(unsigned char, unsigned int)>
c002412a:	83 c4 10             	add    esp,0x10
c002412d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024133:	84 c0                	test   al,al
c0024135:	74 2c                	je     c0024163 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024137:	0f b6 f8             	movzx  edi,al
c002413a:	0f b6 d2             	movzx  edx,dl
c002413d:	57                   	push   edi
c002413e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024145:	50                   	push   eax
c0024146:	52                   	push   edx
c0024147:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002414d:	e8 f6 f7 ff ff       	call   c0023948 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024152:	c7 04 24 54 c2 02 c0 	mov    DWORD PTR [esp],0xc002c254
c0024159:	e8 a5 e5 fe ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c002415e:	e9 87 00 00 00       	jmp    c00241ea <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024163:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024168:	74 33                	je     c002419d <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c002416a:	31 ed                	xor    ebp,ebp
c002416c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024170:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024174:	50                   	push   eax
c0024175:	50                   	push   eax
c0024176:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002417d:	50                   	push   eax
c002417e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024184:	e8 bb ed ff ff       	call   c0022f44 <IDE::getBase(unsigned char)>
c0024189:	89 c2                	mov    edx,eax
c002418b:	89 f8                	mov    eax,edi
c002418d:	66 ef                	out    dx,ax
c002418f:	45                   	inc    ebp
c0024190:	83 c4 10             	add    esp,0x10
c0024193:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024199:	75 d1                	jne    c002416c <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002419b:	eb 23                	jmp    c00241c0 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c002419d:	0f b6 d2             	movzx  edx,dl
c00241a0:	51                   	push   ecx
c00241a1:	51                   	push   ecx
c00241a2:	52                   	push   edx
c00241a3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241a9:	e8 96 ed ff ff       	call   c0022f44 <IDE::getBase(unsigned char)>
c00241ae:	b9 00 01 00 00       	mov    ecx,0x100
c00241b3:	89 c2                	mov    edx,eax
c00241b5:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00241b9:	fc                   	cld    
c00241ba:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00241bd:	83 c4 10             	add    esp,0x10
c00241c0:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00241c8:	4e                   	dec    esi
c00241c9:	e9 3e ff ff ff       	jmp    c002410c <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00241ce:	31 ff                	xor    edi,edi
c00241d0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00241d5:	74 16                	je     c00241ed <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00241d7:	50                   	push   eax
c00241d8:	50                   	push   eax
c00241d9:	31 c0                	xor    eax,eax
c00241db:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00241e0:	0f 94 c0             	sete   al
c00241e3:	50                   	push   eax
c00241e4:	53                   	push   ebx
c00241e5:	e8 ec fb ff ff       	call   c0023dd6 <ATA::flush(bool)>
c00241ea:	83 c4 10             	add    esp,0x10
c00241ed:	83 c4 2c             	add    esp,0x2c
c00241f0:	89 f8                	mov    eax,edi
c00241f2:	5b                   	pop    ebx
c00241f3:	5e                   	pop    esi
c00241f4:	5f                   	pop    edi
c00241f5:	5d                   	pop    ebp
c00241f6:	c3                   	ret    
c00241f7:	90                   	nop

c00241f8 <ATA::read(unsigned long long, int, void*)>:
c00241f8:	57                   	push   edi
c00241f9:	b8 04 00 00 00       	mov    eax,0x4
c00241fe:	56                   	push   esi
c00241ff:	53                   	push   ebx
c0024200:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024204:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024208:	8d 7a ff             	lea    edi,[edx-0x1]
c002420b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002420f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024213:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024219:	77 25                	ja     c0024240 <ATA::read(unsigned long long, int, void*)+0x48>
c002421b:	b8 06 00 00 00       	mov    eax,0x6
c0024220:	85 f6                	test   esi,esi
c0024222:	74 1c                	je     c0024240 <ATA::read(unsigned long long, int, void*)+0x48>
c0024224:	50                   	push   eax
c0024225:	50                   	push   eax
c0024226:	6a 00                	push   0x0
c0024228:	56                   	push   esi
c0024229:	52                   	push   edx
c002422a:	53                   	push   ebx
c002422b:	51                   	push   ecx
c002422c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024230:	e8 3b fc ff ff       	call   c0023e70 <ATA::access(unsigned long long, int, void*, bool)>
c0024235:	83 c4 20             	add    esp,0x20
c0024238:	85 c0                	test   eax,eax
c002423a:	0f 95 c0             	setne  al
c002423d:	0f b6 c0             	movzx  eax,al
c0024240:	5b                   	pop    ebx
c0024241:	5e                   	pop    esi
c0024242:	5f                   	pop    edi
c0024243:	c3                   	ret    

c0024244 <ATA::write(unsigned long long, int, void*)>:
c0024244:	57                   	push   edi
c0024245:	b8 04 00 00 00       	mov    eax,0x4
c002424a:	56                   	push   esi
c002424b:	53                   	push   ebx
c002424c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024250:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024254:	8d 7a ff             	lea    edi,[edx-0x1]
c0024257:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002425b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002425f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024265:	77 25                	ja     c002428c <ATA::write(unsigned long long, int, void*)+0x48>
c0024267:	b8 06 00 00 00       	mov    eax,0x6
c002426c:	85 f6                	test   esi,esi
c002426e:	74 1c                	je     c002428c <ATA::write(unsigned long long, int, void*)+0x48>
c0024270:	50                   	push   eax
c0024271:	50                   	push   eax
c0024272:	6a 01                	push   0x1
c0024274:	56                   	push   esi
c0024275:	52                   	push   edx
c0024276:	53                   	push   ebx
c0024277:	51                   	push   ecx
c0024278:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002427c:	e8 ef fb ff ff       	call   c0023e70 <ATA::access(unsigned long long, int, void*, bool)>
c0024281:	83 c4 20             	add    esp,0x20
c0024284:	85 c0                	test   eax,eax
c0024286:	0f 95 c0             	setne  al
c0024289:	0f b6 c0             	movzx  eax,al
c002428c:	5b                   	pop    ebx
c002428d:	5e                   	pop    esi
c002428e:	5f                   	pop    edi
c002428f:	c3                   	ret    

c0024290 <ATA::detectCHS()>:
c0024290:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024294:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002429a:	c1 e0 06             	shl    eax,0x6
c002429d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00242a3:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00242ad:	c7 44 24 04 5f c2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c25f
c00242b5:	e9 b5 5b ff ff       	jmp    c0019e6f <Krnl::panic(char const*)>

c00242ba <ATA::open(int, int, void*)>:
c00242ba:	53                   	push   ebx
c00242bb:	83 ec 08             	sub    esp,0x8
c00242be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00242c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00242c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00242ca:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00242d0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00242d6:	c1 e0 06             	shl    eax,0x6
c00242d9:	01 d0                	add    eax,edx
c00242db:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00242e2:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00242e8:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00242ef:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00242f9:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00242ff:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024306:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002430d:	75 0c                	jne    c002431b <ATA::open(int, int, void*)+0x61>
c002430f:	83 ec 0c             	sub    esp,0xc
c0024312:	53                   	push   ebx
c0024313:	e8 78 ff ff ff       	call   c0024290 <ATA::detectCHS()>
c0024318:	83 c4 10             	add    esp,0x10
c002431b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024321:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024327:	c1 e0 06             	shl    eax,0x6
c002432a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024331:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002433b:	d1 e8                	shr    eax,1
c002433d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024343:	6a 04                	push   0x4
c0024345:	6a 0c                	push   0xc
c0024347:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002434e:	50                   	push   eax
c002434f:	52                   	push   edx
c0024350:	e8 01 ec ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024355:	90                   	nop
c0024356:	90                   	nop
c0024357:	6a 00                	push   0x0
c0024359:	6a 0c                	push   0xc
c002435b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024362:	50                   	push   eax
c0024363:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024369:	e8 e8 eb ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002436e:	83 c4 14             	add    esp,0x14
c0024371:	53                   	push   ebx
c0024372:	e8 63 fc fe ff       	call   c0013fda <PhysicalDisk::startCache()>
c0024377:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002437a:	e8 dd 1e ff ff       	call   c001625c <createPartitionsForDisk(PhysicalDisk*)>
c002437f:	31 c0                	xor    eax,eax
c0024381:	83 c4 18             	add    esp,0x18
c0024384:	5b                   	pop    ebx
c0024385:	c3                   	ret    

c0024386 <ATAPI::write(unsigned long long, int, void*)>:
c0024386:	b8 03 00 00 00       	mov    eax,0x3
c002438b:	c3                   	ret    

c002438c <ATAPI::close(int, int, void*)>:
c002438c:	83 ec 0c             	sub    esp,0xc
c002438f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024393:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024399:	85 c0                	test   eax,eax
c002439b:	74 0c                	je     c00243a9 <ATAPI::close(int, int, void*)+0x1d>
c002439d:	83 ec 0c             	sub    esp,0xc
c00243a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00243a2:	50                   	push   eax
c00243a3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00243a6:	83 c4 10             	add    esp,0x10
c00243a9:	31 c0                	xor    eax,eax
c00243ab:	83 c4 0c             	add    esp,0xc
c00243ae:	c3                   	ret    
c00243af:	90                   	nop

c00243b0 <ATAPI::ATAPI()>:
c00243b0:	83 ec 0c             	sub    esp,0xc
c00243b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243b7:	83 ec 04             	sub    esp,0x4
c00243ba:	68 00 08 00 00       	push   0x800
c00243bf:	68 99 c3 02 c0       	push   0xc002c399
c00243c4:	50                   	push   eax
c00243c5:	e8 a8 fb fe ff       	call   c0013f72 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00243ca:	83 c4 10             	add    esp,0x10
c00243cd:	ba b4 c2 02 c0       	mov    edx,0xc002c2b4
c00243d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243d6:	89 10                	mov    DWORD PTR [eax],edx
c00243d8:	90                   	nop
c00243d9:	83 c4 0c             	add    esp,0xc
c00243dc:	c3                   	ret    
c00243dd:	90                   	nop

c00243de <ATAPI::readyForCommand()>:
c00243de:	56                   	push   esi
c00243df:	53                   	push   ebx
c00243e0:	31 db                	xor    ebx,ebx
c00243e2:	50                   	push   eax
c00243e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00243e7:	50                   	push   eax
c00243e8:	6a 0c                	push   0xc
c00243ea:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00243f1:	50                   	push   eax
c00243f2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00243f8:	e8 19 ec ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c00243fd:	83 c4 10             	add    esp,0x10
c0024400:	a8 88                	test   al,0x88
c0024402:	74 23                	je     c0024427 <ATAPI::readyForCommand()+0x49>
c0024404:	43                   	inc    ebx
c0024405:	83 fb 63             	cmp    ebx,0x63
c0024408:	7e dd                	jle    c00243e7 <ATAPI::readyForCommand()+0x9>
c002440a:	51                   	push   ecx
c002440b:	51                   	push   ecx
c002440c:	6a 00                	push   0x0
c002440e:	68 40 42 0f 00       	push   0xf4240
c0024413:	e8 bb 98 ff ff       	call   c001dcd3 <nanoSleep(unsigned long long)>
c0024418:	83 c4 10             	add    esp,0x10
c002441b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024421:	75 c4                	jne    c00243e7 <ATAPI::readyForCommand()+0x9>
c0024423:	31 c0                	xor    eax,eax
c0024425:	eb 02                	jmp    c0024429 <ATAPI::readyForCommand()+0x4b>
c0024427:	b0 01                	mov    al,0x1
c0024429:	5a                   	pop    edx
c002442a:	5b                   	pop    ebx
c002442b:	5e                   	pop    esi
c002442c:	c3                   	ret    
c002442d:	90                   	nop

c002442e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002442e:	55                   	push   ebp
c002442f:	57                   	push   edi
c0024430:	56                   	push   esi
c0024431:	53                   	push   ebx
c0024432:	83 ec 20             	sub    esp,0x20
c0024435:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024439:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002443d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024441:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024445:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024449:	6a 01                	push   0x1
c002444b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024452:	50                   	push   eax
c0024453:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024459:	e8 04 ed ff ff       	call   c0023162 <IDE::enableIRQs(unsigned char, bool)>
c002445e:	5e                   	pop    esi
c002445f:	58                   	pop    eax
c0024460:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024467:	50                   	push   eax
c0024468:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002446e:	e8 bd ea ff ff       	call   c0022f30 <IDE::prepareInterrupt(unsigned char)>
c0024473:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024476:	e8 63 ff ff ff       	call   c00243de <ATAPI::readyForCommand()>
c002447b:	83 c4 10             	add    esp,0x10
c002447e:	84 c0                	test   al,al
c0024480:	75 0a                	jne    c002448c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024482:	bb 01 00 00 00       	mov    ebx,0x1
c0024487:	e9 57 02 00 00       	jmp    c00246e3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002448c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024492:	c1 e0 04             	shl    eax,0x4
c0024495:	0f b6 c0             	movzx  eax,al
c0024498:	50                   	push   eax
c0024499:	6a 06                	push   0x6
c002449b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244a2:	50                   	push   eax
c00244a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244a9:	e8 a8 ea ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244ae:	6a 00                	push   0x0
c00244b0:	6a 01                	push   0x1
c00244b2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244b9:	50                   	push   eax
c00244ba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244c0:	e8 91 ea ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244c5:	83 c4 20             	add    esp,0x20
c00244c8:	0f b6 c3             	movzx  eax,bl
c00244cb:	0f b6 df             	movzx  ebx,bh
c00244ce:	50                   	push   eax
c00244cf:	6a 04                	push   0x4
c00244d1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244d8:	50                   	push   eax
c00244d9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244df:	e8 72 ea ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244e4:	53                   	push   ebx
c00244e5:	6a 05                	push   0x5
c00244e7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244ee:	50                   	push   eax
c00244ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244f5:	e8 5c ea ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244fa:	83 c4 20             	add    esp,0x20
c00244fd:	68 a0 00 00 00       	push   0xa0
c0024502:	6a 07                	push   0x7
c0024504:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002450b:	50                   	push   eax
c002450c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024512:	e8 3f ea ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024517:	83 c4 0c             	add    esp,0xc
c002451a:	6a 01                	push   0x1
c002451c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024523:	50                   	push   eax
c0024524:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002452a:	e8 c9 f4 ff ff       	call   c00239f8 <IDE::polling(unsigned char, unsigned int)>
c002452f:	83 c4 10             	add    esp,0x10
c0024532:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024538:	84 c0                	test   al,al
c002453a:	74 23                	je     c002455f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002453c:	0f b6 d8             	movzx  ebx,al
c002453f:	0f b6 d2             	movzx  edx,dl
c0024542:	53                   	push   ebx
c0024543:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002454a:	50                   	push   eax
c002454b:	52                   	push   edx
c002454c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024552:	e8 f1 f3 ff ff       	call   c0023948 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024557:	83 c4 10             	add    esp,0x10
c002455a:	e9 84 01 00 00       	jmp    c00246e3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002455f:	0f b6 d2             	movzx  edx,dl
c0024562:	53                   	push   ebx
c0024563:	53                   	push   ebx
c0024564:	52                   	push   edx
c0024565:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002456b:	e8 d4 e9 ff ff       	call   c0022f44 <IDE::getBase(unsigned char)>
c0024570:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024574:	b9 06 00 00 00       	mov    ecx,0x6
c0024579:	89 c2                	mov    edx,eax
c002457b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002457e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024582:	83 c4 10             	add    esp,0x10
c0024585:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002458b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024592:	85 db                	test   ebx,ebx
c0024594:	0f 84 ec 00 00 00    	je     c0024686 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002459a:	51                   	push   ecx
c002459b:	51                   	push   ecx
c002459c:	52                   	push   edx
c002459d:	50                   	push   eax
c002459e:	e8 21 eb ff ff       	call   c00230c4 <IDE::waitInterrupt(unsigned char)>
c00245a3:	83 c4 10             	add    esp,0x10
c00245a6:	84 c0                	test   al,al
c00245a8:	0f 84 d4 fe ff ff    	je     c0024482 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00245ae:	56                   	push   esi
c00245af:	56                   	push   esi
c00245b0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245b7:	50                   	push   eax
c00245b8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245be:	e8 6d e9 ff ff       	call   c0022f30 <IDE::prepareInterrupt(unsigned char)>
c00245c3:	83 c4 0c             	add    esp,0xc
c00245c6:	6a 04                	push   0x4
c00245c8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245cf:	50                   	push   eax
c00245d0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245d6:	e8 3b ea ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c00245db:	83 c4 0c             	add    esp,0xc
c00245de:	89 c6                	mov    esi,eax
c00245e0:	6a 05                	push   0x5
c00245e2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245e9:	50                   	push   eax
c00245ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245f0:	e8 21 ea ff ff       	call   c0023016 <IDE::read(unsigned char, unsigned char)>
c00245f5:	89 f1                	mov    ecx,esi
c00245f7:	0f b6 c0             	movzx  eax,al
c00245fa:	0f b6 f1             	movzx  esi,cl
c00245fd:	c1 e0 08             	shl    eax,0x8
c0024600:	09 c6                	or     esi,eax
c0024602:	d1 fe                	sar    esi,1
c0024604:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024608:	83 c4 10             	add    esp,0x10
c002460b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024610:	74 41                	je     c0024653 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024612:	31 c9                	xor    ecx,ecx
c0024614:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002461a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024621:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024625:	75 0a                	jne    c0024631 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024627:	01 c9                	add    ecx,ecx
c0024629:	01 cd                	add    ebp,ecx
c002462b:	4b                   	dec    ebx
c002462c:	e9 54 ff ff ff       	jmp    c0024585 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024631:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024636:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002463a:	51                   	push   ecx
c002463b:	51                   	push   ecx
c002463c:	52                   	push   edx
c002463d:	50                   	push   eax
c002463e:	e8 01 e9 ff ff       	call   c0022f44 <IDE::getBase(unsigned char)>
c0024643:	89 c2                	mov    edx,eax
c0024645:	89 f0                	mov    eax,esi
c0024647:	66 ef                	out    dx,ax
c0024649:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002464d:	83 c4 10             	add    esp,0x10
c0024650:	41                   	inc    ecx
c0024651:	eb c1                	jmp    c0024614 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024653:	31 f6                	xor    esi,esi
c0024655:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002465b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024662:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024666:	75 06                	jne    c002466e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024668:	01 f6                	add    esi,esi
c002466a:	01 f5                	add    ebp,esi
c002466c:	eb bd                	jmp    c002462b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002466e:	51                   	push   ecx
c002466f:	51                   	push   ecx
c0024670:	52                   	push   edx
c0024671:	50                   	push   eax
c0024672:	e8 cd e8 ff ff       	call   c0022f44 <IDE::getBase(unsigned char)>
c0024677:	89 c2                	mov    edx,eax
c0024679:	66 ed                	in     ax,dx
c002467b:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024680:	83 c4 10             	add    esp,0x10
c0024683:	46                   	inc    esi
c0024684:	eb cf                	jmp    c0024655 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024686:	51                   	push   ecx
c0024687:	51                   	push   ecx
c0024688:	52                   	push   edx
c0024689:	50                   	push   eax
c002468a:	e8 35 ea ff ff       	call   c00230c4 <IDE::waitInterrupt(unsigned char)>
c002468f:	83 c4 10             	add    esp,0x10
c0024692:	84 c0                	test   al,al
c0024694:	0f 84 e8 fd ff ff    	je     c0024482 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002469a:	bb a0 86 01 00       	mov    ebx,0x186a0
c002469f:	52                   	push   edx
c00246a0:	52                   	push   edx
c00246a1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246a8:	50                   	push   eax
c00246a9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246af:	e8 7c e8 ff ff       	call   c0022f30 <IDE::prepareInterrupt(unsigned char)>
c00246b4:	83 c4 10             	add    esp,0x10
c00246b7:	50                   	push   eax
c00246b8:	50                   	push   eax
c00246b9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246c0:	50                   	push   eax
c00246c1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246c7:	e8 78 e8 ff ff       	call   c0022f44 <IDE::getBase(unsigned char)>
c00246cc:	8d 50 07             	lea    edx,[eax+0x7]
c00246cf:	ec                   	in     al,dx
c00246d0:	83 c4 10             	add    esp,0x10
c00246d3:	a8 88                	test   al,0x88
c00246d5:	74 0a                	je     c00246e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00246d7:	4b                   	dec    ebx
c00246d8:	75 dd                	jne    c00246b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00246da:	bb 02 00 00 00       	mov    ebx,0x2
c00246df:	eb 02                	jmp    c00246e3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00246e1:	31 db                	xor    ebx,ebx
c00246e3:	83 c4 1c             	add    esp,0x1c
c00246e6:	89 d8                	mov    eax,ebx
c00246e8:	5b                   	pop    ebx
c00246e9:	5e                   	pop    esi
c00246ea:	5f                   	pop    edi
c00246eb:	5d                   	pop    ebp
c00246ec:	c3                   	ret    
c00246ed:	90                   	nop

c00246ee <ATAPI::diskRemoved()>:
c00246ee:	83 ec 18             	sub    esp,0x18
c00246f1:	68 a5 c3 02 c0       	push   0xc002c3a5
c00246f6:	e8 08 e0 fe ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c00246fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00246ff:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024706:	83 c4 1c             	add    esp,0x1c
c0024709:	c3                   	ret    

c002470a <ATAPI::eject()>:
c002470a:	57                   	push   edi
c002470b:	b9 03 00 00 00       	mov    ecx,0x3
c0024710:	53                   	push   ebx
c0024711:	83 ec 14             	sub    esp,0x14
c0024714:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024718:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002471c:	fc                   	cld    
c002471d:	31 c0                	xor    eax,eax
c002471f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024721:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024726:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002472b:	50                   	push   eax
c002472c:	50                   	push   eax
c002472d:	6a 00                	push   0x0
c002472f:	6a 00                	push   0x0
c0024731:	6a 00                	push   0x0
c0024733:	6a 02                	push   0x2
c0024735:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024739:	50                   	push   eax
c002473a:	53                   	push   ebx
c002473b:	e8 ee fc ff ff       	call   c002442e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024740:	83 c4 14             	add    esp,0x14
c0024743:	53                   	push   ebx
c0024744:	e8 a5 ff ff ff       	call   c00246ee <ATAPI::diskRemoved()>
c0024749:	83 c4 24             	add    esp,0x24
c002474c:	31 c0                	xor    eax,eax
c002474e:	5b                   	pop    ebx
c002474f:	5f                   	pop    edi
c0024750:	c3                   	ret    
c0024751:	90                   	nop

c0024752 <ATAPI::diskInserted()>:
c0024752:	53                   	push   ebx
c0024753:	83 ec 14             	sub    esp,0x14
c0024756:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002475a:	68 bc c3 02 c0       	push   0xc002c3bc
c002475f:	e8 9f df fe ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0024764:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002476b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002476e:	e8 67 f8 fe ff       	call   c0013fda <PhysicalDisk::startCache()>
c0024773:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024777:	83 c4 18             	add    esp,0x18
c002477a:	5b                   	pop    ebx
c002477b:	e9 dc 1a ff ff       	jmp    c001625c <createPartitionsForDisk(PhysicalDisk*)>

c0024780 <ATAPI::detectMedia()>:
c0024780:	56                   	push   esi
c0024781:	53                   	push   ebx
c0024782:	83 ec 28             	sub    esp,0x28
c0024785:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024789:	6a 0c                	push   0xc
c002478b:	6a 00                	push   0x0
c002478d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024791:	56                   	push   esi
c0024792:	e8 b9 bf fd ff       	call   c0000750 <memset>
c0024797:	58                   	pop    eax
c0024798:	5a                   	pop    edx
c0024799:	6a 00                	push   0x0
c002479b:	6a 00                	push   0x0
c002479d:	6a 00                	push   0x0
c002479f:	6a 00                	push   0x0
c00247a1:	56                   	push   esi
c00247a2:	53                   	push   ebx
c00247a3:	e8 86 fc ff ff       	call   c002442e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00247a8:	83 c4 1c             	add    esp,0x1c
c00247ab:	6a 0c                	push   0xc
c00247ad:	6a 00                	push   0x0
c00247af:	56                   	push   esi
c00247b0:	e8 9b bf fd ff       	call   c0000750 <memset>
c00247b5:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00247ba:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00247bf:	59                   	pop    ecx
c00247c0:	58                   	pop    eax
c00247c1:	6a 01                	push   0x1
c00247c3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00247c7:	50                   	push   eax
c00247c8:	6a 00                	push   0x0
c00247ca:	6a 12                	push   0x12
c00247cc:	56                   	push   esi
c00247cd:	53                   	push   ebx
c00247ce:	e8 5b fc ff ff       	call   c002442e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00247d3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00247d7:	83 c4 20             	add    esp,0x20
c00247da:	83 e0 7f             	and    eax,0x7f
c00247dd:	3c 70                	cmp    al,0x70
c00247df:	74 15                	je     c00247f6 <ATAPI::detectMedia()+0x76>
c00247e1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00247e8:	75 0c                	jne    c00247f6 <ATAPI::detectMedia()+0x76>
c00247ea:	83 ec 0c             	sub    esp,0xc
c00247ed:	53                   	push   ebx
c00247ee:	e8 5f ff ff ff       	call   c0024752 <ATAPI::diskInserted()>
c00247f3:	83 c4 10             	add    esp,0x10
c00247f6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00247fa:	83 e0 0f             	and    eax,0xf
c00247fd:	3c 02                	cmp    al,0x2
c00247ff:	75 1b                	jne    c002481c <ATAPI::detectMedia()+0x9c>
c0024801:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024806:	75 2d                	jne    c0024835 <ATAPI::detectMedia()+0xb5>
c0024808:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002480f:	74 24                	je     c0024835 <ATAPI::detectMedia()+0xb5>
c0024811:	83 ec 0c             	sub    esp,0xc
c0024814:	53                   	push   ebx
c0024815:	e8 d4 fe ff ff       	call   c00246ee <ATAPI::diskRemoved()>
c002481a:	eb 16                	jmp    c0024832 <ATAPI::detectMedia()+0xb2>
c002481c:	84 c0                	test   al,al
c002481e:	75 15                	jne    c0024835 <ATAPI::detectMedia()+0xb5>
c0024820:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024827:	75 0c                	jne    c0024835 <ATAPI::detectMedia()+0xb5>
c0024829:	83 ec 0c             	sub    esp,0xc
c002482c:	53                   	push   ebx
c002482d:	e8 20 ff ff ff       	call   c0024752 <ATAPI::diskInserted()>
c0024832:	83 c4 10             	add    esp,0x10
c0024835:	83 c4 24             	add    esp,0x24
c0024838:	5b                   	pop    ebx
c0024839:	5e                   	pop    esi
c002483a:	c3                   	ret    
c002483b:	90                   	nop

c002483c <ATAPI::open(int, int, void*)>:
c002483c:	53                   	push   ebx
c002483d:	83 ec 08             	sub    esp,0x8
c0024840:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024844:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024848:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002484c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024852:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024858:	c1 e0 06             	shl    eax,0x6
c002485b:	01 d0                	add    eax,edx
c002485d:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024864:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002486a:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024871:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002487b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024881:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024888:	6a 04                	push   0x4
c002488a:	6a 0c                	push   0xc
c002488c:	51                   	push   ecx
c002488d:	52                   	push   edx
c002488e:	e8 c3 e6 ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024893:	90                   	nop
c0024894:	90                   	nop
c0024895:	6a 00                	push   0x0
c0024897:	6a 0c                	push   0xc
c0024899:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00248a0:	50                   	push   eax
c00248a1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00248a7:	e8 aa e6 ff ff       	call   c0022f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00248ac:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00248b3:	83 c4 14             	add    esp,0x14
c00248b6:	53                   	push   ebx
c00248b7:	e8 c4 fe ff ff       	call   c0024780 <ATAPI::detectMedia()>
c00248bc:	31 c0                	xor    eax,eax
c00248be:	83 c4 18             	add    esp,0x18
c00248c1:	5b                   	pop    ebx
c00248c2:	c3                   	ret    
c00248c3:	90                   	nop

c00248c4 <ATAPI::read(unsigned long long, int, void*)>:
c00248c4:	55                   	push   ebp
c00248c5:	57                   	push   edi
c00248c6:	56                   	push   esi
c00248c7:	53                   	push   ebx
c00248c8:	83 ec 1c             	sub    esp,0x1c
c00248cb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00248cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00248d3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00248d7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00248de:	74 41                	je     c0024921 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00248e0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00248e4:	b9 03 00 00 00       	mov    ecx,0x3
c00248e9:	fc                   	cld    
c00248ea:	31 c0                	xor    eax,eax
c00248ec:	86 fb                	xchg   bl,bh
c00248ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00248f0:	c1 c3 10             	rol    ebx,0x10
c00248f3:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00248f8:	89 e8                	mov    eax,ebp
c00248fa:	86 fb                	xchg   bl,bh
c00248fc:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024900:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024904:	50                   	push   eax
c0024905:	50                   	push   eax
c0024906:	55                   	push   ebp
c0024907:	c1 e5 0b             	shl    ebp,0xb
c002490a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002490e:	6a 00                	push   0x0
c0024910:	55                   	push   ebp
c0024911:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024915:	50                   	push   eax
c0024916:	56                   	push   esi
c0024917:	e8 12 fb ff ff       	call   c002442e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002491c:	83 c4 20             	add    esp,0x20
c002491f:	eb 1a                	jmp    c002493b <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024921:	83 ec 0c             	sub    esp,0xc
c0024924:	56                   	push   esi
c0024925:	e8 56 fe ff ff       	call   c0024780 <ATAPI::detectMedia()>
c002492a:	83 c4 10             	add    esp,0x10
c002492d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024934:	75 aa                	jne    c00248e0 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024936:	b8 02 00 00 00       	mov    eax,0x2
c002493b:	83 c4 1c             	add    esp,0x1c
c002493e:	5b                   	pop    ebx
c002493f:	5e                   	pop    esi
c0024940:	5f                   	pop    edi
c0024941:	5d                   	pop    ebp
c0024942:	c3                   	ret    
c0024943:	90                   	nop

c0024944 <SATA::close(int, int, void*)>:
c0024944:	83 ec 0c             	sub    esp,0xc
c0024947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002494b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024951:	85 c0                	test   eax,eax
c0024953:	74 0c                	je     c0024961 <SATA::close(int, int, void*)+0x1d>
c0024955:	83 ec 0c             	sub    esp,0xc
c0024958:	8b 10                	mov    edx,DWORD PTR [eax]
c002495a:	50                   	push   eax
c002495b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002495e:	83 c4 10             	add    esp,0x10
c0024961:	31 c0                	xor    eax,eax
c0024963:	83 c4 0c             	add    esp,0xc
c0024966:	c3                   	ret    
c0024967:	90                   	nop

c0024968 <SATA::powerSaving(PowerSavingLevel)>:
c0024968:	c3                   	ret    
c0024969:	90                   	nop

c002496a <SATA::open(int, int, void*)>:
c002496a:	56                   	push   esi
c002496b:	53                   	push   ebx
c002496c:	50                   	push   eax
c002496d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024975:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002497f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024985:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002498f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024993:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002499d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00249a3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00249aa:	e8 e6 af fe ff       	call   c000f995 <Phys::allocatePage()>
c00249af:	89 c6                	mov    esi,eax
c00249b1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00249b7:	81 c6 00 10 00 00    	add    esi,0x1000
c00249bd:	e8 d3 af fe ff       	call   c000f995 <Phys::allocatePage()>
c00249c2:	39 c6                	cmp    esi,eax
c00249c4:	74 10                	je     c00249d6 <SATA::open(int, int, void*)+0x6c>
c00249c6:	83 ec 0c             	sub    esp,0xc
c00249c9:	68 e4 c2 02 c0       	push   0xc002c2e4
c00249ce:	e8 9c 54 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c00249d3:	83 c4 10             	add    esp,0x10
c00249d6:	83 ec 0c             	sub    esp,0xc
c00249d9:	6a 02                	push   0x2
c00249db:	e8 77 c8 fe ff       	call   c0011257 <Virt::allocateKernelVirtualPages(int)>
c00249e0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00249e6:	6a 03                	push   0x3
c00249e8:	50                   	push   eax
c00249e9:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00249ef:	ff 35 50 db 02 c0    	push   DWORD PTR ds:0xc002db50
c00249f5:	e8 1a d0 fe ff       	call   c0011a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c00249fa:	83 c4 14             	add    esp,0x14
c00249fd:	53                   	push   ebx
c00249fe:	e8 d7 f5 fe ff       	call   c0013fda <PhysicalDisk::startCache()>
c0024a03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a06:	e8 51 18 ff ff       	call   c001625c <createPartitionsForDisk(PhysicalDisk*)>
c0024a0b:	83 c4 14             	add    esp,0x14
c0024a0e:	31 c0                	xor    eax,eax
c0024a10:	5b                   	pop    ebx
c0024a11:	5e                   	pop    esi
c0024a12:	c3                   	ret    
c0024a13:	90                   	nop

c0024a14 <SATA::SATA()>:
c0024a14:	83 ec 0c             	sub    esp,0xc
c0024a17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a1b:	83 ec 04             	sub    esp,0x4
c0024a1e:	68 00 02 00 00       	push   0x200
c0024a23:	68 f8 c2 02 c0       	push   0xc002c2f8
c0024a28:	50                   	push   eax
c0024a29:	e8 44 f5 fe ff       	call   c0013f72 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024a2e:	83 c4 10             	add    esp,0x10
c0024a31:	ba 68 c3 02 c0       	mov    edx,0xc002c368
c0024a36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a3a:	89 10                	mov    DWORD PTR [eax],edx
c0024a3c:	90                   	nop
c0024a3d:	83 c4 0c             	add    esp,0xc
c0024a40:	c3                   	ret    
c0024a41:	90                   	nop

c0024a42 <SATA::access(unsigned long long, int, void*, bool)>:
c0024a42:	55                   	push   ebp
c0024a43:	57                   	push   edi
c0024a44:	56                   	push   esi
c0024a45:	53                   	push   ebx
c0024a46:	83 ec 2c             	sub    esp,0x2c
c0024a49:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024a4d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024a51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024a55:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024a59:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024a5d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024a62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024a66:	7e 10                	jle    c0024a78 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024a68:	83 ec 0c             	sub    esp,0xc
c0024a6b:	68 08 c3 02 c0       	push   0xc002c308
c0024a70:	e8 fa 53 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c0024a75:	83 c4 10             	add    esp,0x10
c0024a78:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024a7e:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024a84:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024a8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024a8e:	89 d0                	mov    eax,edx
c0024a90:	c1 e0 07             	shl    eax,0x7
c0024a93:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024a97:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024aa1:	51                   	push   ecx
c0024aa2:	8d 42 02             	lea    eax,[edx+0x2]
c0024aa5:	51                   	push   ecx
c0024aa6:	c1 e0 07             	shl    eax,0x7
c0024aa9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024aad:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024ab1:	50                   	push   eax
c0024ab2:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024ab8:	e8 1b f0 ff ff       	call   c0023ad8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024abd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024ac1:	83 c4 10             	add    esp,0x10
c0024ac4:	b8 01 00 00 00       	mov    eax,0x1
c0024ac9:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024ace:	0f 84 cb 01 00 00    	je     c0024c9f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024ad4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024ad8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024adc:	c1 e0 09             	shl    eax,0x9
c0024adf:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024ae4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024ae8:	74 0e                	je     c0024af8 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0024aea:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0024af0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024af4:	89 c1                	mov    ecx,eax
c0024af6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024af8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024afc:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024b02:	8d 42 02             	lea    eax,[edx+0x2]
c0024b05:	c1 e0 07             	shl    eax,0x7
c0024b08:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024b0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0024b0e:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024b14:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024b1a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024b1e:	c1 e1 05             	shl    ecx,0x5
c0024b21:	01 c8                	add    eax,ecx
c0024b23:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024b27:	83 e1 01             	and    ecx,0x1
c0024b2a:	89 ce                	mov    esi,ecx
c0024b2c:	8a 08                	mov    cl,BYTE PTR [eax]
c0024b2e:	c1 e6 06             	shl    esi,0x6
c0024b31:	83 e1 bf             	and    ecx,0xffffffbf
c0024b34:	09 f1                	or     ecx,esi
c0024b36:	88 08                	mov    BYTE PTR [eax],cl
c0024b38:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024b3a:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024b40:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024b46:	89 08                	mov    DWORD PTR [eax],ecx
c0024b48:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024b4e:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024b54:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024b5a:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024b5d:	50                   	push   eax
c0024b5e:	68 90 00 00 00       	push   0x90
c0024b63:	6a 00                	push   0x0
c0024b65:	56                   	push   esi
c0024b66:	e8 e5 bb fd ff       	call   c0000750 <memset>
c0024b6b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024b71:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024b75:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024b7b:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024b7f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024b83:	83 c4 10             	add    esp,0x10
c0024b86:	48                   	dec    eax
c0024b87:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024b8c:	89 c1                	mov    ecx,eax
c0024b8e:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024b94:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024b99:	09 c8                	or     eax,ecx
c0024b9b:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024ba1:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024ba4:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024bab:	66 25 00 7f          	and    ax,0x7f00
c0024baf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024bb3:	66 0d 27 80          	or     ax,0x8027
c0024bb7:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024bbc:	66 89 06             	mov    WORD PTR [esi],ax
c0024bbf:	19 c0                	sbb    eax,eax
c0024bc1:	83 e0 f0             	and    eax,0xfffffff0
c0024bc4:	83 c0 35             	add    eax,0x35
c0024bc7:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024bca:	89 e8                	mov    eax,ebp
c0024bcc:	c1 e8 10             	shr    eax,0x10
c0024bcf:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0024bd2:	89 e8                	mov    eax,ebp
c0024bd4:	c1 e8 18             	shr    eax,0x18
c0024bd7:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024bda:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024bde:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024be1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024be5:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024be8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024bec:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024bf0:	89 d6                	mov    esi,edx
c0024bf2:	31 c0                	xor    eax,eax
c0024bf4:	c1 e6 07             	shl    esi,0x7
c0024bf7:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024bfb:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024c01:	80 e1 88             	and    cl,0x88
c0024c04:	74 0a                	je     c0024c10 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024c06:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024c0b:	74 0a                	je     c0024c17 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024c0d:	40                   	inc    eax
c0024c0e:	eb eb                	jmp    c0024bfb <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024c10:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024c15:	75 0a                	jne    c0024c21 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024c17:	83 ec 0c             	sub    esp,0xc
c0024c1a:	68 41 c3 02 c0       	push   0xc002c341
c0024c1f:	eb 56                	jmp    c0024c77 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024c21:	b8 01 00 00 00       	mov    eax,0x1
c0024c26:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024c2a:	c1 e2 07             	shl    edx,0x7
c0024c2d:	d3 e0                	shl    eax,cl
c0024c2f:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024c33:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024c39:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024c3f:	85 c8                	test   eax,ecx
c0024c41:	74 20                	je     c0024c63 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024c43:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024c49:	0f ba e1 1e          	bt     ecx,0x1e
c0024c4d:	73 ea                	jae    c0024c39 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024c4f:	83 ec 0c             	sub    esp,0xc
c0024c52:	68 4f c3 02 c0       	push   0xc002c34f
c0024c57:	e8 13 52 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c0024c5c:	83 c4 10             	add    esp,0x10
c0024c5f:	31 c0                	xor    eax,eax
c0024c61:	eb 3c                	jmp    c0024c9f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c63:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024c69:	0f ba e0 1e          	bt     eax,0x1e
c0024c6d:	73 17                	jae    c0024c86 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024c6f:	83 ec 0c             	sub    esp,0xc
c0024c72:	68 4f c3 02 c0       	push   0xc002c34f
c0024c77:	e8 f3 51 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c0024c7c:	83 c4 10             	add    esp,0x10
c0024c7f:	b8 01 00 00 00       	mov    eax,0x1
c0024c84:	eb 19                	jmp    c0024c9f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c86:	31 c0                	xor    eax,eax
c0024c88:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024c8d:	75 10                	jne    c0024c9f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c8f:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024c95:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024c99:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c9d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024c9f:	83 c4 2c             	add    esp,0x2c
c0024ca2:	5b                   	pop    ebx
c0024ca3:	5e                   	pop    esi
c0024ca4:	5f                   	pop    edi
c0024ca5:	5d                   	pop    ebp
c0024ca6:	c3                   	ret    
c0024ca7:	90                   	nop

c0024ca8 <SATA::read(unsigned long long, int, void*)>:
c0024ca8:	57                   	push   edi
c0024ca9:	b8 04 00 00 00       	mov    eax,0x4
c0024cae:	56                   	push   esi
c0024caf:	53                   	push   ebx
c0024cb0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024cb4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024cb8:	8d 7a ff             	lea    edi,[edx-0x1]
c0024cbb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024cbf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024cc3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024cc9:	77 25                	ja     c0024cf0 <SATA::read(unsigned long long, int, void*)+0x48>
c0024ccb:	b8 06 00 00 00       	mov    eax,0x6
c0024cd0:	85 f6                	test   esi,esi
c0024cd2:	74 1c                	je     c0024cf0 <SATA::read(unsigned long long, int, void*)+0x48>
c0024cd4:	50                   	push   eax
c0024cd5:	50                   	push   eax
c0024cd6:	6a 00                	push   0x0
c0024cd8:	56                   	push   esi
c0024cd9:	52                   	push   edx
c0024cda:	53                   	push   ebx
c0024cdb:	51                   	push   ecx
c0024cdc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024ce0:	e8 5d fd ff ff       	call   c0024a42 <SATA::access(unsigned long long, int, void*, bool)>
c0024ce5:	83 c4 20             	add    esp,0x20
c0024ce8:	85 c0                	test   eax,eax
c0024cea:	0f 95 c0             	setne  al
c0024ced:	0f b6 c0             	movzx  eax,al
c0024cf0:	5b                   	pop    ebx
c0024cf1:	5e                   	pop    esi
c0024cf2:	5f                   	pop    edi
c0024cf3:	c3                   	ret    

c0024cf4 <SATA::write(unsigned long long, int, void*)>:
c0024cf4:	55                   	push   ebp
c0024cf5:	b8 04 00 00 00       	mov    eax,0x4
c0024cfa:	57                   	push   edi
c0024cfb:	56                   	push   esi
c0024cfc:	53                   	push   ebx
c0024cfd:	83 ec 0c             	sub    esp,0xc
c0024d00:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024d04:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024d08:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024d0b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024d0f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024d13:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024d19:	77 3d                	ja     c0024d58 <SATA::write(unsigned long long, int, void*)+0x64>
c0024d1b:	b8 06 00 00 00       	mov    eax,0x6
c0024d20:	85 ed                	test   ebp,ebp
c0024d22:	74 34                	je     c0024d58 <SATA::write(unsigned long long, int, void*)+0x64>
c0024d24:	c1 e3 09             	shl    ebx,0x9
c0024d27:	01 eb                	add    ebx,ebp
c0024d29:	89 d6                	mov    esi,edx
c0024d2b:	89 cf                	mov    edi,ecx
c0024d2d:	83 c6 01             	add    esi,0x1
c0024d30:	83 d7 00             	adc    edi,0x0
c0024d33:	50                   	push   eax
c0024d34:	50                   	push   eax
c0024d35:	6a 01                	push   0x1
c0024d37:	55                   	push   ebp
c0024d38:	81 c5 00 02 00 00    	add    ebp,0x200
c0024d3e:	6a 01                	push   0x1
c0024d40:	51                   	push   ecx
c0024d41:	52                   	push   edx
c0024d42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024d46:	e8 f7 fc ff ff       	call   c0024a42 <SATA::access(unsigned long long, int, void*, bool)>
c0024d4b:	83 c4 20             	add    esp,0x20
c0024d4e:	89 f2                	mov    edx,esi
c0024d50:	89 f9                	mov    ecx,edi
c0024d52:	39 dd                	cmp    ebp,ebx
c0024d54:	75 d3                	jne    c0024d29 <SATA::write(unsigned long long, int, void*)+0x35>
c0024d56:	31 c0                	xor    eax,eax
c0024d58:	83 c4 0c             	add    esp,0xc
c0024d5b:	5b                   	pop    ebx
c0024d5c:	5e                   	pop    esi
c0024d5d:	5f                   	pop    edi
c0024d5e:	5d                   	pop    ebp
c0024d5f:	c3                   	ret    

c0024d60 <SATAPI::write(unsigned long long, int, void*)>:
c0024d60:	b8 03 00 00 00       	mov    eax,0x3
c0024d65:	c3                   	ret    

c0024d66 <SATAPI::close(int, int, void*)>:
c0024d66:	83 ec 0c             	sub    esp,0xc
c0024d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d6d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024d73:	85 c0                	test   eax,eax
c0024d75:	74 0c                	je     c0024d83 <SATAPI::close(int, int, void*)+0x1d>
c0024d77:	83 ec 0c             	sub    esp,0xc
c0024d7a:	8b 10                	mov    edx,DWORD PTR [eax]
c0024d7c:	50                   	push   eax
c0024d7d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024d80:	83 c4 10             	add    esp,0x10
c0024d83:	31 c0                	xor    eax,eax
c0024d85:	83 c4 0c             	add    esp,0xc
c0024d88:	c3                   	ret    
c0024d89:	90                   	nop

c0024d8a <SATAPI::SATAPI()>:
c0024d8a:	83 ec 0c             	sub    esp,0xc
c0024d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d91:	83 ec 04             	sub    esp,0x4
c0024d94:	68 00 08 00 00       	push   0x800
c0024d99:	68 98 c3 02 c0       	push   0xc002c398
c0024d9e:	50                   	push   eax
c0024d9f:	e8 ce f1 fe ff       	call   c0013f72 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024da4:	83 c4 10             	add    esp,0x10
c0024da7:	ba 44 c4 02 c0       	mov    edx,0xc002c444
c0024dac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024db0:	89 10                	mov    DWORD PTR [eax],edx
c0024db2:	90                   	nop
c0024db3:	83 c4 0c             	add    esp,0xc
c0024db6:	c3                   	ret    
c0024db7:	90                   	nop

c0024db8 <SATAPI::diskRemoved()>:
c0024db8:	83 ec 18             	sub    esp,0x18
c0024dbb:	68 a4 c3 02 c0       	push   0xc002c3a4
c0024dc0:	e8 3e d9 fe ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0024dc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024dc9:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024dd0:	83 c4 1c             	add    esp,0x1c
c0024dd3:	c3                   	ret    

c0024dd4 <SATAPI::diskInserted()>:
c0024dd4:	53                   	push   ebx
c0024dd5:	83 ec 14             	sub    esp,0x14
c0024dd8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024ddc:	68 bb c3 02 c0       	push   0xc002c3bb
c0024de1:	e8 1d d9 fe ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0024de6:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024ded:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024df0:	e8 e5 f1 fe ff       	call   c0013fda <PhysicalDisk::startCache()>
c0024df5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024df9:	83 c4 18             	add    esp,0x18
c0024dfc:	5b                   	pop    ebx
c0024dfd:	e9 5a 14 ff ff       	jmp    c001625c <createPartitionsForDisk(PhysicalDisk*)>

c0024e02 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024e02:	55                   	push   ebp
c0024e03:	57                   	push   edi
c0024e04:	56                   	push   esi
c0024e05:	53                   	push   ebx
c0024e06:	83 ec 34             	sub    esp,0x34
c0024e09:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024e0d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024e11:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024e15:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024e19:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024e1d:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024e23:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024e29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024e2d:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024e33:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024e37:	c1 e0 07             	shl    eax,0x7
c0024e3a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024e3e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024e42:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024e4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e50:	8d 58 02             	lea    ebx,[eax+0x2]
c0024e53:	c1 e3 07             	shl    ebx,0x7
c0024e56:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024e5a:	53                   	push   ebx
c0024e5b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024e61:	e8 72 ec ff ff       	call   c0023ad8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024e66:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024e6a:	83 c4 10             	add    esp,0x10
c0024e6d:	b8 01 00 00 00       	mov    eax,0x1
c0024e72:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024e77:	0f 84 85 01 00 00    	je     c0025002 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024e7d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024e85:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024e8b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024e91:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024e95:	c1 e1 05             	shl    ecx,0x5
c0024e98:	01 c8                	add    eax,ecx
c0024e9a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024e9c:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024ea2:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024ea8:	89 08                	mov    DWORD PTR [eax],ecx
c0024eaa:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024eb0:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024eb6:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024ebc:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024ebf:	8d 7b 40             	lea    edi,[ebx+0x40]
c0024ec2:	50                   	push   eax
c0024ec3:	68 90 00 00 00       	push   0x90
c0024ec8:	6a 00                	push   0x0
c0024eca:	53                   	push   ebx
c0024ecb:	e8 80 b8 fd ff       	call   c0000750 <memset>
c0024ed0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0024ed4:	b9 0c 00 00 00       	mov    ecx,0xc
c0024ed9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024edb:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0024ee1:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024ee5:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024eeb:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024eef:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024ef3:	48                   	dec    eax
c0024ef4:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024ef9:	89 c1                	mov    ecx,eax
c0024efb:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024f01:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024f06:	09 c8                	or     eax,ecx
c0024f08:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024f0e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024f11:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024f18:	66 25 00 7f          	and    ax,0x7f00
c0024f1c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024f20:	66 0d 27 80          	or     ax,0x8027
c0024f24:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024f28:	66 89 03             	mov    WORD PTR [ebx],ax
c0024f2b:	89 d0                	mov    eax,edx
c0024f2d:	c1 ea 18             	shr    edx,0x18
c0024f30:	c1 e8 10             	shr    eax,0x10
c0024f33:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024f36:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024f39:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024f3d:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024f40:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024f44:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024f47:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024f4b:	83 c4 10             	add    esp,0x10
c0024f4e:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024f52:	31 c0                	xor    eax,eax
c0024f54:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024f58:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0024f5e:	80 e2 88             	and    dl,0x88
c0024f61:	74 0a                	je     c0024f6d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024f63:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f68:	74 0a                	je     c0024f74 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0024f6a:	40                   	inc    eax
c0024f6b:	eb eb                	jmp    c0024f58 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0024f6d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f72:	75 0f                	jne    c0024f83 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0024f74:	83 ec 0c             	sub    esp,0xc
c0024f77:	68 41 c3 02 c0       	push   0xc002c341
c0024f7c:	e8 ee 4e ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c0024f81:	eb 3f                	jmp    c0024fc2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0024f83:	ba 01 00 00 00       	mov    edx,0x1
c0024f88:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f90:	d3 e2                	shl    edx,cl
c0024f92:	c1 e0 07             	shl    eax,0x7
c0024f95:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0024f9b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024f9f:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0024fa5:	85 ca                	test   edx,ecx
c0024fa7:	74 23                	je     c0024fcc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0024fa9:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0024faf:	0f ba e1 1e          	bt     ecx,0x1e
c0024fb3:	73 ea                	jae    c0024f9f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0024fb5:	83 ec 0c             	sub    esp,0xc
c0024fb8:	68 d3 c3 02 c0       	push   0xc002c3d3
c0024fbd:	e8 41 d7 fe ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0024fc2:	83 c4 10             	add    esp,0x10
c0024fc5:	b8 01 00 00 00       	mov    eax,0x1
c0024fca:	eb 36                	jmp    c0025002 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024fcc:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0024fd2:	0f ba e0 1e          	bt     eax,0x1e
c0024fd6:	73 0a                	jae    c0024fe2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0024fd8:	83 ec 0c             	sub    esp,0xc
c0024fdb:	68 e6 c3 02 c0       	push   0xc002c3e6
c0024fe0:	eb db                	jmp    c0024fbd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0024fe2:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0024fe7:	74 17                	je     c0025000 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024fe9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0024fee:	74 10                	je     c0025000 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024ff0:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0024ff6:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024ffa:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0024ffe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025000:	31 c0                	xor    eax,eax
c0025002:	83 c4 2c             	add    esp,0x2c
c0025005:	5b                   	pop    ebx
c0025006:	5e                   	pop    esi
c0025007:	5f                   	pop    edi
c0025008:	5d                   	pop    ebp
c0025009:	c3                   	ret    

c002500a <SATAPI::eject()>:
c002500a:	57                   	push   edi
c002500b:	b9 03 00 00 00       	mov    ecx,0x3
c0025010:	53                   	push   ebx
c0025011:	83 ec 14             	sub    esp,0x14
c0025014:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025018:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002501c:	fc                   	cld    
c002501d:	31 c0                	xor    eax,eax
c002501f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025021:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025026:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002502b:	50                   	push   eax
c002502c:	6a 00                	push   0x0
c002502e:	6a 00                	push   0x0
c0025030:	6a 00                	push   0x0
c0025032:	6a 00                	push   0x0
c0025034:	6a 02                	push   0x2
c0025036:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002503a:	50                   	push   eax
c002503b:	53                   	push   ebx
c002503c:	e8 c1 fd ff ff       	call   c0024e02 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025041:	83 c4 14             	add    esp,0x14
c0025044:	53                   	push   ebx
c0025045:	e8 6e fd ff ff       	call   c0024db8 <SATAPI::diskRemoved()>
c002504a:	83 c4 24             	add    esp,0x24
c002504d:	31 c0                	xor    eax,eax
c002504f:	5b                   	pop    ebx
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <SATAPI::detectMedia()>:
c0025052:	56                   	push   esi
c0025053:	53                   	push   ebx
c0025054:	83 ec 28             	sub    esp,0x28
c0025057:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002505b:	6a 0c                	push   0xc
c002505d:	6a 00                	push   0x0
c002505f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025063:	56                   	push   esi
c0025064:	e8 e7 b6 fd ff       	call   c0000750 <memset>
c0025069:	83 c4 0c             	add    esp,0xc
c002506c:	6a 00                	push   0x0
c002506e:	6a 00                	push   0x0
c0025070:	6a 00                	push   0x0
c0025072:	6a 00                	push   0x0
c0025074:	6a 00                	push   0x0
c0025076:	56                   	push   esi
c0025077:	53                   	push   ebx
c0025078:	e8 85 fd ff ff       	call   c0024e02 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002507d:	83 c4 1c             	add    esp,0x1c
c0025080:	6a 0c                	push   0xc
c0025082:	6a 00                	push   0x0
c0025084:	56                   	push   esi
c0025085:	e8 c6 b6 fd ff       	call   c0000750 <memset>
c002508a:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002508f:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025094:	83 c4 0c             	add    esp,0xc
c0025097:	6a 01                	push   0x1
c0025099:	8d 44 24 16          	lea    eax,[esp+0x16]
c002509d:	50                   	push   eax
c002509e:	6a 00                	push   0x0
c00250a0:	6a 00                	push   0x0
c00250a2:	6a 12                	push   0x12
c00250a4:	56                   	push   esi
c00250a5:	53                   	push   ebx
c00250a6:	e8 57 fd ff ff       	call   c0024e02 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00250ab:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00250af:	83 c4 20             	add    esp,0x20
c00250b2:	83 e0 7f             	and    eax,0x7f
c00250b5:	3c 70                	cmp    al,0x70
c00250b7:	74 15                	je     c00250ce <SATAPI::detectMedia()+0x7c>
c00250b9:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00250c0:	75 0c                	jne    c00250ce <SATAPI::detectMedia()+0x7c>
c00250c2:	83 ec 0c             	sub    esp,0xc
c00250c5:	53                   	push   ebx
c00250c6:	e8 09 fd ff ff       	call   c0024dd4 <SATAPI::diskInserted()>
c00250cb:	83 c4 10             	add    esp,0x10
c00250ce:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00250d2:	83 e0 0f             	and    eax,0xf
c00250d5:	3c 02                	cmp    al,0x2
c00250d7:	75 1b                	jne    c00250f4 <SATAPI::detectMedia()+0xa2>
c00250d9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00250de:	75 2d                	jne    c002510d <SATAPI::detectMedia()+0xbb>
c00250e0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00250e7:	74 24                	je     c002510d <SATAPI::detectMedia()+0xbb>
c00250e9:	83 ec 0c             	sub    esp,0xc
c00250ec:	53                   	push   ebx
c00250ed:	e8 c6 fc ff ff       	call   c0024db8 <SATAPI::diskRemoved()>
c00250f2:	eb 16                	jmp    c002510a <SATAPI::detectMedia()+0xb8>
c00250f4:	84 c0                	test   al,al
c00250f6:	75 15                	jne    c002510d <SATAPI::detectMedia()+0xbb>
c00250f8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00250ff:	75 0c                	jne    c002510d <SATAPI::detectMedia()+0xbb>
c0025101:	83 ec 0c             	sub    esp,0xc
c0025104:	53                   	push   ebx
c0025105:	e8 ca fc ff ff       	call   c0024dd4 <SATAPI::diskInserted()>
c002510a:	83 c4 10             	add    esp,0x10
c002510d:	83 c4 24             	add    esp,0x24
c0025110:	5b                   	pop    ebx
c0025111:	5e                   	pop    esi
c0025112:	c3                   	ret    
c0025113:	90                   	nop

c0025114 <SATAPI::open(int, int, void*)>:
c0025114:	56                   	push   esi
c0025115:	53                   	push   ebx
c0025116:	50                   	push   eax
c0025117:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002511b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002511f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025129:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002512f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025139:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002513d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025147:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002514d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025154:	e8 3c a8 fe ff       	call   c000f995 <Phys::allocatePage()>
c0025159:	89 c6                	mov    esi,eax
c002515b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025161:	81 c6 00 10 00 00    	add    esi,0x1000
c0025167:	e8 29 a8 fe ff       	call   c000f995 <Phys::allocatePage()>
c002516c:	39 c6                	cmp    esi,eax
c002516e:	74 10                	je     c0025180 <SATAPI::open(int, int, void*)+0x6c>
c0025170:	83 ec 0c             	sub    esp,0xc
c0025173:	68 fb c3 02 c0       	push   0xc002c3fb
c0025178:	e8 f2 4c ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c002517d:	83 c4 10             	add    esp,0x10
c0025180:	83 ec 0c             	sub    esp,0xc
c0025183:	6a 02                	push   0x2
c0025185:	e8 cd c0 fe ff       	call   c0011257 <Virt::allocateKernelVirtualPages(int)>
c002518a:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025190:	6a 03                	push   0x3
c0025192:	50                   	push   eax
c0025193:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025199:	ff 35 50 db 02 c0    	push   DWORD PTR ds:0xc002db50
c002519f:	e8 70 c8 fe ff       	call   c0011a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c00251a4:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00251ab:	83 c4 14             	add    esp,0x14
c00251ae:	53                   	push   ebx
c00251af:	e8 9e fe ff ff       	call   c0025052 <SATAPI::detectMedia()>
c00251b4:	83 c4 14             	add    esp,0x14
c00251b7:	31 c0                	xor    eax,eax
c00251b9:	5b                   	pop    ebx
c00251ba:	5e                   	pop    esi
c00251bb:	c3                   	ret    

c00251bc <SATAPI::read(unsigned long long, int, void*)>:
c00251bc:	55                   	push   ebp
c00251bd:	57                   	push   edi
c00251be:	56                   	push   esi
c00251bf:	53                   	push   ebx
c00251c0:	83 ec 1c             	sub    esp,0x1c
c00251c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00251c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00251cb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00251cf:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00251d6:	74 19                	je     c00251f1 <SATAPI::read(unsigned long long, int, void*)+0x35>
c00251d8:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00251dd:	7e 2e                	jle    c002520d <SATAPI::read(unsigned long long, int, void*)+0x51>
c00251df:	83 ec 0c             	sub    esp,0xc
c00251e2:	68 11 c4 02 c0       	push   0xc002c411
c00251e7:	e8 83 4c ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c00251ec:	83 c4 10             	add    esp,0x10
c00251ef:	eb 1c                	jmp    c002520d <SATAPI::read(unsigned long long, int, void*)+0x51>
c00251f1:	83 ec 0c             	sub    esp,0xc
c00251f4:	55                   	push   ebp
c00251f5:	e8 58 fe ff ff       	call   c0025052 <SATAPI::detectMedia()>
c00251fa:	83 c4 10             	add    esp,0x10
c00251fd:	b8 02 00 00 00       	mov    eax,0x2
c0025202:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025209:	75 cd                	jne    c00251d8 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c002520b:	eb 49                	jmp    c0025256 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c002520d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025211:	b9 03 00 00 00       	mov    ecx,0x3
c0025216:	fc                   	cld    
c0025217:	31 c0                	xor    eax,eax
c0025219:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002521b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025220:	89 d8                	mov    eax,ebx
c0025222:	86 e0                	xchg   al,ah
c0025224:	c1 c0 10             	rol    eax,0x10
c0025227:	86 e0                	xchg   al,ah
c0025229:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c002522d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025231:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025235:	50                   	push   eax
c0025236:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002523a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002523e:	56                   	push   esi
c002523f:	53                   	push   ebx
c0025240:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025244:	c1 e0 0b             	shl    eax,0xb
c0025247:	50                   	push   eax
c0025248:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002524c:	50                   	push   eax
c002524d:	55                   	push   ebp
c002524e:	e8 af fb ff ff       	call   c0024e02 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025253:	83 c4 20             	add    esp,0x20
c0025256:	83 c4 1c             	add    esp,0x1c
c0025259:	5b                   	pop    ebx
c002525a:	5e                   	pop    esi
c002525b:	5f                   	pop    edi
c002525c:	5d                   	pop    ebp
c002525d:	c3                   	ret    

c002525e <AVX::open(int, int, void*)>:
c002525e:	83 ec 0c             	sub    esp,0xc
c0025261:	e8 42 11 00 00       	call   c00263a8 <avxInit>
c0025266:	b8 00 00 00 00       	mov    eax,0x0
c002526b:	83 c4 0c             	add    esp,0xc
c002526e:	c3                   	ret    
c002526f:	90                   	nop

c0025270 <AVX::close(int, int, void*)>:
c0025270:	83 ec 0c             	sub    esp,0xc
c0025273:	e8 31 11 00 00       	call   c00263a9 <avxClose>
c0025278:	b8 00 00 00 00       	mov    eax,0x0
c002527d:	83 c4 0c             	add    esp,0xc
c0025280:	c3                   	ret    
c0025281:	90                   	nop

c0025282 <AVX::available()>:
c0025282:	83 ec 0c             	sub    esp,0xc
c0025285:	e8 16 11 00 00       	call   c00263a0 <avxDetect>
c002528a:	85 c0                	test   eax,eax
c002528c:	0f 95 c0             	setne  al
c002528f:	83 c4 0c             	add    esp,0xc
c0025292:	c3                   	ret    
c0025293:	90                   	nop

c0025294 <AVX::save(void*)>:
c0025294:	83 ec 0c             	sub    esp,0xc
c0025297:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002529b:	83 ec 0c             	sub    esp,0xc
c002529e:	50                   	push   eax
c002529f:	e8 02 11 00 00       	call   c00263a6 <avxSave>
c00252a4:	83 c4 10             	add    esp,0x10
c00252a7:	90                   	nop
c00252a8:	83 c4 0c             	add    esp,0xc
c00252ab:	c3                   	ret    

c00252ac <AVX::load(void*)>:
c00252ac:	83 ec 0c             	sub    esp,0xc
c00252af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252b3:	83 ec 0c             	sub    esp,0xc
c00252b6:	50                   	push   eax
c00252b7:	e8 eb 10 00 00       	call   c00263a7 <avxLoad>
c00252bc:	83 c4 10             	add    esp,0x10
c00252bf:	90                   	nop
c00252c0:	83 c4 0c             	add    esp,0xc
c00252c3:	c3                   	ret    

c00252c4 <AVX::AVX()>:
c00252c4:	83 ec 0c             	sub    esp,0xc
c00252c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252cb:	83 ec 08             	sub    esp,0x8
c00252ce:	68 74 c4 02 c0       	push   0xc002c474
c00252d3:	50                   	push   eax
c00252d4:	e8 77 ed fe ff       	call   c0014050 <FPU::FPU(char const*)>
c00252d9:	83 c4 10             	add    esp,0x10
c00252dc:	ba 84 c4 02 c0       	mov    edx,0xc002c484
c00252e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252e5:	89 10                	mov    DWORD PTR [eax],edx
c00252e7:	90                   	nop
c00252e8:	83 c4 0c             	add    esp,0xc
c00252eb:	c3                   	ret    

c00252ec <MMX::available()>:
c00252ec:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c00252f1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00252f7:	83 e0 20             	and    eax,0x20
c00252fa:	84 c0                	test   al,al
c00252fc:	0f 95 c0             	setne  al
c00252ff:	c3                   	ret    

c0025300 <MMX::open(int, int, void*)>:
c0025300:	83 ec 0c             	sub    esp,0xc
c0025303:	e8 2a 11 00 00       	call   c0026432 <x87Init>
c0025308:	b8 00 00 00 00       	mov    eax,0x0
c002530d:	83 c4 0c             	add    esp,0xc
c0025310:	c3                   	ret    
c0025311:	90                   	nop

c0025312 <MMX::close(int, int, void*)>:
c0025312:	83 ec 0c             	sub    esp,0xc
c0025315:	e8 32 11 00 00       	call   c002644c <x87Close>
c002531a:	b8 00 00 00 00       	mov    eax,0x0
c002531f:	83 c4 0c             	add    esp,0xc
c0025322:	c3                   	ret    
c0025323:	90                   	nop

c0025324 <MMX::save(void*)>:
c0025324:	83 ec 0c             	sub    esp,0xc
c0025327:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002532b:	83 ec 0c             	sub    esp,0xc
c002532e:	50                   	push   eax
c002532f:	e8 ed 10 00 00       	call   c0026421 <x87Save>
c0025334:	83 c4 10             	add    esp,0x10
c0025337:	90                   	nop
c0025338:	83 c4 0c             	add    esp,0xc
c002533b:	c3                   	ret    

c002533c <MMX::load(void*)>:
c002533c:	83 ec 0c             	sub    esp,0xc
c002533f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025343:	83 ec 0c             	sub    esp,0xc
c0025346:	50                   	push   eax
c0025347:	e8 de 10 00 00       	call   c002642a <x87Load>
c002534c:	83 c4 10             	add    esp,0x10
c002534f:	90                   	nop
c0025350:	83 c4 0c             	add    esp,0xc
c0025353:	c3                   	ret    

c0025354 <MMX::MMX()>:
c0025354:	83 ec 0c             	sub    esp,0xc
c0025357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002535b:	83 ec 08             	sub    esp,0x8
c002535e:	68 b4 c4 02 c0       	push   0xc002c4b4
c0025363:	50                   	push   eax
c0025364:	e8 e7 ec fe ff       	call   c0014050 <FPU::FPU(char const*)>
c0025369:	83 c4 10             	add    esp,0x10
c002536c:	ba c4 c4 02 c0       	mov    edx,0xc002c4c4
c0025371:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025375:	89 10                	mov    DWORD PTR [eax],edx
c0025377:	90                   	nop
c0025378:	83 c4 0c             	add    esp,0xc
c002537b:	c3                   	ret    

c002537c <SSE::open(int, int, void*)>:
c002537c:	83 ec 0c             	sub    esp,0xc
c002537f:	e8 60 10 00 00       	call   c00263e4 <sseInit>
c0025384:	b8 00 00 00 00       	mov    eax,0x0
c0025389:	83 c4 0c             	add    esp,0xc
c002538c:	c3                   	ret    
c002538d:	90                   	nop

c002538e <SSE::close(int, int, void*)>:
c002538e:	83 ec 0c             	sub    esp,0xc
c0025391:	e8 5e 10 00 00       	call   c00263f4 <sseClose>
c0025396:	b8 00 00 00 00       	mov    eax,0x0
c002539b:	83 c4 0c             	add    esp,0xc
c002539e:	c3                   	ret    
c002539f:	90                   	nop

c00253a0 <SSE::available()>:
c00253a0:	83 ec 1c             	sub    esp,0x1c
c00253a3:	e8 18 10 00 00       	call   c00263c0 <absolutelyNoChanceInHell>
c00253a8:	85 c0                	test   eax,eax
c00253aa:	0f 95 c0             	setne  al
c00253ad:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00253b1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00253b5:	83 c4 1c             	add    esp,0x1c
c00253b8:	c3                   	ret    
c00253b9:	90                   	nop

c00253ba <SSE::save(void*)>:
c00253ba:	83 ec 0c             	sub    esp,0xc
c00253bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253c1:	83 ec 0c             	sub    esp,0xc
c00253c4:	50                   	push   eax
c00253c5:	e8 0e 10 00 00       	call   c00263d8 <sseSave>
c00253ca:	83 c4 10             	add    esp,0x10
c00253cd:	90                   	nop
c00253ce:	83 c4 0c             	add    esp,0xc
c00253d1:	c3                   	ret    

c00253d2 <SSE::load(void*)>:
c00253d2:	83 ec 0c             	sub    esp,0xc
c00253d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253d9:	83 ec 0c             	sub    esp,0xc
c00253dc:	50                   	push   eax
c00253dd:	e8 fc 0f 00 00       	call   c00263de <sseLoad>
c00253e2:	83 c4 10             	add    esp,0x10
c00253e5:	90                   	nop
c00253e6:	83 c4 0c             	add    esp,0xc
c00253e9:	c3                   	ret    

c00253ea <SSE::SSE()>:
c00253ea:	83 ec 0c             	sub    esp,0xc
c00253ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253f1:	83 ec 08             	sub    esp,0x8
c00253f4:	68 f4 c4 02 c0       	push   0xc002c4f4
c00253f9:	50                   	push   eax
c00253fa:	e8 51 ec fe ff       	call   c0014050 <FPU::FPU(char const*)>
c00253ff:	83 c4 10             	add    esp,0x10
c0025402:	ba 04 c5 02 c0       	mov    edx,0xc002c504
c0025407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002540b:	89 10                	mov    DWORD PTR [eax],edx
c002540d:	90                   	nop
c002540e:	83 c4 0c             	add    esp,0xc
c0025411:	c3                   	ret    

c0025412 <x87::open(int, int, void*)>:
c0025412:	83 ec 0c             	sub    esp,0xc
c0025415:	e8 18 10 00 00       	call   c0026432 <x87Init>
c002541a:	b8 00 00 00 00       	mov    eax,0x0
c002541f:	83 c4 0c             	add    esp,0xc
c0025422:	c3                   	ret    
c0025423:	90                   	nop

c0025424 <x87::close(int, int, void*)>:
c0025424:	83 ec 0c             	sub    esp,0xc
c0025427:	e8 20 10 00 00       	call   c002644c <x87Close>
c002542c:	b8 00 00 00 00       	mov    eax,0x0
c0025431:	83 c4 0c             	add    esp,0xc
c0025434:	c3                   	ret    
c0025435:	90                   	nop

c0025436 <x87::available()>:
c0025436:	83 ec 0c             	sub    esp,0xc
c0025439:	e8 c8 0f 00 00       	call   c0026406 <x87Detect>
c002543e:	85 c0                	test   eax,eax
c0025440:	0f 95 c0             	setne  al
c0025443:	83 c4 0c             	add    esp,0xc
c0025446:	c3                   	ret    
c0025447:	90                   	nop

c0025448 <x87::save(void*)>:
c0025448:	83 ec 0c             	sub    esp,0xc
c002544b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002544f:	83 ec 0c             	sub    esp,0xc
c0025452:	50                   	push   eax
c0025453:	e8 c9 0f 00 00       	call   c0026421 <x87Save>
c0025458:	83 c4 10             	add    esp,0x10
c002545b:	90                   	nop
c002545c:	83 c4 0c             	add    esp,0xc
c002545f:	c3                   	ret    

c0025460 <x87::load(void*)>:
c0025460:	83 ec 0c             	sub    esp,0xc
c0025463:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025467:	83 ec 0c             	sub    esp,0xc
c002546a:	50                   	push   eax
c002546b:	e8 ba 0f 00 00       	call   c002642a <x87Load>
c0025470:	83 c4 10             	add    esp,0x10
c0025473:	90                   	nop
c0025474:	83 c4 0c             	add    esp,0xc
c0025477:	c3                   	ret    

c0025478 <x87::x87()>:
c0025478:	83 ec 0c             	sub    esp,0xc
c002547b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002547f:	83 ec 08             	sub    esp,0x8
c0025482:	68 34 c5 02 c0       	push   0xc002c534
c0025487:	50                   	push   eax
c0025488:	e8 c3 eb fe ff       	call   c0014050 <FPU::FPU(char const*)>
c002548d:	83 c4 10             	add    esp,0x10
c0025490:	ba 44 c5 02 c0       	mov    edx,0xc002c544
c0025495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025499:	89 10                	mov    DWORD PTR [eax],edx
c002549b:	90                   	nop
c002549c:	83 c4 0c             	add    esp,0xc
c002549f:	c3                   	ret    

c00254a0 <APIC::disable()>:
c00254a0:	90                   	nop
c00254a1:	c3                   	ret    

c00254a2 <APIC::close(int, int, void*)>:
c00254a2:	55                   	push   ebp
c00254a3:	89 e5                	mov    ebp,esp
c00254a5:	83 ec 08             	sub    esp,0x8
c00254a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00254ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00254ad:	83 c0 3c             	add    eax,0x3c
c00254b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00254b2:	83 ec 0c             	sub    esp,0xc
c00254b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254b8:	ff d0                	call   eax
c00254ba:	83 c4 10             	add    esp,0x10
c00254bd:	b8 00 00 00 00       	mov    eax,0x0
c00254c2:	c9                   	leave  
c00254c3:	c3                   	ret    

c00254c4 <IOAPIC::close(int, int, void*)>:
c00254c4:	b8 00 00 00 00       	mov    eax,0x0
c00254c9:	c3                   	ret    

c00254ca <APIC::io_wait()>:
c00254ca:	eb 00                	jmp    c00254cc <APIC::io_wait()+0x2>
c00254cc:	eb 00                	jmp    c00254ce <APIC::io_wait()+0x4>
c00254ce:	90                   	nop
c00254cf:	c3                   	ret    

c00254d0 <APIC::getBase()>:
c00254d0:	55                   	push   ebp
c00254d1:	89 e5                	mov    ebp,esp
c00254d3:	83 ec 18             	sub    esp,0x18
c00254d6:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c00254db:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00254e1:	83 e0 08             	and    eax,0x8
c00254e4:	84 c0                	test   al,al
c00254e6:	75 07                	jne    c00254ef <APIC::getBase()+0x1f>
c00254e8:	b8 00 00 00 00       	mov    eax,0x0
c00254ed:	eb 21                	jmp    c0025510 <APIC::getBase()+0x40>
c00254ef:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c00254f4:	83 ec 08             	sub    esp,0x8
c00254f7:	6a 1b                	push   0x1b
c00254f9:	50                   	push   eax
c00254fa:	e8 41 96 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00254ff:	83 c4 10             	add    esp,0x10
c0025502:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025505:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025508:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002550b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025510:	c9                   	leave  
c0025511:	c3                   	ret    

c0025512 <APIC::eoi(unsigned char)>:
c0025512:	55                   	push   ebp
c0025513:	89 e5                	mov    ebp,esp
c0025515:	83 ec 28             	sub    esp,0x28
c0025518:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002551b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002551e:	83 ec 0c             	sub    esp,0xc
c0025521:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025524:	e8 a7 ff ff ff       	call   c00254d0 <APIC::getBase()>
c0025529:	83 c4 10             	add    esp,0x10
c002552c:	05 b0 00 00 00       	add    eax,0xb0
c0025531:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025534:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025537:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002553d:	90                   	nop
c002553e:	c9                   	leave  
c002553f:	c3                   	ret    

c0025540 <APIC::open(int, int, void*)>:
c0025540:	55                   	push   ebp
c0025541:	89 e5                	mov    ebp,esp
c0025543:	57                   	push   edi
c0025544:	56                   	push   esi
c0025545:	53                   	push   ebx
c0025546:	83 ec 2c             	sub    esp,0x2c
c0025549:	83 ec 0c             	sub    esp,0xc
c002554c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002554f:	e8 7c ff ff ff       	call   c00254d0 <APIC::getBase()>
c0025554:	83 c4 10             	add    esp,0x10
c0025557:	89 c2                	mov    edx,eax
c0025559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002555c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025562:	0f b6 f8             	movzx  edi,al
c0025565:	89 d0                	mov    eax,edx
c0025567:	ba 00 00 00 00       	mov    edx,0x0
c002556c:	89 c1                	mov    ecx,eax
c002556e:	80 e5 ff             	and    ch,0xff
c0025571:	89 cb                	mov    ebx,ecx
c0025573:	0f b6 f2             	movzx  esi,dl
c0025576:	89 d8                	mov    eax,ebx
c0025578:	89 f2                	mov    edx,esi
c002557a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002557d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025580:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025584:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025588:	83 e0 00             	and    eax,0x0
c002558b:	09 d0                	or     eax,edx
c002558d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025591:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025594:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002559a:	8d 50 01             	lea    edx,[eax+0x1]
c002559d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00255a0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00255a6:	0f b6 d0             	movzx  edx,al
c00255a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255ac:	83 c2 08             	add    edx,0x8
c00255af:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00255b3:	0f b6 c9             	movzx  ecx,cl
c00255b6:	81 c9 00 00 01 00    	or     ecx,0x10000
c00255bc:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00255c0:	83 ec 0c             	sub    esp,0xc
c00255c3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00255c6:	e8 05 ff ff ff       	call   c00254d0 <APIC::getBase()>
c00255cb:	83 c4 10             	add    esp,0x10
c00255ce:	05 f0 00 00 00       	add    eax,0xf0
c00255d3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00255d6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00255d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00255db:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00255de:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00255e5:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00255ec:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00255ef:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00255f2:	89 10                	mov    DWORD PTR [eax],edx
c00255f4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00255fb:	a1 b0 02 03 c0       	mov    eax,ds:0xc00302b0
c0025600:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025603:	7d 7c                	jge    c0025681 <APIC::open(int, int, void*)+0x141>
c0025605:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025608:	8b 04 85 c0 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd40]
c002560f:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025612:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025615:	8b 04 85 c0 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd40]
c002561c:	c1 e8 08             	shr    eax,0x8
c002561f:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025623:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025626:	8b 04 85 c0 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd40]
c002562d:	c1 e8 18             	shr    eax,0x18
c0025630:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025633:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025637:	75 40                	jne    c0025679 <APIC::open(int, int, void*)+0x139>
c0025639:	83 ec 0c             	sub    esp,0xc
c002563c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002563f:	e8 8c fe ff ff       	call   c00254d0 <APIC::getBase()>
c0025644:	83 c4 10             	add    esp,0x10
c0025647:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002564b:	75 07                	jne    c0025654 <APIC::open(int, int, void*)+0x114>
c002564d:	ba 60 03 00 00       	mov    edx,0x360
c0025652:	eb 05                	jmp    c0025659 <APIC::open(int, int, void*)+0x119>
c0025654:	ba 50 03 00 00       	mov    edx,0x350
c0025659:	01 d0                	add    eax,edx
c002565b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002565e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025661:	8b 00                	mov    eax,DWORD PTR [eax]
c0025663:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025666:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002566d:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025671:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025674:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025677:	89 10                	mov    DWORD PTR [eax],edx
c0025679:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002567c:	e9 7a ff ff ff       	jmp    c00255fb <APIC::open(int, int, void*)+0xbb>
c0025681:	b8 00 00 00 00       	mov    eax,0x0
c0025686:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025689:	5b                   	pop    ebx
c002568a:	5e                   	pop    esi
c002568b:	5f                   	pop    edi
c002568c:	5d                   	pop    ebp
c002568d:	c3                   	ret    

c002568e <IOAPIC::IOAPIC()>:
c002568e:	83 ec 0c             	sub    esp,0xc
c0025691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025695:	83 ec 08             	sub    esp,0x8
c0025698:	68 74 c5 02 c0       	push   0xc002c574
c002569d:	50                   	push   eax
c002569e:	e8 9d e6 fe ff       	call   c0013d40 <Device::Device(char const*)>
c00256a3:	83 c4 10             	add    esp,0x10
c00256a6:	ba 9c c6 02 c0       	mov    edx,0xc002c69c
c00256ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256af:	89 10                	mov    DWORD PTR [eax],edx
c00256b1:	90                   	nop
c00256b2:	83 c4 0c             	add    esp,0xc
c00256b5:	c3                   	ret    

c00256b6 <APIC::APIC()>:
c00256b6:	53                   	push   ebx
c00256b7:	83 ec 18             	sub    esp,0x18
c00256ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00256be:	83 ec 08             	sub    esp,0x8
c00256c1:	68 7c c5 02 c0       	push   0xc002c57c
c00256c6:	50                   	push   eax
c00256c7:	e8 de ed fe ff       	call   c00144aa <InterruptController::InterruptController(char const*)>
c00256cc:	83 c4 10             	add    esp,0x10
c00256cf:	ba 54 c6 02 c0       	mov    edx,0xc002c654
c00256d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00256d8:	89 10                	mov    DWORD PTR [eax],edx
c00256da:	a0 80 1d 03 c0       	mov    al,ds:0xc0031d80
c00256df:	83 f0 01             	xor    eax,0x1
c00256e2:	84 c0                	test   al,al
c00256e4:	0f 84 a1 00 00 00    	je     c002578b <APIC::APIC()+0xd5>
c00256ea:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00256ef:	a0 60 03 03 c0       	mov    al,ds:0xc0030360
c00256f4:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00256f8:	0f 83 86 00 00 00    	jae    c0025784 <APIC::APIC()+0xce>
c00256fe:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025706:	83 ec 0c             	sub    esp,0xc
c0025709:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002570d:	e8 87 9e fe ff       	call   c000f599 <malloc>
c0025712:	83 c4 10             	add    esp,0x10
c0025715:	89 c3                	mov    ebx,eax
c0025717:	83 ec 0c             	sub    esp,0xc
c002571a:	53                   	push   ebx
c002571b:	e8 6e ff ff ff       	call   c002568e <IOAPIC::IOAPIC()>
c0025720:	83 c4 10             	add    esp,0x10
c0025723:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025727:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002572c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025730:	89 14 85 60 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2a0],edx
c0025737:	a1 40 1d 03 c0       	mov    eax,ds:0xc0031d40
c002573c:	40                   	inc    eax
c002573d:	a3 40 1d 03 c0       	mov    ds:0xc0031d40,eax
c0025742:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0025747:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002574d:	83 ec 08             	sub    esp,0x8
c0025750:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025754:	50                   	push   eax
c0025755:	e8 e2 e3 fe ff       	call   c0013b3c <Device::addChild(Device*)>
c002575a:	83 c4 10             	add    esp,0x10
c002575d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025761:	8b 00                	mov    eax,DWORD PTR [eax]
c0025763:	83 c0 08             	add    eax,0x8
c0025766:	8b 00                	mov    eax,DWORD PTR [eax]
c0025768:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002576d:	6a 00                	push   0x0
c002576f:	6a 00                	push   0x0
c0025771:	52                   	push   edx
c0025772:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025776:	ff d0                	call   eax
c0025778:	83 c4 10             	add    esp,0x10
c002577b:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002577f:	e9 6b ff ff ff       	jmp    c00256ef <APIC::APIC()+0x39>
c0025784:	c6 05 80 1d 03 c0 01 	mov    BYTE PTR ds:0xc0031d80,0x1
c002578b:	90                   	nop
c002578c:	83 c4 18             	add    esp,0x18
c002578f:	5b                   	pop    ebx
c0025790:	c3                   	ret    
c0025791:	90                   	nop

c0025792 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025792:	55                   	push   ebp
c0025793:	89 e5                	mov    ebp,esp
c0025795:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025798:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002579e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00257a1:	72 1d                	jb     c00257c0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00257a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257a6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00257ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257af:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00257b5:	01 d0                	add    eax,edx
c00257b7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00257ba:	73 04                	jae    c00257c0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00257bc:	b0 01                	mov    al,0x1
c00257be:	eb 02                	jmp    c00257c2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00257c0:	b0 00                	mov    al,0x0
c00257c2:	5d                   	pop    ebp
c00257c3:	c3                   	ret    

c00257c4 <IOAPIC::read(int)>:
c00257c4:	55                   	push   ebp
c00257c5:	89 e5                	mov    ebp,esp
c00257c7:	83 ec 10             	sub    esp,0x10
c00257ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257cd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00257d3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00257d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257d9:	0f b6 d0             	movzx  edx,al
c00257dc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257df:	89 10                	mov    DWORD PTR [eax],edx
c00257e1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257e4:	83 c0 10             	add    eax,0x10
c00257e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00257e9:	c9                   	leave  
c00257ea:	c3                   	ret    
c00257eb:	90                   	nop

c00257ec <IOAPIC::open(int, int, void*)>:
c00257ec:	55                   	push   ebp
c00257ed:	89 e5                	mov    ebp,esp
c00257ef:	57                   	push   edi
c00257f0:	56                   	push   esi
c00257f1:	53                   	push   ebx
c00257f2:	83 ec 0c             	sub    esp,0xc
c00257f5:	83 ec 0c             	sub    esp,0xc
c00257f8:	68 a7 c5 02 c0       	push   0xc002c5a7
c00257fd:	e8 01 cf fe ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0025802:	83 c4 10             	add    esp,0x10
c0025805:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025808:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002580b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025811:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025814:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002581a:	8b 14 85 a0 03 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfc60]
c0025821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025824:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002582a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002582d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025833:	8b 14 85 20 04 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfbe0]
c002583a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002583d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025843:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025846:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002584c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002584f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025855:	0f b6 f8             	movzx  edi,al
c0025858:	89 d0                	mov    eax,edx
c002585a:	ba 00 00 00 00       	mov    edx,0x0
c002585f:	89 c1                	mov    ecx,eax
c0025861:	80 e5 ff             	and    ch,0xff
c0025864:	89 cb                	mov    ebx,ecx
c0025866:	0f b6 f2             	movzx  esi,dl
c0025869:	89 d8                	mov    eax,ebx
c002586b:	89 f2                	mov    edx,esi
c002586d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025870:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025873:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025877:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002587b:	83 e0 00             	and    eax,0x0
c002587e:	09 d0                	or     eax,edx
c0025880:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025887:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002588d:	8d 50 01             	lea    edx,[eax+0x1]
c0025890:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025893:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025899:	0f b6 d0             	movzx  edx,al
c002589c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002589f:	83 c2 08             	add    edx,0x8
c00258a2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00258a6:	0f b6 c9             	movzx  ecx,cl
c00258a9:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00258af:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00258b3:	83 ec 08             	sub    esp,0x8
c00258b6:	6a 01                	push   0x1
c00258b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258bb:	e8 04 ff ff ff       	call   c00257c4 <IOAPIC::read(int)>
c00258c0:	83 c4 10             	add    esp,0x10
c00258c3:	c1 f8 10             	sar    eax,0x10
c00258c6:	0f b6 c0             	movzx  eax,al
c00258c9:	8d 50 01             	lea    edx,[eax+0x1]
c00258cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258cf:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00258d5:	b8 00 00 00 00       	mov    eax,0x0
c00258da:	8d 65 f4             	lea    esp,[ebp-0xc]
c00258dd:	5b                   	pop    ebx
c00258de:	5e                   	pop    esi
c00258df:	5f                   	pop    edi
c00258e0:	5d                   	pop    ebp
c00258e1:	c3                   	ret    

c00258e2 <IOAPIC::write(int, int)>:
c00258e2:	55                   	push   ebp
c00258e3:	89 e5                	mov    ebp,esp
c00258e5:	83 ec 10             	sub    esp,0x10
c00258e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258eb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00258f1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00258f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258f7:	0f b6 d0             	movzx  edx,al
c00258fa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00258fd:	89 10                	mov    DWORD PTR [eax],edx
c00258ff:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025902:	8d 50 10             	lea    edx,[eax+0x10]
c0025905:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025908:	89 02                	mov    DWORD PTR [edx],eax
c002590a:	90                   	nop
c002590b:	c9                   	leave  
c002590c:	c3                   	ret    
c002590d:	90                   	nop

c002590e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002590e:	55                   	push   ebp
c002590f:	89 e5                	mov    ebp,esp
c0025911:	53                   	push   ebx
c0025912:	83 ec 2c             	sub    esp,0x2c
c0025915:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025918:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002591b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002591e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025921:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025924:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025927:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002592a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002592d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025930:	88 d8                	mov    al,bl
c0025932:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025935:	88 c8                	mov    al,cl
c0025937:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002593a:	88 d0                	mov    al,dl
c002593c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002593f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025943:	83 c0 08             	add    eax,0x8
c0025946:	01 c0                	add    eax,eax
c0025948:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002594b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002594f:	83 c0 08             	add    eax,0x8
c0025952:	01 c0                	add    eax,eax
c0025954:	40                   	inc    eax
c0025955:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025958:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002595b:	50                   	push   eax
c002595c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002595f:	e8 60 fe ff ff       	call   c00257c4 <IOAPIC::read(int)>
c0025964:	83 c4 08             	add    esp,0x8
c0025967:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002596a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025971:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025974:	c1 e0 18             	shl    eax,0x18
c0025977:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002597a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002597d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025980:	52                   	push   edx
c0025981:	50                   	push   eax
c0025982:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025985:	e8 58 ff ff ff       	call   c00258e2 <IOAPIC::write(int, int)>
c002598a:	83 c4 0c             	add    esp,0xc
c002598d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025990:	50                   	push   eax
c0025991:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025994:	e8 2b fe ff ff       	call   c00257c4 <IOAPIC::read(int)>
c0025999:	83 c4 08             	add    esp,0x8
c002599c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002599f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00259a6:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00259ad:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00259b4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00259b8:	74 09                	je     c00259c3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00259ba:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00259c1:	eb 07                	jmp    c00259ca <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00259c3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00259ca:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00259ce:	74 09                	je     c00259d9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00259d0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00259d7:	eb 07                	jmp    c00259e0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00259d9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00259e0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00259e7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00259eb:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00259ee:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00259f1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00259f4:	52                   	push   edx
c00259f5:	50                   	push   eax
c00259f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259f9:	e8 e4 fe ff ff       	call   c00258e2 <IOAPIC::write(int, int)>
c00259fe:	83 c4 0c             	add    esp,0xc
c0025a01:	90                   	nop
c0025a02:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025a05:	c9                   	leave  
c0025a06:	c3                   	ret    
c0025a07:	90                   	nop

c0025a08 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025a08:	55                   	push   ebp
c0025a09:	89 e5                	mov    ebp,esp
c0025a0b:	57                   	push   edi
c0025a0c:	56                   	push   esi
c0025a0d:	53                   	push   ebx
c0025a0e:	83 ec 2c             	sub    esp,0x2c
c0025a11:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025a14:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025a17:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025a1b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025a1f:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025a23:	74 5a                	je     c0025a7f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a25:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025a29:	7f 44                	jg     c0025a6f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025a2b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a2e:	05 40 cc 02 c0       	add    eax,0xc002cc40
c0025a33:	8a 00                	mov    al,BYTE PTR [eax]
c0025a35:	0f b6 c0             	movzx  eax,al
c0025a38:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025a3b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a3e:	66 8b 84 00 40 03 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfcc0]
c0025a46:	0f b7 c0             	movzx  eax,ax
c0025a49:	83 e0 02             	and    eax,0x2
c0025a4c:	85 c0                	test   eax,eax
c0025a4e:	74 04                	je     c0025a54 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025a50:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025a54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a57:	66 8b 84 00 40 03 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfcc0]
c0025a5f:	0f b7 c0             	movzx  eax,ax
c0025a62:	83 e0 08             	and    eax,0x8
c0025a65:	85 c0                	test   eax,eax
c0025a67:	74 16                	je     c0025a7f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a69:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025a6d:	eb 10                	jmp    c0025a7f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a6f:	83 ec 0c             	sub    esp,0xc
c0025a72:	68 b8 c5 02 c0       	push   0xc002c5b8
c0025a77:	e8 f3 43 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c0025a7c:	83 c4 10             	add    esp,0x10
c0025a7f:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025a83:	a1 40 1d 03 c0       	mov    eax,ds:0xc0031d40
c0025a88:	83 ec 08             	sub    esp,0x8
c0025a8b:	50                   	push   eax
c0025a8c:	68 f0 c5 02 c0       	push   0xc002c5f0
c0025a91:	e8 6d cc fe ff       	call   c0012703 <Dbg::kprintf(char const*, ...)>
c0025a96:	83 c4 10             	add    esp,0x10
c0025a99:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025aa0:	a1 40 1d 03 c0       	mov    eax,ds:0xc0031d40
c0025aa5:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025aa8:	7d 67                	jge    c0025b11 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025aaa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025aad:	8b 04 85 60 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce2a0]
c0025ab4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ab7:	83 ec 08             	sub    esp,0x8
c0025aba:	52                   	push   edx
c0025abb:	50                   	push   eax
c0025abc:	e8 d1 fc ff ff       	call   c0025792 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025ac1:	83 c4 10             	add    esp,0x10
c0025ac4:	84 c0                	test   al,al
c0025ac6:	74 44                	je     c0025b0c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025ac8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025acb:	8b 1c 85 60 1d 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce2a0]
c0025ad2:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025ad6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025ad9:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025add:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ae0:	83 c0 20             	add    eax,0x20
c0025ae3:	0f b6 f0             	movzx  esi,al
c0025ae6:	b8 00 00 00 00       	mov    eax,0x0
c0025aeb:	99                   	cdq    
c0025aec:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025aef:	0f b6 c9             	movzx  ecx,cl
c0025af2:	83 ec 04             	sub    esp,0x4
c0025af5:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025af8:	57                   	push   edi
c0025af9:	56                   	push   esi
c0025afa:	52                   	push   edx
c0025afb:	50                   	push   eax
c0025afc:	51                   	push   ecx
c0025afd:	53                   	push   ebx
c0025afe:	e8 0b fe ff ff       	call   c002590e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025b03:	83 c4 20             	add    esp,0x20
c0025b06:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025b0a:	eb 05                	jmp    c0025b11 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025b0c:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025b0f:	eb 8f                	jmp    c0025aa0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025b11:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025b14:	83 f0 01             	xor    eax,0x1
c0025b17:	84 c0                	test   al,al
c0025b19:	74 10                	je     c0025b2b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025b1b:	83 ec 0c             	sub    esp,0xc
c0025b1e:	68 07 c6 02 c0       	push   0xc002c607
c0025b23:	e8 47 43 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c0025b28:	83 c4 10             	add    esp,0x10
c0025b2b:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025b2f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025b36:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025b3a:	7f 65                	jg     c0025ba1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025b3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b3f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b42:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b49:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b4c:	01 ca                	add    edx,ecx
c0025b4e:	83 c2 54             	add    edx,0x54
c0025b51:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025b55:	85 c0                	test   eax,eax
c0025b57:	75 43                	jne    c0025b9c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025b59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b5c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b5f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b66:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b69:	01 ca                	add    edx,ecx
c0025b6b:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025b6e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025b71:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025b75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b78:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b7b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b82:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b85:	01 ca                	add    edx,ecx
c0025b87:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025b8d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025b90:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025b94:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b97:	83 e8 20             	sub    eax,0x20
c0025b9a:	eb 1a                	jmp    c0025bb6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025b9c:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025b9f:	eb 95                	jmp    c0025b36 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025ba1:	83 ec 0c             	sub    esp,0xc
c0025ba4:	68 14 c6 02 c0       	push   0xc002c614
c0025ba9:	e8 c1 42 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c0025bae:	83 c4 10             	add    esp,0x10
c0025bb1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025bb6:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025bb9:	5b                   	pop    ebx
c0025bba:	5e                   	pop    esi
c0025bbb:	5f                   	pop    edi
c0025bbc:	5d                   	pop    ebp
c0025bbd:	c3                   	ret    

c0025bbe <PIC::disable()>:
c0025bbe:	55                   	push   ebp
c0025bbf:	89 e5                	mov    ebp,esp
c0025bc1:	83 ec 10             	sub    esp,0x10
c0025bc4:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025bca:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025bce:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025bd1:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025bd5:	ee                   	out    dx,al
c0025bd6:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025bdc:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025be0:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025be3:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025be7:	ee                   	out    dx,al
c0025be8:	90                   	nop
c0025be9:	c9                   	leave  
c0025bea:	c3                   	ret    
c0025beb:	90                   	nop

c0025bec <PIC::close(int, int, void*)>:
c0025bec:	55                   	push   ebp
c0025bed:	89 e5                	mov    ebp,esp
c0025bef:	83 ec 08             	sub    esp,0x8
c0025bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bf7:	83 c0 3c             	add    eax,0x3c
c0025bfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bfc:	83 ec 0c             	sub    esp,0xc
c0025bff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c02:	ff d0                	call   eax
c0025c04:	83 c4 10             	add    esp,0x10
c0025c07:	b8 00 00 00 00       	mov    eax,0x0
c0025c0c:	c9                   	leave  
c0025c0d:	c3                   	ret    

c0025c0e <PIC::PIC()>:
c0025c0e:	83 ec 0c             	sub    esp,0xc
c0025c11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c15:	83 ec 08             	sub    esp,0x8
c0025c18:	68 c0 c6 02 c0       	push   0xc002c6c0
c0025c1d:	50                   	push   eax
c0025c1e:	e8 87 e8 fe ff       	call   c00144aa <InterruptController::InterruptController(char const*)>
c0025c23:	83 c4 10             	add    esp,0x10
c0025c26:	ba ec c6 02 c0       	mov    edx,0xc002c6ec
c0025c2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c2f:	89 10                	mov    DWORD PTR [eax],edx
c0025c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c35:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c3b:	0f b6 d0             	movzx  edx,al
c0025c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c42:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c4d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c53:	0f b6 d0             	movzx  edx,al
c0025c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c5a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025c5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c63:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c69:	8d 50 01             	lea    edx,[eax+0x1]
c0025c6c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025c70:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025c76:	0f b6 d0             	movzx  edx,al
c0025c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c7d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025c81:	83 e1 3f             	and    ecx,0x3f
c0025c84:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c92:	0f b6 d0             	movzx  edx,al
c0025c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c99:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ca4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025caa:	0f b6 d0             	movzx  edx,al
c0025cad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cb1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cba:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025cc0:	8d 50 01             	lea    edx,[eax+0x1]
c0025cc3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025cc7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025ccd:	0f b6 d0             	movzx  edx,al
c0025cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cd4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025cd8:	83 e1 3f             	and    ecx,0x3f
c0025cdb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025cdf:	90                   	nop
c0025ce0:	83 c4 0c             	add    esp,0xc
c0025ce3:	c3                   	ret    

c0025ce4 <PIC::ioWait()>:
c0025ce4:	eb 00                	jmp    c0025ce6 <PIC::ioWait()+0x2>
c0025ce6:	eb 00                	jmp    c0025ce8 <PIC::ioWait()+0x4>
c0025ce8:	90                   	nop
c0025ce9:	c3                   	ret    

c0025cea <PIC::getIRQReg(int)>:
c0025cea:	55                   	push   ebp
c0025ceb:	89 e5                	mov    ebp,esp
c0025ced:	83 ec 10             	sub    esp,0x10
c0025cf0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cf3:	0f b6 c0             	movzx  eax,al
c0025cf6:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025cfc:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025cff:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025d02:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025d06:	ee                   	out    dx,al
c0025d07:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d0a:	0f b6 c0             	movzx  eax,al
c0025d0d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025d13:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025d16:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025d19:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025d1d:	ee                   	out    dx,al
c0025d1e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025d24:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025d28:	89 c2                	mov    edx,eax
c0025d2a:	ec                   	in     al,dx
c0025d2b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025d2e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025d31:	0f b6 c0             	movzx  eax,al
c0025d34:	c1 e0 08             	shl    eax,0x8
c0025d37:	89 c1                	mov    ecx,eax
c0025d39:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025d3f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025d43:	89 c2                	mov    edx,eax
c0025d45:	ec                   	in     al,dx
c0025d46:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025d49:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025d4c:	0f b6 c0             	movzx  eax,al
c0025d4f:	09 c8                	or     eax,ecx
c0025d51:	c9                   	leave  
c0025d52:	c3                   	ret    
c0025d53:	90                   	nop

c0025d54 <PIC::eoi(unsigned char)>:
c0025d54:	55                   	push   ebp
c0025d55:	89 e5                	mov    ebp,esp
c0025d57:	83 ec 14             	sub    esp,0x14
c0025d5a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d5d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025d60:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025d64:	75 1e                	jne    c0025d84 <PIC::eoi(unsigned char)+0x30>
c0025d66:	6a 0b                	push   0xb
c0025d68:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d6b:	e8 7a ff ff ff       	call   c0025cea <PIC::getIRQReg(int)>
c0025d70:	83 c4 08             	add    esp,0x8
c0025d73:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025d77:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025d7b:	25 80 00 00 00       	and    eax,0x80
c0025d80:	85 c0                	test   eax,eax
c0025d82:	74 5f                	je     c0025de3 <PIC::eoi(unsigned char)+0x8f>
c0025d84:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025d88:	75 2d                	jne    c0025db7 <PIC::eoi(unsigned char)+0x63>
c0025d8a:	6a 0b                	push   0xb
c0025d8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d8f:	e8 56 ff ff ff       	call   c0025cea <PIC::getIRQReg(int)>
c0025d94:	83 c4 08             	add    esp,0x8
c0025d97:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025d9b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025d9e:	66 85 c0             	test   ax,ax
c0025da1:	78 14                	js     c0025db7 <PIC::eoi(unsigned char)+0x63>
c0025da3:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025da9:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025dad:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025db0:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025db4:	ee                   	out    dx,al
c0025db5:	eb 2d                	jmp    c0025de4 <PIC::eoi(unsigned char)+0x90>
c0025db7:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025dbb:	76 12                	jbe    c0025dcf <PIC::eoi(unsigned char)+0x7b>
c0025dbd:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025dc3:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025dc7:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025dca:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025dce:	ee                   	out    dx,al
c0025dcf:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025dd5:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025dd9:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025ddc:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025de0:	ee                   	out    dx,al
c0025de1:	eb 01                	jmp    c0025de4 <PIC::eoi(unsigned char)+0x90>
c0025de3:	90                   	nop
c0025de4:	c9                   	leave  
c0025de5:	c3                   	ret    

c0025de6 <PIC::remap()>:
c0025de6:	55                   	push   ebp
c0025de7:	89 e5                	mov    ebp,esp
c0025de9:	83 ec 48             	sub    esp,0x48
c0025dec:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025df3:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025dfa:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025e00:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025e03:	89 c2                	mov    edx,eax
c0025e05:	ec                   	in     al,dx
c0025e06:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025e09:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025e0c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025e0f:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025e15:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025e18:	89 c2                	mov    edx,eax
c0025e1a:	ec                   	in     al,dx
c0025e1b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025e1e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025e21:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025e24:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025e2a:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025e2e:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025e31:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025e34:	ee                   	out    dx,al
c0025e35:	83 ec 0c             	sub    esp,0xc
c0025e38:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e3b:	e8 a4 fe ff ff       	call   c0025ce4 <PIC::ioWait()>
c0025e40:	83 c4 10             	add    esp,0x10
c0025e43:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025e49:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025e4d:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025e50:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025e53:	ee                   	out    dx,al
c0025e54:	83 ec 0c             	sub    esp,0xc
c0025e57:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e5a:	e8 85 fe ff ff       	call   c0025ce4 <PIC::ioWait()>
c0025e5f:	83 c4 10             	add    esp,0x10
c0025e62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025e65:	0f b6 c0             	movzx  eax,al
c0025e68:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025e6e:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025e71:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025e74:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025e77:	ee                   	out    dx,al
c0025e78:	83 ec 0c             	sub    esp,0xc
c0025e7b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e7e:	e8 61 fe ff ff       	call   c0025ce4 <PIC::ioWait()>
c0025e83:	83 c4 10             	add    esp,0x10
c0025e86:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025e89:	0f b6 c0             	movzx  eax,al
c0025e8c:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025e92:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025e95:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025e98:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025e9b:	ee                   	out    dx,al
c0025e9c:	83 ec 0c             	sub    esp,0xc
c0025e9f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ea2:	e8 3d fe ff ff       	call   c0025ce4 <PIC::ioWait()>
c0025ea7:	83 c4 10             	add    esp,0x10
c0025eaa:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025eb0:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025eb4:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025eb7:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025eba:	ee                   	out    dx,al
c0025ebb:	83 ec 0c             	sub    esp,0xc
c0025ebe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ec1:	e8 1e fe ff ff       	call   c0025ce4 <PIC::ioWait()>
c0025ec6:	83 c4 10             	add    esp,0x10
c0025ec9:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025ecf:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025ed3:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025ed6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ed9:	ee                   	out    dx,al
c0025eda:	83 ec 0c             	sub    esp,0xc
c0025edd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ee0:	e8 ff fd ff ff       	call   c0025ce4 <PIC::ioWait()>
c0025ee5:	83 c4 10             	add    esp,0x10
c0025ee8:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025eee:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025ef2:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025ef5:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025ef8:	ee                   	out    dx,al
c0025ef9:	83 ec 0c             	sub    esp,0xc
c0025efc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025eff:	e8 e0 fd ff ff       	call   c0025ce4 <PIC::ioWait()>
c0025f04:	83 c4 10             	add    esp,0x10
c0025f07:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025f0d:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025f11:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025f14:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025f17:	ee                   	out    dx,al
c0025f18:	83 ec 0c             	sub    esp,0xc
c0025f1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f1e:	e8 c1 fd ff ff       	call   c0025ce4 <PIC::ioWait()>
c0025f23:	83 c4 10             	add    esp,0x10
c0025f26:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025f2a:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025f30:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025f33:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025f36:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025f39:	ee                   	out    dx,al
c0025f3a:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025f3e:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025f44:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025f47:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025f4a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025f4d:	ee                   	out    dx,al
c0025f4e:	90                   	nop
c0025f4f:	c9                   	leave  
c0025f50:	c3                   	ret    
c0025f51:	90                   	nop

c0025f52 <PIC::open(int, int, void*)>:
c0025f52:	55                   	push   ebp
c0025f53:	89 e5                	mov    ebp,esp
c0025f55:	83 ec 18             	sub    esp,0x18
c0025f58:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025f5e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025f62:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f65:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f69:	ee                   	out    dx,al
c0025f6a:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025f70:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025f74:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f77:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f7b:	ee                   	out    dx,al
c0025f7c:	83 ec 0c             	sub    esp,0xc
c0025f7f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f82:	e8 5f fe ff ff       	call   c0025de6 <PIC::remap()>
c0025f87:	83 c4 10             	add    esp,0x10
c0025f8a:	b8 00 00 00 00       	mov    eax,0x0
c0025f8f:	c9                   	leave  
c0025f90:	c3                   	ret    
c0025f91:	90                   	nop

c0025f92 <APICTimer::close(int, int, void*)>:
c0025f92:	b8 00 00 00 00       	mov    eax,0x0
c0025f97:	c3                   	ret    

c0025f98 <apicTimerHandler(regs*, void*)>:
c0025f98:	83 ec 0c             	sub    esp,0xc
c0025f9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fa1:	99                   	cdq    
c0025fa2:	52                   	push   edx
c0025fa3:	50                   	push   eax
c0025fa4:	6a 00                	push   0x0
c0025fa6:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025fab:	e8 94 07 00 00       	call   c0026744 <__udivdi3>
c0025fb0:	83 c4 10             	add    esp,0x10
c0025fb3:	83 ec 08             	sub    esp,0x8
c0025fb6:	52                   	push   edx
c0025fb7:	50                   	push   eax
c0025fb8:	e8 44 06 ff ff       	call   c0016601 <timerHandler(unsigned long long)>
c0025fbd:	83 c4 10             	add    esp,0x10
c0025fc0:	90                   	nop
c0025fc1:	83 c4 0c             	add    esp,0xc
c0025fc4:	c3                   	ret    
c0025fc5:	90                   	nop

c0025fc6 <APICTimer::write(int)>:
c0025fc6:	53                   	push   ebx
c0025fc7:	83 ec 28             	sub    esp,0x28
c0025fca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025fce:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025fd2:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025fd8:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c0025fdd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025fe3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025fe9:	83 ec 0c             	sub    esp,0xc
c0025fec:	50                   	push   eax
c0025fed:	e8 de f4 ff ff       	call   c00254d0 <APIC::getBase()>
c0025ff2:	83 c4 10             	add    esp,0x10
c0025ff5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025ff9:	a1 50 e0 02 c0       	mov    eax,ds:0xc002e050
c0025ffe:	8b 15 54 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e054
c0026004:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026008:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002600c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026010:	05 e0 03 00 00       	add    eax,0x3e0
c0026015:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002601f:	05 80 03 00 00       	add    eax,0x380
c0026024:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002602a:	fb                   	sti    
c002602b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002602f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026033:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026038:	83 d2 00             	adc    edx,0x0
c002603b:	89 c1                	mov    ecx,eax
c002603d:	89 d3                	mov    ebx,edx
c002603f:	a1 50 e0 02 c0       	mov    eax,ds:0xc002e050
c0026044:	8b 15 54 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e054
c002604a:	39 c8                	cmp    eax,ecx
c002604c:	89 d0                	mov    eax,edx
c002604e:	19 d8                	sbb    eax,ebx
c0026050:	73 02                	jae    c0026054 <APICTimer::write(int)+0x8e>
c0026052:	eb d7                	jmp    c002602b <APICTimer::write(int)+0x65>
c0026054:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026058:	05 20 03 00 00       	add    eax,0x320
c002605d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026063:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026067:	05 90 03 00 00       	add    eax,0x390
c002606c:	8b 00                	mov    eax,DWORD PTR [eax]
c002606e:	f7 d0                	not    eax
c0026070:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026074:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026078:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002607c:	ba 00 00 00 00       	mov    edx,0x0
c0026081:	f7 f3                	div    ebx
c0026083:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026087:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002608b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026091:	0d 00 00 02 00       	or     eax,0x20000
c0026096:	89 c2                	mov    edx,eax
c0026098:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002609c:	05 20 03 00 00       	add    eax,0x320
c00260a1:	89 10                	mov    DWORD PTR [eax],edx
c00260a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00260a7:	05 e0 03 00 00       	add    eax,0x3e0
c00260ac:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00260b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00260b6:	05 80 03 00 00       	add    eax,0x380
c00260bb:	89 c2                	mov    edx,eax
c00260bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00260c1:	89 02                	mov    DWORD PTR [edx],eax
c00260c3:	90                   	nop
c00260c4:	83 c4 28             	add    esp,0x28
c00260c7:	5b                   	pop    ebx
c00260c8:	c3                   	ret    
c00260c9:	90                   	nop

c00260ca <APICTimer::open(int, int, void*)>:
c00260ca:	57                   	push   edi
c00260cb:	56                   	push   esi
c00260cc:	53                   	push   ebx
c00260cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00260d3:	83 c0 24             	add    eax,0x24
c00260d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00260d8:	83 ec 08             	sub    esp,0x8
c00260db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260e3:	ff d0                	call   eax
c00260e5:	83 c4 10             	add    esp,0x10
c00260e8:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c00260ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00260f3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00260f9:	83 ec 0c             	sub    esp,0xc
c00260fc:	50                   	push   eax
c00260fd:	e8 ce f3 ff ff       	call   c00254d0 <APIC::getBase()>
c0026102:	83 c4 10             	add    esp,0x10
c0026105:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002610b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002610f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026115:	0f b6 f8             	movzx  edi,al
c0026118:	89 d0                	mov    eax,edx
c002611a:	ba 00 00 00 00       	mov    edx,0x0
c002611f:	89 c1                	mov    ecx,eax
c0026121:	80 e5 ff             	and    ch,0xff
c0026124:	89 cb                	mov    ebx,ecx
c0026126:	0f b6 f2             	movzx  esi,dl
c0026129:	89 d8                	mov    eax,ebx
c002612b:	89 f2                	mov    edx,esi
c002612d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026131:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026134:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026138:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002613c:	83 e0 00             	and    eax,0x0
c002613f:	09 d0                	or     eax,edx
c0026141:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026149:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002614f:	8d 50 01             	lea    edx,[eax+0x1]
c0026152:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026156:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002615c:	0f b6 d0             	movzx  edx,al
c002615f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026163:	83 c2 08             	add    edx,0x8
c0026166:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002616a:	0f b6 c9             	movzx  ecx,cl
c002616d:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026173:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002617b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002617f:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026189:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002618d:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026193:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026197:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002619d:	83 ec 0c             	sub    esp,0xc
c00261a0:	51                   	push   ecx
c00261a1:	6a 01                	push   0x1
c00261a3:	68 98 5f 02 c0       	push   0xc0025f98
c00261a8:	52                   	push   edx
c00261a9:	50                   	push   eax
c00261aa:	e8 05 d9 fe ff       	call   c0013ab4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00261af:	83 c4 20             	add    esp,0x20
c00261b2:	89 c2                	mov    edx,eax
c00261b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261b8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00261be:	b8 00 00 00 00       	mov    eax,0x0
c00261c3:	5b                   	pop    ebx
c00261c4:	5e                   	pop    esi
c00261c5:	5f                   	pop    edi
c00261c6:	c3                   	ret    
c00261c7:	90                   	nop

c00261c8 <APICTimer::APICTimer()>:
c00261c8:	83 ec 0c             	sub    esp,0xc
c00261cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261cf:	83 ec 08             	sub    esp,0x8
c00261d2:	68 2c c7 02 c0       	push   0xc002c72c
c00261d7:	50                   	push   eax
c00261d8:	e8 95 03 ff ff       	call   c0016572 <Timer::Timer(char const*)>
c00261dd:	83 c4 10             	add    esp,0x10
c00261e0:	ba 40 c7 02 c0       	mov    edx,0xc002c740
c00261e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261e9:	89 10                	mov    DWORD PTR [eax],edx
c00261eb:	90                   	nop
c00261ec:	83 c4 0c             	add    esp,0xc
c00261ef:	c3                   	ret    

c00261f0 <PIT::write(int)>:
c00261f0:	83 ec 10             	sub    esp,0x10
c00261f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00261f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00261fb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026201:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026205:	a3 84 1d 03 c0       	mov    ds:0xc0031d84,eax
c002620a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002620f:	99                   	cdq    
c0026210:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026214:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026218:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002621f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026224:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026228:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002622d:	ee                   	out    dx,al
c002622e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026232:	0f b6 c0             	movzx  eax,al
c0026235:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002623c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026240:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026244:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026249:	ee                   	out    dx,al
c002624a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002624e:	c1 f8 08             	sar    eax,0x8
c0026251:	0f b6 c0             	movzx  eax,al
c0026254:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002625b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002625f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026263:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026268:	ee                   	out    dx,al
c0026269:	90                   	nop
c002626a:	83 c4 10             	add    esp,0x10
c002626d:	c3                   	ret    

c002626e <pitHandler(regs*, void*)>:
c002626e:	83 ec 0c             	sub    esp,0xc
c0026271:	a1 84 1d 03 c0       	mov    eax,ds:0xc0031d84
c0026276:	99                   	cdq    
c0026277:	52                   	push   edx
c0026278:	50                   	push   eax
c0026279:	6a 00                	push   0x0
c002627b:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026280:	e8 bf 04 00 00       	call   c0026744 <__udivdi3>
c0026285:	83 c4 10             	add    esp,0x10
c0026288:	83 ec 08             	sub    esp,0x8
c002628b:	52                   	push   edx
c002628c:	50                   	push   eax
c002628d:	e8 6f 03 ff ff       	call   c0016601 <timerHandler(unsigned long long)>
c0026292:	83 c4 10             	add    esp,0x10
c0026295:	90                   	nop
c0026296:	83 c4 0c             	add    esp,0xc
c0026299:	c3                   	ret    

c002629a <PIT::open(int, int, void*)>:
c002629a:	83 ec 0c             	sub    esp,0xc
c002629d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00262a3:	83 c0 24             	add    eax,0x24
c00262a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00262a8:	83 ec 08             	sub    esp,0x8
c00262ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00262af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00262b3:	ff d0                	call   eax
c00262b5:	83 c4 10             	add    esp,0x10
c00262b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262bc:	83 ec 0c             	sub    esp,0xc
c00262bf:	6a 00                	push   0x0
c00262c1:	6a 01                	push   0x1
c00262c3:	68 6e 62 02 c0       	push   0xc002626e
c00262c8:	6a 00                	push   0x0
c00262ca:	50                   	push   eax
c00262cb:	e8 e4 d7 fe ff       	call   c0013ab4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00262d0:	83 c4 20             	add    esp,0x20
c00262d3:	89 c2                	mov    edx,eax
c00262d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262d9:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00262df:	b8 00 00 00 00       	mov    eax,0x0
c00262e4:	83 c4 0c             	add    esp,0xc
c00262e7:	c3                   	ret    

c00262e8 <PIT::close(int, int, void*)>:
c00262e8:	83 ec 0c             	sub    esp,0xc
c00262eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262ef:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00262f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262fd:	6a 01                	push   0x1
c00262ff:	68 6e 62 02 c0       	push   0xc002626e
c0026304:	6a 00                	push   0x0
c0026306:	50                   	push   eax
c0026307:	e8 f2 d7 fe ff       	call   c0013afe <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002630c:	83 c4 10             	add    esp,0x10
c002630f:	b8 00 00 00 00       	mov    eax,0x0
c0026314:	83 c4 0c             	add    esp,0xc
c0026317:	c3                   	ret    

c0026318 <PIT::PIT()>:
c0026318:	83 ec 0c             	sub    esp,0xc
c002631b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002631f:	83 ec 08             	sub    esp,0x8
c0026322:	68 68 c7 02 c0       	push   0xc002c768
c0026327:	50                   	push   eax
c0026328:	e8 45 02 ff ff       	call   c0016572 <Timer::Timer(char const*)>
c002632d:	83 c4 10             	add    esp,0x10
c0026330:	ba 90 c7 02 c0       	mov    edx,0xc002c790
c0026335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026339:	89 10                	mov    DWORD PTR [eax],edx
c002633b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002633f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026345:	0f b6 d0             	movzx  edx,al
c0026348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002634c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026357:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002635d:	0f b6 d0             	movzx  edx,al
c0026360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026364:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002636d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026373:	8d 50 01             	lea    edx,[eax+0x1]
c0026376:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002637a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026380:	0f b6 d0             	movzx  edx,al
c0026383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026387:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002638b:	83 e1 3f             	and    ecx,0x3f
c002638e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026392:	90                   	nop
c0026393:	83 c4 0c             	add    esp,0xc
c0026396:	c3                   	ret    
c0026397:	66 90                	xchg   ax,ax
c0026399:	66 90                	xchg   ax,ax
c002639b:	66 90                	xchg   ax,ax
c002639d:	66 90                	xchg   ax,ax
c002639f:	90                   	nop

c00263a0 <avxDetect>:
c00263a0:	b8 00 00 00 00       	mov    eax,0x0
c00263a5:	c3                   	ret    

c00263a6 <avxSave>:
c00263a6:	c3                   	ret    

c00263a7 <avxLoad>:
c00263a7:	c3                   	ret    

c00263a8 <avxInit>:
c00263a8:	c3                   	ret    

c00263a9 <avxClose>:
c00263a9:	c3                   	ret    

c00263aa <wouldSheSayYes>:
c00263aa:	c3                   	ret    
c00263ab:	49                   	dec    ecx
c00263ac:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00263b0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00263b4:	75 20                	jne    c00263d6 <sseDetect.noSSE+0x1>
c00263b6:	4e                   	dec    esi
c00263b7:	79 61                	jns    c002641a <x87Detect+0x14>
c00263b9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00263be:	66 90                	xchg   ax,ax

c00263c0 <absolutelyNoChanceInHell>:
c00263c0:	b8 01 00 00 00       	mov    eax,0x1
c00263c5:	0f a2                	cpuid  
c00263c7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00263cd:	74 06                	je     c00263d5 <sseDetect.noSSE>
c00263cf:	b8 01 00 00 00       	mov    eax,0x1
c00263d4:	c3                   	ret    

c00263d5 <sseDetect.noSSE>:
c00263d5:	31 c0                	xor    eax,eax
c00263d7:	c3                   	ret    

c00263d8 <sseSave>:
c00263d8:	0f ae 44 24 04       	fxsave [esp+0x4]
c00263dd:	c3                   	ret    

c00263de <sseLoad>:
c00263de:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00263e3:	c3                   	ret    

c00263e4 <sseInit>:
c00263e4:	e8 49 00 00 00       	call   c0026432 <x87Init>
c00263e9:	0f 20 e0             	mov    eax,cr4
c00263ec:	66 0d 00 06          	or     ax,0x600
c00263f0:	0f 22 e0             	mov    cr4,eax
c00263f3:	c3                   	ret    

c00263f4 <sseClose>:
c00263f4:	c3                   	ret    
c00263f5:	66 90                	xchg   ax,ax
c00263f7:	66 90                	xchg   ax,ax
c00263f9:	66 90                	xchg   ax,ax
c00263fb:	66 90                	xchg   ax,ax
c00263fd:	66 90                	xchg   ax,ax
c00263ff:	90                   	nop

c0026400 <value_37F>:
c0026400:	7f 03                	jg     c0026405 <value_37A+0x1>

c0026402 <value_37E>:
c0026402:	7e 03                	jle    c0026407 <x87Detect+0x1>

c0026404 <value_37A>:
c0026404:	7a 03                	jp     c0026409 <x87Detect+0x3>

c0026406 <x87Detect>:
c0026406:	b8 01 00 00 00       	mov    eax,0x1
c002640b:	0f a2                	cpuid  
c002640d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026413:	74 06                	je     c002641b <x87Detect.nox87>
c0026415:	b8 01 00 00 00       	mov    eax,0x1
c002641a:	c3                   	ret    

c002641b <x87Detect.nox87>:
c002641b:	b8 00 00 00 00       	mov    eax,0x0
c0026420:	c3                   	ret    

c0026421 <x87Save>:
c0026421:	55                   	push   ebp
c0026422:	89 e5                	mov    ebp,esp
c0026424:	9b dd 75 08          	fsave  [ebp+0x8]
c0026428:	c9                   	leave  
c0026429:	c3                   	ret    

c002642a <x87Load>:
c002642a:	55                   	push   ebp
c002642b:	89 e5                	mov    ebp,esp
c002642d:	dd 65 08             	frstor [ebp+0x8]
c0026430:	c9                   	leave  
c0026431:	c3                   	ret    

c0026432 <x87Init>:
c0026432:	9b db e3             	finit  
c0026435:	0f 20 c0             	mov    eax,cr0
c0026438:	66 25 fb ff          	and    ax,0xfffb
c002643c:	66 0d 22 00          	or     ax,0x22
c0026440:	0f 22 c0             	mov    cr0,eax
c0026443:	0f 06                	clts   
c0026445:	d9 2d 04 64 02 c0    	fldcw  WORD PTR ds:0xc0026404
c002644b:	c3                   	ret    

c002644c <x87Close>:
c002644c:	c3                   	ret    
c002644d:	66 90                	xchg   ax,ax
c002644f:	90                   	nop

c0026450 <__do_global_ctors_aux>:
c0026450:	a1 44 90 02 c0       	mov    eax,ds:0xc0029044
c0026455:	83 f8 ff             	cmp    eax,0xffffffff
c0026458:	74 1a                	je     c0026474 <__do_global_ctors_aux+0x24>
c002645a:	55                   	push   ebp
c002645b:	89 e5                	mov    ebp,esp
c002645d:	53                   	push   ebx
c002645e:	52                   	push   edx
c002645f:	bb 44 90 02 c0       	mov    ebx,0xc0029044
c0026464:	ff d0                	call   eax
c0026466:	83 eb 04             	sub    ebx,0x4
c0026469:	8b 03                	mov    eax,DWORD PTR [ebx]
c002646b:	83 f8 ff             	cmp    eax,0xffffffff
c002646e:	75 f4                	jne    c0026464 <__do_global_ctors_aux+0x14>
c0026470:	58                   	pop    eax
c0026471:	5b                   	pop    ebx
c0026472:	5d                   	pop    ebp
c0026473:	c3                   	ret    
c0026474:	c3                   	ret    
c0026475:	66 90                	xchg   ax,ax
c0026477:	90                   	nop

c0026478 <__divdi3>:
c0026478:	55                   	push   ebp
c0026479:	57                   	push   edi
c002647a:	56                   	push   esi
c002647b:	53                   	push   ebx
c002647c:	83 ec 1c             	sub    esp,0x1c
c002647f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026483:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026487:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002648a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002648e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026492:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026496:	85 db                	test   ebx,ebx
c0026498:	0f 88 8e 00 00 00    	js     c002652c <__divdi3+0xb4>
c002649e:	89 dd                	mov    ebp,ebx
c00264a0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00264a8:	89 d3                	mov    ebx,edx
c00264aa:	85 d2                	test   edx,edx
c00264ac:	79 0d                	jns    c00264bb <__divdi3+0x43>
c00264ae:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00264b2:	f7 d8                	neg    eax
c00264b4:	83 d2 00             	adc    edx,0x0
c00264b7:	f7 da                	neg    edx
c00264b9:	89 d3                	mov    ebx,edx
c00264bb:	89 c7                	mov    edi,eax
c00264bd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00264c0:	85 db                	test   ebx,ebx
c00264c2:	75 48                	jne    c002650c <__divdi3+0x94>
c00264c4:	39 ef                	cmp    edi,ebp
c00264c6:	76 24                	jbe    c00264ec <__divdi3+0x74>
c00264c8:	89 ea                	mov    edx,ebp
c00264ca:	f7 f7                	div    edi
c00264cc:	89 c1                	mov    ecx,eax
c00264ce:	31 f6                	xor    esi,esi
c00264d0:	89 c8                	mov    eax,ecx
c00264d2:	89 f2                	mov    edx,esi
c00264d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00264d8:	85 c9                	test   ecx,ecx
c00264da:	74 07                	je     c00264e3 <__divdi3+0x6b>
c00264dc:	f7 d8                	neg    eax
c00264de:	83 d2 00             	adc    edx,0x0
c00264e1:	f7 da                	neg    edx
c00264e3:	83 c4 1c             	add    esp,0x1c
c00264e6:	5b                   	pop    ebx
c00264e7:	5e                   	pop    esi
c00264e8:	5f                   	pop    edi
c00264e9:	5d                   	pop    ebp
c00264ea:	c3                   	ret    
c00264eb:	90                   	nop
c00264ec:	85 ff                	test   edi,edi
c00264ee:	75 0b                	jne    c00264fb <__divdi3+0x83>
c00264f0:	b8 01 00 00 00       	mov    eax,0x1
c00264f5:	31 d2                	xor    edx,edx
c00264f7:	f7 f3                	div    ebx
c00264f9:	89 c7                	mov    edi,eax
c00264fb:	31 d2                	xor    edx,edx
c00264fd:	89 e8                	mov    eax,ebp
c00264ff:	f7 f7                	div    edi
c0026501:	89 c6                	mov    esi,eax
c0026503:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026506:	f7 f7                	div    edi
c0026508:	89 c1                	mov    ecx,eax
c002650a:	eb c4                	jmp    c00264d0 <__divdi3+0x58>
c002650c:	39 eb                	cmp    ebx,ebp
c002650e:	77 3c                	ja     c002654c <__divdi3+0xd4>
c0026510:	0f bd f3             	bsr    esi,ebx
c0026513:	83 f6 1f             	xor    esi,0x1f
c0026516:	75 40                	jne    c0026558 <__divdi3+0xe0>
c0026518:	39 eb                	cmp    ebx,ebp
c002651a:	72 09                	jb     c0026525 <__divdi3+0xad>
c002651c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002651f:	0f 87 97 00 00 00    	ja     c00265bc <__divdi3+0x144>
c0026525:	b9 01 00 00 00       	mov    ecx,0x1
c002652a:	eb a4                	jmp    c00264d0 <__divdi3+0x58>
c002652c:	f7 d9                	neg    ecx
c002652e:	83 d3 00             	adc    ebx,0x0
c0026531:	f7 db                	neg    ebx
c0026533:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026536:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002653a:	89 dd                	mov    ebp,ebx
c002653c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026544:	e9 5f ff ff ff       	jmp    c00264a8 <__divdi3+0x30>
c0026549:	8d 76 00             	lea    esi,[esi+0x0]
c002654c:	31 f6                	xor    esi,esi
c002654e:	31 c9                	xor    ecx,ecx
c0026550:	e9 7b ff ff ff       	jmp    c00264d0 <__divdi3+0x58>
c0026555:	8d 76 00             	lea    esi,[esi+0x0]
c0026558:	b8 20 00 00 00       	mov    eax,0x20
c002655d:	29 f0                	sub    eax,esi
c002655f:	89 f1                	mov    ecx,esi
c0026561:	d3 e3                	shl    ebx,cl
c0026563:	89 fa                	mov    edx,edi
c0026565:	88 c1                	mov    cl,al
c0026567:	d3 ea                	shr    edx,cl
c0026569:	09 da                	or     edx,ebx
c002656b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002656f:	89 f1                	mov    ecx,esi
c0026571:	d3 e7                	shl    edi,cl
c0026573:	89 eb                	mov    ebx,ebp
c0026575:	88 c1                	mov    cl,al
c0026577:	d3 eb                	shr    ebx,cl
c0026579:	89 f1                	mov    ecx,esi
c002657b:	d3 e5                	shl    ebp,cl
c002657d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026580:	88 c1                	mov    cl,al
c0026582:	d3 ea                	shr    edx,cl
c0026584:	09 d5                	or     ebp,edx
c0026586:	89 e8                	mov    eax,ebp
c0026588:	89 da                	mov    edx,ebx
c002658a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002658e:	89 d3                	mov    ebx,edx
c0026590:	89 c5                	mov    ebp,eax
c0026592:	f7 e7                	mul    edi
c0026594:	39 d3                	cmp    ebx,edx
c0026596:	72 18                	jb     c00265b0 <__divdi3+0x138>
c0026598:	74 0a                	je     c00265a4 <__divdi3+0x12c>
c002659a:	89 e9                	mov    ecx,ebp
c002659c:	31 f6                	xor    esi,esi
c002659e:	e9 2d ff ff ff       	jmp    c00264d0 <__divdi3+0x58>
c00265a3:	90                   	nop
c00265a4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00265a7:	89 f1                	mov    ecx,esi
c00265a9:	d3 e7                	shl    edi,cl
c00265ab:	39 c7                	cmp    edi,eax
c00265ad:	73 eb                	jae    c002659a <__divdi3+0x122>
c00265af:	90                   	nop
c00265b0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00265b3:	31 f6                	xor    esi,esi
c00265b5:	e9 16 ff ff ff       	jmp    c00264d0 <__divdi3+0x58>
c00265ba:	66 90                	xchg   ax,ax
c00265bc:	31 c9                	xor    ecx,ecx
c00265be:	e9 0d ff ff ff       	jmp    c00264d0 <__divdi3+0x58>
c00265c3:	90                   	nop

c00265c4 <__moddi3>:
c00265c4:	55                   	push   ebp
c00265c5:	57                   	push   edi
c00265c6:	56                   	push   esi
c00265c7:	53                   	push   ebx
c00265c8:	83 ec 2c             	sub    esp,0x2c
c00265cb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00265cf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00265d3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00265d7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00265db:	85 db                	test   ebx,ebx
c00265dd:	0f 88 85 00 00 00    	js     c0026668 <__moddi3+0xa4>
c00265e3:	89 de                	mov    esi,ebx
c00265e5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00265ed:	89 d7                	mov    edi,edx
c00265ef:	85 d2                	test   edx,edx
c00265f1:	79 09                	jns    c00265fc <__moddi3+0x38>
c00265f3:	f7 d8                	neg    eax
c00265f5:	83 d2 00             	adc    edx,0x0
c00265f8:	f7 da                	neg    edx
c00265fa:	89 d7                	mov    edi,edx
c00265fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026600:	89 cd                	mov    ebp,ecx
c0026602:	85 ff                	test   edi,edi
c0026604:	75 52                	jne    c0026658 <__moddi3+0x94>
c0026606:	89 c3                	mov    ebx,eax
c0026608:	39 f0                	cmp    eax,esi
c002660a:	76 24                	jbe    c0026630 <__moddi3+0x6c>
c002660c:	89 c8                	mov    eax,ecx
c002660e:	89 f2                	mov    edx,esi
c0026610:	f7 f3                	div    ebx
c0026612:	89 d6                	mov    esi,edx
c0026614:	89 f0                	mov    eax,esi
c0026616:	31 d2                	xor    edx,edx
c0026618:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002661c:	85 c9                	test   ecx,ecx
c002661e:	74 07                	je     c0026627 <__moddi3+0x63>
c0026620:	f7 d8                	neg    eax
c0026622:	83 d2 00             	adc    edx,0x0
c0026625:	f7 da                	neg    edx
c0026627:	83 c4 2c             	add    esp,0x2c
c002662a:	5b                   	pop    ebx
c002662b:	5e                   	pop    esi
c002662c:	5f                   	pop    edi
c002662d:	5d                   	pop    ebp
c002662e:	c3                   	ret    
c002662f:	90                   	nop
c0026630:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026634:	85 db                	test   ebx,ebx
c0026636:	75 0d                	jne    c0026645 <__moddi3+0x81>
c0026638:	b8 01 00 00 00       	mov    eax,0x1
c002663d:	31 d2                	xor    edx,edx
c002663f:	f7 f7                	div    edi
c0026641:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026645:	89 f0                	mov    eax,esi
c0026647:	31 d2                	xor    edx,edx
c0026649:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002664d:	f7 f7                	div    edi
c002664f:	89 e8                	mov    eax,ebp
c0026651:	f7 f7                	div    edi
c0026653:	89 d6                	mov    esi,edx
c0026655:	eb bd                	jmp    c0026614 <__moddi3+0x50>
c0026657:	90                   	nop
c0026658:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002665c:	39 f7                	cmp    edi,esi
c002665e:	76 20                	jbe    c0026680 <__moddi3+0xbc>
c0026660:	89 c8                	mov    eax,ecx
c0026662:	89 f2                	mov    edx,esi
c0026664:	eb b2                	jmp    c0026618 <__moddi3+0x54>
c0026666:	66 90                	xchg   ax,ax
c0026668:	f7 d9                	neg    ecx
c002666a:	83 d3 00             	adc    ebx,0x0
c002666d:	f7 db                	neg    ebx
c002666f:	89 de                	mov    esi,ebx
c0026671:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026679:	e9 6f ff ff ff       	jmp    c00265ed <__moddi3+0x29>
c002667e:	66 90                	xchg   ax,ax
c0026680:	0f bd c7             	bsr    eax,edi
c0026683:	83 f0 1f             	xor    eax,0x1f
c0026686:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002668a:	75 24                	jne    c00266b0 <__moddi3+0xec>
c002668c:	39 f7                	cmp    edi,esi
c002668e:	72 06                	jb     c0026696 <__moddi3+0xd2>
c0026690:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026694:	77 0c                	ja     c00266a2 <__moddi3+0xde>
c0026696:	89 e9                	mov    ecx,ebp
c0026698:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002669c:	19 fe                	sbb    esi,edi
c002669e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00266a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00266a6:	89 f2                	mov    edx,esi
c00266a8:	e9 6b ff ff ff       	jmp    c0026618 <__moddi3+0x54>
c00266ad:	8d 76 00             	lea    esi,[esi+0x0]
c00266b0:	b8 20 00 00 00       	mov    eax,0x20
c00266b5:	89 c2                	mov    edx,eax
c00266b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00266bb:	29 da                	sub    edx,ebx
c00266bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00266c1:	88 d9                	mov    cl,bl
c00266c3:	d3 e7                	shl    edi,cl
c00266c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00266c9:	88 d1                	mov    cl,dl
c00266cb:	d3 e8                	shr    eax,cl
c00266cd:	09 c7                	or     edi,eax
c00266cf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00266d3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00266d7:	89 d8                	mov    eax,ebx
c00266d9:	88 d9                	mov    cl,bl
c00266db:	d3 e7                	shl    edi,cl
c00266dd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00266e1:	89 f3                	mov    ebx,esi
c00266e3:	88 d1                	mov    cl,dl
c00266e5:	d3 eb                	shr    ebx,cl
c00266e7:	89 c7                	mov    edi,eax
c00266e9:	88 c1                	mov    cl,al
c00266eb:	d3 e6                	shl    esi,cl
c00266ed:	89 e8                	mov    eax,ebp
c00266ef:	88 d1                	mov    cl,dl
c00266f1:	d3 e8                	shr    eax,cl
c00266f3:	09 f0                	or     eax,esi
c00266f5:	89 f9                	mov    ecx,edi
c00266f7:	d3 e5                	shl    ebp,cl
c00266f9:	89 da                	mov    edx,ebx
c00266fb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00266ff:	89 d3                	mov    ebx,edx
c0026701:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026705:	89 c6                	mov    esi,eax
c0026707:	89 d1                	mov    ecx,edx
c0026709:	39 d3                	cmp    ebx,edx
c002670b:	72 27                	jb     c0026734 <__moddi3+0x170>
c002670d:	74 21                	je     c0026730 <__moddi3+0x16c>
c002670f:	29 f5                	sub    ebp,esi
c0026711:	19 cb                	sbb    ebx,ecx
c0026713:	89 de                	mov    esi,ebx
c0026715:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026719:	d3 e6                	shl    esi,cl
c002671b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002671f:	89 f9                	mov    ecx,edi
c0026721:	d3 ed                	shr    ebp,cl
c0026723:	09 ee                	or     esi,ebp
c0026725:	89 f0                	mov    eax,esi
c0026727:	d3 eb                	shr    ebx,cl
c0026729:	89 da                	mov    edx,ebx
c002672b:	e9 e8 fe ff ff       	jmp    c0026618 <__moddi3+0x54>
c0026730:	39 c5                	cmp    ebp,eax
c0026732:	73 db                	jae    c002670f <__moddi3+0x14b>
c0026734:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026738:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002673c:	89 d1                	mov    ecx,edx
c002673e:	89 c6                	mov    esi,eax
c0026740:	eb cd                	jmp    c002670f <__moddi3+0x14b>
c0026742:	66 90                	xchg   ax,ax

c0026744 <__udivdi3>:
c0026744:	55                   	push   ebp
c0026745:	57                   	push   edi
c0026746:	56                   	push   esi
c0026747:	53                   	push   ebx
c0026748:	83 ec 1c             	sub    esp,0x1c
c002674b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002674f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026753:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026757:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002675b:	85 d2                	test   edx,edx
c002675d:	75 41                	jne    c00267a0 <__udivdi3+0x5c>
c002675f:	39 f7                	cmp    edi,esi
c0026761:	76 15                	jbe    c0026778 <__udivdi3+0x34>
c0026763:	89 e8                	mov    eax,ebp
c0026765:	89 f2                	mov    edx,esi
c0026767:	f7 f7                	div    edi
c0026769:	31 db                	xor    ebx,ebx
c002676b:	89 da                	mov    edx,ebx
c002676d:	83 c4 1c             	add    esp,0x1c
c0026770:	5b                   	pop    ebx
c0026771:	5e                   	pop    esi
c0026772:	5f                   	pop    edi
c0026773:	5d                   	pop    ebp
c0026774:	c3                   	ret    
c0026775:	8d 76 00             	lea    esi,[esi+0x0]
c0026778:	89 f9                	mov    ecx,edi
c002677a:	85 ff                	test   edi,edi
c002677c:	75 0b                	jne    c0026789 <__udivdi3+0x45>
c002677e:	b8 01 00 00 00       	mov    eax,0x1
c0026783:	31 d2                	xor    edx,edx
c0026785:	f7 f7                	div    edi
c0026787:	89 c1                	mov    ecx,eax
c0026789:	31 d2                	xor    edx,edx
c002678b:	89 f0                	mov    eax,esi
c002678d:	f7 f1                	div    ecx
c002678f:	89 c3                	mov    ebx,eax
c0026791:	89 e8                	mov    eax,ebp
c0026793:	f7 f1                	div    ecx
c0026795:	89 da                	mov    edx,ebx
c0026797:	83 c4 1c             	add    esp,0x1c
c002679a:	5b                   	pop    ebx
c002679b:	5e                   	pop    esi
c002679c:	5f                   	pop    edi
c002679d:	5d                   	pop    ebp
c002679e:	c3                   	ret    
c002679f:	90                   	nop
c00267a0:	39 f2                	cmp    edx,esi
c00267a2:	77 1c                	ja     c00267c0 <__udivdi3+0x7c>
c00267a4:	0f bd da             	bsr    ebx,edx
c00267a7:	83 f3 1f             	xor    ebx,0x1f
c00267aa:	75 24                	jne    c00267d0 <__udivdi3+0x8c>
c00267ac:	39 f2                	cmp    edx,esi
c00267ae:	72 08                	jb     c00267b8 <__udivdi3+0x74>
c00267b0:	39 ef                	cmp    edi,ebp
c00267b2:	0f 87 84 00 00 00    	ja     c002683c <__udivdi3+0xf8>
c00267b8:	b8 01 00 00 00       	mov    eax,0x1
c00267bd:	eb ac                	jmp    c002676b <__udivdi3+0x27>
c00267bf:	90                   	nop
c00267c0:	31 db                	xor    ebx,ebx
c00267c2:	31 c0                	xor    eax,eax
c00267c4:	89 da                	mov    edx,ebx
c00267c6:	83 c4 1c             	add    esp,0x1c
c00267c9:	5b                   	pop    ebx
c00267ca:	5e                   	pop    esi
c00267cb:	5f                   	pop    edi
c00267cc:	5d                   	pop    ebp
c00267cd:	c3                   	ret    
c00267ce:	66 90                	xchg   ax,ax
c00267d0:	b8 20 00 00 00       	mov    eax,0x20
c00267d5:	29 d8                	sub    eax,ebx
c00267d7:	88 d9                	mov    cl,bl
c00267d9:	d3 e2                	shl    edx,cl
c00267db:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00267df:	89 fa                	mov    edx,edi
c00267e1:	88 c1                	mov    cl,al
c00267e3:	d3 ea                	shr    edx,cl
c00267e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00267e9:	09 d1                	or     ecx,edx
c00267eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00267ef:	88 d9                	mov    cl,bl
c00267f1:	d3 e7                	shl    edi,cl
c00267f3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00267f7:	89 f7                	mov    edi,esi
c00267f9:	88 c1                	mov    cl,al
c00267fb:	d3 ef                	shr    edi,cl
c00267fd:	88 d9                	mov    cl,bl
c00267ff:	d3 e6                	shl    esi,cl
c0026801:	89 ea                	mov    edx,ebp
c0026803:	88 c1                	mov    cl,al
c0026805:	d3 ea                	shr    edx,cl
c0026807:	09 d6                	or     esi,edx
c0026809:	89 f0                	mov    eax,esi
c002680b:	89 fa                	mov    edx,edi
c002680d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026811:	89 d7                	mov    edi,edx
c0026813:	89 c6                	mov    esi,eax
c0026815:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026819:	39 d7                	cmp    edi,edx
c002681b:	72 13                	jb     c0026830 <__udivdi3+0xec>
c002681d:	74 09                	je     c0026828 <__udivdi3+0xe4>
c002681f:	89 f0                	mov    eax,esi
c0026821:	31 db                	xor    ebx,ebx
c0026823:	e9 43 ff ff ff       	jmp    c002676b <__udivdi3+0x27>
c0026828:	88 d9                	mov    cl,bl
c002682a:	d3 e5                	shl    ebp,cl
c002682c:	39 c5                	cmp    ebp,eax
c002682e:	73 ef                	jae    c002681f <__udivdi3+0xdb>
c0026830:	8d 46 ff             	lea    eax,[esi-0x1]
c0026833:	31 db                	xor    ebx,ebx
c0026835:	e9 31 ff ff ff       	jmp    c002676b <__udivdi3+0x27>
c002683a:	66 90                	xchg   ax,ax
c002683c:	31 c0                	xor    eax,eax
c002683e:	e9 28 ff ff ff       	jmp    c002676b <__udivdi3+0x27>
c0026843:	90                   	nop

c0026844 <__umoddi3>:
c0026844:	55                   	push   ebp
c0026845:	57                   	push   edi
c0026846:	56                   	push   esi
c0026847:	53                   	push   ebx
c0026848:	83 ec 1c             	sub    esp,0x1c
c002684b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002684f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026853:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026857:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002685b:	89 da                	mov    edx,ebx
c002685d:	85 c0                	test   eax,eax
c002685f:	75 37                	jne    c0026898 <__umoddi3+0x54>
c0026861:	39 df                	cmp    edi,ebx
c0026863:	76 13                	jbe    c0026878 <__umoddi3+0x34>
c0026865:	89 f0                	mov    eax,esi
c0026867:	f7 f7                	div    edi
c0026869:	89 d0                	mov    eax,edx
c002686b:	31 d2                	xor    edx,edx
c002686d:	83 c4 1c             	add    esp,0x1c
c0026870:	5b                   	pop    ebx
c0026871:	5e                   	pop    esi
c0026872:	5f                   	pop    edi
c0026873:	5d                   	pop    ebp
c0026874:	c3                   	ret    
c0026875:	8d 76 00             	lea    esi,[esi+0x0]
c0026878:	89 fd                	mov    ebp,edi
c002687a:	85 ff                	test   edi,edi
c002687c:	75 0b                	jne    c0026889 <__umoddi3+0x45>
c002687e:	b8 01 00 00 00       	mov    eax,0x1
c0026883:	31 d2                	xor    edx,edx
c0026885:	f7 f7                	div    edi
c0026887:	89 c5                	mov    ebp,eax
c0026889:	89 d8                	mov    eax,ebx
c002688b:	31 d2                	xor    edx,edx
c002688d:	f7 f5                	div    ebp
c002688f:	89 f0                	mov    eax,esi
c0026891:	f7 f5                	div    ebp
c0026893:	89 d0                	mov    eax,edx
c0026895:	eb d4                	jmp    c002686b <__umoddi3+0x27>
c0026897:	90                   	nop
c0026898:	89 f1                	mov    ecx,esi
c002689a:	39 d8                	cmp    eax,ebx
c002689c:	76 0a                	jbe    c00268a8 <__umoddi3+0x64>
c002689e:	89 f0                	mov    eax,esi
c00268a0:	83 c4 1c             	add    esp,0x1c
c00268a3:	5b                   	pop    ebx
c00268a4:	5e                   	pop    esi
c00268a5:	5f                   	pop    edi
c00268a6:	5d                   	pop    ebp
c00268a7:	c3                   	ret    
c00268a8:	0f bd e8             	bsr    ebp,eax
c00268ab:	83 f5 1f             	xor    ebp,0x1f
c00268ae:	75 1c                	jne    c00268cc <__umoddi3+0x88>
c00268b0:	39 d8                	cmp    eax,ebx
c00268b2:	72 04                	jb     c00268b8 <__umoddi3+0x74>
c00268b4:	39 f7                	cmp    edi,esi
c00268b6:	77 08                	ja     c00268c0 <__umoddi3+0x7c>
c00268b8:	89 da                	mov    edx,ebx
c00268ba:	29 fe                	sub    esi,edi
c00268bc:	19 c2                	sbb    edx,eax
c00268be:	89 f1                	mov    ecx,esi
c00268c0:	89 c8                	mov    eax,ecx
c00268c2:	83 c4 1c             	add    esp,0x1c
c00268c5:	5b                   	pop    ebx
c00268c6:	5e                   	pop    esi
c00268c7:	5f                   	pop    edi
c00268c8:	5d                   	pop    ebp
c00268c9:	c3                   	ret    
c00268ca:	66 90                	xchg   ax,ax
c00268cc:	ba 20 00 00 00       	mov    edx,0x20
c00268d1:	29 ea                	sub    edx,ebp
c00268d3:	89 e9                	mov    ecx,ebp
c00268d5:	d3 e0                	shl    eax,cl
c00268d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00268db:	89 f8                	mov    eax,edi
c00268dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00268e1:	88 d1                	mov    cl,dl
c00268e3:	d3 e8                	shr    eax,cl
c00268e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00268e9:	09 c1                	or     ecx,eax
c00268eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00268ef:	89 e9                	mov    ecx,ebp
c00268f1:	d3 e7                	shl    edi,cl
c00268f3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00268f7:	89 d8                	mov    eax,ebx
c00268f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00268fd:	88 d1                	mov    cl,dl
c00268ff:	d3 e8                	shr    eax,cl
c0026901:	89 c7                	mov    edi,eax
c0026903:	89 e9                	mov    ecx,ebp
c0026905:	d3 e3                	shl    ebx,cl
c0026907:	89 f0                	mov    eax,esi
c0026909:	88 d1                	mov    cl,dl
c002690b:	d3 e8                	shr    eax,cl
c002690d:	09 d8                	or     eax,ebx
c002690f:	89 e9                	mov    ecx,ebp
c0026911:	d3 e6                	shl    esi,cl
c0026913:	89 f3                	mov    ebx,esi
c0026915:	89 fa                	mov    edx,edi
c0026917:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002691b:	89 d1                	mov    ecx,edx
c002691d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026921:	89 c6                	mov    esi,eax
c0026923:	89 d7                	mov    edi,edx
c0026925:	39 d1                	cmp    ecx,edx
c0026927:	72 27                	jb     c0026950 <__umoddi3+0x10c>
c0026929:	74 21                	je     c002694c <__umoddi3+0x108>
c002692b:	89 ca                	mov    edx,ecx
c002692d:	29 f3                	sub    ebx,esi
c002692f:	19 fa                	sbb    edx,edi
c0026931:	89 d0                	mov    eax,edx
c0026933:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026937:	d3 e0                	shl    eax,cl
c0026939:	89 e9                	mov    ecx,ebp
c002693b:	d3 eb                	shr    ebx,cl
c002693d:	09 d8                	or     eax,ebx
c002693f:	d3 ea                	shr    edx,cl
c0026941:	83 c4 1c             	add    esp,0x1c
c0026944:	5b                   	pop    ebx
c0026945:	5e                   	pop    esi
c0026946:	5f                   	pop    edi
c0026947:	5d                   	pop    ebp
c0026948:	c3                   	ret    
c0026949:	8d 76 00             	lea    esi,[esi+0x0]
c002694c:	39 c3                	cmp    ebx,eax
c002694e:	73 db                	jae    c002692b <__umoddi3+0xe7>
c0026950:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026954:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026958:	89 d7                	mov    edi,edx
c002695a:	89 c6                	mov    esi,eax
c002695c:	eb cd                	jmp    c002692b <__umoddi3+0xe7>

c002695e <__addsf3>:
c002695e:	55                   	push   ebp
c002695f:	89 e5                	mov    ebp,esp
c0026961:	57                   	push   edi
c0026962:	56                   	push   esi
c0026963:	53                   	push   ebx
c0026964:	83 ec 08             	sub    esp,0x8
c0026967:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002696a:	89 fa                	mov    edx,edi
c002696c:	89 f8                	mov    eax,edi
c002696e:	c1 f8 17             	sar    eax,0x17
c0026971:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026974:	c1 e2 08             	shl    edx,0x8
c0026977:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002697d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026980:	89 de                	mov    esi,ebx
c0026982:	c1 fe 17             	sar    esi,0x17
c0026985:	c1 e3 08             	shl    ebx,0x8
c0026988:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002698e:	31 f0                	xor    eax,esi
c0026990:	0f 88 3b 01 00 00    	js     c0026ad1 <__addsf3+0x173>
c0026996:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026999:	29 f1                	sub    ecx,esi
c002699b:	85 c9                	test   ecx,ecx
c002699d:	7e 54                	jle    c00269f3 <__addsf3+0x95>
c002699f:	89 f0                	mov    eax,esi
c00269a1:	84 c0                	test   al,al
c00269a3:	75 10                	jne    c00269b5 <__addsf3+0x57>
c00269a5:	85 db                	test   ebx,ebx
c00269a7:	0f 84 aa 02 00 00    	je     c0026c57 <__addsf3+0x2f9>
c00269ad:	49                   	dec    ecx
c00269ae:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00269b1:	74 38                	je     c00269eb <__addsf3+0x8d>
c00269b3:	eb 13                	jmp    c00269c8 <__addsf3+0x6a>
c00269b5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00269b8:	f7 d0                	not    eax
c00269ba:	84 c0                	test   al,al
c00269bc:	0f 84 95 02 00 00    	je     c0026c57 <__addsf3+0x2f9>
c00269c2:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00269c8:	83 f9 1f             	cmp    ecx,0x1f
c00269cb:	0f 8f 86 02 00 00    	jg     c0026c57 <__addsf3+0x2f9>
c00269d1:	89 de                	mov    esi,ebx
c00269d3:	d3 ee                	shr    esi,cl
c00269d5:	b8 20 00 00 00       	mov    eax,0x20
c00269da:	29 c8                	sub    eax,ecx
c00269dc:	89 c1                	mov    ecx,eax
c00269de:	d3 e3                	shl    ebx,cl
c00269e0:	31 c0                	xor    eax,eax
c00269e2:	85 db                	test   ebx,ebx
c00269e4:	0f 95 c0             	setne  al
c00269e7:	09 f0                	or     eax,esi
c00269e9:	01 d0                	add    eax,edx
c00269eb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00269ee:	e9 b6 00 00 00       	jmp    c0026aa9 <__addsf3+0x14b>
c00269f3:	74 5c                	je     c0026a51 <__addsf3+0xf3>
c00269f5:	89 f1                	mov    ecx,esi
c00269f7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00269fa:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00269fd:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026a01:	75 14                	jne    c0026a17 <__addsf3+0xb9>
c0026a03:	85 d2                	test   edx,edx
c0026a05:	0f 84 4c 02 00 00    	je     c0026c57 <__addsf3+0x2f9>
c0026a0b:	49                   	dec    ecx
c0026a0c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026a0f:	0f 84 94 00 00 00    	je     c0026aa9 <__addsf3+0x14b>
c0026a15:	eb 12                	jmp    c0026a29 <__addsf3+0xcb>
c0026a17:	89 f0                	mov    eax,esi
c0026a19:	f7 d0                	not    eax
c0026a1b:	84 c0                	test   al,al
c0026a1d:	0f 84 34 02 00 00    	je     c0026c57 <__addsf3+0x2f9>
c0026a23:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026a29:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a2c:	83 f9 1f             	cmp    ecx,0x1f
c0026a2f:	0f 8f 22 02 00 00    	jg     c0026c57 <__addsf3+0x2f9>
c0026a35:	89 d7                	mov    edi,edx
c0026a37:	d3 ef                	shr    edi,cl
c0026a39:	b8 20 00 00 00       	mov    eax,0x20
c0026a3e:	29 c8                	sub    eax,ecx
c0026a40:	89 c1                	mov    ecx,eax
c0026a42:	d3 e2                	shl    edx,cl
c0026a44:	31 c0                	xor    eax,eax
c0026a46:	85 d2                	test   edx,edx
c0026a48:	0f 95 c0             	setne  al
c0026a4b:	09 f8                	or     eax,edi
c0026a4d:	01 d8                	add    eax,ebx
c0026a4f:	eb 58                	jmp    c0026aa9 <__addsf3+0x14b>
c0026a51:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a54:	8d 70 01             	lea    esi,[eax+0x1]
c0026a57:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026a5d:	75 32                	jne    c0026a91 <__addsf3+0x133>
c0026a5f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026a63:	75 1f                	jne    c0026a84 <__addsf3+0x126>
c0026a65:	85 d2                	test   edx,edx
c0026a67:	0f 84 e0 01 00 00    	je     c0026c4d <__addsf3+0x2ef>
c0026a6d:	85 db                	test   ebx,ebx
c0026a6f:	0f 84 e2 01 00 00    	je     c0026c57 <__addsf3+0x2f9>
c0026a75:	89 d0                	mov    eax,edx
c0026a77:	01 d8                	add    eax,ebx
c0026a79:	0f 89 a9 01 00 00    	jns    c0026c28 <__addsf3+0x2ca>
c0026a7f:	e9 9d 01 00 00       	jmp    c0026c21 <__addsf3+0x2c3>
c0026a84:	85 d2                	test   edx,edx
c0026a86:	0f 85 cb 01 00 00    	jne    c0026c57 <__addsf3+0x2f9>
c0026a8c:	e9 bc 01 00 00       	jmp    c0026c4d <__addsf3+0x2ef>
c0026a91:	31 c0                	xor    eax,eax
c0026a93:	89 f1                	mov    ecx,esi
c0026a95:	f7 d1                	not    ecx
c0026a97:	84 c9                	test   cl,cl
c0026a99:	0f 84 90 01 00 00    	je     c0026c2f <__addsf3+0x2d1>
c0026a9f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026aa2:	d1 e8                	shr    eax,1
c0026aa4:	e9 86 01 00 00       	jmp    c0026c2f <__addsf3+0x2d1>
c0026aa9:	85 c0                	test   eax,eax
c0026aab:	0f 89 7e 01 00 00    	jns    c0026c2f <__addsf3+0x2d1>
c0026ab1:	46                   	inc    esi
c0026ab2:	89 f2                	mov    edx,esi
c0026ab4:	f7 d2                	not    edx
c0026ab6:	84 d2                	test   dl,dl
c0026ab8:	0f 84 6f 01 00 00    	je     c0026c2d <__addsf3+0x2cf>
c0026abe:	89 c2                	mov    edx,eax
c0026ac0:	83 e2 01             	and    edx,0x1
c0026ac3:	d1 e8                	shr    eax,1
c0026ac5:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026aca:	09 d0                	or     eax,edx
c0026acc:	e9 5e 01 00 00       	jmp    c0026c2f <__addsf3+0x2d1>
c0026ad1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026ad5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026ad8:	89 f0                	mov    eax,esi
c0026ada:	0f b6 c0             	movzx  eax,al
c0026add:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026ae0:	29 c1                	sub    ecx,eax
c0026ae2:	85 c9                	test   ecx,ecx
c0026ae4:	7e 55                	jle    c0026b3b <__addsf3+0x1dd>
c0026ae6:	85 c0                	test   eax,eax
c0026ae8:	75 11                	jne    c0026afb <__addsf3+0x19d>
c0026aea:	85 db                	test   ebx,ebx
c0026aec:	0f 84 65 01 00 00    	je     c0026c57 <__addsf3+0x2f9>
c0026af2:	49                   	dec    ecx
c0026af3:	75 19                	jne    c0026b0e <__addsf3+0x1b0>
c0026af5:	89 d0                	mov    eax,edx
c0026af7:	29 d8                	sub    eax,ebx
c0026af9:	eb 38                	jmp    c0026b33 <__addsf3+0x1d5>
c0026afb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026afe:	f7 d0                	not    eax
c0026b00:	84 c0                	test   al,al
c0026b02:	0f 84 4f 01 00 00    	je     c0026c57 <__addsf3+0x2f9>
c0026b08:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026b0e:	83 f9 1f             	cmp    ecx,0x1f
c0026b11:	0f 8f 40 01 00 00    	jg     c0026c57 <__addsf3+0x2f9>
c0026b17:	89 de                	mov    esi,ebx
c0026b19:	d3 ee                	shr    esi,cl
c0026b1b:	b8 20 00 00 00       	mov    eax,0x20
c0026b20:	29 c8                	sub    eax,ecx
c0026b22:	89 c1                	mov    ecx,eax
c0026b24:	d3 e3                	shl    ebx,cl
c0026b26:	31 c0                	xor    eax,eax
c0026b28:	85 db                	test   ebx,ebx
c0026b2a:	0f 95 c0             	setne  al
c0026b2d:	09 f0                	or     eax,esi
c0026b2f:	29 c2                	sub    edx,eax
c0026b31:	89 d0                	mov    eax,edx
c0026b33:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b36:	e9 af 00 00 00       	jmp    c0026bea <__addsf3+0x28c>
c0026b3b:	74 5c                	je     c0026b99 <__addsf3+0x23b>
c0026b3d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026b40:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b43:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026b47:	75 14                	jne    c0026b5d <__addsf3+0x1ff>
c0026b49:	85 d2                	test   edx,edx
c0026b4b:	0f 84 06 01 00 00    	je     c0026c57 <__addsf3+0x2f9>
c0026b51:	48                   	dec    eax
c0026b52:	75 1b                	jne    c0026b6f <__addsf3+0x211>
c0026b54:	89 d8                	mov    eax,ebx
c0026b56:	29 d0                	sub    eax,edx
c0026b58:	e9 8d 00 00 00       	jmp    c0026bea <__addsf3+0x28c>
c0026b5d:	89 f1                	mov    ecx,esi
c0026b5f:	f7 d1                	not    ecx
c0026b61:	84 c9                	test   cl,cl
c0026b63:	0f 84 ee 00 00 00    	je     c0026c57 <__addsf3+0x2f9>
c0026b69:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b6f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b72:	83 f8 1f             	cmp    eax,0x1f
c0026b75:	0f 8f dc 00 00 00    	jg     c0026c57 <__addsf3+0x2f9>
c0026b7b:	89 d7                	mov    edi,edx
c0026b7d:	88 c1                	mov    cl,al
c0026b7f:	d3 ef                	shr    edi,cl
c0026b81:	b9 20 00 00 00       	mov    ecx,0x20
c0026b86:	29 c1                	sub    ecx,eax
c0026b88:	d3 e2                	shl    edx,cl
c0026b8a:	31 c0                	xor    eax,eax
c0026b8c:	85 d2                	test   edx,edx
c0026b8e:	0f 95 c0             	setne  al
c0026b91:	09 f8                	or     eax,edi
c0026b93:	29 c3                	sub    ebx,eax
c0026b95:	89 d8                	mov    eax,ebx
c0026b97:	eb 51                	jmp    c0026bea <__addsf3+0x28c>
c0026b99:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b9c:	40                   	inc    eax
c0026b9d:	a8 fe                	test   al,0xfe
c0026b9f:	75 3d                	jne    c0026bde <__addsf3+0x280>
c0026ba1:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026ba5:	0f 85 a7 00 00 00    	jne    c0026c52 <__addsf3+0x2f4>
c0026bab:	85 d2                	test   edx,edx
c0026bad:	75 12                	jne    c0026bc1 <__addsf3+0x263>
c0026baf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026bb2:	85 db                	test   ebx,ebx
c0026bb4:	0f 85 9d 00 00 00    	jne    c0026c57 <__addsf3+0x2f9>
c0026bba:	31 ff                	xor    edi,edi
c0026bbc:	e9 96 00 00 00       	jmp    c0026c57 <__addsf3+0x2f9>
c0026bc1:	85 db                	test   ebx,ebx
c0026bc3:	0f 84 8e 00 00 00    	je     c0026c57 <__addsf3+0x2f9>
c0026bc9:	89 d0                	mov    eax,edx
c0026bcb:	29 d8                	sub    eax,ebx
c0026bcd:	79 06                	jns    c0026bd5 <__addsf3+0x277>
c0026bcf:	89 d8                	mov    eax,ebx
c0026bd1:	29 d0                	sub    eax,edx
c0026bd3:	eb 5a                	jmp    c0026c2f <__addsf3+0x2d1>
c0026bd5:	bf 00 00 00 00       	mov    edi,0x0
c0026bda:	74 7b                	je     c0026c57 <__addsf3+0x2f9>
c0026bdc:	eb 4a                	jmp    c0026c28 <__addsf3+0x2ca>
c0026bde:	89 d0                	mov    eax,edx
c0026be0:	29 d8                	sub    eax,ebx
c0026be2:	79 12                	jns    c0026bf6 <__addsf3+0x298>
c0026be4:	89 d8                	mov    eax,ebx
c0026be6:	29 d0                	sub    eax,edx
c0026be8:	eb 09                	jmp    c0026bf3 <__addsf3+0x295>
c0026bea:	85 c0                	test   eax,eax
c0026bec:	79 41                	jns    c0026c2f <__addsf3+0x2d1>
c0026bee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026bf3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026bf6:	31 f6                	xor    esi,esi
c0026bf8:	85 c0                	test   eax,eax
c0026bfa:	74 33                	je     c0026c2f <__addsf3+0x2d1>
c0026bfc:	0f bd c8             	bsr    ecx,eax
c0026bff:	83 f1 1f             	xor    ecx,0x1f
c0026c02:	d3 e0                	shl    eax,cl
c0026c04:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026c08:	39 ca                	cmp    edx,ecx
c0026c0a:	7f 10                	jg     c0026c1c <__addsf3+0x2be>
c0026c0c:	29 d1                	sub    ecx,edx
c0026c0e:	41                   	inc    ecx
c0026c0f:	d3 e8                	shr    eax,cl
c0026c11:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c14:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026c1a:	eb 13                	jmp    c0026c2f <__addsf3+0x2d1>
c0026c1c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c1f:	29 ce                	sub    esi,ecx
c0026c21:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026c26:	eb 07                	jmp    c0026c2f <__addsf3+0x2d1>
c0026c28:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c2b:	eb 02                	jmp    c0026c2f <__addsf3+0x2d1>
c0026c2d:	31 c0                	xor    eax,eax
c0026c2f:	89 c2                	mov    edx,eax
c0026c31:	c1 ea 08             	shr    edx,0x8
c0026c34:	a8 7f                	test   al,0x7f
c0026c36:	0f 95 c1             	setne  cl
c0026c39:	09 d1                	or     ecx,edx
c0026c3b:	83 e1 01             	and    ecx,0x1
c0026c3e:	c1 e8 07             	shr    eax,0x7
c0026c41:	21 c8                	and    eax,ecx
c0026c43:	c1 e6 17             	shl    esi,0x17
c0026c46:	09 d6                	or     esi,edx
c0026c48:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026c4b:	eb 0a                	jmp    c0026c57 <__addsf3+0x2f9>
c0026c4d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c50:	eb 05                	jmp    c0026c57 <__addsf3+0x2f9>
c0026c52:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026c57:	89 f8                	mov    eax,edi
c0026c59:	5a                   	pop    edx
c0026c5a:	59                   	pop    ecx
c0026c5b:	5b                   	pop    ebx
c0026c5c:	5e                   	pop    esi
c0026c5d:	5f                   	pop    edi
c0026c5e:	5d                   	pop    ebp
c0026c5f:	c3                   	ret    

c0026c60 <__subsf3>:
c0026c60:	55                   	push   ebp
c0026c61:	89 e5                	mov    ebp,esp
c0026c63:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c66:	05 00 00 00 80       	add    eax,0x80000000
c0026c6b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026c6e:	5d                   	pop    ebp
c0026c6f:	e9 ea fc ff ff       	jmp    c002695e <__addsf3>

c0026c74 <__negsf2>:
c0026c74:	55                   	push   ebp
c0026c75:	89 e5                	mov    ebp,esp
c0026c77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026c7a:	05 00 00 00 80       	add    eax,0x80000000
c0026c7f:	5d                   	pop    ebp
c0026c80:	c3                   	ret    

c0026c81 <__mulsf3>:
c0026c81:	55                   	push   ebp
c0026c82:	89 e5                	mov    ebp,esp
c0026c84:	57                   	push   edi
c0026c85:	56                   	push   esi
c0026c86:	53                   	push   ebx
c0026c87:	83 ec 1c             	sub    esp,0x1c
c0026c8a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026c8d:	89 f0                	mov    eax,esi
c0026c8f:	89 f1                	mov    ecx,esi
c0026c91:	c1 f9 17             	sar    ecx,0x17
c0026c94:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026c97:	c1 e0 08             	shl    eax,0x8
c0026c9a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026c9f:	89 c1                	mov    ecx,eax
c0026ca1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ca4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026ca7:	89 c7                	mov    edi,eax
c0026ca9:	c1 ff 17             	sar    edi,0x17
c0026cac:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026cb0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026cb3:	89 f8                	mov    eax,edi
c0026cb5:	0f b6 c0             	movzx  eax,al
c0026cb8:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026cbb:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026cbf:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026cc2:	42                   	inc    edx
c0026cc3:	80 e2 fe             	and    dl,0xfe
c0026cc6:	75 7b                	jne    c0026d43 <__mulsf3+0xc2>
c0026cc8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026ccc:	74 54                	je     c0026d22 <__mulsf3+0xa1>
c0026cce:	85 c9                	test   ecx,ecx
c0026cd0:	0f 85 64 01 00 00    	jne    c0026e3a <__mulsf3+0x1b9>
c0026cd6:	8d 57 01             	lea    edx,[edi+0x1]
c0026cd9:	80 e2 fe             	and    dl,0xfe
c0026cdc:	75 1f                	jne    c0026cfd <__mulsf3+0x7c>
c0026cde:	85 c0                	test   eax,eax
c0026ce0:	b8 00 00 00 00       	mov    eax,0x0
c0026ce5:	74 29                	je     c0026d10 <__mulsf3+0x8f>
c0026ce7:	53                   	push   ebx
c0026ce8:	53                   	push   ebx
c0026ce9:	50                   	push   eax
c0026cea:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ced:	e8 96 05 00 00       	call   c0027288 <__nesf2>
c0026cf2:	83 c4 10             	add    esp,0x10
c0026cf5:	85 c0                	test   eax,eax
c0026cf7:	0f 85 3a 01 00 00    	jne    c0026e37 <__mulsf3+0x1b6>
c0026cfd:	85 ff                	test   edi,edi
c0026cff:	0f 89 35 01 00 00    	jns    c0026e3a <__mulsf3+0x1b9>
c0026d05:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026d0b:	e9 2a 01 00 00       	jmp    c0026e3a <__mulsf3+0x1b9>
c0026d10:	51                   	push   ecx
c0026d11:	51                   	push   ecx
c0026d12:	50                   	push   eax
c0026d13:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d16:	e8 6d 05 00 00       	call   c0027288 <__nesf2>
c0026d1b:	83 c4 10             	add    esp,0x10
c0026d1e:	85 c0                	test   eax,eax
c0026d20:	eb 15                	jmp    c0026d37 <__mulsf3+0xb6>
c0026d22:	85 c9                	test   ecx,ecx
c0026d24:	74 0b                	je     c0026d31 <__mulsf3+0xb0>
c0026d26:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026d29:	01 c9                	add    ecx,ecx
c0026d2b:	78 16                	js     c0026d43 <__mulsf3+0xc2>
c0026d2d:	89 d3                	mov    ebx,edx
c0026d2f:	eb f5                	jmp    c0026d26 <__mulsf3+0xa5>
c0026d31:	89 f8                	mov    eax,edi
c0026d33:	f7 d0                	not    eax
c0026d35:	84 c0                	test   al,al
c0026d37:	75 c4                	jne    c0026cfd <__mulsf3+0x7c>
c0026d39:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026d3e:	e9 f7 00 00 00       	jmp    c0026e3a <__mulsf3+0x1b9>
c0026d43:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026d46:	c1 e6 08             	shl    esi,0x8
c0026d49:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026d4f:	8d 57 01             	lea    edx,[edi+0x1]
c0026d52:	80 e2 fe             	and    dl,0xfe
c0026d55:	75 63                	jne    c0026dba <__mulsf3+0x139>
c0026d57:	85 c0                	test   eax,eax
c0026d59:	74 2f                	je     c0026d8a <__mulsf3+0x109>
c0026d5b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026d5f:	0f 89 d2 00 00 00    	jns    c0026e37 <__mulsf3+0x1b6>
c0026d65:	52                   	push   edx
c0026d66:	52                   	push   edx
c0026d67:	6a 00                	push   0x0
c0026d69:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d6c:	e8 dc 04 00 00       	call   c002724d <__eqsf2>
c0026d71:	83 c4 10             	add    esp,0x10
c0026d74:	85 c0                	test   eax,eax
c0026d76:	0f 85 bb 00 00 00    	jne    c0026e37 <__mulsf3+0x1b6>
c0026d7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d7f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026d85:	e9 b0 00 00 00       	jmp    c0026e3a <__mulsf3+0x1b9>
c0026d8a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026d8d:	50                   	push   eax
c0026d8e:	50                   	push   eax
c0026d8f:	6a 00                	push   0x0
c0026d91:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d94:	e8 b4 04 00 00       	call   c002724d <__eqsf2>
c0026d99:	83 c4 10             	add    esp,0x10
c0026d9c:	85 c0                	test   eax,eax
c0026d9e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026da1:	75 0c                	jne    c0026daf <__mulsf3+0x12e>
c0026da3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026da7:	0f 89 8a 00 00 00    	jns    c0026e37 <__mulsf3+0x1b6>
c0026dad:	eb cd                	jmp    c0026d7c <__mulsf3+0xfb>
c0026daf:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026db2:	01 f6                	add    esi,esi
c0026db4:	78 04                	js     c0026dba <__mulsf3+0x139>
c0026db6:	89 c3                	mov    ebx,eax
c0026db8:	eb f5                	jmp    c0026daf <__mulsf3+0x12e>
c0026dba:	89 c8                	mov    eax,ecx
c0026dbc:	0d 00 00 00 80       	or     eax,0x80000000
c0026dc1:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026dc7:	f7 e6                	mul    esi
c0026dc9:	85 c0                	test   eax,eax
c0026dcb:	0f 95 c0             	setne  al
c0026dce:	0f b6 c0             	movzx  eax,al
c0026dd1:	09 c2                	or     edx,eax
c0026dd3:	78 03                	js     c0026dd8 <__mulsf3+0x157>
c0026dd5:	01 d2                	add    edx,edx
c0026dd7:	4b                   	dec    ebx
c0026dd8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026dde:	7f 22                	jg     c0026e02 <__mulsf3+0x181>
c0026de0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026de6:	85 db                	test   ebx,ebx
c0026de8:	7f 23                	jg     c0026e0d <__mulsf3+0x18c>
c0026dea:	83 fb e9             	cmp    ebx,0xffffffe9
c0026ded:	7c 1a                	jl     c0026e09 <__mulsf3+0x188>
c0026def:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026df5:	b9 01 00 00 00       	mov    ecx,0x1
c0026dfa:	29 d9                	sub    ecx,ebx
c0026dfc:	d3 ea                	shr    edx,cl
c0026dfe:	31 db                	xor    ebx,ebx
c0026e00:	eb 0b                	jmp    c0026e0d <__mulsf3+0x18c>
c0026e02:	bb ff 00 00 00       	mov    ebx,0xff
c0026e07:	eb 02                	jmp    c0026e0b <__mulsf3+0x18a>
c0026e09:	31 db                	xor    ebx,ebx
c0026e0b:	31 d2                	xor    edx,edx
c0026e0d:	89 d0                	mov    eax,edx
c0026e0f:	c1 e8 08             	shr    eax,0x8
c0026e12:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026e15:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026e1b:	09 fb                	or     ebx,edi
c0026e1d:	c1 e3 17             	shl    ebx,0x17
c0026e20:	09 c3                	or     ebx,eax
c0026e22:	f6 c2 7f             	test   dl,0x7f
c0026e25:	0f 95 c1             	setne  cl
c0026e28:	09 c8                	or     eax,ecx
c0026e2a:	83 e0 01             	and    eax,0x1
c0026e2d:	c1 ea 07             	shr    edx,0x7
c0026e30:	21 c2                	and    edx,eax
c0026e32:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026e35:	eb 03                	jmp    c0026e3a <__mulsf3+0x1b9>
c0026e37:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026e3a:	89 f0                	mov    eax,esi
c0026e3c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026e3f:	5b                   	pop    ebx
c0026e40:	5e                   	pop    esi
c0026e41:	5f                   	pop    edi
c0026e42:	5d                   	pop    ebp
c0026e43:	c3                   	ret    

c0026e44 <__divsf3>:
c0026e44:	55                   	push   ebp
c0026e45:	89 e5                	mov    ebp,esp
c0026e47:	57                   	push   edi
c0026e48:	56                   	push   esi
c0026e49:	53                   	push   ebx
c0026e4a:	83 ec 1c             	sub    esp,0x1c
c0026e4d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026e50:	89 d8                	mov    eax,ebx
c0026e52:	89 d9                	mov    ecx,ebx
c0026e54:	c1 f9 17             	sar    ecx,0x17
c0026e57:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026e5a:	c1 e0 08             	shl    eax,0x8
c0026e5d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026e62:	89 c1                	mov    ecx,eax
c0026e64:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e67:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026e6a:	89 c7                	mov    edi,eax
c0026e6c:	c1 ff 17             	sar    edi,0x17
c0026e6f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026e73:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026e76:	89 f8                	mov    eax,edi
c0026e78:	0f b6 c0             	movzx  eax,al
c0026e7b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026e7e:	29 c6                	sub    esi,eax
c0026e80:	83 c6 7f             	add    esi,0x7f
c0026e83:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026e86:	42                   	inc    edx
c0026e87:	80 e2 fe             	and    dl,0xfe
c0026e8a:	0f 85 9c 00 00 00    	jne    c0026f2c <__divsf3+0xe8>
c0026e90:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026e94:	74 33                	je     c0026ec9 <__divsf3+0x85>
c0026e96:	85 c9                	test   ecx,ecx
c0026e98:	0f 85 c7 01 00 00    	jne    c0027065 <__divsf3+0x221>
c0026e9e:	8d 57 01             	lea    edx,[edi+0x1]
c0026ea1:	80 e2 fe             	and    dl,0xfe
c0026ea4:	75 2f                	jne    c0026ed5 <__divsf3+0x91>
c0026ea6:	85 c0                	test   eax,eax
c0026ea8:	74 2b                	je     c0026ed5 <__divsf3+0x91>
c0026eaa:	51                   	push   ecx
c0026eab:	51                   	push   ecx
c0026eac:	6a 00                	push   0x0
c0026eae:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026eb1:	e8 d2 03 00 00       	call   c0027288 <__nesf2>
c0026eb6:	83 c4 10             	add    esp,0x10
c0026eb9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026ebc:	85 c0                	test   eax,eax
c0026ebe:	0f 85 a1 01 00 00    	jne    c0027065 <__divsf3+0x221>
c0026ec4:	e9 92 01 00 00       	jmp    c002705b <__divsf3+0x217>
c0026ec9:	85 c9                	test   ecx,ecx
c0026ecb:	75 1b                	jne    c0026ee8 <__divsf3+0xa4>
c0026ecd:	8d 57 01             	lea    edx,[edi+0x1]
c0026ed0:	80 e2 fe             	and    dl,0xfe
c0026ed3:	74 1e                	je     c0026ef3 <__divsf3+0xaf>
c0026ed5:	85 ff                	test   edi,edi
c0026ed7:	0f 89 88 01 00 00    	jns    c0027065 <__divsf3+0x221>
c0026edd:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026ee3:	e9 7d 01 00 00       	jmp    c0027065 <__divsf3+0x221>
c0026ee8:	8d 56 ff             	lea    edx,[esi-0x1]
c0026eeb:	01 c9                	add    ecx,ecx
c0026eed:	78 3d                	js     c0026f2c <__divsf3+0xe8>
c0026eef:	89 d6                	mov    esi,edx
c0026ef1:	eb f5                	jmp    c0026ee8 <__divsf3+0xa4>
c0026ef3:	85 c0                	test   eax,eax
c0026ef5:	b8 00 00 00 00       	mov    eax,0x0
c0026efa:	74 18                	je     c0026f14 <__divsf3+0xd0>
c0026efc:	52                   	push   edx
c0026efd:	52                   	push   edx
c0026efe:	50                   	push   eax
c0026eff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f02:	e8 81 03 00 00       	call   c0027288 <__nesf2>
c0026f07:	83 c4 10             	add    esp,0x10
c0026f0a:	85 c0                	test   eax,eax
c0026f0c:	0f 85 50 01 00 00    	jne    c0027062 <__divsf3+0x21e>
c0026f12:	eb c1                	jmp    c0026ed5 <__divsf3+0x91>
c0026f14:	56                   	push   esi
c0026f15:	56                   	push   esi
c0026f16:	50                   	push   eax
c0026f17:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f1a:	e8 69 03 00 00       	call   c0027288 <__nesf2>
c0026f1f:	83 c4 10             	add    esp,0x10
c0026f22:	85 c0                	test   eax,eax
c0026f24:	0f 84 31 01 00 00    	je     c002705b <__divsf3+0x217>
c0026f2a:	eb a9                	jmp    c0026ed5 <__divsf3+0x91>
c0026f2c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026f2f:	c1 e3 08             	shl    ebx,0x8
c0026f32:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026f38:	8d 57 01             	lea    edx,[edi+0x1]
c0026f3b:	80 e2 fe             	and    dl,0xfe
c0026f3e:	75 71                	jne    c0026fb1 <__divsf3+0x16d>
c0026f40:	85 c0                	test   eax,eax
c0026f42:	ba 00 00 00 00       	mov    edx,0x0
c0026f47:	74 2f                	je     c0026f78 <__divsf3+0x134>
c0026f49:	51                   	push   ecx
c0026f4a:	51                   	push   ecx
c0026f4b:	52                   	push   edx
c0026f4c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f4f:	e8 f9 02 00 00       	call   c002724d <__eqsf2>
c0026f54:	83 c4 10             	add    esp,0x10
c0026f57:	85 c0                	test   eax,eax
c0026f59:	0f 85 03 01 00 00    	jne    c0027062 <__divsf3+0x21e>
c0026f5f:	31 d2                	xor    edx,edx
c0026f61:	89 d3                	mov    ebx,edx
c0026f63:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026f66:	31 f8                	xor    eax,edi
c0026f68:	0f 89 f7 00 00 00    	jns    c0027065 <__divsf3+0x221>
c0026f6e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026f73:	e9 ed 00 00 00       	jmp    c0027065 <__divsf3+0x221>
c0026f78:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026f7b:	50                   	push   eax
c0026f7c:	50                   	push   eax
c0026f7d:	52                   	push   edx
c0026f7e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f81:	e8 c7 02 00 00       	call   c002724d <__eqsf2>
c0026f86:	83 c4 10             	add    esp,0x10
c0026f89:	85 c0                	test   eax,eax
c0026f8b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026f8e:	75 16                	jne    c0026fa6 <__divsf3+0x162>
c0026f90:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026f93:	31 fb                	xor    ebx,edi
c0026f95:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026f9b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026fa1:	e9 bf 00 00 00       	jmp    c0027065 <__divsf3+0x221>
c0026fa6:	8d 46 01             	lea    eax,[esi+0x1]
c0026fa9:	01 db                	add    ebx,ebx
c0026fab:	78 04                	js     c0026fb1 <__divsf3+0x16d>
c0026fad:	89 c6                	mov    esi,eax
c0026faf:	eb f5                	jmp    c0026fa6 <__divsf3+0x162>
c0026fb1:	89 c8                	mov    eax,ecx
c0026fb3:	0d 00 00 00 80       	or     eax,0x80000000
c0026fb8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026fbe:	31 d2                	xor    edx,edx
c0026fc0:	39 d8                	cmp    eax,ebx
c0026fc2:	72 07                	jb     c0026fcb <__divsf3+0x187>
c0026fc4:	29 d8                	sub    eax,ebx
c0026fc6:	ba 01 00 00 00       	mov    edx,0x1
c0026fcb:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026fd2:	01 d2                	add    edx,edx
c0026fd4:	89 c1                	mov    ecx,eax
c0026fd6:	01 c0                	add    eax,eax
c0026fd8:	85 c9                	test   ecx,ecx
c0026fda:	78 04                	js     c0026fe0 <__divsf3+0x19c>
c0026fdc:	39 c3                	cmp    ebx,eax
c0026fde:	77 05                	ja     c0026fe5 <__divsf3+0x1a1>
c0026fe0:	29 d8                	sub    eax,ebx
c0026fe2:	83 ca 01             	or     edx,0x1
c0026fe5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026fe8:	75 e8                	jne    c0026fd2 <__divsf3+0x18e>
c0026fea:	85 c0                	test   eax,eax
c0026fec:	0f 95 c0             	setne  al
c0026fef:	0f b6 c0             	movzx  eax,al
c0026ff2:	c1 e2 06             	shl    edx,0x6
c0026ff5:	09 c2                	or     edx,eax
c0026ff7:	78 03                	js     c0026ffc <__divsf3+0x1b8>
c0026ff9:	01 d2                	add    edx,edx
c0026ffb:	4e                   	dec    esi
c0026ffc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027002:	7f 22                	jg     c0027026 <__divsf3+0x1e2>
c0027004:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002700a:	85 f6                	test   esi,esi
c002700c:	7f 23                	jg     c0027031 <__divsf3+0x1ed>
c002700e:	83 fe e9             	cmp    esi,0xffffffe9
c0027011:	7c 1a                	jl     c002702d <__divsf3+0x1e9>
c0027013:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027019:	b9 01 00 00 00       	mov    ecx,0x1
c002701e:	29 f1                	sub    ecx,esi
c0027020:	d3 ea                	shr    edx,cl
c0027022:	31 f6                	xor    esi,esi
c0027024:	eb 0b                	jmp    c0027031 <__divsf3+0x1ed>
c0027026:	be ff 00 00 00       	mov    esi,0xff
c002702b:	eb 02                	jmp    c002702f <__divsf3+0x1eb>
c002702d:	31 f6                	xor    esi,esi
c002702f:	31 d2                	xor    edx,edx
c0027031:	89 d0                	mov    eax,edx
c0027033:	c1 e8 08             	shr    eax,0x8
c0027036:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027039:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002703f:	09 fe                	or     esi,edi
c0027041:	c1 e6 17             	shl    esi,0x17
c0027044:	09 c6                	or     esi,eax
c0027046:	f6 c2 7f             	test   dl,0x7f
c0027049:	0f 95 c1             	setne  cl
c002704c:	09 c8                	or     eax,ecx
c002704e:	83 e0 01             	and    eax,0x1
c0027051:	c1 ea 07             	shr    edx,0x7
c0027054:	21 c2                	and    edx,eax
c0027056:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027059:	eb 0a                	jmp    c0027065 <__divsf3+0x221>
c002705b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027060:	eb 03                	jmp    c0027065 <__divsf3+0x221>
c0027062:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027065:	89 d8                	mov    eax,ebx
c0027067:	8d 65 f4             	lea    esp,[ebp-0xc]
c002706a:	5b                   	pop    ebx
c002706b:	5e                   	pop    esi
c002706c:	5f                   	pop    edi
c002706d:	5d                   	pop    ebp
c002706e:	c3                   	ret    

c002706f <__floatsisf>:
c002706f:	55                   	push   ebp
c0027070:	89 e5                	mov    ebp,esp
c0027072:	53                   	push   ebx
c0027073:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027076:	85 d2                	test   edx,edx
c0027078:	7e 2b                	jle    c00270a5 <__floatsisf+0x36>
c002707a:	0f bd ca             	bsr    ecx,edx
c002707d:	83 f1 1f             	xor    ecx,0x1f
c0027080:	d3 e2                	shl    edx,cl
c0027082:	89 d0                	mov    eax,edx
c0027084:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027089:	89 c3                	mov    ebx,eax
c002708b:	c1 eb 08             	shr    ebx,0x8
c002708e:	80 e2 7f             	and    dl,0x7f
c0027091:	0f 95 c2             	setne  dl
c0027094:	09 da                	or     edx,ebx
c0027096:	83 e2 01             	and    edx,0x1
c0027099:	c1 e8 07             	shr    eax,0x7
c002709c:	21 c2                	and    edx,eax
c002709e:	b8 9e 00 00 00       	mov    eax,0x9e
c00270a3:	eb 32                	jmp    c00270d7 <__floatsisf+0x68>
c00270a5:	b8 00 00 00 00       	mov    eax,0x0
c00270aa:	74 34                	je     c00270e0 <__floatsisf+0x71>
c00270ac:	f7 da                	neg    edx
c00270ae:	0f bd ca             	bsr    ecx,edx
c00270b1:	83 f1 1f             	xor    ecx,0x1f
c00270b4:	d3 e2                	shl    edx,cl
c00270b6:	89 d0                	mov    eax,edx
c00270b8:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00270bd:	89 c3                	mov    ebx,eax
c00270bf:	c1 eb 08             	shr    ebx,0x8
c00270c2:	80 e2 7f             	and    dl,0x7f
c00270c5:	0f 95 c2             	setne  dl
c00270c8:	09 da                	or     edx,ebx
c00270ca:	83 e2 01             	and    edx,0x1
c00270cd:	c1 e8 07             	shr    eax,0x7
c00270d0:	21 c2                	and    edx,eax
c00270d2:	b8 9e 01 00 00       	mov    eax,0x19e
c00270d7:	29 c8                	sub    eax,ecx
c00270d9:	c1 e0 17             	shl    eax,0x17
c00270dc:	09 d8                	or     eax,ebx
c00270de:	01 d0                	add    eax,edx
c00270e0:	5b                   	pop    ebx
c00270e1:	5d                   	pop    ebp
c00270e2:	c3                   	ret    

c00270e3 <__floatunsisf>:
c00270e3:	55                   	push   ebp
c00270e4:	89 e5                	mov    ebp,esp
c00270e6:	53                   	push   ebx
c00270e7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00270ea:	31 c0                	xor    eax,eax
c00270ec:	85 d2                	test   edx,edx
c00270ee:	74 32                	je     c0027122 <__floatunsisf+0x3f>
c00270f0:	0f bd ca             	bsr    ecx,edx
c00270f3:	83 f1 1f             	xor    ecx,0x1f
c00270f6:	d3 e2                	shl    edx,cl
c00270f8:	89 d0                	mov    eax,edx
c00270fa:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00270ff:	89 c3                	mov    ebx,eax
c0027101:	c1 eb 08             	shr    ebx,0x8
c0027104:	80 e2 7f             	and    dl,0x7f
c0027107:	0f 95 c2             	setne  dl
c002710a:	09 da                	or     edx,ebx
c002710c:	83 e2 01             	and    edx,0x1
c002710f:	c1 e8 07             	shr    eax,0x7
c0027112:	21 c2                	and    edx,eax
c0027114:	b8 9e 00 00 00       	mov    eax,0x9e
c0027119:	29 c8                	sub    eax,ecx
c002711b:	c1 e0 17             	shl    eax,0x17
c002711e:	09 d8                	or     eax,ebx
c0027120:	01 d0                	add    eax,edx
c0027122:	5b                   	pop    ebx
c0027123:	5d                   	pop    ebp
c0027124:	c3                   	ret    

c0027125 <__fixsfsi>:
c0027125:	55                   	push   ebp
c0027126:	89 e5                	mov    ebp,esp
c0027128:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002712b:	89 d1                	mov    ecx,edx
c002712d:	c1 e1 08             	shl    ecx,0x8
c0027130:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027136:	c1 fa 17             	sar    edx,0x17
c0027139:	78 1c                	js     c0027157 <__fixsfsi+0x32>
c002713b:	83 ea 7f             	sub    edx,0x7f
c002713e:	31 c0                	xor    eax,eax
c0027140:	83 fa 1e             	cmp    edx,0x1e
c0027143:	77 40                	ja     c0027185 <__fixsfsi+0x60>
c0027145:	89 c8                	mov    eax,ecx
c0027147:	0d 00 00 00 80       	or     eax,0x80000000
c002714c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027151:	29 d1                	sub    ecx,edx
c0027153:	d3 e8                	shr    eax,cl
c0027155:	eb 2e                	jmp    c0027185 <__fixsfsi+0x60>
c0027157:	31 c0                	xor    eax,eax
c0027159:	81 c2 81 00 00 00    	add    edx,0x81
c002715f:	78 24                	js     c0027185 <__fixsfsi+0x60>
c0027161:	83 fa 1e             	cmp    edx,0x1e
c0027164:	7e 09                	jle    c002716f <__fixsfsi+0x4a>
c0027166:	83 fa 1f             	cmp    edx,0x1f
c0027169:	75 18                	jne    c0027183 <__fixsfsi+0x5e>
c002716b:	85 c9                	test   ecx,ecx
c002716d:	75 14                	jne    c0027183 <__fixsfsi+0x5e>
c002716f:	89 c8                	mov    eax,ecx
c0027171:	0d 00 00 00 80       	or     eax,0x80000000
c0027176:	b9 1f 00 00 00       	mov    ecx,0x1f
c002717b:	29 d1                	sub    ecx,edx
c002717d:	d3 e8                	shr    eax,cl
c002717f:	f7 d8                	neg    eax
c0027181:	eb 02                	jmp    c0027185 <__fixsfsi+0x60>
c0027183:	31 c0                	xor    eax,eax
c0027185:	5d                   	pop    ebp
c0027186:	c3                   	ret    

c0027187 <__fixunssfsi>:
c0027187:	55                   	push   ebp
c0027188:	89 e5                	mov    ebp,esp
c002718a:	53                   	push   ebx
c002718b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002718e:	89 d3                	mov    ebx,edx
c0027190:	c1 fb 17             	sar    ebx,0x17
c0027193:	83 eb 7f             	sub    ebx,0x7f
c0027196:	31 c0                	xor    eax,eax
c0027198:	83 fb 1f             	cmp    ebx,0x1f
c002719b:	77 18                	ja     c00271b5 <__fixunssfsi+0x2e>
c002719d:	89 d0                	mov    eax,edx
c002719f:	c1 e0 08             	shl    eax,0x8
c00271a2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00271a7:	0d 00 00 00 80       	or     eax,0x80000000
c00271ac:	b9 1f 00 00 00       	mov    ecx,0x1f
c00271b1:	29 d9                	sub    ecx,ebx
c00271b3:	d3 e8                	shr    eax,cl
c00271b5:	5b                   	pop    ebx
c00271b6:	5d                   	pop    ebp
c00271b7:	c3                   	ret    

c00271b8 <__cmpsf2>:
c00271b8:	55                   	push   ebp
c00271b9:	89 e5                	mov    ebp,esp
c00271bb:	57                   	push   edi
c00271bc:	56                   	push   esi
c00271bd:	53                   	push   ebx
c00271be:	83 ec 24             	sub    esp,0x24
c00271c1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00271c7:	e8 4f 10 00 00       	call   c002821b <__truncdfsf2>
c00271cc:	5a                   	pop    edx
c00271cd:	59                   	pop    ecx
c00271ce:	89 c3                	mov    ebx,eax
c00271d0:	c1 e8 17             	shr    eax,0x17
c00271d3:	0f b6 f0             	movzx  esi,al
c00271d6:	89 d8                	mov    eax,ebx
c00271d8:	c1 e8 1f             	shr    eax,0x1f
c00271db:	31 c6                	xor    esi,eax
c00271dd:	c1 e3 08             	shl    ebx,0x8
c00271e0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00271e3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00271e6:	e8 30 10 00 00       	call   c002821b <__truncdfsf2>
c00271eb:	83 c4 10             	add    esp,0x10
c00271ee:	89 c1                	mov    ecx,eax
c00271f0:	c1 e9 17             	shr    ecx,0x17
c00271f3:	0f b6 c9             	movzx  ecx,cl
c00271f6:	89 c7                	mov    edi,eax
c00271f8:	c1 ef 1f             	shr    edi,0x1f
c00271fb:	89 ca                	mov    edx,ecx
c00271fd:	31 fa                	xor    edx,edi
c00271ff:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027202:	c1 e0 08             	shl    eax,0x8
c0027205:	89 c2                	mov    edx,eax
c0027207:	89 d8                	mov    eax,ebx
c0027209:	09 d0                	or     eax,edx
c002720b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027210:	09 f0                	or     eax,esi
c0027212:	75 08                	jne    c002721c <__cmpsf2+0x64>
c0027214:	31 c0                	xor    eax,eax
c0027216:	39 f9                	cmp    ecx,edi
c0027218:	75 0c                	jne    c0027226 <__cmpsf2+0x6e>
c002721a:	eb 29                	jmp    c0027245 <__cmpsf2+0x8d>
c002721c:	b8 01 00 00 00       	mov    eax,0x1
c0027221:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027224:	7f 1f                	jg     c0027245 <__cmpsf2+0x8d>
c0027226:	83 c8 ff             	or     eax,0xffffffff
c0027229:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002722c:	7c 17                	jl     c0027245 <__cmpsf2+0x8d>
c002722e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027234:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002723a:	b8 01 00 00 00       	mov    eax,0x1
c002723f:	39 d3                	cmp    ebx,edx
c0027241:	77 02                	ja     c0027245 <__cmpsf2+0x8d>
c0027243:	19 c0                	sbb    eax,eax
c0027245:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027248:	5b                   	pop    ebx
c0027249:	5e                   	pop    esi
c002724a:	5f                   	pop    edi
c002724b:	5d                   	pop    ebp
c002724c:	c3                   	ret    

c002724d <__eqsf2>:
c002724d:	55                   	push   ebp
c002724e:	89 e5                	mov    ebp,esp
c0027250:	83 ec 24             	sub    esp,0x24
c0027253:	6a 01                	push   0x1
c0027255:	83 ec 0c             	sub    esp,0xc
c0027258:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002725b:	e8 df 10 00 00       	call   c002833f <__extendsfdf2>
c0027260:	83 c4 10             	add    esp,0x10
c0027263:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027266:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027269:	52                   	push   edx
c002726a:	50                   	push   eax
c002726b:	50                   	push   eax
c002726c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002726f:	e8 cb 10 00 00       	call   c002833f <__extendsfdf2>
c0027274:	59                   	pop    ecx
c0027275:	59                   	pop    ecx
c0027276:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027279:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002727c:	52                   	push   edx
c002727d:	50                   	push   eax
c002727e:	e8 35 ff ff ff       	call   c00271b8 <__cmpsf2>
c0027283:	83 c4 20             	add    esp,0x20
c0027286:	c9                   	leave  
c0027287:	c3                   	ret    

c0027288 <__nesf2>:
c0027288:	eb c3                	jmp    c002724d <__eqsf2>

c002728a <__gtsf2>:
c002728a:	55                   	push   ebp
c002728b:	89 e5                	mov    ebp,esp
c002728d:	83 ec 24             	sub    esp,0x24
c0027290:	6a ff                	push   0xffffffff
c0027292:	83 ec 0c             	sub    esp,0xc
c0027295:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027298:	e8 a2 10 00 00       	call   c002833f <__extendsfdf2>
c002729d:	83 c4 10             	add    esp,0x10
c00272a0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00272a3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00272a6:	52                   	push   edx
c00272a7:	50                   	push   eax
c00272a8:	50                   	push   eax
c00272a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00272ac:	e8 8e 10 00 00       	call   c002833f <__extendsfdf2>
c00272b1:	59                   	pop    ecx
c00272b2:	59                   	pop    ecx
c00272b3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00272b6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00272b9:	52                   	push   edx
c00272ba:	50                   	push   eax
c00272bb:	e8 f8 fe ff ff       	call   c00271b8 <__cmpsf2>
c00272c0:	83 c4 20             	add    esp,0x20
c00272c3:	c9                   	leave  
c00272c4:	c3                   	ret    

c00272c5 <__gesf2>:
c00272c5:	eb c3                	jmp    c002728a <__gtsf2>

c00272c7 <__ltsf2>:
c00272c7:	eb 84                	jmp    c002724d <__eqsf2>

c00272c9 <__lesf2>:
c00272c9:	eb 82                	jmp    c002724d <__eqsf2>

c00272cb <__adddf3>:
c00272cb:	55                   	push   ebp
c00272cc:	89 e5                	mov    ebp,esp
c00272ce:	57                   	push   edi
c00272cf:	56                   	push   esi
c00272d0:	53                   	push   ebx
c00272d1:	83 ec 24             	sub    esp,0x24
c00272d4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00272d7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00272da:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00272dd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00272e0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00272e3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00272e6:	89 c8                	mov    eax,ecx
c00272e8:	89 ce                	mov    esi,ecx
c00272ea:	c1 fe 14             	sar    esi,0x14
c00272ed:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00272f0:	89 fb                	mov    ebx,edi
c00272f2:	89 fa                	mov    edx,edi
c00272f4:	c1 e2 0b             	shl    edx,0xb
c00272f7:	c1 e0 0b             	shl    eax,0xb
c00272fa:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00272ff:	c1 eb 15             	shr    ebx,0x15
c0027302:	09 d8                	or     eax,ebx
c0027304:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027307:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002730a:	c1 fe 14             	sar    esi,0x14
c002730d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027310:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027313:	89 f3                	mov    ebx,esi
c0027315:	c1 e3 0b             	shl    ebx,0xb
c0027318:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002731b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002731e:	c1 e3 0b             	shl    ebx,0xb
c0027321:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027327:	c1 ee 15             	shr    esi,0x15
c002732a:	09 f3                	or     ebx,esi
c002732c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002732f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027332:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027335:	0f 88 5f 02 00 00    	js     c002759a <__adddf3+0x2cf>
c002733b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002733e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027341:	85 db                	test   ebx,ebx
c0027343:	0f 8e c7 00 00 00    	jle    c0027410 <__adddf3+0x145>
c0027349:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027350:	75 1a                	jne    c002736c <__adddf3+0xa1>
c0027352:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027355:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027358:	0f 84 b2 05 00 00    	je     c0027910 <__adddf3+0x645>
c002735e:	4b                   	dec    ebx
c002735f:	75 23                	jne    c0027384 <__adddf3+0xb9>
c0027361:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027364:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027367:	e9 99 00 00 00       	jmp    c0027405 <__adddf3+0x13a>
c002736c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002736f:	f7 d6                	not    esi
c0027371:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027377:	0f 84 93 05 00 00    	je     c0027910 <__adddf3+0x645>
c002737d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027384:	83 fb 1f             	cmp    ebx,0x1f
c0027387:	7e 42                	jle    c00273cb <__adddf3+0x100>
c0027389:	83 fb 3f             	cmp    ebx,0x3f
c002738c:	0f 8f 7e 05 00 00    	jg     c0027910 <__adddf3+0x645>
c0027392:	83 e3 1f             	and    ebx,0x1f
c0027395:	89 d9                	mov    ecx,ebx
c0027397:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002739a:	d3 ef                	shr    edi,cl
c002739c:	31 db                	xor    ebx,ebx
c002739e:	85 c9                	test   ecx,ecx
c00273a0:	74 15                	je     c00273b7 <__adddf3+0xec>
c00273a2:	be 20 00 00 00       	mov    esi,0x20
c00273a7:	29 ce                	sub    esi,ecx
c00273a9:	89 f1                	mov    ecx,esi
c00273ab:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00273ae:	d3 e6                	shl    esi,cl
c00273b0:	31 db                	xor    ebx,ebx
c00273b2:	85 f6                	test   esi,esi
c00273b4:	0f 95 c3             	setne  bl
c00273b7:	31 c9                	xor    ecx,ecx
c00273b9:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00273bd:	0f 95 c1             	setne  cl
c00273c0:	09 cf                	or     edi,ecx
c00273c2:	09 fb                	or     ebx,edi
c00273c4:	01 da                	add    edx,ebx
c00273c6:	83 d0 00             	adc    eax,0x0
c00273c9:	eb 3a                	jmp    c0027405 <__adddf3+0x13a>
c00273cb:	bf 20 00 00 00       	mov    edi,0x20
c00273d0:	29 df                	sub    edi,ebx
c00273d2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00273d5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00273d8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00273db:	d3 e6                	shl    esi,cl
c00273dd:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00273e0:	88 d9                	mov    cl,bl
c00273e2:	d3 ef                	shr    edi,cl
c00273e4:	09 fe                	or     esi,edi
c00273e6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00273e9:	88 d9                	mov    cl,bl
c00273eb:	d3 ef                	shr    edi,cl
c00273ed:	89 fb                	mov    ebx,edi
c00273ef:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00273f2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00273f5:	d3 e7                	shl    edi,cl
c00273f7:	85 ff                	test   edi,edi
c00273f9:	0f 95 c1             	setne  cl
c00273fc:	0f b6 c9             	movzx  ecx,cl
c00273ff:	09 ce                	or     esi,ecx
c0027401:	01 f2                	add    edx,esi
c0027403:	11 d8                	adc    eax,ebx
c0027405:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027408:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002740b:	e9 52 01 00 00       	jmp    c0027562 <__adddf3+0x297>
c0027410:	0f 84 d5 00 00 00    	je     c00274eb <__adddf3+0x220>
c0027416:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027419:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002741c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002741f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027422:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027429:	75 20                	jne    c002744b <__adddf3+0x180>
c002742b:	89 d6                	mov    esi,edx
c002742d:	09 c6                	or     esi,eax
c002742f:	0f 84 db 04 00 00    	je     c0027910 <__adddf3+0x645>
c0027435:	4b                   	dec    ebx
c0027436:	75 29                	jne    c0027461 <__adddf3+0x196>
c0027438:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002743b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002743e:	01 d1                	add    ecx,edx
c0027440:	11 c6                	adc    esi,eax
c0027442:	89 f0                	mov    eax,esi
c0027444:	89 ca                	mov    edx,ecx
c0027446:	e9 17 01 00 00       	jmp    c0027562 <__adddf3+0x297>
c002744b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002744e:	f7 d6                	not    esi
c0027450:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027456:	0f 84 b4 04 00 00    	je     c0027910 <__adddf3+0x645>
c002745c:	0d 00 00 00 80       	or     eax,0x80000000
c0027461:	83 fb 1f             	cmp    ebx,0x1f
c0027464:	7e 48                	jle    c00274ae <__adddf3+0x1e3>
c0027466:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027469:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002746c:	83 fb 3f             	cmp    ebx,0x3f
c002746f:	0f 8f 9b 04 00 00    	jg     c0027910 <__adddf3+0x645>
c0027475:	83 e3 1f             	and    ebx,0x1f
c0027478:	89 d9                	mov    ecx,ebx
c002747a:	89 c7                	mov    edi,eax
c002747c:	d3 ef                	shr    edi,cl
c002747e:	31 db                	xor    ebx,ebx
c0027480:	85 c9                	test   ecx,ecx
c0027482:	74 12                	je     c0027496 <__adddf3+0x1cb>
c0027484:	be 20 00 00 00       	mov    esi,0x20
c0027489:	29 ce                	sub    esi,ecx
c002748b:	89 f1                	mov    ecx,esi
c002748d:	d3 e0                	shl    eax,cl
c002748f:	31 db                	xor    ebx,ebx
c0027491:	85 c0                	test   eax,eax
c0027493:	0f 95 c3             	setne  bl
c0027496:	31 c0                	xor    eax,eax
c0027498:	85 d2                	test   edx,edx
c002749a:	0f 95 c0             	setne  al
c002749d:	09 c7                	or     edi,eax
c002749f:	09 fb                	or     ebx,edi
c00274a1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274a4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00274a7:	01 da                	add    edx,ebx
c00274a9:	83 d6 00             	adc    esi,0x0
c00274ac:	eb 39                	jmp    c00274e7 <__adddf3+0x21c>
c00274ae:	be 20 00 00 00       	mov    esi,0x20
c00274b3:	29 de                	sub    esi,ebx
c00274b5:	89 c7                	mov    edi,eax
c00274b7:	89 f1                	mov    ecx,esi
c00274b9:	d3 e7                	shl    edi,cl
c00274bb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00274be:	89 d7                	mov    edi,edx
c00274c0:	88 d9                	mov    cl,bl
c00274c2:	d3 ef                	shr    edi,cl
c00274c4:	89 f9                	mov    ecx,edi
c00274c6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00274c9:	09 cf                	or     edi,ecx
c00274cb:	88 d9                	mov    cl,bl
c00274cd:	d3 e8                	shr    eax,cl
c00274cf:	89 f1                	mov    ecx,esi
c00274d1:	d3 e2                	shl    edx,cl
c00274d3:	85 d2                	test   edx,edx
c00274d5:	0f 95 c2             	setne  dl
c00274d8:	0f b6 d2             	movzx  edx,dl
c00274db:	09 d7                	or     edi,edx
c00274dd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274e0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00274e3:	01 fa                	add    edx,edi
c00274e5:	11 c6                	adc    esi,eax
c00274e7:	89 f0                	mov    eax,esi
c00274e9:	eb 77                	jmp    c0027562 <__adddf3+0x297>
c00274eb:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00274ee:	46                   	inc    esi
c00274ef:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00274f2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00274f8:	75 41                	jne    c002753b <__adddf3+0x270>
c00274fa:	89 d3                	mov    ebx,edx
c00274fc:	09 c3                	or     ebx,eax
c00274fe:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027505:	75 27                	jne    c002752e <__adddf3+0x263>
c0027507:	85 db                	test   ebx,ebx
c0027509:	0f 84 fb 03 00 00    	je     c002790a <__adddf3+0x63f>
c002750f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027512:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027515:	0f 84 f5 03 00 00    	je     c0027910 <__adddf3+0x645>
c002751b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002751e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027521:	85 c0                	test   eax,eax
c0027523:	0f 89 91 03 00 00    	jns    c00278ba <__adddf3+0x5ef>
c0027529:	e9 85 03 00 00       	jmp    c00278b3 <__adddf3+0x5e8>
c002752e:	85 db                	test   ebx,ebx
c0027530:	0f 85 da 03 00 00    	jne    c0027910 <__adddf3+0x645>
c0027536:	e9 cf 03 00 00       	jmp    c002790a <__adddf3+0x63f>
c002753b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002753e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027541:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027544:	f7 d1                	not    ecx
c0027546:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002754c:	0f 84 70 03 00 00    	je     c00278c2 <__adddf3+0x5f7>
c0027552:	d1 ea                	shr    edx,1
c0027554:	89 c1                	mov    ecx,eax
c0027556:	c1 e1 1f             	shl    ecx,0x1f
c0027559:	09 ca                	or     edx,ecx
c002755b:	d1 e8                	shr    eax,1
c002755d:	e9 6f 03 00 00       	jmp    c00278d1 <__adddf3+0x606>
c0027562:	85 c0                	test   eax,eax
c0027564:	0f 89 67 03 00 00    	jns    c00278d1 <__adddf3+0x606>
c002756a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002756d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027570:	f7 d1                	not    ecx
c0027572:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027578:	0f 84 44 03 00 00    	je     c00278c2 <__adddf3+0x5f7>
c002757e:	89 d1                	mov    ecx,edx
c0027580:	d1 e9                	shr    ecx,1
c0027582:	83 e2 01             	and    edx,0x1
c0027585:	09 ca                	or     edx,ecx
c0027587:	89 c1                	mov    ecx,eax
c0027589:	c1 e1 1f             	shl    ecx,0x1f
c002758c:	09 ca                	or     edx,ecx
c002758e:	d1 e8                	shr    eax,1
c0027590:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027595:	e9 37 03 00 00       	jmp    c00278d1 <__adddf3+0x606>
c002759a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002759d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00275a3:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00275a6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00275a9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00275af:	29 de                	sub    esi,ebx
c00275b1:	85 f6                	test   esi,esi
c00275b3:	0f 8e bd 00 00 00    	jle    c0027676 <__adddf3+0x3ab>
c00275b9:	85 db                	test   ebx,ebx
c00275bb:	75 17                	jne    c00275d4 <__adddf3+0x309>
c00275bd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00275c0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00275c3:	0f 84 47 03 00 00    	je     c0027910 <__adddf3+0x645>
c00275c9:	4e                   	dec    esi
c00275ca:	75 20                	jne    c00275ec <__adddf3+0x321>
c00275cc:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00275cf:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00275d2:	eb 5b                	jmp    c002762f <__adddf3+0x364>
c00275d4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00275d7:	f7 d3                	not    ebx
c00275d9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00275df:	0f 84 2b 03 00 00    	je     c0027910 <__adddf3+0x645>
c00275e5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00275ec:	83 fe 1f             	cmp    esi,0x1f
c00275ef:	7e 49                	jle    c002763a <__adddf3+0x36f>
c00275f1:	83 fe 3f             	cmp    esi,0x3f
c00275f4:	0f 8f 16 03 00 00    	jg     c0027910 <__adddf3+0x645>
c00275fa:	83 e6 1f             	and    esi,0x1f
c00275fd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027600:	89 f1                	mov    ecx,esi
c0027602:	d3 ef                	shr    edi,cl
c0027604:	31 db                	xor    ebx,ebx
c0027606:	85 f6                	test   esi,esi
c0027608:	74 13                	je     c002761d <__adddf3+0x352>
c002760a:	b9 20 00 00 00       	mov    ecx,0x20
c002760f:	29 f1                	sub    ecx,esi
c0027611:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027614:	d3 e6                	shl    esi,cl
c0027616:	31 db                	xor    ebx,ebx
c0027618:	85 f6                	test   esi,esi
c002761a:	0f 95 c3             	setne  bl
c002761d:	31 c9                	xor    ecx,ecx
c002761f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027623:	0f 95 c1             	setne  cl
c0027626:	09 cf                	or     edi,ecx
c0027628:	09 fb                	or     ebx,edi
c002762a:	29 da                	sub    edx,ebx
c002762c:	83 d8 00             	sbb    eax,0x0
c002762f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027632:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027635:	e9 aa 01 00 00       	jmp    c00277e4 <__adddf3+0x519>
c002763a:	bf 20 00 00 00       	mov    edi,0x20
c002763f:	29 f7                	sub    edi,esi
c0027641:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027644:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027647:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002764a:	d3 e3                	shl    ebx,cl
c002764c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002764f:	89 f1                	mov    ecx,esi
c0027651:	d3 ef                	shr    edi,cl
c0027653:	09 fb                	or     ebx,edi
c0027655:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027658:	89 f1                	mov    ecx,esi
c002765a:	d3 ef                	shr    edi,cl
c002765c:	89 fe                	mov    esi,edi
c002765e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027661:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027664:	d3 e7                	shl    edi,cl
c0027666:	85 ff                	test   edi,edi
c0027668:	0f 95 c1             	setne  cl
c002766b:	0f b6 c9             	movzx  ecx,cl
c002766e:	09 cb                	or     ebx,ecx
c0027670:	29 da                	sub    edx,ebx
c0027672:	19 f0                	sbb    eax,esi
c0027674:	eb b9                	jmp    c002762f <__adddf3+0x364>
c0027676:	0f 84 cd 00 00 00    	je     c0027749 <__adddf3+0x47e>
c002767c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002767f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027682:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027685:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027689:	75 1b                	jne    c00276a6 <__adddf3+0x3db>
c002768b:	89 d6                	mov    esi,edx
c002768d:	09 c6                	or     esi,eax
c002768f:	0f 84 7b 02 00 00    	je     c0027910 <__adddf3+0x645>
c0027695:	4b                   	dec    ebx
c0027696:	75 24                	jne    c00276bc <__adddf3+0x3f1>
c0027698:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002769b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002769e:	29 d1                	sub    ecx,edx
c00276a0:	19 c6                	sbb    esi,eax
c00276a2:	89 ca                	mov    edx,ecx
c00276a4:	eb 61                	jmp    c0027707 <__adddf3+0x43c>
c00276a6:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00276a9:	f7 d6                	not    esi
c00276ab:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276b1:	0f 84 59 02 00 00    	je     c0027910 <__adddf3+0x645>
c00276b7:	0d 00 00 00 80       	or     eax,0x80000000
c00276bc:	83 fb 1f             	cmp    ebx,0x1f
c00276bf:	7e 4d                	jle    c002770e <__adddf3+0x443>
c00276c1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276c4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276c7:	83 fb 3f             	cmp    ebx,0x3f
c00276ca:	0f 8f 40 02 00 00    	jg     c0027910 <__adddf3+0x645>
c00276d0:	83 e3 1f             	and    ebx,0x1f
c00276d3:	89 d9                	mov    ecx,ebx
c00276d5:	89 c7                	mov    edi,eax
c00276d7:	d3 ef                	shr    edi,cl
c00276d9:	31 db                	xor    ebx,ebx
c00276db:	85 c9                	test   ecx,ecx
c00276dd:	74 12                	je     c00276f1 <__adddf3+0x426>
c00276df:	be 20 00 00 00       	mov    esi,0x20
c00276e4:	29 ce                	sub    esi,ecx
c00276e6:	89 f1                	mov    ecx,esi
c00276e8:	d3 e0                	shl    eax,cl
c00276ea:	31 db                	xor    ebx,ebx
c00276ec:	85 c0                	test   eax,eax
c00276ee:	0f 95 c3             	setne  bl
c00276f1:	31 c0                	xor    eax,eax
c00276f3:	85 d2                	test   edx,edx
c00276f5:	0f 95 c0             	setne  al
c00276f8:	09 c7                	or     edi,eax
c00276fa:	09 fb                	or     ebx,edi
c00276fc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276ff:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027702:	29 da                	sub    edx,ebx
c0027704:	83 de 00             	sbb    esi,0x0
c0027707:	89 f0                	mov    eax,esi
c0027709:	e9 d6 00 00 00       	jmp    c00277e4 <__adddf3+0x519>
c002770e:	be 20 00 00 00       	mov    esi,0x20
c0027713:	29 de                	sub    esi,ebx
c0027715:	89 c7                	mov    edi,eax
c0027717:	89 f1                	mov    ecx,esi
c0027719:	d3 e7                	shl    edi,cl
c002771b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002771e:	89 d7                	mov    edi,edx
c0027720:	88 d9                	mov    cl,bl
c0027722:	d3 ef                	shr    edi,cl
c0027724:	89 f9                	mov    ecx,edi
c0027726:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027729:	09 cf                	or     edi,ecx
c002772b:	88 d9                	mov    cl,bl
c002772d:	d3 e8                	shr    eax,cl
c002772f:	89 f1                	mov    ecx,esi
c0027731:	d3 e2                	shl    edx,cl
c0027733:	85 d2                	test   edx,edx
c0027735:	0f 95 c2             	setne  dl
c0027738:	0f b6 d2             	movzx  edx,dl
c002773b:	09 d7                	or     edi,edx
c002773d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027740:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027743:	29 fa                	sub    edx,edi
c0027745:	19 c6                	sbb    esi,eax
c0027747:	eb be                	jmp    c0027707 <__adddf3+0x43c>
c0027749:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002774c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002774f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027755:	75 6a                	jne    c00277c1 <__adddf3+0x4f6>
c0027757:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002775b:	75 58                	jne    c00277b5 <__adddf3+0x4ea>
c002775d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027760:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027763:	89 d6                	mov    esi,edx
c0027765:	09 c6                	or     esi,eax
c0027767:	75 17                	jne    c0027780 <__adddf3+0x4b5>
c0027769:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002776c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002776f:	85 db                	test   ebx,ebx
c0027771:	0f 85 99 01 00 00    	jne    c0027910 <__adddf3+0x645>
c0027777:	31 ff                	xor    edi,edi
c0027779:	31 c9                	xor    ecx,ecx
c002777b:	e9 90 01 00 00       	jmp    c0027910 <__adddf3+0x645>
c0027780:	85 db                	test   ebx,ebx
c0027782:	0f 84 88 01 00 00    	je     c0027910 <__adddf3+0x645>
c0027788:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002778b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002778e:	85 c0                	test   eax,eax
c0027790:	79 10                	jns    c00277a2 <__adddf3+0x4d7>
c0027792:	31 c9                	xor    ecx,ecx
c0027794:	f7 da                	neg    edx
c0027796:	0f 95 c1             	setne  cl
c0027799:	01 c8                	add    eax,ecx
c002779b:	f7 d8                	neg    eax
c002779d:	e9 2f 01 00 00       	jmp    c00278d1 <__adddf3+0x606>
c00277a2:	31 ff                	xor    edi,edi
c00277a4:	31 c9                	xor    ecx,ecx
c00277a6:	89 c3                	mov    ebx,eax
c00277a8:	09 d3                	or     ebx,edx
c00277aa:	0f 84 60 01 00 00    	je     c0027910 <__adddf3+0x645>
c00277b0:	e9 05 01 00 00       	jmp    c00278ba <__adddf3+0x5ef>
c00277b5:	31 ff                	xor    edi,edi
c00277b7:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00277bc:	e9 4f 01 00 00       	jmp    c0027910 <__adddf3+0x645>
c00277c1:	89 c1                	mov    ecx,eax
c00277c3:	89 d0                	mov    eax,edx
c00277c5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00277c8:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00277cb:	89 ca                	mov    edx,ecx
c00277cd:	85 c9                	test   ecx,ecx
c00277cf:	79 2c                	jns    c00277fd <__adddf3+0x532>
c00277d1:	31 c9                	xor    ecx,ecx
c00277d3:	f7 d8                	neg    eax
c00277d5:	0f 95 c1             	setne  cl
c00277d8:	01 ca                	add    edx,ecx
c00277da:	f7 da                	neg    edx
c00277dc:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00277df:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00277e2:	eb 19                	jmp    c00277fd <__adddf3+0x532>
c00277e4:	85 c0                	test   eax,eax
c00277e6:	0f 89 e5 00 00 00    	jns    c00278d1 <__adddf3+0x606>
c00277ec:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00277f1:	89 c1                	mov    ecx,eax
c00277f3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00277f6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00277f9:	89 d0                	mov    eax,edx
c00277fb:	89 ca                	mov    edx,ecx
c00277fd:	85 d2                	test   edx,edx
c00277ff:	74 59                	je     c002785a <__adddf3+0x58f>
c0027801:	0f bd da             	bsr    ebx,edx
c0027804:	83 f3 1f             	xor    ebx,0x1f
c0027807:	88 d9                	mov    cl,bl
c0027809:	d3 e2                	shl    edx,cl
c002780b:	bf 20 00 00 00       	mov    edi,0x20
c0027810:	89 f9                	mov    ecx,edi
c0027812:	29 d9                	sub    ecx,ebx
c0027814:	89 c6                	mov    esi,eax
c0027816:	d3 ee                	shr    esi,cl
c0027818:	09 d6                	or     esi,edx
c002781a:	88 d9                	mov    cl,bl
c002781c:	d3 e0                	shl    eax,cl
c002781e:	89 c2                	mov    edx,eax
c0027820:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027823:	25 ff 07 00 00       	and    eax,0x7ff
c0027828:	39 d8                	cmp    eax,ebx
c002782a:	7f 22                	jg     c002784e <__adddf3+0x583>
c002782c:	29 c3                	sub    ebx,eax
c002782e:	43                   	inc    ebx
c002782f:	88 d9                	mov    cl,bl
c0027831:	d3 ea                	shr    edx,cl
c0027833:	29 df                	sub    edi,ebx
c0027835:	89 f9                	mov    ecx,edi
c0027837:	89 f0                	mov    eax,esi
c0027839:	d3 e0                	shl    eax,cl
c002783b:	09 c2                	or     edx,eax
c002783d:	89 f0                	mov    eax,esi
c002783f:	88 d9                	mov    cl,bl
c0027841:	d3 e8                	shr    eax,cl
c0027843:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027846:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002784c:	eb 6f                	jmp    c00278bd <__adddf3+0x5f2>
c002784e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027851:	29 d8                	sub    eax,ebx
c0027853:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027856:	89 f0                	mov    eax,esi
c0027858:	eb 59                	jmp    c00278b3 <__adddf3+0x5e8>
c002785a:	85 c0                	test   eax,eax
c002785c:	74 6a                	je     c00278c8 <__adddf3+0x5fd>
c002785e:	0f bd c8             	bsr    ecx,eax
c0027861:	83 f1 1f             	xor    ecx,0x1f
c0027864:	d3 e0                	shl    eax,cl
c0027866:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027869:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002786f:	83 c1 20             	add    ecx,0x20
c0027872:	39 cb                	cmp    ebx,ecx
c0027874:	7f 35                	jg     c00278ab <__adddf3+0x5e0>
c0027876:	29 d9                	sub    ecx,ebx
c0027878:	8d 71 01             	lea    esi,[ecx+0x1]
c002787b:	83 fe 1f             	cmp    esi,0x1f
c002787e:	7e 09                	jle    c0027889 <__adddf3+0x5be>
c0027880:	83 e9 1f             	sub    ecx,0x1f
c0027883:	d3 e8                	shr    eax,cl
c0027885:	89 c3                	mov    ebx,eax
c0027887:	eb 11                	jmp    c002789a <__adddf3+0x5cf>
c0027889:	b9 20 00 00 00       	mov    ecx,0x20
c002788e:	29 f1                	sub    ecx,esi
c0027890:	89 c3                	mov    ebx,eax
c0027892:	d3 e3                	shl    ebx,cl
c0027894:	89 f1                	mov    ecx,esi
c0027896:	d3 e8                	shr    eax,cl
c0027898:	89 c2                	mov    edx,eax
c002789a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002789d:	25 00 f8 ff ff       	and    eax,0xfffff800
c00278a2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00278a5:	89 d0                	mov    eax,edx
c00278a7:	89 da                	mov    edx,ebx
c00278a9:	eb 26                	jmp    c00278d1 <__adddf3+0x606>
c00278ab:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278ae:	29 cf                	sub    edi,ecx
c00278b0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278b3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00278b8:	eb 17                	jmp    c00278d1 <__adddf3+0x606>
c00278ba:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278bd:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278c0:	eb 0f                	jmp    c00278d1 <__adddf3+0x606>
c00278c2:	31 d2                	xor    edx,edx
c00278c4:	31 c0                	xor    eax,eax
c00278c6:	eb 09                	jmp    c00278d1 <__adddf3+0x606>
c00278c8:	89 c2                	mov    edx,eax
c00278ca:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00278d1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00278d4:	c1 e1 14             	shl    ecx,0x14
c00278d7:	89 c3                	mov    ebx,eax
c00278d9:	c1 eb 0b             	shr    ebx,0xb
c00278dc:	09 d9                	or     ecx,ebx
c00278de:	89 d3                	mov    ebx,edx
c00278e0:	c1 eb 0b             	shr    ebx,0xb
c00278e3:	c1 e0 15             	shl    eax,0x15
c00278e6:	09 d8                	or     eax,ebx
c00278e8:	89 c7                	mov    edi,eax
c00278ea:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00278f0:	0f 95 c0             	setne  al
c00278f3:	89 c6                	mov    esi,eax
c00278f5:	09 f3                	or     ebx,esi
c00278f7:	83 e3 01             	and    ebx,0x1
c00278fa:	c1 ea 0a             	shr    edx,0xa
c00278fd:	21 da                	and    edx,ebx
c00278ff:	89 f8                	mov    eax,edi
c0027901:	01 d0                	add    eax,edx
c0027903:	83 d1 00             	adc    ecx,0x0
c0027906:	89 c7                	mov    edi,eax
c0027908:	eb 06                	jmp    c0027910 <__adddf3+0x645>
c002790a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002790d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027910:	89 f8                	mov    eax,edi
c0027912:	89 ca                	mov    edx,ecx
c0027914:	83 c4 24             	add    esp,0x24
c0027917:	5b                   	pop    ebx
c0027918:	5e                   	pop    esi
c0027919:	5f                   	pop    edi
c002791a:	5d                   	pop    ebp
c002791b:	c3                   	ret    

c002791c <__subdf3>:
c002791c:	55                   	push   ebp
c002791d:	89 e5                	mov    ebp,esp
c002791f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027922:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027925:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002792b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002792e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027931:	5d                   	pop    ebp
c0027932:	e9 94 f9 ff ff       	jmp    c00272cb <__adddf3>

c0027937 <__negdf2>:
c0027937:	55                   	push   ebp
c0027938:	89 e5                	mov    ebp,esp
c002793a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002793d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027940:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027946:	5d                   	pop    ebp
c0027947:	c3                   	ret    

c0027948 <__muldf3>:
c0027948:	55                   	push   ebp
c0027949:	89 e5                	mov    ebp,esp
c002794b:	57                   	push   edi
c002794c:	56                   	push   esi
c002794d:	53                   	push   ebx
c002794e:	83 ec 24             	sub    esp,0x24
c0027951:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027954:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027957:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002795a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002795d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027960:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027963:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027966:	89 c8                	mov    eax,ecx
c0027968:	c1 f8 14             	sar    eax,0x14
c002796b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002796e:	89 f8                	mov    eax,edi
c0027970:	89 fb                	mov    ebx,edi
c0027972:	c1 e3 0b             	shl    ebx,0xb
c0027975:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027978:	c1 e1 0b             	shl    ecx,0xb
c002797b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027981:	c1 e8 15             	shr    eax,0x15
c0027984:	09 c1                	or     ecx,eax
c0027986:	89 d6                	mov    esi,edx
c0027988:	89 d0                	mov    eax,edx
c002798a:	c1 f8 14             	sar    eax,0x14
c002798d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027990:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027993:	89 c3                	mov    ebx,eax
c0027995:	c1 e3 0b             	shl    ebx,0xb
c0027998:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002799b:	c1 e6 0b             	shl    esi,0xb
c002799e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00279a4:	c1 e8 15             	shr    eax,0x15
c00279a7:	09 c6                	or     esi,eax
c00279a9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00279ac:	25 ff 07 00 00       	and    eax,0x7ff
c00279b1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00279b4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00279b7:	25 ff 07 00 00       	and    eax,0x7ff
c00279bc:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00279bf:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00279c2:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00279c5:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00279cc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00279cf:	40                   	inc    eax
c00279d0:	a9 fe 07 00 00       	test   eax,0x7fe
c00279d5:	0f 85 8d 00 00 00    	jne    c0027a68 <__muldf3+0x120>
c00279db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279de:	09 c8                	or     eax,ecx
c00279e0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00279e4:	74 44                	je     c0027a2a <__muldf3+0xe2>
c00279e6:	85 c0                	test   eax,eax
c00279e8:	0f 85 31 02 00 00    	jne    c0027c1f <__muldf3+0x2d7>
c00279ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00279f1:	40                   	inc    eax
c00279f2:	a9 fe 07 00 00       	test   eax,0x7fe
c00279f7:	75 13                	jne    c0027a0c <__muldf3+0xc4>
c00279f9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00279fc:	09 f1                	or     ecx,esi
c00279fe:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a02:	74 22                	je     c0027a26 <__muldf3+0xde>
c0027a04:	85 c9                	test   ecx,ecx
c0027a06:	0f 85 0d 02 00 00    	jne    c0027c19 <__muldf3+0x2d1>
c0027a0c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027a10:	0f 89 09 02 00 00    	jns    c0027c1f <__muldf3+0x2d7>
c0027a16:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a19:	05 00 00 00 80       	add    eax,0x80000000
c0027a1e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a21:	e9 f9 01 00 00       	jmp    c0027c1f <__muldf3+0x2d7>
c0027a26:	85 c9                	test   ecx,ecx
c0027a28:	eb 2e                	jmp    c0027a58 <__muldf3+0x110>
c0027a2a:	85 c0                	test   eax,eax
c0027a2c:	74 20                	je     c0027a4e <__muldf3+0x106>
c0027a2e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027a31:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a34:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a37:	c1 ef 1f             	shr    edi,0x1f
c0027a3a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027a3d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027a40:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027a43:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a46:	09 f9                	or     ecx,edi
c0027a48:	78 1e                	js     c0027a68 <__muldf3+0x120>
c0027a4a:	89 c3                	mov    ebx,eax
c0027a4c:	eb e0                	jmp    c0027a2e <__muldf3+0xe6>
c0027a4e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a51:	f7 d0                	not    eax
c0027a53:	a9 ff 07 00 00       	test   eax,0x7ff
c0027a58:	75 b2                	jne    c0027a0c <__muldf3+0xc4>
c0027a5a:	31 ff                	xor    edi,edi
c0027a5c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027a63:	e9 b7 01 00 00       	jmp    c0027c1f <__muldf3+0x2d7>
c0027a68:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a6b:	40                   	inc    eax
c0027a6c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027a71:	75 57                	jne    c0027aca <__muldf3+0x182>
c0027a73:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027a76:	09 f0                	or     eax,esi
c0027a78:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a7c:	74 23                	je     c0027aa1 <__muldf3+0x159>
c0027a7e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027a82:	0f 89 91 01 00 00    	jns    c0027c19 <__muldf3+0x2d1>
c0027a88:	85 c0                	test   eax,eax
c0027a8a:	0f 85 89 01 00 00    	jne    c0027c19 <__muldf3+0x2d1>
c0027a90:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027a93:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027a99:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a9c:	e9 7e 01 00 00       	jmp    c0027c1f <__muldf3+0x2d7>
c0027aa1:	85 c0                	test   eax,eax
c0027aa3:	75 0c                	jne    c0027ab1 <__muldf3+0x169>
c0027aa5:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027aa9:	0f 89 6a 01 00 00    	jns    c0027c19 <__muldf3+0x2d1>
c0027aaf:	eb df                	jmp    c0027a90 <__muldf3+0x148>
c0027ab1:	01 f6                	add    esi,esi
c0027ab3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027ab6:	c1 ea 1f             	shr    edx,0x1f
c0027ab9:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027abc:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027abf:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027ac2:	09 d6                	or     esi,edx
c0027ac4:	78 04                	js     c0027aca <__muldf3+0x182>
c0027ac6:	89 c3                	mov    ebx,eax
c0027ac8:	eb e7                	jmp    c0027ab1 <__muldf3+0x169>
c0027aca:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027ad0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027ad6:	89 c8                	mov    eax,ecx
c0027ad8:	f7 e6                	mul    esi
c0027ada:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027add:	89 c7                	mov    edi,eax
c0027adf:	89 c8                	mov    eax,ecx
c0027ae1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027ae4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027ae7:	89 c1                	mov    ecx,eax
c0027ae9:	89 f0                	mov    eax,esi
c0027aeb:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027aee:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027af1:	89 c6                	mov    esi,eax
c0027af3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027af6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027af9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027afc:	31 c0                	xor    eax,eax
c0027afe:	01 f1                	add    ecx,esi
c0027b00:	0f 92 c0             	setb   al
c0027b03:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027b06:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027b09:	83 d6 00             	adc    esi,0x0
c0027b0c:	01 c7                	add    edi,eax
c0027b0e:	83 d6 00             	adc    esi,0x0
c0027b11:	01 ca                	add    edx,ecx
c0027b13:	0f 92 c1             	setb   cl
c0027b16:	0f b6 c9             	movzx  ecx,cl
c0027b19:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027b1c:	83 d6 00             	adc    esi,0x0
c0027b1f:	01 cf                	add    edi,ecx
c0027b21:	83 d6 00             	adc    esi,0x0
c0027b24:	31 c9                	xor    ecx,ecx
c0027b26:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027b29:	0f 95 c1             	setne  cl
c0027b2c:	09 cf                	or     edi,ecx
c0027b2e:	85 f6                	test   esi,esi
c0027b30:	78 0c                	js     c0027b3e <__muldf3+0x1f6>
c0027b32:	01 f6                	add    esi,esi
c0027b34:	89 f8                	mov    eax,edi
c0027b36:	c1 e8 1f             	shr    eax,0x1f
c0027b39:	09 c6                	or     esi,eax
c0027b3b:	01 ff                	add    edi,edi
c0027b3d:	4b                   	dec    ebx
c0027b3e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027b44:	0f 8f 85 00 00 00    	jg     c0027bcf <__muldf3+0x287>
c0027b4a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027b50:	85 db                	test   ebx,ebx
c0027b52:	0f 8f 84 00 00 00    	jg     c0027bdc <__muldf3+0x294>
c0027b58:	83 fb cc             	cmp    ebx,0xffffffcc
c0027b5b:	7c 79                	jl     c0027bd6 <__muldf3+0x28e>
c0027b5d:	ba 01 00 00 00       	mov    edx,0x1
c0027b62:	29 da                	sub    edx,ebx
c0027b64:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027b6a:	83 fa 1f             	cmp    edx,0x1f
c0027b6d:	7e 30                	jle    c0027b9f <__muldf3+0x257>
c0027b6f:	83 fa 20             	cmp    edx,0x20
c0027b72:	75 0b                	jne    c0027b7f <__muldf3+0x237>
c0027b74:	31 c0                	xor    eax,eax
c0027b76:	85 ff                	test   edi,edi
c0027b78:	0f 95 c0             	setne  al
c0027b7b:	89 c7                	mov    edi,eax
c0027b7d:	eb 1a                	jmp    c0027b99 <__muldf3+0x251>
c0027b7f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027b82:	89 f0                	mov    eax,esi
c0027b84:	d3 e0                	shl    eax,cl
c0027b86:	09 f8                	or     eax,edi
c0027b88:	0f 95 c0             	setne  al
c0027b8b:	0f b6 c0             	movzx  eax,al
c0027b8e:	89 c7                	mov    edi,eax
c0027b90:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027b95:	29 d9                	sub    ecx,ebx
c0027b97:	d3 ee                	shr    esi,cl
c0027b99:	09 f7                	or     edi,esi
c0027b9b:	31 db                	xor    ebx,ebx
c0027b9d:	eb 3b                	jmp    c0027bda <__muldf3+0x292>
c0027b9f:	83 c3 1f             	add    ebx,0x1f
c0027ba2:	89 f0                	mov    eax,esi
c0027ba4:	88 d9                	mov    cl,bl
c0027ba6:	d3 e0                	shl    eax,cl
c0027ba8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bab:	89 f8                	mov    eax,edi
c0027bad:	88 d1                	mov    cl,dl
c0027baf:	d3 e8                	shr    eax,cl
c0027bb1:	89 c1                	mov    ecx,eax
c0027bb3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027bb6:	09 c8                	or     eax,ecx
c0027bb8:	88 d9                	mov    cl,bl
c0027bba:	d3 e7                	shl    edi,cl
c0027bbc:	31 db                	xor    ebx,ebx
c0027bbe:	85 ff                	test   edi,edi
c0027bc0:	0f 95 c3             	setne  bl
c0027bc3:	89 df                	mov    edi,ebx
c0027bc5:	09 c7                	or     edi,eax
c0027bc7:	88 d1                	mov    cl,dl
c0027bc9:	d3 ee                	shr    esi,cl
c0027bcb:	31 db                	xor    ebx,ebx
c0027bcd:	eb 0d                	jmp    c0027bdc <__muldf3+0x294>
c0027bcf:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027bd4:	eb 02                	jmp    c0027bd8 <__muldf3+0x290>
c0027bd6:	31 db                	xor    ebx,ebx
c0027bd8:	31 ff                	xor    edi,edi
c0027bda:	31 f6                	xor    esi,esi
c0027bdc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027bdf:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027be2:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027be7:	09 c3                	or     ebx,eax
c0027be9:	c1 e3 14             	shl    ebx,0x14
c0027bec:	89 f0                	mov    eax,esi
c0027bee:	c1 e8 0b             	shr    eax,0xb
c0027bf1:	09 c3                	or     ebx,eax
c0027bf3:	89 f8                	mov    eax,edi
c0027bf5:	c1 e8 0b             	shr    eax,0xb
c0027bf8:	c1 e6 15             	shl    esi,0x15
c0027bfb:	09 c6                	or     esi,eax
c0027bfd:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027c03:	0f 95 c1             	setne  cl
c0027c06:	09 c8                	or     eax,ecx
c0027c08:	83 e0 01             	and    eax,0x1
c0027c0b:	c1 ef 0a             	shr    edi,0xa
c0027c0e:	21 c7                	and    edi,eax
c0027c10:	01 f7                	add    edi,esi
c0027c12:	83 d3 00             	adc    ebx,0x0
c0027c15:	89 da                	mov    edx,ebx
c0027c17:	eb 03                	jmp    c0027c1c <__muldf3+0x2d4>
c0027c19:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027c1c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027c1f:	89 f8                	mov    eax,edi
c0027c21:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027c24:	83 c4 24             	add    esp,0x24
c0027c27:	5b                   	pop    ebx
c0027c28:	5e                   	pop    esi
c0027c29:	5f                   	pop    edi
c0027c2a:	5d                   	pop    ebp
c0027c2b:	c3                   	ret    

c0027c2c <__divdf3>:
c0027c2c:	55                   	push   ebp
c0027c2d:	89 e5                	mov    ebp,esp
c0027c2f:	57                   	push   edi
c0027c30:	56                   	push   esi
c0027c31:	53                   	push   ebx
c0027c32:	83 ec 2c             	sub    esp,0x2c
c0027c35:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027c38:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c3b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c3e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c41:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027c44:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c47:	89 ce                	mov    esi,ecx
c0027c49:	89 c8                	mov    eax,ecx
c0027c4b:	c1 f8 14             	sar    eax,0x14
c0027c4e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c51:	89 f8                	mov    eax,edi
c0027c53:	89 fb                	mov    ebx,edi
c0027c55:	c1 e3 0b             	shl    ebx,0xb
c0027c58:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027c5b:	c1 e6 0b             	shl    esi,0xb
c0027c5e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c64:	c1 e8 15             	shr    eax,0x15
c0027c67:	09 c6                	or     esi,eax
c0027c69:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027c6c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c6f:	89 c2                	mov    edx,eax
c0027c71:	c1 fa 14             	sar    edx,0x14
c0027c74:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027c77:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c7a:	89 de                	mov    esi,ebx
c0027c7c:	c1 e6 0b             	shl    esi,0xb
c0027c7f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027c82:	c1 e0 0b             	shl    eax,0xb
c0027c85:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027c8a:	c1 eb 15             	shr    ebx,0x15
c0027c8d:	09 d8                	or     eax,ebx
c0027c8f:	89 c2                	mov    edx,eax
c0027c91:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c94:	25 ff 07 00 00       	and    eax,0x7ff
c0027c99:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027c9c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027c9f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027ca5:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027ca8:	29 d8                	sub    eax,ebx
c0027caa:	05 ff 03 00 00       	add    eax,0x3ff
c0027caf:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027cb2:	46                   	inc    esi
c0027cb3:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027cb9:	0f 85 a5 00 00 00    	jne    c0027d64 <__divdf3+0x138>
c0027cbf:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027cc2:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027cc5:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027cc9:	74 2a                	je     c0027cf5 <__divdf3+0xc9>
c0027ccb:	85 f6                	test   esi,esi
c0027ccd:	0f 85 cc 02 00 00    	jne    c0027f9f <__divdf3+0x373>
c0027cd3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027cd6:	40                   	inc    eax
c0027cd7:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cdc:	75 26                	jne    c0027d04 <__divdf3+0xd8>
c0027cde:	85 db                	test   ebx,ebx
c0027ce0:	74 22                	je     c0027d04 <__divdf3+0xd8>
c0027ce2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027ce5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027ce8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ceb:	09 d0                	or     eax,edx
c0027ced:	0f 85 ac 02 00 00    	jne    c0027f9f <__divdf3+0x373>
c0027cf3:	eb 63                	jmp    c0027d58 <__divdf3+0x12c>
c0027cf5:	85 f6                	test   esi,esi
c0027cf7:	75 22                	jne    c0027d1b <__divdf3+0xef>
c0027cf9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027cfc:	40                   	inc    eax
c0027cfd:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d02:	74 36                	je     c0027d3a <__divdf3+0x10e>
c0027d04:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027d08:	0f 89 91 02 00 00    	jns    c0027f9f <__divdf3+0x373>
c0027d0e:	89 f8                	mov    eax,edi
c0027d10:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027d16:	e9 80 02 00 00       	jmp    c0027f9b <__divdf3+0x36f>
c0027d1b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027d1e:	01 f6                	add    esi,esi
c0027d20:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027d23:	c1 ef 1f             	shr    edi,0x1f
c0027d26:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027d29:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027d2c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027d2f:	09 f7                	or     edi,esi
c0027d31:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027d34:	78 2e                	js     c0027d64 <__divdf3+0x138>
c0027d36:	89 c8                	mov    eax,ecx
c0027d38:	eb e1                	jmp    c0027d1b <__divdf3+0xef>
c0027d3a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d3d:	09 d0                	or     eax,edx
c0027d3f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027d43:	74 0f                	je     c0027d54 <__divdf3+0x128>
c0027d45:	85 c0                	test   eax,eax
c0027d47:	74 bb                	je     c0027d04 <__divdf3+0xd8>
c0027d49:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027d4c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027d4f:	e9 4b 02 00 00       	jmp    c0027f9f <__divdf3+0x373>
c0027d54:	85 c0                	test   eax,eax
c0027d56:	75 ac                	jne    c0027d04 <__divdf3+0xd8>
c0027d58:	31 ff                	xor    edi,edi
c0027d5a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027d5f:	e9 3b 02 00 00       	jmp    c0027f9f <__divdf3+0x373>
c0027d64:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d67:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027d6a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027d70:	75 6b                	jne    c0027ddd <__divdf3+0x1b1>
c0027d72:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d75:	09 d6                	or     esi,edx
c0027d77:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027d7b:	74 28                	je     c0027da5 <__divdf3+0x179>
c0027d7d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027d80:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027d83:	85 f6                	test   esi,esi
c0027d85:	0f 85 14 02 00 00    	jne    c0027f9f <__divdf3+0x373>
c0027d8b:	31 ff                	xor    edi,edi
c0027d8d:	31 c9                	xor    ecx,ecx
c0027d8f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d92:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027d95:	0f 89 04 02 00 00    	jns    c0027f9f <__divdf3+0x373>
c0027d9b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027da0:	e9 fa 01 00 00       	jmp    c0027f9f <__divdf3+0x373>
c0027da5:	85 f6                	test   esi,esi
c0027da7:	75 1b                	jne    c0027dc4 <__divdf3+0x198>
c0027da9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027dac:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027daf:	25 00 00 00 80       	and    eax,0x80000000
c0027db4:	31 c9                	xor    ecx,ecx
c0027db6:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027dbb:	89 cf                	mov    edi,ecx
c0027dbd:	89 c1                	mov    ecx,eax
c0027dbf:	e9 db 01 00 00       	jmp    c0027f9f <__divdf3+0x373>
c0027dc4:	01 d2                	add    edx,edx
c0027dc6:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027dc9:	c1 eb 1f             	shr    ebx,0x1f
c0027dcc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027dcf:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027dd2:	8d 48 01             	lea    ecx,[eax+0x1]
c0027dd5:	09 da                	or     edx,ebx
c0027dd7:	78 04                	js     c0027ddd <__divdf3+0x1b1>
c0027dd9:	89 c8                	mov    eax,ecx
c0027ddb:	eb e7                	jmp    c0027dc4 <__divdf3+0x198>
c0027ddd:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027de0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027de6:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027dec:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027def:	39 d6                	cmp    esi,edx
c0027df1:	77 0d                	ja     c0027e00 <__divdf3+0x1d4>
c0027df3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027df6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027df9:	72 1b                	jb     c0027e16 <__divdf3+0x1ea>
c0027dfb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027dfe:	75 16                	jne    c0027e16 <__divdf3+0x1ea>
c0027e00:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e03:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027e06:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027e09:	83 de 00             	sbb    esi,0x0
c0027e0c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027e0f:	ba 01 00 00 00       	mov    edx,0x1
c0027e14:	eb 02                	jmp    c0027e18 <__divdf3+0x1ec>
c0027e16:	31 d2                	xor    edx,edx
c0027e18:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027e1f:	31 ff                	xor    edi,edi
c0027e21:	01 ff                	add    edi,edi
c0027e23:	89 d1                	mov    ecx,edx
c0027e25:	c1 e9 1f             	shr    ecx,0x1f
c0027e28:	09 cf                	or     edi,ecx
c0027e2a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027e2d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027e30:	89 da                	mov    edx,ebx
c0027e32:	89 f3                	mov    ebx,esi
c0027e34:	8d 34 36             	lea    esi,[esi+esi*1]
c0027e37:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e3a:	c1 e9 1f             	shr    ecx,0x1f
c0027e3d:	09 ce                	or     esi,ecx
c0027e3f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e42:	01 c9                	add    ecx,ecx
c0027e44:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027e47:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027e4a:	85 db                	test   ebx,ebx
c0027e4c:	78 29                	js     c0027e77 <__divdf3+0x24b>
c0027e4e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027e51:	72 07                	jb     c0027e5a <__divdf3+0x22e>
c0027e53:	75 3c                	jne    c0027e91 <__divdf3+0x265>
c0027e55:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027e58:	77 37                	ja     c0027e91 <__divdf3+0x265>
c0027e5a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e5d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027e60:	31 d2                	xor    edx,edx
c0027e62:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027e65:	0f 97 c2             	seta   dl
c0027e68:	29 d6                	sub    esi,edx
c0027e6a:	89 d9                	mov    ecx,ebx
c0027e6c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027e6f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027e72:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027e75:	eb 17                	jmp    c0027e8e <__divdf3+0x262>
c0027e77:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e7a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e7d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027e80:	0f 97 c1             	seta   cl
c0027e83:	0f b6 c9             	movzx  ecx,cl
c0027e86:	29 ce                	sub    esi,ecx
c0027e88:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027e8b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027e8e:	83 ca 01             	or     edx,0x1
c0027e91:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027e94:	75 8b                	jne    c0027e21 <__divdf3+0x1f5>
c0027e96:	c1 e7 09             	shl    edi,0x9
c0027e99:	89 d1                	mov    ecx,edx
c0027e9b:	c1 e9 17             	shr    ecx,0x17
c0027e9e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027ea1:	09 f3                	or     ebx,esi
c0027ea3:	0f 95 c3             	setne  bl
c0027ea6:	0f b6 db             	movzx  ebx,bl
c0027ea9:	c1 e2 09             	shl    edx,0x9
c0027eac:	09 d3                	or     ebx,edx
c0027eae:	89 ca                	mov    edx,ecx
c0027eb0:	09 fa                	or     edx,edi
c0027eb2:	78 0c                	js     c0027ec0 <__divdf3+0x294>
c0027eb4:	01 d2                	add    edx,edx
c0027eb6:	89 d9                	mov    ecx,ebx
c0027eb8:	c1 e9 1f             	shr    ecx,0x1f
c0027ebb:	09 ca                	or     edx,ecx
c0027ebd:	01 db                	add    ebx,ebx
c0027ebf:	48                   	dec    eax
c0027ec0:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027ec5:	0f 8f 83 00 00 00    	jg     c0027f4e <__divdf3+0x322>
c0027ecb:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027ed1:	85 c0                	test   eax,eax
c0027ed3:	0f 8f 82 00 00 00    	jg     c0027f5b <__divdf3+0x32f>
c0027ed9:	83 f8 cc             	cmp    eax,0xffffffcc
c0027edc:	7c 77                	jl     c0027f55 <__divdf3+0x329>
c0027ede:	be 01 00 00 00       	mov    esi,0x1
c0027ee3:	29 c6                	sub    esi,eax
c0027ee5:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027eeb:	83 fe 1f             	cmp    esi,0x1f
c0027eee:	7e 2f                	jle    c0027f1f <__divdf3+0x2f3>
c0027ef0:	83 fe 20             	cmp    esi,0x20
c0027ef3:	75 0a                	jne    c0027eff <__divdf3+0x2d3>
c0027ef5:	85 db                	test   ebx,ebx
c0027ef7:	0f 95 c3             	setne  bl
c0027efa:	0f b6 db             	movzx  ebx,bl
c0027efd:	eb 1a                	jmp    c0027f19 <__divdf3+0x2ed>
c0027eff:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027f02:	89 d7                	mov    edi,edx
c0027f04:	d3 e7                	shl    edi,cl
c0027f06:	89 f9                	mov    ecx,edi
c0027f08:	09 d9                	or     ecx,ebx
c0027f0a:	0f 95 c3             	setne  bl
c0027f0d:	0f b6 db             	movzx  ebx,bl
c0027f10:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027f15:	29 c1                	sub    ecx,eax
c0027f17:	d3 ea                	shr    edx,cl
c0027f19:	09 d3                	or     ebx,edx
c0027f1b:	31 c0                	xor    eax,eax
c0027f1d:	eb 3a                	jmp    c0027f59 <__divdf3+0x32d>
c0027f1f:	83 c0 1f             	add    eax,0x1f
c0027f22:	89 d7                	mov    edi,edx
c0027f24:	88 c1                	mov    cl,al
c0027f26:	d3 e7                	shl    edi,cl
c0027f28:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f2b:	89 df                	mov    edi,ebx
c0027f2d:	89 f1                	mov    ecx,esi
c0027f2f:	d3 ef                	shr    edi,cl
c0027f31:	89 f9                	mov    ecx,edi
c0027f33:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027f36:	09 cf                	or     edi,ecx
c0027f38:	88 c1                	mov    cl,al
c0027f3a:	d3 e3                	shl    ebx,cl
c0027f3c:	85 db                	test   ebx,ebx
c0027f3e:	0f 95 c3             	setne  bl
c0027f41:	0f b6 db             	movzx  ebx,bl
c0027f44:	09 fb                	or     ebx,edi
c0027f46:	89 f1                	mov    ecx,esi
c0027f48:	d3 ea                	shr    edx,cl
c0027f4a:	31 c0                	xor    eax,eax
c0027f4c:	eb 0d                	jmp    c0027f5b <__divdf3+0x32f>
c0027f4e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027f53:	eb 02                	jmp    c0027f57 <__divdf3+0x32b>
c0027f55:	31 c0                	xor    eax,eax
c0027f57:	31 db                	xor    ebx,ebx
c0027f59:	31 d2                	xor    edx,edx
c0027f5b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027f5e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027f61:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027f67:	09 c8                	or     eax,ecx
c0027f69:	c1 e0 14             	shl    eax,0x14
c0027f6c:	89 d1                	mov    ecx,edx
c0027f6e:	c1 e9 0b             	shr    ecx,0xb
c0027f71:	09 c8                	or     eax,ecx
c0027f73:	89 c6                	mov    esi,eax
c0027f75:	89 d9                	mov    ecx,ebx
c0027f77:	c1 e9 0b             	shr    ecx,0xb
c0027f7a:	c1 e2 15             	shl    edx,0x15
c0027f7d:	09 ca                	or     edx,ecx
c0027f7f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027f85:	0f 95 c0             	setne  al
c0027f88:	09 c1                	or     ecx,eax
c0027f8a:	83 e1 01             	and    ecx,0x1
c0027f8d:	c1 eb 0a             	shr    ebx,0xa
c0027f90:	21 cb                	and    ebx,ecx
c0027f92:	01 d3                	add    ebx,edx
c0027f94:	89 d8                	mov    eax,ebx
c0027f96:	83 d6 00             	adc    esi,0x0
c0027f99:	89 f2                	mov    edx,esi
c0027f9b:	89 c7                	mov    edi,eax
c0027f9d:	89 d1                	mov    ecx,edx
c0027f9f:	89 f8                	mov    eax,edi
c0027fa1:	89 ca                	mov    edx,ecx
c0027fa3:	83 c4 2c             	add    esp,0x2c
c0027fa6:	5b                   	pop    ebx
c0027fa7:	5e                   	pop    esi
c0027fa8:	5f                   	pop    edi
c0027fa9:	5d                   	pop    ebp
c0027faa:	c3                   	ret    

c0027fab <__floatsidf>:
c0027fab:	55                   	push   ebp
c0027fac:	89 e5                	mov    ebp,esp
c0027fae:	56                   	push   esi
c0027faf:	53                   	push   ebx
c0027fb0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027fb3:	85 db                	test   ebx,ebx
c0027fb5:	7e 15                	jle    c0027fcc <__floatsidf+0x21>
c0027fb7:	0f bd cb             	bsr    ecx,ebx
c0027fba:	83 f1 1f             	xor    ecx,0x1f
c0027fbd:	d3 e3                	shl    ebx,cl
c0027fbf:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027fc5:	b8 1e 04 00 00       	mov    eax,0x41e
c0027fca:	eb 21                	jmp    c0027fed <__floatsidf+0x42>
c0027fcc:	b8 00 00 00 00       	mov    eax,0x0
c0027fd1:	ba 00 00 00 00       	mov    edx,0x0
c0027fd6:	74 2a                	je     c0028002 <__floatsidf+0x57>
c0027fd8:	f7 db                	neg    ebx
c0027fda:	0f bd cb             	bsr    ecx,ebx
c0027fdd:	83 f1 1f             	xor    ecx,0x1f
c0027fe0:	d3 e3                	shl    ebx,cl
c0027fe2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027fe8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027fed:	29 c8                	sub    eax,ecx
c0027fef:	c1 e0 14             	shl    eax,0x14
c0027ff2:	89 c1                	mov    ecx,eax
c0027ff4:	89 de                	mov    esi,ebx
c0027ff6:	c1 ee 0b             	shr    esi,0xb
c0027ff9:	09 f1                	or     ecx,esi
c0027ffb:	89 ca                	mov    edx,ecx
c0027ffd:	c1 e3 15             	shl    ebx,0x15
c0028000:	89 d8                	mov    eax,ebx
c0028002:	5b                   	pop    ebx
c0028003:	5e                   	pop    esi
c0028004:	5d                   	pop    ebp
c0028005:	c3                   	ret    

c0028006 <__floatunsidf>:
c0028006:	55                   	push   ebp
c0028007:	89 e5                	mov    ebp,esp
c0028009:	56                   	push   esi
c002800a:	53                   	push   ebx
c002800b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002800e:	85 db                	test   ebx,ebx
c0028010:	74 2a                	je     c002803c <__floatunsidf+0x36>
c0028012:	0f bd cb             	bsr    ecx,ebx
c0028015:	83 f1 1f             	xor    ecx,0x1f
c0028018:	d3 e3                	shl    ebx,cl
c002801a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028020:	b8 1e 04 00 00       	mov    eax,0x41e
c0028025:	29 c8                	sub    eax,ecx
c0028027:	c1 e0 14             	shl    eax,0x14
c002802a:	89 c1                	mov    ecx,eax
c002802c:	89 de                	mov    esi,ebx
c002802e:	c1 ee 0b             	shr    esi,0xb
c0028031:	09 f1                	or     ecx,esi
c0028033:	89 ca                	mov    edx,ecx
c0028035:	c1 e3 15             	shl    ebx,0x15
c0028038:	89 d8                	mov    eax,ebx
c002803a:	eb 04                	jmp    c0028040 <__floatunsidf+0x3a>
c002803c:	31 c0                	xor    eax,eax
c002803e:	31 d2                	xor    edx,edx
c0028040:	5b                   	pop    ebx
c0028041:	5e                   	pop    esi
c0028042:	5d                   	pop    ebp
c0028043:	c3                   	ret    

c0028044 <__fixdfsi>:
c0028044:	55                   	push   ebp
c0028045:	89 e5                	mov    ebp,esp
c0028047:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002804a:	89 d1                	mov    ecx,edx
c002804c:	c1 e1 0b             	shl    ecx,0xb
c002804f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028055:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028058:	c1 e8 15             	shr    eax,0x15
c002805b:	09 c1                	or     ecx,eax
c002805d:	c1 fa 14             	sar    edx,0x14
c0028060:	78 1f                	js     c0028081 <__fixdfsi+0x3d>
c0028062:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028068:	31 c0                	xor    eax,eax
c002806a:	83 fa 1e             	cmp    edx,0x1e
c002806d:	77 40                	ja     c00280af <__fixdfsi+0x6b>
c002806f:	89 c8                	mov    eax,ecx
c0028071:	0d 00 00 00 80       	or     eax,0x80000000
c0028076:	b9 1f 00 00 00       	mov    ecx,0x1f
c002807b:	29 d1                	sub    ecx,edx
c002807d:	d3 e8                	shr    eax,cl
c002807f:	eb 2e                	jmp    c00280af <__fixdfsi+0x6b>
c0028081:	31 c0                	xor    eax,eax
c0028083:	81 c2 01 04 00 00    	add    edx,0x401
c0028089:	78 24                	js     c00280af <__fixdfsi+0x6b>
c002808b:	83 fa 1e             	cmp    edx,0x1e
c002808e:	7e 09                	jle    c0028099 <__fixdfsi+0x55>
c0028090:	83 fa 1f             	cmp    edx,0x1f
c0028093:	75 18                	jne    c00280ad <__fixdfsi+0x69>
c0028095:	85 c9                	test   ecx,ecx
c0028097:	75 14                	jne    c00280ad <__fixdfsi+0x69>
c0028099:	89 c8                	mov    eax,ecx
c002809b:	0d 00 00 00 80       	or     eax,0x80000000
c00280a0:	b9 1f 00 00 00       	mov    ecx,0x1f
c00280a5:	29 d1                	sub    ecx,edx
c00280a7:	d3 e8                	shr    eax,cl
c00280a9:	f7 d8                	neg    eax
c00280ab:	eb 02                	jmp    c00280af <__fixdfsi+0x6b>
c00280ad:	31 c0                	xor    eax,eax
c00280af:	5d                   	pop    ebp
c00280b0:	c3                   	ret    

c00280b1 <__fixunsdfsi>:
c00280b1:	55                   	push   ebp
c00280b2:	89 e5                	mov    ebp,esp
c00280b4:	53                   	push   ebx
c00280b5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00280b8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00280bb:	89 d3                	mov    ebx,edx
c00280bd:	c1 fb 14             	sar    ebx,0x14
c00280c0:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00280c6:	31 c0                	xor    eax,eax
c00280c8:	83 fb 1f             	cmp    ebx,0x1f
c00280cb:	77 1d                	ja     c00280ea <__fixunsdfsi+0x39>
c00280cd:	89 d0                	mov    eax,edx
c00280cf:	c1 e0 0b             	shl    eax,0xb
c00280d2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00280d7:	c1 e9 15             	shr    ecx,0x15
c00280da:	09 c8                	or     eax,ecx
c00280dc:	0d 00 00 00 80       	or     eax,0x80000000
c00280e1:	b9 1f 00 00 00       	mov    ecx,0x1f
c00280e6:	29 d9                	sub    ecx,ebx
c00280e8:	d3 e8                	shr    eax,cl
c00280ea:	5b                   	pop    ebx
c00280eb:	5d                   	pop    ebp
c00280ec:	c3                   	ret    

c00280ed <__cmpdf2>:
c00280ed:	55                   	push   ebp
c00280ee:	89 e5                	mov    ebp,esp
c00280f0:	57                   	push   edi
c00280f1:	56                   	push   esi
c00280f2:	53                   	push   ebx
c00280f3:	83 ec 0c             	sub    esp,0xc
c00280f6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00280f9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00280fc:	89 ca                	mov    edx,ecx
c00280fe:	c1 ea 14             	shr    edx,0x14
c0028101:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028107:	89 cb                	mov    ebx,ecx
c0028109:	c1 fb 1f             	sar    ebx,0x1f
c002810c:	31 da                	xor    edx,ebx
c002810e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028111:	89 df                	mov    edi,ebx
c0028113:	c1 e7 0b             	shl    edi,0xb
c0028116:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028119:	c1 e1 0b             	shl    ecx,0xb
c002811c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028122:	c1 eb 15             	shr    ebx,0x15
c0028125:	09 d9                	or     ecx,ebx
c0028127:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c002812a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002812d:	89 ce                	mov    esi,ecx
c002812f:	c1 ee 14             	shr    esi,0x14
c0028132:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028138:	89 cb                	mov    ebx,ecx
c002813a:	c1 fb 1f             	sar    ebx,0x1f
c002813d:	31 de                	xor    esi,ebx
c002813f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028142:	89 df                	mov    edi,ebx
c0028144:	c1 e7 0b             	shl    edi,0xb
c0028147:	c1 e1 0b             	shl    ecx,0xb
c002814a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028150:	c1 eb 15             	shr    ebx,0x15
c0028153:	09 d9                	or     ecx,ebx
c0028155:	89 d3                	mov    ebx,edx
c0028157:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002815d:	43                   	inc    ebx
c002815e:	83 fb 01             	cmp    ebx,0x1
c0028161:	77 08                	ja     c002816b <__cmpdf2+0x7e>
c0028163:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028166:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028169:	75 68                	jne    c00281d3 <__cmpdf2+0xe6>
c002816b:	89 f3                	mov    ebx,esi
c002816d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028173:	43                   	inc    ebx
c0028174:	83 fb 01             	cmp    ebx,0x1
c0028177:	77 06                	ja     c002817f <__cmpdf2+0x92>
c0028179:	89 fb                	mov    ebx,edi
c002817b:	09 cb                	or     ebx,ecx
c002817d:	75 54                	jne    c00281d3 <__cmpdf2+0xe6>
c002817f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028182:	09 f8                	or     eax,edi
c0028184:	09 c8                	or     eax,ecx
c0028186:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028189:	75 12                	jne    c002819d <__cmpdf2+0xb0>
c002818b:	8d 42 01             	lea    eax,[edx+0x1]
c002818e:	83 f8 01             	cmp    eax,0x1
c0028191:	77 0a                	ja     c002819d <__cmpdf2+0xb0>
c0028193:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028196:	31 c0                	xor    eax,eax
c0028198:	83 fb 01             	cmp    ebx,0x1
c002819b:	76 36                	jbe    c00281d3 <__cmpdf2+0xe6>
c002819d:	b8 01 00 00 00       	mov    eax,0x1
c00281a2:	39 f2                	cmp    edx,esi
c00281a4:	7f 2d                	jg     c00281d3 <__cmpdf2+0xe6>
c00281a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00281ab:	7c 26                	jl     c00281d3 <__cmpdf2+0xe6>
c00281ad:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00281b0:	77 07                	ja     c00281b9 <__cmpdf2+0xcc>
c00281b2:	72 16                	jb     c00281ca <__cmpdf2+0xdd>
c00281b4:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00281b7:	76 0a                	jbe    c00281c3 <__cmpdf2+0xd6>
c00281b9:	89 d0                	mov    eax,edx
c00281bb:	c1 f8 1f             	sar    eax,0x1f
c00281be:	83 c8 01             	or     eax,0x1
c00281c1:	eb 10                	jmp    c00281d3 <__cmpdf2+0xe6>
c00281c3:	b8 00 00 00 00       	mov    eax,0x0
c00281c8:	73 09                	jae    c00281d3 <__cmpdf2+0xe6>
c00281ca:	89 d0                	mov    eax,edx
c00281cc:	c1 f8 1f             	sar    eax,0x1f
c00281cf:	83 e0 02             	and    eax,0x2
c00281d2:	48                   	dec    eax
c00281d3:	83 c4 0c             	add    esp,0xc
c00281d6:	5b                   	pop    ebx
c00281d7:	5e                   	pop    esi
c00281d8:	5f                   	pop    edi
c00281d9:	5d                   	pop    ebp
c00281da:	c3                   	ret    

c00281db <__eqdf2>:
c00281db:	55                   	push   ebp
c00281dc:	89 e5                	mov    ebp,esp
c00281de:	50                   	push   eax
c00281df:	6a 01                	push   0x1
c00281e1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00281e4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00281e7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00281ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00281ed:	e8 fb fe ff ff       	call   c00280ed <__cmpdf2>
c00281f2:	83 c4 18             	add    esp,0x18
c00281f5:	c9                   	leave  
c00281f6:	c3                   	ret    

c00281f7 <__nedf2>:
c00281f7:	eb e2                	jmp    c00281db <__eqdf2>

c00281f9 <__gtdf2>:
c00281f9:	55                   	push   ebp
c00281fa:	89 e5                	mov    ebp,esp
c00281fc:	50                   	push   eax
c00281fd:	6a ff                	push   0xffffffff
c00281ff:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028202:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028205:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028208:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002820b:	e8 dd fe ff ff       	call   c00280ed <__cmpdf2>
c0028210:	83 c4 18             	add    esp,0x18
c0028213:	c9                   	leave  
c0028214:	c3                   	ret    

c0028215 <__gedf2>:
c0028215:	eb e2                	jmp    c00281f9 <__gtdf2>

c0028217 <__ltdf2>:
c0028217:	eb c2                	jmp    c00281db <__eqdf2>

c0028219 <__ledf2>:
c0028219:	eb c0                	jmp    c00281db <__eqdf2>

c002821b <__truncdfsf2>:
c002821b:	55                   	push   ebp
c002821c:	89 e5                	mov    ebp,esp
c002821e:	57                   	push   edi
c002821f:	56                   	push   esi
c0028220:	53                   	push   ebx
c0028221:	83 ec 0c             	sub    esp,0xc
c0028224:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028227:	89 d1                	mov    ecx,edx
c0028229:	c1 f9 14             	sar    ecx,0x14
c002822c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002822f:	89 df                	mov    edi,ebx
c0028231:	c1 e7 0b             	shl    edi,0xb
c0028234:	89 d0                	mov    eax,edx
c0028236:	c1 e0 0b             	shl    eax,0xb
c0028239:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002823e:	c1 eb 15             	shr    ebx,0x15
c0028241:	09 d8                	or     eax,ebx
c0028243:	89 cb                	mov    ebx,ecx
c0028245:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002824b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028251:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028257:	0f 86 9e 00 00 00    	jbe    c00282fb <__truncdfsf2+0xe0>
c002825d:	85 db                	test   ebx,ebx
c002825f:	75 0a                	jne    c002826b <__truncdfsf2+0x50>
c0028261:	c1 fa 17             	sar    edx,0x17
c0028264:	30 d2                	xor    dl,dl
c0028266:	e9 84 00 00 00       	jmp    c00282ef <__truncdfsf2+0xd4>
c002826b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028271:	83 fe 83             	cmp    esi,0xffffff83
c0028274:	7d 4b                	jge    c00282c1 <__truncdfsf2+0xa6>
c0028276:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002827b:	29 f1                	sub    ecx,esi
c002827d:	83 f9 1f             	cmp    ecx,0x1f
c0028280:	7f 6b                	jg     c00282ed <__truncdfsf2+0xd2>
c0028282:	0d 00 00 00 80       	or     eax,0x80000000
c0028287:	89 c3                	mov    ebx,eax
c0028289:	d3 eb                	shr    ebx,cl
c002828b:	be 01 00 00 00       	mov    esi,0x1
c0028290:	d3 e6                	shl    esi,cl
c0028292:	4e                   	dec    esi
c0028293:	21 f0                	and    eax,esi
c0028295:	09 f8                	or     eax,edi
c0028297:	0f 95 c0             	setne  al
c002829a:	0f b6 c0             	movzx  eax,al
c002829d:	09 c3                	or     ebx,eax
c002829f:	89 d9                	mov    ecx,ebx
c00282a1:	c1 e9 08             	shr    ecx,0x8
c00282a4:	f6 c3 7f             	test   bl,0x7f
c00282a7:	0f 95 c0             	setne  al
c00282aa:	09 c8                	or     eax,ecx
c00282ac:	83 e0 01             	and    eax,0x1
c00282af:	c1 eb 07             	shr    ebx,0x7
c00282b2:	21 c3                	and    ebx,eax
c00282b4:	81 e2 00 00 00 80    	and    edx,0x80000000
c00282ba:	09 d1                	or     ecx,edx
c00282bc:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00282bf:	eb 76                	jmp    c0028337 <__truncdfsf2+0x11c>
c00282c1:	83 c6 80             	add    esi,0xffffff80
c00282c4:	7e 1d                	jle    c00282e3 <__truncdfsf2+0xc8>
c00282c6:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00282cc:	75 0b                	jne    c00282d9 <__truncdfsf2+0xbe>
c00282ce:	09 f8                	or     eax,edi
c00282d0:	74 09                	je     c00282db <__truncdfsf2+0xc0>
c00282d2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00282d7:	eb 02                	jmp    c00282db <__truncdfsf2+0xc0>
c00282d9:	31 c0                	xor    eax,eax
c00282db:	c1 fa 17             	sar    edx,0x17
c00282de:	80 ca ff             	or     dl,0xff
c00282e1:	eb 0e                	jmp    c00282f1 <__truncdfsf2+0xd6>
c00282e3:	c1 fa 1f             	sar    edx,0x1f
c00282e6:	c1 e2 08             	shl    edx,0x8
c00282e9:	09 ca                	or     edx,ecx
c00282eb:	eb 04                	jmp    c00282f1 <__truncdfsf2+0xd6>
c00282ed:	31 d2                	xor    edx,edx
c00282ef:	31 c0                	xor    eax,eax
c00282f1:	c1 e2 17             	shl    edx,0x17
c00282f4:	c1 e8 08             	shr    eax,0x8
c00282f7:	09 d0                	or     eax,edx
c00282f9:	eb 3c                	jmp    c0028337 <__truncdfsf2+0x11c>
c00282fb:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028301:	89 ca                	mov    edx,ecx
c0028303:	c1 fa 0b             	sar    edx,0xb
c0028306:	c1 e2 08             	shl    edx,0x8
c0028309:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002830c:	31 db                	xor    ebx,ebx
c002830e:	85 ff                	test   edi,edi
c0028310:	0f 95 c3             	setne  bl
c0028313:	09 d8                	or     eax,ebx
c0028315:	89 c3                	mov    ebx,eax
c0028317:	c1 eb 08             	shr    ebx,0x8
c002831a:	a8 7f                	test   al,0x7f
c002831c:	0f 95 c2             	setne  dl
c002831f:	89 d6                	mov    esi,edx
c0028321:	09 de                	or     esi,ebx
c0028323:	83 e6 01             	and    esi,0x1
c0028326:	c1 e8 07             	shr    eax,0x7
c0028329:	21 f0                	and    eax,esi
c002832b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002832e:	09 ca                	or     edx,ecx
c0028330:	c1 e2 17             	shl    edx,0x17
c0028333:	09 da                	or     edx,ebx
c0028335:	01 d0                	add    eax,edx
c0028337:	83 c4 0c             	add    esp,0xc
c002833a:	5b                   	pop    ebx
c002833b:	5e                   	pop    esi
c002833c:	5f                   	pop    edi
c002833d:	5d                   	pop    ebp
c002833e:	c3                   	ret    

c002833f <__extendsfdf2>:
c002833f:	55                   	push   ebp
c0028340:	89 e5                	mov    ebp,esp
c0028342:	57                   	push   edi
c0028343:	56                   	push   esi
c0028344:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028347:	89 d1                	mov    ecx,edx
c0028349:	c1 f9 17             	sar    ecx,0x17
c002834c:	c1 e2 08             	shl    edx,0x8
c002834f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028355:	89 c8                	mov    eax,ecx
c0028357:	80 e4 f8             	and    ah,0xf8
c002835a:	8d 71 01             	lea    esi,[ecx+0x1]
c002835d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028363:	75 27                	jne    c002838c <__extendsfdf2+0x4d>
c0028365:	81 e1 ff 00 00 00    	and    ecx,0xff
c002836b:	75 18                	jne    c0028385 <__extendsfdf2+0x46>
c002836d:	85 d2                	test   edx,edx
c002836f:	74 20                	je     c0028391 <__extendsfdf2+0x52>
c0028371:	41                   	inc    ecx
c0028372:	01 d2                	add    edx,edx
c0028374:	79 fb                	jns    c0028371 <__extendsfdf2+0x32>
c0028376:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002837c:	29 c8                	sub    eax,ecx
c002837e:	05 81 03 00 00       	add    eax,0x381
c0028383:	eb 0c                	jmp    c0028391 <__extendsfdf2+0x52>
c0028385:	05 00 07 00 00       	add    eax,0x700
c002838a:	eb 05                	jmp    c0028391 <__extendsfdf2+0x52>
c002838c:	05 80 03 00 00       	add    eax,0x380
c0028391:	c1 e0 14             	shl    eax,0x14
c0028394:	89 c1                	mov    ecx,eax
c0028396:	89 d0                	mov    eax,edx
c0028398:	c1 e8 0b             	shr    eax,0xb
c002839b:	09 c1                	or     ecx,eax
c002839d:	c1 e2 15             	shl    edx,0x15
c00283a0:	89 d0                	mov    eax,edx
c00283a2:	89 ca                	mov    edx,ecx
c00283a4:	5e                   	pop    esi
c00283a5:	5f                   	pop    edi
c00283a6:	5d                   	pop    ebp
c00283a7:	c3                   	ret    
c00283a8:	66 90                	xchg   ax,ax
c00283aa:	66 90                	xchg   ax,ax
c00283ac:	66 90                	xchg   ax,ax
c00283ae:	66 90                	xchg   ax,ax

c00283b0 <fabs>:
c00283b0:	83 ec 0c             	sub    esp,0xc
c00283b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00283ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00283be:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00283c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00283c7:	dd 04 24             	fld    QWORD PTR [esp]
c00283ca:	83 c4 0c             	add    esp,0xc
c00283cd:	c3                   	ret    
c00283ce:	66 90                	xchg   ax,ax

c00283d0 <lrint>:
c00283d0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00283d4:	83 ec 04             	sub    esp,0x4
c00283d7:	db 1c 24             	fistp  DWORD PTR [esp]
c00283da:	58                   	pop    eax
c00283db:	c3                   	ret    

c00283dc <lrintf>:
c00283dc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00283e0:	83 ec 04             	sub    esp,0x4
c00283e3:	db 1c 24             	fistp  DWORD PTR [esp]
c00283e6:	58                   	pop    eax
c00283e7:	c3                   	ret    

Disassembly of section .init:

c00283e8 <_init>:
c00283e8:	55                   	push   ebp
c00283e9:	89 e5                	mov    ebp,esp
c00283eb:	e8 28 7d fd ff       	call   c0000118 <frame_dummy>
c00283f0:	e8 5b e0 ff ff       	call   c0026450 <__do_global_ctors_aux>
c00283f5:	5d                   	pop    ebp
c00283f6:	c3                   	ret    

Disassembly of section .fini:

c00283f7 <_fini>:
c00283f7:	55                   	push   ebp
c00283f8:	89 e5                	mov    ebp,esp
c00283fa:	e8 a9 7c fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00283ff:	5d                   	pop    ebp
c0028400:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028402 <Computer::~Computer()>:
c0028402:	83 ec 0c             	sub    esp,0xc
c0028405:	ba 7c 9f 02 c0       	mov    edx,0xc0029f7c
c002840a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002840e:	89 10                	mov    DWORD PTR [eax],edx
c0028410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028414:	83 ec 0c             	sub    esp,0xc
c0028417:	50                   	push   eax
c0028418:	e8 ed b5 fe ff       	call   c0013a0a <Device::~Device()>
c002841d:	83 c4 10             	add    esp,0x10
c0028420:	90                   	nop
c0028421:	83 c4 0c             	add    esp,0xc
c0028424:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028426 <Computer::~Computer()>:
c0028426:	83 ec 0c             	sub    esp,0xc
c0028429:	83 ec 0c             	sub    esp,0xc
c002842c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028430:	e8 cd ff ff ff       	call   c0028402 <Computer::~Computer()>
c0028435:	83 c4 10             	add    esp,0x10
c0028438:	83 ec 08             	sub    esp,0x8
c002843b:	68 ec 01 00 00       	push   0x1ec
c0028440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028444:	e8 e2 a1 fe ff       	call   c001262b <operator delete(void*, unsigned long)>
c0028449:	83 c4 10             	add    esp,0x10
c002844c:	83 c4 0c             	add    esp,0xc
c002844f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028450 <idleCommon()>:
c0028450:	83 ec 0c             	sub    esp,0xc
c0028453:	fa                   	cli    
c0028454:	ff 05 08 0f 03 c0    	inc    DWORD PTR ds:0xc0030f08
c002845a:	e8 9a 55 ff ff       	call   c001d9f9 <schedule()>
c002845f:	a1 08 0f 03 c0       	mov    eax,ds:0xc0030f08
c0028464:	48                   	dec    eax
c0028465:	a3 08 0f 03 c0       	mov    ds:0xc0030f08,eax
c002846a:	75 01                	jne    c002846d <idleCommon()+0x1d>
c002846c:	fb                   	sti    
c002846d:	83 c4 0c             	add    esp,0xc
c0028470:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028472 <LinkedList<UnixFile>::~LinkedList()>:
c0028472:	90                   	nop
c0028473:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028474 <LinkedList<UnixFile>::LinkedList()>:
c0028474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028478:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002847e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028482:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028489:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002848d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028494:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028498:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002849e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00284a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00284a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00284ad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00284b4:	90                   	nop
c00284b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00284b6 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00284b6:	83 ec 0c             	sub    esp,0xc
c00284b9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00284be:	75 10                	jne    c00284d0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00284c0:	83 ec 0c             	sub    esp,0xc
c00284c3:	68 5c a2 02 c0       	push   0xc002a25c
c00284c8:	e8 a2 19 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c00284cd:	83 c4 10             	add    esp,0x10
c00284d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00284d6:	85 c0                	test   eax,eax
c00284d8:	74 34                	je     c002850e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00284da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284e1:	85 c0                	test   eax,eax
c00284e3:	74 29                	je     c002850e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00284e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284f0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00284f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00284fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028502:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028505:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002850c:	eb 65                	jmp    c0028573 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002850e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028512:	8b 00                	mov    eax,DWORD PTR [eax]
c0028514:	85 c0                	test   eax,eax
c0028516:	75 4b                	jne    c0028563 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002851c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002851f:	85 c0                	test   eax,eax
c0028521:	75 40                	jne    c0028563 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028527:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002852b:	89 10                	mov    DWORD PTR [eax],edx
c002852d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028531:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028535:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002853c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002853f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002854a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002854d:	85 c0                	test   eax,eax
c002854f:	74 22                	je     c0028573 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028551:	83 ec 0c             	sub    esp,0xc
c0028554:	68 7e a2 02 c0       	push   0xc002a27e
c0028559:	e8 11 19 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c002855e:	83 c4 10             	add    esp,0x10
c0028561:	eb 10                	jmp    c0028573 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028563:	83 ec 0c             	sub    esp,0xc
c0028566:	68 88 a2 02 c0       	push   0xc002a288
c002856b:	e8 ff 18 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c0028570:	83 c4 10             	add    esp,0x10
c0028573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028577:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002857a:	8d 50 01             	lea    edx,[eax+0x1]
c002857d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028581:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028584:	90                   	nop
c0028585:	83 c4 0c             	add    esp,0xc
c0028588:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002858a <LinkedList<UnixFile>::getFirstElement()>:
c002858a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002858e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028590:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028592 <LinkedList<UnixFile>::removeFirst()>:
c0028592:	83 ec 0c             	sub    esp,0xc
c0028595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028599:	8b 00                	mov    eax,DWORD PTR [eax]
c002859b:	85 c0                	test   eax,eax
c002859d:	75 12                	jne    c00285b1 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002859f:	83 ec 0c             	sub    esp,0xc
c00285a2:	68 94 a2 02 c0       	push   0xc002a294
c00285a7:	e8 c3 18 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c00285ac:	83 c4 10             	add    esp,0x10
c00285af:	eb 7e                	jmp    c002862f <LinkedList<UnixFile>::removeFirst()+0x9d>
c00285b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285b8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285bb:	85 c0                	test   eax,eax
c00285bd:	74 10                	je     c00285cf <LinkedList<UnixFile>::removeFirst()+0x3d>
c00285bf:	83 ec 0c             	sub    esp,0xc
c00285c2:	68 df a2 02 c0       	push   0xc002a2df
c00285c7:	e8 a3 18 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c00285cc:	83 c4 10             	add    esp,0x10
c00285cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00285d5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285d8:	85 c0                	test   eax,eax
c00285da:	75 33                	jne    c002860f <LinkedList<UnixFile>::removeFirst()+0x7d>
c00285dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285f5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285f8:	83 f8 01             	cmp    eax,0x1
c00285fb:	74 21                	je     c002861e <LinkedList<UnixFile>::removeFirst()+0x8c>
c00285fd:	83 ec 0c             	sub    esp,0xc
c0028600:	68 b8 a2 02 c0       	push   0xc002a2b8
c0028605:	e8 65 18 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c002860a:	83 c4 10             	add    esp,0x10
c002860d:	eb 0f                	jmp    c002861e <LinkedList<UnixFile>::removeFirst()+0x8c>
c002860f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028613:	8b 00                	mov    eax,DWORD PTR [eax]
c0028615:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002861c:	89 10                	mov    DWORD PTR [eax],edx
c002861e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028622:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028625:	8d 50 ff             	lea    edx,[eax-0x1]
c0028628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002862c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002862f:	83 c4 0c             	add    esp,0xc
c0028632:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028634 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028634:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028638:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002863b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002863c <DriverlessDevice::~DriverlessDevice()>:
c002863c:	ba 1c ab 02 c0       	mov    edx,0xc002ab1c
c0028641:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028645:	89 10                	mov    DWORD PTR [eax],edx
c0028647:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002864b:	50                   	push   eax
c002864c:	e8 b9 b3 fe ff       	call   c0013a0a <Device::~Device()>
c0028651:	83 c4 04             	add    esp,0x4
c0028654:	90                   	nop
c0028655:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028656 <DriverlessDevice::~DriverlessDevice()>:
c0028656:	83 ec 0c             	sub    esp,0xc
c0028659:	83 ec 0c             	sub    esp,0xc
c002865c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028660:	e8 d7 ff ff ff       	call   c002863c <DriverlessDevice::~DriverlessDevice()>
c0028665:	83 c4 10             	add    esp,0x10
c0028668:	83 ec 08             	sub    esp,0x8
c002866b:	68 58 01 00 00       	push   0x158
c0028670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028674:	e8 b2 9f fe ff       	call   c001262b <operator delete(void*, unsigned long)>
c0028679:	83 c4 10             	add    esp,0x10
c002867c:	83 c4 0c             	add    esp,0xc
c002867f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028680 <LinkedList<Device>::addElement(Device*)>:
c0028680:	83 ec 0c             	sub    esp,0xc
c0028683:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028688:	75 10                	jne    c002869a <LinkedList<Device>::addElement(Device*)+0x1a>
c002868a:	83 ec 0c             	sub    esp,0xc
c002868d:	68 5c a2 02 c0       	push   0xc002a25c
c0028692:	e8 d8 17 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c0028697:	83 c4 10             	add    esp,0x10
c002869a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002869e:	8b 00                	mov    eax,DWORD PTR [eax]
c00286a0:	85 c0                	test   eax,eax
c00286a2:	74 3a                	je     c00286de <LinkedList<Device>::addElement(Device*)+0x5e>
c00286a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286ab:	85 c0                	test   eax,eax
c00286ad:	74 2f                	je     c00286de <LinkedList<Device>::addElement(Device*)+0x5e>
c00286af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286ba:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00286c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286c8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286d2:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00286dc:	eb 68                	jmp    c0028746 <LinkedList<Device>::addElement(Device*)+0xc6>
c00286de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00286e4:	85 c0                	test   eax,eax
c00286e6:	75 4e                	jne    c0028736 <LinkedList<Device>::addElement(Device*)+0xb6>
c00286e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286ef:	85 c0                	test   eax,eax
c00286f1:	75 43                	jne    c0028736 <LinkedList<Device>::addElement(Device*)+0xb6>
c00286f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286fb:	89 10                	mov    DWORD PTR [eax],edx
c00286fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028701:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028705:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002870c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002870f:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002871d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028720:	85 c0                	test   eax,eax
c0028722:	74 22                	je     c0028746 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028724:	83 ec 0c             	sub    esp,0xc
c0028727:	68 7e a2 02 c0       	push   0xc002a27e
c002872c:	e8 3e 17 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c0028731:	83 c4 10             	add    esp,0x10
c0028734:	eb 10                	jmp    c0028746 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028736:	83 ec 0c             	sub    esp,0xc
c0028739:	68 88 a2 02 c0       	push   0xc002a288
c002873e:	e8 2c 17 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c0028743:	83 c4 10             	add    esp,0x10
c0028746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002874d:	8d 50 01             	lea    edx,[eax+0x1]
c0028750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028754:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028757:	90                   	nop
c0028758:	83 c4 0c             	add    esp,0xc
c002875b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002875c <LinkedList<Device>::LinkedList()>:
c002875c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028760:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028766:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002876a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028771:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028775:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002877c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028780:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028786:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002878a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028791:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028795:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002879c:	90                   	nop
c002879d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002879e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002879e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00287a4:	85 c0                	test   eax,eax
c00287a6:	75 0e                	jne    c00287b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00287a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287af:	85 c0                	test   eax,eax
c00287b1:	75 03                	jne    c00287b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00287b3:	b0 01                	mov    al,0x1
c00287b5:	c3                   	ret    
c00287b6:	b0 00                	mov    al,0x0
c00287b8:	90                   	nop
c00287b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00287ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00287ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287be:	8b 00                	mov    eax,DWORD PTR [eax]
c00287c0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00287c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00287c2:	83 ec 0c             	sub    esp,0xc
c00287c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00287cb:	85 c0                	test   eax,eax
c00287cd:	75 15                	jne    c00287e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00287cf:	83 ec 0c             	sub    esp,0xc
c00287d2:	68 94 a2 02 c0       	push   0xc002a294
c00287d7:	e8 93 16 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c00287dc:	83 c4 10             	add    esp,0x10
c00287df:	e9 88 00 00 00       	jmp    c002886c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00287e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287eb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00287ee:	85 c0                	test   eax,eax
c00287f0:	0f 95 c0             	setne  al
c00287f3:	84 c0                	test   al,al
c00287f5:	74 10                	je     c0028807 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00287f7:	83 ec 0c             	sub    esp,0xc
c00287fa:	68 df a2 02 c0       	push   0xc002a2df
c00287ff:	e8 6b 16 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c0028804:	83 c4 10             	add    esp,0x10
c0028807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002880b:	8b 00                	mov    eax,DWORD PTR [eax]
c002880d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028810:	85 c0                	test   eax,eax
c0028812:	0f 94 c0             	sete   al
c0028815:	84 c0                	test   al,al
c0028817:	74 33                	je     c002884c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028827:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002882e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028832:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028835:	83 f8 01             	cmp    eax,0x1
c0028838:	74 21                	je     c002885b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002883a:	83 ec 0c             	sub    esp,0xc
c002883d:	68 b8 a2 02 c0       	push   0xc002a2b8
c0028842:	e8 28 16 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c0028847:	83 c4 10             	add    esp,0x10
c002884a:	eb 0f                	jmp    c002885b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002884c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028850:	8b 00                	mov    eax,DWORD PTR [eax]
c0028852:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028859:	89 10                	mov    DWORD PTR [eax],edx
c002885b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028862:	8d 50 ff             	lea    edx,[eax-0x1]
c0028865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002886c:	83 c4 0c             	add    esp,0xc
c002886f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028870:	83 ec 0c             	sub    esp,0xc
c0028873:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028878:	75 10                	jne    c002888a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002887a:	83 ec 0c             	sub    esp,0xc
c002887d:	68 5c a2 02 c0       	push   0xc002a25c
c0028882:	e8 e8 15 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c0028887:	83 c4 10             	add    esp,0x10
c002888a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028890:	85 c0                	test   eax,eax
c0028892:	74 34                	je     c00288c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028898:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002889b:	85 c0                	test   eax,eax
c002889d:	74 29                	je     c00288c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002889f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288aa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00288ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288bf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00288c6:	eb 65                	jmp    c002892d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00288c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00288ce:	85 c0                	test   eax,eax
c00288d0:	75 4b                	jne    c002891d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00288d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288d9:	85 c0                	test   eax,eax
c00288db:	75 40                	jne    c002891d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00288dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288e5:	89 10                	mov    DWORD PTR [eax],edx
c00288e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288f9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028904:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028907:	85 c0                	test   eax,eax
c0028909:	74 22                	je     c002892d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002890b:	83 ec 0c             	sub    esp,0xc
c002890e:	68 7e a2 02 c0       	push   0xc002a27e
c0028913:	e8 57 15 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c0028918:	83 c4 10             	add    esp,0x10
c002891b:	eb 10                	jmp    c002892d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002891d:	83 ec 0c             	sub    esp,0xc
c0028920:	68 88 a2 02 c0       	push   0xc002a288
c0028925:	e8 45 15 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c002892a:	83 c4 10             	add    esp,0x10
c002892d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028931:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028934:	8d 50 01             	lea    edx,[eax+0x1]
c0028937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002893b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002893e:	90                   	nop
c002893f:	83 c4 0c             	add    esp,0xc
c0028942:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028944 <ACPI::~ACPI()>:
c0028944:	83 ec 0c             	sub    esp,0xc
c0028947:	ba 88 b3 02 c0       	mov    edx,0xc002b388
c002894c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028950:	89 10                	mov    DWORD PTR [eax],edx
c0028952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028956:	83 ec 0c             	sub    esp,0xc
c0028959:	50                   	push   eax
c002895a:	e8 ab b0 fe ff       	call   c0013a0a <Device::~Device()>
c002895f:	83 c4 10             	add    esp,0x10
c0028962:	90                   	nop
c0028963:	83 c4 0c             	add    esp,0xc
c0028966:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028968 <ACPI::~ACPI()>:
c0028968:	83 ec 0c             	sub    esp,0xc
c002896b:	83 ec 0c             	sub    esp,0xc
c002896e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028972:	e8 cd ff ff ff       	call   c0028944 <ACPI::~ACPI()>
c0028977:	83 c4 10             	add    esp,0x10
c002897a:	83 ec 08             	sub    esp,0x8
c002897d:	68 64 12 00 00       	push   0x1264
c0028982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028986:	e8 a0 9c fe ff       	call   c001262b <operator delete(void*, unsigned long)>
c002898b:	83 c4 10             	add    esp,0x10
c002898e:	83 c4 0c             	add    esp,0xc
c0028991:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028992 <LinkedList<Device>::~LinkedList()>:
c0028992:	90                   	nop
c0028993:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028994 <LinkedList<Device>::isEmpty()>:
c0028994:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028998:	8b 00                	mov    eax,DWORD PTR [eax]
c002899a:	85 c0                	test   eax,eax
c002899c:	75 0e                	jne    c00289ac <LinkedList<Device>::isEmpty()+0x18>
c002899e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289a5:	85 c0                	test   eax,eax
c00289a7:	75 03                	jne    c00289ac <LinkedList<Device>::isEmpty()+0x18>
c00289a9:	b0 01                	mov    al,0x1
c00289ab:	c3                   	ret    
c00289ac:	b0 00                	mov    al,0x0
c00289ae:	90                   	nop
c00289af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00289b0 <LinkedList<Device>::getFirstElement()>:
c00289b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00289b6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00289b8 <LinkedList<Device>::removeFirst()>:
c00289b8:	83 ec 0c             	sub    esp,0xc
c00289bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00289c1:	85 c0                	test   eax,eax
c00289c3:	75 15                	jne    c00289da <LinkedList<Device>::removeFirst()+0x22>
c00289c5:	83 ec 0c             	sub    esp,0xc
c00289c8:	68 94 a2 02 c0       	push   0xc002a294
c00289cd:	e8 9d 14 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c00289d2:	83 c4 10             	add    esp,0x10
c00289d5:	e9 87 00 00 00       	jmp    c0028a61 <LinkedList<Device>::removeFirst()+0xa9>
c00289da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289e1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00289e7:	85 c0                	test   eax,eax
c00289e9:	74 10                	je     c00289fb <LinkedList<Device>::removeFirst()+0x43>
c00289eb:	83 ec 0c             	sub    esp,0xc
c00289ee:	68 df a2 02 c0       	push   0xc002a2df
c00289f3:	e8 77 14 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c00289f8:	83 c4 10             	add    esp,0x10
c00289fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a01:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028a07:	85 c0                	test   eax,eax
c0028a09:	75 33                	jne    c0028a3e <LinkedList<Device>::removeFirst()+0x86>
c0028a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a0f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a19:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a27:	83 f8 01             	cmp    eax,0x1
c0028a2a:	74 24                	je     c0028a50 <LinkedList<Device>::removeFirst()+0x98>
c0028a2c:	83 ec 0c             	sub    esp,0xc
c0028a2f:	68 b8 a2 02 c0       	push   0xc002a2b8
c0028a34:	e8 36 14 ff ff       	call   c0019e6f <Krnl::panic(char const*)>
c0028a39:	83 c4 10             	add    esp,0x10
c0028a3c:	eb 12                	jmp    c0028a50 <LinkedList<Device>::removeFirst()+0x98>
c0028a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a42:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a44:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0028a4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a4e:	89 10                	mov    DWORD PTR [eax],edx
c0028a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a57:	8d 50 ff             	lea    edx,[eax-0x1]
c0028a5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a5e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a61:	83 c4 0c             	add    esp,0xc
c0028a64:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028a66 <CPU::~CPU()>:
c0028a66:	83 ec 0c             	sub    esp,0xc
c0028a69:	ba d8 b5 02 c0       	mov    edx,0xc002b5d8
c0028a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a72:	89 10                	mov    DWORD PTR [eax],edx
c0028a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a78:	83 ec 0c             	sub    esp,0xc
c0028a7b:	50                   	push   eax
c0028a7c:	e8 89 af fe ff       	call   c0013a0a <Device::~Device()>
c0028a81:	83 c4 10             	add    esp,0x10
c0028a84:	90                   	nop
c0028a85:	83 c4 0c             	add    esp,0xc
c0028a88:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028a8a <CPU::~CPU()>:
c0028a8a:	83 ec 0c             	sub    esp,0xc
c0028a8d:	83 ec 0c             	sub    esp,0xc
c0028a90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a94:	e8 cd ff ff ff       	call   c0028a66 <CPU::~CPU()>
c0028a99:	83 c4 10             	add    esp,0x10
c0028a9c:	83 ec 08             	sub    esp,0x8
c0028a9f:	68 98 11 00 00       	push   0x1198
c0028aa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028aa8:	e8 7e 9b fe ff       	call   c001262b <operator delete(void*, unsigned long)>
c0028aad:	83 c4 10             	add    esp,0x10
c0028ab0:	83 c4 0c             	add    esp,0xc
c0028ab3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028ab4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028ab4:	90                   	nop
c0028ab5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028ab6 <ThreadControlBlock::ThreadControlBlock()>:
c0028ab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aba:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028ac1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ac5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028acc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ad0:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028ad7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028adb:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028ae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ae6:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028af1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028af5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028af9:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028afd:	90                   	nop
c0028afe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028b00 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028b00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b04:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b0e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b19:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b24:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b2e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b39:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b40:	90                   	nop
c0028b41:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028b42 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028b42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b46:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b49:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028b4a <Vm::_FPUState::_FPUState()>:
c0028b4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b4e:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028b55:	90                   	nop
c0028b56:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028b58 <PCI::~PCI()>:
c0028b58:	83 ec 0c             	sub    esp,0xc
c0028b5b:	ba 04 c1 02 c0       	mov    edx,0xc002c104
c0028b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b64:	89 10                	mov    DWORD PTR [eax],edx
c0028b66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b6a:	83 ec 0c             	sub    esp,0xc
c0028b6d:	50                   	push   eax
c0028b6e:	e8 67 a8 fe ff       	call   c00133da <Bus::~Bus()>
c0028b73:	83 c4 10             	add    esp,0x10
c0028b76:	90                   	nop
c0028b77:	83 c4 0c             	add    esp,0xc
c0028b7a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028b7c <PCI::~PCI()>:
c0028b7c:	83 ec 0c             	sub    esp,0xc
c0028b7f:	83 ec 0c             	sub    esp,0xc
c0028b82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b86:	e8 cd ff ff ff       	call   c0028b58 <PCI::~PCI()>
c0028b8b:	83 c4 10             	add    esp,0x10
c0028b8e:	83 ec 08             	sub    esp,0x8
c0028b91:	68 5c 01 00 00       	push   0x15c
c0028b96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b9a:	e8 8c 9a fe ff       	call   c001262b <operator delete(void*, unsigned long)>
c0028b9f:	83 c4 10             	add    esp,0x10
c0028ba2:	83 c4 0c             	add    esp,0xc
c0028ba5:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028ba6 <IDE::~IDE()>:
c0028ba6:	83 ec 0c             	sub    esp,0xc
c0028ba9:	ba b8 c1 02 c0       	mov    edx,0xc002c1b8
c0028bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb2:	89 10                	mov    DWORD PTR [eax],edx
c0028bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb8:	83 ec 0c             	sub    esp,0xc
c0028bbb:	50                   	push   eax
c0028bbc:	e8 5f b3 fe ff       	call   c0013f20 <HardDiskController::~HardDiskController()>
c0028bc1:	83 c4 10             	add    esp,0x10
c0028bc4:	90                   	nop
c0028bc5:	83 c4 0c             	add    esp,0xc
c0028bc8:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028bca <IDE::~IDE()>:
c0028bca:	83 ec 0c             	sub    esp,0xc
c0028bcd:	83 ec 0c             	sub    esp,0xc
c0028bd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bd4:	e8 cd ff ff ff       	call   c0028ba6 <IDE::~IDE()>
c0028bd9:	83 c4 10             	add    esp,0x10
c0028bdc:	83 ec 08             	sub    esp,0x8
c0028bdf:	68 70 02 00 00       	push   0x270
c0028be4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028be8:	e8 3e 9a fe ff       	call   c001262b <operator delete(void*, unsigned long)>
c0028bed:	83 c4 10             	add    esp,0x10
c0028bf0:	83 c4 0c             	add    esp,0xc
c0028bf3:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028bf4 <SATABus::~SATABus()>:
c0028bf4:	83 ec 0c             	sub    esp,0xc
c0028bf7:	ba 30 c2 02 c0       	mov    edx,0xc002c230
c0028bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c00:	89 10                	mov    DWORD PTR [eax],edx
c0028c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c06:	83 ec 0c             	sub    esp,0xc
c0028c09:	50                   	push   eax
c0028c0a:	e8 11 b3 fe ff       	call   c0013f20 <HardDiskController::~HardDiskController()>
c0028c0f:	83 c4 10             	add    esp,0x10
c0028c12:	90                   	nop
c0028c13:	83 c4 0c             	add    esp,0xc
c0028c16:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028c18 <SATABus::~SATABus()>:
c0028c18:	83 ec 0c             	sub    esp,0xc
c0028c1b:	83 ec 0c             	sub    esp,0xc
c0028c1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c22:	e8 cd ff ff ff       	call   c0028bf4 <SATABus::~SATABus()>
c0028c27:	83 c4 10             	add    esp,0x10
c0028c2a:	83 ec 08             	sub    esp,0x8
c0028c2d:	68 64 01 00 00       	push   0x164
c0028c32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c36:	e8 f0 99 fe ff       	call   c001262b <operator delete(void*, unsigned long)>
c0028c3b:	83 c4 10             	add    esp,0x10
c0028c3e:	83 c4 0c             	add    esp,0xc
c0028c41:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028c42 <ATA::~ATA()>:
c0028c42:	83 ec 0c             	sub    esp,0xc
c0028c45:	ba 7c c2 02 c0       	mov    edx,0xc002c27c
c0028c4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c4e:	89 10                	mov    DWORD PTR [eax],edx
c0028c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c54:	83 ec 0c             	sub    esp,0xc
c0028c57:	50                   	push   eax
c0028c58:	e8 a5 b3 fe ff       	call   c0014002 <PhysicalDisk::~PhysicalDisk()>
c0028c5d:	83 c4 10             	add    esp,0x10
c0028c60:	90                   	nop
c0028c61:	83 c4 0c             	add    esp,0xc
c0028c64:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028c66 <ATA::~ATA()>:
c0028c66:	83 ec 0c             	sub    esp,0xc
c0028c69:	83 ec 0c             	sub    esp,0xc
c0028c6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c70:	e8 cd ff ff ff       	call   c0028c42 <ATA::~ATA()>
c0028c75:	83 c4 10             	add    esp,0x10
c0028c78:	83 ec 08             	sub    esp,0x8
c0028c7b:	68 7c 01 00 00       	push   0x17c
c0028c80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c84:	e8 a2 99 fe ff       	call   c001262b <operator delete(void*, unsigned long)>
c0028c89:	83 c4 10             	add    esp,0x10
c0028c8c:	83 c4 0c             	add    esp,0xc
c0028c8f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028c90 <ATAPI::~ATAPI()>:
c0028c90:	83 ec 0c             	sub    esp,0xc
c0028c93:	ba b4 c2 02 c0       	mov    edx,0xc002c2b4
c0028c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c9c:	89 10                	mov    DWORD PTR [eax],edx
c0028c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca2:	83 ec 0c             	sub    esp,0xc
c0028ca5:	50                   	push   eax
c0028ca6:	e8 57 b3 fe ff       	call   c0014002 <PhysicalDisk::~PhysicalDisk()>
c0028cab:	83 c4 10             	add    esp,0x10
c0028cae:	90                   	nop
c0028caf:	83 c4 0c             	add    esp,0xc
c0028cb2:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028cb4 <ATAPI::~ATAPI()>:
c0028cb4:	83 ec 0c             	sub    esp,0xc
c0028cb7:	83 ec 0c             	sub    esp,0xc
c0028cba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cbe:	e8 cd ff ff ff       	call   c0028c90 <ATAPI::~ATAPI()>
c0028cc3:	83 c4 10             	add    esp,0x10
c0028cc6:	83 ec 08             	sub    esp,0x8
c0028cc9:	68 80 01 00 00       	push   0x180
c0028cce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cd2:	e8 54 99 fe ff       	call   c001262b <operator delete(void*, unsigned long)>
c0028cd7:	83 c4 10             	add    esp,0x10
c0028cda:	83 c4 0c             	add    esp,0xc
c0028cdd:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028cde <SATA::~SATA()>:
c0028cde:	83 ec 0c             	sub    esp,0xc
c0028ce1:	ba 68 c3 02 c0       	mov    edx,0xc002c368
c0028ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cea:	89 10                	mov    DWORD PTR [eax],edx
c0028cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf0:	83 ec 0c             	sub    esp,0xc
c0028cf3:	50                   	push   eax
c0028cf4:	e8 09 b3 fe ff       	call   c0014002 <PhysicalDisk::~PhysicalDisk()>
c0028cf9:	83 c4 10             	add    esp,0x10
c0028cfc:	90                   	nop
c0028cfd:	83 c4 0c             	add    esp,0xc
c0028d00:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028d02 <SATA::~SATA()>:
c0028d02:	83 ec 0c             	sub    esp,0xc
c0028d05:	83 ec 0c             	sub    esp,0xc
c0028d08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d0c:	e8 cd ff ff ff       	call   c0028cde <SATA::~SATA()>
c0028d11:	83 c4 10             	add    esp,0x10
c0028d14:	83 ec 08             	sub    esp,0x8
c0028d17:	68 7c 01 00 00       	push   0x17c
c0028d1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d20:	e8 06 99 fe ff       	call   c001262b <operator delete(void*, unsigned long)>
c0028d25:	83 c4 10             	add    esp,0x10
c0028d28:	83 c4 0c             	add    esp,0xc
c0028d2b:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028d2c <SATAPI::~SATAPI()>:
c0028d2c:	83 ec 0c             	sub    esp,0xc
c0028d2f:	ba 44 c4 02 c0       	mov    edx,0xc002c444
c0028d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d38:	89 10                	mov    DWORD PTR [eax],edx
c0028d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d3e:	83 ec 0c             	sub    esp,0xc
c0028d41:	50                   	push   eax
c0028d42:	e8 bb b2 fe ff       	call   c0014002 <PhysicalDisk::~PhysicalDisk()>
c0028d47:	83 c4 10             	add    esp,0x10
c0028d4a:	90                   	nop
c0028d4b:	83 c4 0c             	add    esp,0xc
c0028d4e:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028d50 <SATAPI::~SATAPI()>:
c0028d50:	83 ec 0c             	sub    esp,0xc
c0028d53:	83 ec 0c             	sub    esp,0xc
c0028d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d5a:	e8 cd ff ff ff       	call   c0028d2c <SATAPI::~SATAPI()>
c0028d5f:	83 c4 10             	add    esp,0x10
c0028d62:	83 ec 08             	sub    esp,0x8
c0028d65:	68 80 01 00 00       	push   0x180
c0028d6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d6e:	e8 b8 98 fe ff       	call   c001262b <operator delete(void*, unsigned long)>
c0028d73:	83 c4 10             	add    esp,0x10
c0028d76:	83 c4 0c             	add    esp,0xc
c0028d79:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028d7a <AVX::~AVX()>:
c0028d7a:	83 ec 0c             	sub    esp,0xc
c0028d7d:	ba 84 c4 02 c0       	mov    edx,0xc002c484
c0028d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d86:	89 10                	mov    DWORD PTR [eax],edx
c0028d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d8c:	83 ec 0c             	sub    esp,0xc
c0028d8f:	50                   	push   eax
c0028d90:	e8 f1 b2 fe ff       	call   c0014086 <FPU::~FPU()>
c0028d95:	83 c4 10             	add    esp,0x10
c0028d98:	90                   	nop
c0028d99:	83 c4 0c             	add    esp,0xc
c0028d9c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028d9e <AVX::~AVX()>:
c0028d9e:	83 ec 0c             	sub    esp,0xc
c0028da1:	83 ec 0c             	sub    esp,0xc
c0028da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028da8:	e8 cd ff ff ff       	call   c0028d7a <AVX::~AVX()>
c0028dad:	83 c4 10             	add    esp,0x10
c0028db0:	83 ec 08             	sub    esp,0x8
c0028db3:	68 58 01 00 00       	push   0x158
c0028db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dbc:	e8 6a 98 fe ff       	call   c001262b <operator delete(void*, unsigned long)>
c0028dc1:	83 c4 10             	add    esp,0x10
c0028dc4:	83 c4 0c             	add    esp,0xc
c0028dc7:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028dc8 <MMX::~MMX()>:
c0028dc8:	83 ec 0c             	sub    esp,0xc
c0028dcb:	ba c4 c4 02 c0       	mov    edx,0xc002c4c4
c0028dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dd4:	89 10                	mov    DWORD PTR [eax],edx
c0028dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dda:	83 ec 0c             	sub    esp,0xc
c0028ddd:	50                   	push   eax
c0028dde:	e8 a3 b2 fe ff       	call   c0014086 <FPU::~FPU()>
c0028de3:	83 c4 10             	add    esp,0x10
c0028de6:	90                   	nop
c0028de7:	83 c4 0c             	add    esp,0xc
c0028dea:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028dec <MMX::~MMX()>:
c0028dec:	83 ec 0c             	sub    esp,0xc
c0028def:	83 ec 0c             	sub    esp,0xc
c0028df2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028df6:	e8 cd ff ff ff       	call   c0028dc8 <MMX::~MMX()>
c0028dfb:	83 c4 10             	add    esp,0x10
c0028dfe:	83 ec 08             	sub    esp,0x8
c0028e01:	68 58 01 00 00       	push   0x158
c0028e06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e0a:	e8 1c 98 fe ff       	call   c001262b <operator delete(void*, unsigned long)>
c0028e0f:	83 c4 10             	add    esp,0x10
c0028e12:	83 c4 0c             	add    esp,0xc
c0028e15:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028e16 <SSE::~SSE()>:
c0028e16:	83 ec 0c             	sub    esp,0xc
c0028e19:	ba 04 c5 02 c0       	mov    edx,0xc002c504
c0028e1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e22:	89 10                	mov    DWORD PTR [eax],edx
c0028e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e28:	83 ec 0c             	sub    esp,0xc
c0028e2b:	50                   	push   eax
c0028e2c:	e8 55 b2 fe ff       	call   c0014086 <FPU::~FPU()>
c0028e31:	83 c4 10             	add    esp,0x10
c0028e34:	90                   	nop
c0028e35:	83 c4 0c             	add    esp,0xc
c0028e38:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028e3a <SSE::~SSE()>:
c0028e3a:	83 ec 0c             	sub    esp,0xc
c0028e3d:	83 ec 0c             	sub    esp,0xc
c0028e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e44:	e8 cd ff ff ff       	call   c0028e16 <SSE::~SSE()>
c0028e49:	83 c4 10             	add    esp,0x10
c0028e4c:	83 ec 08             	sub    esp,0x8
c0028e4f:	68 58 01 00 00       	push   0x158
c0028e54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e58:	e8 ce 97 fe ff       	call   c001262b <operator delete(void*, unsigned long)>
c0028e5d:	83 c4 10             	add    esp,0x10
c0028e60:	83 c4 0c             	add    esp,0xc
c0028e63:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028e64 <x87::~x87()>:
c0028e64:	83 ec 0c             	sub    esp,0xc
c0028e67:	ba 44 c5 02 c0       	mov    edx,0xc002c544
c0028e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e70:	89 10                	mov    DWORD PTR [eax],edx
c0028e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e76:	83 ec 0c             	sub    esp,0xc
c0028e79:	50                   	push   eax
c0028e7a:	e8 07 b2 fe ff       	call   c0014086 <FPU::~FPU()>
c0028e7f:	83 c4 10             	add    esp,0x10
c0028e82:	90                   	nop
c0028e83:	83 c4 0c             	add    esp,0xc
c0028e86:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028e88 <x87::~x87()>:
c0028e88:	83 ec 0c             	sub    esp,0xc
c0028e8b:	83 ec 0c             	sub    esp,0xc
c0028e8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e92:	e8 cd ff ff ff       	call   c0028e64 <x87::~x87()>
c0028e97:	83 c4 10             	add    esp,0x10
c0028e9a:	83 ec 08             	sub    esp,0x8
c0028e9d:	68 58 01 00 00       	push   0x158
c0028ea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ea6:	e8 80 97 fe ff       	call   c001262b <operator delete(void*, unsigned long)>
c0028eab:	83 c4 10             	add    esp,0x10
c0028eae:	83 c4 0c             	add    esp,0xc
c0028eb1:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028eb2 <IOAPIC::~IOAPIC()>:
c0028eb2:	83 ec 0c             	sub    esp,0xc
c0028eb5:	ba 9c c6 02 c0       	mov    edx,0xc002c69c
c0028eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ebe:	89 10                	mov    DWORD PTR [eax],edx
c0028ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ec4:	83 ec 0c             	sub    esp,0xc
c0028ec7:	50                   	push   eax
c0028ec8:	e8 3d ab fe ff       	call   c0013a0a <Device::~Device()>
c0028ecd:	83 c4 10             	add    esp,0x10
c0028ed0:	90                   	nop
c0028ed1:	83 c4 0c             	add    esp,0xc
c0028ed4:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028ed6 <IOAPIC::~IOAPIC()>:
c0028ed6:	83 ec 0c             	sub    esp,0xc
c0028ed9:	83 ec 0c             	sub    esp,0xc
c0028edc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee0:	e8 cd ff ff ff       	call   c0028eb2 <IOAPIC::~IOAPIC()>
c0028ee5:	83 c4 10             	add    esp,0x10
c0028ee8:	83 ec 08             	sub    esp,0x8
c0028eeb:	68 68 01 00 00       	push   0x168
c0028ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ef4:	e8 32 97 fe ff       	call   c001262b <operator delete(void*, unsigned long)>
c0028ef9:	83 c4 10             	add    esp,0x10
c0028efc:	83 c4 0c             	add    esp,0xc
c0028eff:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028f00 <APIC::~APIC()>:
c0028f00:	83 ec 0c             	sub    esp,0xc
c0028f03:	ba 54 c6 02 c0       	mov    edx,0xc002c654
c0028f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f0c:	89 10                	mov    DWORD PTR [eax],edx
c0028f0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f12:	83 ec 0c             	sub    esp,0xc
c0028f15:	50                   	push   eax
c0028f16:	e8 35 b6 fe ff       	call   c0014550 <InterruptController::~InterruptController()>
c0028f1b:	83 c4 10             	add    esp,0x10
c0028f1e:	90                   	nop
c0028f1f:	83 c4 0c             	add    esp,0xc
c0028f22:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028f24 <APIC::~APIC()>:
c0028f24:	83 ec 0c             	sub    esp,0xc
c0028f27:	83 ec 0c             	sub    esp,0xc
c0028f2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f2e:	e8 cd ff ff ff       	call   c0028f00 <APIC::~APIC()>
c0028f33:	83 c4 10             	add    esp,0x10
c0028f36:	83 ec 08             	sub    esp,0x8
c0028f39:	68 58 21 00 00       	push   0x2158
c0028f3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f42:	e8 e4 96 fe ff       	call   c001262b <operator delete(void*, unsigned long)>
c0028f47:	83 c4 10             	add    esp,0x10
c0028f4a:	83 c4 0c             	add    esp,0xc
c0028f4d:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028f4e <PIC::~PIC()>:
c0028f4e:	83 ec 0c             	sub    esp,0xc
c0028f51:	ba ec c6 02 c0       	mov    edx,0xc002c6ec
c0028f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f5a:	89 10                	mov    DWORD PTR [eax],edx
c0028f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f60:	83 ec 0c             	sub    esp,0xc
c0028f63:	50                   	push   eax
c0028f64:	e8 e7 b5 fe ff       	call   c0014550 <InterruptController::~InterruptController()>
c0028f69:	83 c4 10             	add    esp,0x10
c0028f6c:	90                   	nop
c0028f6d:	83 c4 0c             	add    esp,0xc
c0028f70:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028f72 <PIC::~PIC()>:
c0028f72:	83 ec 0c             	sub    esp,0xc
c0028f75:	83 ec 0c             	sub    esp,0xc
c0028f78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f7c:	e8 cd ff ff ff       	call   c0028f4e <PIC::~PIC()>
c0028f81:	83 c4 10             	add    esp,0x10
c0028f84:	83 ec 08             	sub    esp,0x8
c0028f87:	68 58 21 00 00       	push   0x2158
c0028f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f90:	e8 96 96 fe ff       	call   c001262b <operator delete(void*, unsigned long)>
c0028f95:	83 c4 10             	add    esp,0x10
c0028f98:	83 c4 0c             	add    esp,0xc
c0028f9b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028f9c <APICTimer::~APICTimer()>:
c0028f9c:	83 ec 0c             	sub    esp,0xc
c0028f9f:	ba 40 c7 02 c0       	mov    edx,0xc002c740
c0028fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa8:	89 10                	mov    DWORD PTR [eax],edx
c0028faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fae:	83 ec 0c             	sub    esp,0xc
c0028fb1:	50                   	push   eax
c0028fb2:	e8 f1 d5 fe ff       	call   c00165a8 <Timer::~Timer()>
c0028fb7:	83 c4 10             	add    esp,0x10
c0028fba:	90                   	nop
c0028fbb:	83 c4 0c             	add    esp,0xc
c0028fbe:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028fc0 <APICTimer::~APICTimer()>:
c0028fc0:	83 ec 0c             	sub    esp,0xc
c0028fc3:	83 ec 0c             	sub    esp,0xc
c0028fc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fca:	e8 cd ff ff ff       	call   c0028f9c <APICTimer::~APICTimer()>
c0028fcf:	83 c4 10             	add    esp,0x10
c0028fd2:	83 ec 08             	sub    esp,0x8
c0028fd5:	68 60 01 00 00       	push   0x160
c0028fda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fde:	e8 48 96 fe ff       	call   c001262b <operator delete(void*, unsigned long)>
c0028fe3:	83 c4 10             	add    esp,0x10
c0028fe6:	83 c4 0c             	add    esp,0xc
c0028fe9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028fea <PIT::~PIT()>:
c0028fea:	83 ec 0c             	sub    esp,0xc
c0028fed:	ba 90 c7 02 c0       	mov    edx,0xc002c790
c0028ff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff6:	89 10                	mov    DWORD PTR [eax],edx
c0028ff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ffc:	83 ec 0c             	sub    esp,0xc
c0028fff:	50                   	push   eax
c0029000:	e8 a3 d5 fe ff       	call   c00165a8 <Timer::~Timer()>
c0029005:	83 c4 10             	add    esp,0x10
c0029008:	90                   	nop
c0029009:	83 c4 0c             	add    esp,0xc
c002900c:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002900e <PIT::~PIT()>:
c002900e:	83 ec 0c             	sub    esp,0xc
c0029011:	83 ec 0c             	sub    esp,0xc
c0029014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029018:	e8 cd ff ff ff       	call   c0028fea <PIT::~PIT()>
c002901d:	83 c4 10             	add    esp,0x10
c0029020:	83 ec 08             	sub    esp,0x8
c0029023:	68 5c 01 00 00       	push   0x15c
c0029028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002902c:	e8 fa 95 fe ff       	call   c001262b <operator delete(void*, unsigned long)>
c0029031:	83 c4 10             	add    esp,0x10
c0029034:	83 c4 0c             	add    esp,0xc
c0029037:	c3                   	ret    
