
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 03 7f 00 00       	call   c0007f23 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 25 c4 01 00       	call   c001c44a <_init>
c0000025:	c3                   	ret    
c0000026:	bb e6 ce 01 c0       	mov    ebx,0xc001cee6
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb f0 ce 01 c0    	cmp    ebx,0xc001cef0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 f9 01 c0       	mov    eax,0xc001f998
c0000049:	3d 98 f9 01 c0       	cmp    eax,0xc001f998
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 f9 01 c0       	push   0xc001f998
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 f9 01 c0       	mov    eax,0xc001f998
c0000075:	2d 98 f9 01 c0       	sub    eax,0xc001f998
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 f9 01 c0       	push   0xc001f998
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c0 fb 01 c0 00 	cmp    BYTE PTR ds:0xc001fbc0,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb f8 ce 01 c0       	mov    ebx,0xc001cef8
c00000bb:	81 eb f4 ce 01 c0    	sub    ebx,0xc001cef4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be f4 ce 01 c0       	mov    esi,0xc001cef4
c00000ca:	a1 c4 fb 01 c0       	mov    eax,ds:0xc001fbc4
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 c4 fb 01 c0       	mov    ds:0xc001fbc4,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 c4 fb 01 c0       	mov    eax,ds:0xc001fbc4
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 f9 01 c0       	push   0xc001f998
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c0 fb 01 c0 01 	mov    BYTE PTR ds:0xc001fbc0,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 c8 fb 01 c0       	push   0xc001fbc8
c000012c:	68 98 f9 01 c0       	push   0xc001f998
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 10 30 01 00       	call   c00132e0 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 04 a7 00 00       	call   c000a9ec <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 ee 2f 01 00       	call   c00132e0 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 bf 34 01 00       	call   c00137d0 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 0e 3b 01 00       	call   c0013e28 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 c0 09 02 c0 	lgdtd  ds:0xc00209c0
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 86 6b 00 00       	jmp    c0006f28 <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax
c00003a4:	66 90                	xchg   ax,ax
c00003a6:	66 90                	xchg   ax,ax
c00003a8:	66 90                	xchg   ax,ax
c00003aa:	66 90                	xchg   ax,ax
c00003ac:	66 90                	xchg   ax,ax
c00003ae:	66 90                	xchg   ax,ax

c00003b0 <memcmp>:
c00003b0:	56                   	push   esi
c00003b1:	53                   	push   ebx
c00003b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003be:	85 f6                	test   esi,esi
c00003c0:	74 1c                	je     c00003de <memcmp+0x2e>
c00003c2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003c6:	38 cb                	cmp    bl,cl
c00003c8:	75 26                	jne    c00003f0 <memcmp+0x40>
c00003ca:	01 c6                	add    esi,eax
c00003cc:	eb 0a                	jmp    c00003d8 <memcmp+0x28>
c00003ce:	66 90                	xchg   ax,ax
c00003d0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003d2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003d4:	38 d9                	cmp    cl,bl
c00003d6:	75 18                	jne    c00003f0 <memcmp+0x40>
c00003d8:	40                   	inc    eax
c00003d9:	42                   	inc    edx
c00003da:	39 f0                	cmp    eax,esi
c00003dc:	75 f2                	jne    c00003d0 <memcmp+0x20>
c00003de:	31 c0                	xor    eax,eax
c00003e0:	5b                   	pop    ebx
c00003e1:	5e                   	pop    esi
c00003e2:	c3                   	ret    
c00003e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003f0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003f6:	31 c0                	xor    eax,eax
c00003f8:	88 c8                	mov    al,cl
c00003fa:	29 d8                	sub    eax,ebx
c00003fc:	5b                   	pop    ebx
c00003fd:	5e                   	pop    esi
c00003fe:	c3                   	ret    
c00003ff:	90                   	nop

c0000400 <memmove>:
c0000400:	55                   	push   ebp
c0000401:	57                   	push   edi
c0000402:	56                   	push   esi
c0000403:	53                   	push   ebx
c0000404:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000408:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000040c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000410:	39 dd                	cmp    ebp,ebx
c0000412:	0f 83 98 00 00 00    	jae    c00004b0 <memmove+0xb0>
c0000418:	85 d2                	test   edx,edx
c000041a:	0f 84 7c 00 00 00    	je     c000049c <memmove+0x9c>
c0000420:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000423:	8d 75 04             	lea    esi,[ebp+0x4]
c0000426:	39 cd                	cmp    ebp,ecx
c0000428:	0f 93 c1             	setae  cl
c000042b:	39 f3                	cmp    ebx,esi
c000042d:	0f 93 c0             	setae  al
c0000430:	89 c6                	mov    esi,eax
c0000432:	09 ce                	or     esi,ecx
c0000434:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000437:	89 f0                	mov    eax,esi
c0000439:	83 f9 0c             	cmp    ecx,0xc
c000043c:	0f 97 c1             	seta   cl
c000043f:	84 c8                	test   al,cl
c0000441:	0f 84 89 00 00 00    	je     c00004d0 <memmove+0xd0>
c0000447:	89 e9                	mov    ecx,ebp
c0000449:	09 d9                	or     ecx,ebx
c000044b:	83 e1 03             	and    ecx,0x3
c000044e:	0f 85 7c 00 00 00    	jne    c00004d0 <memmove+0xd0>
c0000454:	89 d7                	mov    edi,edx
c0000456:	89 d9                	mov    ecx,ebx
c0000458:	83 e7 fc             	and    edi,0xfffffffc
c000045b:	89 ee                	mov    esi,ebp
c000045d:	01 df                	add    edi,ebx
c000045f:	90                   	nop
c0000460:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000462:	83 c6 04             	add    esi,0x4
c0000465:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000468:	83 c1 04             	add    ecx,0x4
c000046b:	39 f9                	cmp    ecx,edi
c000046d:	75 f1                	jne    c0000460 <memmove+0x60>
c000046f:	89 d1                	mov    ecx,edx
c0000471:	89 d7                	mov    edi,edx
c0000473:	83 e1 fc             	and    ecx,0xfffffffc
c0000476:	29 cf                	sub    edi,ecx
c0000478:	01 cb                	add    ebx,ecx
c000047a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000047e:	39 ca                	cmp    edx,ecx
c0000480:	74 1a                	je     c000049c <memmove+0x9c>
c0000482:	8a 03                	mov    al,BYTE PTR [ebx]
c0000484:	83 ff 01             	cmp    edi,0x1
c0000487:	88 06                	mov    BYTE PTR [esi],al
c0000489:	74 11                	je     c000049c <memmove+0x9c>
c000048b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000048e:	83 ff 02             	cmp    edi,0x2
c0000491:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000494:	74 06                	je     c000049c <memmove+0x9c>
c0000496:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000499:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000049c:	5b                   	pop    ebx
c000049d:	89 e8                	mov    eax,ebp
c000049f:	5e                   	pop    esi
c00004a0:	5f                   	pop    edi
c00004a1:	5d                   	pop    ebp
c00004a2:	c3                   	ret    
c00004a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	76 ea                	jbe    c000049c <memmove+0x9c>
c00004b2:	85 d2                	test   edx,edx
c00004b4:	74 e6                	je     c000049c <memmove+0x9c>
c00004b6:	4b                   	dec    ebx
c00004b7:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00004ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004c0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004c3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004c6:	4a                   	dec    edx
c00004c7:	75 f7                	jne    c00004c0 <memmove+0xc0>
c00004c9:	5b                   	pop    ebx
c00004ca:	89 e8                	mov    eax,ebp
c00004cc:	5e                   	pop    esi
c00004cd:	5f                   	pop    edi
c00004ce:	5d                   	pop    ebp
c00004cf:	c3                   	ret    
c00004d0:	01 ea                	add    edx,ebp
c00004d2:	89 e9                	mov    ecx,ebp
c00004d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004e0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004e2:	41                   	inc    ecx
c00004e3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004e6:	43                   	inc    ebx
c00004e7:	39 d1                	cmp    ecx,edx
c00004e9:	75 f5                	jne    c00004e0 <memmove+0xe0>
c00004eb:	eb af                	jmp    c000049c <memmove+0x9c>
c00004ed:	8d 76 00             	lea    esi,[esi+0x0]

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	53                   	push   ebx
c00004f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004fa:	85 d2                	test   edx,edx
c00004fc:	74 1f                	je     c000051d <memset+0x2d>
c00004fe:	31 c0                	xor    eax,eax
c0000500:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0000504:	88 c4                	mov    ah,al
c0000506:	89 c1                	mov    ecx,eax
c0000508:	c1 e1 10             	shl    ecx,0x10
c000050b:	09 c8                	or     eax,ecx
c000050d:	83 fa 04             	cmp    edx,0x4
c0000510:	73 1e                	jae    c0000530 <memset+0x40>
c0000512:	85 d2                	test   edx,edx
c0000514:	74 07                	je     c000051d <memset+0x2d>
c0000516:	88 03                	mov    BYTE PTR [ebx],al
c0000518:	f6 c2 02             	test   dl,0x2
c000051b:	75 30                	jne    c000054d <memset+0x5d>
c000051d:	89 d8                	mov    eax,ebx
c000051f:	5b                   	pop    ebx
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	89 03                	mov    DWORD PTR [ebx],eax
c0000532:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000535:	89 d9                	mov    ecx,ebx
c0000537:	83 e7 fc             	and    edi,0xfffffffc
c000053a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000053e:	29 f9                	sub    ecx,edi
c0000540:	01 d1                	add    ecx,edx
c0000542:	c1 e9 02             	shr    ecx,0x2
c0000545:	fc                   	cld    
c0000546:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000548:	89 d8                	mov    eax,ebx
c000054a:	5b                   	pop    ebx
c000054b:	5f                   	pop    edi
c000054c:	c3                   	ret    
c000054d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000552:	eb c9                	jmp    c000051d <memset+0x2d>
c0000554:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000055a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000560 <strlen>:
c0000560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000564:	31 c0                	xor    eax,eax
c0000566:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000569:	74 15                	je     c0000580 <strlen+0x20>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000570:	40                   	inc    eax
c0000571:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000575:	75 f9                	jne    c0000570 <strlen+0x10>
c0000577:	c3                   	ret    
c0000578:	90                   	nop
c0000579:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000580:	c3                   	ret    
c0000581:	eb 0d                	jmp    c0000590 <strpbrk>
c0000583:	90                   	nop
c0000584:	90                   	nop
c0000585:	90                   	nop
c0000586:	90                   	nop
c0000587:	90                   	nop
c0000588:	90                   	nop
c0000589:	90                   	nop
c000058a:	90                   	nop
c000058b:	90                   	nop
c000058c:	90                   	nop
c000058d:	90                   	nop
c000058e:	90                   	nop
c000058f:	90                   	nop

c0000590 <strpbrk>:
c0000590:	57                   	push   edi
c0000591:	56                   	push   esi
c0000592:	53                   	push   ebx
c0000593:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000597:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000059b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059d:	84 db                	test   bl,bl
c000059f:	74 21                	je     c00005c2 <strpbrk+0x32>
c00005a1:	8a 07                	mov    al,BYTE PTR [edi]
c00005a3:	84 c0                	test   al,al
c00005a5:	74 14                	je     c00005bb <strpbrk+0x2b>
c00005a7:	38 d8                	cmp    al,bl
c00005a9:	74 19                	je     c00005c4 <strpbrk+0x34>
c00005ab:	89 fa                	mov    edx,edi
c00005ad:	eb 05                	jmp    c00005b4 <strpbrk+0x24>
c00005af:	90                   	nop
c00005b0:	38 d9                	cmp    cl,bl
c00005b2:	74 10                	je     c00005c4 <strpbrk+0x34>
c00005b4:	42                   	inc    edx
c00005b5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00005b7:	84 c9                	test   cl,cl
c00005b9:	75 f5                	jne    c00005b0 <strpbrk+0x20>
c00005bb:	46                   	inc    esi
c00005bc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00005be:	84 db                	test   bl,bl
c00005c0:	75 e1                	jne    c00005a3 <strpbrk+0x13>
c00005c2:	31 f6                	xor    esi,esi
c00005c4:	89 f0                	mov    eax,esi
c00005c6:	5b                   	pop    ebx
c00005c7:	5e                   	pop    esi
c00005c8:	5f                   	pop    edi
c00005c9:	c3                   	ret    
c00005ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005d0 <strtok>:
c00005d0:	56                   	push   esi
c00005d1:	53                   	push   ebx
c00005d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005da:	85 db                	test   ebx,ebx
c00005dc:	75 07                	jne    c00005e5 <strtok+0x15>
c00005de:	eb 30                	jmp    c0000610 <strtok+0x40>
c00005e0:	43                   	inc    ebx
c00005e1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005e5:	56                   	push   esi
c00005e6:	53                   	push   ebx
c00005e7:	e8 a4 ff ff ff       	call   c0000590 <strpbrk>
c00005ec:	5a                   	pop    edx
c00005ed:	a3 e0 fb 01 c0       	mov    ds:0xc001fbe0,eax
c00005f2:	59                   	pop    ecx
c00005f3:	39 d8                	cmp    eax,ebx
c00005f5:	74 e9                	je     c00005e0 <strtok+0x10>
c00005f7:	85 c0                	test   eax,eax
c00005f9:	74 1f                	je     c000061a <strtok+0x4a>
c00005fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005fe:	8d 50 01             	lea    edx,[eax+0x1]
c0000601:	89 d8                	mov    eax,ebx
c0000603:	89 15 e0 fb 01 c0    	mov    DWORD PTR ds:0xc001fbe0,edx
c0000609:	5b                   	pop    ebx
c000060a:	5e                   	pop    esi
c000060b:	c3                   	ret    
c000060c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000610:	8b 1d e0 fb 01 c0    	mov    ebx,DWORD PTR ds:0xc001fbe0
c0000616:	85 db                	test   ebx,ebx
c0000618:	75 cb                	jne    c00005e5 <strtok+0x15>
c000061a:	31 c0                	xor    eax,eax
c000061c:	5b                   	pop    ebx
c000061d:	5e                   	pop    esi
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strcpy>:
c0000620:	53                   	push   ebx
c0000621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000629:	89 c3                	mov    ebx,eax
c000062b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062d:	84 d2                	test   dl,dl
c000062f:	74 19                	je     c000064a <strcpy+0x2a>
c0000631:	eb 0d                	jmp    c0000640 <strcpy+0x20>
c0000633:	90                   	nop
c0000634:	90                   	nop
c0000635:	90                   	nop
c0000636:	90                   	nop
c0000637:	90                   	nop
c0000638:	90                   	nop
c0000639:	90                   	nop
c000063a:	90                   	nop
c000063b:	90                   	nop
c000063c:	90                   	nop
c000063d:	90                   	nop
c000063e:	90                   	nop
c000063f:	90                   	nop
c0000640:	88 13                	mov    BYTE PTR [ebx],dl
c0000642:	41                   	inc    ecx
c0000643:	43                   	inc    ebx
c0000644:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000646:	84 d2                	test   dl,dl
c0000648:	75 f6                	jne    c0000640 <strcpy+0x20>
c000064a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000064d:	5b                   	pop    ebx
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strncpy>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000657:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065f:	85 ff                	test   edi,edi
c0000661:	74 3e                	je     c00006a1 <strncpy+0x51>
c0000663:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000665:	8d 47 ff             	lea    eax,[edi-0x1]
c0000668:	8d 4a 01             	lea    ecx,[edx+0x1]
c000066b:	88 1a                	mov    BYTE PTR [edx],bl
c000066d:	84 db                	test   bl,bl
c000066f:	74 3f                	je     c00006b0 <strncpy+0x60>
c0000671:	85 c0                	test   eax,eax
c0000673:	74 2c                	je     c00006a1 <strncpy+0x51>
c0000675:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000678:	8d 47 fe             	lea    eax,[edi-0x2]
c000067b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000067e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000681:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000684:	84 db                	test   bl,bl
c0000686:	75 15                	jne    c000069d <strncpy+0x4d>
c0000688:	eb 26                	jmp    c00006b0 <strncpy+0x60>
c000068a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000690:	47                   	inc    edi
c0000691:	41                   	inc    ecx
c0000692:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000695:	48                   	dec    eax
c0000696:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000699:	84 db                	test   bl,bl
c000069b:	74 13                	je     c00006b0 <strncpy+0x60>
c000069d:	85 c0                	test   eax,eax
c000069f:	75 ef                	jne    c0000690 <strncpy+0x40>
c00006a1:	5b                   	pop    ebx
c00006a2:	89 d0                	mov    eax,edx
c00006a4:	5e                   	pop    esi
c00006a5:	5f                   	pop    edi
c00006a6:	c3                   	ret    
c00006a7:	89 f6                	mov    esi,esi
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	85 c0                	test   eax,eax
c00006b2:	74 ed                	je     c00006a1 <strncpy+0x51>
c00006b4:	83 f8 04             	cmp    eax,0x4
c00006b7:	73 17                	jae    c00006d0 <strncpy+0x80>
c00006b9:	85 c0                	test   eax,eax
c00006bb:	74 e4                	je     c00006a1 <strncpy+0x51>
c00006bd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006c0:	a8 02                	test   al,0x2
c00006c2:	74 dd                	je     c00006a1 <strncpy+0x51>
c00006c4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006cb:	eb d4                	jmp    c00006a1 <strncpy+0x51>
c00006cd:	8d 76 00             	lea    esi,[esi+0x0]
c00006d0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006d6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006d9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006e1:	83 e7 fc             	and    edi,0xfffffffc
c00006e4:	29 f9                	sub    ecx,edi
c00006e6:	01 c1                	add    ecx,eax
c00006e8:	c1 e9 02             	shr    ecx,0x2
c00006eb:	fc                   	cld    
c00006ec:	31 c0                	xor    eax,eax
c00006ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006f0:	89 d0                	mov    eax,edx
c00006f2:	5b                   	pop    ebx
c00006f3:	5e                   	pop    esi
c00006f4:	5f                   	pop    edi
c00006f5:	c3                   	ret    
c00006f6:	8d 76 00             	lea    esi,[esi+0x0]
c00006f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000700 <strcmp>:
c0000700:	56                   	push   esi
c0000701:	53                   	push   ebx
c0000702:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000070a:	8a 16                	mov    dl,BYTE PTR [esi]
c000070c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000070e:	38 d1                	cmp    cl,dl
c0000710:	75 1d                	jne    c000072f <strcmp+0x2f>
c0000712:	84 c9                	test   cl,cl
c0000714:	74 2a                	je     c0000740 <strcmp+0x40>
c0000716:	b8 01 00 00 00       	mov    eax,0x1
c000071b:	eb 08                	jmp    c0000725 <strcmp+0x25>
c000071d:	8d 76 00             	lea    esi,[esi+0x0]
c0000720:	40                   	inc    eax
c0000721:	84 d2                	test   dl,dl
c0000723:	74 1b                	je     c0000740 <strcmp+0x40>
c0000725:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000728:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000072b:	38 ca                	cmp    dl,cl
c000072d:	74 f1                	je     c0000720 <strcmp+0x20>
c000072f:	31 c0                	xor    eax,eax
c0000731:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000737:	88 d0                	mov    al,dl
c0000739:	5b                   	pop    ebx
c000073a:	29 c8                	sub    eax,ecx
c000073c:	5e                   	pop    esi
c000073d:	c3                   	ret    
c000073e:	66 90                	xchg   ax,ax
c0000740:	31 c0                	xor    eax,eax
c0000742:	5b                   	pop    ebx
c0000743:	5e                   	pop    esi
c0000744:	c3                   	ret    
c0000745:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000749:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000750 <strchr>:
c0000750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000754:	8a 10                	mov    dl,BYTE PTR [eax]
c0000756:	84 d2                	test   dl,dl
c0000758:	74 21                	je     c000077b <strchr+0x2b>
c000075a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000075e:	38 ca                	cmp    dl,cl
c0000760:	75 12                	jne    c0000774 <strchr+0x24>
c0000762:	eb 1a                	jmp    c000077e <strchr+0x2e>
c0000764:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000076a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000770:	38 ca                	cmp    dl,cl
c0000772:	74 09                	je     c000077d <strchr+0x2d>
c0000774:	40                   	inc    eax
c0000775:	8a 10                	mov    dl,BYTE PTR [eax]
c0000777:	84 d2                	test   dl,dl
c0000779:	75 f5                	jne    c0000770 <strchr+0x20>
c000077b:	31 c0                	xor    eax,eax
c000077d:	c3                   	ret    
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <strncmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	85 ff                	test   edi,edi
c0000791:	74 2f                	je     c00007c2 <strncmp+0x42>
c0000793:	8a 16                	mov    dl,BYTE PTR [esi]
c0000795:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000797:	38 d1                	cmp    cl,dl
c0000799:	75 35                	jne    c00007d0 <strncmp+0x50>
c000079b:	8d 46 01             	lea    eax,[esi+0x1]
c000079e:	84 c9                	test   cl,cl
c00007a0:	74 20                	je     c00007c2 <strncmp+0x42>
c00007a2:	01 fe                	add    esi,edi
c00007a4:	eb 17                	jmp    c00007bd <strncmp+0x3d>
c00007a6:	8d 76 00             	lea    esi,[esi+0x0]
c00007a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00007b0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007b2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00007b4:	38 ca                	cmp    dl,cl
c00007b6:	75 18                	jne    c00007d0 <strncmp+0x50>
c00007b8:	40                   	inc    eax
c00007b9:	84 d2                	test   dl,dl
c00007bb:	74 05                	je     c00007c2 <strncmp+0x42>
c00007bd:	43                   	inc    ebx
c00007be:	39 c6                	cmp    esi,eax
c00007c0:	75 ee                	jne    c00007b0 <strncmp+0x30>
c00007c2:	5b                   	pop    ebx
c00007c3:	31 c0                	xor    eax,eax
c00007c5:	5e                   	pop    esi
c00007c6:	5f                   	pop    edi
c00007c7:	c3                   	ret    
c00007c8:	90                   	nop
c00007c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d0:	5b                   	pop    ebx
c00007d1:	31 c0                	xor    eax,eax
c00007d3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007d9:	88 d0                	mov    al,dl
c00007db:	5e                   	pop    esi
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5f                   	pop    edi
c00007df:	c3                   	ret    

c00007e0 <strcat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ea:	89 c3                	mov    ebx,eax
c00007ec:	eb 04                	jmp    c00007f2 <strcat+0x12>
c00007ee:	66 90                	xchg   ax,ax
c00007f0:	89 d3                	mov    ebx,edx
c00007f2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007f5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007f9:	75 f5                	jne    c00007f0 <strcat+0x10>
c00007fb:	31 d2                	xor    edx,edx
c00007fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000800:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000803:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000806:	42                   	inc    edx
c0000807:	84 c9                	test   cl,cl
c0000809:	75 f5                	jne    c0000800 <strcat+0x20>
c000080b:	5b                   	pop    ebx
c000080c:	5e                   	pop    esi
c000080d:	c3                   	ret    
c000080e:	66 90                	xchg   ax,ax

c0000810 <strncat>:
c0000810:	56                   	push   esi
c0000811:	53                   	push   ebx
c0000812:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000081a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000081e:	85 f6                	test   esi,esi
c0000820:	74 2e                	je     c0000850 <strncat+0x40>
c0000822:	89 c2                	mov    edx,eax
c0000824:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000082a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000830:	42                   	inc    edx
c0000831:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000835:	75 f9                	jne    c0000830 <strncat+0x20>
c0000837:	01 ce                	add    esi,ecx
c0000839:	eb 0a                	jmp    c0000845 <strncat+0x35>
c000083b:	90                   	nop
c000083c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000840:	39 f1                	cmp    ecx,esi
c0000842:	74 1c                	je     c0000860 <strncat+0x50>
c0000844:	42                   	inc    edx
c0000845:	41                   	inc    ecx
c0000846:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000849:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000084c:	84 db                	test   bl,bl
c000084e:	75 f0                	jne    c0000840 <strncat+0x30>
c0000850:	5b                   	pop    ebx
c0000851:	5e                   	pop    esi
c0000852:	c3                   	ret    
c0000853:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000859:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000860:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000863:	5b                   	pop    ebx
c0000864:	5e                   	pop    esi
c0000865:	c3                   	ret    
c0000866:	8d 76 00             	lea    esi,[esi+0x0]
c0000869:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000870 <strstr>:
c0000870:	57                   	push   edi
c0000871:	56                   	push   esi
c0000872:	53                   	push   ebx
c0000873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000877:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087b:	57                   	push   edi
c000087c:	e8 df fc ff ff       	call   c0000560 <strlen>
c0000881:	59                   	pop    ecx
c0000882:	85 c0                	test   eax,eax
c0000884:	74 3a                	je     c00008c0 <strstr+0x50>
c0000886:	89 c6                	mov    esi,eax
c0000888:	eb 16                	jmp    c00008a0 <strstr+0x30>
c000088a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000890:	56                   	push   esi
c0000891:	57                   	push   edi
c0000892:	53                   	push   ebx
c0000893:	e8 18 fb ff ff       	call   c00003b0 <memcmp>
c0000898:	83 c4 0c             	add    esp,0xc
c000089b:	85 c0                	test   eax,eax
c000089d:	74 21                	je     c00008c0 <strstr+0x50>
c000089f:	43                   	inc    ebx
c00008a0:	53                   	push   ebx
c00008a1:	e8 ba fc ff ff       	call   c0000560 <strlen>
c00008a6:	5a                   	pop    edx
c00008a7:	39 f0                	cmp    eax,esi
c00008a9:	73 e5                	jae    c0000890 <strstr+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	31 c0                	xor    eax,eax
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	c3                   	ret    
c00008b1:	eb 0d                	jmp    c00008c0 <strstr+0x50>
c00008b3:	90                   	nop
c00008b4:	90                   	nop
c00008b5:	90                   	nop
c00008b6:	90                   	nop
c00008b7:	90                   	nop
c00008b8:	90                   	nop
c00008b9:	90                   	nop
c00008ba:	90                   	nop
c00008bb:	90                   	nop
c00008bc:	90                   	nop
c00008bd:	90                   	nop
c00008be:	90                   	nop
c00008bf:	90                   	nop
c00008c0:	89 d8                	mov    eax,ebx
c00008c2:	5b                   	pop    ebx
c00008c3:	5e                   	pop    esi
c00008c4:	5f                   	pop    edi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <toupper>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 00 cf 01 c0 02 	test   BYTE PTR [edx-0x3ffe3100],0x2
c00008df:	74 03                	je     c00008e4 <toupper+0x14>
c00008e1:	83 e8 20             	sub    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <tolower>:
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f6:	88 c2                	mov    dl,al
c00008f8:	f6 82 00 cf 01 c0 01 	test   BYTE PTR [edx-0x3ffe3100],0x1
c00008ff:	74 03                	je     c0000904 <tolower+0x14>
c0000901:	83 c0 20             	add    eax,0x20
c0000904:	c3                   	ret    
c0000905:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000910 <simple_strtoul>:
c0000910:	55                   	push   ebp
c0000911:	57                   	push   edi
c0000912:	56                   	push   esi
c0000913:	53                   	push   ebx
c0000914:	83 ec 08             	sub    esp,0x8
c0000917:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000091b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000091f:	90                   	nop
c0000920:	31 d2                	xor    edx,edx
c0000922:	8a 01                	mov    al,BYTE PTR [ecx]
c0000924:	88 c2                	mov    dl,al
c0000926:	f6 82 00 cf 01 c0 08 	test   BYTE PTR [edx-0x3ffe3100],0x8
c000092d:	75 04                	jne    c0000933 <simple_strtoul+0x23>
c000092f:	3c 09                	cmp    al,0x9
c0000931:	75 0d                	jne    c0000940 <simple_strtoul+0x30>
c0000933:	41                   	inc    ecx
c0000934:	eb ea                	jmp    c0000920 <simple_strtoul+0x10>
c0000936:	8d 76 00             	lea    esi,[esi+0x0]
c0000939:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000940:	3c 2d                	cmp    al,0x2d
c0000942:	0f 84 48 01 00 00    	je     c0000a90 <simple_strtoul+0x180>
c0000948:	3c 2b                	cmp    al,0x2b
c000094a:	0f 84 e0 00 00 00    	je     c0000a30 <simple_strtoul+0x120>
c0000950:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000958:	85 f6                	test   esi,esi
c000095a:	0f 85 e1 00 00 00    	jne    c0000a41 <simple_strtoul+0x131>
c0000960:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000963:	80 fa 30             	cmp    dl,0x30
c0000966:	0f 84 75 01 00 00    	je     c0000ae1 <simple_strtoul+0x1d1>
c000096c:	be 0a 00 00 00       	mov    esi,0xa
c0000971:	84 d2                	test   dl,dl
c0000973:	0f 84 9f 01 00 00    	je     c0000b18 <simple_strtoul+0x208>
c0000979:	31 ed                	xor    ebp,ebp
c000097b:	31 ff                	xor    edi,edi
c000097d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000984:	eb 35                	jmp    c00009bb <simple_strtoul+0xab>
c0000986:	8d 76 00             	lea    esi,[esi+0x0]
c0000989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000990:	83 eb 30             	sub    ebx,0x30
c0000993:	39 f3                	cmp    ebx,esi
c0000995:	73 59                	jae    c00009f0 <simple_strtoul+0xe0>
c0000997:	31 d2                	xor    edx,edx
c0000999:	89 d8                	mov    eax,ebx
c000099b:	f7 d0                	not    eax
c000099d:	f7 f6                	div    esi
c000099f:	39 f8                	cmp    eax,edi
c00009a1:	0f 82 c9 00 00 00    	jb     c0000a70 <simple_strtoul+0x160>
c00009a7:	0f af fe             	imul   edi,esi
c00009aa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009b1:	01 df                	add    edi,ebx
c00009b3:	41                   	inc    ecx
c00009b4:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c00009b7:	84 d2                	test   dl,dl
c00009b9:	74 35                	je     c00009f0 <simple_strtoul+0xe0>
c00009bb:	31 db                	xor    ebx,ebx
c00009bd:	88 d3                	mov    bl,dl
c00009bf:	f6 83 00 cf 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3100],0x4
c00009c6:	75 c8                	jne    c0000990 <simple_strtoul+0x80>
c00009c8:	52                   	push   edx
c00009c9:	e8 02 ff ff ff       	call   c00008d0 <toupper>
c00009ce:	31 d2                	xor    edx,edx
c00009d0:	5b                   	pop    ebx
c00009d1:	88 c2                	mov    dl,al
c00009d3:	f6 82 00 cf 01 c0 01 	test   BYTE PTR [edx-0x3ffe3100],0x1
c00009da:	74 14                	je     c00009f0 <simple_strtoul+0xe0>
c00009dc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009df:	39 f3                	cmp    ebx,esi
c00009e1:	72 b4                	jb     c0000997 <simple_strtoul+0x87>
c00009e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f4:	85 c0                	test   eax,eax
c00009f6:	74 18                	je     c0000a10 <simple_strtoul+0x100>
c00009f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009fb:	09 f8                	or     eax,edi
c00009fd:	0f 85 7d 00 00 00    	jne    c0000a80 <simple_strtoul+0x170>
c0000a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a07:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a0b:	31 ff                	xor    edi,edi
c0000a0d:	89 30                	mov    DWORD PTR [eax],esi
c0000a0f:	90                   	nop
c0000a10:	4d                   	dec    ebp
c0000a11:	75 05                	jne    c0000a18 <simple_strtoul+0x108>
c0000a13:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a18:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a1d:	75 02                	jne    c0000a21 <simple_strtoul+0x111>
c0000a1f:	f7 df                	neg    edi
c0000a21:	83 c4 08             	add    esp,0x8
c0000a24:	89 f8                	mov    eax,edi
c0000a26:	5b                   	pop    ebx
c0000a27:	5e                   	pop    esi
c0000a28:	5f                   	pop    edi
c0000a29:	5d                   	pop    ebp
c0000a2a:	c3                   	ret    
c0000a2b:	90                   	nop
c0000a2c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a30:	41                   	inc    ecx
c0000a31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a39:	85 f6                	test   esi,esi
c0000a3b:	0f 84 1f ff ff ff    	je     c0000960 <simple_strtoul+0x50>
c0000a41:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a44:	83 f8 22             	cmp    eax,0x22
c0000a47:	77 7b                	ja     c0000ac4 <simple_strtoul+0x1b4>
c0000a49:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a4c:	83 fe 08             	cmp    esi,0x8
c0000a4f:	0f 84 b3 00 00 00    	je     c0000b08 <simple_strtoul+0x1f8>
c0000a55:	83 fe 10             	cmp    esi,0x10
c0000a58:	0f 85 13 ff ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000a5e:	80 fa 30             	cmp    dl,0x30
c0000a61:	74 3b                	je     c0000a9e <simple_strtoul+0x18e>
c0000a63:	be 10 00 00 00       	mov    esi,0x10
c0000a68:	e9 04 ff ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a70:	bd 01 00 00 00       	mov    ebp,0x1
c0000a75:	31 ff                	xor    edi,edi
c0000a77:	e9 37 ff ff ff       	jmp    c00009b3 <simple_strtoul+0xa3>
c0000a7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a84:	89 08                	mov    DWORD PTR [eax],ecx
c0000a86:	eb 88                	jmp    c0000a10 <simple_strtoul+0x100>
c0000a88:	90                   	nop
c0000a89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a99:	e9 ba fe ff ff       	jmp    c0000958 <simple_strtoul+0x48>
c0000a9e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aa2:	88 04 24             	mov    BYTE PTR [esp],al
c0000aa5:	50                   	push   eax
c0000aa6:	e8 45 fe ff ff       	call   c00008f0 <tolower>
c0000aab:	5e                   	pop    esi
c0000aac:	83 f8 78             	cmp    eax,0x78
c0000aaf:	0f 84 88 00 00 00    	je     c0000b3d <simple_strtoul+0x22d>
c0000ab5:	41                   	inc    ecx
c0000ab6:	be 10 00 00 00       	mov    esi,0x10
c0000abb:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000abf:	e9 ad fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000ac4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ac8:	85 ff                	test   edi,edi
c0000aca:	74 5e                	je     c0000b2a <simple_strtoul+0x21a>
c0000acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ad0:	85 c9                	test   ecx,ecx
c0000ad2:	75 50                	jne    c0000b24 <simple_strtoul+0x214>
c0000ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ada:	31 ff                	xor    edi,edi
c0000adc:	e9 37 ff ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000ae1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ae5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ae8:	50                   	push   eax
c0000ae9:	e8 02 fe ff ff       	call   c00008f0 <tolower>
c0000aee:	5d                   	pop    ebp
c0000aef:	83 f8 78             	cmp    eax,0x78
c0000af2:	74 3d                	je     c0000b31 <simple_strtoul+0x221>
c0000af4:	41                   	inc    ecx
c0000af5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000af9:	80 fa 30             	cmp    dl,0x30
c0000afc:	74 13                	je     c0000b11 <simple_strtoul+0x201>
c0000afe:	be 08 00 00 00       	mov    esi,0x8
c0000b03:	e9 69 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000b08:	80 fa 30             	cmp    dl,0x30
c0000b0b:	0f 85 60 fe ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000b11:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000b15:	41                   	inc    ecx
c0000b16:	eb e6                	jmp    c0000afe <simple_strtoul+0x1ee>
c0000b18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b1c:	85 d2                	test   edx,edx
c0000b1e:	74 0a                	je     c0000b2a <simple_strtoul+0x21a>
c0000b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b24:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b28:	89 30                	mov    DWORD PTR [eax],esi
c0000b2a:	31 ff                	xor    edi,edi
c0000b2c:	e9 e7 fe ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000b31:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b35:	83 c1 02             	add    ecx,0x2
c0000b38:	e9 21 ff ff ff       	jmp    c0000a5e <simple_strtoul+0x14e>
c0000b3d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b41:	be 10 00 00 00       	mov    esi,0x10
c0000b46:	83 c1 02             	add    ecx,0x2
c0000b49:	e9 23 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>

c0000b4e <largebin_index>:
c0000b4e:	89 c2                	mov    edx,eax
c0000b50:	c1 ea 08             	shr    edx,0x8
c0000b53:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b59:	77 10                	ja     c0000b6b <largebin_index+0x1d>
c0000b5b:	0f bd d2             	bsr    edx,edx
c0000b5e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b61:	d3 e8                	shr    eax,cl
c0000b63:	83 e0 03             	and    eax,0x3
c0000b66:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b6a:	c3                   	ret    
c0000b6b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b70:	c3                   	ret    

c0000b71 <malloc_init_state>:
c0000b71:	53                   	push   ebx
c0000b72:	8d 50 34             	lea    edx,[eax+0x34]
c0000b75:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b7b:	89 d1                	mov    ecx,edx
c0000b7d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b80:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b83:	83 c2 08             	add    edx,0x8
c0000b86:	39 da                	cmp    edx,ebx
c0000b88:	75 f3                	jne    c0000b7d <malloc_init_state+0xc>
c0000b8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b8c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b96:	83 e2 03             	and    edx,0x3
c0000b99:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ba3:	83 ca 48             	or     edx,0x48
c0000ba6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bba:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc1:	89 10                	mov    DWORD PTR [eax],edx
c0000bc3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bc6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd0:	5b                   	pop    ebx
c0000bd1:	c3                   	ret    

c0000bd2 <malloc_consolidate>:
c0000bd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bd4:	85 d2                	test   edx,edx
c0000bd6:	0f 84 d8 00 00 00    	je     c0000cb4 <malloc_consolidate+0xe2>
c0000bdc:	55                   	push   ebp
c0000bdd:	83 e2 fd             	and    edx,0xfffffffd
c0000be0:	57                   	push   edi
c0000be1:	89 c5                	mov    ebp,eax
c0000be3:	56                   	push   esi
c0000be4:	8d 78 34             	lea    edi,[eax+0x34]
c0000be7:	53                   	push   ebx
c0000be8:	83 ec 10             	sub    esp,0x10
c0000beb:	89 10                	mov    DWORD PTR [eax],edx
c0000bed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf1:	c1 ea 03             	shr    edx,0x3
c0000bf4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bf8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bfc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bff:	85 d2                	test   edx,edx
c0000c01:	0f 84 98 00 00 00    	je     c0000c9f <malloc_consolidate+0xcd>
c0000c07:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c0e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c11:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c18:	89 f9                	mov    ecx,edi
c0000c1a:	83 e1 fe             	and    ecx,0xfffffffe
c0000c1d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c20:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c23:	83 e3 fc             	and    ebx,0xfffffffc
c0000c26:	83 e7 01             	and    edi,0x1
c0000c29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c2c:	75 14                	jne    c0000c42 <malloc_consolidate+0x70>
c0000c2e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c30:	29 fa                	sub    edx,edi
c0000c32:	01 f9                	add    ecx,edi
c0000c34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c37:	89 fb                	mov    ebx,edi
c0000c39:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c3c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c3f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c42:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c45:	74 40                	je     c0000c87 <malloc_consolidate+0xb5>
c0000c47:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c4a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c4d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c51:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c54:	83 e7 01             	and    edi,0x1
c0000c57:	75 0e                	jne    c0000c67 <malloc_consolidate+0x95>
c0000c59:	01 d9                	add    ecx,ebx
c0000c5b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c5e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c61:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c64:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c67:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c6a:	89 ce                	mov    esi,ecx
c0000c6c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c6f:	83 ce 01             	or     esi,0x1
c0000c72:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c75:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c78:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c7b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c7f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c82:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c85:	eb 0c                	jmp    c0000c93 <malloc_consolidate+0xc1>
c0000c87:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c8a:	83 c9 01             	or     ecx,0x1
c0000c8d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c90:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c97:	85 d2                	test   edx,edx
c0000c99:	0f 85 6f ff ff ff    	jne    c0000c0e <malloc_consolidate+0x3c>
c0000c9f:	83 c5 04             	add    ebp,0x4
c0000ca2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ca6:	0f 85 50 ff ff ff    	jne    c0000bfc <malloc_consolidate+0x2a>
c0000cac:	83 c4 10             	add    esp,0x10
c0000caf:	5b                   	pop    ebx
c0000cb0:	5e                   	pop    esi
c0000cb1:	5f                   	pop    edi
c0000cb2:	5d                   	pop    ebp
c0000cb3:	c3                   	ret    
c0000cb4:	e9 b8 fe ff ff       	jmp    c0000b71 <malloc_init_state>

c0000cb9 <dlfree>:
c0000cb9:	57                   	push   edi
c0000cba:	56                   	push   esi
c0000cbb:	53                   	push   ebx
c0000cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc0:	85 db                	test   ebx,ebx
c0000cc2:	0f 84 e2 00 00 00    	je     c0000daa <dlfree+0xf1>
c0000cc8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000ccb:	8b 0d 00 fc 01 c0    	mov    ecx,DWORD PTR ds:0xc001fc00
c0000cd1:	89 f0                	mov    eax,esi
c0000cd3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cd6:	83 e0 fc             	and    eax,0xfffffffc
c0000cd9:	39 c1                	cmp    ecx,eax
c0000cdb:	72 24                	jb     c0000d01 <dlfree+0x48>
c0000cdd:	83 c9 03             	or     ecx,0x3
c0000ce0:	c1 e8 03             	shr    eax,0x3
c0000ce3:	89 0d 00 fc 01 c0    	mov    DWORD PTR ds:0xc001fc00,ecx
c0000ce9:	83 e8 02             	sub    eax,0x2
c0000cec:	8b 0c 85 04 fc 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe03fc]
c0000cf3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cf5:	89 14 85 04 fc 01 c0 	mov    DWORD PTR [eax*4-0x3ffe03fc],edx
c0000cfc:	e9 a9 00 00 00       	jmp    c0000daa <dlfree+0xf1>
c0000d01:	83 e6 02             	and    esi,0x2
c0000d04:	0f 85 a0 00 00 00    	jne    c0000daa <dlfree+0xf1>
c0000d0a:	83 c9 01             	or     ecx,0x1
c0000d0d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d10:	89 0d 00 fc 01 c0    	mov    DWORD PTR ds:0xc001fc00,ecx
c0000d16:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d19:	83 e1 fc             	and    ecx,0xfffffffc
c0000d1c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d20:	75 13                	jne    c0000d35 <dlfree+0x7c>
c0000d22:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d25:	29 da                	sub    edx,ebx
c0000d27:	01 d8                	add    eax,ebx
c0000d29:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d2f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d32:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d35:	39 35 2c fc 01 c0    	cmp    DWORD PTR ds:0xc001fc2c,esi
c0000d3b:	74 40                	je     c0000d7d <dlfree+0xc4>
c0000d3d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d41:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d44:	80 e3 01             	and    bl,0x1
c0000d47:	75 0e                	jne    c0000d57 <dlfree+0x9e>
c0000d49:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d4c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d4f:	01 c8                	add    eax,ecx
c0000d51:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d54:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d57:	8b 0d 3c fc 01 c0    	mov    ecx,DWORD PTR ds:0xc001fc3c
c0000d5d:	c7 42 0c 34 fc 01 c0 	mov    DWORD PTR [edx+0xc],0xc001fc34
c0000d64:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d67:	89 15 3c fc 01 c0    	mov    DWORD PTR ds:0xc001fc3c,edx
c0000d6d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d70:	89 c1                	mov    ecx,eax
c0000d72:	83 c9 01             	or     ecx,0x1
c0000d75:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d78:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d7b:	eb 10                	jmp    c0000d8d <dlfree+0xd4>
c0000d7d:	01 c8                	add    eax,ecx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 15 2c fc 01 c0    	mov    DWORD PTR ds:0xc001fc2c,edx
c0000d8d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d92:	76 16                	jbe    c0000daa <dlfree+0xf1>
c0000d94:	f6 05 00 fc 01 c0 02 	test   BYTE PTR ds:0xc001fc00,0x2
c0000d9b:	74 0d                	je     c0000daa <dlfree+0xf1>
c0000d9d:	5b                   	pop    ebx
c0000d9e:	b8 00 fc 01 c0       	mov    eax,0xc001fc00
c0000da3:	5e                   	pop    esi
c0000da4:	5f                   	pop    edi
c0000da5:	e9 28 fe ff ff       	jmp    c0000bd2 <malloc_consolidate>
c0000daa:	5b                   	pop    ebx
c0000dab:	5e                   	pop    esi
c0000dac:	5f                   	pop    edi
c0000dad:	c3                   	ret    

c0000dae <sYSMALLOc>:
c0000dae:	55                   	push   ebp
c0000daf:	57                   	push   edi
c0000db0:	56                   	push   esi
c0000db1:	53                   	push   ebx
c0000db2:	89 d3                	mov    ebx,edx
c0000db4:	83 ec 2c             	sub    esp,0x2c
c0000db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dbb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dc4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dcb:	74 1f                	je     c0000dec <sYSMALLOc+0x3e>
c0000dcd:	89 d8                	mov    eax,ebx
c0000dcf:	e8 fe fd ff ff       	call   c0000bd2 <malloc_consolidate>
c0000dd4:	83 ec 0c             	sub    esp,0xc
c0000dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ddb:	83 e8 07             	sub    eax,0x7
c0000dde:	50                   	push   eax
c0000ddf:	e8 30 02 00 00       	call   c0001014 <dlmalloc>
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	e9 20 02 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000dec:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000def:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000df5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000df8:	83 e0 fc             	and    eax,0xfffffffc
c0000dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e03:	83 c0 10             	add    eax,0x10
c0000e06:	01 c1                	add    ecx,eax
c0000e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e0c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e13:	74 04                	je     c0000e19 <sYSMALLOc+0x6b>
c0000e15:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e19:	f7 da                	neg    edx
c0000e1b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e23:	21 d1                	and    ecx,edx
c0000e25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e29:	7f 07                	jg     c0000e32 <sYSMALLOc+0x84>
c0000e2b:	31 c0                	xor    eax,eax
c0000e2d:	e9 da 01 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000e32:	83 ec 0c             	sub    esp,0xc
c0000e35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e39:	e8 f6 6e 00 00       	call   c0007d34 <sbrk>
c0000e3e:	83 c4 10             	add    esp,0x10
c0000e41:	89 c6                	mov    esi,eax
c0000e43:	83 f8 ff             	cmp    eax,0xffffffff
c0000e46:	74 e3                	je     c0000e2b <sYSMALLOc+0x7d>
c0000e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e4c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e50:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e53:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e59:	39 f1                	cmp    ecx,esi
c0000e5b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e61:	75 13                	jne    c0000e76 <sYSMALLOc+0xc8>
c0000e63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e67:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e6b:	83 c8 01             	or     eax,0x1
c0000e6e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e71:	e9 3e 01 00 00       	jmp    c0000fb4 <sYSMALLOc+0x206>
c0000e76:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e7c:	88 d0                	mov    al,dl
c0000e7e:	83 e0 01             	and    eax,0x1
c0000e81:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e8a:	0f 95 c0             	setne  al
c0000e8d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e91:	39 f1                	cmp    ecx,esi
c0000e93:	76 12                	jbe    c0000ea7 <sYSMALLOc+0xf9>
c0000e95:	84 c0                	test   al,al
c0000e97:	74 0e                	je     c0000ea7 <sYSMALLOc+0xf9>
c0000e99:	83 e2 fe             	and    edx,0xfffffffe
c0000e9c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea2:	e9 83 00 00 00       	jmp    c0000f2a <sYSMALLOc+0x17c>
c0000ea7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eac:	74 7c                	je     c0000f2a <sYSMALLOc+0x17c>
c0000eae:	84 c0                	test   al,al
c0000eb0:	74 0c                	je     c0000ebe <sYSMALLOc+0x110>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	29 c8                	sub    eax,ecx
c0000eb6:	01 e8                	add    eax,ebp
c0000eb8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ebe:	89 f2                	mov    edx,esi
c0000ec0:	83 e2 07             	and    edx,0x7
c0000ec3:	74 0c                	je     c0000ed1 <sYSMALLOc+0x123>
c0000ec5:	b8 08 00 00 00       	mov    eax,0x8
c0000eca:	29 d0                	sub    eax,edx
c0000ecc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ecf:	eb 04                	jmp    c0000ed5 <sYSMALLOc+0x127>
c0000ed1:	89 f5                	mov    ebp,esi
c0000ed3:	31 c0                	xor    eax,eax
c0000ed5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ed9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000edd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	83 ec 0c             	sub    esp,0xc
c0000ee6:	01 f1                	add    ecx,esi
c0000ee8:	01 ca                	add    edx,ecx
c0000eea:	29 c8                	sub    eax,ecx
c0000eec:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef0:	01 c2                	add    edx,eax
c0000ef2:	52                   	push   edx
c0000ef3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ef7:	e8 38 6e 00 00       	call   c0007d34 <sbrk>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	83 f8 ff             	cmp    eax,0xffffffff
c0000f02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f06:	75 0f                	jne    c0000f17 <sYSMALLOc+0x169>
c0000f08:	83 ec 0c             	sub    esp,0xc
c0000f0b:	6a 00                	push   0x0
c0000f0d:	e8 22 6e 00 00       	call   c0007d34 <sbrk>
c0000f12:	83 c4 10             	add    esp,0x10
c0000f15:	eb 30                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f17:	39 c6                	cmp    esi,eax
c0000f19:	76 33                	jbe    c0000f4e <sYSMALLOc+0x1a0>
c0000f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f1f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f26:	01 f0                	add    eax,esi
c0000f28:	eb 1d                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f2a:	83 ec 0c             	sub    esp,0xc
c0000f2d:	89 f5                	mov    ebp,esi
c0000f2f:	6a 00                	push   0x0
c0000f31:	e8 fe 6d 00 00       	call   c0007d34 <sbrk>
c0000f36:	89 c2                	mov    edx,eax
c0000f38:	29 f2                	sub    edx,esi
c0000f3a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f3e:	83 c4 10             	add    esp,0x10
c0000f41:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f47:	31 d2                	xor    edx,edx
c0000f49:	83 f8 ff             	cmp    eax,0xffffffff
c0000f4c:	74 66                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f4e:	29 e8                	sub    eax,ebp
c0000f50:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f53:	01 d0                	add    eax,edx
c0000f55:	83 c8 01             	or     eax,0x1
c0000f58:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f5b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f66:	74 4c                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f6c:	83 e8 0c             	sub    eax,0xc
c0000f6f:	83 e0 f8             	and    eax,0xfffffff8
c0000f72:	89 c2                	mov    edx,eax
c0000f74:	83 ca 01             	or     edx,0x1
c0000f77:	83 f8 0f             	cmp    eax,0xf
c0000f7a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f7d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f85:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f8d:	76 25                	jbe    c0000fb4 <sYSMALLOc+0x206>
c0000f8f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f95:	83 ec 0c             	sub    esp,0xc
c0000f98:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa2:	83 c7 08             	add    edi,0x8
c0000fa5:	57                   	push   edi
c0000fa6:	e8 0e fd ff ff       	call   c0000cb9 <dlfree>
c0000fab:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb1:	83 c4 10             	add    esp,0x10
c0000fb4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fba:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc0:	73 06                	jae    c0000fc8 <sYSMALLOc+0x21a>
c0000fc2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fc8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fce:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fd4:	73 06                	jae    c0000fdc <sYSMALLOc+0x22e>
c0000fd6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fdc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fdf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe2:	83 e2 fc             	and    edx,0xfffffffc
c0000fe5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fe9:	0f 82 3c fe ff ff    	jb     c0000e2b <sYSMALLOc+0x7d>
c0000fef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ff3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ff6:	29 fa                	sub    edx,edi
c0000ff8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ffb:	83 ca 01             	or     edx,0x1
c0000ffe:	89 fb                	mov    ebx,edi
c0001000:	83 c0 08             	add    eax,0x8
c0001003:	83 cb 01             	or     ebx,0x1
c0001006:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001009:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000100c:	83 c4 2c             	add    esp,0x2c
c000100f:	5b                   	pop    ebx
c0001010:	5e                   	pop    esi
c0001011:	5f                   	pop    edi
c0001012:	5d                   	pop    ebp
c0001013:	c3                   	ret    

c0001014 <dlmalloc>:
c0001014:	55                   	push   ebp
c0001015:	57                   	push   edi
c0001016:	56                   	push   esi
c0001017:	53                   	push   ebx
c0001018:	83 ec 1c             	sub    esp,0x1c
c000101b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000101f:	83 f8 df             	cmp    eax,0xffffffdf
c0001022:	0f 87 70 03 00 00    	ja     c0001398 <dlmalloc+0x384>
c0001028:	83 c0 0b             	add    eax,0xb
c000102b:	be 10 00 00 00       	mov    esi,0x10
c0001030:	83 f8 0f             	cmp    eax,0xf
c0001033:	76 05                	jbe    c000103a <dlmalloc+0x26>
c0001035:	83 e0 f8             	and    eax,0xfffffff8
c0001038:	89 c6                	mov    esi,eax
c000103a:	8b 3d 00 fc 01 c0    	mov    edi,DWORD PTR ds:0xc001fc00
c0001040:	f7 c7 01 00 00 00    	test   edi,0x1
c0001046:	75 17                	jne    c000105f <dlmalloc+0x4b>
c0001048:	85 ff                	test   edi,edi
c000104a:	0f 85 05 03 00 00    	jne    c0001355 <dlmalloc+0x341>
c0001050:	b8 00 fc 01 c0       	mov    eax,0xc001fc00
c0001055:	e8 78 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c000105a:	e9 f6 02 00 00       	jmp    c0001355 <dlmalloc+0x341>
c000105f:	39 f7                	cmp    edi,esi
c0001061:	72 1f                	jb     c0001082 <dlmalloc+0x6e>
c0001063:	89 f2                	mov    edx,esi
c0001065:	c1 ea 03             	shr    edx,0x3
c0001068:	83 ea 02             	sub    edx,0x2
c000106b:	8b 04 95 04 fc 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe03fc]
c0001072:	85 c0                	test   eax,eax
c0001074:	74 0c                	je     c0001082 <dlmalloc+0x6e>
c0001076:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001079:	89 0c 95 04 fc 01 c0 	mov    DWORD PTR [edx*4-0x3ffe03fc],ecx
c0001080:	eb 30                	jmp    c00010b2 <dlmalloc+0x9e>
c0001082:	89 f0                	mov    eax,esi
c0001084:	81 fe ff 00 00 00    	cmp    esi,0xff
c000108a:	77 2e                	ja     c00010ba <dlmalloc+0xa6>
c000108c:	c1 e8 03             	shr    eax,0x3
c000108f:	8d 14 c5 34 fc 01 c0 	lea    edx,[eax*8-0x3ffe03cc]
c0001096:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000109a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000109d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a0:	39 c3                	cmp    ebx,eax
c00010a2:	74 2e                	je     c00010d2 <dlmalloc+0xbe>
c00010a4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010a7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010ac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010af:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b2:	83 c0 08             	add    eax,0x8
c00010b5:	e9 e0 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c00010ba:	e8 8f fa ff ff       	call   c0000b4e <largebin_index>
c00010bf:	83 e7 02             	and    edi,0x2
c00010c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010c6:	74 0a                	je     c00010d2 <dlmalloc+0xbe>
c00010c8:	b8 00 fc 01 c0       	mov    eax,0xc001fc00
c00010cd:	e8 00 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c00010d2:	8d 46 10             	lea    eax,[esi+0x10]
c00010d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010d9:	8b 1d 40 fc 01 c0    	mov    ebx,DWORD PTR ds:0xc001fc40
c00010df:	81 fb 34 fc 01 c0    	cmp    ebx,0xc001fc34
c00010e5:	0f 84 13 01 00 00    	je     c00011fe <dlmalloc+0x1ea>
c00010eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f1:	83 e7 fc             	and    edi,0xfffffffc
c00010f4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010fa:	77 4c                	ja     c0001148 <dlmalloc+0x134>
c00010fc:	3d 34 fc 01 c0       	cmp    eax,0xc001fc34
c0001101:	75 45                	jne    c0001148 <dlmalloc+0x134>
c0001103:	39 1d 30 fc 01 c0    	cmp    DWORD PTR ds:0xc001fc30,ebx
c0001109:	75 3d                	jne    c0001148 <dlmalloc+0x134>
c000110b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000110f:	73 37                	jae    c0001148 <dlmalloc+0x134>
c0001111:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001114:	89 fa                	mov    edx,edi
c0001116:	a3 3c fc 01 c0       	mov    ds:0xc001fc3c,eax
c000111b:	a3 40 fc 01 c0       	mov    ds:0xc001fc40,eax
c0001120:	a3 30 fc 01 c0       	mov    ds:0xc001fc30,eax
c0001125:	29 f2                	sub    edx,esi
c0001127:	c7 40 08 34 fc 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fc34
c000112e:	c7 40 0c 34 fc 01 c0 	mov    DWORD PTR [eax+0xc],0xc001fc34
c0001135:	83 ce 01             	or     esi,0x1
c0001138:	89 d1                	mov    ecx,edx
c000113a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000113d:	83 c9 01             	or     ecx,0x1
c0001140:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001143:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001146:	eb 15                	jmp    c000115d <dlmalloc+0x149>
c0001148:	a3 40 fc 01 c0       	mov    ds:0xc001fc40,eax
c000114d:	39 fe                	cmp    esi,edi
c000114f:	c7 40 08 34 fc 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fc34
c0001156:	75 0d                	jne    c0001165 <dlmalloc+0x151>
c0001158:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000115d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001160:	e9 35 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001165:	89 f8                	mov    eax,edi
c0001167:	81 ff ff 00 00 00    	cmp    edi,0xff
c000116d:	77 19                	ja     c0001188 <dlmalloc+0x174>
c000116f:	c1 e8 03             	shr    eax,0x3
c0001172:	8d 14 00             	lea    edx,[eax+eax*1]
c0001175:	83 c2 0d             	add    edx,0xd
c0001178:	8d 2c 95 f8 fb 01 c0 	lea    ebp,[edx*4-0x3ffe0408]
c000117f:	8b 14 95 00 fc 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0400]
c0001186:	eb 46                	jmp    c00011ce <dlmalloc+0x1ba>
c0001188:	e8 c1 f9 ff ff       	call   c0000b4e <largebin_index>
c000118d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001190:	83 c2 0d             	add    edx,0xd
c0001193:	8d 0c 95 00 fc 01 c0 	lea    ecx,[edx*4-0x3ffe0400]
c000119a:	8b 14 95 00 fc 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0400]
c00011a1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011a4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011a8:	89 d5                	mov    ebp,edx
c00011aa:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011ae:	74 1e                	je     c00011ce <dlmalloc+0x1ba>
c00011b0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011b3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011b6:	77 12                	ja     c00011ca <dlmalloc+0x1b6>
c00011b8:	83 cf 01             	or     edi,0x1
c00011bb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011be:	76 05                	jbe    c00011c5 <dlmalloc+0x1b1>
c00011c0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011c3:	eb f6                	jmp    c00011bb <dlmalloc+0x1a7>
c00011c5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011c8:	eb 04                	jmp    c00011ce <dlmalloc+0x1ba>
c00011ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ce:	89 c7                	mov    edi,eax
c00011d0:	88 c1                	mov    cl,al
c00011d2:	c1 ff 05             	sar    edi,0x5
c00011d5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011d9:	bf 01 00 00 00       	mov    edi,0x1
c00011de:	d3 e7                	shl    edi,cl
c00011e0:	89 f8                	mov    eax,edi
c00011e2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011e6:	09 04 bd 34 ff 01 c0 	or     DWORD PTR [edi*4-0x3ffe00cc],eax
c00011ed:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011f3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011f6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011f9:	e9 db fe ff ff       	jmp    c00010d9 <dlmalloc+0xc5>
c00011fe:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001204:	76 78                	jbe    c000127e <dlmalloc+0x26a>
c0001206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000120a:	8d 04 c5 34 fc 01 c0 	lea    eax,[eax*8-0x3ffe03cc]
c0001211:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001214:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001217:	39 ca                	cmp    edx,ecx
c0001219:	74 63                	je     c000127e <dlmalloc+0x26a>
c000121b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000121e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001221:	83 e3 fc             	and    ebx,0xfffffffc
c0001224:	39 de                	cmp    esi,ebx
c0001226:	77 52                	ja     c000127a <dlmalloc+0x266>
c0001228:	89 df                	mov    edi,ebx
c000122a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000122d:	29 f7                	sub    edi,esi
c000122f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001232:	01 d3                	add    ebx,edx
c0001234:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001237:	83 ff 0f             	cmp    edi,0xf
c000123a:	8d 42 08             	lea    eax,[edx+0x8]
c000123d:	77 09                	ja     c0001248 <dlmalloc+0x234>
c000123f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001243:	e9 52 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001248:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000124b:	83 ce 01             	or     esi,0x1
c000124e:	89 0d 3c fc 01 c0    	mov    DWORD PTR ds:0xc001fc3c,ecx
c0001254:	89 0d 40 fc 01 c0    	mov    DWORD PTR ds:0xc001fc40,ecx
c000125a:	c7 41 08 34 fc 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001fc34
c0001261:	c7 41 0c 34 fc 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001fc34
c0001268:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000126b:	89 fa                	mov    edx,edi
c000126d:	83 ca 01             	or     edx,0x1
c0001270:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001273:	89 3b                	mov    DWORD PTR [ebx],edi
c0001275:	e9 20 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c000127a:	89 c2                	mov    edx,eax
c000127c:	eb 99                	jmp    c0001217 <dlmalloc+0x203>
c000127e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001282:	b8 01 00 00 00       	mov    eax,0x1
c0001287:	41                   	inc    ecx
c0001288:	89 cb                	mov    ebx,ecx
c000128a:	8d 14 cd 2c fc 01 c0 	lea    edx,[ecx*8-0x3ffe03d4]
c0001291:	c1 eb 05             	shr    ebx,0x5
c0001294:	d3 e0                	shl    eax,cl
c0001296:	8b 3c 9d 34 ff 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe00cc]
c000129d:	39 f8                	cmp    eax,edi
c000129f:	77 04                	ja     c00012a5 <dlmalloc+0x291>
c00012a1:	85 c0                	test   eax,eax
c00012a3:	75 26                	jne    c00012cb <dlmalloc+0x2b7>
c00012a5:	43                   	inc    ebx
c00012a6:	83 fb 02             	cmp    ebx,0x2
c00012a9:	0f 87 a6 00 00 00    	ja     c0001355 <dlmalloc+0x341>
c00012af:	8b 3c 9d 34 ff 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe00cc]
c00012b6:	85 ff                	test   edi,edi
c00012b8:	74 eb                	je     c00012a5 <dlmalloc+0x291>
c00012ba:	89 d8                	mov    eax,ebx
c00012bc:	c1 e0 06             	shl    eax,0x6
c00012bf:	8d 14 85 2c fc 01 c0 	lea    edx,[eax*4-0x3ffe03d4]
c00012c6:	b8 01 00 00 00       	mov    eax,0x1
c00012cb:	85 f8                	test   eax,edi
c00012cd:	75 07                	jne    c00012d6 <dlmalloc+0x2c2>
c00012cf:	83 c2 08             	add    edx,0x8
c00012d2:	01 c0                	add    eax,eax
c00012d4:	eb f5                	jmp    c00012cb <dlmalloc+0x2b7>
c00012d6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012d9:	39 ca                	cmp    edx,ecx
c00012db:	75 14                	jne    c00012f1 <dlmalloc+0x2dd>
c00012dd:	89 c1                	mov    ecx,eax
c00012df:	83 c2 08             	add    edx,0x8
c00012e2:	f7 d1                	not    ecx
c00012e4:	01 c0                	add    eax,eax
c00012e6:	21 cf                	and    edi,ecx
c00012e8:	89 3c 9d 34 ff 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe00cc],edi
c00012ef:	eb ac                	jmp    c000129d <dlmalloc+0x289>
c00012f1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012f4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012f7:	83 e0 fc             	and    eax,0xfffffffc
c00012fa:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012fd:	89 c3                	mov    ebx,eax
c00012ff:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001302:	29 f3                	sub    ebx,esi
c0001304:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001307:	83 fb 0f             	cmp    ebx,0xf
c000130a:	8d 41 08             	lea    eax,[ecx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x304>
c000130f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001313:	e9 82 00 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001318:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000131b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001321:	89 3d 3c fc 01 c0    	mov    DWORD PTR ds:0xc001fc3c,edi
c0001327:	89 3d 40 fc 01 c0    	mov    DWORD PTR ds:0xc001fc40,edi
c000132d:	c7 47 08 34 fc 01 c0 	mov    DWORD PTR [edi+0x8],0xc001fc34
c0001334:	c7 47 0c 34 fc 01 c0 	mov    DWORD PTR [edi+0xc],0xc001fc34
c000133b:	77 06                	ja     c0001343 <dlmalloc+0x32f>
c000133d:	89 3d 30 fc 01 c0    	mov    DWORD PTR ds:0xc001fc30,edi
c0001343:	83 ce 01             	or     esi,0x1
c0001346:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001349:	89 d9                	mov    ecx,ebx
c000134b:	83 c9 01             	or     ecx,0x1
c000134e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001351:	89 1a                	mov    DWORD PTR [edx],ebx
c0001353:	eb 45                	jmp    c000139a <dlmalloc+0x386>
c0001355:	a1 2c fc 01 c0       	mov    eax,ds:0xc001fc2c
c000135a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000135d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001360:	83 e2 fc             	and    edx,0xfffffffc
c0001363:	39 d1                	cmp    ecx,edx
c0001365:	77 1e                	ja     c0001385 <dlmalloc+0x371>
c0001367:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000136a:	89 f3                	mov    ebx,esi
c000136c:	89 0d 2c fc 01 c0    	mov    DWORD PTR ds:0xc001fc2c,ecx
c0001372:	83 cb 01             	or     ebx,0x1
c0001375:	29 f2                	sub    edx,esi
c0001377:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000137a:	83 ca 01             	or     edx,0x1
c000137d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001380:	e9 2d fd ff ff       	jmp    c00010b2 <dlmalloc+0x9e>
c0001385:	83 c4 1c             	add    esp,0x1c
c0001388:	89 f0                	mov    eax,esi
c000138a:	5b                   	pop    ebx
c000138b:	ba 00 fc 01 c0       	mov    edx,0xc001fc00
c0001390:	5e                   	pop    esi
c0001391:	5f                   	pop    edi
c0001392:	5d                   	pop    ebp
c0001393:	e9 16 fa ff ff       	jmp    c0000dae <sYSMALLOc>
c0001398:	31 c0                	xor    eax,eax
c000139a:	83 c4 1c             	add    esp,0x1c
c000139d:	5b                   	pop    ebx
c000139e:	5e                   	pop    esi
c000139f:	5f                   	pop    edi
c00013a0:	5d                   	pop    ebp
c00013a1:	c3                   	ret    

c00013a2 <iALLOc>:
c00013a2:	55                   	push   ebp
c00013a3:	89 c5                	mov    ebp,eax
c00013a5:	57                   	push   edi
c00013a6:	56                   	push   esi
c00013a7:	53                   	push   ebx
c00013a8:	83 ec 2c             	sub    esp,0x2c
c00013ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013af:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013b7:	83 3d 00 fc 01 c0 00 	cmp    DWORD PTR ds:0xc001fc00,0x0
c00013be:	75 12                	jne    c00013d2 <iALLOc+0x30>
c00013c0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013c4:	b8 00 fc 01 c0       	mov    eax,0xc001fc00
c00013c9:	e8 04 f8 ff ff       	call   c0000bd2 <malloc_consolidate>
c00013ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d7:	74 12                	je     c00013eb <iALLOc+0x49>
c00013d9:	85 ed                	test   ebp,ebp
c00013db:	0f 84 64 01 00 00    	je     c0001545 <iALLOc+0x1a3>
c00013e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013e9:	eb 33                	jmp    c000141e <iALLOc+0x7c>
c00013eb:	85 ed                	test   ebp,ebp
c00013ed:	75 14                	jne    c0001403 <iALLOc+0x61>
c00013ef:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013f7:	83 c4 2c             	add    esp,0x2c
c00013fa:	5b                   	pop    ebx
c00013fb:	5e                   	pop    esi
c00013fc:	5f                   	pop    edi
c00013fd:	5d                   	pop    ebp
c00013fe:	e9 11 fc ff ff       	jmp    c0001014 <dlmalloc>
c0001403:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000140a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001412:	83 f8 0f             	cmp    eax,0xf
c0001415:	76 07                	jbe    c000141e <iALLOc+0x7c>
c0001417:	83 e0 f8             	and    eax,0xfffffff8
c000141a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000141e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001423:	75 09                	jne    c000142e <iALLOc+0x8c>
c0001425:	89 d0                	mov    eax,edx
c0001427:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000142a:	31 f6                	xor    esi,esi
c000142c:	eb 3b                	jmp    c0001469 <iALLOc+0xc7>
c000142e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001430:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001438:	83 c0 0b             	add    eax,0xb
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 07                	jbe    c0001447 <iALLOc+0xa5>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000144b:	0f af f5             	imul   esi,ebp
c000144e:	eb 25                	jmp    c0001475 <iALLOc+0xd3>
c0001450:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001452:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001455:	bb 10 00 00 00       	mov    ebx,0x10
c000145a:	83 f9 0f             	cmp    ecx,0xf
c000145d:	76 05                	jbe    c0001464 <iALLOc+0xc2>
c000145f:	83 e1 f8             	and    ecx,0xfffffff8
c0001462:	89 cb                	mov    ebx,ecx
c0001464:	01 de                	add    esi,ebx
c0001466:	83 c0 04             	add    eax,0x4
c0001469:	39 c7                	cmp    edi,eax
c000146b:	75 e3                	jne    c0001450 <iALLOc+0xae>
c000146d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001479:	8b 1d 54 ff 01 c0    	mov    ebx,DWORD PTR ds:0xc001ff54
c000147f:	83 ec 0c             	sub    esp,0xc
c0001482:	c7 05 54 ff 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001ff54,0x0
c000148c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001490:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001494:	50                   	push   eax
c0001495:	e8 7a fb ff ff       	call   c0001014 <dlmalloc>
c000149a:	83 c4 10             	add    esp,0x10
c000149d:	89 1d 54 ff 01 c0    	mov    DWORD PTR ds:0xc001ff54,ebx
c00014a3:	85 c0                	test   eax,eax
c00014a5:	0f 84 92 00 00 00    	je     c000153d <iALLOc+0x19b>
c00014ab:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014ae:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b1:	83 e3 fc             	and    ebx,0xfffffffc
c00014b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014b8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014bd:	74 1e                	je     c00014dd <iALLOc+0x13b>
c00014bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014c3:	89 d9                	mov    ecx,ebx
c00014c5:	52                   	push   edx
c00014c6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014ca:	83 e9 04             	sub    ecx,0x4
c00014cd:	51                   	push   ecx
c00014ce:	6a 00                	push   0x0
c00014d0:	50                   	push   eax
c00014d1:	e8 1a f0 ff ff       	call   c00004f0 <memset>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	75 14                	jne    c00014f8 <iALLOc+0x156>
c00014e4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014e7:	29 f3                	sub    ebx,esi
c00014e9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014ec:	83 cb 01             	or     ebx,0x1
c00014ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014f3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014f6:	89 f3                	mov    ebx,esi
c00014f8:	31 c0                	xor    eax,eax
c00014fa:	4d                   	dec    ebp
c00014fb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001502:	39 c5                	cmp    ebp,eax
c0001504:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001507:	74 2c                	je     c0001535 <iALLOc+0x193>
c0001509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000150d:	85 c9                	test   ecx,ecx
c000150f:	75 15                	jne    c0001526 <iALLOc+0x184>
c0001511:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001514:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001517:	b9 10 00 00 00       	mov    ecx,0x10
c000151c:	83 fe 0f             	cmp    esi,0xf
c000151f:	76 05                	jbe    c0001526 <iALLOc+0x184>
c0001521:	83 e6 f8             	and    esi,0xfffffff8
c0001524:	89 f1                	mov    ecx,esi
c0001526:	89 ce                	mov    esi,ecx
c0001528:	29 cb                	sub    ebx,ecx
c000152a:	83 ce 01             	or     esi,0x1
c000152d:	40                   	inc    eax
c000152e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001531:	01 cf                	add    edi,ecx
c0001533:	eb c6                	jmp    c00014fb <iALLOc+0x159>
c0001535:	83 cb 01             	or     ebx,0x1
c0001538:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000153b:	eb 08                	jmp    c0001545 <iALLOc+0x1a3>
c000153d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001545:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001549:	83 c4 2c             	add    esp,0x2c
c000154c:	5b                   	pop    ebx
c000154d:	5e                   	pop    esi
c000154e:	5f                   	pop    edi
c000154f:	5d                   	pop    ebp
c0001550:	c3                   	ret    

c0001551 <dlrealloc>:
c0001551:	55                   	push   ebp
c0001552:	57                   	push   edi
c0001553:	56                   	push   esi
c0001554:	53                   	push   ebx
c0001555:	83 ec 1c             	sub    esp,0x1c
c0001558:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000155c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001560:	85 db                	test   ebx,ebx
c0001562:	75 10                	jne    c0001574 <dlrealloc+0x23>
c0001564:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001568:	83 c4 1c             	add    esp,0x1c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	e9 a0 fa ff ff       	jmp    c0001014 <dlmalloc>
c0001574:	83 f8 df             	cmp    eax,0xffffffdf
c0001577:	76 07                	jbe    c0001580 <dlrealloc+0x2f>
c0001579:	31 db                	xor    ebx,ebx
c000157b:	e9 6a 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c0001580:	83 c0 0b             	add    eax,0xb
c0001583:	bd 10 00 00 00       	mov    ebp,0x10
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 05                	jbe    c0001592 <dlrealloc+0x41>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 c5                	mov    ebp,eax
c0001592:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001595:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001598:	89 c6                	mov    esi,eax
c000159a:	83 e6 fc             	and    esi,0xfffffffc
c000159d:	a8 02                	test   al,0x2
c000159f:	75 d8                	jne    c0001579 <dlrealloc+0x28>
c00015a1:	39 f5                	cmp    ebp,esi
c00015a3:	0f 86 04 01 00 00    	jbe    c00016ad <dlrealloc+0x15c>
c00015a9:	8d 14 37             	lea    edx,[edi+esi*1]
c00015ac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015af:	39 15 2c fc 01 c0    	cmp    DWORD PTR ds:0xc001fc2c,edx
c00015b5:	75 33                	jne    c00015ea <dlrealloc+0x99>
c00015b7:	83 e1 fc             	and    ecx,0xfffffffc
c00015ba:	01 f1                	add    ecx,esi
c00015bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015c3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015c7:	77 49                	ja     c0001612 <dlrealloc+0xc1>
c00015c9:	01 ef                	add    edi,ebp
c00015cb:	83 e0 01             	and    eax,0x1
c00015ce:	09 e8                	or     eax,ebp
c00015d0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015d3:	89 3d 2c fc 01 c0    	mov    DWORD PTR ds:0xc001fc2c,edi
c00015d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015dd:	29 e8                	sub    eax,ebp
c00015df:	83 c8 01             	or     eax,0x1
c00015e2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015e5:	e9 00 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c00015ea:	89 c8                	mov    eax,ecx
c00015ec:	83 e0 fe             	and    eax,0xfffffffe
c00015ef:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015f4:	75 1c                	jne    c0001612 <dlrealloc+0xc1>
c00015f6:	83 e1 fc             	and    ecx,0xfffffffc
c00015f9:	01 f1                	add    ecx,esi
c00015fb:	39 cd                	cmp    ebp,ecx
c00015fd:	77 13                	ja     c0001612 <dlrealloc+0xc1>
c00015ff:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001602:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001605:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001608:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000160b:	89 ce                	mov    esi,ecx
c000160d:	e9 9b 00 00 00       	jmp    c00016ad <dlrealloc+0x15c>
c0001612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001616:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001619:	83 ec 0c             	sub    esp,0xc
c000161c:	50                   	push   eax
c000161d:	e8 f2 f9 ff ff       	call   c0001014 <dlmalloc>
c0001622:	83 c4 10             	add    esp,0x10
c0001625:	85 c0                	test   eax,eax
c0001627:	0f 84 4c ff ff ff    	je     c0001579 <dlrealloc+0x28>
c000162d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001634:	39 ca                	cmp    edx,ecx
c0001636:	75 0a                	jne    c0001642 <dlrealloc+0xf1>
c0001638:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000163b:	83 e0 fc             	and    eax,0xfffffffc
c000163e:	01 c6                	add    esi,eax
c0001640:	eb 6b                	jmp    c00016ad <dlrealloc+0x15c>
c0001642:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001645:	83 f9 27             	cmp    ecx,0x27
c0001648:	76 08                	jbe    c0001652 <dlrealloc+0x101>
c000164a:	89 de                	mov    esi,ebx
c000164c:	89 c7                	mov    edi,eax
c000164e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001650:	eb 43                	jmp    c0001695 <dlrealloc+0x144>
c0001652:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001654:	83 f9 13             	cmp    ecx,0x13
c0001657:	89 10                	mov    DWORD PTR [eax],edx
c0001659:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000165c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000165f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001665:	76 2e                	jbe    c0001695 <dlrealloc+0x144>
c0001667:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000166a:	83 f9 1b             	cmp    ecx,0x1b
c000166d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001670:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001673:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001676:	76 1d                	jbe    c0001695 <dlrealloc+0x144>
c0001678:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000167b:	83 f9 23             	cmp    ecx,0x23
c000167e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001681:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001684:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001687:	76 0c                	jbe    c0001695 <dlrealloc+0x144>
c0001689:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000168c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000168f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001692:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001699:	83 ec 0c             	sub    esp,0xc
c000169c:	53                   	push   ebx
c000169d:	e8 17 f6 ff ff       	call   c0000cb9 <dlfree>
c00016a2:	83 c4 10             	add    esp,0x10
c00016a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a9:	89 c3                	mov    ebx,eax
c00016ab:	eb 3d                	jmp    c00016ea <dlrealloc+0x199>
c00016ad:	89 f2                	mov    edx,esi
c00016af:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b2:	29 ea                	sub    edx,ebp
c00016b4:	83 e1 01             	and    ecx,0x1
c00016b7:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ba:	83 fa 0f             	cmp    edx,0xf
c00016bd:	77 0b                	ja     c00016ca <dlrealloc+0x179>
c00016bf:	09 ce                	or     esi,ecx
c00016c1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016c4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c8:	eb 20                	jmp    c00016ea <dlrealloc+0x199>
c00016ca:	01 ef                	add    edi,ebp
c00016cc:	83 ec 0c             	sub    esp,0xc
c00016cf:	09 cd                	or     ebp,ecx
c00016d1:	83 ca 01             	or     edx,0x1
c00016d4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016d7:	83 c7 08             	add    edi,0x8
c00016da:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016dd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e1:	57                   	push   edi
c00016e2:	e8 d2 f5 ff ff       	call   c0000cb9 <dlfree>
c00016e7:	83 c4 10             	add    esp,0x10
c00016ea:	83 c4 1c             	add    esp,0x1c
c00016ed:	89 d8                	mov    eax,ebx
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	c3                   	ret    

c00016f4 <dlmemalign>:
c00016f4:	55                   	push   ebp
c00016f5:	57                   	push   edi
c00016f6:	56                   	push   esi
c00016f7:	53                   	push   ebx
c00016f8:	83 ec 0c             	sub    esp,0xc
c00016fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001703:	83 fa 08             	cmp    edx,0x8
c0001706:	77 10                	ja     c0001718 <dlmemalign+0x24>
c0001708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000170c:	83 c4 0c             	add    esp,0xc
c000170f:	5b                   	pop    ebx
c0001710:	5e                   	pop    esi
c0001711:	5f                   	pop    edi
c0001712:	5d                   	pop    ebp
c0001713:	e9 fc f8 ff ff       	jmp    c0001014 <dlmalloc>
c0001718:	bf 10 00 00 00       	mov    edi,0x10
c000171d:	83 fa 0f             	cmp    edx,0xf
c0001720:	76 13                	jbe    c0001735 <dlmemalign+0x41>
c0001722:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001725:	85 d1                	test   ecx,edx
c0001727:	75 04                	jne    c000172d <dlmemalign+0x39>
c0001729:	89 d7                	mov    edi,edx
c000172b:	eb 08                	jmp    c0001735 <dlmemalign+0x41>
c000172d:	39 d7                	cmp    edi,edx
c000172f:	73 04                	jae    c0001735 <dlmemalign+0x41>
c0001731:	01 ff                	add    edi,edi
c0001733:	eb f8                	jmp    c000172d <dlmemalign+0x39>
c0001735:	83 f8 df             	cmp    eax,0xffffffdf
c0001738:	76 07                	jbe    c0001741 <dlmemalign+0x4d>
c000173a:	31 c0                	xor    eax,eax
c000173c:	e9 ce 00 00 00       	jmp    c000180f <dlmemalign+0x11b>
c0001741:	83 c0 0b             	add    eax,0xb
c0001744:	bd 10 00 00 00       	mov    ebp,0x10
c0001749:	83 f8 0f             	cmp    eax,0xf
c000174c:	76 05                	jbe    c0001753 <dlmemalign+0x5f>
c000174e:	83 e0 f8             	and    eax,0xfffffff8
c0001751:	89 c5                	mov    ebp,eax
c0001753:	83 ec 0c             	sub    esp,0xc
c0001756:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000175a:	50                   	push   eax
c000175b:	e8 b4 f8 ff ff       	call   c0001014 <dlmalloc>
c0001760:	83 c4 10             	add    esp,0x10
c0001763:	89 c1                	mov    ecx,eax
c0001765:	85 c0                	test   eax,eax
c0001767:	74 d1                	je     c000173a <dlmemalign+0x46>
c0001769:	31 d2                	xor    edx,edx
c000176b:	8d 70 f8             	lea    esi,[eax-0x8]
c000176e:	f7 f7                	div    edi
c0001770:	85 d2                	test   edx,edx
c0001772:	74 62                	je     c00017d6 <dlmemalign+0xe2>
c0001774:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001778:	89 f8                	mov    eax,edi
c000177a:	f7 d8                	neg    eax
c000177c:	21 c3                	and    ebx,eax
c000177e:	83 eb 08             	sub    ebx,0x8
c0001781:	89 d8                	mov    eax,ebx
c0001783:	29 f0                	sub    eax,esi
c0001785:	83 f8 0f             	cmp    eax,0xf
c0001788:	77 02                	ja     c000178c <dlmemalign+0x98>
c000178a:	01 fb                	add    ebx,edi
c000178c:	89 d8                	mov    eax,ebx
c000178e:	29 f0                	sub    eax,esi
c0001790:	89 c6                	mov    esi,eax
c0001792:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001795:	89 c2                	mov    edx,eax
c0001797:	83 e2 fc             	and    edx,0xfffffffc
c000179a:	29 f2                	sub    edx,esi
c000179c:	a8 02                	test   al,0x2
c000179e:	74 10                	je     c00017b0 <dlmemalign+0xbc>
c00017a0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017a3:	83 ca 02             	or     edx,0x2
c00017a6:	8d 43 08             	lea    eax,[ebx+0x8]
c00017a9:	89 33                	mov    DWORD PTR [ebx],esi
c00017ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017ae:	eb 5f                	jmp    c000180f <dlmemalign+0x11b>
c00017b0:	83 ec 0c             	sub    esp,0xc
c00017b3:	89 d0                	mov    eax,edx
c00017b5:	83 c8 01             	or     eax,0x1
c00017b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017bb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017c3:	83 e0 01             	and    eax,0x1
c00017c6:	09 f0                	or     eax,esi
c00017c8:	89 de                	mov    esi,ebx
c00017ca:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017cd:	51                   	push   ecx
c00017ce:	e8 e6 f4 ff ff       	call   c0000cb9 <dlfree>
c00017d3:	83 c4 10             	add    esp,0x10
c00017d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017d9:	a8 02                	test   al,0x2
c00017db:	75 2f                	jne    c000180c <dlmemalign+0x118>
c00017dd:	83 e0 fc             	and    eax,0xfffffffc
c00017e0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017e3:	39 c2                	cmp    edx,eax
c00017e5:	73 25                	jae    c000180c <dlmemalign+0x118>
c00017e7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	29 e8                	sub    eax,ebp
c00017ef:	83 c2 08             	add    edx,0x8
c00017f2:	83 c8 01             	or     eax,0x1
c00017f5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017fb:	83 e0 01             	and    eax,0x1
c00017fe:	09 c5                	or     ebp,eax
c0001800:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001803:	52                   	push   edx
c0001804:	e8 b0 f4 ff ff       	call   c0000cb9 <dlfree>
c0001809:	83 c4 10             	add    esp,0x10
c000180c:	8d 46 08             	lea    eax,[esi+0x8]
c000180f:	83 c4 0c             	add    esp,0xc
c0001812:	5b                   	pop    ebx
c0001813:	5e                   	pop    esi
c0001814:	5f                   	pop    edi
c0001815:	5d                   	pop    ebp
c0001816:	c3                   	ret    

c0001817 <dlcalloc>:
c0001817:	53                   	push   ebx
c0001818:	83 ec 14             	sub    esp,0x14
c000181b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000181f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001824:	50                   	push   eax
c0001825:	e8 ea f7 ff ff       	call   c0001014 <dlmalloc>
c000182a:	83 c4 10             	add    esp,0x10
c000182d:	89 c3                	mov    ebx,eax
c000182f:	85 c0                	test   eax,eax
c0001831:	74 77                	je     c00018aa <dlcalloc+0x93>
c0001833:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001836:	89 d0                	mov    eax,edx
c0001838:	83 e0 fc             	and    eax,0xfffffffc
c000183b:	80 e2 02             	and    dl,0x2
c000183e:	75 5a                	jne    c000189a <dlcalloc+0x83>
c0001840:	83 e8 04             	sub    eax,0x4
c0001843:	83 f8 27             	cmp    eax,0x27
c0001846:	76 03                	jbe    c000184b <dlcalloc+0x34>
c0001848:	51                   	push   ecx
c0001849:	eb 53                	jmp    c000189e <dlcalloc+0x87>
c000184b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001851:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001858:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000185f:	83 f8 13             	cmp    eax,0x13
c0001862:	76 46                	jbe    c00018aa <dlcalloc+0x93>
c0001864:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000186b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001872:	83 f8 1b             	cmp    eax,0x1b
c0001875:	76 33                	jbe    c00018aa <dlcalloc+0x93>
c0001877:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000187e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001885:	83 f8 23             	cmp    eax,0x23
c0001888:	76 20                	jbe    c00018aa <dlcalloc+0x93>
c000188a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001891:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001898:	eb 10                	jmp    c00018aa <dlcalloc+0x93>
c000189a:	83 e8 08             	sub    eax,0x8
c000189d:	52                   	push   edx
c000189e:	50                   	push   eax
c000189f:	6a 00                	push   0x0
c00018a1:	53                   	push   ebx
c00018a2:	e8 49 ec ff ff       	call   c00004f0 <memset>
c00018a7:	83 c4 10             	add    esp,0x10
c00018aa:	89 d8                	mov    eax,ebx
c00018ac:	83 c4 08             	add    esp,0x8
c00018af:	5b                   	pop    ebx
c00018b0:	c3                   	ret    

c00018b1 <dlcfree>:
c00018b1:	e9 03 f4 ff ff       	jmp    c0000cb9 <dlfree>

c00018b6 <dlindependent_calloc>:
c00018b6:	83 ec 28             	sub    esp,0x28
c00018b9:	b9 03 00 00 00       	mov    ecx,0x3
c00018be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018ca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d2:	e8 cb fa ff ff       	call   c00013a2 <iALLOc>
c00018d7:	83 c4 2c             	add    esp,0x2c
c00018da:	c3                   	ret    

c00018db <dlindependent_comalloc>:
c00018db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e3:	31 c9                	xor    ecx,ecx
c00018e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018ed:	e9 b0 fa ff ff       	jmp    c00013a2 <iALLOc>

c00018f2 <dlvalloc>:
c00018f2:	83 ec 0c             	sub    esp,0xc
c00018f5:	83 3d 00 fc 01 c0 00 	cmp    DWORD PTR ds:0xc001fc00,0x0
c00018fc:	75 0a                	jne    c0001908 <dlvalloc+0x16>
c00018fe:	b8 00 fc 01 c0       	mov    eax,0xc001fc00
c0001903:	e8 ca f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001908:	50                   	push   eax
c0001909:	50                   	push   eax
c000190a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000190e:	ff 35 5c ff 01 c0    	push   DWORD PTR ds:0xc001ff5c
c0001914:	e8 db fd ff ff       	call   c00016f4 <dlmemalign>
c0001919:	83 c4 1c             	add    esp,0x1c
c000191c:	c3                   	ret    

c000191d <dlpvalloc>:
c000191d:	83 ec 0c             	sub    esp,0xc
c0001920:	83 3d 00 fc 01 c0 00 	cmp    DWORD PTR ds:0xc001fc00,0x0
c0001927:	75 0a                	jne    c0001933 <dlpvalloc+0x16>
c0001929:	b8 00 fc 01 c0       	mov    eax,0xc001fc00
c000192e:	e8 9f f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001933:	a1 5c ff 01 c0       	mov    eax,ds:0xc001ff5c
c0001938:	89 c1                	mov    ecx,eax
c000193a:	52                   	push   edx
c000193b:	f7 d9                	neg    ecx
c000193d:	52                   	push   edx
c000193e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001942:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001946:	21 ca                	and    edx,ecx
c0001948:	52                   	push   edx
c0001949:	50                   	push   eax
c000194a:	e8 a5 fd ff ff       	call   c00016f4 <dlmemalign>
c000194f:	83 c4 1c             	add    esp,0x1c
c0001952:	c3                   	ret    

c0001953 <dlmalloc_trim>:
c0001953:	b8 00 fc 01 c0       	mov    eax,0xc001fc00
c0001958:	e8 75 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c000195d:	31 c0                	xor    eax,eax
c000195f:	c3                   	ret    

c0001960 <dlmalloc_usable_size>:
c0001960:	53                   	push   ebx
c0001961:	31 c0                	xor    eax,eax
c0001963:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001967:	85 c9                	test   ecx,ecx
c0001969:	74 24                	je     c000198f <dlmalloc_usable_size+0x2f>
c000196b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000196e:	f6 c2 02             	test   dl,0x2
c0001971:	74 08                	je     c000197b <dlmalloc_usable_size+0x1b>
c0001973:	83 e2 fc             	and    edx,0xfffffffc
c0001976:	8d 42 f8             	lea    eax,[edx-0x8]
c0001979:	eb 14                	jmp    c000198f <dlmalloc_usable_size+0x2f>
c000197b:	89 d3                	mov    ebx,edx
c000197d:	31 c0                	xor    eax,eax
c000197f:	83 e3 fe             	and    ebx,0xfffffffe
c0001982:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001987:	74 06                	je     c000198f <dlmalloc_usable_size+0x2f>
c0001989:	83 e2 fc             	and    edx,0xfffffffc
c000198c:	8d 42 fc             	lea    eax,[edx-0x4]
c000198f:	5b                   	pop    ebx
c0001990:	c3                   	ret    

c0001991 <dlmallinfo>:
c0001991:	55                   	push   ebp
c0001992:	57                   	push   edi
c0001993:	56                   	push   esi
c0001994:	53                   	push   ebx
c0001995:	83 ec 08             	sub    esp,0x8
c0001998:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000199c:	83 3d 2c fc 01 c0 00 	cmp    DWORD PTR ds:0xc001fc2c,0x0
c00019a3:	75 0a                	jne    c00019af <dlmallinfo+0x1e>
c00019a5:	b8 00 fc 01 c0       	mov    eax,0xc001fc00
c00019aa:	e8 23 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c00019af:	a1 2c fc 01 c0       	mov    eax,ds:0xc001fc2c
c00019b4:	31 ed                	xor    ebp,ebp
c00019b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019b9:	31 c9                	xor    ecx,ecx
c00019bb:	83 e0 fc             	and    eax,0xfffffffc
c00019be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c2:	31 c0                	xor    eax,eax
c00019c4:	8b 14 85 04 fc 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe03fc]
c00019cb:	85 d2                	test   edx,edx
c00019cd:	74 0e                	je     c00019dd <dlmallinfo+0x4c>
c00019cf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d2:	45                   	inc    ebp
c00019d3:	83 e6 fc             	and    esi,0xfffffffc
c00019d6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019d9:	01 f1                	add    ecx,esi
c00019db:	eb ee                	jmp    c00019cb <dlmallinfo+0x3a>
c00019dd:	40                   	inc    eax
c00019de:	83 f8 0a             	cmp    eax,0xa
c00019e1:	75 e1                	jne    c00019c4 <dlmallinfo+0x33>
c00019e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019e7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ee:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f1:	b8 34 fc 01 c0       	mov    eax,0xc001fc34
c00019f6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019f9:	39 f0                	cmp    eax,esi
c00019fb:	74 10                	je     c0001a0d <dlmallinfo+0x7c>
c00019fd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a00:	ff 04 24             	inc    DWORD PTR [esp]
c0001a03:	83 e7 fc             	and    edi,0xfffffffc
c0001a06:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a09:	01 fa                	add    edx,edi
c0001a0b:	eb ec                	jmp    c00019f9 <dlmallinfo+0x68>
c0001a0d:	83 c0 08             	add    eax,0x8
c0001a10:	3d 2c ff 01 c0       	cmp    eax,0xc001ff2c
c0001a15:	75 df                	jne    c00019f6 <dlmallinfo+0x65>
c0001a17:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a1a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a1d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a20:	a1 68 ff 01 c0       	mov    eax,ds:0xc001ff68
c0001a25:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a28:	89 03                	mov    DWORD PTR [ebx],eax
c0001a2a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a2d:	8b 35 50 ff 01 c0    	mov    esi,DWORD PTR ds:0xc001ff50
c0001a33:	29 d0                	sub    eax,edx
c0001a35:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a38:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a3b:	8b 35 64 ff 01 c0    	mov    esi,DWORD PTR ds:0xc001ff64
c0001a41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a45:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a48:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a4b:	8b 35 74 ff 01 c0    	mov    esi,DWORD PTR ds:0xc001ff74
c0001a51:	89 d8                	mov    eax,ebx
c0001a53:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a56:	83 c4 08             	add    esp,0x8
c0001a59:	5b                   	pop    ebx
c0001a5a:	5e                   	pop    esi
c0001a5b:	5f                   	pop    edi
c0001a5c:	5d                   	pop    ebp
c0001a5d:	c2 04 00             	ret    0x4

c0001a60 <dlmalloc_stats>:
c0001a60:	83 ec 30             	sub    esp,0x30
c0001a63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a67:	50                   	push   eax
c0001a68:	e8 24 ff ff ff       	call   c0001991 <dlmallinfo>
c0001a6d:	83 c4 30             	add    esp,0x30
c0001a70:	c3                   	ret    

c0001a71 <dlmallopt>:
c0001a71:	56                   	push   esi
c0001a72:	b8 00 fc 01 c0       	mov    eax,0xc001fc00
c0001a77:	53                   	push   ebx
c0001a78:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a80:	e8 4d f1 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001a85:	8d 46 04             	lea    eax,[esi+0x4]
c0001a88:	83 f8 05             	cmp    eax,0x5
c0001a8b:	77 67                	ja     c0001af4 <dlmallopt+0x83>
c0001a8d:	ff 24 85 04 d0 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2ffc]
c0001a94:	83 fb 50             	cmp    ebx,0x50
c0001a97:	77 5b                	ja     c0001af4 <dlmallopt+0x83>
c0001a99:	ba 08 00 00 00       	mov    edx,0x8
c0001a9e:	85 db                	test   ebx,ebx
c0001aa0:	74 12                	je     c0001ab4 <dlmallopt+0x43>
c0001aa2:	83 c3 0b             	add    ebx,0xb
c0001aa5:	ba 10 00 00 00       	mov    edx,0x10
c0001aaa:	83 fb 0f             	cmp    ebx,0xf
c0001aad:	76 05                	jbe    c0001ab4 <dlmallopt+0x43>
c0001aaf:	89 da                	mov    edx,ebx
c0001ab1:	83 e2 f8             	and    edx,0xfffffff8
c0001ab4:	a1 00 fc 01 c0       	mov    eax,ds:0xc001fc00
c0001ab9:	83 e0 03             	and    eax,0x3
c0001abc:	09 d0                	or     eax,edx
c0001abe:	a3 00 fc 01 c0       	mov    ds:0xc001fc00,eax
c0001ac3:	eb 31                	jmp    c0001af6 <dlmallopt+0x85>
c0001ac5:	89 1d 44 ff 01 c0    	mov    DWORD PTR ds:0xc001ff44,ebx
c0001acb:	eb 06                	jmp    c0001ad3 <dlmallopt+0x62>
c0001acd:	89 1d 48 ff 01 c0    	mov    DWORD PTR ds:0xc001ff48,ebx
c0001ad3:	be 01 00 00 00       	mov    esi,0x1
c0001ad8:	eb 1c                	jmp    c0001af6 <dlmallopt+0x85>
c0001ada:	89 1d 4c ff 01 c0    	mov    DWORD PTR ds:0xc001ff4c,ebx
c0001ae0:	eb f1                	jmp    c0001ad3 <dlmallopt+0x62>
c0001ae2:	31 f6                	xor    esi,esi
c0001ae4:	85 db                	test   ebx,ebx
c0001ae6:	75 0e                	jne    c0001af6 <dlmallopt+0x85>
c0001ae8:	c7 05 54 ff 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001ff54,0x0
c0001af2:	eb df                	jmp    c0001ad3 <dlmallopt+0x62>
c0001af4:	31 f6                	xor    esi,esi
c0001af6:	89 f0                	mov    eax,esi
c0001af8:	5b                   	pop    ebx
c0001af9:	5e                   	pop    esi
c0001afa:	c3                   	ret    
c0001afb:	90                   	nop

c0001afc <isblank>:
c0001afc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b01:	74 09                	je     c0001b0c <isblank+0x10>
c0001b03:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b08:	75 0a                	jne    c0001b14 <isblank+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <iscntrl>:
c0001b1c:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b21:	7e 09                	jle    c0001b2c <iscntrl+0x10>
c0001b23:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b28:	75 0a                	jne    c0001b34 <iscntrl+0x18>
c0001b2a:	66 90                	xchg   ax,ax
c0001b2c:	b8 01 00 00 00       	mov    eax,0x1
c0001b31:	c3                   	ret    
c0001b32:	66 90                	xchg   ax,ax
c0001b34:	b8 00 00 00 00       	mov    eax,0x0
c0001b39:	c3                   	ret    
c0001b3a:	66 90                	xchg   ax,ax

c0001b3c <isdigit>:
c0001b3c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b41:	7e 0d                	jle    c0001b50 <isdigit+0x14>
c0001b43:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b48:	7f 06                	jg     c0001b50 <isdigit+0x14>
c0001b4a:	b8 01 00 00 00       	mov    eax,0x1
c0001b4f:	c3                   	ret    
c0001b50:	b8 00 00 00 00       	mov    eax,0x0
c0001b55:	c3                   	ret    
c0001b56:	66 90                	xchg   ax,ax

c0001b58 <islower>:
c0001b58:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b5d:	7e 0d                	jle    c0001b6c <islower+0x14>
c0001b5f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b64:	7f 06                	jg     c0001b6c <islower+0x14>
c0001b66:	b8 01 00 00 00       	mov    eax,0x1
c0001b6b:	c3                   	ret    
c0001b6c:	b8 00 00 00 00       	mov    eax,0x0
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax

c0001b74 <isspace>:
c0001b74:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b79:	7c 19                	jl     c0001b94 <isspace+0x20>
c0001b7b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b80:	7e 0a                	jle    c0001b8c <isspace+0x18>
c0001b82:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b87:	75 0b                	jne    c0001b94 <isspace+0x20>
c0001b89:	8d 76 00             	lea    esi,[esi+0x0]
c0001b8c:	b8 01 00 00 00       	mov    eax,0x1
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax
c0001b94:	b8 00 00 00 00       	mov    eax,0x0
c0001b99:	c3                   	ret    
c0001b9a:	66 90                	xchg   ax,ax

c0001b9c <isupper>:
c0001b9c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ba1:	7e 0d                	jle    c0001bb0 <isupper+0x14>
c0001ba3:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001ba8:	7f 06                	jg     c0001bb0 <isupper+0x14>
c0001baa:	b8 01 00 00 00       	mov    eax,0x1
c0001baf:	c3                   	ret    
c0001bb0:	b8 00 00 00 00       	mov    eax,0x0
c0001bb5:	c3                   	ret    
c0001bb6:	66 90                	xchg   ax,ax

c0001bb8 <isalpha>:
c0001bb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bbc:	e8 db ff ff ff       	call   c0001b9c <isupper>
c0001bc1:	83 c4 04             	add    esp,0x4
c0001bc4:	85 c0                	test   eax,eax
c0001bc6:	75 10                	jne    c0001bd8 <isalpha+0x20>
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 87 ff ff ff       	call   c0001b58 <islower>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	74 08                	je     c0001be0 <isalpha+0x28>
c0001bd8:	b8 01 00 00 00       	mov    eax,0x1
c0001bdd:	c3                   	ret    
c0001bde:	66 90                	xchg   ax,ax
c0001be0:	b8 00 00 00 00       	mov    eax,0x0
c0001be5:	c3                   	ret    
c0001be6:	66 90                	xchg   ax,ax

c0001be8 <isalnum>:
c0001be8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bec:	e8 c7 ff ff ff       	call   c0001bb8 <isalpha>
c0001bf1:	83 c4 04             	add    esp,0x4
c0001bf4:	85 c0                	test   eax,eax
c0001bf6:	75 10                	jne    c0001c08 <isalnum+0x20>
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 3b ff ff ff       	call   c0001b3c <isdigit>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	74 08                	je     c0001c10 <isalnum+0x28>
c0001c08:	b8 01 00 00 00       	mov    eax,0x1
c0001c0d:	c3                   	ret    
c0001c0e:	66 90                	xchg   ax,ax
c0001c10:	b8 00 00 00 00       	mov    eax,0x0
c0001c15:	c3                   	ret    
c0001c16:	66 90                	xchg   ax,ax

c0001c18 <ispunct>:
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 c7 ff ff ff       	call   c0001be8 <isalnum>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 28                	jne    c0001c50 <ispunct+0x38>
c0001c28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c2c:	e8 43 ff ff ff       	call   c0001b74 <isspace>
c0001c31:	83 c4 04             	add    esp,0x4
c0001c34:	85 c0                	test   eax,eax
c0001c36:	75 18                	jne    c0001c50 <ispunct+0x38>
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 db fe ff ff       	call   c0001b1c <iscntrl>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 08                	jne    c0001c50 <ispunct+0x38>
c0001c48:	b8 01 00 00 00       	mov    eax,0x1
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax
c0001c50:	b8 00 00 00 00       	mov    eax,0x0
c0001c55:	c3                   	ret    
c0001c56:	66 90                	xchg   ax,ax

c0001c58 <isgraph>:
c0001c58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c5c:	e8 87 ff ff ff       	call   c0001be8 <isalnum>
c0001c61:	83 c4 04             	add    esp,0x4
c0001c64:	85 c0                	test   eax,eax
c0001c66:	75 10                	jne    c0001c78 <isgraph+0x20>
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 a7 ff ff ff       	call   c0001c18 <ispunct>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	74 08                	je     c0001c80 <isgraph+0x28>
c0001c78:	b8 01 00 00 00       	mov    eax,0x1
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isprint>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 c7 ff ff ff       	call   c0001c58 <isgraph>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 08                	jne    c0001ca0 <isprint+0x18>
c0001c98:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c9d:	75 09                	jne    c0001ca8 <isprint+0x20>
c0001c9f:	90                   	nop
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <isxdigit>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 83 fe ff ff       	call   c0001b3c <isdigit>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 20                	jne    c0001ce0 <isxdigit+0x30>
c0001cc0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001cc5:	7e 09                	jle    c0001cd0 <isxdigit+0x20>
c0001cc7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ccc:	7e 12                	jle    c0001ce0 <isxdigit+0x30>
c0001cce:	66 90                	xchg   ax,ax
c0001cd0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cd5:	7e 11                	jle    c0001ce8 <isxdigit+0x38>
c0001cd7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cdc:	7f 0a                	jg     c0001ce8 <isxdigit+0x38>
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    

c0001cee <disk_status>:
c0001cee:	31 c0                	xor    eax,eax
c0001cf0:	c3                   	ret    

c0001cf1 <disk_initialize>:
c0001cf1:	31 c0                	xor    eax,eax
c0001cf3:	c3                   	ret    

c0001cf4 <disk_read>:
c0001cf4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cf9:	0f b6 04 85 e0 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc020]
c0001d01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d05:	e9 ba 53 01 00       	jmp    c00170c4 <fatWrapperReadDisk>

c0001d0a <disk_write>:
c0001d0a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0f:	0f b6 04 85 e0 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc020]
c0001d17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1b:	e9 e8 53 01 00       	jmp    c0017108 <fatWrapperWriteDisk>

c0001d20 <disk_ioctl>:
c0001d20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d29:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d2e:	0f b6 04 85 e0 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc020]
c0001d36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d3a:	e9 0d 54 01 00       	jmp    c001714c <fatWrapperIoctl>

c0001d3f <ld_word>:
c0001d3f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d43:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d46:	c1 e2 08             	shl    edx,0x8
c0001d49:	09 d0                	or     eax,edx
c0001d4b:	c3                   	ret    

c0001d4c <ld_dword>:
c0001d4c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d50:	89 d1                	mov    ecx,edx
c0001d52:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d56:	c1 e1 08             	shl    ecx,0x8
c0001d59:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d5c:	09 ca                	or     edx,ecx
c0001d5e:	c1 e2 08             	shl    edx,0x8
c0001d61:	09 d0                	or     eax,edx
c0001d63:	c3                   	ret    

c0001d64 <st_word>:
c0001d64:	66 89 10             	mov    WORD PTR [eax],dx
c0001d67:	c3                   	ret    

c0001d68 <st_dword>:
c0001d68:	89 10                	mov    DWORD PTR [eax],edx
c0001d6a:	c3                   	ret    

c0001d6b <mem_cpy>:
c0001d6b:	85 c9                	test   ecx,ecx
c0001d6d:	74 10                	je     c0001d7f <mem_cpy+0x14>
c0001d6f:	57                   	push   edi
c0001d70:	01 c1                	add    ecx,eax
c0001d72:	56                   	push   esi
c0001d73:	89 c7                	mov    edi,eax
c0001d75:	89 d6                	mov    esi,edx
c0001d77:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d78:	39 f9                	cmp    ecx,edi
c0001d7a:	75 fb                	jne    c0001d77 <mem_cpy+0xc>
c0001d7c:	5e                   	pop    esi
c0001d7d:	5f                   	pop    edi
c0001d7e:	c3                   	ret    
c0001d7f:	c3                   	ret    

c0001d80 <mem_set>:
c0001d80:	01 c1                	add    ecx,eax
c0001d82:	40                   	inc    eax
c0001d83:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d86:	39 c8                	cmp    eax,ecx
c0001d88:	75 f8                	jne    c0001d82 <mem_set+0x2>
c0001d8a:	c3                   	ret    

c0001d8b <mem_cmp>:
c0001d8b:	57                   	push   edi
c0001d8c:	56                   	push   esi
c0001d8d:	89 c6                	mov    esi,eax
c0001d8f:	53                   	push   ebx
c0001d90:	46                   	inc    esi
c0001d91:	42                   	inc    edx
c0001d92:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d96:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d9a:	29 fb                	sub    ebx,edi
c0001d9c:	89 cf                	mov    edi,ecx
c0001d9e:	29 f7                	sub    edi,esi
c0001da0:	01 c7                	add    edi,eax
c0001da2:	74 04                	je     c0001da8 <mem_cmp+0x1d>
c0001da4:	85 db                	test   ebx,ebx
c0001da6:	74 e8                	je     c0001d90 <mem_cmp+0x5>
c0001da8:	89 d8                	mov    eax,ebx
c0001daa:	5b                   	pop    ebx
c0001dab:	5e                   	pop    esi
c0001dac:	5f                   	pop    edi
c0001dad:	c3                   	ret    

c0001dae <chk_chr>:
c0001dae:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001db1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001db4:	74 07                	je     c0001dbd <chk_chr+0xf>
c0001db6:	39 d1                	cmp    ecx,edx
c0001db8:	74 03                	je     c0001dbd <chk_chr+0xf>
c0001dba:	40                   	inc    eax
c0001dbb:	eb f1                	jmp    c0001dae <chk_chr>
c0001dbd:	89 c8                	mov    eax,ecx
c0001dbf:	c3                   	ret    

c0001dc0 <dbc_1st>:
c0001dc0:	31 c0                	xor    eax,eax
c0001dc2:	c3                   	ret    

c0001dc3 <dbc_2nd>:
c0001dc3:	31 c0                	xor    eax,eax
c0001dc5:	c3                   	ret    

c0001dc6 <tchar2uni>:
c0001dc6:	57                   	push   edi
c0001dc7:	89 c7                	mov    edi,eax
c0001dc9:	56                   	push   esi
c0001dca:	53                   	push   ebx
c0001dcb:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dcd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001dcf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001dd2:	84 c9                	test   cl,cl
c0001dd4:	78 0a                	js     c0001de0 <tchar2uni+0x1a>
c0001dd6:	0f b6 d1             	movzx  edx,cl
c0001dd9:	89 f3                	mov    ebx,esi
c0001ddb:	e9 9f 00 00 00       	jmp    c0001e7f <tchar2uni+0xb9>
c0001de0:	88 ca                	mov    dl,cl
c0001de2:	83 e2 e0             	and    edx,0xffffffe0
c0001de5:	80 fa c0             	cmp    dl,0xc0
c0001de8:	75 0c                	jne    c0001df6 <tchar2uni+0x30>
c0001dea:	89 ca                	mov    edx,ecx
c0001dec:	b9 01 00 00 00       	mov    ecx,0x1
c0001df1:	83 e2 1f             	and    edx,0x1f
c0001df4:	eb 2e                	jmp    c0001e24 <tchar2uni+0x5e>
c0001df6:	88 ca                	mov    dl,cl
c0001df8:	83 e2 f0             	and    edx,0xfffffff0
c0001dfb:	80 fa e0             	cmp    dl,0xe0
c0001dfe:	75 0c                	jne    c0001e0c <tchar2uni+0x46>
c0001e00:	89 ca                	mov    edx,ecx
c0001e02:	b9 02 00 00 00       	mov    ecx,0x2
c0001e07:	83 e2 0f             	and    edx,0xf
c0001e0a:	eb 18                	jmp    c0001e24 <tchar2uni+0x5e>
c0001e0c:	88 ca                	mov    dl,cl
c0001e0e:	83 e2 f8             	and    edx,0xfffffff8
c0001e11:	88 d0                	mov    al,dl
c0001e13:	83 ca ff             	or     edx,0xffffffff
c0001e16:	3c f0                	cmp    al,0xf0
c0001e18:	75 6c                	jne    c0001e86 <tchar2uni+0xc0>
c0001e1a:	89 ca                	mov    edx,ecx
c0001e1c:	b9 03 00 00 00       	mov    ecx,0x3
c0001e21:	83 e2 07             	and    edx,0x7
c0001e24:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e28:	46                   	inc    esi
c0001e29:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e2c:	88 c8                	mov    al,cl
c0001e2e:	83 e0 c0             	and    eax,0xffffffc0
c0001e31:	3c 80                	cmp    al,0x80
c0001e33:	75 4e                	jne    c0001e83 <tchar2uni+0xbd>
c0001e35:	c1 e2 06             	shl    edx,0x6
c0001e38:	83 e1 3f             	and    ecx,0x3f
c0001e3b:	09 ca                	or     edx,ecx
c0001e3d:	39 de                	cmp    esi,ebx
c0001e3f:	75 e7                	jne    c0001e28 <tchar2uni+0x62>
c0001e41:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e44:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e4a:	77 37                	ja     c0001e83 <tchar2uni+0xbd>
c0001e4c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e52:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e58:	76 29                	jbe    c0001e83 <tchar2uni+0xbd>
c0001e5a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e60:	76 1d                	jbe    c0001e7f <tchar2uni+0xb9>
c0001e62:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e68:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e6e:	c1 e1 06             	shl    ecx,0x6
c0001e71:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e77:	09 ca                	or     edx,ecx
c0001e79:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e7f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e81:	eb 03                	jmp    c0001e86 <tchar2uni+0xc0>
c0001e83:	83 ca ff             	or     edx,0xffffffff
c0001e86:	5b                   	pop    ebx
c0001e87:	89 d0                	mov    eax,edx
c0001e89:	5e                   	pop    esi
c0001e8a:	5f                   	pop    edi
c0001e8b:	c3                   	ret    

c0001e8c <put_utf>:
c0001e8c:	53                   	push   ebx
c0001e8d:	83 f8 7f             	cmp    eax,0x7f
c0001e90:	89 c3                	mov    ebx,eax
c0001e92:	b0 00                	mov    al,0x0
c0001e94:	77 11                	ja     c0001ea7 <put_utf+0x1b>
c0001e96:	85 c9                	test   ecx,ecx
c0001e98:	0f 84 e5 00 00 00    	je     c0001f83 <put_utf+0xf7>
c0001e9e:	88 1a                	mov    BYTE PTR [edx],bl
c0001ea0:	b0 01                	mov    al,0x1
c0001ea2:	e9 dc 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ea7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001ead:	77 23                	ja     c0001ed2 <put_utf+0x46>
c0001eaf:	83 f9 01             	cmp    ecx,0x1
c0001eb2:	0f 86 cb 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001eb8:	89 d8                	mov    eax,ebx
c0001eba:	83 e3 3f             	and    ebx,0x3f
c0001ebd:	c1 e8 06             	shr    eax,0x6
c0001ec0:	83 cb 80             	or     ebx,0xffffff80
c0001ec3:	83 c8 c0             	or     eax,0xffffffc0
c0001ec6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ec9:	88 02                	mov    BYTE PTR [edx],al
c0001ecb:	b0 02                	mov    al,0x2
c0001ecd:	e9 b1 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ed2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ed8:	77 40                	ja     c0001f1a <put_utf+0x8e>
c0001eda:	83 f9 02             	cmp    ecx,0x2
c0001edd:	0f 86 a0 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ee3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ee9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001eef:	0f 86 8e 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ef5:	89 d8                	mov    eax,ebx
c0001ef7:	c1 e8 0c             	shr    eax,0xc
c0001efa:	83 c8 e0             	or     eax,0xffffffe0
c0001efd:	88 02                	mov    BYTE PTR [edx],al
c0001eff:	89 d8                	mov    eax,ebx
c0001f01:	83 e3 3f             	and    ebx,0x3f
c0001f04:	c1 e8 06             	shr    eax,0x6
c0001f07:	83 cb 80             	or     ebx,0xffffff80
c0001f0a:	83 e0 3f             	and    eax,0x3f
c0001f0d:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001f10:	83 c8 80             	or     eax,0xffffff80
c0001f13:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f16:	b0 03                	mov    al,0x3
c0001f18:	eb 69                	jmp    c0001f83 <put_utf+0xf7>
c0001f1a:	83 f9 03             	cmp    ecx,0x3
c0001f1d:	76 64                	jbe    c0001f83 <put_utf+0xf7>
c0001f1f:	89 d9                	mov    ecx,ebx
c0001f21:	0f b7 c3             	movzx  eax,bx
c0001f24:	66 31 c9             	xor    cx,cx
c0001f27:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f2d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f33:	c1 e9 06             	shr    ecx,0x6
c0001f36:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f3c:	77 43                	ja     c0001f81 <put_utf+0xf5>
c0001f3e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f44:	77 3b                	ja     c0001f81 <put_utf+0xf5>
c0001f46:	09 cb                	or     ebx,ecx
c0001f48:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f4e:	89 d8                	mov    eax,ebx
c0001f50:	c1 e8 12             	shr    eax,0x12
c0001f53:	83 c8 f0             	or     eax,0xfffffff0
c0001f56:	88 02                	mov    BYTE PTR [edx],al
c0001f58:	89 d8                	mov    eax,ebx
c0001f5a:	c1 e8 0c             	shr    eax,0xc
c0001f5d:	83 e0 3f             	and    eax,0x3f
c0001f60:	83 c8 80             	or     eax,0xffffff80
c0001f63:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f66:	89 d8                	mov    eax,ebx
c0001f68:	83 e3 3f             	and    ebx,0x3f
c0001f6b:	c1 e8 06             	shr    eax,0x6
c0001f6e:	83 cb 80             	or     ebx,0xffffff80
c0001f71:	83 e0 3f             	and    eax,0x3f
c0001f74:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f77:	83 c8 80             	or     eax,0xffffff80
c0001f7a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f7d:	b0 04                	mov    al,0x4
c0001f7f:	eb 02                	jmp    c0001f83 <put_utf+0xf7>
c0001f81:	31 c0                	xor    eax,eax
c0001f83:	5b                   	pop    ebx
c0001f84:	c3                   	ret    

c0001f85 <clst2sect>:
c0001f85:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f88:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f8b:	83 ea 02             	sub    edx,0x2
c0001f8e:	39 ca                	cmp    edx,ecx
c0001f90:	76 0d                	jbe    c0001f9f <clst2sect+0x1a>
c0001f92:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f96:	0f af d1             	imul   edx,ecx
c0001f99:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f9c:	89 d0                	mov    eax,edx
c0001f9e:	c3                   	ret    
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <pick_lfn>:
c0001fa2:	55                   	push   ebp
c0001fa3:	57                   	push   edi
c0001fa4:	56                   	push   esi
c0001fa5:	89 d6                	mov    esi,edx
c0001fa7:	53                   	push   ebx
c0001fa8:	89 c3                	mov    ebx,eax
c0001faa:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fad:	e8 8d fd ff ff       	call   c0001d3f <ld_word>
c0001fb2:	66 85 c0             	test   ax,ax
c0001fb5:	74 04                	je     c0001fbb <pick_lfn+0x19>
c0001fb7:	31 c0                	xor    eax,eax
c0001fb9:	eb 5c                	jmp    c0002017 <pick_lfn+0x75>
c0001fbb:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001fbe:	bd 01 00 00 00       	mov    ebp,0x1
c0001fc3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fc6:	31 ff                	xor    edi,edi
c0001fc8:	49                   	dec    ecx
c0001fc9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fcc:	0f b6 87 60 d1 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2ea0]
c0001fd3:	01 f0                	add    eax,esi
c0001fd5:	e8 65 fd ff ff       	call   c0001d3f <ld_word>
c0001fda:	66 85 ed             	test   bp,bp
c0001fdd:	74 11                	je     c0001ff0 <pick_lfn+0x4e>
c0001fdf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fe5:	77 d0                	ja     c0001fb7 <pick_lfn+0x15>
c0001fe7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001feb:	89 c5                	mov    ebp,eax
c0001fed:	41                   	inc    ecx
c0001fee:	eb 04                	jmp    c0001ff4 <pick_lfn+0x52>
c0001ff0:	66 40                	inc    ax
c0001ff2:	75 c3                	jne    c0001fb7 <pick_lfn+0x15>
c0001ff4:	47                   	inc    edi
c0001ff5:	83 ff 0d             	cmp    edi,0xd
c0001ff8:	75 d2                	jne    c0001fcc <pick_lfn+0x2a>
c0001ffa:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ffd:	74 13                	je     c0002012 <pick_lfn+0x70>
c0001fff:	66 85 ed             	test   bp,bp
c0002002:	74 0e                	je     c0002012 <pick_lfn+0x70>
c0002004:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000200a:	77 ab                	ja     c0001fb7 <pick_lfn+0x15>
c000200c:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0002012:	b8 01 00 00 00       	mov    eax,0x1
c0002017:	5b                   	pop    ebx
c0002018:	5e                   	pop    esi
c0002019:	5f                   	pop    edi
c000201a:	5d                   	pop    ebp
c000201b:	c3                   	ret    

c000201c <put_lfn>:
c000201c:	55                   	push   ebp
c000201d:	31 ed                	xor    ebp,ebp
c000201f:	57                   	push   edi
c0002020:	89 d7                	mov    edi,edx
c0002022:	56                   	push   esi
c0002023:	31 f6                	xor    esi,esi
c0002025:	53                   	push   ebx
c0002026:	83 ec 08             	sub    esp,0x8
c0002029:	89 04 24             	mov    DWORD PTR [esp],eax
c000202c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002034:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000203a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000203d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002040:	31 d2                	xor    edx,edx
c0002042:	e8 1d fd ff ff       	call   c0001d64 <st_word>
c0002047:	0f b6 d9             	movzx  ebx,cl
c000204a:	4b                   	dec    ebx
c000204b:	6b db 0d             	imul   ebx,ebx,0xd
c000204e:	66 83 fe ff          	cmp    si,0xffff
c0002052:	74 08                	je     c000205c <put_lfn+0x40>
c0002054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002057:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000205b:	43                   	inc    ebx
c000205c:	0f b6 85 60 d1 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2ea0]
c0002063:	0f b7 d6             	movzx  edx,si
c0002066:	01 f8                	add    eax,edi
c0002068:	e8 f7 fc ff ff       	call   c0001d64 <st_word>
c000206d:	66 85 f6             	test   si,si
c0002070:	75 03                	jne    c0002075 <put_lfn+0x59>
c0002072:	83 ce ff             	or     esi,0xffffffff
c0002075:	45                   	inc    ebp
c0002076:	83 fd 0d             	cmp    ebp,0xd
c0002079:	75 d3                	jne    c000204e <put_lfn+0x32>
c000207b:	66 46                	inc    si
c000207d:	74 0a                	je     c0002089 <put_lfn+0x6d>
c000207f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002082:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002087:	75 09                	jne    c0002092 <put_lfn+0x76>
c0002089:	88 c8                	mov    al,cl
c000208b:	83 c8 40             	or     eax,0x40
c000208e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002092:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002096:	88 07                	mov    BYTE PTR [edi],al
c0002098:	83 c4 08             	add    esp,0x8
c000209b:	5b                   	pop    ebx
c000209c:	5e                   	pop    esi
c000209d:	5f                   	pop    edi
c000209e:	5d                   	pop    ebp
c000209f:	c3                   	ret    

c00020a0 <gen_numname>:
c00020a0:	57                   	push   edi
c00020a1:	89 cf                	mov    edi,ecx
c00020a3:	56                   	push   esi
c00020a4:	b9 0b 00 00 00       	mov    ecx,0xb
c00020a9:	53                   	push   ebx
c00020aa:	89 c6                	mov    esi,eax
c00020ac:	83 ec 10             	sub    esp,0x10
c00020af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00020b3:	e8 b3 fc ff ff       	call   c0001d6b <mem_cpy>
c00020b8:	83 fb 05             	cmp    ebx,0x5
c00020bb:	76 2d                	jbe    c00020ea <gen_numname+0x4a>
c00020bd:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020c0:	66 85 c0             	test   ax,ax
c00020c3:	74 25                	je     c00020ea <gen_numname+0x4a>
c00020c5:	83 c7 02             	add    edi,0x2
c00020c8:	ba 10 00 00 00       	mov    edx,0x10
c00020cd:	01 db                	add    ebx,ebx
c00020cf:	89 c1                	mov    ecx,eax
c00020d1:	66 d1 e8             	shr    ax,1
c00020d4:	83 e1 01             	and    ecx,0x1
c00020d7:	01 cb                	add    ebx,ecx
c00020d9:	0f ba e3 10          	bt     ebx,0x10
c00020dd:	73 06                	jae    c00020e5 <gen_numname+0x45>
c00020df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020e5:	4a                   	dec    edx
c00020e6:	75 e5                	jne    c00020cd <gen_numname+0x2d>
c00020e8:	eb d3                	jmp    c00020bd <gen_numname+0x1d>
c00020ea:	b8 07 00 00 00       	mov    eax,0x7
c00020ef:	88 d9                	mov    cl,bl
c00020f1:	83 e1 0f             	and    ecx,0xf
c00020f4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020f7:	80 fa 39             	cmp    dl,0x39
c00020fa:	76 03                	jbe    c00020ff <gen_numname+0x5f>
c00020fc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020ff:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002102:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002106:	89 da                	mov    edx,ebx
c0002108:	c1 ea 04             	shr    edx,0x4
c000210b:	83 fb 0f             	cmp    ebx,0xf
c000210e:	76 06                	jbe    c0002116 <gen_numname+0x76>
c0002110:	89 c8                	mov    eax,ecx
c0002112:	89 d3                	mov    ebx,edx
c0002114:	eb d9                	jmp    c00020ef <gen_numname+0x4f>
c0002116:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000211b:	31 d2                	xor    edx,edx
c000211d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002120:	8d 04 16             	lea    eax,[esi+edx*1]
c0002123:	39 ca                	cmp    edx,ecx
c0002125:	73 18                	jae    c000213f <gen_numname+0x9f>
c0002127:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000212a:	3c 20                	cmp    al,0x20
c000212c:	74 11                	je     c000213f <gen_numname+0x9f>
c000212e:	e8 8d fc ff ff       	call   c0001dc0 <dbc_1st>
c0002133:	85 c0                	test   eax,eax
c0002135:	74 05                	je     c000213c <gen_numname+0x9c>
c0002137:	39 d3                	cmp    ebx,edx
c0002139:	74 04                	je     c000213f <gen_numname+0x9f>
c000213b:	42                   	inc    edx
c000213c:	42                   	inc    edx
c000213d:	eb e1                	jmp    c0002120 <gen_numname+0x80>
c000213f:	b0 20                	mov    al,0x20
c0002141:	83 f9 07             	cmp    ecx,0x7
c0002144:	77 05                	ja     c000214b <gen_numname+0xab>
c0002146:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000214a:	41                   	inc    ecx
c000214b:	42                   	inc    edx
c000214c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002150:	83 fa 07             	cmp    edx,0x7
c0002153:	76 ea                	jbe    c000213f <gen_numname+0x9f>
c0002155:	83 c4 10             	add    esp,0x10
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	5f                   	pop    edi
c000215b:	c3                   	ret    

c000215c <sum_sfn>:
c000215c:	31 c9                	xor    ecx,ecx
c000215e:	31 d2                	xor    edx,edx
c0002160:	d0 ca                	ror    dl,1
c0002162:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002165:	41                   	inc    ecx
c0002166:	83 f9 0b             	cmp    ecx,0xb
c0002169:	75 f5                	jne    c0002160 <sum_sfn+0x4>
c000216b:	88 d0                	mov    al,dl
c000216d:	c3                   	ret    

c000216e <get_ldnumber>:
c000216e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002170:	85 d2                	test   edx,edx
c0002172:	74 14                	je     c0002188 <get_ldnumber+0x1a>
c0002174:	56                   	push   esi
c0002175:	53                   	push   ebx
c0002176:	89 d3                	mov    ebx,edx
c0002178:	43                   	inc    ebx
c0002179:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000217c:	80 f9 1f             	cmp    cl,0x1f
c000217f:	76 0d                	jbe    c000218e <get_ldnumber+0x20>
c0002181:	80 f9 3a             	cmp    cl,0x3a
c0002184:	75 f2                	jne    c0002178 <get_ldnumber+0xa>
c0002186:	eb 0a                	jmp    c0002192 <get_ldnumber+0x24>
c0002188:	83 c9 ff             	or     ecx,0xffffffff
c000218b:	89 c8                	mov    eax,ecx
c000218d:	c3                   	ret    
c000218e:	31 c9                	xor    ecx,ecx
c0002190:	eb 24                	jmp    c00021b6 <get_ldnumber+0x48>
c0002192:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002195:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002198:	80 f9 09             	cmp    cl,0x9
c000219b:	77 16                	ja     c00021b3 <get_ldnumber+0x45>
c000219d:	83 c2 02             	add    edx,0x2
c00021a0:	83 c9 ff             	or     ecx,0xffffffff
c00021a3:	39 d3                	cmp    ebx,edx
c00021a5:	75 0f                	jne    c00021b6 <get_ldnumber+0x48>
c00021a7:	89 f2                	mov    edx,esi
c00021a9:	89 18                	mov    DWORD PTR [eax],ebx
c00021ab:	0f be ca             	movsx  ecx,dl
c00021ae:	83 e9 30             	sub    ecx,0x30
c00021b1:	eb 03                	jmp    c00021b6 <get_ldnumber+0x48>
c00021b3:	83 c9 ff             	or     ecx,0xffffffff
c00021b6:	89 c8                	mov    eax,ecx
c00021b8:	5b                   	pop    ebx
c00021b9:	5e                   	pop    esi
c00021ba:	c3                   	ret    

c00021bb <validate>:
c00021bb:	56                   	push   esi
c00021bc:	53                   	push   ebx
c00021bd:	89 d6                	mov    esi,edx
c00021bf:	51                   	push   ecx
c00021c0:	85 c0                	test   eax,eax
c00021c2:	75 09                	jne    c00021cd <validate+0x12>
c00021c4:	b8 09 00 00 00       	mov    eax,0x9
c00021c9:	31 c9                	xor    ecx,ecx
c00021cb:	eb 2f                	jmp    c00021fc <validate+0x41>
c00021cd:	89 c3                	mov    ebx,eax
c00021cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00021d1:	85 c0                	test   eax,eax
c00021d3:	74 ef                	je     c00021c4 <validate+0x9>
c00021d5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021d8:	74 ea                	je     c00021c4 <validate+0x9>
c00021da:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021de:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021e2:	75 e0                	jne    c00021c4 <validate+0x9>
c00021e4:	83 ec 0c             	sub    esp,0xc
c00021e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021eb:	50                   	push   eax
c00021ec:	e8 fd fa ff ff       	call   c0001cee <disk_status>
c00021f1:	83 c4 10             	add    esp,0x10
c00021f4:	a8 01                	test   al,0x1
c00021f6:	75 cc                	jne    c00021c4 <validate+0x9>
c00021f8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021fa:	31 c0                	xor    eax,eax
c00021fc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021fe:	5a                   	pop    edx
c00021ff:	5b                   	pop    ebx
c0002200:	5e                   	pop    esi
c0002201:	c3                   	ret    

c0002202 <sync_window>:
c0002202:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002206:	74 58                	je     c0002260 <sync_window+0x5e>
c0002208:	56                   	push   esi
c0002209:	53                   	push   ebx
c000220a:	8d 70 34             	lea    esi,[eax+0x34]
c000220d:	51                   	push   ecx
c000220e:	89 c3                	mov    ebx,eax
c0002210:	6a 01                	push   0x1
c0002212:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002215:	56                   	push   esi
c0002216:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000221a:	50                   	push   eax
c000221b:	e8 ea fa ff ff       	call   c0001d0a <disk_write>
c0002220:	83 c4 10             	add    esp,0x10
c0002223:	ba 01 00 00 00       	mov    edx,0x1
c0002228:	85 c0                	test   eax,eax
c000222a:	75 2e                	jne    c000225a <sync_window+0x58>
c000222c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000222f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002232:	89 c1                	mov    ecx,eax
c0002234:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002238:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000223b:	39 d1                	cmp    ecx,edx
c000223d:	73 19                	jae    c0002258 <sync_window+0x56>
c000223f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002243:	75 13                	jne    c0002258 <sync_window+0x56>
c0002245:	6a 01                	push   0x1
c0002247:	01 d0                	add    eax,edx
c0002249:	50                   	push   eax
c000224a:	56                   	push   esi
c000224b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000224f:	50                   	push   eax
c0002250:	e8 b5 fa ff ff       	call   c0001d0a <disk_write>
c0002255:	83 c4 10             	add    esp,0x10
c0002258:	31 d2                	xor    edx,edx
c000225a:	89 d0                	mov    eax,edx
c000225c:	5a                   	pop    edx
c000225d:	5b                   	pop    ebx
c000225e:	5e                   	pop    esi
c000225f:	c3                   	ret    
c0002260:	31 d2                	xor    edx,edx
c0002262:	89 d0                	mov    eax,edx
c0002264:	c3                   	ret    

c0002265 <move_window>:
c0002265:	57                   	push   edi
c0002266:	56                   	push   esi
c0002267:	31 f6                	xor    esi,esi
c0002269:	53                   	push   ebx
c000226a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000226d:	74 32                	je     c00022a1 <move_window+0x3c>
c000226f:	89 c3                	mov    ebx,eax
c0002271:	89 d7                	mov    edi,edx
c0002273:	e8 8a ff ff ff       	call   c0002202 <sync_window>
c0002278:	89 c6                	mov    esi,eax
c000227a:	85 c0                	test   eax,eax
c000227c:	75 23                	jne    c00022a1 <move_window+0x3c>
c000227e:	6a 01                	push   0x1
c0002280:	8d 43 34             	lea    eax,[ebx+0x34]
c0002283:	57                   	push   edi
c0002284:	50                   	push   eax
c0002285:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002289:	50                   	push   eax
c000228a:	e8 65 fa ff ff       	call   c0001cf4 <disk_read>
c000228f:	83 c4 10             	add    esp,0x10
c0002292:	85 c0                	test   eax,eax
c0002294:	74 08                	je     c000229e <move_window+0x39>
c0002296:	be 01 00 00 00       	mov    esi,0x1
c000229b:	83 cf ff             	or     edi,0xffffffff
c000229e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00022a1:	89 f0                	mov    eax,esi
c00022a3:	5b                   	pop    ebx
c00022a4:	5e                   	pop    esi
c00022a5:	5f                   	pop    edi
c00022a6:	c3                   	ret    

c00022a7 <check_fs>:
c00022a7:	53                   	push   ebx
c00022a8:	89 c3                	mov    ebx,eax
c00022aa:	83 ec 08             	sub    esp,0x8
c00022ad:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022b1:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00022b8:	e8 a8 ff ff ff       	call   c0002265 <move_window>
c00022bd:	ba 04 00 00 00       	mov    edx,0x4
c00022c2:	85 c0                	test   eax,eax
c00022c4:	75 68                	jne    c000232e <check_fs+0x87>
c00022c6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022cc:	e8 6e fa ff ff       	call   c0001d3f <ld_word>
c00022d1:	ba 03 00 00 00       	mov    edx,0x3
c00022d6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022da:	75 52                	jne    c000232e <check_fs+0x87>
c00022dc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022df:	8d 50 18             	lea    edx,[eax+0x18]
c00022e2:	80 fa 01             	cmp    dl,0x1
c00022e5:	76 09                	jbe    c00022f0 <check_fs+0x49>
c00022e7:	ba 02 00 00 00       	mov    edx,0x2
c00022ec:	3c eb                	cmp    al,0xeb
c00022ee:	75 3e                	jne    c000232e <check_fs+0x87>
c00022f0:	ba 68 ef 01 c0       	mov    edx,0xc001ef68
c00022f5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022f8:	b9 03 00 00 00       	mov    ecx,0x3
c00022fd:	e8 89 fa ff ff       	call   c0001d8b <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 26                	je     c000232e <check_fs+0x87>
c0002308:	ba 1c d0 01 c0       	mov    edx,0xc001d01c
c000230d:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002313:	b9 05 00 00 00       	mov    ecx,0x5
c0002318:	e8 6e fa ff ff       	call   c0001d8b <mem_cmp>
c000231d:	31 d2                	xor    edx,edx
c000231f:	85 c0                	test   eax,eax
c0002321:	74 0b                	je     c000232e <check_fs+0x87>
c0002323:	31 d2                	xor    edx,edx
c0002325:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002329:	0f 95 c2             	setne  dl
c000232c:	01 d2                	add    edx,edx
c000232e:	89 d0                	mov    eax,edx
c0002330:	83 c4 08             	add    esp,0x8
c0002333:	5b                   	pop    ebx
c0002334:	c3                   	ret    

c0002335 <find_volume>:
c0002335:	55                   	push   ebp
c0002336:	57                   	push   edi
c0002337:	56                   	push   esi
c0002338:	89 c6                	mov    esi,eax
c000233a:	53                   	push   ebx
c000233b:	89 d3                	mov    ebx,edx
c000233d:	83 ec 2c             	sub    esp,0x2c
c0002340:	31 d2                	xor    edx,edx
c0002342:	e8 60 ff ff ff       	call   c00022a7 <check_fs>
c0002347:	83 f8 02             	cmp    eax,0x2
c000234a:	74 06                	je     c0002352 <find_volume+0x1d>
c000234c:	77 62                	ja     c00023b0 <find_volume+0x7b>
c000234e:	85 db                	test   ebx,ebx
c0002350:	74 5e                	je     c00023b0 <find_volume+0x7b>
c0002352:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002356:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000235c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002362:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002366:	89 cf                	mov    edi,ecx
c0002368:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000236c:	89 e8                	mov    eax,ebp
c000236e:	83 c5 10             	add    ebp,0x10
c0002371:	e8 d6 f9 ff ff       	call   c0001d4c <ld_dword>
c0002376:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000237a:	89 01                	mov    DWORD PTR [ecx],eax
c000237c:	83 c1 04             	add    ecx,0x4
c000237f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002383:	75 e3                	jne    c0002368 <find_volume+0x33>
c0002385:	31 ed                	xor    ebp,ebp
c0002387:	85 db                	test   ebx,ebx
c0002389:	74 03                	je     c000238e <find_volume+0x59>
c000238b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000238e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002391:	b8 03 00 00 00       	mov    eax,0x3
c0002396:	85 d2                	test   edx,edx
c0002398:	74 0c                	je     c00023a6 <find_volume+0x71>
c000239a:	89 f0                	mov    eax,esi
c000239c:	e8 06 ff ff ff       	call   c00022a7 <check_fs>
c00023a1:	83 f8 01             	cmp    eax,0x1
c00023a4:	76 0a                	jbe    c00023b0 <find_volume+0x7b>
c00023a6:	85 db                	test   ebx,ebx
c00023a8:	75 06                	jne    c00023b0 <find_volume+0x7b>
c00023aa:	45                   	inc    ebp
c00023ab:	83 fd 03             	cmp    ebp,0x3
c00023ae:	76 de                	jbe    c000238e <find_volume+0x59>
c00023b0:	83 c4 2c             	add    esp,0x2c
c00023b3:	5b                   	pop    ebx
c00023b4:	5e                   	pop    esi
c00023b5:	5f                   	pop    edi
c00023b6:	5d                   	pop    ebp
c00023b7:	c3                   	ret    

c00023b8 <mount_volume>:
c00023b8:	55                   	push   ebp
c00023b9:	89 d5                	mov    ebp,edx
c00023bb:	57                   	push   edi
c00023bc:	89 cf                	mov    edi,ecx
c00023be:	56                   	push   esi
c00023bf:	53                   	push   ebx
c00023c0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023c5:	83 ec 2c             	sub    esp,0x2c
c00023c8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ce:	e8 9b fd ff ff       	call   c000216e <get_ldnumber>
c00023d3:	85 c0                	test   eax,eax
c00023d5:	0f 88 d6 02 00 00    	js     c00026b1 <mount_volume+0x2f9>
c00023db:	8b 34 85 a0 ff 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe0060]
c00023e2:	89 c2                	mov    edx,eax
c00023e4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023e9:	85 f6                	test   esi,esi
c00023eb:	0f 84 c0 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c00023f1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023f4:	83 e7 fe             	and    edi,0xfffffffe
c00023f7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023fa:	74 3a                	je     c0002436 <mount_volume+0x7e>
c00023fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002400:	83 ec 0c             	sub    esp,0xc
c0002403:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002407:	50                   	push   eax
c0002408:	e8 e1 f8 ff ff       	call   c0001cee <disk_status>
c000240d:	83 c4 10             	add    esp,0x10
c0002410:	a8 01                	test   al,0x1
c0002412:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002416:	75 1e                	jne    c0002436 <mount_volume+0x7e>
c0002418:	31 db                	xor    ebx,ebx
c000241a:	89 f9                	mov    ecx,edi
c000241c:	84 c9                	test   cl,cl
c000241e:	0f 84 8d 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002424:	a8 04                	test   al,0x4
c0002426:	0f 84 85 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c000242c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002431:	e9 7b 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002436:	83 ec 0c             	sub    esp,0xc
c0002439:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000243c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000243f:	0f b6 c2             	movzx  eax,dl
c0002442:	bb 03 00 00 00       	mov    ebx,0x3
c0002447:	50                   	push   eax
c0002448:	e8 a4 f8 ff ff       	call   c0001cf1 <disk_initialize>
c000244d:	83 c4 10             	add    esp,0x10
c0002450:	a8 01                	test   al,0x1
c0002452:	0f 85 59 02 00 00    	jne    c00026b1 <mount_volume+0x2f9>
c0002458:	89 f9                	mov    ecx,edi
c000245a:	84 c9                	test   cl,cl
c000245c:	74 04                	je     c0002462 <mount_volume+0xaa>
c000245e:	a8 04                	test   al,0x4
c0002460:	75 ca                	jne    c000242c <mount_volume+0x74>
c0002462:	31 d2                	xor    edx,edx
c0002464:	89 f0                	mov    eax,esi
c0002466:	bb 01 00 00 00       	mov    ebx,0x1
c000246b:	e8 c5 fe ff ff       	call   c0002335 <find_volume>
c0002470:	83 f8 04             	cmp    eax,0x4
c0002473:	0f 84 38 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002479:	83 f8 01             	cmp    eax,0x1
c000247c:	76 0a                	jbe    c0002488 <mount_volume+0xd0>
c000247e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002483:	e9 29 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002488:	8d 46 3f             	lea    eax,[esi+0x3f]
c000248b:	e8 af f8 ff ff       	call   c0001d3f <ld_word>
c0002490:	66 3d 00 02          	cmp    ax,0x200
c0002494:	75 e8                	jne    c000247e <mount_volume+0xc6>
c0002496:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002499:	e8 a1 f8 ff ff       	call   c0001d3f <ld_word>
c000249e:	0f b7 c0             	movzx  eax,ax
c00024a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024a5:	85 c0                	test   eax,eax
c00024a7:	75 0c                	jne    c00024b5 <mount_volume+0xfd>
c00024a9:	8d 46 58             	lea    eax,[esi+0x58]
c00024ac:	e8 9b f8 ff ff       	call   c0001d4c <ld_dword>
c00024b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024b5:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00024b8:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00024bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00024bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024c3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024c6:	89 e8                	mov    eax,ebp
c00024c8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024cb:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ce:	3c 01                	cmp    al,0x1
c00024d0:	77 ac                	ja     c000247e <mount_volume+0xc6>
c00024d2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024d6:	89 c3                	mov    ebx,eax
c00024d8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024dc:	66 85 c0             	test   ax,ax
c00024df:	74 9d                	je     c000247e <mount_volume+0xc6>
c00024e1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024e4:	85 d8                	test   eax,ebx
c00024e6:	75 96                	jne    c000247e <mount_volume+0xc6>
c00024e8:	8d 46 45             	lea    eax,[esi+0x45]
c00024eb:	e8 4f f8 ff ff       	call   c0001d3f <ld_word>
c00024f0:	89 c7                	mov    edi,eax
c00024f2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024f6:	a8 0f                	test   al,0xf
c00024f8:	75 84                	jne    c000247e <mount_volume+0xc6>
c00024fa:	8d 46 47             	lea    eax,[esi+0x47]
c00024fd:	e8 3d f8 ff ff       	call   c0001d3f <ld_word>
c0002502:	0f b7 d0             	movzx  edx,ax
c0002505:	85 d2                	test   edx,edx
c0002507:	75 0a                	jne    c0002513 <mount_volume+0x15b>
c0002509:	8d 46 54             	lea    eax,[esi+0x54]
c000250c:	e8 3b f8 ff ff       	call   c0001d4c <ld_dword>
c0002511:	89 c2                	mov    edx,eax
c0002513:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002517:	8d 46 42             	lea    eax,[esi+0x42]
c000251a:	e8 20 f8 ff ff       	call   c0001d3f <ld_word>
c000251f:	66 85 c0             	test   ax,ax
c0002522:	0f 84 56 ff ff ff    	je     c000247e <mount_volume+0xc6>
c0002528:	89 e9                	mov    ecx,ebp
c000252a:	0f b7 c0             	movzx  eax,ax
c000252d:	0f b6 e9             	movzx  ebp,cl
c0002530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002534:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002538:	89 f8                	mov    eax,edi
c000253a:	0f af cd             	imul   ecx,ebp
c000253d:	66 c1 e8 04          	shr    ax,0x4
c0002541:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002545:	0f b7 c0             	movzx  eax,ax
c0002548:	01 c8                	add    eax,ecx
c000254a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000254e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002552:	39 c2                	cmp    edx,eax
c0002554:	0f 82 24 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000255a:	29 c2                	sub    edx,eax
c000255c:	89 d5                	mov    ebp,edx
c000255e:	89 d0                	mov    eax,edx
c0002560:	31 d2                	xor    edx,edx
c0002562:	f7 f3                	div    ebx
c0002564:	39 dd                	cmp    ebp,ebx
c0002566:	0f 82 12 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000256c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002571:	0f 87 07 ff ff ff    	ja     c000247e <mount_volume+0xc6>
c0002577:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000257c:	0f 86 1f 01 00 00    	jbe    c00026a1 <mount_volume+0x2e9>
c0002582:	bb 03 00 00 00       	mov    ebx,0x3
c0002587:	8d 68 02             	lea    ebp,[eax+0x2]
c000258a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000258e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002592:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002596:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002599:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000259c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00025a0:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00025a3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00025a7:	83 fb 03             	cmp    ebx,0x3
c00025aa:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00025ad:	75 21                	jne    c00025d0 <mount_volume+0x218>
c00025af:	8d 46 5e             	lea    eax,[esi+0x5e]
c00025b2:	e8 88 f7 ff ff       	call   c0001d3f <ld_word>
c00025b7:	66 09 c7             	or     di,ax
c00025ba:	0f 85 be fe ff ff    	jne    c000247e <mount_volume+0xc6>
c00025c0:	8d 46 60             	lea    eax,[esi+0x60]
c00025c3:	c1 e5 02             	shl    ebp,0x2
c00025c6:	e8 81 f7 ff ff       	call   c0001d4c <ld_dword>
c00025cb:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ce:	eb 22                	jmp    c00025f2 <mount_volume+0x23a>
c00025d0:	66 85 ff             	test   di,di
c00025d3:	0f 84 a5 fe ff ff    	je     c000247e <mount_volume+0xc6>
c00025d9:	01 c8                	add    eax,ecx
c00025db:	83 fb 02             	cmp    ebx,0x2
c00025de:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025e1:	75 04                	jne    c00025e7 <mount_volume+0x22f>
c00025e3:	01 ed                	add    ebp,ebp
c00025e5:	eb 0b                	jmp    c00025f2 <mount_volume+0x23a>
c00025e7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025eb:	83 e5 01             	and    ebp,0x1
c00025ee:	d1 e8                	shr    eax,1
c00025f0:	01 c5                	add    ebp,eax
c00025f2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025f8:	c1 ed 09             	shr    ebp,0x9
c00025fb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025ff:	0f 87 79 fe ff ff    	ja     c000247e <mount_volume+0xc6>
c0002605:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c000260c:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002613:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002617:	83 fb 03             	cmp    ebx,0x3
c000261a:	75 6e                	jne    c000268a <mount_volume+0x2d2>
c000261c:	8d 46 64             	lea    eax,[esi+0x64]
c000261f:	e8 1b f7 ff ff       	call   c0001d3f <ld_word>
c0002624:	66 48                	dec    ax
c0002626:	75 62                	jne    c000268a <mount_volume+0x2d2>
c0002628:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000262c:	89 f0                	mov    eax,esi
c000262e:	42                   	inc    edx
c000262f:	e8 31 fc ff ff       	call   c0002265 <move_window>
c0002634:	85 c0                	test   eax,eax
c0002636:	75 52                	jne    c000268a <mount_volume+0x2d2>
c0002638:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000263c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002642:	e8 f8 f6 ff ff       	call   c0001d3f <ld_word>
c0002647:	66 3d 55 aa          	cmp    ax,0xaa55
c000264b:	75 3d                	jne    c000268a <mount_volume+0x2d2>
c000264d:	8d 46 34             	lea    eax,[esi+0x34]
c0002650:	e8 f7 f6 ff ff       	call   c0001d4c <ld_dword>
c0002655:	3d 52 52 61 41       	cmp    eax,0x41615252
c000265a:	75 2e                	jne    c000268a <mount_volume+0x2d2>
c000265c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002662:	e8 e5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002667:	3d 72 72 41 61       	cmp    eax,0x61417272
c000266c:	75 1c                	jne    c000268a <mount_volume+0x2d2>
c000266e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002674:	e8 d3 f6 ff ff       	call   c0001d4c <ld_dword>
c0002679:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000267c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002682:	e8 c5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002687:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000268a:	66 a1 80 ff 01 c0    	mov    ax,ds:0xc001ff80
c0002690:	88 1e                	mov    BYTE PTR [esi],bl
c0002692:	40                   	inc    eax
c0002693:	31 db                	xor    ebx,ebx
c0002695:	66 a3 80 ff 01 c0    	mov    ds:0xc001ff80,ax
c000269b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000269f:	eb 10                	jmp    c00026b1 <mount_volume+0x2f9>
c00026a1:	31 db                	xor    ebx,ebx
c00026a3:	3d f5 0f 00 00       	cmp    eax,0xff5
c00026a8:	0f 97 c3             	seta   bl
c00026ab:	43                   	inc    ebx
c00026ac:	e9 d6 fe ff ff       	jmp    c0002587 <mount_volume+0x1cf>
c00026b1:	83 c4 2c             	add    esp,0x2c
c00026b4:	89 d8                	mov    eax,ebx
c00026b6:	5b                   	pop    ebx
c00026b7:	5e                   	pop    esi
c00026b8:	5f                   	pop    edi
c00026b9:	5d                   	pop    ebp
c00026ba:	c3                   	ret    

c00026bb <put_fat>:
c00026bb:	55                   	push   ebp
c00026bc:	bd 02 00 00 00       	mov    ebp,0x2
c00026c1:	57                   	push   edi
c00026c2:	56                   	push   esi
c00026c3:	53                   	push   ebx
c00026c4:	83 ec 1c             	sub    esp,0x1c
c00026c7:	83 fa 01             	cmp    edx,0x1
c00026ca:	0f 86 31 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026d3:	0f 86 28 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d9:	89 c6                	mov    esi,eax
c00026db:	89 cf                	mov    edi,ecx
c00026dd:	8a 00                	mov    al,BYTE PTR [eax]
c00026df:	89 d3                	mov    ebx,edx
c00026e1:	3c 02                	cmp    al,0x2
c00026e3:	0f 84 ac 00 00 00    	je     c0002795 <put_fat+0xda>
c00026e9:	3c 03                	cmp    al,0x3
c00026eb:	0f 84 d1 00 00 00    	je     c00027c2 <put_fat+0x107>
c00026f1:	fe c8                	dec    al
c00026f3:	0f 85 08 01 00 00    	jne    c0002801 <put_fat+0x146>
c00026f9:	89 d1                	mov    ecx,edx
c00026fb:	89 f0                	mov    eax,esi
c00026fd:	d1 e9                	shr    ecx,1
c00026ff:	01 d1                	add    ecx,edx
c0002701:	89 ca                	mov    edx,ecx
c0002703:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002707:	c1 ea 09             	shr    edx,0x9
c000270a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000270d:	e8 53 fb ff ff       	call   c0002265 <move_window>
c0002712:	89 c5                	mov    ebp,eax
c0002714:	85 c0                	test   eax,eax
c0002716:	0f 85 e5 00 00 00    	jne    c0002801 <put_fat+0x146>
c000271c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002720:	8d 46 34             	lea    eax,[esi+0x34]
c0002723:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002727:	8d 41 01             	lea    eax,[ecx+0x1]
c000272a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002730:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002734:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002738:	89 f8                	mov    eax,edi
c000273a:	83 e3 01             	and    ebx,0x1
c000273d:	74 0c                	je     c000274b <put_fat+0x90>
c000273f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002741:	89 f8                	mov    eax,edi
c0002743:	83 e2 0f             	and    edx,0xf
c0002746:	c1 e0 04             	shl    eax,0x4
c0002749:	09 d0                	or     eax,edx
c000274b:	88 01                	mov    BYTE PTR [ecx],al
c000274d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002751:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002755:	c1 ea 09             	shr    edx,0x9
c0002758:	89 f0                	mov    eax,esi
c000275a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000275d:	e8 03 fb ff ff       	call   c0002265 <move_window>
c0002762:	89 c5                	mov    ebp,eax
c0002764:	85 c0                	test   eax,eax
c0002766:	0f 85 95 00 00 00    	jne    c0002801 <put_fat+0x146>
c000276c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002770:	25 ff 01 00 00       	and    eax,0x1ff
c0002775:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002779:	85 db                	test   ebx,ebx
c000277b:	74 07                	je     c0002784 <put_fat+0xc9>
c000277d:	c1 ef 04             	shr    edi,0x4
c0002780:	89 f9                	mov    ecx,edi
c0002782:	eb 0d                	jmp    c0002791 <put_fat+0xd6>
c0002784:	8a 08                	mov    cl,BYTE PTR [eax]
c0002786:	c1 ef 08             	shr    edi,0x8
c0002789:	83 e1 f0             	and    ecx,0xfffffff0
c000278c:	83 e7 0f             	and    edi,0xf
c000278f:	09 f9                	or     ecx,edi
c0002791:	88 08                	mov    BYTE PTR [eax],cl
c0002793:	eb 27                	jmp    c00027bc <put_fat+0x101>
c0002795:	c1 ea 08             	shr    edx,0x8
c0002798:	89 f0                	mov    eax,esi
c000279a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000279d:	e8 c3 fa ff ff       	call   c0002265 <move_window>
c00027a2:	89 c5                	mov    ebp,eax
c00027a4:	85 c0                	test   eax,eax
c00027a6:	75 59                	jne    c0002801 <put_fat+0x146>
c00027a8:	01 db                	add    ebx,ebx
c00027aa:	0f b7 d7             	movzx  edx,di
c00027ad:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00027b3:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00027b7:	e8 a8 f5 ff ff       	call   c0001d64 <st_word>
c00027bc:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027c0:	eb 3f                	jmp    c0002801 <put_fat+0x146>
c00027c2:	c1 ea 07             	shr    edx,0x7
c00027c5:	89 f0                	mov    eax,esi
c00027c7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027ca:	e8 96 fa ff ff       	call   c0002265 <move_window>
c00027cf:	89 c5                	mov    ebp,eax
c00027d1:	85 c0                	test   eax,eax
c00027d3:	75 2c                	jne    c0002801 <put_fat+0x146>
c00027d5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027db:	c1 e3 02             	shl    ebx,0x2
c00027de:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027e4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027e8:	89 d8                	mov    eax,ebx
c00027ea:	e8 5d f5 ff ff       	call   c0001d4c <ld_dword>
c00027ef:	25 00 00 00 f0       	and    eax,0xf0000000
c00027f4:	09 f8                	or     eax,edi
c00027f6:	89 c2                	mov    edx,eax
c00027f8:	89 d8                	mov    eax,ebx
c00027fa:	e8 69 f5 ff ff       	call   c0001d68 <st_dword>
c00027ff:	eb bb                	jmp    c00027bc <put_fat+0x101>
c0002801:	83 c4 1c             	add    esp,0x1c
c0002804:	89 e8                	mov    eax,ebp
c0002806:	5b                   	pop    ebx
c0002807:	5e                   	pop    esi
c0002808:	5f                   	pop    edi
c0002809:	5d                   	pop    ebp
c000280a:	c3                   	ret    

c000280b <dir_clear>:
c000280b:	55                   	push   ebp
c000280c:	57                   	push   edi
c000280d:	56                   	push   esi
c000280e:	89 c6                	mov    esi,eax
c0002810:	53                   	push   ebx
c0002811:	83 ec 1c             	sub    esp,0x1c
c0002814:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002818:	e8 e5 f9 ff ff       	call   c0002202 <sync_window>
c000281d:	85 c0                	test   eax,eax
c000281f:	0f 85 c0 00 00 00    	jne    c00028e5 <dir_clear+0xda>
c0002825:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002829:	89 f0                	mov    eax,esi
c000282b:	e8 55 f7 ff ff       	call   c0001f85 <clst2sect>
c0002830:	31 d2                	xor    edx,edx
c0002832:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002835:	89 c5                	mov    ebp,eax
c0002837:	b9 00 02 00 00       	mov    ecx,0x200
c000283c:	8d 46 34             	lea    eax,[esi+0x34]
c000283f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002843:	e8 38 f5 ff ff       	call   c0001d80 <mem_set>
c0002848:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000284c:	c1 e3 09             	shl    ebx,0x9
c000284f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002855:	76 1b                	jbe    c0002872 <dir_clear+0x67>
c0002857:	bb 00 80 00 00       	mov    ebx,0x8000
c000285c:	eb 14                	jmp    c0002872 <dir_clear+0x67>
c000285e:	83 ec 0c             	sub    esp,0xc
c0002861:	53                   	push   ebx
c0002862:	e8 25 32 00 00       	call   c0005a8c <ff_memalloc>
c0002867:	83 c4 10             	add    esp,0x10
c000286a:	89 c7                	mov    edi,eax
c000286c:	85 c0                	test   eax,eax
c000286e:	75 7c                	jne    c00028ec <dir_clear+0xe1>
c0002870:	d1 eb                	shr    ebx,1
c0002872:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002878:	77 e4                	ja     c000285e <dir_clear+0x53>
c000287a:	31 db                	xor    ebx,ebx
c000287c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002880:	39 d8                	cmp    eax,ebx
c0002882:	76 53                	jbe    c00028d7 <dir_clear+0xcc>
c0002884:	6a 01                	push   0x1
c0002886:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002889:	50                   	push   eax
c000288a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002892:	50                   	push   eax
c0002893:	e8 72 f4 ff ff       	call   c0001d0a <disk_write>
c0002898:	83 c4 10             	add    esp,0x10
c000289b:	85 c0                	test   eax,eax
c000289d:	75 38                	jne    c00028d7 <dir_clear+0xcc>
c000289f:	43                   	inc    ebx
c00028a0:	eb da                	jmp    c000287c <dir_clear+0x71>
c00028a2:	52                   	push   edx
c00028a3:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00028a6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00028aa:	50                   	push   eax
c00028ab:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00028af:	57                   	push   edi
c00028b0:	50                   	push   eax
c00028b1:	e8 54 f4 ff ff       	call   c0001d0a <disk_write>
c00028b6:	83 c4 10             	add    esp,0x10
c00028b9:	85 c0                	test   eax,eax
c00028bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028bf:	75 0a                	jne    c00028cb <dir_clear+0xc0>
c00028c1:	01 d3                	add    ebx,edx
c00028c3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028c7:	39 d8                	cmp    eax,ebx
c00028c9:	77 d7                	ja     c00028a2 <dir_clear+0x97>
c00028cb:	83 ec 0c             	sub    esp,0xc
c00028ce:	57                   	push   edi
c00028cf:	e8 d0 31 00 00       	call   c0005aa4 <ff_memfree>
c00028d4:	83 c4 10             	add    esp,0x10
c00028d7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028db:	39 d8                	cmp    eax,ebx
c00028dd:	0f 95 c0             	setne  al
c00028e0:	0f b6 c0             	movzx  eax,al
c00028e3:	eb 19                	jmp    c00028fe <dir_clear+0xf3>
c00028e5:	b8 01 00 00 00       	mov    eax,0x1
c00028ea:	eb 12                	jmp    c00028fe <dir_clear+0xf3>
c00028ec:	89 d9                	mov    ecx,ebx
c00028ee:	31 d2                	xor    edx,edx
c00028f0:	e8 8b f4 ff ff       	call   c0001d80 <mem_set>
c00028f5:	89 da                	mov    edx,ebx
c00028f7:	31 db                	xor    ebx,ebx
c00028f9:	c1 ea 09             	shr    edx,0x9
c00028fc:	eb c5                	jmp    c00028c3 <dir_clear+0xb8>
c00028fe:	83 c4 1c             	add    esp,0x1c
c0002901:	5b                   	pop    ebx
c0002902:	5e                   	pop    esi
c0002903:	5f                   	pop    edi
c0002904:	5d                   	pop    ebp
c0002905:	c3                   	ret    

c0002906 <create_name>:
c0002906:	55                   	push   ebp
c0002907:	89 d5                	mov    ebp,edx
c0002909:	57                   	push   edi
c000290a:	89 c7                	mov    edi,eax
c000290c:	56                   	push   esi
c000290d:	31 f6                	xor    esi,esi
c000290f:	53                   	push   ebx
c0002910:	83 ec 3c             	sub    esp,0x3c
c0002913:	8b 02                	mov    eax,DWORD PTR [edx]
c0002915:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002919:	8b 07                	mov    eax,DWORD PTR [edi]
c000291b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000291e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002922:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002926:	e8 9b f4 ff ff       	call   c0001dc6 <tchar2uni>
c000292b:	89 c3                	mov    ebx,eax
c000292d:	83 f8 ff             	cmp    eax,0xffffffff
c0002930:	75 0a                	jne    c000293c <create_name+0x36>
c0002932:	b8 06 00 00 00       	mov    eax,0x6
c0002937:	e9 9e 02 00 00       	jmp    c0002bda <create_name+0x2d4>
c000293c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002941:	76 0c                	jbe    c000294f <create_name+0x49>
c0002943:	c1 e8 10             	shr    eax,0x10
c0002946:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000294a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000294e:	46                   	inc    esi
c000294f:	66 83 fb 1f          	cmp    bx,0x1f
c0002953:	76 4f                	jbe    c00029a4 <create_name+0x9e>
c0002955:	66 83 fb 5c          	cmp    bx,0x5c
c0002959:	74 35                	je     c0002990 <create_name+0x8a>
c000295b:	66 83 fb 2f          	cmp    bx,0x2f
c000295f:	74 2f                	je     c0002990 <create_name+0x8a>
c0002961:	66 83 fb 7f          	cmp    bx,0x7f
c0002965:	77 11                	ja     c0002978 <create_name+0x72>
c0002967:	0f b7 d3             	movzx  edx,bx
c000296a:	b8 22 d0 01 c0       	mov    eax,0xc001d022
c000296f:	e8 3a f4 ff ff       	call   c0001dae <chk_chr>
c0002974:	85 c0                	test   eax,eax
c0002976:	75 ba                	jne    c0002932 <create_name+0x2c>
c0002978:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000297e:	77 b2                	ja     c0002932 <create_name+0x2c>
c0002980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002984:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002988:	46                   	inc    esi
c0002989:	eb 97                	jmp    c0002922 <create_name+0x1c>
c000298b:	40                   	inc    eax
c000298c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002990:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002994:	8a 10                	mov    dl,BYTE PTR [eax]
c0002996:	80 fa 2f             	cmp    dl,0x2f
c0002999:	74 f0                	je     c000298b <create_name+0x85>
c000299b:	80 fa 5c             	cmp    dl,0x5c
c000299e:	74 eb                	je     c000298b <create_name+0x85>
c00029a0:	31 db                	xor    ebx,ebx
c00029a2:	eb 02                	jmp    c00029a6 <create_name+0xa0>
c00029a4:	b3 04                	mov    bl,0x4
c00029a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00029aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00029ad:	85 f6                	test   esi,esi
c00029af:	74 18                	je     c00029c9 <create_name+0xc3>
c00029b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029b5:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00029ba:	66 83 f8 20          	cmp    ax,0x20
c00029be:	74 06                	je     c00029c6 <create_name+0xc0>
c00029c0:	66 83 f8 2e          	cmp    ax,0x2e
c00029c4:	75 03                	jne    c00029c9 <create_name+0xc3>
c00029c6:	4e                   	dec    esi
c00029c7:	eb e4                	jmp    c00029ad <create_name+0xa7>
c00029c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029cd:	31 ed                	xor    ebp,ebp
c00029cf:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029d5:	85 f6                	test   esi,esi
c00029d7:	0f 84 55 ff ff ff    	je     c0002932 <create_name+0x2c>
c00029dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029e4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029e8:	66 83 f8 20          	cmp    ax,0x20
c00029ec:	75 04                	jne    c00029f2 <create_name+0xec>
c00029ee:	89 d5                	mov    ebp,edx
c00029f0:	eb eb                	jmp    c00029dd <create_name+0xd7>
c00029f2:	85 ed                	test   ebp,ebp
c00029f4:	75 06                	jne    c00029fc <create_name+0xf6>
c00029f6:	66 83 f8 2e          	cmp    ax,0x2e
c00029fa:	75 08                	jne    c0002a04 <create_name+0xfe>
c00029fc:	83 cb 03             	or     ebx,0x3
c00029ff:	eb 03                	jmp    c0002a04 <create_name+0xfe>
c0002a01:	4e                   	dec    esi
c0002a02:	74 0c                	je     c0002a10 <create_name+0x10a>
c0002a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a08:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002a0e:	75 f1                	jne    c0002a01 <create_name+0xfb>
c0002a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0002a15:	8d 47 20             	lea    eax,[edi+0x20]
c0002a18:	ba 20 00 00 00       	mov    edx,0x20
c0002a1d:	e8 5e f3 ff ff       	call   c0001d80 <mem_set>
c0002a22:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a2a:	31 c9                	xor    ecx,ecx
c0002a2c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a31:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a3c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a40:	66 85 ed             	test   bp,bp
c0002a43:	0f 84 30 01 00 00    	je     c0002b79 <create_name+0x273>
c0002a49:	66 83 fd 20          	cmp    bp,0x20
c0002a4d:	74 10                	je     c0002a5f <create_name+0x159>
c0002a4f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a53:	75 13                	jne    c0002a68 <create_name+0x162>
c0002a55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a59:	0f 84 6b 01 00 00    	je     c0002bca <create_name+0x2c4>
c0002a5f:	83 cb 03             	or     ebx,0x3
c0002a62:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a66:	eb c9                	jmp    c0002a31 <create_name+0x12b>
c0002a68:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a6c:	73 0b                	jae    c0002a79 <create_name+0x173>
c0002a6e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a72:	75 47                	jne    c0002abb <create_name+0x1b5>
c0002a74:	e9 51 01 00 00       	jmp    c0002bca <create_name+0x2c4>
c0002a79:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a7e:	75 10                	jne    c0002a90 <create_name+0x18a>
c0002a80:	83 cb 03             	or     ebx,0x3
c0002a83:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a8b:	e9 e9 00 00 00       	jmp    c0002b79 <create_name+0x273>
c0002a90:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a94:	74 0d                	je     c0002aa3 <create_name+0x19d>
c0002a96:	83 cb 03             	or     ebx,0x3
c0002a99:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a9d:	0f 87 d6 00 00 00    	ja     c0002b79 <create_name+0x273>
c0002aa3:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002aa8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002aac:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002ab4:	b9 08 00 00 00       	mov    ecx,0x8
c0002ab9:	eb a7                	jmp    c0002a62 <create_name+0x15c>
c0002abb:	66 83 fd 7f          	cmp    bp,0x7f
c0002abf:	76 68                	jbe    c0002b29 <create_name+0x223>
c0002ac1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002ac5:	88 da                	mov    dl,bl
c0002ac7:	83 ca 02             	or     edx,0x2
c0002aca:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002ace:	50                   	push   eax
c0002acf:	50                   	push   eax
c0002ad0:	68 b5 01 00 00       	push   0x1b5
c0002ad5:	55                   	push   ebp
c0002ad6:	e8 e1 2f 00 00       	call   c0005abc <ff_uni2oem>
c0002adb:	83 c4 10             	add    esp,0x10
c0002ade:	89 c5                	mov    ebp,eax
c0002ae0:	a8 80                	test   al,0x80
c0002ae2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ae6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aea:	74 0c                	je     c0002af8 <create_name+0x1f2>
c0002aec:	83 e5 7f             	and    ebp,0x7f
c0002aef:	0f b6 ad e0 d0 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2f20]
c0002af6:	eb 2a                	jmp    c0002b22 <create_name+0x21c>
c0002af8:	66 3d ff 00          	cmp    ax,0xff
c0002afc:	76 24                	jbe    c0002b22 <create_name+0x21c>
c0002afe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b02:	48                   	dec    eax
c0002b03:	39 c8                	cmp    eax,ecx
c0002b05:	77 0c                	ja     c0002b13 <create_name+0x20d>
c0002b07:	83 cb 03             	or     ebx,0x3
c0002b0a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002b0e:	e9 4f ff ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b13:	89 e8                	mov    eax,ebp
c0002b15:	88 d3                	mov    bl,dl
c0002b17:	66 c1 e8 08          	shr    ax,0x8
c0002b1b:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b1f:	41                   	inc    ecx
c0002b20:	eb 4b                	jmp    c0002b6d <create_name+0x267>
c0002b22:	88 d3                	mov    bl,dl
c0002b24:	66 85 ed             	test   bp,bp
c0002b27:	74 19                	je     c0002b42 <create_name+0x23c>
c0002b29:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b2d:	0f b7 d5             	movzx  edx,bp
c0002b30:	b8 2b d0 01 c0       	mov    eax,0xc001d02b
c0002b35:	e8 74 f2 ff ff       	call   c0001dae <chk_chr>
c0002b3a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b3e:	85 c0                	test   eax,eax
c0002b40:	74 0a                	je     c0002b4c <create_name+0x246>
c0002b42:	83 cb 03             	or     ebx,0x3
c0002b45:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b4a:	eb 21                	jmp    c0002b6d <create_name+0x267>
c0002b4c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b4f:	66 83 f8 19          	cmp    ax,0x19
c0002b53:	77 07                	ja     c0002b5c <create_name+0x256>
c0002b55:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b5a:	eb 11                	jmp    c0002b6d <create_name+0x267>
c0002b5c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b5f:	66 83 f8 19          	cmp    ax,0x19
c0002b63:	77 08                	ja     c0002b6d <create_name+0x267>
c0002b65:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b6a:	83 ed 20             	sub    ebp,0x20
c0002b6d:	89 e8                	mov    eax,ebp
c0002b6f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b73:	41                   	inc    ecx
c0002b74:	e9 e9 fe ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b79:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b7d:	75 04                	jne    c0002b83 <create_name+0x27d>
c0002b7f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b83:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b88:	75 05                	jne    c0002b8f <create_name+0x289>
c0002b8a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b8f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b93:	83 e0 0c             	and    eax,0xc
c0002b96:	3c 0c                	cmp    al,0xc
c0002b98:	74 0b                	je     c0002ba5 <create_name+0x29f>
c0002b9a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b9e:	83 e0 03             	and    eax,0x3
c0002ba1:	3c 03                	cmp    al,0x3
c0002ba3:	75 05                	jne    c0002baa <create_name+0x2a4>
c0002ba5:	83 cb 02             	or     ebx,0x2
c0002ba8:	eb 19                	jmp    c0002bc3 <create_name+0x2bd>
c0002baa:	f6 c3 02             	test   bl,0x2
c0002bad:	75 14                	jne    c0002bc3 <create_name+0x2bd>
c0002baf:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002bb4:	74 03                	je     c0002bb9 <create_name+0x2b3>
c0002bb6:	83 cb 10             	or     ebx,0x10
c0002bb9:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002bbe:	74 03                	je     c0002bc3 <create_name+0x2bd>
c0002bc0:	83 cb 08             	or     ebx,0x8
c0002bc3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002bc6:	31 c0                	xor    eax,eax
c0002bc8:	eb 10                	jmp    c0002bda <create_name+0x2d4>
c0002bca:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002bcf:	0f 85 ce fe ff ff    	jne    c0002aa3 <create_name+0x19d>
c0002bd5:	e9 a6 fe ff ff       	jmp    c0002a80 <create_name+0x17a>
c0002bda:	83 c4 3c             	add    esp,0x3c
c0002bdd:	5b                   	pop    ebx
c0002bde:	5e                   	pop    esi
c0002bdf:	5f                   	pop    edi
c0002be0:	5d                   	pop    ebp
c0002be1:	c3                   	ret    

c0002be2 <cmp_lfn>:
c0002be2:	55                   	push   ebp
c0002be3:	57                   	push   edi
c0002be4:	89 d7                	mov    edi,edx
c0002be6:	56                   	push   esi
c0002be7:	53                   	push   ebx
c0002be8:	83 ec 1c             	sub    esp,0x1c
c0002beb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bef:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bf2:	e8 48 f1 ff ff       	call   c0001d3f <ld_word>
c0002bf7:	66 85 c0             	test   ax,ax
c0002bfa:	74 07                	je     c0002c03 <cmp_lfn+0x21>
c0002bfc:	31 c0                	xor    eax,eax
c0002bfe:	e9 9a 00 00 00       	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c03:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002c05:	bd 01 00 00 00       	mov    ebp,0x1
c0002c0a:	83 e3 3f             	and    ebx,0x3f
c0002c0d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002c15:	4b                   	dec    ebx
c0002c16:	6b db 0d             	imul   ebx,ebx,0xd
c0002c19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002c1d:	0f b6 80 60 d1 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2ea0]
c0002c24:	01 f8                	add    eax,edi
c0002c26:	e8 14 f1 ff ff       	call   c0001d3f <ld_word>
c0002c2b:	66 85 ed             	test   bp,bp
c0002c2e:	89 c6                	mov    esi,eax
c0002c30:	74 3c                	je     c0002c6e <cmp_lfn+0x8c>
c0002c32:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c38:	77 c2                	ja     c0002bfc <cmp_lfn+0x1a>
c0002c3a:	83 ec 0c             	sub    esp,0xc
c0002c3d:	0f b7 c0             	movzx  eax,ax
c0002c40:	50                   	push   eax
c0002c41:	e8 8e 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c46:	89 c5                	mov    ebp,eax
c0002c48:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c53:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c57:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c5a:	e8 75 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c5f:	83 c4 10             	add    esp,0x10
c0002c62:	39 c5                	cmp    ebp,eax
c0002c64:	75 96                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c66:	89 f5                	mov    ebp,esi
c0002c68:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c6c:	eb 04                	jmp    c0002c72 <cmp_lfn+0x90>
c0002c6e:	66 46                	inc    si
c0002c70:	75 8a                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c72:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c76:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c7b:	75 9c                	jne    c0002c19 <cmp_lfn+0x37>
c0002c7d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c80:	74 16                	je     c0002c98 <cmp_lfn+0xb6>
c0002c82:	66 85 ed             	test   bp,bp
c0002c85:	74 11                	je     c0002c98 <cmp_lfn+0xb6>
c0002c87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c8b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c90:	0f 94 c0             	sete   al
c0002c93:	0f b6 c0             	movzx  eax,al
c0002c96:	eb 05                	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c98:	b8 01 00 00 00       	mov    eax,0x1
c0002c9d:	83 c4 1c             	add    esp,0x1c
c0002ca0:	5b                   	pop    ebx
c0002ca1:	5e                   	pop    esi
c0002ca2:	5f                   	pop    edi
c0002ca3:	5d                   	pop    ebp
c0002ca4:	c3                   	ret    

c0002ca5 <sync_fs>:
c0002ca5:	56                   	push   esi
c0002ca6:	53                   	push   ebx
c0002ca7:	53                   	push   ebx
c0002ca8:	89 c3                	mov    ebx,eax
c0002caa:	e8 53 f5 ff ff       	call   c0002202 <sync_window>
c0002caf:	85 c0                	test   eax,eax
c0002cb1:	0f 85 9a 00 00 00    	jne    c0002d51 <sync_fs+0xac>
c0002cb7:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002cba:	75 7b                	jne    c0002d37 <sync_fs+0x92>
c0002cbc:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002cc0:	75 75                	jne    c0002d37 <sync_fs+0x92>
c0002cc2:	b9 00 02 00 00       	mov    ecx,0x200
c0002cc7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002cca:	31 d2                	xor    edx,edx
c0002ccc:	89 f0                	mov    eax,esi
c0002cce:	e8 ad f0 ff ff       	call   c0001d80 <mem_set>
c0002cd3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cd9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cde:	e8 81 f0 ff ff       	call   c0001d64 <st_word>
c0002ce3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002ce8:	89 f0                	mov    eax,esi
c0002cea:	e8 79 f0 ff ff       	call   c0001d68 <st_dword>
c0002cef:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cf5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cfa:	e8 69 f0 ff ff       	call   c0001d68 <st_dword>
c0002cff:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002d02:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002d08:	e8 5b f0 ff ff       	call   c0001d68 <st_dword>
c0002d0d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002d10:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002d16:	e8 4d f0 ff ff       	call   c0001d68 <st_dword>
c0002d1b:	6a 01                	push   0x1
c0002d1d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d20:	40                   	inc    eax
c0002d21:	50                   	push   eax
c0002d22:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d25:	56                   	push   esi
c0002d26:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d2a:	50                   	push   eax
c0002d2b:	e8 da ef ff ff       	call   c0001d0a <disk_write>
c0002d30:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d34:	83 c4 10             	add    esp,0x10
c0002d37:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d3b:	51                   	push   ecx
c0002d3c:	6a 00                	push   0x0
c0002d3e:	6a 00                	push   0x0
c0002d40:	50                   	push   eax
c0002d41:	e8 da ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d46:	83 c4 10             	add    esp,0x10
c0002d49:	85 c0                	test   eax,eax
c0002d4b:	0f 95 c0             	setne  al
c0002d4e:	0f b6 c0             	movzx  eax,al
c0002d51:	5a                   	pop    edx
c0002d52:	5b                   	pop    ebx
c0002d53:	5e                   	pop    esi
c0002d54:	c3                   	ret    

c0002d55 <create_partition>:
c0002d55:	55                   	push   ebp
c0002d56:	0f b6 c0             	movzx  eax,al
c0002d59:	57                   	push   edi
c0002d5a:	56                   	push   esi
c0002d5b:	53                   	push   ebx
c0002d5c:	83 ec 40             	sub    esp,0x40
c0002d5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d63:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d6f:	50                   	push   eax
c0002d70:	6a 01                	push   0x1
c0002d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d76:	e8 a5 ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d7b:	83 c4 10             	add    esp,0x10
c0002d7e:	85 c0                	test   eax,eax
c0002d80:	0f 85 69 01 00 00    	jne    c0002eef <create_partition+0x19a>
c0002d86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d8a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d93:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d98:	31 d2                	xor    edx,edx
c0002d9a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002da3:	f7 f3                	div    ebx
c0002da5:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002daa:	76 0c                	jbe    c0002db8 <create_partition+0x63>
c0002dac:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002db0:	49                   	dec    ecx
c0002db1:	75 e5                	jne    c0002d98 <create_partition+0x43>
c0002db3:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002db8:	b9 00 02 00 00       	mov    ecx,0x200
c0002dbd:	31 d2                	xor    edx,edx
c0002dbf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dc3:	e8 b8 ef ff ff       	call   c0001d80 <mem_set>
c0002dc8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002dd1:	31 d2                	xor    edx,edx
c0002dd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002ddb:	f7 f1                	div    ecx
c0002ddd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002de2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002de6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dea:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002df0:	85 c9                	test   ecx,ecx
c0002df2:	75 34                	jne    c0002e28 <create_partition+0xd3>
c0002df4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002df8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dfd:	05 fe 01 00 00       	add    eax,0x1fe
c0002e02:	e8 5d ef ff ff       	call   c0001d64 <st_word>
c0002e07:	6a 01                	push   0x1
c0002e09:	6a 00                	push   0x0
c0002e0b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002e13:	e8 f2 ee ff ff       	call   c0001d0a <disk_write>
c0002e18:	83 c4 10             	add    esp,0x10
c0002e1b:	85 c0                	test   eax,eax
c0002e1d:	0f 95 c0             	setne  al
c0002e20:	0f b6 c0             	movzx  eax,al
c0002e23:	e9 cc 00 00 00       	jmp    c0002ef4 <create_partition+0x19f>
c0002e28:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e2c:	76 c6                	jbe    c0002df4 <create_partition+0x9f>
c0002e2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e32:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e36:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e39:	83 fe 64             	cmp    esi,0x64
c0002e3c:	77 0d                	ja     c0002e4b <create_partition+0xf6>
c0002e3e:	74 07                	je     c0002e47 <create_partition+0xf2>
c0002e40:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e45:	eb 04                	jmp    c0002e4b <create_partition+0xf6>
c0002e47:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e4b:	31 c0                	xor    eax,eax
c0002e4d:	89 f2                	mov    edx,esi
c0002e4f:	01 ca                	add    edx,ecx
c0002e51:	0f 92 c0             	setb   al
c0002e54:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e58:	77 04                	ja     c0002e5e <create_partition+0x109>
c0002e5a:	85 c0                	test   eax,eax
c0002e5c:	74 08                	je     c0002e66 <create_partition+0x111>
c0002e5e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e62:	29 ce                	sub    esi,ecx
c0002e64:	eb 04                	jmp    c0002e6a <create_partition+0x115>
c0002e66:	85 f6                	test   esi,esi
c0002e68:	74 8a                	je     c0002df4 <create_partition+0x9f>
c0002e6a:	89 ca                	mov    edx,ecx
c0002e6c:	89 d8                	mov    eax,ebx
c0002e6e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e73:	e8 f0 ee ff ff       	call   c0001d68 <st_dword>
c0002e78:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e7b:	89 f2                	mov    edx,esi
c0002e7d:	83 c3 10             	add    ebx,0x10
c0002e80:	e8 e3 ee ff ff       	call   c0001d68 <st_dword>
c0002e85:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e8a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e8e:	31 d2                	xor    edx,edx
c0002e90:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e93:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e97:	89 c8                	mov    eax,ecx
c0002e99:	01 f1                	add    ecx,esi
c0002e9b:	f7 f5                	div    ebp
c0002e9d:	89 d5                	mov    ebp,edx
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	45                   	inc    ebp
c0002ea2:	f7 f7                	div    edi
c0002ea4:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002ea7:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002eaa:	89 c2                	mov    edx,eax
c0002eac:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002eaf:	c1 ea 02             	shr    edx,0x2
c0002eb2:	83 e2 c0             	and    edx,0xffffffc0
c0002eb5:	09 ea                	or     edx,ebp
c0002eb7:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002ebc:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002ebf:	31 d2                	xor    edx,edx
c0002ec1:	f7 f5                	div    ebp
c0002ec3:	89 d6                	mov    esi,edx
c0002ec5:	31 d2                	xor    edx,edx
c0002ec7:	46                   	inc    esi
c0002ec8:	f7 f7                	div    edi
c0002eca:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ecd:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002ed0:	89 c7                	mov    edi,eax
c0002ed2:	c1 ef 02             	shr    edi,0x2
c0002ed5:	83 e7 c0             	and    edi,0xffffffc0
c0002ed8:	09 fe                	or     esi,edi
c0002eda:	89 f2                	mov    edx,esi
c0002edc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002edf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ee4:	0f 85 06 ff ff ff    	jne    c0002df0 <create_partition+0x9b>
c0002eea:	e9 05 ff ff ff       	jmp    c0002df4 <create_partition+0x9f>
c0002eef:	b8 01 00 00 00       	mov    eax,0x1
c0002ef4:	83 c4 3c             	add    esp,0x3c
c0002ef7:	5b                   	pop    ebx
c0002ef8:	5e                   	pop    esi
c0002ef9:	5f                   	pop    edi
c0002efa:	5d                   	pop    ebp
c0002efb:	c3                   	ret    

c0002efc <get_fileinfo>:
c0002efc:	55                   	push   ebp
c0002efd:	57                   	push   edi
c0002efe:	56                   	push   esi
c0002eff:	53                   	push   ebx
c0002f00:	83 ec 1c             	sub    esp,0x1c
c0002f03:	8b 30                	mov    esi,DWORD PTR [eax]
c0002f05:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002f09:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002f0d:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002f11:	0f 84 c1 01 00 00    	je     c00030d8 <get_fileinfo+0x1dc>
c0002f17:	89 d3                	mov    ebx,edx
c0002f19:	89 c6                	mov    esi,eax
c0002f1b:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002f1f:	74 6a                	je     c0002f8b <get_fileinfo+0x8f>
c0002f21:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f29:	31 ed                	xor    ebp,ebp
c0002f2b:	31 ff                	xor    edi,edi
c0002f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f38:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f3c:	66 85 d2             	test   dx,dx
c0002f3f:	74 3e                	je     c0002f7f <get_fileinfo+0x83>
c0002f41:	66 85 ed             	test   bp,bp
c0002f44:	75 0c                	jne    c0002f52 <get_fileinfo+0x56>
c0002f46:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f4c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f50:	76 22                	jbe    c0002f74 <get_fileinfo+0x78>
c0002f52:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f57:	89 e8                	mov    eax,ebp
c0002f59:	29 f9                	sub    ecx,edi
c0002f5b:	c1 e0 10             	shl    eax,0x10
c0002f5e:	09 d0                	or     eax,edx
c0002f60:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f64:	e8 23 ef ff ff       	call   c0001e8c <put_utf>
c0002f69:	84 c0                	test   al,al
c0002f6b:	74 10                	je     c0002f7d <get_fileinfo+0x81>
c0002f6d:	0f b6 c0             	movzx  eax,al
c0002f70:	31 d2                	xor    edx,edx
c0002f72:	01 c7                	add    edi,eax
c0002f74:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f79:	89 d5                	mov    ebp,edx
c0002f7b:	eb b0                	jmp    c0002f2d <get_fileinfo+0x31>
c0002f7d:	31 ff                	xor    edi,edi
c0002f7f:	66 85 ed             	test   bp,bp
c0002f82:	74 02                	je     c0002f86 <get_fileinfo+0x8a>
c0002f84:	31 ff                	xor    edi,edi
c0002f86:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f8b:	31 ff                	xor    edi,edi
c0002f8d:	31 c9                	xor    ecx,ecx
c0002f8f:	83 f9 0a             	cmp    ecx,0xa
c0002f92:	0f 87 ad 00 00 00    	ja     c0003045 <get_fileinfo+0x149>
c0002f98:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f9b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f9e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002fa2:	66 83 fa 20          	cmp    dx,0x20
c0002fa6:	0f 84 92 00 00 00    	je     c000303e <get_fileinfo+0x142>
c0002fac:	66 83 fa 05          	cmp    dx,0x5
c0002fb0:	75 05                	jne    c0002fb7 <get_fileinfo+0xbb>
c0002fb2:	ba e5 00 00 00       	mov    edx,0xe5
c0002fb7:	83 ff 0b             	cmp    edi,0xb
c0002fba:	77 0b                	ja     c0002fc7 <get_fileinfo+0xcb>
c0002fbc:	83 fd 09             	cmp    ebp,0x9
c0002fbf:	75 06                	jne    c0002fc7 <get_fileinfo+0xcb>
c0002fc1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fc6:	47                   	inc    edi
c0002fc7:	0f b7 c2             	movzx  eax,dx
c0002fca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fce:	e8 ed ed ff ff       	call   c0001dc0 <dbc_1st>
c0002fd3:	85 c0                	test   eax,eax
c0002fd5:	74 2f                	je     c0003006 <get_fileinfo+0x10a>
c0002fd7:	83 fd 08             	cmp    ebp,0x8
c0002fda:	74 2a                	je     c0003006 <get_fileinfo+0x10a>
c0002fdc:	83 fd 0b             	cmp    ebp,0xb
c0002fdf:	74 25                	je     c0003006 <get_fileinfo+0x10a>
c0002fe1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fe4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fe8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fec:	e8 d2 ed ff ff       	call   c0001dc3 <dbc_2nd>
c0002ff1:	85 c0                	test   eax,eax
c0002ff3:	74 11                	je     c0003006 <get_fileinfo+0x10a>
c0002ff5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ff9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002ffe:	c1 e2 08             	shl    edx,0x8
c0003001:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003004:	09 c2                	or     edx,eax
c0003006:	0f b7 d2             	movzx  edx,dx
c0003009:	50                   	push   eax
c000300a:	50                   	push   eax
c000300b:	68 b5 01 00 00       	push   0x1b5
c0003010:	52                   	push   edx
c0003011:	e8 46 2b 00 00       	call   c0005b5c <ff_oem2uni>
c0003016:	83 c4 10             	add    esp,0x10
c0003019:	66 85 c0             	test   ax,ax
c000301c:	75 04                	jne    c0003022 <get_fileinfo+0x126>
c000301e:	31 ff                	xor    edi,edi
c0003020:	eb 23                	jmp    c0003045 <get_fileinfo+0x149>
c0003022:	b9 0c 00 00 00       	mov    ecx,0xc
c0003027:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000302b:	29 f9                	sub    ecx,edi
c000302d:	0f b7 c0             	movzx  eax,ax
c0003030:	e8 57 ee ff ff       	call   c0001e8c <put_utf>
c0003035:	84 c0                	test   al,al
c0003037:	74 e5                	je     c000301e <get_fileinfo+0x122>
c0003039:	0f b6 c0             	movzx  eax,al
c000303c:	01 c7                	add    edi,eax
c000303e:	89 e9                	mov    ecx,ebp
c0003040:	e9 4a ff ff ff       	jmp    c0002f8f <get_fileinfo+0x93>
c0003045:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000304a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000304e:	75 54                	jne    c00030a4 <get_fileinfo+0x1a8>
c0003050:	85 ff                	test   edi,edi
c0003052:	75 0b                	jne    c000305f <get_fileinfo+0x163>
c0003054:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003058:	ba 01 00 00 00       	mov    edx,0x1
c000305d:	eb 33                	jmp    c0003092 <get_fileinfo+0x196>
c000305f:	b1 08                	mov    cl,0x8
c0003061:	31 d2                	xor    edx,edx
c0003063:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003069:	84 c0                	test   al,al
c000306b:	74 25                	je     c0003092 <get_fileinfo+0x196>
c000306d:	66 83 f8 2e          	cmp    ax,0x2e
c0003071:	74 16                	je     c0003089 <get_fileinfo+0x18d>
c0003073:	8d 78 bf             	lea    edi,[eax-0x41]
c0003076:	66 83 ff 19          	cmp    di,0x19
c000307a:	77 0f                	ja     c000308b <get_fileinfo+0x18f>
c000307c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000307f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003082:	74 07                	je     c000308b <get_fileinfo+0x18f>
c0003084:	83 c0 20             	add    eax,0x20
c0003087:	eb 02                	jmp    c000308b <get_fileinfo+0x18f>
c0003089:	b1 10                	mov    cl,0x10
c000308b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000308f:	42                   	inc    edx
c0003090:	eb d1                	jmp    c0003063 <get_fileinfo+0x167>
c0003092:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003097:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000309e:	75 04                	jne    c00030a4 <get_fileinfo+0x1a8>
c00030a0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00030a4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030a7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00030aa:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00030ad:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b0:	83 c0 1c             	add    eax,0x1c
c00030b3:	e8 94 ec ff ff       	call   c0001d4c <ld_dword>
c00030b8:	89 03                	mov    DWORD PTR [ebx],eax
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	83 c0 16             	add    eax,0x16
c00030c0:	e8 7a ec ff ff       	call   c0001d3f <ld_word>
c00030c5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030c9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030cc:	83 c0 18             	add    eax,0x18
c00030cf:	e8 6b ec ff ff       	call   c0001d3f <ld_word>
c00030d4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030d8:	83 c4 1c             	add    esp,0x1c
c00030db:	5b                   	pop    ebx
c00030dc:	5e                   	pop    esi
c00030dd:	5f                   	pop    edi
c00030de:	5d                   	pop    ebp
c00030df:	c3                   	ret    

c00030e0 <ld_clust.isra.0>:
c00030e0:	56                   	push   esi
c00030e1:	89 c6                	mov    esi,eax
c00030e3:	53                   	push   ebx
c00030e4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030e7:	89 d3                	mov    ebx,edx
c00030e9:	e8 51 ec ff ff       	call   c0001d3f <ld_word>
c00030ee:	0f b7 c8             	movzx  ecx,ax
c00030f1:	89 f0                	mov    eax,esi
c00030f3:	3c 03                	cmp    al,0x3
c00030f5:	75 0d                	jne    c0003104 <ld_clust.isra.0+0x24>
c00030f7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030fa:	e8 40 ec ff ff       	call   c0001d3f <ld_word>
c00030ff:	c1 e0 10             	shl    eax,0x10
c0003102:	09 c1                	or     ecx,eax
c0003104:	89 c8                	mov    eax,ecx
c0003106:	5b                   	pop    ebx
c0003107:	5e                   	pop    esi
c0003108:	c3                   	ret    

c0003109 <st_clust.isra.1>:
c0003109:	56                   	push   esi
c000310a:	89 c6                	mov    esi,eax
c000310c:	53                   	push   ebx
c000310d:	89 d3                	mov    ebx,edx
c000310f:	0f b7 d1             	movzx  edx,cx
c0003112:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003115:	e8 4a ec ff ff       	call   c0001d64 <st_word>
c000311a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000311d:	75 0f                	jne    c000312e <st_clust.isra.1+0x25>
c000311f:	c1 e9 10             	shr    ecx,0x10
c0003122:	8d 43 14             	lea    eax,[ebx+0x14]
c0003125:	89 ca                	mov    edx,ecx
c0003127:	5b                   	pop    ebx
c0003128:	5e                   	pop    esi
c0003129:	e9 36 ec ff ff       	jmp    c0001d64 <st_word>
c000312e:	5b                   	pop    ebx
c000312f:	5e                   	pop    esi
c0003130:	c3                   	ret    

c0003131 <get_fat.isra.2>:
c0003131:	b9 01 00 00 00       	mov    ecx,0x1
c0003136:	83 fa 01             	cmp    edx,0x1
c0003139:	0f 86 f1 00 00 00    	jbe    c0003230 <get_fat.isra.2+0xff>
c000313f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003142:	0f 83 e8 00 00 00    	jae    c0003230 <get_fat.isra.2+0xff>
c0003148:	55                   	push   ebp
c0003149:	57                   	push   edi
c000314a:	89 c7                	mov    edi,eax
c000314c:	56                   	push   esi
c000314d:	89 d6                	mov    esi,edx
c000314f:	53                   	push   ebx
c0003150:	83 ec 0c             	sub    esp,0xc
c0003153:	8a 00                	mov    al,BYTE PTR [eax]
c0003155:	3c 02                	cmp    al,0x2
c0003157:	74 78                	je     c00031d1 <get_fat.isra.2+0xa0>
c0003159:	3c 03                	cmp    al,0x3
c000315b:	0f 84 97 00 00 00    	je     c00031f8 <get_fat.isra.2+0xc7>
c0003161:	fe c8                	dec    al
c0003163:	0f 85 bd 00 00 00    	jne    c0003226 <get_fat.isra.2+0xf5>
c0003169:	89 d3                	mov    ebx,edx
c000316b:	89 f8                	mov    eax,edi
c000316d:	d1 eb                	shr    ebx,1
c000316f:	01 d3                	add    ebx,edx
c0003171:	89 da                	mov    edx,ebx
c0003173:	c1 ea 09             	shr    edx,0x9
c0003176:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003179:	e8 e7 f0 ff ff       	call   c0002265 <move_window>
c000317e:	85 c0                	test   eax,eax
c0003180:	74 08                	je     c000318a <get_fat.isra.2+0x59>
c0003182:	83 c9 ff             	or     ecx,0xffffffff
c0003185:	e9 9c 00 00 00       	jmp    c0003226 <get_fat.isra.2+0xf5>
c000318a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000318d:	89 f8                	mov    eax,edi
c000318f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003195:	89 ea                	mov    edx,ebp
c0003197:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000319b:	c1 ea 09             	shr    edx,0x9
c000319e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031a1:	e8 bf f0 ff ff       	call   c0002265 <move_window>
c00031a6:	85 c0                	test   eax,eax
c00031a8:	75 d8                	jne    c0003182 <get_fat.isra.2+0x51>
c00031aa:	0f b6 c3             	movzx  eax,bl
c00031ad:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00031b3:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c00031b8:	c1 e3 08             	shl    ebx,0x8
c00031bb:	09 c3                	or     ebx,eax
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031c5:	83 e6 01             	and    esi,0x1
c00031c8:	74 5c                	je     c0003226 <get_fat.isra.2+0xf5>
c00031ca:	89 d9                	mov    ecx,ebx
c00031cc:	c1 e9 04             	shr    ecx,0x4
c00031cf:	eb 55                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031d1:	c1 ea 08             	shr    edx,0x8
c00031d4:	89 f8                	mov    eax,edi
c00031d6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031d9:	e8 87 f0 ff ff       	call   c0002265 <move_window>
c00031de:	85 c0                	test   eax,eax
c00031e0:	75 a0                	jne    c0003182 <get_fat.isra.2+0x51>
c00031e2:	01 f6                	add    esi,esi
c00031e4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ea:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ee:	e8 4c eb ff ff       	call   c0001d3f <ld_word>
c00031f3:	0f b7 c8             	movzx  ecx,ax
c00031f6:	eb 2e                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031f8:	c1 ea 07             	shr    edx,0x7
c00031fb:	89 f8                	mov    eax,edi
c00031fd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003200:	e8 60 f0 ff ff       	call   c0002265 <move_window>
c0003205:	85 c0                	test   eax,eax
c0003207:	0f 85 75 ff ff ff    	jne    c0003182 <get_fat.isra.2+0x51>
c000320d:	c1 e6 02             	shl    esi,0x2
c0003210:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003216:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000321a:	e8 2d eb ff ff       	call   c0001d4c <ld_dword>
c000321f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003224:	89 c1                	mov    ecx,eax
c0003226:	83 c4 0c             	add    esp,0xc
c0003229:	89 c8                	mov    eax,ecx
c000322b:	5b                   	pop    ebx
c000322c:	5e                   	pop    esi
c000322d:	5f                   	pop    edi
c000322e:	5d                   	pop    ebp
c000322f:	c3                   	ret    
c0003230:	89 c8                	mov    eax,ecx
c0003232:	c3                   	ret    

c0003233 <dir_sdi>:
c0003233:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003239:	0f 87 b6 00 00 00    	ja     c00032f5 <dir_sdi+0xc2>
c000323f:	55                   	push   ebp
c0003240:	57                   	push   edi
c0003241:	56                   	push   esi
c0003242:	53                   	push   ebx
c0003243:	89 d3                	mov    ebx,edx
c0003245:	83 ec 1c             	sub    esp,0x1c
c0003248:	f6 c2 1f             	test   dl,0x1f
c000324b:	74 0a                	je     c0003257 <dir_sdi+0x24>
c000324d:	b8 02 00 00 00       	mov    eax,0x2
c0003252:	e9 96 00 00 00       	jmp    c00032ed <dir_sdi+0xba>
c0003257:	89 c6                	mov    esi,eax
c0003259:	8b 38                	mov    edi,DWORD PTR [eax]
c000325b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000325e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003261:	85 c9                	test   ecx,ecx
c0003263:	75 23                	jne    c0003288 <dir_sdi+0x55>
c0003265:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003268:	76 07                	jbe    c0003271 <dir_sdi+0x3e>
c000326a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000326d:	85 c0                	test   eax,eax
c000326f:	75 15                	jne    c0003286 <dir_sdi+0x53>
c0003271:	89 da                	mov    edx,ebx
c0003273:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003277:	c1 ea 05             	shr    edx,0x5
c000327a:	39 c2                	cmp    edx,eax
c000327c:	73 cf                	jae    c000324d <dir_sdi+0x1a>
c000327e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003281:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003284:	eb 3d                	jmp    c00032c3 <dir_sdi+0x90>
c0003286:	89 c1                	mov    ecx,eax
c0003288:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000328c:	c1 e5 09             	shl    ebp,0x9
c000328f:	89 ca                	mov    edx,ecx
c0003291:	39 eb                	cmp    ebx,ebp
c0003293:	72 1c                	jb     c00032b1 <dir_sdi+0x7e>
c0003295:	8b 06                	mov    eax,DWORD PTR [esi]
c0003297:	e8 95 fe ff ff       	call   c0003131 <get_fat.isra.2>
c000329c:	89 c1                	mov    ecx,eax
c000329e:	83 f8 ff             	cmp    eax,0xffffffff
c00032a1:	74 45                	je     c00032e8 <dir_sdi+0xb5>
c00032a3:	83 f8 01             	cmp    eax,0x1
c00032a6:	76 a5                	jbe    c000324d <dir_sdi+0x1a>
c00032a8:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00032ab:	76 a0                	jbe    c000324d <dir_sdi+0x1a>
c00032ad:	29 eb                	sub    ebx,ebp
c00032af:	eb de                	jmp    c000328f <dir_sdi+0x5c>
c00032b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00032b5:	89 f8                	mov    eax,edi
c00032b7:	e8 c9 ec ff ff       	call   c0001f85 <clst2sect>
c00032bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032c0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032c3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032c6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032c9:	85 d2                	test   edx,edx
c00032cb:	74 80                	je     c000324d <dir_sdi+0x1a>
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032d5:	c1 e8 09             	shr    eax,0x9
c00032d8:	01 d0                	add    eax,edx
c00032da:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032dd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032e1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032e4:	31 c0                	xor    eax,eax
c00032e6:	eb 05                	jmp    c00032ed <dir_sdi+0xba>
c00032e8:	b8 01 00 00 00       	mov    eax,0x1
c00032ed:	83 c4 1c             	add    esp,0x1c
c00032f0:	5b                   	pop    ebx
c00032f1:	5e                   	pop    esi
c00032f2:	5f                   	pop    edi
c00032f3:	5d                   	pop    ebp
c00032f4:	c3                   	ret    
c00032f5:	b8 02 00 00 00       	mov    eax,0x2
c00032fa:	c3                   	ret    

c00032fb <create_chain>:
c00032fb:	55                   	push   ebp
c00032fc:	89 c5                	mov    ebp,eax
c00032fe:	57                   	push   edi
c00032ff:	89 d7                	mov    edi,edx
c0003301:	56                   	push   esi
c0003302:	53                   	push   ebx
c0003303:	83 ec 1c             	sub    esp,0x1c
c0003306:	85 d2                	test   edx,edx
c0003308:	8b 30                	mov    esi,DWORD PTR [eax]
c000330a:	75 0e                	jne    c000331a <create_chain+0x1f>
c000330c:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000330f:	85 c9                	test   ecx,ecx
c0003311:	74 34                	je     c0003347 <create_chain+0x4c>
c0003313:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003316:	77 34                	ja     c000334c <create_chain+0x51>
c0003318:	eb 2d                	jmp    c0003347 <create_chain+0x4c>
c000331a:	89 f0                	mov    eax,esi
c000331c:	e8 10 fe ff ff       	call   c0003131 <get_fat.isra.2>
c0003321:	89 c3                	mov    ebx,eax
c0003323:	83 f8 01             	cmp    eax,0x1
c0003326:	77 0a                	ja     c0003332 <create_chain+0x37>
c0003328:	bb 01 00 00 00       	mov    ebx,0x1
c000332d:	e9 f9 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003332:	83 f8 ff             	cmp    eax,0xffffffff
c0003335:	0f 84 ed 00 00 00    	je     c0003428 <create_chain+0x12d>
c000333b:	89 f9                	mov    ecx,edi
c000333d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003340:	76 0a                	jbe    c000334c <create_chain+0x51>
c0003342:	e9 e4 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003347:	b9 01 00 00 00       	mov    ecx,0x1
c000334c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003350:	75 07                	jne    c0003359 <create_chain+0x5e>
c0003352:	31 db                	xor    ebx,ebx
c0003354:	e9 d2 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003359:	39 f9                	cmp    ecx,edi
c000335b:	75 46                	jne    c00033a3 <create_chain+0xa8>
c000335d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003360:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003363:	77 05                	ja     c000336a <create_chain+0x6f>
c0003365:	bb 02 00 00 00       	mov    ebx,0x2
c000336a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000336e:	89 da                	mov    edx,ebx
c0003370:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003373:	e8 b9 fd ff ff       	call   c0003131 <get_fat.isra.2>
c0003378:	83 f8 01             	cmp    eax,0x1
c000337b:	74 ab                	je     c0003328 <create_chain+0x2d>
c000337d:	83 f8 ff             	cmp    eax,0xffffffff
c0003380:	0f 84 a2 00 00 00    	je     c0003428 <create_chain+0x12d>
c0003386:	85 c0                	test   eax,eax
c0003388:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000338c:	74 11                	je     c000339f <create_chain+0xa4>
c000338e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003391:	83 f8 01             	cmp    eax,0x1
c0003394:	76 0d                	jbe    c00033a3 <create_chain+0xa8>
c0003396:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003399:	73 08                	jae    c00033a3 <create_chain+0xa8>
c000339b:	89 c1                	mov    ecx,eax
c000339d:	eb 04                	jmp    c00033a3 <create_chain+0xa8>
c000339f:	85 db                	test   ebx,ebx
c00033a1:	75 3d                	jne    c00033e0 <create_chain+0xe5>
c00033a3:	89 cb                	mov    ebx,ecx
c00033a5:	43                   	inc    ebx
c00033a6:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00033a9:	77 0a                	ja     c00033b5 <create_chain+0xba>
c00033ab:	83 f9 01             	cmp    ecx,0x1
c00033ae:	76 a2                	jbe    c0003352 <create_chain+0x57>
c00033b0:	bb 02 00 00 00       	mov    ebx,0x2
c00033b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b9:	89 da                	mov    edx,ebx
c00033bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00033be:	e8 6e fd ff ff       	call   c0003131 <get_fat.isra.2>
c00033c3:	85 c0                	test   eax,eax
c00033c5:	74 19                	je     c00033e0 <create_chain+0xe5>
c00033c7:	83 f8 01             	cmp    eax,0x1
c00033ca:	0f 84 58 ff ff ff    	je     c0003328 <create_chain+0x2d>
c00033d0:	40                   	inc    eax
c00033d1:	74 55                	je     c0003428 <create_chain+0x12d>
c00033d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d7:	39 cb                	cmp    ebx,ecx
c00033d9:	75 ca                	jne    c00033a5 <create_chain+0xaa>
c00033db:	e9 72 ff ff ff       	jmp    c0003352 <create_chain+0x57>
c00033e0:	83 c9 ff             	or     ecx,0xffffffff
c00033e3:	89 da                	mov    edx,ebx
c00033e5:	89 f0                	mov    eax,esi
c00033e7:	e8 cf f2 ff ff       	call   c00026bb <put_fat>
c00033ec:	85 c0                	test   eax,eax
c00033ee:	75 31                	jne    c0003421 <create_chain+0x126>
c00033f0:	85 ff                	test   edi,edi
c00033f2:	75 16                	jne    c000340a <create_chain+0x10f>
c00033f4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033f7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033fa:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033fd:	8d 57 fe             	lea    edx,[edi-0x2]
c0003400:	39 d0                	cmp    eax,edx
c0003402:	77 17                	ja     c000341b <create_chain+0x120>
c0003404:	48                   	dec    eax
c0003405:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003408:	eb 11                	jmp    c000341b <create_chain+0x120>
c000340a:	89 d9                	mov    ecx,ebx
c000340c:	89 fa                	mov    edx,edi
c000340e:	89 f0                	mov    eax,esi
c0003410:	e8 a6 f2 ff ff       	call   c00026bb <put_fat>
c0003415:	85 c0                	test   eax,eax
c0003417:	74 db                	je     c00033f4 <create_chain+0xf9>
c0003419:	eb 06                	jmp    c0003421 <create_chain+0x126>
c000341b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000341f:	eb 0a                	jmp    c000342b <create_chain+0x130>
c0003421:	48                   	dec    eax
c0003422:	0f 85 00 ff ff ff    	jne    c0003328 <create_chain+0x2d>
c0003428:	83 cb ff             	or     ebx,0xffffffff
c000342b:	83 c4 1c             	add    esp,0x1c
c000342e:	89 d8                	mov    eax,ebx
c0003430:	5b                   	pop    ebx
c0003431:	5e                   	pop    esi
c0003432:	5f                   	pop    edi
c0003433:	5d                   	pop    ebp
c0003434:	c3                   	ret    

c0003435 <remove_chain>:
c0003435:	55                   	push   ebp
c0003436:	57                   	push   edi
c0003437:	56                   	push   esi
c0003438:	89 d6                	mov    esi,edx
c000343a:	53                   	push   ebx
c000343b:	83 ec 0c             	sub    esp,0xc
c000343e:	83 fa 01             	cmp    edx,0x1
c0003441:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003443:	76 65                	jbe    c00034aa <remove_chain+0x75>
c0003445:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003448:	76 60                	jbe    c00034aa <remove_chain+0x75>
c000344a:	89 c5                	mov    ebp,eax
c000344c:	89 ca                	mov    edx,ecx
c000344e:	85 c9                	test   ecx,ecx
c0003450:	74 0e                	je     c0003460 <remove_chain+0x2b>
c0003452:	83 c9 ff             	or     ecx,0xffffffff
c0003455:	89 d8                	mov    eax,ebx
c0003457:	e8 5f f2 ff ff       	call   c00026bb <put_fat>
c000345c:	85 c0                	test   eax,eax
c000345e:	75 56                	jne    c00034b6 <remove_chain+0x81>
c0003460:	89 f2                	mov    edx,esi
c0003462:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003465:	e8 c7 fc ff ff       	call   c0003131 <get_fat.isra.2>
c000346a:	89 c7                	mov    edi,eax
c000346c:	85 c0                	test   eax,eax
c000346e:	75 04                	jne    c0003474 <remove_chain+0x3f>
c0003470:	31 c0                	xor    eax,eax
c0003472:	eb 42                	jmp    c00034b6 <remove_chain+0x81>
c0003474:	83 f8 01             	cmp    eax,0x1
c0003477:	74 31                	je     c00034aa <remove_chain+0x75>
c0003479:	83 f8 ff             	cmp    eax,0xffffffff
c000347c:	74 33                	je     c00034b1 <remove_chain+0x7c>
c000347e:	31 c9                	xor    ecx,ecx
c0003480:	89 f2                	mov    edx,esi
c0003482:	89 d8                	mov    eax,ebx
c0003484:	e8 32 f2 ff ff       	call   c00026bb <put_fat>
c0003489:	85 c0                	test   eax,eax
c000348b:	75 29                	jne    c00034b6 <remove_chain+0x81>
c000348d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003490:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003493:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003496:	39 c8                	cmp    eax,ecx
c0003498:	73 08                	jae    c00034a2 <remove_chain+0x6d>
c000349a:	40                   	inc    eax
c000349b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000349f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00034a2:	89 fe                	mov    esi,edi
c00034a4:	39 fa                	cmp    edx,edi
c00034a6:	77 b8                	ja     c0003460 <remove_chain+0x2b>
c00034a8:	eb c6                	jmp    c0003470 <remove_chain+0x3b>
c00034aa:	b8 02 00 00 00       	mov    eax,0x2
c00034af:	eb 05                	jmp    c00034b6 <remove_chain+0x81>
c00034b1:	b8 01 00 00 00       	mov    eax,0x1
c00034b6:	83 c4 0c             	add    esp,0xc
c00034b9:	5b                   	pop    ebx
c00034ba:	5e                   	pop    esi
c00034bb:	5f                   	pop    edi
c00034bc:	5d                   	pop    ebp
c00034bd:	c3                   	ret    

c00034be <dir_next>:
c00034be:	55                   	push   ebp
c00034bf:	57                   	push   edi
c00034c0:	56                   	push   esi
c00034c1:	53                   	push   ebx
c00034c2:	83 ec 1c             	sub    esp,0x1c
c00034c5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034c8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034ca:	83 c7 20             	add    edi,0x20
c00034cd:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034d3:	76 07                	jbe    c00034dc <dir_next+0x1e>
c00034d5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034dc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034df:	b9 04 00 00 00       	mov    ecx,0x4
c00034e4:	85 f6                	test   esi,esi
c00034e6:	0f 84 cd 00 00 00    	je     c00035b9 <dir_next+0xfb>
c00034ec:	89 c3                	mov    ebx,eax
c00034ee:	89 d1                	mov    ecx,edx
c00034f0:	89 f8                	mov    eax,edi
c00034f2:	25 ff 01 00 00       	and    eax,0x1ff
c00034f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034fb:	0f 85 a8 00 00 00    	jne    c00035a9 <dir_next+0xeb>
c0003501:	46                   	inc    esi
c0003502:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003505:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003508:	85 d2                	test   edx,edx
c000350a:	75 22                	jne    c000352e <dir_next+0x70>
c000350c:	89 fa                	mov    edx,edi
c000350e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003512:	c1 ea 05             	shr    edx,0x5
c0003515:	39 c2                	cmp    edx,eax
c0003517:	0f 82 8c 00 00 00    	jb     c00035a9 <dir_next+0xeb>
c000351d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003524:	b9 04 00 00 00       	mov    ecx,0x4
c0003529:	e9 8b 00 00 00       	jmp    c00035b9 <dir_next+0xfb>
c000352e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003532:	89 fe                	mov    esi,edi
c0003534:	48                   	dec    eax
c0003535:	c1 ee 09             	shr    esi,0x9
c0003538:	85 f0                	test   eax,esi
c000353a:	75 6d                	jne    c00035a9 <dir_next+0xeb>
c000353c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003540:	89 e8                	mov    eax,ebp
c0003542:	e8 ea fb ff ff       	call   c0003131 <get_fat.isra.2>
c0003547:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000354b:	89 c6                	mov    esi,eax
c000354d:	83 f8 01             	cmp    eax,0x1
c0003550:	77 07                	ja     c0003559 <dir_next+0x9b>
c0003552:	b9 02 00 00 00       	mov    ecx,0x2
c0003557:	eb 60                	jmp    c00035b9 <dir_next+0xfb>
c0003559:	83 f8 ff             	cmp    eax,0xffffffff
c000355c:	75 07                	jne    c0003565 <dir_next+0xa7>
c000355e:	b9 01 00 00 00       	mov    ecx,0x1
c0003563:	eb 54                	jmp    c00035b9 <dir_next+0xfb>
c0003565:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003568:	77 30                	ja     c000359a <dir_next+0xdc>
c000356a:	85 c9                	test   ecx,ecx
c000356c:	74 af                	je     c000351d <dir_next+0x5f>
c000356e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003571:	89 d8                	mov    eax,ebx
c0003573:	e8 83 fd ff ff       	call   c00032fb <create_chain>
c0003578:	b9 07 00 00 00       	mov    ecx,0x7
c000357d:	89 c6                	mov    esi,eax
c000357f:	85 c0                	test   eax,eax
c0003581:	74 36                	je     c00035b9 <dir_next+0xfb>
c0003583:	83 f8 01             	cmp    eax,0x1
c0003586:	74 ca                	je     c0003552 <dir_next+0x94>
c0003588:	83 f8 ff             	cmp    eax,0xffffffff
c000358b:	74 d1                	je     c000355e <dir_next+0xa0>
c000358d:	89 c2                	mov    edx,eax
c000358f:	89 e8                	mov    eax,ebp
c0003591:	e8 75 f2 ff ff       	call   c000280b <dir_clear>
c0003596:	85 c0                	test   eax,eax
c0003598:	75 c4                	jne    c000355e <dir_next+0xa0>
c000359a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000359d:	89 f2                	mov    edx,esi
c000359f:	89 e8                	mov    eax,ebp
c00035a1:	e8 df e9 ff ff       	call   c0001f85 <clst2sect>
c00035a6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00035a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035ad:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00035b0:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00035b4:	31 c9                	xor    ecx,ecx
c00035b6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00035b9:	83 c4 1c             	add    esp,0x1c
c00035bc:	89 c8                	mov    eax,ecx
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    

c00035c3 <dir_alloc>:
c00035c3:	55                   	push   ebp
c00035c4:	89 c5                	mov    ebp,eax
c00035c6:	57                   	push   edi
c00035c7:	89 d7                	mov    edi,edx
c00035c9:	56                   	push   esi
c00035ca:	31 d2                	xor    edx,edx
c00035cc:	53                   	push   ebx
c00035cd:	83 ec 0c             	sub    esp,0xc
c00035d0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d2:	e8 5c fc ff ff       	call   c0003233 <dir_sdi>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	75 37                	jne    c0003612 <dir_alloc+0x4f>
c00035db:	31 db                	xor    ebx,ebx
c00035dd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	e8 7e ec ff ff       	call   c0002265 <move_window>
c00035e7:	85 c0                	test   eax,eax
c00035e9:	75 27                	jne    c0003612 <dir_alloc+0x4f>
c00035eb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ee:	8a 12                	mov    dl,BYTE PTR [edx]
c00035f0:	84 d2                	test   dl,dl
c00035f2:	74 05                	je     c00035f9 <dir_alloc+0x36>
c00035f4:	80 fa e5             	cmp    dl,0xe5
c00035f7:	75 07                	jne    c0003600 <dir_alloc+0x3d>
c00035f9:	43                   	inc    ebx
c00035fa:	39 fb                	cmp    ebx,edi
c00035fc:	75 04                	jne    c0003602 <dir_alloc+0x3f>
c00035fe:	eb 1c                	jmp    c000361c <dir_alloc+0x59>
c0003600:	31 db                	xor    ebx,ebx
c0003602:	ba 01 00 00 00       	mov    edx,0x1
c0003607:	89 e8                	mov    eax,ebp
c0003609:	e8 b0 fe ff ff       	call   c00034be <dir_next>
c000360e:	85 c0                	test   eax,eax
c0003610:	74 cb                	je     c00035dd <dir_alloc+0x1a>
c0003612:	83 f8 04             	cmp    eax,0x4
c0003615:	75 05                	jne    c000361c <dir_alloc+0x59>
c0003617:	b8 07 00 00 00       	mov    eax,0x7
c000361c:	83 c4 0c             	add    esp,0xc
c000361f:	5b                   	pop    ebx
c0003620:	5e                   	pop    esi
c0003621:	5f                   	pop    edi
c0003622:	5d                   	pop    ebp
c0003623:	c3                   	ret    

c0003624 <dir_read>:
c0003624:	55                   	push   ebp
c0003625:	57                   	push   edi
c0003626:	bf ff ff ff ff       	mov    edi,0xffffffff
c000362b:	56                   	push   esi
c000362c:	be 04 00 00 00       	mov    esi,0x4
c0003631:	53                   	push   ebx
c0003632:	89 c3                	mov    ebx,eax
c0003634:	83 ec 1c             	sub    esp,0x1c
c0003637:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000363b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000363d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003642:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003645:	85 d2                	test   edx,edx
c0003647:	0f 84 d8 00 00 00    	je     c0003725 <dir_read+0x101>
c000364d:	89 e8                	mov    eax,ebp
c000364f:	e8 11 ec ff ff       	call   c0002265 <move_window>
c0003654:	89 c6                	mov    esi,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	0f 85 d2 00 00 00    	jne    c0003730 <dir_read+0x10c>
c000365e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003661:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003663:	84 c9                	test   cl,cl
c0003665:	0f 84 c0 00 00 00    	je     c000372b <dir_read+0x107>
c000366b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000366e:	83 e0 3f             	and    eax,0x3f
c0003671:	80 f9 2e             	cmp    cl,0x2e
c0003674:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003678:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000367b:	0f 84 8a 00 00 00    	je     c000370b <dir_read+0xe7>
c0003681:	80 f9 e5             	cmp    cl,0xe5
c0003684:	0f 84 81 00 00 00    	je     c000370b <dir_read+0xe7>
c000368a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000368e:	83 e0 1f             	and    eax,0x1f
c0003691:	83 f8 08             	cmp    eax,0x8
c0003694:	0f 94 c0             	sete   al
c0003697:	0f b6 c0             	movzx  eax,al
c000369a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000369e:	75 6b                	jne    c000370b <dir_read+0xe7>
c00036a0:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00036a5:	75 44                	jne    c00036eb <dir_read+0xc7>
c00036a7:	f6 c1 40             	test   cl,0x40
c00036aa:	74 12                	je     c00036be <dir_read+0x9a>
c00036ac:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00036af:	83 e1 bf             	and    ecx,0xffffffbf
c00036b2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00036b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00036b9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00036bc:	eb 06                	jmp    c00036c4 <dir_read+0xa0>
c00036be:	89 f8                	mov    eax,edi
c00036c0:	38 c8                	cmp    al,cl
c00036c2:	75 47                	jne    c000370b <dir_read+0xe7>
c00036c4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036c8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036cd:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036d0:	75 3e                	jne    c0003710 <dir_read+0xec>
c00036d2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036d9:	e8 c4 e8 ff ff       	call   c0001fa2 <pick_lfn>
c00036de:	85 c0                	test   eax,eax
c00036e0:	74 2e                	je     c0003710 <dir_read+0xec>
c00036e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036e6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036e9:	eb 25                	jmp    c0003710 <dir_read+0xec>
c00036eb:	89 f8                	mov    eax,edi
c00036ed:	84 c0                	test   al,al
c00036ef:	75 11                	jne    c0003702 <dir_read+0xde>
c00036f1:	89 d0                	mov    eax,edx
c00036f3:	e8 64 ea ff ff       	call   c000215c <sum_sfn>
c00036f8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036fc:	75 04                	jne    c0003702 <dir_read+0xde>
c00036fe:	31 f6                	xor    esi,esi
c0003700:	eb 35                	jmp    c0003737 <dir_read+0x113>
c0003702:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003709:	eb 2c                	jmp    c0003737 <dir_read+0x113>
c000370b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003710:	31 d2                	xor    edx,edx
c0003712:	89 d8                	mov    eax,ebx
c0003714:	e8 a5 fd ff ff       	call   c00034be <dir_next>
c0003719:	89 c6                	mov    esi,eax
c000371b:	85 c0                	test   eax,eax
c000371d:	0f 84 1f ff ff ff    	je     c0003642 <dir_read+0x1e>
c0003723:	eb 0b                	jmp    c0003730 <dir_read+0x10c>
c0003725:	85 f6                	test   esi,esi
c0003727:	74 d5                	je     c00036fe <dir_read+0xda>
c0003729:	eb 05                	jmp    c0003730 <dir_read+0x10c>
c000372b:	be 04 00 00 00       	mov    esi,0x4
c0003730:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003737:	83 c4 1c             	add    esp,0x1c
c000373a:	89 f0                	mov    eax,esi
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <dir_remove>:
c0003741:	57                   	push   edi
c0003742:	56                   	push   esi
c0003743:	53                   	push   ebx
c0003744:	89 c3                	mov    ebx,eax
c0003746:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003749:	8b 30                	mov    esi,DWORD PTR [eax]
c000374b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000374e:	83 fa ff             	cmp    edx,0xffffffff
c0003751:	74 09                	je     c000375c <dir_remove+0x1b>
c0003753:	e8 db fa ff ff       	call   c0003233 <dir_sdi>
c0003758:	85 c0                	test   eax,eax
c000375a:	75 34                	jne    c0003790 <dir_remove+0x4f>
c000375c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000375f:	89 f0                	mov    eax,esi
c0003761:	e8 ff ea ff ff       	call   c0002265 <move_window>
c0003766:	85 c0                	test   eax,eax
c0003768:	75 1c                	jne    c0003786 <dir_remove+0x45>
c000376a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000376d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003770:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003774:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003777:	73 17                	jae    c0003790 <dir_remove+0x4f>
c0003779:	31 d2                	xor    edx,edx
c000377b:	89 d8                	mov    eax,ebx
c000377d:	e8 3c fd ff ff       	call   c00034be <dir_next>
c0003782:	85 c0                	test   eax,eax
c0003784:	74 d6                	je     c000375c <dir_remove+0x1b>
c0003786:	83 f8 04             	cmp    eax,0x4
c0003789:	75 05                	jne    c0003790 <dir_remove+0x4f>
c000378b:	b8 02 00 00 00       	mov    eax,0x2
c0003790:	5b                   	pop    ebx
c0003791:	5e                   	pop    esi
c0003792:	5f                   	pop    edi
c0003793:	c3                   	ret    

c0003794 <dir_find>:
c0003794:	55                   	push   ebp
c0003795:	31 d2                	xor    edx,edx
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	89 c3                	mov    ebx,eax
c000379c:	83 ec 1c             	sub    esp,0x1c
c000379f:	8b 00                	mov    eax,DWORD PTR [eax]
c00037a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037a5:	89 d8                	mov    eax,ebx
c00037a7:	e8 87 fa ff ff       	call   c0003233 <dir_sdi>
c00037ac:	89 c6                	mov    esi,eax
c00037ae:	85 c0                	test   eax,eax
c00037b0:	0f 85 02 01 00 00    	jne    c00038b8 <dir_find+0x124>
c00037b6:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00037bd:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037c2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ce:	e8 92 ea ff ff       	call   c0002265 <move_window>
c00037d3:	89 c6                	mov    esi,eax
c00037d5:	85 c0                	test   eax,eax
c00037d7:	0f 85 db 00 00 00    	jne    c00038b8 <dir_find+0x124>
c00037dd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037e0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037e3:	84 c9                	test   cl,cl
c00037e5:	0f 84 c8 00 00 00    	je     c00038b3 <dir_find+0x11f>
c00037eb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ee:	88 d0                	mov    al,dl
c00037f0:	83 e0 3f             	and    eax,0x3f
c00037f3:	80 f9 e5             	cmp    cl,0xe5
c00037f6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037f9:	0f 84 93 00 00 00    	je     c0003892 <dir_find+0xfe>
c00037ff:	80 e2 08             	and    dl,0x8
c0003802:	74 0a                	je     c000380e <dir_find+0x7a>
c0003804:	3c 0f                	cmp    al,0xf
c0003806:	0f 85 86 00 00 00    	jne    c0003892 <dir_find+0xfe>
c000380c:	eb 04                	jmp    c0003812 <dir_find+0x7e>
c000380e:	3c 0f                	cmp    al,0xf
c0003810:	75 54                	jne    c0003866 <dir_find+0xd2>
c0003812:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003816:	0f 85 82 00 00 00    	jne    c000389e <dir_find+0x10a>
c000381c:	f6 c1 40             	test   cl,0x40
c000381f:	74 12                	je     c0003833 <dir_find+0x9f>
c0003821:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003824:	83 e1 bf             	and    ecx,0xffffffbf
c0003827:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000382b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000382e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003831:	eb 06                	jmp    c0003839 <dir_find+0xa5>
c0003833:	89 f8                	mov    eax,edi
c0003835:	38 c8                	cmp    al,cl
c0003837:	75 60                	jne    c0003899 <dir_find+0x105>
c0003839:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000383d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003842:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003845:	75 57                	jne    c000389e <dir_find+0x10a>
c0003847:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000384b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000384f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003852:	89 ea                	mov    edx,ebp
c0003854:	e8 89 f3 ff ff       	call   c0002be2 <cmp_lfn>
c0003859:	85 c0                	test   eax,eax
c000385b:	74 41                	je     c000389e <dir_find+0x10a>
c000385d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003861:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003864:	eb 38                	jmp    c000389e <dir_find+0x10a>
c0003866:	89 f8                	mov    eax,edi
c0003868:	84 c0                	test   al,al
c000386a:	75 0d                	jne    c0003879 <dir_find+0xe5>
c000386c:	89 e8                	mov    eax,ebp
c000386e:	e8 e9 e8 ff ff       	call   c000215c <sum_sfn>
c0003873:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003877:	74 3f                	je     c00038b8 <dir_find+0x124>
c0003879:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000387d:	75 13                	jne    c0003892 <dir_find+0xfe>
c000387f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003882:	b9 0b 00 00 00       	mov    ecx,0xb
c0003887:	89 e8                	mov    eax,ebp
c0003889:	e8 fd e4 ff ff       	call   c0001d8b <mem_cmp>
c000388e:	85 c0                	test   eax,eax
c0003890:	74 26                	je     c00038b8 <dir_find+0x124>
c0003892:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003899:	bf ff ff ff ff       	mov    edi,0xffffffff
c000389e:	31 d2                	xor    edx,edx
c00038a0:	89 d8                	mov    eax,ebx
c00038a2:	e8 17 fc ff ff       	call   c00034be <dir_next>
c00038a7:	89 c6                	mov    esi,eax
c00038a9:	85 c0                	test   eax,eax
c00038ab:	0f 84 16 ff ff ff    	je     c00037c7 <dir_find+0x33>
c00038b1:	eb 05                	jmp    c00038b8 <dir_find+0x124>
c00038b3:	be 04 00 00 00       	mov    esi,0x4
c00038b8:	83 c4 1c             	add    esp,0x1c
c00038bb:	89 f0                	mov    eax,esi
c00038bd:	5b                   	pop    ebx
c00038be:	5e                   	pop    esi
c00038bf:	5f                   	pop    edi
c00038c0:	5d                   	pop    ebp
c00038c1:	c3                   	ret    

c00038c2 <follow_path>:
c00038c2:	56                   	push   esi
c00038c3:	53                   	push   ebx
c00038c4:	89 c3                	mov    ebx,eax
c00038c6:	83 ec 14             	sub    esp,0x14
c00038c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038cd:	8b 30                	mov    esi,DWORD PTR [eax]
c00038cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038d3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038d5:	80 fa 5c             	cmp    dl,0x5c
c00038d8:	75 07                	jne    c00038e1 <follow_path+0x1f>
c00038da:	40                   	inc    eax
c00038db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038df:	eb ee                	jmp    c00038cf <follow_path+0xd>
c00038e1:	80 fa 2f             	cmp    dl,0x2f
c00038e4:	74 f4                	je     c00038da <follow_path+0x18>
c00038e6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038ed:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038f0:	77 3e                	ja     c0003930 <follow_path+0x6e>
c00038f2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038f6:	31 d2                	xor    edx,edx
c00038f8:	89 d8                	mov    eax,ebx
c00038fa:	e8 34 f9 ff ff       	call   c0003233 <dir_sdi>
c00038ff:	eb 4f                	jmp    c0003950 <follow_path+0x8e>
c0003901:	89 d8                	mov    eax,ebx
c0003903:	e8 8c fe ff ff       	call   c0003794 <dir_find>
c0003908:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c000390b:	85 c0                	test   eax,eax
c000390d:	75 32                	jne    c0003941 <follow_path+0x7f>
c000390f:	80 e2 04             	and    dl,0x4
c0003912:	75 3c                	jne    c0003950 <follow_path+0x8e>
c0003914:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003918:	74 31                	je     c000394b <follow_path+0x89>
c000391a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000391d:	25 ff 01 00 00       	and    eax,0x1ff
c0003922:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003926:	8a 06                	mov    al,BYTE PTR [esi]
c0003928:	e8 b3 f7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000392d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003930:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003934:	89 d8                	mov    eax,ebx
c0003936:	e8 cb ef ff ff       	call   c0002906 <create_name>
c000393b:	85 c0                	test   eax,eax
c000393d:	74 c2                	je     c0003901 <follow_path+0x3f>
c000393f:	eb 0f                	jmp    c0003950 <follow_path+0x8e>
c0003941:	83 f8 04             	cmp    eax,0x4
c0003944:	75 0a                	jne    c0003950 <follow_path+0x8e>
c0003946:	80 e2 04             	and    dl,0x4
c0003949:	75 05                	jne    c0003950 <follow_path+0x8e>
c000394b:	b8 05 00 00 00       	mov    eax,0x5
c0003950:	83 c4 14             	add    esp,0x14
c0003953:	5b                   	pop    ebx
c0003954:	5e                   	pop    esi
c0003955:	c3                   	ret    

c0003956 <dir_register>:
c0003956:	55                   	push   ebp
c0003957:	57                   	push   edi
c0003958:	56                   	push   esi
c0003959:	be 06 00 00 00       	mov    esi,0x6
c000395e:	53                   	push   ebx
c000395f:	83 ec 2c             	sub    esp,0x2c
c0003962:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003966:	0f 85 65 01 00 00    	jne    c0003ad1 <dir_register+0x17b>
c000396c:	8b 38                	mov    edi,DWORD PTR [eax]
c000396e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003976:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003979:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000397d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003982:	74 06                	je     c000398a <dir_register+0x34>
c0003984:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003988:	eb ef                	jmp    c0003979 <dir_register+0x23>
c000398a:	89 c3                	mov    ebx,eax
c000398c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003991:	8d 40 20             	lea    eax,[eax+0x20]
c0003994:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003998:	89 c2                	mov    edx,eax
c000399a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000399e:	e8 c8 e3 ff ff       	call   c0001d6b <mem_cpy>
c00039a3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00039a8:	74 48                	je     c00039f2 <dir_register+0x9c>
c00039aa:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c00039ae:	bd 01 00 00 00       	mov    ebp,0x1
c00039b3:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c00039b6:	55                   	push   ebp
c00039b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00039bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039bf:	e8 dc e6 ff ff       	call   c00020a0 <gen_numname>
c00039c4:	58                   	pop    eax
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	e8 c8 fd ff ff       	call   c0003794 <dir_find>
c00039cc:	89 c6                	mov    esi,eax
c00039ce:	85 c0                	test   eax,eax
c00039d0:	75 10                	jne    c00039e2 <dir_register+0x8c>
c00039d2:	45                   	inc    ebp
c00039d3:	83 fd 64             	cmp    ebp,0x64
c00039d6:	75 db                	jne    c00039b3 <dir_register+0x5d>
c00039d8:	be 07 00 00 00       	mov    esi,0x7
c00039dd:	e9 ef 00 00 00       	jmp    c0003ad1 <dir_register+0x17b>
c00039e2:	83 f8 04             	cmp    eax,0x4
c00039e5:	0f 85 e6 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c00039eb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039ef:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039f2:	bd 01 00 00 00       	mov    ebp,0x1
c00039f7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039fc:	74 13                	je     c0003a11 <dir_register+0xbb>
c00039fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a02:	b9 0d 00 00 00       	mov    ecx,0xd
c0003a07:	83 c0 0c             	add    eax,0xc
c0003a0a:	31 d2                	xor    edx,edx
c0003a0c:	f7 f1                	div    ecx
c0003a0e:	8d 68 01             	lea    ebp,[eax+0x1]
c0003a11:	89 ea                	mov    edx,ebp
c0003a13:	89 d8                	mov    eax,ebx
c0003a15:	e8 a9 fb ff ff       	call   c00035c3 <dir_alloc>
c0003a1a:	89 c6                	mov    esi,eax
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	0f 85 ad 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a24:	4d                   	dec    ebp
c0003a25:	74 6a                	je     c0003a91 <dir_register+0x13b>
c0003a27:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a2a:	89 e8                	mov    eax,ebp
c0003a2c:	c1 e0 05             	shl    eax,0x5
c0003a2f:	29 c2                	sub    edx,eax
c0003a31:	89 d8                	mov    eax,ebx
c0003a33:	e8 fb f7 ff ff       	call   c0003233 <dir_sdi>
c0003a38:	89 c6                	mov    esi,eax
c0003a3a:	85 c0                	test   eax,eax
c0003a3c:	0f 85 8f 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a46:	e8 11 e7 ff ff       	call   c000215c <sum_sfn>
c0003a4b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a4f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a52:	89 f8                	mov    eax,edi
c0003a54:	e8 0c e8 ff ff       	call   c0002265 <move_window>
c0003a59:	89 c6                	mov    esi,eax
c0003a5b:	85 c0                	test   eax,eax
c0003a5d:	75 72                	jne    c0003ad1 <dir_register+0x17b>
c0003a5f:	83 ec 0c             	sub    esp,0xc
c0003a62:	89 e8                	mov    eax,ebp
c0003a64:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a69:	0f b6 c8             	movzx  ecx,al
c0003a6c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a6f:	52                   	push   edx
c0003a70:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a73:	e8 a4 e5 ff ff       	call   c000201c <put_lfn>
c0003a78:	31 d2                	xor    edx,edx
c0003a7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a7e:	89 d8                	mov    eax,ebx
c0003a80:	e8 39 fa ff ff       	call   c00034be <dir_next>
c0003a85:	83 c4 10             	add    esp,0x10
c0003a88:	89 c6                	mov    esi,eax
c0003a8a:	85 c0                	test   eax,eax
c0003a8c:	75 43                	jne    c0003ad1 <dir_register+0x17b>
c0003a8e:	4d                   	dec    ebp
c0003a8f:	75 be                	jne    c0003a4f <dir_register+0xf9>
c0003a91:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a94:	89 f8                	mov    eax,edi
c0003a96:	e8 ca e7 ff ff       	call   c0002265 <move_window>
c0003a9b:	89 c6                	mov    esi,eax
c0003a9d:	85 c0                	test   eax,eax
c0003a9f:	75 30                	jne    c0003ad1 <dir_register+0x17b>
c0003aa1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003aa4:	b9 20 00 00 00       	mov    ecx,0x20
c0003aa9:	31 d2                	xor    edx,edx
c0003aab:	e8 d0 e2 ff ff       	call   c0001d80 <mem_set>
c0003ab0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003ab3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ab7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003abc:	e8 aa e2 ff ff       	call   c0001d6b <mem_cpy>
c0003ac1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003ac4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ac7:	83 e0 18             	and    eax,0x18
c0003aca:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003acd:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ad1:	83 c4 2c             	add    esp,0x2c
c0003ad4:	89 f0                	mov    eax,esi
c0003ad6:	5b                   	pop    ebx
c0003ad7:	5e                   	pop    esi
c0003ad8:	5f                   	pop    edi
c0003ad9:	5d                   	pop    ebp
c0003ada:	c3                   	ret    

c0003adb <f_mount>:
c0003adb:	53                   	push   ebx
c0003adc:	83 ec 18             	sub    esp,0x18
c0003adf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ae3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ae7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003aeb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003aef:	e8 7a e6 ff ff       	call   c000216e <get_ldnumber>
c0003af4:	89 c2                	mov    edx,eax
c0003af6:	b8 0b 00 00 00       	mov    eax,0xb
c0003afb:	85 d2                	test   edx,edx
c0003afd:	78 39                	js     c0003b38 <f_mount+0x5d>
c0003aff:	8b 04 95 a0 ff 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0060]
c0003b06:	85 c0                	test   eax,eax
c0003b08:	74 03                	je     c0003b0d <f_mount+0x32>
c0003b0a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b11:	85 c0                	test   eax,eax
c0003b13:	74 03                	je     c0003b18 <f_mount+0x3d>
c0003b15:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b1c:	89 04 95 a0 ff 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0060],eax
c0003b23:	31 c0                	xor    eax,eax
c0003b25:	84 db                	test   bl,bl
c0003b27:	74 0f                	je     c0003b38 <f_mount+0x5d>
c0003b29:	31 c9                	xor    ecx,ecx
c0003b2b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b2f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b33:	e8 80 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b38:	83 c4 18             	add    esp,0x18
c0003b3b:	5b                   	pop    ebx
c0003b3c:	c3                   	ret    

c0003b3d <f_open>:
c0003b3d:	55                   	push   ebp
c0003b3e:	b8 09 00 00 00       	mov    eax,0x9
c0003b43:	57                   	push   edi
c0003b44:	56                   	push   esi
c0003b45:	53                   	push   ebx
c0003b46:	83 ec 5c             	sub    esp,0x5c
c0003b49:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b4d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b51:	85 db                	test   ebx,ebx
c0003b53:	0f 84 a7 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b59:	89 fe                	mov    esi,edi
c0003b5b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b5f:	83 e6 3f             	and    esi,0x3f
c0003b62:	89 f0                	mov    eax,esi
c0003b64:	0f b6 c8             	movzx  ecx,al
c0003b67:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b6b:	e8 48 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b70:	85 c0                	test   eax,eax
c0003b72:	0f 85 82 02 00 00    	jne    c0003dfa <f_open+0x2bd>
c0003b78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b7c:	83 ec 0c             	sub    esp,0xc
c0003b7f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b83:	68 00 02 00 00       	push   0x200
c0003b88:	e8 ff 1e 00 00       	call   c0005a8c <ff_memalloc>
c0003b8d:	83 c4 10             	add    esp,0x10
c0003b90:	89 c5                	mov    ebp,eax
c0003b92:	b8 11 00 00 00       	mov    eax,0x11
c0003b97:	85 ed                	test   ebp,ebp
c0003b99:	0f 84 61 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ba3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ba7:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003baa:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bae:	e8 0f fd ff ff       	call   c00038c2 <follow_path>
c0003bb3:	85 c0                	test   eax,eax
c0003bb5:	75 0c                	jne    c0003bc3 <f_open+0x86>
c0003bb7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003bbc:	79 05                	jns    c0003bc3 <f_open+0x86>
c0003bbe:	b8 06 00 00 00       	mov    eax,0x6
c0003bc3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003bc9:	0f 84 de 00 00 00    	je     c0003cad <f_open+0x170>
c0003bcf:	85 c0                	test   eax,eax
c0003bd1:	74 1e                	je     c0003bf1 <f_open+0xb4>
c0003bd3:	83 f8 04             	cmp    eax,0x4
c0003bd6:	0f 85 06 02 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003bdc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003be0:	83 ce 08             	or     esi,0x8
c0003be3:	e8 6e fd ff ff       	call   c0003956 <dir_register>
c0003be8:	85 c0                	test   eax,eax
c0003bea:	74 2f                	je     c0003c1b <f_open+0xde>
c0003bec:	e9 f1 01 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003bf1:	b8 07 00 00 00       	mov    eax,0x7
c0003bf6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bfb:	0f 85 e1 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c01:	b8 08 00 00 00       	mov    eax,0x8
c0003c06:	f7 c7 04 00 00 00    	test   edi,0x4
c0003c0c:	0f 85 d0 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c12:	83 e7 08             	and    edi,0x8
c0003c15:	0f 84 bf 00 00 00    	je     c0003cda <f_open+0x19d>
c0003c1b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003c1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c23:	89 ca                	mov    edx,ecx
c0003c25:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c29:	8a 00                	mov    al,BYTE PTR [eax]
c0003c2b:	e8 b0 f4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003c30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c34:	89 c7                	mov    edi,eax
c0003c36:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c3b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c3e:	e8 25 e1 ff ff       	call   c0001d68 <st_dword>
c0003c43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c47:	31 c9                	xor    ecx,ecx
c0003c49:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c51:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c55:	e8 af f4 ff ff       	call   c0003109 <st_clust.isra.1>
c0003c5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c5e:	31 d2                	xor    edx,edx
c0003c60:	83 c0 1c             	add    eax,0x1c
c0003c63:	e8 00 e1 ff ff       	call   c0001d68 <st_dword>
c0003c68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c6c:	85 ff                	test   edi,edi
c0003c6e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c72:	74 66                	je     c0003cda <f_open+0x19d>
c0003c74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c78:	31 c9                	xor    ecx,ecx
c0003c7a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c7d:	89 fa                	mov    edx,edi
c0003c7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c83:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c87:	e8 a9 f7 ff ff       	call   c0003435 <remove_chain>
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	0f 85 4e 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c98:	4f                   	dec    edi
c0003c99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9d:	e8 c3 e5 ff ff       	call   c0002265 <move_window>
c0003ca2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003ca6:	85 c0                	test   eax,eax
c0003ca8:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003cab:	eb 27                	jmp    c0003cd4 <f_open+0x197>
c0003cad:	85 c0                	test   eax,eax
c0003caf:	0f 85 2d 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cb5:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003cb9:	b8 04 00 00 00       	mov    eax,0x4
c0003cbe:	f6 c2 10             	test   dl,0x10
c0003cc1:	0f 85 1b 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cc7:	83 e7 02             	and    edi,0x2
c0003cca:	74 0e                	je     c0003cda <f_open+0x19d>
c0003ccc:	b8 07 00 00 00       	mov    eax,0x7
c0003cd1:	80 e2 01             	and    dl,0x1
c0003cd4:	0f 85 08 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cda:	f7 c6 08 00 00 00    	test   esi,0x8
c0003ce0:	74 03                	je     c0003ce5 <f_open+0x1a8>
c0003ce2:	83 ce 40             	or     esi,0x40
c0003ce5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ce9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ced:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cf0:	89 fa                	mov    edx,edi
c0003cf2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cf6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cf9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cfc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cfe:	e8 dd f3 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003d03:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003d06:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003d09:	e8 3e e0 ff ff       	call   c0001d4c <ld_dword>
c0003d0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003d12:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003d15:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003d17:	31 d2                	xor    edx,edx
c0003d19:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003d1d:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d21:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d25:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d2c:	89 f0                	mov    eax,esi
c0003d2e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d35:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d38:	b9 00 02 00 00       	mov    ecx,0x200
c0003d3d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d44:	e8 37 e0 ff ff       	call   c0001d80 <mem_set>
c0003d49:	83 e6 20             	and    esi,0x20
c0003d4c:	75 07                	jne    c0003d55 <f_open+0x218>
c0003d4e:	31 c0                	xor    eax,eax
c0003d50:	e9 8d 00 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003d55:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d58:	85 ff                	test   edi,edi
c0003d5a:	74 f2                	je     c0003d4e <f_open+0x211>
c0003d5c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d63:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d66:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d6a:	c1 e6 09             	shl    esi,0x9
c0003d6d:	39 fe                	cmp    esi,edi
c0003d6f:	73 1c                	jae    c0003d8d <f_open+0x250>
c0003d71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d73:	29 f7                	sub    edi,esi
c0003d75:	e8 b7 f3 ff ff       	call   c0003131 <get_fat.isra.2>
c0003d7a:	89 c2                	mov    edx,eax
c0003d7c:	83 f8 01             	cmp    eax,0x1
c0003d7f:	76 10                	jbe    c0003d91 <f_open+0x254>
c0003d81:	83 f8 ff             	cmp    eax,0xffffffff
c0003d84:	75 e7                	jne    c0003d6d <f_open+0x230>
c0003d86:	b8 01 00 00 00       	mov    eax,0x1
c0003d8b:	eb 09                	jmp    c0003d96 <f_open+0x259>
c0003d8d:	31 c0                	xor    eax,eax
c0003d8f:	eb 05                	jmp    c0003d96 <f_open+0x259>
c0003d91:	b8 02 00 00 00       	mov    eax,0x2
c0003d96:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d99:	85 c0                	test   eax,eax
c0003d9b:	75 45                	jne    c0003de2 <f_open+0x2a5>
c0003d9d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003da3:	74 a9                	je     c0003d4e <f_open+0x211>
c0003da5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003da9:	89 f0                	mov    eax,esi
c0003dab:	e8 d5 e1 ff ff       	call   c0001f85 <clst2sect>
c0003db0:	89 c2                	mov    edx,eax
c0003db2:	b8 02 00 00 00       	mov    eax,0x2
c0003db7:	85 d2                	test   edx,edx
c0003db9:	74 27                	je     c0003de2 <f_open+0x2a5>
c0003dbb:	89 f9                	mov    ecx,edi
c0003dbd:	c1 e9 09             	shr    ecx,0x9
c0003dc0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003dc3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003dc6:	6a 01                	push   0x1
c0003dc8:	50                   	push   eax
c0003dc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dcd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003dd1:	50                   	push   eax
c0003dd2:	e8 1d df ff ff       	call   c0001cf4 <disk_read>
c0003dd7:	83 c4 10             	add    esp,0x10
c0003dda:	85 c0                	test   eax,eax
c0003ddc:	0f 95 c0             	setne  al
c0003ddf:	0f b6 c0             	movzx  eax,al
c0003de2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003de6:	83 ec 0c             	sub    esp,0xc
c0003de9:	55                   	push   ebp
c0003dea:	e8 b5 1c 00 00       	call   c0005aa4 <ff_memfree>
c0003def:	83 c4 10             	add    esp,0x10
c0003df2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003df6:	85 c0                	test   eax,eax
c0003df8:	74 06                	je     c0003e00 <f_open+0x2c3>
c0003dfa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003e00:	83 c4 5c             	add    esp,0x5c
c0003e03:	5b                   	pop    ebx
c0003e04:	5e                   	pop    esi
c0003e05:	5f                   	pop    edi
c0003e06:	5d                   	pop    ebp
c0003e07:	c3                   	ret    

c0003e08 <f_read>:
c0003e08:	55                   	push   ebp
c0003e09:	57                   	push   edi
c0003e0a:	56                   	push   esi
c0003e0b:	53                   	push   ebx
c0003e0c:	83 ec 2c             	sub    esp,0x2c
c0003e0f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003e13:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003e17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003e1d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e21:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e25:	89 d8                	mov    eax,ebx
c0003e27:	e8 8f e3 ff ff       	call   c00021bb <validate>
c0003e2c:	89 c5                	mov    ebp,eax
c0003e2e:	85 c0                	test   eax,eax
c0003e30:	0f 85 c7 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e36:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e3a:	85 ed                	test   ebp,ebp
c0003e3c:	0f 85 bb 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e42:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e46:	0f 84 ac 01 00 00    	je     c0003ff8 <f_read+0x1f0>
c0003e4c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e4f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e52:	89 c7                	mov    edi,eax
c0003e54:	39 f0                	cmp    eax,esi
c0003e56:	0f 86 ad 00 00 00    	jbe    c0003f09 <f_read+0x101>
c0003e5c:	89 f7                	mov    edi,esi
c0003e5e:	e9 a6 00 00 00       	jmp    c0003f09 <f_read+0x101>
c0003e63:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e66:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e6c:	0f 85 5b 01 00 00    	jne    c0003fcd <f_read+0x1c5>
c0003e72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e76:	89 d1                	mov    ecx,edx
c0003e78:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e7c:	c1 e9 09             	shr    ecx,0x9
c0003e7f:	48                   	dec    eax
c0003e80:	21 c8                	and    eax,ecx
c0003e82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e86:	0f 84 8a 00 00 00    	je     c0003f16 <f_read+0x10e>
c0003e8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e90:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e93:	89 c8                	mov    eax,ecx
c0003e95:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e99:	e8 e7 e0 ff ff       	call   c0001f85 <clst2sect>
c0003e9e:	85 c0                	test   eax,eax
c0003ea0:	0f 84 88 00 00 00    	je     c0003f2e <f_read+0x126>
c0003ea6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003eaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003eae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003eb2:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003eb8:	0f 86 bd 00 00 00    	jbe    c0003f7b <f_read+0x173>
c0003ebe:	89 fe                	mov    esi,edi
c0003ec0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ec4:	c1 ee 09             	shr    esi,0x9
c0003ec7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ecb:	01 f2                	add    edx,esi
c0003ecd:	39 c2                	cmp    edx,eax
c0003ecf:	76 06                	jbe    c0003ed7 <f_read+0xcf>
c0003ed1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ed5:	89 c6                	mov    esi,eax
c0003ed7:	56                   	push   esi
c0003ed8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003edc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ee0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ee4:	50                   	push   eax
c0003ee5:	e8 0a de ff ff       	call   c0001cf4 <disk_read>
c0003eea:	83 c4 10             	add    esp,0x10
c0003eed:	85 c0                	test   eax,eax
c0003eef:	75 50                	jne    c0003f41 <f_read+0x139>
c0003ef1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ef5:	78 60                	js     c0003f57 <f_read+0x14f>
c0003ef7:	c1 e6 09             	shl    esi,0x9
c0003efa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003efe:	29 f7                	sub    edi,esi
c0003f00:	01 30                	add    DWORD PTR [eax],esi
c0003f02:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003f06:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003f09:	85 ff                	test   edi,edi
c0003f0b:	0f 85 52 ff ff ff    	jne    c0003e63 <f_read+0x5b>
c0003f11:	e9 e7 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f16:	85 d2                	test   edx,edx
c0003f18:	75 05                	jne    c0003f1f <f_read+0x117>
c0003f1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f1d:	eb 0a                	jmp    c0003f29 <f_read+0x121>
c0003f1f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f24:	e8 08 f2 ff ff       	call   c0003131 <get_fat.isra.2>
c0003f29:	83 f8 01             	cmp    eax,0x1
c0003f2c:	77 0e                	ja     c0003f3c <f_read+0x134>
c0003f2e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f32:	bd 02 00 00 00       	mov    ebp,0x2
c0003f37:	e9 c1 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f3c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f3f:	75 0e                	jne    c0003f4f <f_read+0x147>
c0003f41:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f45:	bd 01 00 00 00       	mov    ebp,0x1
c0003f4a:	e9 ae 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f4f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f52:	e9 35 ff ff ff       	jmp    c0003e8c <f_read+0x84>
c0003f57:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f5e:	39 f0                	cmp    eax,esi
c0003f60:	73 95                	jae    c0003ef7 <f_read+0xef>
c0003f62:	c1 e0 09             	shl    eax,0x9
c0003f65:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f68:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f6c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f71:	e8 f5 dd ff ff       	call   c0001d6b <mem_cpy>
c0003f76:	e9 7c ff ff ff       	jmp    c0003ef7 <f_read+0xef>
c0003f7b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f7e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f82:	74 42                	je     c0003fc6 <f_read+0x1be>
c0003f84:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f87:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f8b:	79 19                	jns    c0003fa6 <f_read+0x19e>
c0003f8d:	6a 01                	push   0x1
c0003f8f:	50                   	push   eax
c0003f90:	56                   	push   esi
c0003f91:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 6f dd ff ff       	call   c0001d0a <disk_write>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	75 9f                	jne    c0003f41 <f_read+0x139>
c0003fa2:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003fa6:	6a 01                	push   0x1
c0003fa8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003fac:	56                   	push   esi
c0003fad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003fb1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003fb5:	50                   	push   eax
c0003fb6:	e8 39 dd ff ff       	call   c0001cf4 <disk_read>
c0003fbb:	83 c4 10             	add    esp,0x10
c0003fbe:	85 c0                	test   eax,eax
c0003fc0:	0f 85 7b ff ff ff    	jne    c0003f41 <f_read+0x139>
c0003fc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003fca:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fcd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fd0:	ba 00 02 00 00       	mov    edx,0x200
c0003fd5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fda:	89 fe                	mov    esi,edi
c0003fdc:	29 c2                	sub    edx,eax
c0003fde:	39 d7                	cmp    edi,edx
c0003fe0:	76 02                	jbe    c0003fe4 <f_read+0x1dc>
c0003fe2:	89 d6                	mov    esi,edx
c0003fe4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fe8:	89 f1                	mov    ecx,esi
c0003fea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fee:	e8 78 dd ff ff       	call   c0001d6b <mem_cpy>
c0003ff3:	e9 02 ff ff ff       	jmp    c0003efa <f_read+0xf2>
c0003ff8:	bd 07 00 00 00       	mov    ebp,0x7
c0003ffd:	83 c4 2c             	add    esp,0x2c
c0004000:	89 e8                	mov    eax,ebp
c0004002:	5b                   	pop    ebx
c0004003:	5e                   	pop    esi
c0004004:	5f                   	pop    edi
c0004005:	5d                   	pop    ebp
c0004006:	c3                   	ret    

c0004007 <f_write>:
c0004007:	55                   	push   ebp
c0004008:	57                   	push   edi
c0004009:	56                   	push   esi
c000400a:	53                   	push   ebx
c000400b:	83 ec 2c             	sub    esp,0x2c
c000400e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004012:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004016:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000401c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004020:	89 d8                	mov    eax,ebx
c0004022:	e8 94 e1 ff ff       	call   c00021bb <validate>
c0004027:	89 c5                	mov    ebp,eax
c0004029:	85 c0                	test   eax,eax
c000402b:	0f 85 00 02 00 00    	jne    c0004231 <f_write+0x22a>
c0004031:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004035:	85 ed                	test   ebp,ebp
c0004037:	0f 85 f4 01 00 00    	jne    c0004231 <f_write+0x22a>
c000403d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004041:	0f 84 e5 01 00 00    	je     c000422c <f_write+0x225>
c0004047:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000404a:	89 c7                	mov    edi,eax
c000404c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004050:	0f 83 ea 00 00 00    	jae    c0004140 <f_write+0x139>
c0004056:	f7 d0                	not    eax
c0004058:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000405c:	e9 df 00 00 00       	jmp    c0004140 <f_write+0x139>
c0004061:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004064:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000406a:	0f 85 8b 01 00 00    	jne    c00041fb <f_write+0x1f4>
c0004070:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004074:	89 d1                	mov    ecx,edx
c0004076:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000407a:	c1 e9 09             	shr    ecx,0x9
c000407d:	48                   	dec    eax
c000407e:	21 c8                	and    eax,ecx
c0004080:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004084:	0f 84 c3 00 00 00    	je     c000414d <f_write+0x146>
c000408a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000408e:	0f 88 18 01 00 00    	js     c00041ac <f_write+0x1a5>
c0004094:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004098:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000409b:	89 c8                	mov    eax,ecx
c000409d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00040a1:	e8 df de ff ff       	call   c0001f85 <clst2sect>
c00040a6:	85 c0                	test   eax,eax
c00040a8:	0f 84 c8 00 00 00    	je     c0004176 <f_write+0x16f>
c00040ae:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00040b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00040b6:	01 c7                	add    edi,eax
c00040b8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040c0:	0f 86 0d 01 00 00    	jbe    c00041d3 <f_write+0x1cc>
c00040c6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040ca:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ce:	c1 ee 09             	shr    esi,0x9
c00040d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040d5:	01 f2                	add    edx,esi
c00040d7:	39 c2                	cmp    edx,eax
c00040d9:	76 06                	jbe    c00040e1 <f_write+0xda>
c00040db:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040df:	89 c6                	mov    esi,eax
c00040e1:	56                   	push   esi
c00040e2:	57                   	push   edi
c00040e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040eb:	50                   	push   eax
c00040ec:	e8 19 dc ff ff       	call   c0001d0a <disk_write>
c00040f1:	83 c4 10             	add    esp,0x10
c00040f4:	85 c0                	test   eax,eax
c00040f6:	0f 85 8d 00 00 00    	jne    c0004189 <f_write+0x182>
c00040fc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040ff:	29 fa                	sub    edx,edi
c0004101:	39 f2                	cmp    edx,esi
c0004103:	73 18                	jae    c000411d <f_write+0x116>
c0004105:	c1 e2 09             	shl    edx,0x9
c0004108:	8d 43 28             	lea    eax,[ebx+0x28]
c000410b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000410f:	b9 00 02 00 00       	mov    ecx,0x200
c0004114:	e8 52 dc ff ff       	call   c0001d6b <mem_cpy>
c0004119:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000411d:	c1 e6 09             	shl    esi,0x9
c0004120:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004124:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004128:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000412c:	01 30                	add    DWORD PTR [eax],esi
c000412e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004131:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004134:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004137:	39 f0                	cmp    eax,esi
c0004139:	73 02                	jae    c000413d <f_write+0x136>
c000413b:	89 f0                	mov    eax,esi
c000413d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004140:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004145:	0f 85 16 ff ff ff    	jne    c0004061 <f_write+0x5a>
c000414b:	eb 1b                	jmp    c0004168 <f_write+0x161>
c000414d:	85 d2                	test   edx,edx
c000414f:	75 09                	jne    c000415a <f_write+0x153>
c0004151:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004154:	85 c0                	test   eax,eax
c0004156:	75 19                	jne    c0004171 <f_write+0x16a>
c0004158:	eb 03                	jmp    c000415d <f_write+0x156>
c000415a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 97 f1 ff ff       	call   c00032fb <create_chain>
c0004164:	85 c0                	test   eax,eax
c0004166:	75 09                	jne    c0004171 <f_write+0x16a>
c0004168:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000416c:	e9 c0 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004171:	83 f8 01             	cmp    eax,0x1
c0004174:	75 0e                	jne    c0004184 <f_write+0x17d>
c0004176:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000417a:	bd 02 00 00 00       	mov    ebp,0x2
c000417f:	e9 ad 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004184:	83 f8 ff             	cmp    eax,0xffffffff
c0004187:	75 0e                	jne    c0004197 <f_write+0x190>
c0004189:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000418d:	bd 01 00 00 00       	mov    ebp,0x1
c0004192:	e9 9a 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004197:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000419a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000419e:	0f 85 e6 fe ff ff    	jne    c000408a <f_write+0x83>
c00041a4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041a7:	e9 de fe ff ff       	jmp    c000408a <f_write+0x83>
c00041ac:	6a 01                	push   0x1
c00041ae:	8d 43 28             	lea    eax,[ebx+0x28]
c00041b1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00041b4:	50                   	push   eax
c00041b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00041b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00041bd:	50                   	push   eax
c00041be:	e8 47 db ff ff       	call   c0001d0a <disk_write>
c00041c3:	83 c4 10             	add    esp,0x10
c00041c6:	85 c0                	test   eax,eax
c00041c8:	75 bf                	jne    c0004189 <f_write+0x182>
c00041ca:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ce:	e9 c1 fe ff ff       	jmp    c0004094 <f_write+0x8d>
c00041d3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041d6:	74 20                	je     c00041f8 <f_write+0x1f1>
c00041d8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041db:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041de:	76 18                	jbe    c00041f8 <f_write+0x1f1>
c00041e0:	6a 01                	push   0x1
c00041e2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041e5:	57                   	push   edi
c00041e6:	50                   	push   eax
c00041e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041eb:	50                   	push   eax
c00041ec:	e8 03 db ff ff       	call   c0001cf4 <disk_read>
c00041f1:	83 c4 10             	add    esp,0x10
c00041f4:	85 c0                	test   eax,eax
c00041f6:	75 91                	jne    c0004189 <f_write+0x182>
c00041f8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041fb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041fe:	ba 00 02 00 00       	mov    edx,0x200
c0004203:	25 ff 01 00 00       	and    eax,0x1ff
c0004208:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000420c:	29 c2                	sub    edx,eax
c000420e:	39 d6                	cmp    esi,edx
c0004210:	76 02                	jbe    c0004214 <f_write+0x20d>
c0004212:	89 d6                	mov    esi,edx
c0004214:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004218:	89 f1                	mov    ecx,esi
c000421a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000421e:	e8 48 db ff ff       	call   c0001d6b <mem_cpy>
c0004223:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004227:	e9 f4 fe ff ff       	jmp    c0004120 <f_write+0x119>
c000422c:	bd 07 00 00 00       	mov    ebp,0x7
c0004231:	83 c4 2c             	add    esp,0x2c
c0004234:	89 e8                	mov    eax,ebp
c0004236:	5b                   	pop    ebx
c0004237:	5e                   	pop    esi
c0004238:	5f                   	pop    edi
c0004239:	5d                   	pop    ebp
c000423a:	c3                   	ret    

c000423b <f_sync>:
c000423b:	56                   	push   esi
c000423c:	53                   	push   ebx
c000423d:	83 ec 14             	sub    esp,0x14
c0004240:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004244:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004248:	89 d8                	mov    eax,ebx
c000424a:	e8 6c df ff ff       	call   c00021bb <validate>
c000424f:	85 c0                	test   eax,eax
c0004251:	0f 85 93 00 00 00    	jne    c00042ea <f_sync+0xaf>
c0004257:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000425a:	f6 c2 40             	test   dl,0x40
c000425d:	0f 84 87 00 00 00    	je     c00042ea <f_sync+0xaf>
c0004263:	84 d2                	test   dl,dl
c0004265:	79 29                	jns    c0004290 <f_sync+0x55>
c0004267:	6a 01                	push   0x1
c0004269:	8d 43 28             	lea    eax,[ebx+0x28]
c000426c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000426f:	50                   	push   eax
c0004270:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004274:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004278:	50                   	push   eax
c0004279:	e8 8c da ff ff       	call   c0001d0a <disk_write>
c000427e:	83 c4 10             	add    esp,0x10
c0004281:	89 c2                	mov    edx,eax
c0004283:	b8 01 00 00 00       	mov    eax,0x1
c0004288:	85 d2                	test   edx,edx
c000428a:	75 5e                	jne    c00042ea <f_sync+0xaf>
c000428c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004290:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004297:	e8 c9 df ff ff       	call   c0002265 <move_window>
c000429c:	85 c0                	test   eax,eax
c000429e:	75 4a                	jne    c00042ea <f_sync+0xaf>
c00042a0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00042a3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00042a7:	89 f2                	mov    edx,esi
c00042a9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00042ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00042ae:	e8 56 ee ff ff       	call   c0003109 <st_clust.isra.1>
c00042b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042b6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00042b9:	e8 aa da ff ff       	call   c0001d68 <st_dword>
c00042be:	8d 46 16             	lea    eax,[esi+0x16]
c00042c1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042c6:	e8 9d da ff ff       	call   c0001d68 <st_dword>
c00042cb:	8d 46 12             	lea    eax,[esi+0x12]
c00042ce:	31 d2                	xor    edx,edx
c00042d0:	e8 8f da ff ff       	call   c0001d64 <st_word>
c00042d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042e1:	e8 bf e9 ff ff       	call   c0002ca5 <sync_fs>
c00042e6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ea:	83 c4 14             	add    esp,0x14
c00042ed:	5b                   	pop    ebx
c00042ee:	5e                   	pop    esi
c00042ef:	c3                   	ret    

c00042f0 <f_close>:
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 24             	sub    esp,0x24
c00042f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042f8:	53                   	push   ebx
c00042f9:	e8 3d ff ff ff       	call   c000423b <f_sync>
c00042fe:	83 c4 10             	add    esp,0x10
c0004301:	85 c0                	test   eax,eax
c0004303:	75 15                	jne    c000431a <f_close+0x2a>
c0004305:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004309:	89 d8                	mov    eax,ebx
c000430b:	e8 ab de ff ff       	call   c00021bb <validate>
c0004310:	85 c0                	test   eax,eax
c0004312:	75 06                	jne    c000431a <f_close+0x2a>
c0004314:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000431a:	83 c4 18             	add    esp,0x18
c000431d:	5b                   	pop    ebx
c000431e:	c3                   	ret    

c000431f <f_lseek>:
c000431f:	55                   	push   ebp
c0004320:	57                   	push   edi
c0004321:	56                   	push   esi
c0004322:	53                   	push   ebx
c0004323:	83 ec 2c             	sub    esp,0x2c
c0004326:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000432a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000432e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004332:	89 d8                	mov    eax,ebx
c0004334:	e8 82 de ff ff       	call   c00021bb <validate>
c0004339:	89 c5                	mov    ebp,eax
c000433b:	85 c0                	test   eax,eax
c000433d:	0f 85 79 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c0004343:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004347:	85 ed                	test   ebp,ebp
c0004349:	0f 85 6d 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c000434f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004352:	39 f0                	cmp    eax,esi
c0004354:	73 08                	jae    c000435e <f_lseek+0x3f>
c0004356:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435a:	75 02                	jne    c000435e <f_lseek+0x3f>
c000435c:	89 c6                	mov    esi,eax
c000435e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004361:	85 f6                	test   esi,esi
c0004363:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000436a:	75 07                	jne    c0004373 <f_lseek+0x54>
c000436c:	31 f6                	xor    esi,esi
c000436e:	e9 e2 00 00 00       	jmp    c0004455 <f_lseek+0x136>
c0004373:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004377:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000437b:	c1 e7 09             	shl    edi,0x9
c000437e:	85 c9                	test   ecx,ecx
c0004380:	74 28                	je     c00043aa <f_lseek+0x8b>
c0004382:	49                   	dec    ecx
c0004383:	31 d2                	xor    edx,edx
c0004385:	8d 46 ff             	lea    eax,[esi-0x1]
c0004388:	f7 f7                	div    edi
c000438a:	31 d2                	xor    edx,edx
c000438c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004390:	89 c8                	mov    eax,ecx
c0004392:	f7 f7                	div    edi
c0004394:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004398:	72 10                	jb     c00043aa <f_lseek+0x8b>
c000439a:	89 f8                	mov    eax,edi
c000439c:	f7 d8                	neg    eax
c000439e:	21 c1                	and    ecx,eax
c00043a0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00043a3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00043a6:	29 ce                	sub    esi,ecx
c00043a8:	eb 3c                	jmp    c00043e6 <f_lseek+0xc7>
c00043aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00043ad:	85 c0                	test   eax,eax
c00043af:	75 32                	jne    c00043e3 <f_lseek+0xc4>
c00043b1:	31 d2                	xor    edx,edx
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 41 ef ff ff       	call   c00032fb <create_chain>
c00043ba:	83 f8 01             	cmp    eax,0x1
c00043bd:	75 0e                	jne    c00043cd <f_lseek+0xae>
c00043bf:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043c3:	bd 02 00 00 00       	mov    ebp,0x2
c00043c8:	e9 ef 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043cd:	83 f8 ff             	cmp    eax,0xffffffff
c00043d0:	75 0e                	jne    c00043e0 <f_lseek+0xc1>
c00043d2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043d6:	bd 01 00 00 00       	mov    ebp,0x1
c00043db:	e9 dc 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043e0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043e3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043e6:	85 c0                	test   eax,eax
c00043e8:	74 82                	je     c000436c <f_lseek+0x4d>
c00043ea:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043ed:	39 fe                	cmp    esi,edi
c00043ef:	76 3d                	jbe    c000442e <f_lseek+0x10f>
c00043f1:	01 fa                	add    edx,edi
c00043f3:	29 fe                	sub    esi,edi
c00043f5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043f8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043fc:	89 c2                	mov    edx,eax
c00043fe:	74 0d                	je     c000440d <f_lseek+0xee>
c0004400:	89 d8                	mov    eax,ebx
c0004402:	e8 f4 ee ff ff       	call   c00032fb <create_chain>
c0004407:	85 c0                	test   eax,eax
c0004409:	75 09                	jne    c0004414 <f_lseek+0xf5>
c000440b:	eb 1f                	jmp    c000442c <f_lseek+0x10d>
c000440d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000440f:	e8 1d ed ff ff       	call   c0003131 <get_fat.isra.2>
c0004414:	83 f8 ff             	cmp    eax,0xffffffff
c0004417:	74 b9                	je     c00043d2 <f_lseek+0xb3>
c0004419:	83 f8 01             	cmp    eax,0x1
c000441c:	76 a1                	jbe    c00043bf <f_lseek+0xa0>
c000441e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004422:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004425:	76 98                	jbe    c00043bf <f_lseek+0xa0>
c0004427:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000442a:	eb be                	jmp    c00043ea <f_lseek+0xcb>
c000442c:	31 f6                	xor    esi,esi
c000442e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004431:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004437:	0f 84 2f ff ff ff    	je     c000436c <f_lseek+0x4d>
c000443d:	89 c2                	mov    edx,eax
c000443f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004443:	e8 3d db ff ff       	call   c0001f85 <clst2sect>
c0004448:	85 c0                	test   eax,eax
c000444a:	0f 84 6f ff ff ff    	je     c00043bf <f_lseek+0xa0>
c0004450:	c1 ee 09             	shr    esi,0x9
c0004453:	01 c6                	add    esi,eax
c0004455:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004458:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000445b:	76 07                	jbe    c0004464 <f_lseek+0x145>
c000445d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004460:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004464:	a9 ff 01 00 00       	test   eax,0x1ff
c0004469:	74 51                	je     c00044bc <f_lseek+0x19d>
c000446b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000446e:	39 f0                	cmp    eax,esi
c0004470:	74 4a                	je     c00044bc <f_lseek+0x19d>
c0004472:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004475:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004479:	79 21                	jns    c000449c <f_lseek+0x17d>
c000447b:	6a 01                	push   0x1
c000447d:	50                   	push   eax
c000447e:	57                   	push   edi
c000447f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004483:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004487:	50                   	push   eax
c0004488:	e8 7d d8 ff ff       	call   c0001d0a <disk_write>
c000448d:	83 c4 10             	add    esp,0x10
c0004490:	85 c0                	test   eax,eax
c0004492:	0f 85 3a ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c0004498:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000449c:	6a 01                	push   0x1
c000449e:	56                   	push   esi
c000449f:	57                   	push   edi
c00044a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044a4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044a8:	50                   	push   eax
c00044a9:	e8 46 d8 ff ff       	call   c0001cf4 <disk_read>
c00044ae:	83 c4 10             	add    esp,0x10
c00044b1:	85 c0                	test   eax,eax
c00044b3:	0f 85 19 ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c00044b9:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00044bc:	83 c4 2c             	add    esp,0x2c
c00044bf:	89 e8                	mov    eax,ebp
c00044c1:	5b                   	pop    ebx
c00044c2:	5e                   	pop    esi
c00044c3:	5f                   	pop    edi
c00044c4:	5d                   	pop    ebp
c00044c5:	c3                   	ret    

c00044c6 <f_opendir>:
c00044c6:	56                   	push   esi
c00044c7:	b8 09 00 00 00       	mov    eax,0x9
c00044cc:	53                   	push   ebx
c00044cd:	83 ec 24             	sub    esp,0x24
c00044d0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044d4:	85 db                	test   ebx,ebx
c00044d6:	0f 84 af 00 00 00    	je     c000458b <f_opendir+0xc5>
c00044dc:	31 c9                	xor    ecx,ecx
c00044de:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044e2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044e6:	e8 cd de ff ff       	call   c00023b8 <mount_volume>
c00044eb:	85 c0                	test   eax,eax
c00044ed:	0f 85 92 00 00 00    	jne    c0004585 <f_opendir+0xbf>
c00044f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f7:	83 ec 0c             	sub    esp,0xc
c00044fa:	89 03                	mov    DWORD PTR [ebx],eax
c00044fc:	68 00 02 00 00       	push   0x200
c0004501:	e8 86 15 00 00       	call   c0005a8c <ff_memalloc>
c0004506:	83 c4 10             	add    esp,0x10
c0004509:	89 c6                	mov    esi,eax
c000450b:	b8 11 00 00 00       	mov    eax,0x11
c0004510:	85 f6                	test   esi,esi
c0004512:	74 77                	je     c000458b <f_opendir+0xc5>
c0004514:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004518:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000451c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000451f:	89 d8                	mov    eax,ebx
c0004521:	e8 9c f3 ff ff       	call   c00038c2 <follow_path>
c0004526:	85 c0                	test   eax,eax
c0004528:	75 37                	jne    c0004561 <f_opendir+0x9b>
c000452a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000452e:	78 1c                	js     c000454c <f_opendir+0x86>
c0004530:	b8 05 00 00 00       	mov    eax,0x5
c0004535:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004539:	74 26                	je     c0004561 <f_opendir+0x9b>
c000453b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000453e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004542:	8a 00                	mov    al,BYTE PTR [eax]
c0004544:	e8 97 eb ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004549:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000454c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004550:	31 d2                	xor    edx,edx
c0004552:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004556:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 d2 ec ff ff       	call   c0003233 <dir_sdi>
c0004561:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004565:	83 ec 0c             	sub    esp,0xc
c0004568:	56                   	push   esi
c0004569:	e8 36 15 00 00       	call   c0005aa4 <ff_memfree>
c000456e:	83 c4 10             	add    esp,0x10
c0004571:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004575:	83 f8 04             	cmp    eax,0x4
c0004578:	74 06                	je     c0004580 <f_opendir+0xba>
c000457a:	85 c0                	test   eax,eax
c000457c:	74 0d                	je     c000458b <f_opendir+0xc5>
c000457e:	eb 05                	jmp    c0004585 <f_opendir+0xbf>
c0004580:	b8 05 00 00 00       	mov    eax,0x5
c0004585:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458b:	83 c4 24             	add    esp,0x24
c000458e:	5b                   	pop    ebx
c000458f:	5e                   	pop    esi
c0004590:	c3                   	ret    

c0004591 <f_closedir>:
c0004591:	53                   	push   ebx
c0004592:	83 ec 18             	sub    esp,0x18
c0004595:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004599:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000459d:	89 d8                	mov    eax,ebx
c000459f:	e8 17 dc ff ff       	call   c00021bb <validate>
c00045a4:	85 c0                	test   eax,eax
c00045a6:	75 06                	jne    c00045ae <f_closedir+0x1d>
c00045a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00045ae:	83 c4 18             	add    esp,0x18
c00045b1:	5b                   	pop    ebx
c00045b2:	c3                   	ret    

c00045b3 <f_readdir>:
c00045b3:	57                   	push   edi
c00045b4:	56                   	push   esi
c00045b5:	53                   	push   ebx
c00045b6:	83 ec 20             	sub    esp,0x20
c00045b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00045bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045c5:	89 d8                	mov    eax,ebx
c00045c7:	e8 ef db ff ff       	call   c00021bb <validate>
c00045cc:	85 c0                	test   eax,eax
c00045ce:	75 6e                	jne    c000463e <f_readdir+0x8b>
c00045d0:	85 ff                	test   edi,edi
c00045d2:	75 0b                	jne    c00045df <f_readdir+0x2c>
c00045d4:	31 d2                	xor    edx,edx
c00045d6:	89 d8                	mov    eax,ebx
c00045d8:	e8 56 ec ff ff       	call   c0003233 <dir_sdi>
c00045dd:	eb 5f                	jmp    c000463e <f_readdir+0x8b>
c00045df:	83 ec 0c             	sub    esp,0xc
c00045e2:	68 00 02 00 00       	push   0x200
c00045e7:	e8 a0 14 00 00       	call   c0005a8c <ff_memalloc>
c00045ec:	83 c4 10             	add    esp,0x10
c00045ef:	89 c6                	mov    esi,eax
c00045f1:	b8 11 00 00 00       	mov    eax,0x11
c00045f6:	85 f6                	test   esi,esi
c00045f8:	74 44                	je     c000463e <f_readdir+0x8b>
c00045fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045fe:	31 d2                	xor    edx,edx
c0004600:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004603:	89 d8                	mov    eax,ebx
c0004605:	e8 1a f0 ff ff       	call   c0003624 <dir_read>
c000460a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000460f:	75 19                	jne    c000462a <f_readdir+0x77>
c0004611:	89 fa                	mov    edx,edi
c0004613:	89 d8                	mov    eax,ebx
c0004615:	e8 e2 e8 ff ff       	call   c0002efc <get_fileinfo>
c000461a:	31 d2                	xor    edx,edx
c000461c:	89 d8                	mov    eax,ebx
c000461e:	e8 9b ee ff ff       	call   c00034be <dir_next>
c0004623:	83 f8 04             	cmp    eax,0x4
c0004626:	75 02                	jne    c000462a <f_readdir+0x77>
c0004628:	31 c0                	xor    eax,eax
c000462a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000462e:	83 ec 0c             	sub    esp,0xc
c0004631:	56                   	push   esi
c0004632:	e8 6d 14 00 00       	call   c0005aa4 <ff_memfree>
c0004637:	83 c4 10             	add    esp,0x10
c000463a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000463e:	83 c4 20             	add    esp,0x20
c0004641:	5b                   	pop    ebx
c0004642:	5e                   	pop    esi
c0004643:	5f                   	pop    edi
c0004644:	c3                   	ret    

c0004645 <f_stat>:
c0004645:	57                   	push   edi
c0004646:	31 c9                	xor    ecx,ecx
c0004648:	56                   	push   esi
c0004649:	53                   	push   ebx
c000464a:	83 ec 30             	sub    esp,0x30
c000464d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004651:	89 e2                	mov    edx,esp
c0004653:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004657:	e8 5c dd ff ff       	call   c00023b8 <mount_volume>
c000465c:	89 c3                	mov    ebx,eax
c000465e:	85 c0                	test   eax,eax
c0004660:	75 59                	jne    c00046bb <f_stat+0x76>
c0004662:	83 ec 0c             	sub    esp,0xc
c0004665:	bb 11 00 00 00       	mov    ebx,0x11
c000466a:	68 00 02 00 00       	push   0x200
c000466f:	e8 18 14 00 00       	call   c0005a8c <ff_memalloc>
c0004674:	83 c4 10             	add    esp,0x10
c0004677:	89 c6                	mov    esi,eax
c0004679:	85 c0                	test   eax,eax
c000467b:	74 3e                	je     c00046bb <f_stat+0x76>
c000467d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004680:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004684:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004687:	89 e0                	mov    eax,esp
c0004689:	e8 34 f2 ff ff       	call   c00038c2 <follow_path>
c000468e:	89 c3                	mov    ebx,eax
c0004690:	85 c0                	test   eax,eax
c0004692:	75 1b                	jne    c00046af <f_stat+0x6a>
c0004694:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004699:	78 0f                	js     c00046aa <f_stat+0x65>
c000469b:	85 ff                	test   edi,edi
c000469d:	74 10                	je     c00046af <f_stat+0x6a>
c000469f:	89 fa                	mov    edx,edi
c00046a1:	89 e0                	mov    eax,esp
c00046a3:	e8 54 e8 ff ff       	call   c0002efc <get_fileinfo>
c00046a8:	eb 05                	jmp    c00046af <f_stat+0x6a>
c00046aa:	bb 06 00 00 00       	mov    ebx,0x6
c00046af:	83 ec 0c             	sub    esp,0xc
c00046b2:	56                   	push   esi
c00046b3:	e8 ec 13 00 00       	call   c0005aa4 <ff_memfree>
c00046b8:	83 c4 10             	add    esp,0x10
c00046bb:	83 c4 30             	add    esp,0x30
c00046be:	89 d8                	mov    eax,ebx
c00046c0:	5b                   	pop    ebx
c00046c1:	5e                   	pop    esi
c00046c2:	5f                   	pop    edi
c00046c3:	c3                   	ret    

c00046c4 <f_getfree>:
c00046c4:	55                   	push   ebp
c00046c5:	31 c9                	xor    ecx,ecx
c00046c7:	57                   	push   edi
c00046c8:	56                   	push   esi
c00046c9:	53                   	push   ebx
c00046ca:	83 ec 2c             	sub    esp,0x2c
c00046cd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046d1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046d5:	e8 de dc ff ff       	call   c00023b8 <mount_volume>
c00046da:	89 c7                	mov    edi,eax
c00046dc:	85 c0                	test   eax,eax
c00046de:	0f 85 d8 00 00 00    	jne    c00047bc <f_getfree+0xf8>
c00046e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046e8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046ec:	89 30                	mov    DWORD PTR [eax],esi
c00046ee:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046f1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046f4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046f7:	39 d0                	cmp    eax,edx
c00046f9:	77 0b                	ja     c0004706 <f_getfree+0x42>
c00046fb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046ff:	89 01                	mov    DWORD PTR [ecx],eax
c0004701:	e9 b6 00 00 00       	jmp    c00047bc <f_getfree+0xf8>
c0004706:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004709:	75 29                	jne    c0004734 <f_getfree+0x70>
c000470b:	bd 02 00 00 00       	mov    ebp,0x2
c0004710:	31 db                	xor    ebx,ebx
c0004712:	89 ea                	mov    edx,ebp
c0004714:	89 f0                	mov    eax,esi
c0004716:	e8 16 ea ff ff       	call   c0003131 <get_fat.isra.2>
c000471b:	83 f8 ff             	cmp    eax,0xffffffff
c000471e:	74 7b                	je     c000479b <f_getfree+0xd7>
c0004720:	83 f8 01             	cmp    eax,0x1
c0004723:	74 7d                	je     c00047a2 <f_getfree+0xde>
c0004725:	83 d3 00             	adc    ebx,0x0
c0004728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472c:	45                   	inc    ebp
c000472d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004730:	77 e0                	ja     c0004712 <f_getfree+0x4e>
c0004732:	eb 77                	jmp    c00047ab <f_getfree+0xe7>
c0004734:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004737:	31 db                	xor    ebx,ebx
c0004739:	31 f6                	xor    esi,esi
c000473b:	85 f6                	test   esi,esi
c000473d:	75 18                	jne    c0004757 <f_getfree+0x93>
c000473f:	8d 42 01             	lea    eax,[edx+0x1]
c0004742:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000474a:	e8 16 db ff ff       	call   c0002265 <move_window>
c000474f:	85 c0                	test   eax,eax
c0004751:	75 56                	jne    c00047a9 <f_getfree+0xe5>
c0004753:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004757:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000475b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000475f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004763:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004766:	75 11                	jne    c0004779 <f_getfree+0xb5>
c0004768:	e8 d2 d5 ff ff       	call   c0001d3f <ld_word>
c000476d:	66 83 f8 01          	cmp    ax,0x1
c0004771:	83 d3 00             	adc    ebx,0x0
c0004774:	83 c6 02             	add    esi,0x2
c0004777:	eb 13                	jmp    c000478c <f_getfree+0xc8>
c0004779:	e8 ce d5 ff ff       	call   c0001d4c <ld_dword>
c000477e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004783:	83 f8 01             	cmp    eax,0x1
c0004786:	83 d3 00             	adc    ebx,0x0
c0004789:	83 c6 04             	add    esi,0x4
c000478c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004796:	4d                   	dec    ebp
c0004797:	75 a2                	jne    c000473b <f_getfree+0x77>
c0004799:	eb 10                	jmp    c00047ab <f_getfree+0xe7>
c000479b:	bf 01 00 00 00       	mov    edi,0x1
c00047a0:	eb 09                	jmp    c00047ab <f_getfree+0xe7>
c00047a2:	bf 02 00 00 00       	mov    edi,0x2
c00047a7:	eb 02                	jmp    c00047ab <f_getfree+0xe7>
c00047a9:	89 c7                	mov    edi,eax
c00047ab:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00047af:	89 18                	mov    DWORD PTR [eax],ebx
c00047b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047b5:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00047b8:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00047bc:	83 c4 2c             	add    esp,0x2c
c00047bf:	89 f8                	mov    eax,edi
c00047c1:	5b                   	pop    ebx
c00047c2:	5e                   	pop    esi
c00047c3:	5f                   	pop    edi
c00047c4:	5d                   	pop    ebp
c00047c5:	c3                   	ret    

c00047c6 <f_truncate>:
c00047c6:	56                   	push   esi
c00047c7:	53                   	push   ebx
c00047c8:	83 ec 14             	sub    esp,0x14
c00047cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047cf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047d3:	89 d8                	mov    eax,ebx
c00047d5:	e8 e1 d9 ff ff       	call   c00021bb <validate>
c00047da:	89 c6                	mov    esi,eax
c00047dc:	85 c0                	test   eax,eax
c00047de:	0f 85 be 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047e4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047e8:	85 f6                	test   esi,esi
c00047ea:	0f 85 b2 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047f0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047f4:	0f 84 a3 00 00 00    	je     c000489d <f_truncate+0xd7>
c00047fa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047fd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004800:	0f 83 9c 00 00 00    	jae    c00048a2 <f_truncate+0xdc>
c0004806:	85 c0                	test   eax,eax
c0004808:	75 15                	jne    c000481f <f_truncate+0x59>
c000480a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000480d:	31 c9                	xor    ecx,ecx
c000480f:	89 d8                	mov    eax,ebx
c0004811:	e8 1f ec ff ff       	call   c0003435 <remove_chain>
c0004816:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000481d:	eb 35                	jmp    c0004854 <f_truncate+0x8e>
c000481f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004822:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004824:	e8 08 e9 ff ff       	call   c0003131 <get_fat.isra.2>
c0004829:	89 c2                	mov    edx,eax
c000482b:	b8 01 00 00 00       	mov    eax,0x1
c0004830:	83 fa ff             	cmp    edx,0xffffffff
c0004833:	74 1f                	je     c0004854 <f_truncate+0x8e>
c0004835:	b8 02 00 00 00       	mov    eax,0x2
c000483a:	83 fa 01             	cmp    edx,0x1
c000483d:	74 15                	je     c0004854 <f_truncate+0x8e>
c000483f:	31 c0                	xor    eax,eax
c0004841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004845:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004848:	76 0a                	jbe    c0004854 <f_truncate+0x8e>
c000484a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000484d:	89 d8                	mov    eax,ebx
c000484f:	e8 e1 eb ff ff       	call   c0003435 <remove_chain>
c0004854:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004857:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000485a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000485d:	83 ca 40             	or     edx,0x40
c0004860:	85 c0                	test   eax,eax
c0004862:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004865:	75 2f                	jne    c0004896 <f_truncate+0xd0>
c0004867:	84 d2                	test   dl,dl
c0004869:	79 37                	jns    c00048a2 <f_truncate+0xdc>
c000486b:	6a 01                	push   0x1
c000486d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004870:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004873:	50                   	push   eax
c0004874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004878:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000487c:	50                   	push   eax
c000487d:	e8 88 d4 ff ff       	call   c0001d0a <disk_write>
c0004882:	83 c4 10             	add    esp,0x10
c0004885:	85 c0                	test   eax,eax
c0004887:	75 08                	jne    c0004891 <f_truncate+0xcb>
c0004889:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000488d:	31 f6                	xor    esi,esi
c000488f:	eb 11                	jmp    c00048a2 <f_truncate+0xdc>
c0004891:	b8 01 00 00 00       	mov    eax,0x1
c0004896:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004899:	89 c6                	mov    esi,eax
c000489b:	eb 05                	jmp    c00048a2 <f_truncate+0xdc>
c000489d:	be 07 00 00 00       	mov    esi,0x7
c00048a2:	89 f0                	mov    eax,esi
c00048a4:	83 c4 14             	add    esp,0x14
c00048a7:	5b                   	pop    ebx
c00048a8:	5e                   	pop    esi
c00048a9:	c3                   	ret    

c00048aa <f_unlink>:
c00048aa:	55                   	push   ebp
c00048ab:	b9 02 00 00 00       	mov    ecx,0x2
c00048b0:	57                   	push   edi
c00048b1:	56                   	push   esi
c00048b2:	53                   	push   ebx
c00048b3:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00048b9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048bd:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048c4:	e8 ef da ff ff       	call   c00023b8 <mount_volume>
c00048c9:	85 c0                	test   eax,eax
c00048cb:	0f 85 f0 00 00 00    	jne    c00049c1 <f_unlink+0x117>
c00048d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048d5:	83 ec 0c             	sub    esp,0xc
c00048d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048dc:	68 00 02 00 00       	push   0x200
c00048e1:	e8 a6 11 00 00       	call   c0005a8c <ff_memalloc>
c00048e6:	83 c4 10             	add    esp,0x10
c00048e9:	89 c3                	mov    ebx,eax
c00048eb:	b8 11 00 00 00       	mov    eax,0x11
c00048f0:	85 db                	test   ebx,ebx
c00048f2:	0f 84 c9 00 00 00    	je     c00049c1 <f_unlink+0x117>
c00048f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004903:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004906:	8d 44 24 20          	lea    eax,[esp+0x20]
c000490a:	e8 b3 ef ff ff       	call   c00038c2 <follow_path>
c000490f:	85 c0                	test   eax,eax
c0004911:	0f 85 96 00 00 00    	jne    c00049ad <f_unlink+0x103>
c0004917:	b8 06 00 00 00       	mov    eax,0x6
c000491c:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004921:	0f 88 86 00 00 00    	js     c00049ad <f_unlink+0x103>
c0004927:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000492c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004932:	74 07                	je     c000493b <f_unlink+0x91>
c0004934:	b8 07 00 00 00       	mov    eax,0x7
c0004939:	eb 72                	jmp    c00049ad <f_unlink+0x103>
c000493b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000493f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004943:	8a 07                	mov    al,BYTE PTR [edi]
c0004945:	e8 96 e7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000494a:	83 e5 10             	and    ebp,0x10
c000494d:	89 c6                	mov    esi,eax
c000494f:	75 0f                	jne    c0004960 <f_unlink+0xb6>
c0004951:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004955:	e8 e7 ed ff ff       	call   c0003741 <dir_remove>
c000495a:	85 c0                	test   eax,eax
c000495c:	74 2f                	je     c000498d <f_unlink+0xe3>
c000495e:	eb 4d                	jmp    c00049ad <f_unlink+0x103>
c0004960:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000496a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000496e:	e8 c0 e8 ff ff       	call   c0003233 <dir_sdi>
c0004973:	85 c0                	test   eax,eax
c0004975:	75 36                	jne    c00049ad <f_unlink+0x103>
c0004977:	31 d2                	xor    edx,edx
c0004979:	8d 44 24 50          	lea    eax,[esp+0x50]
c000497d:	e8 a2 ec ff ff       	call   c0003624 <dir_read>
c0004982:	85 c0                	test   eax,eax
c0004984:	74 ae                	je     c0004934 <f_unlink+0x8a>
c0004986:	83 f8 04             	cmp    eax,0x4
c0004989:	75 22                	jne    c00049ad <f_unlink+0x103>
c000498b:	eb c4                	jmp    c0004951 <f_unlink+0xa7>
c000498d:	85 f6                	test   esi,esi
c000498f:	75 0b                	jne    c000499c <f_unlink+0xf2>
c0004991:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004995:	e8 0b e3 ff ff       	call   c0002ca5 <sync_fs>
c000499a:	eb 11                	jmp    c00049ad <f_unlink+0x103>
c000499c:	31 c9                	xor    ecx,ecx
c000499e:	89 f2                	mov    edx,esi
c00049a0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049a4:	e8 8c ea ff ff       	call   c0003435 <remove_chain>
c00049a9:	85 c0                	test   eax,eax
c00049ab:	74 e4                	je     c0004991 <f_unlink+0xe7>
c00049ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049b1:	83 ec 0c             	sub    esp,0xc
c00049b4:	53                   	push   ebx
c00049b5:	e8 ea 10 00 00       	call   c0005aa4 <ff_memfree>
c00049ba:	83 c4 10             	add    esp,0x10
c00049bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049c1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049c7:	5b                   	pop    ebx
c00049c8:	5e                   	pop    esi
c00049c9:	5f                   	pop    edi
c00049ca:	5d                   	pop    ebp
c00049cb:	c3                   	ret    

c00049cc <f_mkdir>:
c00049cc:	57                   	push   edi
c00049cd:	b9 02 00 00 00       	mov    ecx,0x2
c00049d2:	56                   	push   esi
c00049d3:	53                   	push   ebx
c00049d4:	83 ec 50             	sub    esp,0x50
c00049d7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049db:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049df:	e8 d4 d9 ff ff       	call   c00023b8 <mount_volume>
c00049e4:	89 c3                	mov    ebx,eax
c00049e6:	85 c0                	test   eax,eax
c00049e8:	0f 85 70 01 00 00    	jne    c0004b5e <f_mkdir+0x192>
c00049ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f2:	bb 11 00 00 00       	mov    ebx,0x11
c00049f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049fb:	83 ec 0c             	sub    esp,0xc
c00049fe:	68 00 02 00 00       	push   0x200
c0004a03:	e8 84 10 00 00       	call   c0005a8c <ff_memalloc>
c0004a08:	83 c4 10             	add    esp,0x10
c0004a0b:	89 c7                	mov    edi,eax
c0004a0d:	85 c0                	test   eax,eax
c0004a0f:	0f 84 49 01 00 00    	je     c0004b5e <f_mkdir+0x192>
c0004a15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a19:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004a1d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a20:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a24:	e8 99 ee ff ff       	call   c00038c2 <follow_path>
c0004a29:	89 c3                	mov    ebx,eax
c0004a2b:	85 c0                	test   eax,eax
c0004a2d:	74 3e                	je     c0004a6d <f_mkdir+0xa1>
c0004a2f:	83 f8 04             	cmp    eax,0x4
c0004a32:	75 3e                	jne    c0004a72 <f_mkdir+0xa6>
c0004a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a3e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a42:	e8 b4 e8 ff ff       	call   c00032fb <create_chain>
c0004a47:	89 c6                	mov    esi,eax
c0004a49:	85 c0                	test   eax,eax
c0004a4b:	74 0c                	je     c0004a59 <f_mkdir+0x8d>
c0004a4d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a52:	83 f8 01             	cmp    eax,0x1
c0004a55:	74 07                	je     c0004a5e <f_mkdir+0x92>
c0004a57:	eb 2a                	jmp    c0004a83 <f_mkdir+0xb7>
c0004a59:	bb 07 00 00 00       	mov    ebx,0x7
c0004a5e:	31 c9                	xor    ecx,ecx
c0004a60:	89 f2                	mov    edx,esi
c0004a62:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a66:	e8 ca e9 ff ff       	call   c0003435 <remove_chain>
c0004a6b:	eb 05                	jmp    c0004a72 <f_mkdir+0xa6>
c0004a6d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a72:	83 ec 0c             	sub    esp,0xc
c0004a75:	57                   	push   edi
c0004a76:	e8 29 10 00 00       	call   c0005aa4 <ff_memfree>
c0004a7b:	83 c4 10             	add    esp,0x10
c0004a7e:	e9 db 00 00 00       	jmp    c0004b5e <f_mkdir+0x192>
c0004a83:	bb 01 00 00 00       	mov    ebx,0x1
c0004a88:	83 f8 ff             	cmp    eax,0xffffffff
c0004a8b:	74 d1                	je     c0004a5e <f_mkdir+0x92>
c0004a8d:	89 f2                	mov    edx,esi
c0004a8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a93:	e8 73 dd ff ff       	call   c000280b <dir_clear>
c0004a98:	89 c3                	mov    ebx,eax
c0004a9a:	85 c0                	test   eax,eax
c0004a9c:	75 c0                	jne    c0004a5e <f_mkdir+0x92>
c0004a9e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004aa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aa7:	ba 20 00 00 00       	mov    edx,0x20
c0004aac:	83 c0 34             	add    eax,0x34
c0004aaf:	e8 cc d2 ff ff       	call   c0001d80 <mem_set>
c0004ab4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab8:	ba 00 00 21 50       	mov    edx,0x50210000
c0004abd:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004ac1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004ac5:	83 c0 4a             	add    eax,0x4a
c0004ac8:	e8 9b d2 ff ff       	call   c0001d68 <st_dword>
c0004acd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad1:	89 f1                	mov    ecx,esi
c0004ad3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ad6:	e8 2e e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004adb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004adf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ae4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ae7:	83 c0 54             	add    eax,0x54
c0004aea:	e8 7c d2 ff ff       	call   c0001d6b <mem_cpy>
c0004aef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004af3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004af7:	8d 50 54             	lea    edx,[eax+0x54]
c0004afa:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004afe:	e8 06 e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b07:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b0b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b0f:	e8 42 ee ff ff       	call   c0003956 <dir_register>
c0004b14:	89 c3                	mov    ebx,eax
c0004b16:	85 c0                	test   eax,eax
c0004b18:	0f 85 40 ff ff ff    	jne    c0004a5e <f_mkdir+0x92>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b27:	83 c0 16             	add    eax,0x16
c0004b2a:	e8 39 d2 ff ff       	call   c0001d68 <st_dword>
c0004b2f:	89 f1                	mov    ecx,esi
c0004b31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b39:	e8 cb e5 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b3e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b42:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b4a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b52:	e8 4e e1 ff ff       	call   c0002ca5 <sync_fs>
c0004b57:	89 c3                	mov    ebx,eax
c0004b59:	e9 14 ff ff ff       	jmp    c0004a72 <f_mkdir+0xa6>
c0004b5e:	83 c4 50             	add    esp,0x50
c0004b61:	89 d8                	mov    eax,ebx
c0004b63:	5b                   	pop    ebx
c0004b64:	5e                   	pop    esi
c0004b65:	5f                   	pop    edi
c0004b66:	c3                   	ret    

c0004b67 <f_rename>:
c0004b67:	57                   	push   edi
c0004b68:	56                   	push   esi
c0004b69:	53                   	push   ebx
c0004b6a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b70:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b77:	e8 f2 d5 ff ff       	call   c000216e <get_ldnumber>
c0004b7c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b81:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b85:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b8c:	e8 27 d8 ff ff       	call   c00023b8 <mount_volume>
c0004b91:	85 c0                	test   eax,eax
c0004b93:	0f 85 7a 01 00 00    	jne    c0004d13 <f_rename+0x1ac>
c0004b99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b9d:	83 ec 0c             	sub    esp,0xc
c0004ba0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ba4:	68 00 02 00 00       	push   0x200
c0004ba9:	e8 de 0e 00 00       	call   c0005a8c <ff_memalloc>
c0004bae:	83 c4 10             	add    esp,0x10
c0004bb1:	89 c6                	mov    esi,eax
c0004bb3:	b8 11 00 00 00       	mov    eax,0x11
c0004bb8:	85 f6                	test   esi,esi
c0004bba:	0f 84 53 01 00 00    	je     c0004d13 <f_rename+0x1ac>
c0004bc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bc4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bcb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bce:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bd2:	e8 eb ec ff ff       	call   c00038c2 <follow_path>
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	0f 85 20 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bdf:	b8 06 00 00 00       	mov    eax,0x6
c0004be4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004be9:	0f 85 10 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bef:	b9 20 00 00 00       	mov    ecx,0x20
c0004bf4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bf8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bfc:	e8 6a d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c01:	b9 30 00 00 00       	mov    ecx,0x30
c0004c06:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004c0a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c0e:	e8 58 d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c13:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004c1a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c1e:	e8 9f ec ff ff       	call   c00038c2 <follow_path>
c0004c23:	85 c0                	test   eax,eax
c0004c25:	75 20                	jne    c0004c47 <f_rename+0xe0>
c0004c27:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c2b:	b8 08 00 00 00       	mov    eax,0x8
c0004c30:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c34:	0f 85 c5 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c3a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c3e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c45:	eb 03                	jmp    c0004c4a <f_rename+0xe3>
c0004c47:	83 f8 04             	cmp    eax,0x4
c0004c4a:	0f 85 af 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c50:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c54:	e8 fd ec ff ff       	call   c0003956 <dir_register>
c0004c59:	85 c0                	test   eax,eax
c0004c5b:	0f 85 9e 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c61:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c68:	b9 13 00 00 00       	mov    ecx,0x13
c0004c6d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c70:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c74:	e8 f2 d0 ff ff       	call   c0001d6b <mem_cpy>
c0004c79:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c7d:	a8 10                	test   al,0x10
c0004c7f:	75 03                	jne    c0004c84 <f_rename+0x11d>
c0004c81:	83 c8 20             	or     eax,0x20
c0004c84:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c8b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c8f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c93:	74 54                	je     c0004ce9 <f_rename+0x182>
c0004c95:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c99:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c9d:	74 4a                	je     c0004ce9 <f_rename+0x182>
c0004c9f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ca3:	89 da                	mov    edx,ebx
c0004ca5:	8a 07                	mov    al,BYTE PTR [edi]
c0004ca7:	e8 34 e4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004cac:	89 c2                	mov    edx,eax
c0004cae:	89 f8                	mov    eax,edi
c0004cb0:	e8 d0 d2 ff ff       	call   c0001f85 <clst2sect>
c0004cb5:	89 c2                	mov    edx,eax
c0004cb7:	b8 02 00 00 00       	mov    eax,0x2
c0004cbc:	85 d2                	test   edx,edx
c0004cbe:	74 3f                	je     c0004cff <f_rename+0x198>
c0004cc0:	89 f8                	mov    eax,edi
c0004cc2:	e8 9e d5 ff ff       	call   c0002265 <move_window>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	75 34                	jne    c0004cff <f_rename+0x198>
c0004ccb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ccf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cd3:	75 14                	jne    c0004ce9 <f_rename+0x182>
c0004cd5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cd8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cdc:	e8 28 e4 ff ff       	call   c0003109 <st_clust.isra.1>
c0004ce1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ce5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ce9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ced:	e8 4f ea ff ff       	call   c0003741 <dir_remove>
c0004cf2:	85 c0                	test   eax,eax
c0004cf4:	75 09                	jne    c0004cff <f_rename+0x198>
c0004cf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfa:	e8 a6 df ff ff       	call   c0002ca5 <sync_fs>
c0004cff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d03:	83 ec 0c             	sub    esp,0xc
c0004d06:	56                   	push   esi
c0004d07:	e8 98 0d 00 00       	call   c0005aa4 <ff_memfree>
c0004d0c:	83 c4 10             	add    esp,0x10
c0004d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d13:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004d19:	5b                   	pop    ebx
c0004d1a:	5e                   	pop    esi
c0004d1b:	5f                   	pop    edi
c0004d1c:	c3                   	ret    

c0004d1d <f_chmod>:
c0004d1d:	57                   	push   edi
c0004d1e:	b9 02 00 00 00       	mov    ecx,0x2
c0004d23:	56                   	push   esi
c0004d24:	53                   	push   ebx
c0004d25:	83 ec 50             	sub    esp,0x50
c0004d28:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d2c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d30:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d34:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d38:	e8 7b d6 ff ff       	call   c00023b8 <mount_volume>
c0004d3d:	85 c0                	test   eax,eax
c0004d3f:	75 7e                	jne    c0004dbf <f_chmod+0xa2>
c0004d41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d45:	83 ec 0c             	sub    esp,0xc
c0004d48:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d4c:	68 00 02 00 00       	push   0x200
c0004d51:	e8 36 0d 00 00       	call   c0005a8c <ff_memalloc>
c0004d56:	83 c4 10             	add    esp,0x10
c0004d59:	89 c6                	mov    esi,eax
c0004d5b:	b8 11 00 00 00       	mov    eax,0x11
c0004d60:	85 f6                	test   esi,esi
c0004d62:	74 5b                	je     c0004dbf <f_chmod+0xa2>
c0004d64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d68:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d6c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d6f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d73:	e8 4a eb ff ff       	call   c00038c2 <follow_path>
c0004d78:	85 c0                	test   eax,eax
c0004d7a:	75 2f                	jne    c0004dab <f_chmod+0x8e>
c0004d7c:	b8 06 00 00 00       	mov    eax,0x6
c0004d81:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d86:	75 23                	jne    c0004dab <f_chmod+0x8e>
c0004d88:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d8c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d8f:	21 fb                	and    ebx,edi
c0004d91:	83 e3 27             	and    ebx,0x27
c0004d94:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d97:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d9e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004da2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004da6:	e8 fa de ff ff       	call   c0002ca5 <sync_fs>
c0004dab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004daf:	83 ec 0c             	sub    esp,0xc
c0004db2:	56                   	push   esi
c0004db3:	e8 ec 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004db8:	83 c4 10             	add    esp,0x10
c0004dbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dbf:	83 c4 50             	add    esp,0x50
c0004dc2:	5b                   	pop    ebx
c0004dc3:	5e                   	pop    esi
c0004dc4:	5f                   	pop    edi
c0004dc5:	c3                   	ret    

c0004dc6 <f_utime>:
c0004dc6:	56                   	push   esi
c0004dc7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dcc:	53                   	push   ebx
c0004dcd:	83 ec 54             	sub    esp,0x54
c0004dd0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004dd4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004dd8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004ddc:	e8 d7 d5 ff ff       	call   c00023b8 <mount_volume>
c0004de1:	85 c0                	test   eax,eax
c0004de3:	0f 85 85 00 00 00    	jne    c0004e6e <f_utime+0xa8>
c0004de9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ded:	83 ec 0c             	sub    esp,0xc
c0004df0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004df4:	68 00 02 00 00       	push   0x200
c0004df9:	e8 8e 0c 00 00       	call   c0005a8c <ff_memalloc>
c0004dfe:	83 c4 10             	add    esp,0x10
c0004e01:	89 c3                	mov    ebx,eax
c0004e03:	b8 11 00 00 00       	mov    eax,0x11
c0004e08:	85 db                	test   ebx,ebx
c0004e0a:	74 62                	je     c0004e6e <f_utime+0xa8>
c0004e0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e10:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004e14:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004e17:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e1b:	e8 a2 ea ff ff       	call   c00038c2 <follow_path>
c0004e20:	85 c0                	test   eax,eax
c0004e22:	75 36                	jne    c0004e5a <f_utime+0x94>
c0004e24:	b8 06 00 00 00       	mov    eax,0x6
c0004e29:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e2e:	75 2a                	jne    c0004e5a <f_utime+0x94>
c0004e30:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e34:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e38:	c1 e2 10             	shl    edx,0x10
c0004e3b:	09 c2                	or     edx,eax
c0004e3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e41:	83 c0 16             	add    eax,0x16
c0004e44:	e8 1f cf ff ff       	call   c0001d68 <st_dword>
c0004e49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e55:	e8 4b de ff ff       	call   c0002ca5 <sync_fs>
c0004e5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e5e:	83 ec 0c             	sub    esp,0xc
c0004e61:	53                   	push   ebx
c0004e62:	e8 3d 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004e67:	83 c4 10             	add    esp,0x10
c0004e6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e6e:	83 c4 54             	add    esp,0x54
c0004e71:	5b                   	pop    ebx
c0004e72:	5e                   	pop    esi
c0004e73:	c3                   	ret    

c0004e74 <f_getlabel>:
c0004e74:	55                   	push   ebp
c0004e75:	31 c9                	xor    ecx,ecx
c0004e77:	57                   	push   edi
c0004e78:	56                   	push   esi
c0004e79:	53                   	push   ebx
c0004e7a:	83 ec 5c             	sub    esp,0x5c
c0004e7d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e81:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e85:	e8 2e d5 ff ff       	call   c00023b8 <mount_volume>
c0004e8a:	89 c6                	mov    esi,eax
c0004e8c:	85 c0                	test   eax,eax
c0004e8e:	0f 85 27 01 00 00    	jne    c0004fbb <f_getlabel+0x147>
c0004e94:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e99:	0f 84 d1 00 00 00    	je     c0004f70 <f_getlabel+0xfc>
c0004e9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ea3:	31 d2                	xor    edx,edx
c0004ea5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004ea9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004eb1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eb5:	e8 79 e3 ff ff       	call   c0003233 <dir_sdi>
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 a2 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ec2:	ba 01 00 00 00       	mov    edx,0x1
c0004ec7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ecb:	e8 54 e7 ff ff       	call   c0003624 <dir_read>
c0004ed0:	85 c0                	test   eax,eax
c0004ed2:	0f 85 8c 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ed8:	31 db                	xor    ebx,ebx
c0004eda:	31 c9                	xor    ecx,ecx
c0004edc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ee0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ee3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ee8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004eed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ef1:	e8 ca ce ff ff       	call   c0001dc0 <dbc_1st>
c0004ef6:	85 c0                	test   eax,eax
c0004ef8:	74 16                	je     c0004f10 <f_getlabel+0x9c>
c0004efa:	83 ff 0b             	cmp    edi,0xb
c0004efd:	74 11                	je     c0004f10 <f_getlabel+0x9c>
c0004eff:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004f04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f08:	8d 79 02             	lea    edi,[ecx+0x2]
c0004f0b:	c1 e0 08             	shl    eax,0x8
c0004f0e:	09 c2                	or     edx,eax
c0004f10:	0f b7 d2             	movzx  edx,dx
c0004f13:	50                   	push   eax
c0004f14:	50                   	push   eax
c0004f15:	68 b5 01 00 00       	push   0x1b5
c0004f1a:	52                   	push   edx
c0004f1b:	e8 3c 0c 00 00       	call   c0005b5c <ff_oem2uni>
c0004f20:	83 c4 10             	add    esp,0x10
c0004f23:	66 85 c0             	test   ax,ax
c0004f26:	74 25                	je     c0004f4d <f_getlabel+0xd9>
c0004f28:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f2c:	0f b7 c0             	movzx  eax,ax
c0004f2f:	01 da                	add    edx,ebx
c0004f31:	b9 04 00 00 00       	mov    ecx,0x4
c0004f36:	e8 51 cf ff ff       	call   c0001e8c <put_utf>
c0004f3b:	84 c0                	test   al,al
c0004f3d:	74 0e                	je     c0004f4d <f_getlabel+0xd9>
c0004f3f:	0f b6 c0             	movzx  eax,al
c0004f42:	01 c3                	add    ebx,eax
c0004f44:	83 ff 0b             	cmp    edi,0xb
c0004f47:	74 06                	je     c0004f4f <f_getlabel+0xdb>
c0004f49:	89 f9                	mov    ecx,edi
c0004f4b:	eb 8f                	jmp    c0004edc <f_getlabel+0x68>
c0004f4d:	31 db                	xor    ebx,ebx
c0004f4f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f53:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f56:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f5a:	74 14                	je     c0004f70 <f_getlabel+0xfc>
c0004f5c:	4b                   	dec    ebx
c0004f5d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f60:	74 f1                	je     c0004f53 <f_getlabel+0xdf>
c0004f62:	eb 0c                	jmp    c0004f70 <f_getlabel+0xfc>
c0004f64:	83 f8 04             	cmp    eax,0x4
c0004f67:	75 50                	jne    c0004fb9 <f_getlabel+0x145>
c0004f69:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f70:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f75:	74 44                	je     c0004fbb <f_getlabel+0x147>
c0004f77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f7b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f7e:	e8 e2 d2 ff ff       	call   c0002265 <move_window>
c0004f83:	89 c6                	mov    esi,eax
c0004f85:	85 c0                	test   eax,eax
c0004f87:	75 32                	jne    c0004fbb <f_getlabel+0x147>
c0004f89:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f8d:	b8 43 00 00 00       	mov    eax,0x43
c0004f92:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f94:	80 f9 03             	cmp    cl,0x3
c0004f97:	74 0f                	je     c0004fa8 <f_getlabel+0x134>
c0004f99:	31 c0                	xor    eax,eax
c0004f9b:	80 f9 04             	cmp    cl,0x4
c0004f9e:	0f 94 c0             	sete   al
c0004fa1:	48                   	dec    eax
c0004fa2:	83 e0 c3             	and    eax,0xffffffc3
c0004fa5:	83 c0 64             	add    eax,0x64
c0004fa8:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004fac:	e8 9b cd ff ff       	call   c0001d4c <ld_dword>
c0004fb1:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004fb5:	89 07                	mov    DWORD PTR [edi],eax
c0004fb7:	eb 02                	jmp    c0004fbb <f_getlabel+0x147>
c0004fb9:	89 c6                	mov    esi,eax
c0004fbb:	83 c4 5c             	add    esp,0x5c
c0004fbe:	89 f0                	mov    eax,esi
c0004fc0:	5b                   	pop    ebx
c0004fc1:	5e                   	pop    esi
c0004fc2:	5f                   	pop    edi
c0004fc3:	5d                   	pop    ebp
c0004fc4:	c3                   	ret    

c0004fc5 <f_setlabel>:
c0004fc5:	56                   	push   esi
c0004fc6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fcb:	53                   	push   ebx
c0004fcc:	83 ec 54             	sub    esp,0x54
c0004fcf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fd3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fd7:	e8 dc d3 ff ff       	call   c00023b8 <mount_volume>
c0004fdc:	89 c6                	mov    esi,eax
c0004fde:	85 c0                	test   eax,eax
c0004fe0:	0f 85 67 01 00 00    	jne    c000514d <f_setlabel+0x188>
c0004fe6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004feb:	ba 20 00 00 00       	mov    edx,0x20
c0004ff0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004ff4:	31 db                	xor    ebx,ebx
c0004ff6:	e8 85 cd ff ff       	call   c0001d80 <mem_set>
c0004ffb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fff:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005002:	76 5b                	jbe    c000505f <f_setlabel+0x9a>
c0005004:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005008:	e8 b9 cd ff ff       	call   c0001dc6 <tchar2uni>
c000500d:	3d ff ff 00 00       	cmp    eax,0xffff
c0005012:	76 0a                	jbe    c000501e <f_setlabel+0x59>
c0005014:	be 06 00 00 00       	mov    esi,0x6
c0005019:	e9 2f 01 00 00       	jmp    c000514d <f_setlabel+0x188>
c000501e:	83 ec 0c             	sub    esp,0xc
c0005021:	50                   	push   eax
c0005022:	e8 ad 0b 00 00       	call   c0005bd4 <ff_wtoupper>
c0005027:	5a                   	pop    edx
c0005028:	59                   	pop    ecx
c0005029:	68 b5 01 00 00       	push   0x1b5
c000502e:	50                   	push   eax
c000502f:	e8 88 0a 00 00       	call   c0005abc <ff_uni2oem>
c0005034:	83 c4 10             	add    esp,0x10
c0005037:	89 c6                	mov    esi,eax
c0005039:	66 85 c0             	test   ax,ax
c000503c:	74 d6                	je     c0005014 <f_setlabel+0x4f>
c000503e:	0f b7 d0             	movzx  edx,ax
c0005041:	b8 b0 d0 01 c0       	mov    eax,0xc001d0b0
c0005046:	e8 63 cd ff ff       	call   c0001dae <chk_chr>
c000504b:	85 c0                	test   eax,eax
c000504d:	75 c5                	jne    c0005014 <f_setlabel+0x4f>
c000504f:	66 81 fe ff 00       	cmp    si,0xff
c0005054:	0f 87 c9 00 00 00    	ja     c0005123 <f_setlabel+0x15e>
c000505a:	e9 e4 00 00 00       	jmp    c0005143 <f_setlabel+0x17e>
c000505f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005064:	74 ae                	je     c0005014 <f_setlabel+0x4f>
c0005066:	85 db                	test   ebx,ebx
c0005068:	74 0e                	je     c0005078 <f_setlabel+0xb3>
c000506a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000506d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005072:	75 04                	jne    c0005078 <f_setlabel+0xb3>
c0005074:	89 c3                	mov    ebx,eax
c0005076:	eb ee                	jmp    c0005066 <f_setlabel+0xa1>
c0005078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000507c:	31 d2                	xor    edx,edx
c000507e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005082:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000508a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000508e:	e8 a0 e1 ff ff       	call   c0003233 <dir_sdi>
c0005093:	89 c6                	mov    esi,eax
c0005095:	85 c0                	test   eax,eax
c0005097:	0f 85 b0 00 00 00    	jne    c000514d <f_setlabel+0x188>
c000509d:	ba 01 00 00 00       	mov    edx,0x1
c00050a2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050a6:	e8 79 e5 ff ff       	call   c0003624 <dir_read>
c00050ab:	85 c0                	test   eax,eax
c00050ad:	75 18                	jne    c00050c7 <f_setlabel+0x102>
c00050af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050b3:	85 db                	test   ebx,ebx
c00050b5:	74 0b                	je     c00050c2 <f_setlabel+0xfd>
c00050b7:	b9 0b 00 00 00       	mov    ecx,0xb
c00050bc:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050c0:	eb 47                	jmp    c0005109 <f_setlabel+0x144>
c00050c2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050c5:	eb 47                	jmp    c000510e <f_setlabel+0x149>
c00050c7:	83 f8 04             	cmp    eax,0x4
c00050ca:	75 53                	jne    c000511f <f_setlabel+0x15a>
c00050cc:	85 db                	test   ebx,ebx
c00050ce:	74 7d                	je     c000514d <f_setlabel+0x188>
c00050d0:	ba 01 00 00 00       	mov    edx,0x1
c00050d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050d9:	e8 e5 e4 ff ff       	call   c00035c3 <dir_alloc>
c00050de:	89 c6                	mov    esi,eax
c00050e0:	85 c0                	test   eax,eax
c00050e2:	75 69                	jne    c000514d <f_setlabel+0x188>
c00050e4:	b9 20 00 00 00       	mov    ecx,0x20
c00050e9:	31 d2                	xor    edx,edx
c00050eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050ef:	e8 8c cc ff ff       	call   c0001d80 <mem_set>
c00050f4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050f8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050fd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005101:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005105:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005109:	e8 5d cc ff ff       	call   c0001d6b <mem_cpy>
c000510e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005112:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000511a:	e8 86 db ff ff       	call   c0002ca5 <sync_fs>
c000511f:	89 c6                	mov    esi,eax
c0005121:	eb 2a                	jmp    c000514d <f_setlabel+0x188>
c0005123:	83 fb 09             	cmp    ebx,0x9
c0005126:	0f 87 e8 fe ff ff    	ja     c0005014 <f_setlabel+0x4f>
c000512c:	89 f0                	mov    eax,esi
c000512e:	66 c1 e8 08          	shr    ax,0x8
c0005132:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005136:	43                   	inc    ebx
c0005137:	89 f0                	mov    eax,esi
c0005139:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000513d:	43                   	inc    ebx
c000513e:	e9 b8 fe ff ff       	jmp    c0004ffb <f_setlabel+0x36>
c0005143:	83 fb 0a             	cmp    ebx,0xa
c0005146:	76 ef                	jbe    c0005137 <f_setlabel+0x172>
c0005148:	e9 c7 fe ff ff       	jmp    c0005014 <f_setlabel+0x4f>
c000514d:	89 f0                	mov    eax,esi
c000514f:	83 c4 54             	add    esp,0x54
c0005152:	5b                   	pop    ebx
c0005153:	5e                   	pop    esi
c0005154:	c3                   	ret    

c0005155 <f_expand>:
c0005155:	55                   	push   ebp
c0005156:	57                   	push   edi
c0005157:	56                   	push   esi
c0005158:	53                   	push   ebx
c0005159:	83 ec 2c             	sub    esp,0x2c
c000515c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005160:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005164:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005168:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000516c:	89 d8                	mov    eax,ebx
c000516e:	e8 48 d0 ff ff       	call   c00021bb <validate>
c0005173:	89 c6                	mov    esi,eax
c0005175:	85 c0                	test   eax,eax
c0005177:	0f 85 2e 01 00 00    	jne    c00052ab <f_expand+0x156>
c000517d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005181:	85 f6                	test   esi,esi
c0005183:	0f 85 22 01 00 00    	jne    c00052ab <f_expand+0x156>
c0005189:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000518e:	75 0a                	jne    c000519a <f_expand+0x45>
c0005190:	be 07 00 00 00       	mov    esi,0x7
c0005195:	e9 11 01 00 00       	jmp    c00052ab <f_expand+0x156>
c000519a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000519e:	75 f0                	jne    c0005190 <f_expand+0x3b>
c00051a0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00051a4:	74 ea                	je     c0005190 <f_expand+0x3b>
c00051a6:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00051aa:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00051ae:	c1 e1 09             	shl    ecx,0x9
c00051b1:	8d 41 ff             	lea    eax,[ecx-0x1]
c00051b4:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00051b8:	0f 95 c0             	setne  al
c00051bb:	31 d2                	xor    edx,edx
c00051bd:	0f b6 c0             	movzx  eax,al
c00051c0:	89 c7                	mov    edi,eax
c00051c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051c6:	f7 f1                	div    ecx
c00051c8:	01 f8                	add    eax,edi
c00051ca:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051d1:	83 ff 01             	cmp    edi,0x1
c00051d4:	76 05                	jbe    c00051db <f_expand+0x86>
c00051d6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051d9:	77 05                	ja     c00051e0 <f_expand+0x8b>
c00051db:	bf 02 00 00 00       	mov    edi,0x2
c00051e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051e3:	89 fd                	mov    ebp,edi
c00051e5:	31 c9                	xor    ecx,ecx
c00051e7:	89 ea                	mov    edx,ebp
c00051e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051ef:	45                   	inc    ebp
c00051f0:	e8 3c df ff ff       	call   c0003131 <get_fat.isra.2>
c00051f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051fd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005200:	77 05                	ja     c0005207 <f_expand+0xb2>
c0005202:	bd 02 00 00 00       	mov    ebp,0x2
c0005207:	83 f8 01             	cmp    eax,0x1
c000520a:	74 20                	je     c000522c <f_expand+0xd7>
c000520c:	83 f8 ff             	cmp    eax,0xffffffff
c000520f:	74 22                	je     c0005233 <f_expand+0xde>
c0005211:	85 c0                	test   eax,eax
c0005213:	75 09                	jne    c000521e <f_expand+0xc9>
c0005215:	41                   	inc    ecx
c0005216:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000521a:	75 07                	jne    c0005223 <f_expand+0xce>
c000521c:	eb 1c                	jmp    c000523a <f_expand+0xe5>
c000521e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005221:	31 c9                	xor    ecx,ecx
c0005223:	39 fd                	cmp    ebp,edi
c0005225:	75 c0                	jne    c00051e7 <f_expand+0x92>
c0005227:	e9 64 ff ff ff       	jmp    c0005190 <f_expand+0x3b>
c000522c:	be 02 00 00 00       	mov    esi,0x2
c0005231:	eb 78                	jmp    c00052ab <f_expand+0x156>
c0005233:	be 01 00 00 00       	mov    esi,0x1
c0005238:	eb 71                	jmp    c00052ab <f_expand+0x156>
c000523a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000523f:	74 2b                	je     c000526c <f_expand+0x117>
c0005241:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005244:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005248:	85 ed                	test   ebp,ebp
c000524a:	74 24                	je     c0005270 <f_expand+0x11b>
c000524c:	83 c9 ff             	or     ecx,0xffffffff
c000524f:	83 fd 01             	cmp    ebp,0x1
c0005252:	74 03                	je     c0005257 <f_expand+0x102>
c0005254:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005257:	89 fa                	mov    edx,edi
c0005259:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000525d:	e8 59 d4 ff ff       	call   c00026bb <put_fat>
c0005262:	85 c0                	test   eax,eax
c0005264:	75 43                	jne    c00052a9 <f_expand+0x154>
c0005266:	89 f8                	mov    eax,edi
c0005268:	4d                   	dec    ebp
c0005269:	47                   	inc    edi
c000526a:	eb dc                	jmp    c0005248 <f_expand+0xf3>
c000526c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000526f:	48                   	dec    eax
c0005270:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005274:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005279:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000527c:	74 2d                	je     c00052ab <f_expand+0x156>
c000527e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005282:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005285:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005288:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000528c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000528f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005292:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005295:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005298:	39 c8                	cmp    eax,ecx
c000529a:	77 0f                	ja     c00052ab <f_expand+0x156>
c000529c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00052a0:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00052a4:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00052a7:	eb 02                	jmp    c00052ab <f_expand+0x156>
c00052a9:	89 c6                	mov    esi,eax
c00052ab:	83 c4 2c             	add    esp,0x2c
c00052ae:	89 f0                	mov    eax,esi
c00052b0:	5b                   	pop    ebx
c00052b1:	5e                   	pop    esi
c00052b2:	5f                   	pop    edi
c00052b3:	5d                   	pop    ebp
c00052b4:	c3                   	ret    

c00052b5 <f_mkfs>:
c00052b5:	55                   	push   ebp
c00052b6:	57                   	push   edi
c00052b7:	bf 0b 00 00 00       	mov    edi,0xb
c00052bc:	56                   	push   esi
c00052bd:	53                   	push   ebx
c00052be:	83 ec 4c             	sub    esp,0x4c
c00052c1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052c5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052c9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052cd:	e8 9c ce ff ff       	call   c000216e <get_ldnumber>
c00052d2:	85 c0                	test   eax,eax
c00052d4:	0f 88 a6 07 00 00    	js     c0005a80 <f_mkfs+0x7cb>
c00052da:	8b 14 85 a0 ff 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0060]
c00052e1:	85 d2                	test   edx,edx
c00052e3:	74 03                	je     c00052e8 <f_mkfs+0x33>
c00052e5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052e8:	85 db                	test   ebx,ebx
c00052ea:	75 05                	jne    c00052f1 <f_mkfs+0x3c>
c00052ec:	bb a0 d0 01 c0       	mov    ebx,0xc001d0a0
c00052f1:	83 ec 0c             	sub    esp,0xc
c00052f4:	0f b6 c0             	movzx  eax,al
c00052f7:	bf 03 00 00 00       	mov    edi,0x3
c00052fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005300:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005304:	e8 e8 c9 ff ff       	call   c0001cf1 <disk_initialize>
c0005309:	83 c4 10             	add    esp,0x10
c000530c:	a8 01                	test   al,0x1
c000530e:	0f 85 6c 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005314:	bf 0a 00 00 00       	mov    edi,0xa
c0005319:	a8 04                	test   al,0x4
c000531b:	0f 85 5f 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005321:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005324:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005328:	85 c0                	test   eax,eax
c000532a:	75 20                	jne    c000534c <f_mkfs+0x97>
c000532c:	51                   	push   ecx
c000532d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005331:	50                   	push   eax
c0005332:	6a 03                	push   0x3
c0005334:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005338:	e8 e3 c9 ff ff       	call   c0001d20 <disk_ioctl>
c000533d:	83 c4 10             	add    esp,0x10
c0005340:	85 c0                	test   eax,eax
c0005342:	74 08                	je     c000534c <f_mkfs+0x97>
c0005344:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000534c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005350:	8d 42 ff             	lea    eax,[edx-0x1]
c0005353:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005358:	77 04                	ja     c000535e <f_mkfs+0xa9>
c000535a:	85 c2                	test   edx,eax
c000535c:	74 08                	je     c0005366 <f_mkfs+0xb1>
c000535e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005366:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005369:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000536d:	48                   	dec    eax
c000536e:	3c 01                	cmp    al,0x1
c0005370:	76 05                	jbe    c0005377 <f_mkfs+0xc2>
c0005372:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005377:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000537a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000537e:	48                   	dec    eax
c000537f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005384:	77 07                	ja     c000538d <f_mkfs+0xd8>
c0005386:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000538b:	74 08                	je     c0005395 <f_mkfs+0xe0>
c000538d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005395:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005398:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000539e:	77 07                	ja     c00053a7 <f_mkfs+0xf2>
c00053a0:	8d 47 ff             	lea    eax,[edi-0x1]
c00053a3:	85 f8                	test   eax,edi
c00053a5:	74 02                	je     c00053a9 <f_mkfs+0xf4>
c00053a7:	31 ff                	xor    edi,edi
c00053a9:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c00053b1:	77 0a                	ja     c00053bd <f_mkfs+0x108>
c00053b3:	bf 11 00 00 00       	mov    edi,0x11
c00053b8:	e9 c3 06 00 00       	jmp    c0005a80 <f_mkfs+0x7cb>
c00053bd:	8a 1b                	mov    bl,BYTE PTR [ebx]
c00053bf:	89 ee                	mov    esi,ebp
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	75 1b                	jne    c00053e0 <f_mkfs+0x12b>
c00053c5:	83 ec 0c             	sub    esp,0xc
c00053c8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053cc:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053d1:	50                   	push   eax
c00053d2:	e8 b5 06 00 00       	call   c0005a8c <ff_memalloc>
c00053d7:	83 c4 10             	add    esp,0x10
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	74 d3                	je     c00053b3 <f_mkfs+0xfe>
c00053e0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053e8:	52                   	push   edx
c00053e9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053ed:	50                   	push   eax
c00053ee:	6a 01                	push   0x1
c00053f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053f4:	e8 27 c9 ff ff       	call   c0001d20 <disk_ioctl>
c00053f9:	83 c4 10             	add    esp,0x10
c00053fc:	85 c0                	test   eax,eax
c00053fe:	0f 85 25 06 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005404:	88 d8                	mov    al,bl
c0005406:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000540e:	24 08                	and    al,0x8
c0005410:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005414:	75 18                	jne    c000542e <f_mkfs+0x179>
c0005416:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000541a:	83 f8 3f             	cmp    eax,0x3f
c000541d:	76 0f                	jbe    c000542e <f_mkfs+0x179>
c000541f:	83 e8 3f             	sub    eax,0x3f
c0005422:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000542a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000542e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005432:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005436:	83 f8 7f             	cmp    eax,0x7f
c0005439:	0f 86 52 02 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c000543f:	b9 80 00 00 00       	mov    ecx,0x80
c0005444:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000544a:	77 05                	ja     c0005451 <f_mkfs+0x19c>
c000544c:	89 f9                	mov    ecx,edi
c000544e:	c1 e9 09             	shr    ecx,0x9
c0005451:	88 d8                	mov    al,bl
c0005453:	83 e0 01             	and    eax,0x1
c0005456:	80 e3 02             	and    bl,0x2
c0005459:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000545d:	74 0a                	je     c0005469 <f_mkfs+0x1b4>
c000545f:	84 c0                	test   al,al
c0005461:	0f 84 4c 01 00 00    	je     c00055b3 <f_mkfs+0x2fe>
c0005467:	eb 38                	jmp    c00054a1 <f_mkfs+0x1ec>
c0005469:	bf 13 00 00 00       	mov    edi,0x13
c000546e:	84 c0                	test   al,al
c0005470:	75 2f                	jne    c00054a1 <f_mkfs+0x1ec>
c0005472:	e9 c9 05 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c0005477:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000547c:	0f 85 08 02 00 00    	jne    c000568a <f_mkfs+0x3d5>
c0005482:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005487:	0f 86 e1 01 00 00    	jbe    c000566e <f_mkfs+0x3b9>
c000548d:	85 c9                	test   ecx,ecx
c000548f:	0f 85 bd 05 00 00    	jne    c0005a52 <f_mkfs+0x79d>
c0005495:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005498:	83 f9 40             	cmp    ecx,0x40
c000549b:	0f 87 c1 05 00 00    	ja     c0005a62 <f_mkfs+0x7ad>
c00054a1:	89 cf                	mov    edi,ecx
c00054a3:	85 c9                	test   ecx,ecx
c00054a5:	75 1d                	jne    c00054c4 <f_mkfs+0x20f>
c00054a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00054ab:	ba 80 d0 01 c0       	mov    edx,0xc001d080
c00054b0:	c1 eb 0c             	shr    ebx,0xc
c00054b3:	bf 01 00 00 00       	mov    edi,0x1
c00054b8:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00054bb:	66 85 c0             	test   ax,ax
c00054be:	0f 85 5f 01 00 00    	jne    c0005623 <f_mkfs+0x36e>
c00054c4:	31 d2                	xor    edx,edx
c00054c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054ca:	f7 f7                	div    edi
c00054cc:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054d1:	0f 86 5e 01 00 00    	jbe    c0005635 <f_mkfs+0x380>
c00054d7:	83 c0 02             	add    eax,0x2
c00054da:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054df:	01 c0                	add    eax,eax
c00054e1:	05 ff 01 00 00       	add    eax,0x1ff
c00054e6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ee:	c1 e8 09             	shr    eax,0x9
c00054f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054f9:	c1 e0 05             	shl    eax,0x5
c00054fc:	c1 e8 09             	shr    eax,0x9
c00054ff:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005503:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0005508:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000550c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005510:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0005514:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000551c:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005521:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005525:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000552d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005531:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005535:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005539:	f7 d8                	neg    eax
c000553b:	21 c3                	and    ebx,eax
c000553d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005541:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005546:	0f 85 fc 00 00 00    	jne    c0005648 <f_mkfs+0x393>
c000554c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005550:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005554:	89 f8                	mov    eax,edi
c0005556:	c1 e0 04             	shl    eax,0x4
c0005559:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000555d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005561:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005565:	0f 82 26 01 00 00    	jb     c0005691 <f_mkfs+0x3dc>
c000556b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000556f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005573:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005577:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000557c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005580:	29 d0                	sub    eax,edx
c0005582:	31 d2                	xor    edx,edx
c0005584:	f7 f7                	div    edi
c0005586:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000558b:	89 c3                	mov    ebx,eax
c000558d:	0f 85 e4 fe ff ff    	jne    c0005477 <f_mkfs+0x1c2>
c0005593:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005598:	0f 87 02 01 00 00    	ja     c00056a0 <f_mkfs+0x3eb>
c000559e:	85 c9                	test   ecx,ecx
c00055a0:	0f 85 eb 00 00 00    	jne    c0005691 <f_mkfs+0x3dc>
c00055a6:	83 ff 01             	cmp    edi,0x1
c00055a9:	0f 86 e2 00 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c00055af:	89 f9                	mov    ecx,edi
c00055b1:	d1 e9                	shr    ecx,1
c00055b3:	89 cb                	mov    ebx,ecx
c00055b5:	85 c9                	test   ecx,ecx
c00055b7:	75 26                	jne    c00055df <f_mkfs+0x32a>
c00055b9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00055bd:	ba 90 d0 01 c0       	mov    edx,0xc001d090
c00055c2:	c1 eb 11             	shr    ebx,0x11
c00055c5:	b9 01 00 00 00       	mov    ecx,0x1
c00055ca:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055cd:	66 85 c0             	test   ax,ax
c00055d0:	74 0b                	je     c00055dd <f_mkfs+0x328>
c00055d2:	83 c2 02             	add    edx,0x2
c00055d5:	39 d8                	cmp    eax,ebx
c00055d7:	77 04                	ja     c00055dd <f_mkfs+0x328>
c00055d9:	01 c9                	add    ecx,ecx
c00055db:	eb ed                	jmp    c00055ca <f_mkfs+0x315>
c00055dd:	31 db                	xor    ebx,ebx
c00055df:	31 d2                	xor    edx,edx
c00055e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055e5:	f7 f1                	div    ecx
c00055e7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ee:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055f3:	c1 ea 09             	shr    edx,0x9
c00055f6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055fb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055ff:	0f 87 8c 00 00 00    	ja     c0005691 <f_mkfs+0x3dc>
c0005605:	89 cf                	mov    edi,ecx
c0005607:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000560f:	89 d9                	mov    ecx,ebx
c0005611:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c0005619:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c000561e:	e9 e0 fe ff ff       	jmp    c0005503 <f_mkfs+0x24e>
c0005623:	83 c2 02             	add    edx,0x2
c0005626:	39 d8                	cmp    eax,ebx
c0005628:	0f 87 96 fe ff ff    	ja     c00054c4 <f_mkfs+0x20f>
c000562e:	01 ff                	add    edi,edi
c0005630:	e9 83 fe ff ff       	jmp    c00054b8 <f_mkfs+0x203>
c0005635:	8d 04 40             	lea    eax,[eax+eax*2]
c0005638:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000563d:	40                   	inc    eax
c000563e:	d1 e8                	shr    eax,1
c0005640:	83 c0 03             	add    eax,0x3
c0005643:	e9 99 fe ff ff       	jmp    c00054e1 <f_mkfs+0x22c>
c0005648:	31 d2                	xor    edx,edx
c000564a:	89 d8                	mov    eax,ebx
c000564c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005650:	85 d2                	test   edx,edx
c0005652:	74 09                	je     c000565d <f_mkfs+0x3a8>
c0005654:	4b                   	dec    ebx
c0005655:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005659:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000565d:	89 d8                	mov    eax,ebx
c000565f:	31 d2                	xor    edx,edx
c0005661:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005665:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005669:	e9 e6 fe ff ff       	jmp    c0005554 <f_mkfs+0x29f>
c000566e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005673:	77 2b                	ja     c00056a0 <f_mkfs+0x3eb>
c0005675:	85 c9                	test   ecx,ecx
c0005677:	75 18                	jne    c0005691 <f_mkfs+0x3dc>
c0005679:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000567c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005682:	0f 86 19 fe ff ff    	jbe    c00054a1 <f_mkfs+0x1ec>
c0005688:	eb 07                	jmp    c0005691 <f_mkfs+0x3dc>
c000568a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000568f:	76 0a                	jbe    c000569b <f_mkfs+0x3e6>
c0005691:	bf 0e 00 00 00       	mov    edi,0xe
c0005696:	e9 a5 03 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c000569b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056a0:	31 d2                	xor    edx,edx
c00056a2:	b9 00 02 00 00       	mov    ecx,0x200
c00056a7:	89 f0                	mov    eax,esi
c00056a9:	e8 d2 c6 ff ff       	call   c0001d80 <mem_set>
c00056ae:	b9 0b 00 00 00       	mov    ecx,0xb
c00056b3:	ba 32 d0 01 c0       	mov    edx,0xc001d032
c00056b8:	89 f0                	mov    eax,esi
c00056ba:	e8 ac c6 ff ff       	call   c0001d6b <mem_cpy>
c00056bf:	8d 46 0b             	lea    eax,[esi+0xb]
c00056c2:	ba 00 02 00 00       	mov    edx,0x200
c00056c7:	e8 98 c6 ff ff       	call   c0001d64 <st_word>
c00056cc:	89 f8                	mov    eax,edi
c00056ce:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056d3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056d6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056d9:	e8 86 c6 ff ff       	call   c0001d64 <st_word>
c00056de:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056e2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056e7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ea:	75 08                	jne    c00056f4 <f_mkfs+0x43f>
c00056ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f8:	8d 46 11             	lea    eax,[esi+0x11]
c00056fb:	e8 64 c6 ff ff       	call   c0001d64 <st_word>
c0005700:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005704:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000570a:	77 0a                	ja     c0005716 <f_mkfs+0x461>
c000570c:	8d 46 13             	lea    eax,[esi+0x13]
c000570f:	e8 50 c6 ff ff       	call   c0001d64 <st_word>
c0005714:	eb 08                	jmp    c000571e <f_mkfs+0x469>
c0005716:	8d 46 20             	lea    eax,[esi+0x20]
c0005719:	e8 4a c6 ff ff       	call   c0001d68 <st_dword>
c000571e:	8d 46 18             	lea    eax,[esi+0x18]
c0005721:	ba 3f 00 00 00       	mov    edx,0x3f
c0005726:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000572a:	e8 35 c6 ff ff       	call   c0001d64 <st_word>
c000572f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005732:	ba ff 00 00 00       	mov    edx,0xff
c0005737:	e8 28 c6 ff ff       	call   c0001d64 <st_word>
c000573c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000573f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005743:	e8 20 c6 ff ff       	call   c0001d68 <st_dword>
c0005748:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000574d:	75 57                	jne    c00057a6 <f_mkfs+0x4f1>
c000574f:	8d 46 43             	lea    eax,[esi+0x43]
c0005752:	ba 00 00 21 50       	mov    edx,0x50210000
c0005757:	e8 0c c6 ff ff       	call   c0001d68 <st_dword>
c000575c:	8d 46 24             	lea    eax,[esi+0x24]
c000575f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005763:	e8 00 c6 ff ff       	call   c0001d68 <st_dword>
c0005768:	8d 46 2c             	lea    eax,[esi+0x2c]
c000576b:	ba 02 00 00 00       	mov    edx,0x2
c0005770:	e8 f3 c5 ff ff       	call   c0001d68 <st_dword>
c0005775:	8d 46 30             	lea    eax,[esi+0x30]
c0005778:	ba 01 00 00 00       	mov    edx,0x1
c000577d:	e8 e2 c5 ff ff       	call   c0001d64 <st_word>
c0005782:	8d 46 32             	lea    eax,[esi+0x32]
c0005785:	ba 06 00 00 00       	mov    edx,0x6
c000578a:	e8 d5 c5 ff ff       	call   c0001d64 <st_word>
c000578f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005793:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005797:	8d 46 47             	lea    eax,[esi+0x47]
c000579a:	b9 13 00 00 00       	mov    ecx,0x13
c000579f:	ba 3e d0 01 c0       	mov    edx,0xc001d03e
c00057a4:	eb 2f                	jmp    c00057d5 <f_mkfs+0x520>
c00057a6:	8d 46 27             	lea    eax,[esi+0x27]
c00057a9:	ba 00 00 21 50       	mov    edx,0x50210000
c00057ae:	e8 b5 c5 ff ff       	call   c0001d68 <st_dword>
c00057b3:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c00057b8:	8d 46 16             	lea    eax,[esi+0x16]
c00057bb:	e8 a4 c5 ff ff       	call   c0001d64 <st_word>
c00057c0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057c4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057c8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057cb:	b9 13 00 00 00       	mov    ecx,0x13
c00057d0:	ba 52 d0 01 c0       	mov    edx,0xc001d052
c00057d5:	e8 91 c5 ff ff       	call   c0001d6b <mem_cpy>
c00057da:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057e0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057e9:	e8 76 c5 ff ff       	call   c0001d64 <st_word>
c00057ee:	6a 01                	push   0x1
c00057f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057f4:	56                   	push   esi
c00057f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057f9:	e8 0c c5 ff ff       	call   c0001d0a <disk_write>
c00057fe:	83 c4 10             	add    esp,0x10
c0005801:	85 c0                	test   eax,eax
c0005803:	0f 85 20 02 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005809:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000580e:	0f 85 98 00 00 00    	jne    c00058ac <f_mkfs+0x5f7>
c0005814:	6a 01                	push   0x1
c0005816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000581a:	83 c0 06             	add    eax,0x6
c000581d:	50                   	push   eax
c000581e:	56                   	push   esi
c000581f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005823:	e8 e2 c4 ff ff       	call   c0001d0a <disk_write>
c0005828:	b9 00 02 00 00       	mov    ecx,0x200
c000582d:	31 d2                	xor    edx,edx
c000582f:	89 f0                	mov    eax,esi
c0005831:	e8 4a c5 ff ff       	call   c0001d80 <mem_set>
c0005836:	ba 52 52 61 41       	mov    edx,0x41615252
c000583b:	89 f0                	mov    eax,esi
c000583d:	e8 26 c5 ff ff       	call   c0001d68 <st_dword>
c0005842:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005848:	ba 72 72 41 61       	mov    edx,0x61417272
c000584d:	e8 16 c5 ff ff       	call   c0001d68 <st_dword>
c0005852:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005855:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000585b:	e8 08 c5 ff ff       	call   c0001d68 <st_dword>
c0005860:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005866:	ba 02 00 00 00       	mov    edx,0x2
c000586b:	e8 f8 c4 ff ff       	call   c0001d68 <st_dword>
c0005870:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005875:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000587b:	e8 e4 c4 ff ff       	call   c0001d64 <st_word>
c0005880:	6a 01                	push   0x1
c0005882:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005886:	83 c0 07             	add    eax,0x7
c0005889:	50                   	push   eax
c000588a:	56                   	push   esi
c000588b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000588f:	e8 76 c4 ff ff       	call   c0001d0a <disk_write>
c0005894:	83 c4 20             	add    esp,0x20
c0005897:	6a 01                	push   0x1
c0005899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000589d:	40                   	inc    eax
c000589e:	50                   	push   eax
c000589f:	56                   	push   esi
c00058a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00058a4:	e8 61 c4 ff ff       	call   c0001d0a <disk_write>
c00058a9:	83 c4 10             	add    esp,0x10
c00058ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00058b0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00058b4:	c1 e8 09             	shr    eax,0x9
c00058b7:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00058bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058c1:	31 d2                	xor    edx,edx
c00058c3:	31 db                	xor    ebx,ebx
c00058c5:	89 f0                	mov    eax,esi
c00058c7:	e8 b4 c4 ff ff       	call   c0001d80 <mem_set>
c00058cc:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058d1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058d9:	0f 94 c3             	sete   bl
c00058dc:	4b                   	dec    ebx
c00058dd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058e3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ee:	75 21                	jne    c0005911 <f_mkfs+0x65c>
c00058f0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058f5:	89 f0                	mov    eax,esi
c00058f7:	e8 6c c4 ff ff       	call   c0001d68 <st_dword>
c00058fc:	8d 46 04             	lea    eax,[esi+0x4]
c00058ff:	83 ca ff             	or     edx,0xffffffff
c0005902:	e8 61 c4 ff ff       	call   c0001d68 <st_dword>
c0005907:	8d 46 08             	lea    eax,[esi+0x8]
c000590a:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000590f:	eb 04                	jmp    c0005915 <f_mkfs+0x660>
c0005911:	89 da                	mov    edx,ebx
c0005913:	89 f0                	mov    eax,esi
c0005915:	e8 4e c4 ff ff       	call   c0001d68 <st_dword>
c000591a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000591e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005922:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000592a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000592e:	76 08                	jbe    c0005938 <f_mkfs+0x683>
c0005930:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005934:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000593c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005940:	56                   	push   esi
c0005941:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005945:	e8 c0 c3 ff ff       	call   c0001d0a <disk_write>
c000594a:	83 c4 10             	add    esp,0x10
c000594d:	85 c0                	test   eax,eax
c000594f:	0f 85 d4 00 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005955:	b9 00 02 00 00       	mov    ecx,0x200
c000595a:	31 d2                	xor    edx,edx
c000595c:	89 f0                	mov    eax,esi
c000595e:	e8 1d c4 ff ff       	call   c0001d80 <mem_set>
c0005963:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005967:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000596b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000596f:	75 b1                	jne    c0005922 <f_mkfs+0x66d>
c0005971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005975:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000597d:	40                   	inc    eax
c000597e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005982:	0f 87 61 ff ff ff    	ja     c00058e9 <f_mkfs+0x634>
c0005988:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000598d:	74 04                	je     c0005993 <f_mkfs+0x6de>
c000598f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005993:	89 fb                	mov    ebx,edi
c0005995:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005999:	76 04                	jbe    c000599f <f_mkfs+0x6ea>
c000599b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000599f:	53                   	push   ebx
c00059a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00059a4:	56                   	push   esi
c00059a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059a9:	e8 5c c3 ff ff       	call   c0001d0a <disk_write>
c00059ae:	83 c4 10             	add    esp,0x10
c00059b1:	85 c0                	test   eax,eax
c00059b3:	75 74                	jne    c0005a29 <f_mkfs+0x774>
c00059b5:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00059b9:	29 df                	sub    edi,ebx
c00059bb:	75 d6                	jne    c0005993 <f_mkfs+0x6de>
c00059bd:	b1 0c                	mov    cl,0xc
c00059bf:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059c4:	74 18                	je     c00059de <f_mkfs+0x729>
c00059c6:	b1 06                	mov    cl,0x6
c00059c8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059d0:	77 0c                	ja     c00059de <f_mkfs+0x729>
c00059d2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059d7:	0f 94 c1             	sete   cl
c00059da:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059de:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059e3:	75 2d                	jne    c0005a12 <f_mkfs+0x75d>
c00059e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059e9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059f5:	0f b6 c9             	movzx  ecx,cl
c00059f8:	83 ec 0c             	sub    esp,0xc
c00059fb:	56                   	push   esi
c00059fc:	8d 54 24 48          	lea    edx,[esp+0x48]
c0005a00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a04:	e8 4c d3 ff ff       	call   c0002d55 <create_partition>
c0005a09:	83 c4 10             	add    esp,0x10
c0005a0c:	89 c7                	mov    edi,eax
c0005a0e:	85 c0                	test   eax,eax
c0005a10:	75 2e                	jne    c0005a40 <f_mkfs+0x78b>
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	50                   	push   eax
c0005a15:	6a 00                	push   0x0
c0005a17:	6a 00                	push   0x0
c0005a19:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005a1d:	e8 fe c2 ff ff       	call   c0001d20 <disk_ioctl>
c0005a22:	83 c4 10             	add    esp,0x10
c0005a25:	85 c0                	test   eax,eax
c0005a27:	74 17                	je     c0005a40 <f_mkfs+0x78b>
c0005a29:	85 ed                	test   ebp,ebp
c0005a2b:	75 0c                	jne    c0005a39 <f_mkfs+0x784>
c0005a2d:	83 ec 0c             	sub    esp,0xc
c0005a30:	56                   	push   esi
c0005a31:	e8 6e 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a36:	83 c4 10             	add    esp,0x10
c0005a39:	bf 01 00 00 00       	mov    edi,0x1
c0005a3e:	eb 40                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a40:	85 ed                	test   ebp,ebp
c0005a42:	75 3c                	jne    c0005a80 <f_mkfs+0x7cb>
c0005a44:	83 ec 0c             	sub    esp,0xc
c0005a47:	56                   	push   esi
c0005a48:	e8 57 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a4d:	83 c4 10             	add    esp,0x10
c0005a50:	eb 2e                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a52:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a57:	0f 85 56 fb ff ff    	jne    c00055b3 <f_mkfs+0x2fe>
c0005a5d:	e9 2f fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a62:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a67:	0f 85 4c fb ff ff    	jne    c00055b9 <f_mkfs+0x304>
c0005a6d:	89 cf                	mov    edi,ecx
c0005a6f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a75:	0f 86 49 fa ff ff    	jbe    c00054c4 <f_mkfs+0x20f>
c0005a7b:	e9 11 fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a80:	83 c4 4c             	add    esp,0x4c
c0005a83:	89 f8                	mov    eax,edi
c0005a85:	5b                   	pop    ebx
c0005a86:	5e                   	pop    esi
c0005a87:	5f                   	pop    edi
c0005a88:	5d                   	pop    ebp
c0005a89:	c3                   	ret    
c0005a8a:	66 90                	xchg   ax,ax

c0005a8c <ff_memalloc>:
c0005a8c:	83 ec 0c             	sub    esp,0xc
c0005a8f:	83 ec 0c             	sub    esp,0xc
c0005a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a96:	e8 c2 23 00 00       	call   c0007e5d <malloc>
c0005a9b:	83 c4 10             	add    esp,0x10
c0005a9e:	83 c4 0c             	add    esp,0xc
c0005aa1:	c3                   	ret    
c0005aa2:	66 90                	xchg   ax,ax

c0005aa4 <ff_memfree>:
c0005aa4:	83 ec 0c             	sub    esp,0xc
c0005aa7:	83 ec 0c             	sub    esp,0xc
c0005aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005aae:	e8 ba 23 00 00       	call   c0007e6d <free>
c0005ab3:	83 c4 10             	add    esp,0x10
c0005ab6:	90                   	nop
c0005ab7:	83 c4 0c             	add    esp,0xc
c0005aba:	c3                   	ret    
c0005abb:	90                   	nop

c0005abc <ff_uni2oem>:
c0005abc:	83 ec 14             	sub    esp,0x14
c0005abf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ac3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005ac7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ace:	c7 44 24 0c 80 d4 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d480
c0005ad6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005adb:	77 0b                	ja     c0005ae8 <ff_uni2oem+0x2c>
c0005add:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ae1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ae6:	eb 68                	jmp    c0005b50 <ff_uni2oem+0x94>
c0005ae8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005af0:	77 5e                	ja     c0005b50 <ff_uni2oem+0x94>
c0005af2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005af8:	75 56                	jne    c0005b50 <ff_uni2oem+0x94>
c0005afa:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005b01:	eb 0d                	jmp    c0005b10 <ff_uni2oem+0x54>
c0005b03:	90                   	nop
c0005b04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b09:	40                   	inc    eax
c0005b0a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b0f:	90                   	nop
c0005b10:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005b16:	77 24                	ja     c0005b3c <ff_uni2oem+0x80>
c0005b18:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b1d:	25 ff ff 00 00       	and    eax,0xffff
c0005b22:	01 c0                	add    eax,eax
c0005b24:	89 c2                	mov    edx,eax
c0005b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b2a:	01 d0                	add    eax,edx
c0005b2c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b2f:	25 ff ff 00 00       	and    eax,0xffff
c0005b34:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b38:	75 ca                	jne    c0005b04 <ff_uni2oem+0x48>
c0005b3a:	66 90                	xchg   ax,ax
c0005b3c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b41:	83 e8 80             	sub    eax,0xffffff80
c0005b44:	25 ff 00 00 00       	and    eax,0xff
c0005b49:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b4e:	66 90                	xchg   ax,ax
c0005b50:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b55:	83 c4 14             	add    esp,0x14
c0005b58:	c3                   	ret    
c0005b59:	8d 76 00             	lea    esi,[esi+0x0]

c0005b5c <ff_oem2uni>:
c0005b5c:	83 ec 18             	sub    esp,0x18
c0005b5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b67:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b6c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b70:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b77:	c7 44 24 10 80 d4 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d480
c0005b7f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b85:	77 0d                	ja     c0005b94 <ff_oem2uni+0x38>
c0005b87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b8b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b90:	eb 36                	jmp    c0005bc8 <ff_oem2uni+0x6c>
c0005b92:	66 90                	xchg   ax,ax
c0005b94:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b9a:	75 2c                	jne    c0005bc8 <ff_oem2uni+0x6c>
c0005b9c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005ba3:	77 23                	ja     c0005bc8 <ff_oem2uni+0x6c>
c0005ba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ba9:	25 ff ff 00 00       	and    eax,0xffff
c0005bae:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005bb3:	01 c0                	add    eax,eax
c0005bb5:	89 c2                	mov    edx,eax
c0005bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005bbb:	01 d0                	add    eax,edx
c0005bbd:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bc0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005bc8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bcd:	83 c4 18             	add    esp,0x18
c0005bd0:	c3                   	ret    
c0005bd1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bd4 <ff_wtoupper>:
c0005bd4:	83 ec 10             	sub    esp,0x10
c0005bd7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bdf:	0f 87 77 01 00 00    	ja     c0005d5c <ff_wtoupper+0x188>
c0005be5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005be9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bee:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bf5:	77 09                	ja     c0005c00 <ff_wtoupper+0x2c>
c0005bf7:	b8 80 d2 01 c0       	mov    eax,0xc001d280
c0005bfc:	eb 0a                	jmp    c0005c08 <ff_wtoupper+0x34>
c0005bfe:	66 90                	xchg   ax,ax
c0005c00:	b8 c0 d1 01 c0       	mov    eax,0xc001d1c0
c0005c05:	8d 76 00             	lea    esi,[esi+0x0]
c0005c08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005c0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c10:	8d 50 02             	lea    edx,[eax+0x2]
c0005c13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c17:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c1a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005c1f:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c25:	0f 84 21 01 00 00    	je     c0005d4c <ff_wtoupper+0x178>
c0005c2b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c30:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c35:	0f 82 11 01 00 00    	jb     c0005d4c <ff_wtoupper+0x178>
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c46:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c49:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c4e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c53:	66 c1 e8 08          	shr    ax,0x8
c0005c57:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c5c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c63:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c68:	31 d2                	xor    edx,edx
c0005c6a:	66 89 c2             	mov    dx,ax
c0005c6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c71:	31 c9                	xor    ecx,ecx
c0005c73:	66 89 c1             	mov    cx,ax
c0005c76:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c7b:	25 ff ff 00 00       	and    eax,0xffff
c0005c80:	01 c8                	add    eax,ecx
c0005c82:	39 c2                	cmp    edx,eax
c0005c84:	0f 8d 9a 00 00 00    	jge    c0005d24 <ff_wtoupper+0x150>
c0005c8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c8e:	25 ff ff 00 00       	and    eax,0xffff
c0005c93:	83 f8 08             	cmp    eax,0x8
c0005c96:	0f 87 ac 00 00 00    	ja     c0005d48 <ff_wtoupper+0x174>
c0005c9c:	8b 04 85 80 d1 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2e80]
c0005ca3:	ff e0                	jmp    eax
c0005ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ca8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cad:	31 d2                	xor    edx,edx
c0005caf:	66 89 c2             	mov    dx,ax
c0005cb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005cb6:	25 ff ff 00 00       	and    eax,0xffff
c0005cbb:	29 c2                	sub    edx,eax
c0005cbd:	89 d0                	mov    eax,edx
c0005cbf:	01 c0                	add    eax,eax
c0005cc1:	89 c2                	mov    edx,eax
c0005cc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc7:	01 d0                	add    eax,edx
c0005cc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ccc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cd1:	eb 4d                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cd3:	90                   	nop
c0005cd4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cd9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cdd:	83 e0 01             	and    eax,0x1
c0005ce0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005ce5:	eb 39                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005ce7:	90                   	nop
c0005ce8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cee:	eb 30                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cf6:	eb 28                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cfe:	eb 20                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d00:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005d06:	eb 18                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d08:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005d0e:	eb 10                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d10:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005d16:	eb 08                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d18:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005d1f:	90                   	nop
c0005d20:	eb 26                	jmp    c0005d48 <ff_wtoupper+0x174>
c0005d22:	66 90                	xchg   ax,ax
c0005d24:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d2a:	0f 85 dc fe ff ff    	jne    c0005c0c <ff_wtoupper+0x38>
c0005d30:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d35:	25 ff ff 00 00       	and    eax,0xffff
c0005d3a:	01 c0                	add    eax,eax
c0005d3c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d40:	e9 c7 fe ff ff       	jmp    c0005c0c <ff_wtoupper+0x38>
c0005d45:	8d 76 00             	lea    esi,[esi+0x0]
c0005d48:	90                   	nop
c0005d49:	8d 76 00             	lea    esi,[esi+0x0]
c0005d4c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d51:	25 ff ff 00 00       	and    eax,0xffff
c0005d56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d5a:	66 90                	xchg   ax,ax
c0005d5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d60:	83 c4 10             	add    esp,0x10
c0005d63:	c3                   	ret    

c0005d64 <utf2ucs>:
c0005d64:	57                   	push   edi
c0005d65:	56                   	push   esi
c0005d66:	53                   	push   ebx
c0005d67:	89 d7                	mov    edi,edx
c0005d69:	47                   	inc    edi
c0005d6a:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0005d6d:	0f be cb             	movsx  ecx,bl
c0005d70:	89 ce                	mov    esi,ecx
c0005d72:	c1 fe 08             	sar    esi,0x8
c0005d75:	89 f2                	mov    edx,esi
c0005d77:	88 10                	mov    BYTE PTR [eax],dl
c0005d79:	83 c0 02             	add    eax,0x2
c0005d7c:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005d7f:	85 c9                	test   ecx,ecx
c0005d81:	75 e6                	jne    c0005d69 <utf2ucs+0x5>
c0005d83:	5b                   	pop    ebx
c0005d84:	5e                   	pop    esi
c0005d85:	5f                   	pop    edi
c0005d86:	c3                   	ret    

c0005d87 <ucs2utfn>:
c0005d87:	57                   	push   edi
c0005d88:	56                   	push   esi
c0005d89:	53                   	push   ebx
c0005d8a:	89 cb                	mov    ebx,ecx
c0005d8c:	d1 eb                	shr    ebx,1
c0005d8e:	83 f9 01             	cmp    ecx,0x1
c0005d91:	76 17                	jbe    c0005daa <ucs2utfn+0x23>
c0005d93:	8d 7b ff             	lea    edi,[ebx-0x1]
c0005d96:	0f be 32             	movsx  esi,BYTE PTR [edx]
c0005d99:	c1 e6 08             	shl    esi,0x8
c0005d9c:	8d 4a 02             	lea    ecx,[edx+0x2]
c0005d9f:	0f be 52 01          	movsx  edx,BYTE PTR [edx+0x1]
c0005da3:	09 f2                	or     edx,esi
c0005da5:	83 fa 3b             	cmp    edx,0x3b
c0005da8:	75 40                	jne    c0005dea <ucs2utfn+0x63>
c0005daa:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005dad:	5b                   	pop    ebx
c0005dae:	5e                   	pop    esi
c0005daf:	5f                   	pop    edi
c0005db0:	c3                   	ret    
c0005db1:	81 fa ff 07 00 00    	cmp    edx,0x7ff
c0005db7:	7f 3d                	jg     c0005df6 <ucs2utfn+0x6f>
c0005db9:	89 d6                	mov    esi,edx
c0005dbb:	c1 fe 06             	sar    esi,0x6
c0005dbe:	83 ce c0             	or     esi,0xffffffc0
c0005dc1:	89 f3                	mov    ebx,esi
c0005dc3:	88 18                	mov    BYTE PTR [eax],bl
c0005dc5:	83 e2 3f             	and    edx,0x3f
c0005dc8:	83 ca 80             	or     edx,0xffffff80
c0005dcb:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0005dce:	8d 40 02             	lea    eax,[eax+0x2]
c0005dd1:	85 ff                	test   edi,edi
c0005dd3:	74 d5                	je     c0005daa <ucs2utfn+0x23>
c0005dd5:	4f                   	dec    edi
c0005dd6:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0005dd9:	c1 e2 08             	shl    edx,0x8
c0005ddc:	83 c1 02             	add    ecx,0x2
c0005ddf:	0f be 71 ff          	movsx  esi,BYTE PTR [ecx-0x1]
c0005de3:	09 f2                	or     edx,esi
c0005de5:	83 fa 3b             	cmp    edx,0x3b
c0005de8:	74 c0                	je     c0005daa <ucs2utfn+0x23>
c0005dea:	83 fa 7f             	cmp    edx,0x7f
c0005ded:	7f c2                	jg     c0005db1 <ucs2utfn+0x2a>
c0005def:	88 10                	mov    BYTE PTR [eax],dl
c0005df1:	8d 40 01             	lea    eax,[eax+0x1]
c0005df4:	eb db                	jmp    c0005dd1 <ucs2utfn+0x4a>
c0005df6:	89 d6                	mov    esi,edx
c0005df8:	c1 fe 0c             	sar    esi,0xc
c0005dfb:	83 ce e0             	or     esi,0xffffffe0
c0005dfe:	89 f3                	mov    ebx,esi
c0005e00:	88 18                	mov    BYTE PTR [eax],bl
c0005e02:	89 d6                	mov    esi,edx
c0005e04:	c1 fe 06             	sar    esi,0x6
c0005e07:	83 e6 3f             	and    esi,0x3f
c0005e0a:	83 ce 80             	or     esi,0xffffff80
c0005e0d:	89 f3                	mov    ebx,esi
c0005e0f:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0005e12:	83 e2 3f             	and    edx,0x3f
c0005e15:	83 ca 80             	or     edx,0xffffff80
c0005e18:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
c0005e1b:	8d 40 03             	lea    eax,[eax+0x3]
c0005e1e:	eb b1                	jmp    c0005dd1 <ucs2utfn+0x4a>

c0005e20 <isjoliet>:
c0005e20:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005e23:	74 06                	je     c0005e2b <isjoliet+0xb>
c0005e25:	b8 00 00 00 00       	mov    eax,0x0
c0005e2a:	c3                   	ret    
c0005e2b:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005e2f:	74 06                	je     c0005e37 <isjoliet+0x17>
c0005e31:	b8 00 00 00 00       	mov    eax,0x0
c0005e36:	c3                   	ret    
c0005e37:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005e3a:	3c 43                	cmp    al,0x43
c0005e3c:	74 0f                	je     c0005e4d <isjoliet+0x2d>
c0005e3e:	3c 45                	cmp    al,0x45
c0005e40:	74 11                	je     c0005e53 <isjoliet+0x33>
c0005e42:	3c 40                	cmp    al,0x40
c0005e44:	0f 94 c0             	sete   al
c0005e47:	25 ff 00 00 00       	and    eax,0xff
c0005e4c:	c3                   	ret    
c0005e4d:	b8 02 00 00 00       	mov    eax,0x2
c0005e52:	c3                   	ret    
c0005e53:	b8 03 00 00 00       	mov    eax,0x3
c0005e58:	c3                   	ret    

c0005e59 <htohl_32>:
c0005e59:	31 d2                	xor    edx,edx
c0005e5b:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c0005e5e:	c1 e2 08             	shl    edx,0x8
c0005e61:	31 c9                	xor    ecx,ecx
c0005e63:	8a 48 02             	mov    cl,BYTE PTR [eax+0x2]
c0005e66:	c1 e1 10             	shl    ecx,0x10
c0005e69:	09 ca                	or     edx,ecx
c0005e6b:	31 c9                	xor    ecx,ecx
c0005e6d:	8a 08                	mov    cl,BYTE PTR [eax]
c0005e6f:	09 ca                	or     edx,ecx
c0005e71:	31 c9                	xor    ecx,ecx
c0005e73:	8a 48 03             	mov    cl,BYTE PTR [eax+0x3]
c0005e76:	89 c8                	mov    eax,ecx
c0005e78:	c1 e0 18             	shl    eax,0x18
c0005e7b:	09 d0                	or     eax,edx
c0005e7d:	c3                   	ret    

c0005e7e <iso_733>:
c0005e7e:	e8 d6 ff ff ff       	call   c0005e59 <htohl_32>
c0005e83:	c3                   	ret    

c0005e84 <bclear_cache>:
c0005e84:	b8 00 00 00 00       	mov    eax,0x0
c0005e89:	8b 14 85 20 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe04e0]
c0005e90:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e96:	8b 14 85 80 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0480]
c0005e9d:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005ea3:	40                   	inc    eax
c0005ea4:	83 f8 10             	cmp    eax,0x10
c0005ea7:	75 e0                	jne    c0005e89 <bclear_cache+0x5>
c0005ea9:	c3                   	ret    

c0005eaa <bgrad_cache>:
c0005eaa:	83 fa 0e             	cmp    edx,0xe
c0005ead:	77 1c                	ja     c0005ecb <bgrad_cache+0x21>
c0005eaf:	56                   	push   esi
c0005eb0:	53                   	push   ebx
c0005eb1:	8d 14 90             	lea    edx,[eax+edx*4]
c0005eb4:	8b 32                	mov    esi,DWORD PTR [edx]
c0005eb6:	8d 58 3c             	lea    ebx,[eax+0x3c]
c0005eb9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0005ebc:	89 0a                	mov    DWORD PTR [edx],ecx
c0005ebe:	83 c2 04             	add    edx,0x4
c0005ec1:	39 da                	cmp    edx,ebx
c0005ec3:	75 f4                	jne    c0005eb9 <bgrad_cache+0xf>
c0005ec5:	89 70 3c             	mov    DWORD PTR [eax+0x3c],esi
c0005ec8:	5b                   	pop    ebx
c0005ec9:	5e                   	pop    esi
c0005eca:	c3                   	ret    
c0005ecb:	c3                   	ret    

c0005ecc <bclear>:
c0005ecc:	e8 b3 ff ff ff       	call   c0005e84 <bclear_cache>
c0005ed1:	c3                   	ret    

c0005ed2 <iso_break_all>:
c0005ed2:	b8 d0 00 02 c0       	mov    eax,0xc00200d0
c0005ed7:	ba 10 0a 02 c0       	mov    edx,0xc0020a10
c0005edc:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0005ee2:	05 94 00 00 00       	add    eax,0x94
c0005ee7:	39 d0                	cmp    eax,edx
c0005ee9:	75 f1                	jne    c0005edc <iso_break_all+0xa>
c0005eeb:	c3                   	ret    

c0005eec <ucscompare>:
c0005eec:	55                   	push   ebp
c0005eed:	57                   	push   edi
c0005eee:	56                   	push   esi
c0005eef:	53                   	push   ebx
c0005ef0:	83 ec 1c             	sub    esp,0x1c
c0005ef3:	89 d7                	mov    edi,edx
c0005ef5:	85 c9                	test   ecx,ecx
c0005ef7:	0f 8e ab 00 00 00    	jle    c0005fa8 <ucscompare+0xbc>
c0005efd:	89 c5                	mov    ebp,eax
c0005eff:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0005f02:	c1 e0 08             	shl    eax,0x8
c0005f05:	0f be 55 01          	movsx  edx,BYTE PTR [ebp+0x1]
c0005f09:	09 d0                	or     eax,edx
c0005f0b:	0f be 37             	movsx  esi,BYTE PTR [edi]
c0005f0e:	c1 e6 08             	shl    esi,0x8
c0005f11:	0f be 57 01          	movsx  edx,BYTE PTR [edi+0x1]
c0005f15:	09 d6                	or     esi,edx
c0005f17:	83 f8 3b             	cmp    eax,0x3b
c0005f1a:	0f 84 92 00 00 00    	je     c0005fb2 <ucscompare+0xc6>
c0005f20:	49                   	dec    ecx
c0005f21:	83 e1 fe             	and    ecx,0xfffffffe
c0005f24:	83 c1 02             	add    ecx,0x2
c0005f27:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005f2b:	bb 00 00 00 00       	mov    ebx,0x0
c0005f30:	83 ec 0c             	sub    esp,0xc
c0005f33:	50                   	push   eax
c0005f34:	e8 b7 a9 ff ff       	call   c00008f0 <tolower>
c0005f39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005f3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005f40:	e8 ab a9 ff ff       	call   c00008f0 <tolower>
c0005f45:	83 c4 10             	add    esp,0x10
c0005f48:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0005f4c:	75 6e                	jne    c0005fbc <ucscompare+0xd0>
c0005f4e:	83 c3 02             	add    ebx,0x2
c0005f51:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0005f55:	74 26                	je     c0005f7d <ucscompare+0x91>
c0005f57:	0f be 44 1d 00       	movsx  eax,BYTE PTR [ebp+ebx*1+0x0]
c0005f5c:	c1 e0 08             	shl    eax,0x8
c0005f5f:	0f be 54 1d 01       	movsx  edx,BYTE PTR [ebp+ebx*1+0x1]
c0005f64:	09 d0                	or     eax,edx
c0005f66:	0f be 34 1f          	movsx  esi,BYTE PTR [edi+ebx*1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	0f be 54 1f 01       	movsx  edx,BYTE PTR [edi+ebx*1+0x1]
c0005f72:	09 d6                	or     esi,edx
c0005f74:	83 f8 3b             	cmp    eax,0x3b
c0005f77:	75 b7                	jne    c0005f30 <ucscompare+0x44>
c0005f79:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0005f7d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005f81:	0f be 04 0f          	movsx  eax,BYTE PTR [edi+ecx*1]
c0005f85:	c1 e0 08             	shl    eax,0x8
c0005f88:	0f be 54 0f 01       	movsx  edx,BYTE PTR [edi+ecx*1+0x1]
c0005f8d:	09 d0                	or     eax,edx
c0005f8f:	83 f8 2f             	cmp    eax,0x2f
c0005f92:	74 2f                	je     c0005fc3 <ucscompare+0xd7>
c0005f94:	85 c0                	test   eax,eax
c0005f96:	0f 95 c0             	setne  al
c0005f99:	25 ff 00 00 00       	and    eax,0xff
c0005f9e:	f7 d8                	neg    eax
c0005fa0:	83 c4 1c             	add    esp,0x1c
c0005fa3:	5b                   	pop    ebx
c0005fa4:	5e                   	pop    esi
c0005fa5:	5f                   	pop    edi
c0005fa6:	5d                   	pop    ebp
c0005fa7:	c3                   	ret    
c0005fa8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005fb0:	eb cb                	jmp    c0005f7d <ucscompare+0x91>
c0005fb2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005fba:	eb c1                	jmp    c0005f7d <ucscompare+0x91>
c0005fbc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0005fc1:	eb dd                	jmp    c0005fa0 <ucscompare+0xb4>
c0005fc3:	b8 00 00 00 00       	mov    eax,0x0
c0005fc8:	eb d6                	jmp    c0005fa0 <ucscompare+0xb4>

c0005fca <fncompare>:
c0005fca:	55                   	push   ebp
c0005fcb:	57                   	push   edi
c0005fcc:	56                   	push   esi
c0005fcd:	53                   	push   ebx
c0005fce:	83 ec 1c             	sub    esp,0x1c
c0005fd1:	89 cd                	mov    ebp,ecx
c0005fd3:	85 d2                	test   edx,edx
c0005fd5:	7e 71                	jle    c0006048 <fncompare+0x7e>
c0005fd7:	89 c7                	mov    edi,eax
c0005fd9:	89 d6                	mov    esi,edx
c0005fdb:	8a 00                	mov    al,BYTE PTR [eax]
c0005fdd:	3c 3b                	cmp    al,0x3b
c0005fdf:	74 6e                	je     c000604f <fncompare+0x85>
c0005fe1:	bb 00 00 00 00       	mov    ebx,0x0
c0005fe6:	eb 32                	jmp    c000601a <fncompare+0x50>
c0005fe8:	83 ec 0c             	sub    esp,0xc
c0005feb:	0f be c0             	movsx  eax,al
c0005fee:	50                   	push   eax
c0005fef:	e8 fc a8 ff ff       	call   c00008f0 <tolower>
c0005ff4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ff8:	0f be 44 1d 00       	movsx  eax,BYTE PTR [ebp+ebx*1+0x0]
c0005ffd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006000:	e8 eb a8 ff ff       	call   c00008f0 <tolower>
c0006005:	83 c4 10             	add    esp,0x10
c0006008:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000600c:	75 48                	jne    c0006056 <fncompare+0x8c>
c000600e:	43                   	inc    ebx
c000600f:	39 de                	cmp    esi,ebx
c0006011:	74 19                	je     c000602c <fncompare+0x62>
c0006013:	8a 04 1f             	mov    al,BYTE PTR [edi+ebx*1]
c0006016:	3c 3b                	cmp    al,0x3b
c0006018:	74 12                	je     c000602c <fncompare+0x62>
c000601a:	3c 2e                	cmp    al,0x2e
c000601c:	75 ca                	jne    c0005fe8 <fncompare+0x1e>
c000601e:	8d 56 ff             	lea    edx,[esi-0x1]
c0006021:	39 da                	cmp    edx,ebx
c0006023:	74 07                	je     c000602c <fncompare+0x62>
c0006025:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c000602a:	75 bc                	jne    c0005fe8 <fncompare+0x1e>
c000602c:	8a 44 1d 00          	mov    al,BYTE PTR [ebp+ebx*1+0x0]
c0006030:	3c 2f                	cmp    al,0x2f
c0006032:	74 29                	je     c000605d <fncompare+0x93>
c0006034:	84 c0                	test   al,al
c0006036:	0f 95 c0             	setne  al
c0006039:	25 ff 00 00 00       	and    eax,0xff
c000603e:	f7 d8                	neg    eax
c0006040:	83 c4 1c             	add    esp,0x1c
c0006043:	5b                   	pop    ebx
c0006044:	5e                   	pop    esi
c0006045:	5f                   	pop    edi
c0006046:	5d                   	pop    ebp
c0006047:	c3                   	ret    
c0006048:	bb 00 00 00 00       	mov    ebx,0x0
c000604d:	eb dd                	jmp    c000602c <fncompare+0x62>
c000604f:	bb 00 00 00 00       	mov    ebx,0x0
c0006054:	eb d6                	jmp    c000602c <fncompare+0x62>
c0006056:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000605b:	eb e3                	jmp    c0006040 <fncompare+0x76>
c000605d:	b8 00 00 00 00       	mov    eax,0x0
c0006062:	eb dc                	jmp    c0006040 <fncompare+0x76>

c0006064 <isoReadDiscSector>:
c0006064:	83 ec 0c             	sub    esp,0xc
c0006067:	0f be 05 60 fb 01 c0 	movsx  eax,BYTE PTR ds:0xc001fb60
c000606e:	50                   	push   eax
c000606f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006073:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006077:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000607b:	e8 20 19 01 00       	call   c00179a0 <isoReadDiscSectorHelper>
c0006080:	83 c4 1c             	add    esp,0x1c
c0006083:	c3                   	ret    

c0006084 <bread_cache>:
c0006084:	55                   	push   ebp
c0006085:	57                   	push   edi
c0006086:	56                   	push   esi
c0006087:	53                   	push   ebx
c0006088:	83 ec 0c             	sub    esp,0xc
c000608b:	89 c6                	mov    esi,eax
c000608d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0006090:	3b 10                	cmp    edx,DWORD PTR [eax]
c0006092:	74 6a                	je     c00060fe <bread_cache+0x7a>
c0006094:	89 d7                	mov    edi,edx
c0006096:	ba 0e 00 00 00       	mov    edx,0xe
c000609b:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000609e:	39 38                	cmp    DWORD PTR [eax],edi
c00060a0:	74 61                	je     c0006103 <bread_cache+0x7f>
c00060a2:	4a                   	dec    edx
c00060a3:	83 fa ff             	cmp    edx,0xffffffff
c00060a6:	75 f3                	jne    c000609b <bread_cache+0x17>
c00060a8:	8b 06                	mov    eax,DWORD PTR [esi]
c00060aa:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00060ad:	74 69                	je     c0006118 <bread_cache+0x94>
c00060af:	bb 01 00 00 00       	mov    ebx,0x1
c00060b4:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00060b7:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00060ba:	74 0b                	je     c00060c7 <bread_cache+0x43>
c00060bc:	43                   	inc    ebx
c00060bd:	83 fb 10             	cmp    ebx,0x10
c00060c0:	75 f2                	jne    c00060b4 <bread_cache+0x30>
c00060c2:	bb 00 00 00 00       	mov    ebx,0x0
c00060c7:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00060ca:	83 ec 04             	sub    esp,0x4
c00060cd:	6a 01                	push   0x1
c00060cf:	57                   	push   edi
c00060d0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00060d3:	83 c0 04             	add    eax,0x4
c00060d6:	50                   	push   eax
c00060d7:	e8 88 ff ff ff       	call   c0006064 <isoReadDiscSector>
c00060dc:	83 c4 10             	add    esp,0x10
c00060df:	85 c0                	test   eax,eax
c00060e1:	78 2e                	js     c0006111 <bread_cache+0x8d>
c00060e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00060e6:	89 38                	mov    DWORD PTR [eax],edi
c00060e8:	89 da                	mov    edx,ebx
c00060ea:	89 f0                	mov    eax,esi
c00060ec:	e8 b9 fd ff ff       	call   c0005eaa <bgrad_cache>
c00060f1:	b8 0f 00 00 00       	mov    eax,0xf
c00060f6:	83 c4 0c             	add    esp,0xc
c00060f9:	5b                   	pop    ebx
c00060fa:	5e                   	pop    esi
c00060fb:	5f                   	pop    edi
c00060fc:	5d                   	pop    ebp
c00060fd:	c3                   	ret    
c00060fe:	ba 0f 00 00 00       	mov    edx,0xf
c0006103:	89 f0                	mov    eax,esi
c0006105:	e8 a0 fd ff ff       	call   c0005eaa <bgrad_cache>
c000610a:	b8 0f 00 00 00       	mov    eax,0xf
c000610f:	eb e5                	jmp    c00060f6 <bread_cache+0x72>
c0006111:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006116:	eb de                	jmp    c00060f6 <bread_cache+0x72>
c0006118:	bb 00 00 00 00       	mov    ebx,0x0
c000611d:	eb a8                	jmp    c00060c7 <bread_cache+0x43>

c000611f <biread>:
c000611f:	83 ec 0c             	sub    esp,0xc
c0006122:	89 c2                	mov    edx,eax
c0006124:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c0006129:	e8 56 ff ff ff       	call   c0006084 <bread_cache>
c000612e:	83 c4 0c             	add    esp,0xc
c0006131:	c3                   	ret    

c0006132 <bdread>:
c0006132:	83 ec 0c             	sub    esp,0xc
c0006135:	89 c2                	mov    edx,eax
c0006137:	b8 20 fb 01 c0       	mov    eax,0xc001fb20
c000613c:	e8 43 ff ff ff       	call   c0006084 <bread_cache>
c0006141:	83 c4 0c             	add    esp,0xc
c0006144:	c3                   	ret    

c0006145 <strnicmp>:
c0006145:	55                   	push   ebp
c0006146:	57                   	push   edi
c0006147:	56                   	push   esi
c0006148:	53                   	push   ebx
c0006149:	83 ec 0c             	sub    esp,0xc
c000614c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006150:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006154:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006158:	85 ff                	test   edi,edi
c000615a:	74 51                	je     c00061ad <strnicmp+0x68>
c000615c:	8a 03                	mov    al,BYTE PTR [ebx]
c000615e:	84 c0                	test   al,al
c0006160:	74 52                	je     c00061b4 <strnicmp+0x6f>
c0006162:	8a 16                	mov    dl,BYTE PTR [esi]
c0006164:	84 d2                	test   dl,dl
c0006166:	74 53                	je     c00061bb <strnicmp+0x76>
c0006168:	01 df                	add    edi,ebx
c000616a:	eb 32                	jmp    c000619e <strnicmp+0x59>
c000616c:	83 ec 0c             	sub    esp,0xc
c000616f:	0f be c0             	movsx  eax,al
c0006172:	50                   	push   eax
c0006173:	e8 78 a7 ff ff       	call   c00008f0 <tolower>
c0006178:	89 c5                	mov    ebp,eax
c000617a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000617d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006180:	e8 6b a7 ff ff       	call   c00008f0 <tolower>
c0006185:	43                   	inc    ebx
c0006186:	46                   	inc    esi
c0006187:	83 c4 10             	add    esp,0x10
c000618a:	29 c5                	sub    ebp,eax
c000618c:	75 39                	jne    c00061c7 <strnicmp+0x82>
c000618e:	39 fb                	cmp    ebx,edi
c0006190:	74 30                	je     c00061c2 <strnicmp+0x7d>
c0006192:	8a 03                	mov    al,BYTE PTR [ebx]
c0006194:	84 c0                	test   al,al
c0006196:	74 39                	je     c00061d1 <strnicmp+0x8c>
c0006198:	8a 16                	mov    dl,BYTE PTR [esi]
c000619a:	84 d2                	test   dl,dl
c000619c:	74 08                	je     c00061a6 <strnicmp+0x61>
c000619e:	38 d0                	cmp    al,dl
c00061a0:	75 ca                	jne    c000616c <strnicmp+0x27>
c00061a2:	43                   	inc    ebx
c00061a3:	46                   	inc    esi
c00061a4:	eb e8                	jmp    c000618e <strnicmp+0x49>
c00061a6:	bd 00 00 00 00       	mov    ebp,0x0
c00061ab:	eb 1a                	jmp    c00061c7 <strnicmp+0x82>
c00061ad:	bd 00 00 00 00       	mov    ebp,0x0
c00061b2:	eb 13                	jmp    c00061c7 <strnicmp+0x82>
c00061b4:	bd 00 00 00 00       	mov    ebp,0x0
c00061b9:	eb 0c                	jmp    c00061c7 <strnicmp+0x82>
c00061bb:	bd 00 00 00 00       	mov    ebp,0x0
c00061c0:	eb 05                	jmp    c00061c7 <strnicmp+0x82>
c00061c2:	bd 00 00 00 00       	mov    ebp,0x0
c00061c7:	89 e8                	mov    eax,ebp
c00061c9:	83 c4 0c             	add    esp,0xc
c00061cc:	5b                   	pop    ebx
c00061cd:	5e                   	pop    esi
c00061ce:	5f                   	pop    edi
c00061cf:	5d                   	pop    ebp
c00061d0:	c3                   	ret    
c00061d1:	bd 00 00 00 00       	mov    ebp,0x0
c00061d6:	eb ef                	jmp    c00061c7 <strnicmp+0x82>

c00061d8 <find_object>:
c00061d8:	55                   	push   ebp
c00061d9:	57                   	push   edi
c00061da:	56                   	push   esi
c00061db:	53                   	push   ebx
c00061dc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00061e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00061e6:	89 d3                	mov    ebx,edx
c00061e8:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00061ec:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c00061f3:	83 3d b4 09 02 c0 00 	cmp    DWORD PTR ds:0xc00209b4,0x0
c00061fa:	75 14                	jne    c0006210 <find_object+0x38>
c00061fc:	85 f6                	test   esi,esi
c00061fe:	0f 8e f0 01 00 00    	jle    c00063f4 <find_object+0x21c>
c0006204:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006207:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000620b:	e9 9f 01 00 00       	jmp    c00063af <find_object+0x1d7>
c0006210:	89 c2                	mov    edx,eax
c0006212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006216:	e8 49 fb ff ff       	call   c0005d64 <utf2ucs>
c000621b:	eb df                	jmp    c00061fc <find_object+0x24>
c000621d:	31 d2                	xor    edx,edx
c000621f:	8a 55 20             	mov    dl,BYTE PTR [ebp+0x20]
c0006222:	89 c6                	mov    esi,eax
c0006224:	81 e6 ff 00 00 00    	and    esi,0xff
c000622a:	29 d6                	sub    esi,edx
c000622c:	8d 5c 15 21          	lea    ebx,[ebp+edx*1+0x21]
c0006230:	f6 45 20 01          	test   BYTE PTR [ebp+0x20],0x1
c0006234:	74 3d                	je     c0006273 <find_object+0x9b>
c0006236:	83 ee 21             	sub    esi,0x21
c0006239:	83 fe 03             	cmp    esi,0x3
c000623c:	7e 08                	jle    c0006246 <find_object+0x6e>
c000623e:	8a 43 03             	mov    al,BYTE PTR [ebx+0x3]
c0006241:	48                   	dec    eax
c0006242:	3c 01                	cmp    al,0x1
c0006244:	76 69                	jbe    c00062af <find_object+0xd7>
c0006246:	31 d2                	xor    edx,edx
c0006248:	8a 55 20             	mov    dl,BYTE PTR [ebp+0x20]
c000624b:	8d 45 21             	lea    eax,[ebp+0x21]
c000624e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006252:	e8 73 fd ff ff       	call   c0005fca <fncompare>
c0006257:	85 c0                	test   eax,eax
c0006259:	0f 85 b1 00 00 00    	jne    c0006310 <find_object+0x138>
c000625f:	31 c0                	xor    eax,eax
c0006261:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c0006264:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0006268:	0f 85 a2 00 00 00    	jne    c0006310 <find_object+0x138>
c000626e:	e9 02 01 00 00       	jmp    c0006375 <find_object+0x19d>
c0006273:	43                   	inc    ebx
c0006274:	83 ee 22             	sub    esi,0x22
c0006277:	eb c0                	jmp    c0006239 <find_object+0x61>
c0006279:	0f be 7b 02          	movsx  edi,BYTE PTR [ebx+0x2]
c000627d:	83 ef 05             	sub    edi,0x5
c0006280:	83 ec 04             	sub    esp,0x4
c0006283:	57                   	push   edi
c0006284:	8d 43 05             	lea    eax,[ebx+0x5]
c0006287:	50                   	push   eax
c0006288:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000628c:	50                   	push   eax
c000628d:	e8 be a3 ff ff       	call   c0000650 <strncpy>
c0006292:	c6 44 3c 30 00       	mov    BYTE PTR [esp+edi*1+0x30],0x0
c0006297:	83 c4 10             	add    esp,0x10
c000629a:	0f be 43 02          	movsx  eax,BYTE PTR [ebx+0x2]
c000629e:	29 c6                	sub    esi,eax
c00062a0:	01 c3                	add    ebx,eax
c00062a2:	83 fe 03             	cmp    esi,0x3
c00062a5:	7e 21                	jle    c00062c8 <find_object+0xf0>
c00062a7:	8a 43 03             	mov    al,BYTE PTR [ebx+0x3]
c00062aa:	48                   	dec    eax
c00062ab:	3c 01                	cmp    al,0x1
c00062ad:	77 19                	ja     c00062c8 <find_object+0xf0>
c00062af:	83 ec 04             	sub    esp,0x4
c00062b2:	6a 02                	push   0x2
c00062b4:	68 80 d5 01 c0       	push   0xc001d580
c00062b9:	53                   	push   ebx
c00062ba:	e8 c1 a4 ff ff       	call   c0000780 <strncmp>
c00062bf:	83 c4 10             	add    esp,0x10
c00062c2:	85 c0                	test   eax,eax
c00062c4:	75 d4                	jne    c000629a <find_object+0xc2>
c00062c6:	eb b1                	jmp    c0006279 <find_object+0xa1>
c00062c8:	85 ff                	test   edi,edi
c00062ca:	0f 8e 76 ff ff ff    	jle    c0006246 <find_object+0x6e>
c00062d0:	83 ec 08             	sub    esp,0x8
c00062d3:	6a 2f                	push   0x2f
c00062d5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00062d9:	57                   	push   edi
c00062da:	e8 71 a4 ff ff       	call   c0000750 <strchr>
c00062df:	83 c4 10             	add    esp,0x10
c00062e2:	85 c0                	test   eax,eax
c00062e4:	0f 84 98 00 00 00    	je     c0006382 <find_object+0x1aa>
c00062ea:	29 f8                	sub    eax,edi
c00062ec:	83 ec 04             	sub    esp,0x4
c00062ef:	50                   	push   eax
c00062f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00062f4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00062f8:	50                   	push   eax
c00062f9:	e8 47 fe ff ff       	call   c0006145 <strnicmp>
c00062fe:	83 c4 10             	add    esp,0x10
c0006301:	85 c0                	test   eax,eax
c0006303:	75 0b                	jne    c0006310 <find_object+0x138>
c0006305:	31 c0                	xor    eax,eax
c0006307:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c000630a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000630e:	74 65                	je     c0006375 <find_object+0x19d>
c0006310:	31 c0                	xor    eax,eax
c0006312:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006315:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006319:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000631d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006323:	7f 71                	jg     c0006396 <find_object+0x1be>
c0006325:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006329:	39 c1                	cmp    ecx,eax
c000632b:	7d 69                	jge    c0006396 <find_object+0x1be>
c000632d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006331:	8b 04 85 80 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0480]
c0006338:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000633c:	8d 6c 10 04          	lea    ebp,[eax+edx*1+0x4]
c0006340:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006343:	84 c0                	test   al,al
c0006345:	74 4f                	je     c0006396 <find_object+0x1be>
c0006347:	8b 3d b4 09 02 c0    	mov    edi,DWORD PTR ds:0xc00209b4
c000634d:	85 ff                	test   edi,edi
c000634f:	0f 84 c8 fe ff ff    	je     c000621d <find_object+0x45>
c0006355:	31 c9                	xor    ecx,ecx
c0006357:	8a 4d 20             	mov    cl,BYTE PTR [ebp+0x20]
c000635a:	8d 45 21             	lea    eax,[ebp+0x21]
c000635d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006361:	e8 86 fb ff ff       	call   c0005eec <ucscompare>
c0006366:	85 c0                	test   eax,eax
c0006368:	75 a6                	jne    c0006310 <find_object+0x138>
c000636a:	31 c0                	xor    eax,eax
c000636c:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c000636f:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0006373:	75 9b                	jne    c0006310 <find_object+0x138>
c0006375:	89 e8                	mov    eax,ebp
c0006377:	81 c4 2c 01 00 00    	add    esp,0x12c
c000637d:	5b                   	pop    ebx
c000637e:	5e                   	pop    esi
c000637f:	5f                   	pop    edi
c0006380:	5d                   	pop    ebp
c0006381:	c3                   	ret    
c0006382:	83 ec 0c             	sub    esp,0xc
c0006385:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006389:	e8 d2 a1 ff ff       	call   c0000560 <strlen>
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	e9 56 ff ff ff       	jmp    c00062ec <find_object+0x114>
c0006396:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000639a:	81 ac 24 40 01 00 00 00 08 00 00 	sub    DWORD PTR [esp+0x140],0x800
c00063a5:	83 bc 24 40 01 00 00 00 	cmp    DWORD PTR [esp+0x140],0x0
c00063ad:	7e 3e                	jle    c00063ed <find_object+0x215>
c00063af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063b3:	e8 67 fd ff ff       	call   c000611f <biread>
c00063b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00063bc:	85 c0                	test   eax,eax
c00063be:	78 3e                	js     c00063fe <find_object+0x226>
c00063c0:	8b 94 24 40 01 00 00 	mov    edx,DWORD PTR [esp+0x140]
c00063c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00063cb:	85 d2                	test   edx,edx
c00063cd:	7e c7                	jle    c0006396 <find_object+0x1be>
c00063cf:	8b 04 85 80 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0480]
c00063d6:	8d 68 04             	lea    ebp,[eax+0x4]
c00063d9:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00063dc:	84 c0                	test   al,al
c00063de:	74 b6                	je     c0006396 <find_object+0x1be>
c00063e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00063e8:	e9 5a ff ff ff       	jmp    c0006347 <find_object+0x16f>
c00063ed:	bd 00 00 00 00       	mov    ebp,0x0
c00063f2:	eb 81                	jmp    c0006375 <find_object+0x19d>
c00063f4:	bd 00 00 00 00       	mov    ebp,0x0
c00063f9:	e9 77 ff ff ff       	jmp    c0006375 <find_object+0x19d>
c00063fe:	bd 00 00 00 00       	mov    ebp,0x0
c0006403:	e9 6d ff ff ff       	jmp    c0006375 <find_object+0x19d>

c0006408 <find_object_path>:
c0006408:	55                   	push   ebp
c0006409:	57                   	push   edi
c000640a:	56                   	push   esi
c000640b:	53                   	push   ebx
c000640c:	83 ec 1c             	sub    esp,0x1c
c000640f:	89 c6                	mov    esi,eax
c0006411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006415:	89 cf                	mov    edi,ecx
c0006417:	eb 03                	jmp    c000641c <find_object_path+0x14>
c0006419:	8d 73 01             	lea    esi,[ebx+0x1]
c000641c:	83 ec 08             	sub    esp,0x8
c000641f:	6a 2f                	push   0x2f
c0006421:	56                   	push   esi
c0006422:	e8 29 a3 ff ff       	call   c0000750 <strchr>
c0006427:	89 c3                	mov    ebx,eax
c0006429:	83 c4 10             	add    esp,0x10
c000642c:	85 c0                	test   eax,eax
c000642e:	74 33                	je     c0006463 <find_object_path+0x5b>
c0006430:	39 de                	cmp    esi,ebx
c0006432:	74 e5                	je     c0006419 <find_object_path+0x11>
c0006434:	8d 47 0a             	lea    eax,[edi+0xa]
c0006437:	e8 42 fa ff ff       	call   c0005e7e <iso_733>
c000643c:	89 c5                	mov    ebp,eax
c000643e:	8d 47 02             	lea    eax,[edi+0x2]
c0006441:	e8 38 fa ff ff       	call   c0005e7e <iso_733>
c0006446:	83 ec 0c             	sub    esp,0xc
c0006449:	55                   	push   ebp
c000644a:	89 c1                	mov    ecx,eax
c000644c:	ba 01 00 00 00       	mov    edx,0x1
c0006451:	89 f0                	mov    eax,esi
c0006453:	e8 80 fd ff ff       	call   c00061d8 <find_object>
c0006458:	89 c7                	mov    edi,eax
c000645a:	83 c4 10             	add    esp,0x10
c000645d:	85 c0                	test   eax,eax
c000645f:	75 b8                	jne    c0006419 <find_object_path+0x11>
c0006461:	eb 0e                	jmp    c0006471 <find_object_path+0x69>
c0006463:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006466:	75 11                	jne    c0006479 <find_object_path+0x71>
c0006468:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000646d:	74 32                	je     c00064a1 <find_object_path+0x99>
c000646f:	89 f8                	mov    eax,edi
c0006471:	83 c4 1c             	add    esp,0x1c
c0006474:	5b                   	pop    ebx
c0006475:	5e                   	pop    esi
c0006476:	5f                   	pop    edi
c0006477:	5d                   	pop    ebp
c0006478:	c3                   	ret    
c0006479:	8d 47 0a             	lea    eax,[edi+0xa]
c000647c:	e8 fd f9 ff ff       	call   c0005e7e <iso_733>
c0006481:	89 c3                	mov    ebx,eax
c0006483:	8d 47 02             	lea    eax,[edi+0x2]
c0006486:	e8 f3 f9 ff ff       	call   c0005e7e <iso_733>
c000648b:	83 ec 0c             	sub    esp,0xc
c000648e:	53                   	push   ebx
c000648f:	89 c1                	mov    ecx,eax
c0006491:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006495:	89 f0                	mov    eax,esi
c0006497:	e8 3c fd ff ff       	call   c00061d8 <find_object>
c000649c:	83 c4 10             	add    esp,0x10
c000649f:	eb d0                	jmp    c0006471 <find_object_path+0x69>
c00064a1:	b8 00 00 00 00       	mov    eax,0x0
c00064a6:	eb c9                	jmp    c0006471 <find_object_path+0x69>

c00064a8 <stricmp>:
c00064a8:	55                   	push   ebp
c00064a9:	57                   	push   edi
c00064aa:	56                   	push   esi
c00064ab:	53                   	push   ebx
c00064ac:	83 ec 0c             	sub    esp,0xc
c00064af:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00064b3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00064b7:	46                   	inc    esi
c00064b8:	47                   	inc    edi
c00064b9:	0f b6 6f ff          	movzx  ebp,BYTE PTR [edi-0x1]
c00064bd:	81 e5 ff 00 00 00    	and    ebp,0xff
c00064c3:	83 ec 0c             	sub    esp,0xc
c00064c6:	31 c0                	xor    eax,eax
c00064c8:	8a 46 ff             	mov    al,BYTE PTR [esi-0x1]
c00064cb:	50                   	push   eax
c00064cc:	e8 ff a3 ff ff       	call   c00008d0 <toupper>
c00064d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064d4:	e8 17 a4 ff ff       	call   c00008f0 <tolower>
c00064d9:	89 c3                	mov    ebx,eax
c00064db:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00064de:	e8 ed a3 ff ff       	call   c00008d0 <toupper>
c00064e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e6:	e8 05 a4 ff ff       	call   c00008f0 <tolower>
c00064eb:	83 c4 10             	add    esp,0x10
c00064ee:	39 c3                	cmp    ebx,eax
c00064f0:	75 04                	jne    c00064f6 <stricmp+0x4e>
c00064f2:	85 db                	test   ebx,ebx
c00064f4:	75 c1                	jne    c00064b7 <stricmp+0xf>
c00064f6:	29 c3                	sub    ebx,eax
c00064f8:	89 d8                	mov    eax,ebx
c00064fa:	83 c4 0c             	add    esp,0xc
c00064fd:	5b                   	pop    ebx
c00064fe:	5e                   	pop    esi
c00064ff:	5f                   	pop    edi
c0006500:	5d                   	pop    ebp
c0006501:	c3                   	ret    

c0006502 <iso_open>:
c0006502:	55                   	push   ebp
c0006503:	57                   	push   edi
c0006504:	56                   	push   esi
c0006505:	53                   	push   ebx
c0006506:	83 ec 0c             	sub    esp,0xc
c0006509:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000650e:	0f 95 c0             	setne  al
c0006511:	25 ff 00 00 00       	and    eax,0xff
c0006516:	89 c7                	mov    edi,eax
c0006518:	b9 80 09 02 c0       	mov    ecx,0xc0020980
c000651d:	89 c2                	mov    edx,eax
c000651f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006523:	e8 e0 fe ff ff       	call   c0006408 <find_object_path>
c0006528:	85 c0                	test   eax,eax
c000652a:	0f 84 93 00 00 00    	je     c00065c3 <iso_open+0xc1>
c0006530:	89 c6                	mov    esi,eax
c0006532:	83 3d 40 00 02 c0 00 	cmp    DWORD PTR ds:0xc0020040,0x0
c0006539:	0f 84 92 00 00 00    	je     c00065d1 <iso_open+0xcf>
c000653f:	ba d4 00 02 c0       	mov    edx,0xc00200d4
c0006544:	bb 01 00 00 00       	mov    ebx,0x1
c0006549:	83 3a 00             	cmp    DWORD PTR [edx],0x0
c000654c:	74 13                	je     c0006561 <iso_open+0x5f>
c000654e:	43                   	inc    ebx
c000654f:	81 c2 94 00 00 00    	add    edx,0x94
c0006555:	83 fb 10             	cmp    ebx,0x10
c0006558:	75 ef                	jne    c0006549 <iso_open+0x47>
c000655a:	bb ff ff ff ff       	mov    ebx,0xffffffff
c000655f:	eb 58                	jmp    c00065b9 <iso_open+0xb7>
c0006561:	8d 04 db             	lea    eax,[ebx+ebx*8]
c0006564:	8d 04 83             	lea    eax,[ebx+eax*4]
c0006567:	c7 04 85 40 00 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdffc0],0xffffffff
c0006572:	83 fb 0f             	cmp    ebx,0xf
c0006575:	7f 53                	jg     c00065ca <iso_open+0xc8>
c0006577:	8d 46 02             	lea    eax,[esi+0x2]
c000657a:	e8 ff f8 ff ff       	call   c0005e7e <iso_733>
c000657f:	8d 14 db             	lea    edx,[ebx+ebx*8]
c0006582:	8d 14 93             	lea    edx,[ebx+edx*4]
c0006585:	c1 e2 02             	shl    edx,0x2
c0006588:	8d aa 40 00 02 c0    	lea    ebp,[edx-0x3ffdffc0]
c000658e:	89 82 40 00 02 c0    	mov    DWORD PTR [edx-0x3ffdffc0],eax
c0006594:	89 ba 44 00 02 c0    	mov    DWORD PTR [edx-0x3ffdffbc],edi
c000659a:	c7 82 48 00 02 c0 00 00 00 00 	mov    DWORD PTR [edx-0x3ffdffb8],0x0
c00065a4:	8d 46 0a             	lea    eax,[esi+0xa]
c00065a7:	e8 d2 f8 ff ff       	call   c0005e7e <iso_733>
c00065ac:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00065af:	c7 85 90 00 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x90],0x0
c00065b9:	89 d8                	mov    eax,ebx
c00065bb:	83 c4 0c             	add    esp,0xc
c00065be:	5b                   	pop    ebx
c00065bf:	5e                   	pop    esi
c00065c0:	5f                   	pop    edi
c00065c1:	5d                   	pop    ebp
c00065c2:	c3                   	ret    
c00065c3:	bb ff ff ff ff       	mov    ebx,0xffffffff
c00065c8:	eb ef                	jmp    c00065b9 <iso_open+0xb7>
c00065ca:	bb ff ff ff ff       	mov    ebx,0xffffffff
c00065cf:	eb e8                	jmp    c00065b9 <iso_open+0xb7>
c00065d1:	c7 05 40 00 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0020040,0xffffffff
c00065db:	bb 00 00 00 00       	mov    ebx,0x0
c00065e0:	eb 95                	jmp    c0006577 <iso_open+0x75>

c00065e2 <iso_close>:
c00065e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065e6:	83 f8 0f             	cmp    eax,0xf
c00065e9:	7f 11                	jg     c00065fc <iso_close+0x1a>
c00065eb:	8d 14 c0             	lea    edx,[eax+eax*8]
c00065ee:	8d 04 90             	lea    eax,[eax+edx*4]
c00065f1:	c7 04 85 40 00 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffdffc0],0x0
c00065fc:	e8 83 f8 ff ff       	call   c0005e84 <bclear_cache>
c0006601:	c3                   	ret    

c0006602 <iso_read>:
c0006602:	55                   	push   ebp
c0006603:	57                   	push   edi
c0006604:	56                   	push   esi
c0006605:	53                   	push   ebx
c0006606:	83 ec 1c             	sub    esp,0x1c
c0006609:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000660d:	83 fd 0f             	cmp    ebp,0xf
c0006610:	0f 8f ba 01 00 00    	jg     c00067d0 <iso_read+0x1ce>
c0006616:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c000661a:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c000661e:	83 3c 85 40 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdffc0],0x0
c0006626:	0f 84 b0 01 00 00    	je     c00067dc <iso_read+0x1da>
c000662c:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c0006630:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c0006634:	8b 04 85 d0 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff30]
c000663b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000663f:	85 c0                	test   eax,eax
c0006641:	0f 85 a1 01 00 00    	jne    c00067e8 <iso_read+0x1e6>
c0006647:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000664c:	0f 84 71 01 00 00    	je     c00067c3 <iso_read+0x1c1>
c0006652:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c0006656:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c000665a:	8d 14 85 40 00 02 c0 	lea    edx,[eax*4-0x3ffdffc0]
c0006661:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0006664:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0006667:	29 c2                	sub    edx,eax
c0006669:	89 d1                	mov    ecx,edx
c000666b:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c000666f:	76 04                	jbe    c0006675 <iso_read+0x73>
c0006671:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006675:	85 c9                	test   ecx,ecx
c0006677:	0f 84 42 01 00 00    	je     c00067bf <iso_read+0x1bd>
c000667d:	8d 1c ed 00 00 00 00 	lea    ebx,[ebp*8+0x0]
c0006684:	e9 b7 00 00 00       	jmp    c0006740 <iso_read+0x13e>
c0006689:	8d 91 ff 07 00 00    	lea    edx,[ecx+0x7ff]
c000668f:	e9 e9 00 00 00       	jmp    c000677d <iso_read+0x17b>
c0006694:	ba 20 00 00 00       	mov    edx,0x20
c0006699:	e9 e2 00 00 00       	jmp    c0006780 <iso_read+0x17e>
c000669e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00066a2:	39 ca                	cmp    edx,ecx
c00066a4:	7e 04                	jle    c00066aa <iso_read+0xa8>
c00066a6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00066aa:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c00066ad:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c00066b1:	c1 e8 0b             	shr    eax,0xb
c00066b4:	03 04 95 40 00 02 c0 	add    eax,DWORD PTR [edx*4-0x3ffdffc0]
c00066bb:	e8 72 fa ff ff       	call   c0006132 <bdread>
c00066c0:	85 c0                	test   eax,eax
c00066c2:	0f 88 2c 01 00 00    	js     c00067f4 <iso_read+0x1f2>
c00066c8:	8b 14 85 20 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe04e0]
c00066cf:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00066d2:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00066d6:	8b 04 85 48 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdffb8]
c00066dd:	25 ff 07 00 00       	and    eax,0x7ff
c00066e2:	8d 74 02 04          	lea    esi,[edx+eax*1+0x4]
c00066e6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00066ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066f0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00066f4:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c00066f8:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00066fb:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00066ff:	8d 14 85 40 00 02 c0 	lea    edx,[eax*4-0x3ffdffc0]
c0006706:	89 f8                	mov    eax,edi
c0006708:	03 42 08             	add    eax,DWORD PTR [edx+0x8]
c000670b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000670e:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c0006712:	29 7c 24 38          	sub    DWORD PTR [esp+0x38],edi
c0006716:	0f 84 a7 00 00 00    	je     c00067c3 <iso_read+0x1c1>
c000671c:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c000671f:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c0006723:	8b 14 95 4c 00 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdffb4]
c000672a:	29 c2                	sub    edx,eax
c000672c:	89 d1                	mov    ecx,edx
c000672e:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c0006732:	76 04                	jbe    c0006738 <iso_read+0x136>
c0006734:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006738:	85 c9                	test   ecx,ecx
c000673a:	0f 84 83 00 00 00    	je     c00067c3 <iso_read+0x1c1>
c0006740:	89 c6                	mov    esi,eax
c0006742:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006748:	ba 00 08 00 00       	mov    edx,0x800
c000674d:	29 f2                	sub    edx,esi
c000674f:	81 fa 00 08 00 00    	cmp    edx,0x800
c0006755:	0f 85 43 ff ff ff    	jne    c000669e <iso_read+0x9c>
c000675b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006761:	0f 8e 37 ff ff ff    	jle    c000669e <iso_read+0x9c>
c0006767:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000676d:	0f 8f 21 ff ff ff    	jg     c0006694 <iso_read+0x92>
c0006773:	89 ca                	mov    edx,ecx
c0006775:	85 c9                	test   ecx,ecx
c0006777:	0f 88 0c ff ff ff    	js     c0006689 <iso_read+0x87>
c000677d:	c1 fa 0b             	sar    edx,0xb
c0006780:	89 d6                	mov    esi,edx
c0006782:	c1 e6 0b             	shl    esi,0xb
c0006785:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006789:	83 ec 04             	sub    esp,0x4
c000678c:	52                   	push   edx
c000678d:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c0006790:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c0006794:	c1 e8 0b             	shr    eax,0xb
c0006797:	03 04 95 40 00 02 c0 	add    eax,DWORD PTR [edx*4-0x3ffdffc0]
c000679e:	50                   	push   eax
c000679f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00067a3:	e8 bc f8 ff ff       	call   c0006064 <isoReadDiscSector>
c00067a8:	83 c4 10             	add    esp,0x10
c00067ab:	85 c0                	test   eax,eax
c00067ad:	0f 8f 3d ff ff ff    	jg     c00066f0 <iso_read+0xee>
c00067b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067b8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067bd:	eb 09                	jmp    c00067c8 <iso_read+0x1c6>
c00067bf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00067c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00067c7:	99                   	cdq    
c00067c8:	83 c4 1c             	add    esp,0x1c
c00067cb:	5b                   	pop    ebx
c00067cc:	5e                   	pop    esi
c00067cd:	5f                   	pop    edi
c00067ce:	5d                   	pop    ebp
c00067cf:	c3                   	ret    
c00067d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067d5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067da:	eb ec                	jmp    c00067c8 <iso_read+0x1c6>
c00067dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067e1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067e6:	eb e0                	jmp    c00067c8 <iso_read+0x1c6>
c00067e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067ed:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067f2:	eb d4                	jmp    c00067c8 <iso_read+0x1c6>
c00067f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067fe:	eb c8                	jmp    c00067c8 <iso_read+0x1c6>

c0006800 <iso_seek>:
c0006800:	53                   	push   ebx
c0006801:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006805:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006809:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000680d:	83 f8 0f             	cmp    eax,0xf
c0006810:	0f 8f a4 00 00 00    	jg     c00068ba <iso_seek+0xba>
c0006816:	8d 1c c0             	lea    ebx,[eax+eax*8]
c0006819:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000681c:	83 3c 9d 40 00 02 c0 00 	cmp    DWORD PTR [ebx*4-0x3ffdffc0],0x0
c0006824:	0f 84 9c 00 00 00    	je     c00068c6 <iso_seek+0xc6>
c000682a:	8d 1c c0             	lea    ebx,[eax+eax*8]
c000682d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0006830:	83 3c 9d d0 00 02 c0 00 	cmp    DWORD PTR [ebx*4-0x3ffdff30],0x0
c0006838:	0f 85 94 00 00 00    	jne    c00068d2 <iso_seek+0xd2>
c000683e:	83 fa 01             	cmp    edx,0x1
c0006841:	74 53                	je     c0006896 <iso_seek+0x96>
c0006843:	83 fa 02             	cmp    edx,0x2
c0006846:	74 5d                	je     c00068a5 <iso_seek+0xa5>
c0006848:	85 d2                	test   edx,edx
c000684a:	74 0c                	je     c0006858 <iso_seek+0x58>
c000684c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006851:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006856:	eb 3c                	jmp    c0006894 <iso_seek+0x94>
c0006858:	89 0c 9d 48 00 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdffb8],ecx
c000685f:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006862:	8d 14 90             	lea    edx,[eax+edx*4]
c0006865:	8b 0c 95 4c 00 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdffb4]
c000686c:	39 0c 95 48 00 02 c0 	cmp    DWORD PTR [edx*4-0x3ffdffb8],ecx
c0006873:	76 0d                	jbe    c0006882 <iso_seek+0x82>
c0006875:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006878:	8d 14 90             	lea    edx,[eax+edx*4]
c000687b:	89 0c 95 48 00 02 c0 	mov    DWORD PTR [edx*4-0x3ffdffb8],ecx
c0006882:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006885:	8d 04 90             	lea    eax,[eax+edx*4]
c0006888:	8b 04 85 48 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdffb8]
c000688f:	ba 00 00 00 00       	mov    edx,0x0
c0006894:	5b                   	pop    ebx
c0006895:	c3                   	ret    
c0006896:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006899:	8d 14 90             	lea    edx,[eax+edx*4]
c000689c:	01 0c 95 48 00 02 c0 	add    DWORD PTR [edx*4-0x3ffdffb8],ecx
c00068a3:	eb ba                	jmp    c000685f <iso_seek+0x5f>
c00068a5:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068a8:	8d 14 90             	lea    edx,[eax+edx*4]
c00068ab:	8d 14 95 40 00 02 c0 	lea    edx,[edx*4-0x3ffdffc0]
c00068b2:	03 4a 0c             	add    ecx,DWORD PTR [edx+0xc]
c00068b5:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068b8:	eb a5                	jmp    c000685f <iso_seek+0x5f>
c00068ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068c4:	eb ce                	jmp    c0006894 <iso_seek+0x94>
c00068c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068d0:	eb c2                	jmp    c0006894 <iso_seek+0x94>
c00068d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068d7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068dc:	eb b6                	jmp    c0006894 <iso_seek+0x94>

c00068de <iso_tell>:
c00068de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00068e2:	83 f8 0f             	cmp    eax,0xf
c00068e5:	7f 33                	jg     c000691a <iso_tell+0x3c>
c00068e7:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068ea:	8d 14 90             	lea    edx,[eax+edx*4]
c00068ed:	83 3c 95 40 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdffc0],0x0
c00068f5:	74 2e                	je     c0006925 <iso_tell+0x47>
c00068f7:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068fa:	8d 14 90             	lea    edx,[eax+edx*4]
c00068fd:	83 3c 95 d0 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdff30],0x0
c0006905:	75 29                	jne    c0006930 <iso_tell+0x52>
c0006907:	8d 14 c0             	lea    edx,[eax+eax*8]
c000690a:	8d 04 90             	lea    eax,[eax+edx*4]
c000690d:	8b 04 85 48 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdffb8]
c0006914:	ba 00 00 00 00       	mov    edx,0x0
c0006919:	c3                   	ret    
c000691a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000691f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006924:	c3                   	ret    
c0006925:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000692a:	ba ff ff ff ff       	mov    edx,0xffffffff
c000692f:	c3                   	ret    
c0006930:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006935:	ba ff ff ff ff       	mov    edx,0xffffffff
c000693a:	c3                   	ret    

c000693b <iso_total>:
c000693b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000693f:	83 f8 0f             	cmp    eax,0xf
c0006942:	7f 2e                	jg     c0006972 <iso_total+0x37>
c0006944:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006947:	8d 14 90             	lea    edx,[eax+edx*4]
c000694a:	83 3c 95 40 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdffc0],0x0
c0006952:	74 24                	je     c0006978 <iso_total+0x3d>
c0006954:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006957:	8d 14 90             	lea    edx,[eax+edx*4]
c000695a:	83 3c 95 d0 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdff30],0x0
c0006962:	75 1a                	jne    c000697e <iso_total+0x43>
c0006964:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006967:	8d 04 90             	lea    eax,[eax+edx*4]
c000696a:	8b 04 85 4c 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdffb4]
c0006971:	c3                   	ret    
c0006972:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006977:	c3                   	ret    
c0006978:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000697d:	c3                   	ret    
c000697e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006983:	c3                   	ret    

c0006984 <fn_postprocess>:
c0006984:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006988:	8a 01                	mov    al,BYTE PTR [ecx]
c000698a:	84 c0                	test   al,al
c000698c:	74 25                	je     c00069b3 <fn_postprocess+0x2f>
c000698e:	3c 3b                	cmp    al,0x3b
c0006990:	74 21                	je     c00069b3 <fn_postprocess+0x2f>
c0006992:	89 c8                	mov    eax,ecx
c0006994:	40                   	inc    eax
c0006995:	8a 10                	mov    dl,BYTE PTR [eax]
c0006997:	84 d2                	test   dl,dl
c0006999:	74 05                	je     c00069a0 <fn_postprocess+0x1c>
c000699b:	80 fa 3b             	cmp    dl,0x3b
c000699e:	75 f4                	jne    c0006994 <fn_postprocess+0x10>
c00069a0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069a3:	39 c1                	cmp    ecx,eax
c00069a5:	73 06                	jae    c00069ad <fn_postprocess+0x29>
c00069a7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069ab:	74 01                	je     c00069ae <fn_postprocess+0x2a>
c00069ad:	c3                   	ret    
c00069ae:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b2:	c3                   	ret    
c00069b3:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00069b6:	eb f5                	jmp    c00069ad <fn_postprocess+0x29>

c00069b8 <iso_readdir>:
c00069b8:	55                   	push   ebp
c00069b9:	57                   	push   edi
c00069ba:	56                   	push   esi
c00069bb:	53                   	push   ebx
c00069bc:	83 ec 1c             	sub    esp,0x1c
c00069bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00069c3:	83 fe 0f             	cmp    esi,0xf
c00069c6:	0f 8f 7a 02 00 00    	jg     c0006c46 <iso_readdir+0x28e>
c00069cc:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069cf:	8d 04 86             	lea    eax,[esi+eax*4]
c00069d2:	83 3c 85 40 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdffc0],0x0
c00069da:	0f 84 70 02 00 00    	je     c0006c50 <iso_readdir+0x298>
c00069e0:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069e3:	8d 04 86             	lea    eax,[esi+eax*4]
c00069e6:	83 3c 85 44 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdffbc],0x0
c00069ee:	0f 84 66 02 00 00    	je     c0006c5a <iso_readdir+0x2a2>
c00069f4:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069f7:	8d 04 86             	lea    eax,[esi+eax*4]
c00069fa:	83 3c 85 d0 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdff30],0x0
c0006a02:	0f 85 5c 02 00 00    	jne    c0006c64 <iso_readdir+0x2ac>
c0006a08:	8d 04 f6             	lea    eax,[esi+esi*8]
c0006a0b:	8d 14 86             	lea    edx,[esi+eax*4]
c0006a0e:	8b 04 95 48 00 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdffb8]
c0006a15:	8b 0c 95 4c 00 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdffb4]
c0006a1c:	39 c8                	cmp    eax,ecx
c0006a1e:	73 57                	jae    c0006a77 <iso_readdir+0xbf>
c0006a20:	8d 14 f6             	lea    edx,[esi+esi*8]
c0006a23:	8d 3c 96             	lea    edi,[esi+edx*4]
c0006a26:	c1 e7 02             	shl    edi,0x2
c0006a29:	c1 e8 0b             	shr    eax,0xb
c0006a2c:	03 87 40 00 02 c0    	add    eax,DWORD PTR [edi-0x3ffdffc0]
c0006a32:	e8 e8 f6 ff ff       	call   c000611f <biread>
c0006a37:	85 c0                	test   eax,eax
c0006a39:	0f 88 2f 02 00 00    	js     c0006c6e <iso_readdir+0x2b6>
c0006a3f:	8b 14 85 80 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0480]
c0006a46:	83 c2 04             	add    edx,0x4
c0006a49:	8b 87 48 00 02 c0    	mov    eax,DWORD PTR [edi-0x3ffdffb8]
c0006a4f:	89 c3                	mov    ebx,eax
c0006a51:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0006a57:	01 d3                	add    ebx,edx
c0006a59:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0006a5b:	84 c9                	test   cl,cl
c0006a5d:	75 22                	jne    c0006a81 <iso_readdir+0xc9>
c0006a5f:	25 00 f8 ff ff       	and    eax,0xfffff800
c0006a64:	05 00 08 00 00       	add    eax,0x800
c0006a69:	89 87 48 00 02 c0    	mov    DWORD PTR [edi-0x3ffdffb8],eax
c0006a6f:	3b 87 4c 00 02 c0    	cmp    eax,DWORD PTR [edi-0x3ffdffb4]
c0006a75:	72 b2                	jb     c0006a29 <iso_readdir+0x71>
c0006a77:	b8 00 00 00 00       	mov    eax,0x0
c0006a7c:	e9 83 00 00 00       	jmp    c0006b04 <iso_readdir+0x14c>
c0006a81:	8d 3c f6             	lea    edi,[esi+esi*8]
c0006a84:	8d 3c be             	lea    edi,[esi+edi*4]
c0006a87:	3b 04 bd 4c 00 02 c0 	cmp    eax,DWORD PTR [edi*4-0x3ffdffb4]
c0006a8e:	0f 83 e4 01 00 00    	jae    c0006c78 <iso_readdir+0x2c0>
c0006a94:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006a98:	75 06                	jne    c0006aa0 <iso_readdir+0xe8>
c0006a9a:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c0006a9e:	74 6c                	je     c0006b0c <iso_readdir+0x154>
c0006aa0:	83 3d b4 09 02 c0 00 	cmp    DWORD PTR ds:0xc00209b4,0x0
c0006aa7:	0f 84 9d 00 00 00    	je     c0006b4a <iso_readdir+0x192>
c0006aad:	31 c9                	xor    ecx,ecx
c0006aaf:	8a 4b 20             	mov    cl,BYTE PTR [ebx+0x20]
c0006ab2:	8d 53 21             	lea    edx,[ebx+0x21]
c0006ab5:	8d 04 f6             	lea    eax,[esi+esi*8]
c0006ab8:	8d 04 86             	lea    eax,[esi+eax*4]
c0006abb:	8d 04 85 58 00 02 c0 	lea    eax,[eax*4-0x3ffdffa8]
c0006ac2:	e8 c0 f2 ff ff       	call   c0005d87 <ucs2utfn>
c0006ac7:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006acb:	0f 85 66 01 00 00    	jne    c0006c37 <iso_readdir+0x27f>
c0006ad1:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006ad4:	e8 a5 f3 ff ff       	call   c0005e7e <iso_733>
c0006ad9:	ba 00 00 00 00       	mov    edx,0x0
c0006ade:	8d 0c f6             	lea    ecx,[esi+esi*8]
c0006ae1:	c1 e1 02             	shl    ecx,0x2
c0006ae4:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0006ae7:	8d 3c bd 40 00 02 c0 	lea    edi,[edi*4-0x3ffdffc0]
c0006aee:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0006af1:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c0006af4:	31 c0                	xor    eax,eax
c0006af6:	8a 03                	mov    al,BYTE PTR [ebx]
c0006af8:	01 47 08             	add    DWORD PTR [edi+0x8],eax
c0006afb:	01 ce                	add    esi,ecx
c0006afd:	8d 04 b5 50 00 02 c0 	lea    eax,[esi*4-0x3ffdffb0]
c0006b04:	83 c4 1c             	add    esp,0x1c
c0006b07:	5b                   	pop    ebx
c0006b08:	5e                   	pop    esi
c0006b09:	5f                   	pop    edi
c0006b0a:	5d                   	pop    ebp
c0006b0b:	c3                   	ret    
c0006b0c:	81 e1 ff 00 00 00    	and    ecx,0xff
c0006b12:	01 c8                	add    eax,ecx
c0006b14:	8d 3c bd 40 00 02 c0 	lea    edi,[edi*4-0x3ffdffc0]
c0006b1b:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0006b1e:	89 c1                	mov    ecx,eax
c0006b20:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006b26:	31 db                	xor    ebx,ebx
c0006b28:	8a 1c 0a             	mov    bl,BYTE PTR [edx+ecx*1]
c0006b2b:	89 d9                	mov    ecx,ebx
c0006b2d:	01 c8                	add    eax,ecx
c0006b2f:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0006b32:	25 ff 07 00 00       	and    eax,0x7ff
c0006b37:	8d 1c 02             	lea    ebx,[edx+eax*1]
c0006b3a:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006b3d:	0f 85 5d ff ff ff    	jne    c0006aa0 <iso_readdir+0xe8>
c0006b43:	b8 00 00 00 00       	mov    eax,0x0
c0006b48:	eb ba                	jmp    c0006b04 <iso_readdir+0x14c>
c0006b4a:	8d 3c f6             	lea    edi,[esi+esi*8]
c0006b4d:	c1 e7 02             	shl    edi,0x2
c0006b50:	8d 04 37             	lea    eax,[edi+esi*1]
c0006b53:	8d 2c 85 58 00 02 c0 	lea    ebp,[eax*4-0x3ffdffa8]
c0006b5a:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0006b5e:	83 ec 04             	sub    esp,0x4
c0006b61:	31 c0                	xor    eax,eax
c0006b63:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b66:	50                   	push   eax
c0006b67:	8d 43 21             	lea    eax,[ebx+0x21]
c0006b6a:	50                   	push   eax
c0006b6b:	55                   	push   ebp
c0006b6c:	e8 df 9a ff ff       	call   c0000650 <strncpy>
c0006b71:	31 c0                	xor    eax,eax
c0006b73:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b76:	01 f7                	add    edi,esi
c0006b78:	c6 84 b8 58 00 02 c0 00 	mov    BYTE PTR [eax+edi*4-0x3ffdffa8],0x0
c0006b80:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b83:	e8 fc fd ff ff       	call   c0006984 <fn_postprocess>
c0006b88:	31 c0                	xor    eax,eax
c0006b8a:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b8d:	0f b6 2b             	movzx  ebp,BYTE PTR [ebx]
c0006b90:	81 e5 ff 00 00 00    	and    ebp,0xff
c0006b96:	29 c5                	sub    ebp,eax
c0006b98:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c0006b9c:	83 c4 10             	add    esp,0x10
c0006b9f:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006ba3:	74 25                	je     c0006bca <iso_readdir+0x212>
c0006ba5:	83 ed 21             	sub    ebp,0x21
c0006ba8:	83 fd 03             	cmp    ebp,0x3
c0006bab:	0f 8e 16 ff ff ff    	jle    c0006ac7 <iso_readdir+0x10f>
c0006bb1:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006bb4:	48                   	dec    eax
c0006bb5:	3c 01                	cmp    al,0x1
c0006bb7:	0f 87 0a ff ff ff    	ja     c0006ac7 <iso_readdir+0x10f>
c0006bbd:	8d 04 f5 00 00 00 00 	lea    eax,[esi*8+0x0]
c0006bc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bc8:	eb 23                	jmp    c0006bed <iso_readdir+0x235>
c0006bca:	47                   	inc    edi
c0006bcb:	83 ed 22             	sub    ebp,0x22
c0006bce:	eb d8                	jmp    c0006ba8 <iso_readdir+0x1f0>
c0006bd0:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bd4:	29 c5                	sub    ebp,eax
c0006bd6:	01 c7                	add    edi,eax
c0006bd8:	83 fd 03             	cmp    ebp,0x3
c0006bdb:	0f 8e e6 fe ff ff    	jle    c0006ac7 <iso_readdir+0x10f>
c0006be1:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006be4:	48                   	dec    eax
c0006be5:	3c 01                	cmp    al,0x1
c0006be7:	0f 87 da fe ff ff    	ja     c0006ac7 <iso_readdir+0x10f>
c0006bed:	83 ec 04             	sub    esp,0x4
c0006bf0:	6a 02                	push   0x2
c0006bf2:	68 80 d5 01 c0       	push   0xc001d580
c0006bf7:	57                   	push   edi
c0006bf8:	e8 83 9b ff ff       	call   c0000780 <strncmp>
c0006bfd:	83 c4 10             	add    esp,0x10
c0006c00:	85 c0                	test   eax,eax
c0006c02:	75 cc                	jne    c0006bd0 <iso_readdir+0x218>
c0006c04:	83 ec 04             	sub    esp,0x4
c0006c07:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006c0b:	83 e8 05             	sub    eax,0x5
c0006c0e:	50                   	push   eax
c0006c0f:	8d 47 05             	lea    eax,[edi+0x5]
c0006c12:	50                   	push   eax
c0006c13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0006c17:	e8 34 9a ff ff       	call   c0000650 <strncpy>
c0006c1c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006c20:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006c24:	8d 14 31             	lea    edx,[ecx+esi*1]
c0006c27:	8d 14 96             	lea    edx,[esi+edx*4]
c0006c2a:	c6 84 90 53 00 02 c0 00 	mov    BYTE PTR [eax+edx*4-0x3ffdffad],0x0
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	eb 99                	jmp    c0006bd0 <iso_readdir+0x218>
c0006c37:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006c3c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006c41:	e9 98 fe ff ff       	jmp    c0006ade <iso_readdir+0x126>
c0006c46:	b8 00 00 00 00       	mov    eax,0x0
c0006c4b:	e9 b4 fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c50:	b8 00 00 00 00       	mov    eax,0x0
c0006c55:	e9 aa fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c5a:	b8 00 00 00 00       	mov    eax,0x0
c0006c5f:	e9 a0 fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c64:	b8 00 00 00 00       	mov    eax,0x0
c0006c69:	e9 96 fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c6e:	b8 00 00 00 00       	mov    eax,0x0
c0006c73:	e9 8c fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c78:	b8 00 00 00 00       	mov    eax,0x0
c0006c7d:	e9 82 fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>

c0006c82 <iso_reset>:
c0006c82:	e8 4b f2 ff ff       	call   c0005ed2 <iso_break_all>
c0006c87:	e8 40 f2 ff ff       	call   c0005ecc <bclear>
c0006c8c:	b8 00 00 00 00       	mov    eax,0x0
c0006c91:	c3                   	ret    

c0006c92 <init_percd>:
c0006c92:	57                   	push   edi
c0006c93:	56                   	push   esi
c0006c94:	53                   	push   ebx
c0006c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c99:	a2 60 fb 01 c0       	mov    ds:0xc001fb60,al
c0006c9e:	e8 df ff ff ff       	call   c0006c82 <iso_reset>
c0006ca3:	c7 05 b4 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00209b4,0x0
c0006cad:	bb 01 00 00 00       	mov    ebx,0x1
c0006cb2:	eb 06                	jmp    c0006cba <init_percd+0x28>
c0006cb4:	43                   	inc    ebx
c0006cb5:	83 fb 04             	cmp    ebx,0x4
c0006cb8:	74 53                	je     c0006d0d <init_percd+0x7b>
c0006cba:	a1 ac 09 02 c0       	mov    eax,ds:0xc00209ac
c0006cbf:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006cc3:	e8 57 f4 ff ff       	call   c000611f <biread>
c0006cc8:	89 c6                	mov    esi,eax
c0006cca:	85 c0                	test   eax,eax
c0006ccc:	0f 88 c1 00 00 00    	js     c0006d93 <init_percd+0x101>
c0006cd2:	83 ec 04             	sub    esp,0x4
c0006cd5:	6a 06                	push   0x6
c0006cd7:	68 83 d5 01 c0       	push   0xc001d583
c0006cdc:	8b 04 85 80 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0480]
c0006ce3:	83 c0 04             	add    eax,0x4
c0006ce6:	50                   	push   eax
c0006ce7:	e8 c4 96 ff ff       	call   c00003b0 <memcmp>
c0006cec:	83 c4 10             	add    esp,0x10
c0006cef:	85 c0                	test   eax,eax
c0006cf1:	75 c1                	jne    c0006cb4 <init_percd+0x22>
c0006cf3:	8b 04 b5 80 fb 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0480]
c0006cfa:	83 c0 5c             	add    eax,0x5c
c0006cfd:	e8 1e f1 ff ff       	call   c0005e20 <isjoliet>
c0006d02:	a3 b4 09 02 c0       	mov    ds:0xc00209b4,eax
c0006d07:	85 c0                	test   eax,eax
c0006d09:	74 a9                	je     c0006cb4 <init_percd+0x22>
c0006d0b:	eb 09                	jmp    c0006d16 <init_percd+0x84>
c0006d0d:	83 3d b4 09 02 c0 00 	cmp    DWORD PTR ds:0xc00209b4,0x0
c0006d14:	74 42                	je     c0006d58 <init_percd+0xc6>
c0006d16:	8b 34 b5 80 fb 01 c0 	mov    esi,DWORD PTR [esi*4-0x3ffe0480]
c0006d1d:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d23:	bf 80 09 02 c0       	mov    edi,0xc0020980
c0006d28:	b9 22 00 00 00       	mov    ecx,0x22
c0006d2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d2f:	b8 82 09 02 c0       	mov    eax,0xc0020982
c0006d34:	e8 45 f1 ff ff       	call   c0005e7e <iso_733>
c0006d39:	a3 a8 09 02 c0       	mov    ds:0xc00209a8,eax
c0006d3e:	b8 8a 09 02 c0       	mov    eax,0xc002098a
c0006d43:	e8 36 f1 ff ff       	call   c0005e7e <iso_733>
c0006d48:	a3 a4 09 02 c0       	mov    ds:0xc00209a4,eax
c0006d4d:	bb 00 00 00 00       	mov    ebx,0x0
c0006d52:	89 d8                	mov    eax,ebx
c0006d54:	5b                   	pop    ebx
c0006d55:	5e                   	pop    esi
c0006d56:	5f                   	pop    edi
c0006d57:	c3                   	ret    
c0006d58:	a1 ac 09 02 c0       	mov    eax,ds:0xc00209ac
c0006d5d:	83 c0 10             	add    eax,0x10
c0006d60:	e8 ba f3 ff ff       	call   c000611f <biread>
c0006d65:	89 c6                	mov    esi,eax
c0006d67:	85 c0                	test   eax,eax
c0006d69:	78 e7                	js     c0006d52 <init_percd+0xc0>
c0006d6b:	83 ec 04             	sub    esp,0x4
c0006d6e:	6a 06                	push   0x6
c0006d70:	68 8a d5 01 c0       	push   0xc001d58a
c0006d75:	8b 04 85 80 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0480]
c0006d7c:	83 c0 04             	add    eax,0x4
c0006d7f:	50                   	push   eax
c0006d80:	e8 2b 96 ff ff       	call   c00003b0 <memcmp>
c0006d85:	83 c4 10             	add    esp,0x10
c0006d88:	85 c0                	test   eax,eax
c0006d8a:	74 8a                	je     c0006d16 <init_percd+0x84>
c0006d8c:	bb ff ff ff ff       	mov    ebx,0xffffffff
c0006d91:	eb bf                	jmp    c0006d52 <init_percd+0xc0>
c0006d93:	89 c3                	mov    ebx,eax
c0006d95:	eb bb                	jmp    c0006d52 <init_percd+0xc0>

c0006d97 <iso_ioctl>:
c0006d97:	e8 e6 fe ff ff       	call   c0006c82 <iso_reset>
c0006d9c:	b8 00 00 00 00       	mov    eax,0x0
c0006da1:	c3                   	ret    

c0006da2 <fs_iso9660_init>:
c0006da2:	53                   	push   ebx
c0006da3:	83 ec 0c             	sub    esp,0xc
c0006da6:	68 40 09 00 00       	push   0x940
c0006dab:	6a 00                	push   0x0
c0006dad:	68 40 00 02 c0       	push   0xc0020040
c0006db2:	e8 39 97 ff ff       	call   c00004f0 <memset>
c0006db7:	c7 05 40 00 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0020040,0xffffffff
c0006dc1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006dc8:	e8 90 10 00 00       	call   c0007e5d <malloc>
c0006dcd:	a3 b0 09 02 c0       	mov    ds:0xc00209b0,eax
c0006dd2:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006dd9:	e8 7f 10 00 00       	call   c0007e5d <malloc>
c0006dde:	a3 20 00 02 c0       	mov    ds:0xc0020020,eax
c0006de3:	83 c4 10             	add    esp,0x10
c0006de6:	bb 00 00 00 00       	mov    ebx,0x0
c0006deb:	83 ec 0c             	sub    esp,0xc
c0006dee:	68 04 08 00 00       	push   0x804
c0006df3:	e8 65 10 00 00       	call   c0007e5d <malloc>
c0006df8:	89 04 9d 80 fb 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0480],eax
c0006dff:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006e05:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006e0c:	e8 4c 10 00 00       	call   c0007e5d <malloc>
c0006e11:	89 04 9d 20 fb 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe04e0],eax
c0006e18:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006e1e:	43                   	inc    ebx
c0006e1f:	83 c4 10             	add    esp,0x10
c0006e22:	83 fb 10             	cmp    ebx,0x10
c0006e25:	75 c4                	jne    c0006deb <fs_iso9660_init+0x49>
c0006e27:	b8 00 00 00 00       	mov    eax,0x0
c0006e2c:	83 c4 08             	add    esp,0x8
c0006e2f:	5b                   	pop    ebx
c0006e30:	c3                   	ret    

c0006e31 <fs_iso9660_shutdown>:
c0006e31:	53                   	push   ebx
c0006e32:	83 ec 08             	sub    esp,0x8
c0006e35:	bb 00 00 00 00       	mov    ebx,0x0
c0006e3a:	83 ec 0c             	sub    esp,0xc
c0006e3d:	ff 34 9d 80 fb 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0480]
c0006e44:	e8 24 10 00 00       	call   c0007e6d <free>
c0006e49:	83 c4 04             	add    esp,0x4
c0006e4c:	ff 34 9d 20 fb 01 c0 	push   DWORD PTR [ebx*4-0x3ffe04e0]
c0006e53:	e8 15 10 00 00       	call   c0007e6d <free>
c0006e58:	43                   	inc    ebx
c0006e59:	83 c4 10             	add    esp,0x10
c0006e5c:	83 fb 10             	cmp    ebx,0x10
c0006e5f:	75 d9                	jne    c0006e3a <fs_iso9660_shutdown+0x9>
c0006e61:	a1 b0 09 02 c0       	mov    eax,ds:0xc00209b0
c0006e66:	85 c0                	test   eax,eax
c0006e68:	74 0c                	je     c0006e76 <fs_iso9660_shutdown+0x45>
c0006e6a:	83 ec 0c             	sub    esp,0xc
c0006e6d:	50                   	push   eax
c0006e6e:	e8 fa 0f 00 00       	call   c0007e6d <free>
c0006e73:	83 c4 10             	add    esp,0x10
c0006e76:	a1 20 00 02 c0       	mov    eax,ds:0xc0020020
c0006e7b:	85 c0                	test   eax,eax
c0006e7d:	74 0c                	je     c0006e8b <fs_iso9660_shutdown+0x5a>
c0006e7f:	83 ec 0c             	sub    esp,0xc
c0006e82:	50                   	push   eax
c0006e83:	e8 e5 0f 00 00       	call   c0007e6d <free>
c0006e88:	83 c4 10             	add    esp,0x10
c0006e8b:	c7 05 20 00 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020020,0x0
c0006e95:	c7 05 b0 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00209b0,0x0
c0006e9f:	b8 00 00 00 00       	mov    eax,0x0
c0006ea4:	83 c4 08             	add    esp,0x8
c0006ea7:	5b                   	pop    ebx
c0006ea8:	c3                   	ret    

c0006ea9 <CPU::current()>:
c0006ea9:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0006eae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0006eb4:	c3                   	ret    

c0006eb5 <operator new(unsigned long)>:
c0006eb5:	e9 a3 0f 00 00       	jmp    c0007e5d <malloc>

c0006eba <operator delete(void*)>:
c0006eba:	e9 be 0f 00 00       	jmp    c0007e7d <rfree>

c0006ebf <disableIRQs()>:
c0006ebf:	fa                   	cli    
c0006ec0:	c3                   	ret    

c0006ec1 <enableIRQs()>:
c0006ec1:	fb                   	sti    
c0006ec2:	c3                   	ret    

c0006ec3 <lockScheduler()>:
c0006ec3:	fa                   	cli    
c0006ec4:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0006eca:	c3                   	ret    

c0006ecb <unlockScheduler()>:
c0006ecb:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0006ed0:	48                   	dec    eax
c0006ed1:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0006ed6:	75 01                	jne    c0006ed9 <unlockScheduler()+0xe>
c0006ed8:	fb                   	sti    
c0006ed9:	c3                   	ret    

c0006eda <lockStuff()>:
c0006eda:	fa                   	cli    
c0006edb:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0006ee1:	ff 05 84 3e 02 c0    	inc    DWORD PTR ds:0xc0023e84
c0006ee7:	c3                   	ret    

c0006ee8 <unlockStuff()>:
c0006ee8:	83 ec 0c             	sub    esp,0xc
c0006eeb:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c0006ef0:	48                   	dec    eax
c0006ef1:	a3 84 3e 02 c0       	mov    ds:0xc0023e84,eax
c0006ef6:	75 18                	jne    c0006f10 <unlockStuff()+0x28>
c0006ef8:	83 3d 80 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e80,0x0
c0006eff:	74 0f                	je     c0006f10 <unlockStuff()+0x28>
c0006f01:	c7 05 80 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x0
c0006f0b:	e8 30 cb 00 00       	call   c0013a40 <schedule()>
c0006f10:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0006f15:	48                   	dec    eax
c0006f16:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0006f1b:	75 01                	jne    c0006f1e <unlockStuff()+0x36>
c0006f1d:	fb                   	sti    
c0006f1e:	83 c4 0c             	add    esp,0xc
c0006f21:	c3                   	ret    

c0006f22 <Virt::getAKernelVAS()>:
c0006f22:	a1 b0 0a 02 c0       	mov    eax,ds:0xc0020ab0
c0006f27:	c3                   	ret    

c0006f28 <__not_memcpy>:
c0006f28:	57                   	push   edi
c0006f29:	56                   	push   esi
c0006f2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f2e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0006f32:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006f36:	89 c7                	mov    edi,eax
c0006f38:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006f3a:	5e                   	pop    esi
c0006f3b:	5f                   	pop    edi
c0006f3c:	c3                   	ret    
c0006f3d:	66 90                	xchg   ax,ax
c0006f3f:	90                   	nop

c0006f40 <Krnl::resolveCompatibilitySymbol(char*)>:
c0006f40:	83 ec 0c             	sub    esp,0xc
c0006f43:	83 ec 08             	sub    esp,0x8
c0006f46:	68 91 d5 01 c0       	push   0xc001d591
c0006f4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f4f:	e8 ac 97 ff ff       	call   c0000700 <strcmp>
c0006f54:	83 c4 10             	add    esp,0x10
c0006f57:	85 c0                	test   eax,eax
c0006f59:	0f 94 c0             	sete   al
c0006f5c:	84 c0                	test   al,al
c0006f5e:	74 0c                	je     c0006f6c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0006f60:	b8 b8 09 02 c0       	mov    eax,0xc00209b8
c0006f65:	e9 ea 00 00 00       	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006f6a:	66 90                	xchg   ax,ax
c0006f6c:	83 ec 08             	sub    esp,0x8
c0006f6f:	68 9a d5 01 c0       	push   0xc001d59a
c0006f74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f78:	e8 83 97 ff ff       	call   c0000700 <strcmp>
c0006f7d:	83 c4 10             	add    esp,0x10
c0006f80:	85 c0                	test   eax,eax
c0006f82:	0f 94 c0             	sete   al
c0006f85:	84 c0                	test   al,al
c0006f87:	74 0b                	je     c0006f94 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0006f89:	b8 30 c2 01 c0       	mov    eax,0xc001c230
c0006f8e:	e9 c1 00 00 00       	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006f93:	90                   	nop
c0006f94:	83 ec 08             	sub    esp,0x8
c0006f97:	68 a4 d5 01 c0       	push   0xc001d5a4
c0006f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fa0:	e8 5b 97 ff ff       	call   c0000700 <strcmp>
c0006fa5:	83 c4 10             	add    esp,0x10
c0006fa8:	85 c0                	test   eax,eax
c0006faa:	0f 94 c0             	sete   al
c0006fad:	84 c0                	test   al,al
c0006faf:	74 0b                	je     c0006fbc <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0006fb1:	b8 64 bf 01 c0       	mov    eax,0xc001bf64
c0006fb6:	e9 99 00 00 00       	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006fbb:	90                   	nop
c0006fbc:	83 ec 08             	sub    esp,0x8
c0006fbf:	68 ad d5 01 c0       	push   0xc001d5ad
c0006fc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fc8:	e8 33 97 ff ff       	call   c0000700 <strcmp>
c0006fcd:	83 c4 10             	add    esp,0x10
c0006fd0:	85 c0                	test   eax,eax
c0006fd2:	0f 94 c0             	sete   al
c0006fd5:	84 c0                	test   al,al
c0006fd7:	74 07                	je     c0006fe0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c0006fd9:	b8 30 c3 01 c0       	mov    eax,0xc001c330
c0006fde:	eb 74                	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006fe0:	83 ec 08             	sub    esp,0x8
c0006fe3:	68 b7 d5 01 c0       	push   0xc001d5b7
c0006fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fec:	e8 0f 97 ff ff       	call   c0000700 <strcmp>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	85 c0                	test   eax,eax
c0006ff6:	0f 94 c0             	sete   al
c0006ff9:	84 c0                	test   al,al
c0006ffb:	74 07                	je     c0007004 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c0006ffd:	b8 b0 c0 01 c0       	mov    eax,0xc001c0b0
c0007002:	eb 50                	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007004:	83 ec 08             	sub    esp,0x8
c0007007:	68 c0 d5 01 c0       	push   0xc001d5c0
c000700c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007010:	e8 eb 96 ff ff       	call   c0000700 <strcmp>
c0007015:	83 c4 10             	add    esp,0x10
c0007018:	85 c0                	test   eax,eax
c000701a:	0f 94 c0             	sete   al
c000701d:	84 c0                	test   al,al
c000701f:	74 07                	je     c0007028 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0007021:	b8 bc 09 02 c0       	mov    eax,0xc00209bc
c0007026:	eb 2c                	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007028:	83 ec 08             	sub    esp,0x8
c000702b:	68 cd d5 01 c0       	push   0xc001d5cd
c0007030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007034:	e8 c7 96 ff ff       	call   c0000700 <strcmp>
c0007039:	83 c4 10             	add    esp,0x10
c000703c:	85 c0                	test   eax,eax
c000703e:	0f 94 c0             	sete   al
c0007041:	84 c0                	test   al,al
c0007043:	74 07                	je     c000704c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0007045:	b8 bd 09 02 c0       	mov    eax,0xc00209bd
c000704a:	eb 08                	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000704c:	b8 00 00 00 00       	mov    eax,0x0
c0007051:	8d 76 00             	lea    esi,[esi+0x0]
c0007054:	83 c4 0c             	add    esp,0xc
c0007057:	c3                   	ret    

c0007058 <Computer::close(int, int, void*)>:
c0007058:	57                   	push   edi
c0007059:	56                   	push   esi
c000705a:	53                   	push   ebx
c000705b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000705f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007063:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007067:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c000706d:	83 ec 0c             	sub    esp,0xc
c0007070:	50                   	push   eax
c0007071:	e8 d4 50 00 00       	call   c000c14a <Device::closeAll()>
c0007076:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c000707c:	83 c4 10             	add    esp,0x10
c000707f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007081:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0007085:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000708d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007091:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007095:	5b                   	pop    ebx
c0007096:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0007099:	5e                   	pop    esi
c000709a:	5f                   	pop    edi
c000709b:	ff e0                	jmp    eax

c000709d <Krnl::firstTask()>:
c000709d:	53                   	push   ebx
c000709e:	83 ec 14             	sub    esp,0x14
c00070a1:	fb                   	sti    
c00070a2:	68 da d5 01 c0       	push   0xc001d5da
c00070a7:	e8 0b 0e 00 00       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c00070ac:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c00070b3:	e8 a5 0d 00 00       	call   c0007e5d <malloc>
c00070b8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00070bf:	89 c3                	mov    ebx,eax
c00070c1:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c00070c6:	50                   	push   eax
c00070c7:	68 f3 d5 01 c0       	push   0xc001d5f3
c00070cc:	6a 01                	push   0x1
c00070ce:	53                   	push   ebx
c00070cf:	e8 40 c5 00 00       	call   c0013614 <Process::Process(bool, char const*, Process*, char**)>
c00070d4:	83 c4 20             	add    esp,0x20
c00070d7:	68 ff 00 00 00       	push   0xff
c00070dc:	6a 00                	push   0x0
c00070de:	68 b3 78 00 c0       	push   0xc00078b3
c00070e3:	53                   	push   ebx
c00070e4:	e8 37 c7 00 00       	call   c0013820 <Process::createThread(void (*)(void*), void*, int)>
c00070e9:	8b 15 b0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb0
c00070ef:	6a 7a                	push   0x7a
c00070f1:	6a 00                	push   0x0
c00070f3:	68 74 42 01 c0       	push   0xc0014274
c00070f8:	52                   	push   edx
c00070f9:	e8 22 c7 00 00       	call   c0013820 <Process::createThread(void (*)(void*), void*, int)>
c00070fe:	83 c4 14             	add    esp,0x14
c0007101:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0007106:	68 f0 d6 01 c0       	push   0xc001d6f0
c000710b:	c6 05 bd 09 02 c0 01 	mov    BYTE PTR ds:0xc00209bd,0x1
c0007112:	e8 a0 0d 00 00       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c0007117:	e8 37 d5 00 00       	call   c0014653 <Vm::initialise8086()>
c000711c:	e8 6d 3e 00 00       	call   c000af8e <Fs::initVFS()>
c0007121:	c7 04 24 00 d6 01 c0 	mov    DWORD PTR [esp],0xc001d600
c0007128:	e8 8a 0d 00 00       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c000712d:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0007132:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007138:	8b 10                	mov    edx,DWORD PTR [eax]
c000713a:	6a 00                	push   0x0
c000713c:	6a 00                	push   0x0
c000713e:	6a 00                	push   0x0
c0007140:	50                   	push   eax
c0007141:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007144:	83 c4 14             	add    esp,0x14
c0007147:	68 f0 d6 01 c0       	push   0xc001d6f0
c000714c:	e8 66 0d 00 00       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c0007151:	e8 17 ac 00 00       	call   c0011d6d <KeLoadSystemCalls()>
c0007156:	e8 87 94 00 00       	call   c00105e2 <Krnl::loadSystemEnv()>
c000715b:	e8 4c 97 00 00       	call   c00108ac <Krnl::setupPowerManager()>
c0007160:	83 c4 0c             	add    esp,0xc
c0007163:	6a 3a                	push   0x3a
c0007165:	68 1a d6 01 c0       	push   0xc001d61a
c000716a:	68 23 d6 01 c0       	push   0xc001d623
c000716f:	e8 62 9c 00 00       	call   c0010dd6 <Reg::readIntWithDefault(char*, char*, int)>
c0007174:	89 04 24             	mov    DWORD PTR [esp],eax
c0007177:	e8 20 49 00 00       	call   c000ba9c <User::loadClockSettings(int)>
c000717c:	c7 04 24 14 d7 01 c0 	mov    DWORD PTR [esp],0xc001d714
c0007183:	e8 2f 0d 00 00       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c0007188:	59                   	pop    ecx
c0007189:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000718e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0007194:	53                   	push   ebx
c0007195:	e8 ae 4f 00 00       	call   c000c148 <Device::loadDriversForAll()>
c000719a:	c7 04 24 2b d6 01 c0 	mov    DWORD PTR [esp],0xc001d62b
c00071a1:	e8 11 0d 00 00       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c00071a6:	58                   	pop    eax
c00071a7:	8b 1d b8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209b8
c00071ad:	5a                   	pop    edx
c00071ae:	6a 01                	push   0x1
c00071b0:	68 3c d6 01 c0       	push   0xc001d63c
c00071b5:	e8 94 be 00 00       	call   c001304e <Thr::loadDLL(char const*, bool)>
c00071ba:	59                   	pop    ecx
c00071bb:	5a                   	pop    edx
c00071bc:	53                   	push   ebx
c00071bd:	50                   	push   eax
c00071be:	e8 bc c0 00 00       	call   c001327f <Thr::executeDLL(unsigned long, void*)>
c00071c3:	83 c4 10             	add    esp,0x10
c00071c6:	83 ec 0c             	sub    esp,0xc
c00071c9:	6a 02                	push   0x2
c00071cb:	e8 6c ca 00 00       	call   c0013c3c <blockTask(TaskState)>
c00071d0:	83 c4 10             	add    esp,0x10
c00071d3:	eb f1                	jmp    c00071c6 <Krnl::firstTask()+0x129>
c00071d5:	90                   	nop

c00071d6 <Computer::Computer()>:
c00071d6:	83 ec 0c             	sub    esp,0xc
c00071d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071dd:	83 ec 08             	sub    esp,0x8
c00071e0:	68 58 d6 01 c0       	push   0xc001d658
c00071e5:	50                   	push   eax
c00071e6:	e8 d9 4f 00 00       	call   c000c1c4 <Device::Device(char const*)>
c00071eb:	83 c4 10             	add    esp,0x10
c00071ee:	ba 60 d7 01 c0       	mov    edx,0xc001d760
c00071f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f7:	89 10                	mov    DWORD PTR [eax],edx
c00071f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0007207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000720b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0007215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007219:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000721f:	83 ca 04             	or     edx,0x4
c0007222:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0007228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000722c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0007232:	31 d2                	xor    edx,edx
c0007234:	88 c2                	mov    dl,al
c0007236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000723a:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0007241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007245:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000724b:	31 d2                	xor    edx,edx
c000724d:	88 c2                	mov    dl,al
c000724f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007253:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0007258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000725c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0007262:	8d 50 01             	lea    edx,[eax+0x1]
c0007265:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007269:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000726f:	31 d2                	xor    edx,edx
c0007271:	88 c2                	mov    dl,al
c0007273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007277:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000727b:	83 e1 3f             	and    ecx,0x3f
c000727e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0007282:	90                   	nop
c0007283:	83 c4 0c             	add    esp,0xc
c0007286:	c3                   	ret    
c0007287:	90                   	nop

c0007288 <Computer::setBootMessage(char const*)>:
c0007288:	c3                   	ret    
c0007289:	90                   	nop

c000728a <Computer::detectFeatures()>:
c000728a:	55                   	push   ebp
c000728b:	57                   	push   edi
c000728c:	56                   	push   esi
c000728d:	53                   	push   ebx
c000728e:	83 ec 1c             	sub    esp,0x1c
c0007291:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007295:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c000729f:	e8 75 8f ff ff       	call   c0000219 <detectCPUID>
c00072a4:	85 c0                	test   eax,eax
c00072a6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00072ac:	0f 95 c2             	setne  dl
c00072af:	83 e0 fd             	and    eax,0xfffffffd
c00072b2:	01 d2                	add    edx,edx
c00072b4:	09 d0                	or     eax,edx
c00072b6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00072bc:	a8 02                	test   al,0x2
c00072be:	75 46                	jne    c0007306 <Computer::detectFeatures()+0x7c>
c00072c0:	f6 05 d1 09 02 c0 04 	test   BYTE PTR ds:0xc00209d1,0x4
c00072c7:	74 07                	je     c00072d0 <Computer::detectFeatures()+0x46>
c00072c9:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c00072d0:	e8 21 4c 01 00       	call   c001bef6 <x87Detect>
c00072d5:	83 e0 01             	and    eax,0x1
c00072d8:	c1 e0 04             	shl    eax,0x4
c00072db:	88 c2                	mov    dl,al
c00072dd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00072e3:	83 e0 ef             	and    eax,0xffffffef
c00072e6:	09 d0                	or     eax,edx
c00072e8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00072ee:	a8 10                	test   al,0x10
c00072f0:	0f 85 2a 01 00 00    	jne    c0007420 <Computer::detectFeatures()+0x196>
c00072f6:	84 c0                	test   al,al
c00072f8:	0f 88 45 01 00 00    	js     c0007443 <Computer::detectFeatures()+0x1b9>
c00072fe:	83 c4 1c             	add    esp,0x1c
c0007301:	5b                   	pop    ebx
c0007302:	5e                   	pop    esi
c0007303:	5f                   	pop    edi
c0007304:	5d                   	pop    ebp
c0007305:	c3                   	ret    
c0007306:	83 ec 0c             	sub    esp,0xc
c0007309:	6a 20                	push   0x20
c000730b:	e8 f4 83 00 00       	call   c000f704 <CPU::cpuidCheckEDX(unsigned int)>
c0007310:	83 e0 01             	and    eax,0x1
c0007313:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000731a:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007320:	83 e0 f7             	and    eax,0xfffffff7
c0007323:	09 d0                	or     eax,edx
c0007325:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000732b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0007332:	e8 cd 83 00 00       	call   c000f704 <CPU::cpuidCheckEDX(unsigned int)>
c0007337:	83 e0 01             	and    eax,0x1
c000733a:	88 c2                	mov    dl,al
c000733c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007342:	83 e0 fe             	and    eax,0xfffffffe
c0007345:	09 d0                	or     eax,edx
c0007347:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000734d:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0007354:	e8 ab 83 00 00       	call   c000f704 <CPU::cpuidCheckEDX(unsigned int)>
c0007359:	c1 e0 07             	shl    eax,0x7
c000735c:	88 c2                	mov    dl,al
c000735e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007364:	83 e0 7f             	and    eax,0x7f
c0007367:	09 d0                	or     eax,edx
c0007369:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000736f:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0007376:	e8 89 83 00 00       	call   c000f704 <CPU::cpuidCheckEDX(unsigned int)>
c000737b:	83 c4 10             	add    esp,0x10
c000737e:	83 e0 01             	and    eax,0x1
c0007381:	c1 e0 05             	shl    eax,0x5
c0007384:	88 c2                	mov    dl,al
c0007386:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000738c:	83 e0 df             	and    eax,0xffffffdf
c000738f:	09 d0                	or     eax,edx
c0007391:	f7 05 d0 09 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00209d0,0x401
c000739b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073a1:	0f 84 c2 00 00 00    	je     c0007469 <Computer::detectFeatures()+0x1df>
c00073a7:	83 e0 fe             	and    eax,0xfffffffe
c00073aa:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073b0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00073b6:	88 c2                	mov    dl,al
c00073b8:	83 e2 09             	and    edx,0x9
c00073bb:	fe ca                	dec    dl
c00073bd:	75 09                	jne    c00073c8 <Computer::detectFeatures()+0x13e>
c00073bf:	83 e0 fe             	and    eax,0xfffffffe
c00073c2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073c8:	83 ec 0c             	sub    esp,0xc
c00073cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00073cf:	50                   	push   eax
c00073d0:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c00073d4:	55                   	push   ebp
c00073d5:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00073d9:	57                   	push   edi
c00073da:	8d 74 24 18          	lea    esi,[esp+0x18]
c00073de:	56                   	push   esi
c00073df:	68 00 00 00 80       	push   0x80000000
c00073e4:	e8 97 82 00 00       	call   c000f680 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00073e9:	83 c4 20             	add    esp,0x20
c00073ec:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c00073f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00073f7:	0f 86 c3 fe ff ff    	jbe    c00072c0 <Computer::detectFeatures()+0x36>
c00073fd:	83 ec 0c             	sub    esp,0xc
c0007400:	50                   	push   eax
c0007401:	55                   	push   ebp
c0007402:	57                   	push   edi
c0007403:	56                   	push   esi
c0007404:	68 01 00 00 80       	push   0x80000001
c0007409:	e8 72 82 00 00       	call   c000f680 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000740e:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	e9 a0 fe ff ff       	jmp    c00072c0 <Computer::detectFeatures()+0x36>
c0007420:	e8 8b 4a 01 00       	call   c001beb0 <absolutelyNoChanceInHell>
c0007425:	88 c2                	mov    dl,al
c0007427:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000742d:	c1 e2 07             	shl    edx,0x7
c0007430:	83 e0 7f             	and    eax,0x7f
c0007433:	09 d0                	or     eax,edx
c0007435:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000743b:	84 c0                	test   al,al
c000743d:	0f 89 bb fe ff ff    	jns    c00072fe <Computer::detectFeatures()+0x74>
c0007443:	e8 e8 47 01 00       	call   c001bc30 <avxDetect>
c0007448:	83 e0 01             	and    eax,0x1
c000744b:	c1 e0 05             	shl    eax,0x5
c000744e:	88 c2                	mov    dl,al
c0007450:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007456:	83 e0 df             	and    eax,0xffffffdf
c0007459:	09 d0                	or     eax,edx
c000745b:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007461:	83 c4 1c             	add    esp,0x1c
c0007464:	5b                   	pop    ebx
c0007465:	5e                   	pop    esi
c0007466:	5f                   	pop    edi
c0007467:	5d                   	pop    ebp
c0007468:	c3                   	ret    
c0007469:	83 ec 0c             	sub    esp,0xc
c000746c:	68 00 02 00 00       	push   0x200
c0007471:	e8 8e 82 00 00       	call   c000f704 <CPU::cpuidCheckEDX(unsigned int)>
c0007476:	83 c4 10             	add    esp,0x10
c0007479:	83 e0 01             	and    eax,0x1
c000747c:	88 c2                	mov    dl,al
c000747e:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007484:	83 e0 fe             	and    eax,0xfffffffe
c0007487:	09 d0                	or     eax,edx
c0007489:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000748f:	e9 1c ff ff ff       	jmp    c00073b0 <Computer::detectFeatures()+0x126>

c0007494 <Computer::displayFeatures()>:
c0007494:	c3                   	ret    
c0007495:	90                   	nop

c0007496 <Computer::rdmsr(unsigned int)>:
c0007496:	83 ec 0c             	sub    esp,0xc
c0007499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000749d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00074a4:	74 0a                	je     c00074b0 <Computer::rdmsr(unsigned int)+0x1a>
c00074a6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00074aa:	0f 32                	rdmsr  
c00074ac:	83 c4 0c             	add    esp,0xc
c00074af:	c3                   	ret    
c00074b0:	83 ec 0c             	sub    esp,0xc
c00074b3:	68 61 d6 01 c0       	push   0xc001d661
c00074b8:	e8 2e 92 00 00       	call   c00106eb <Krnl::panic(char const*)>
c00074bd:	83 c4 10             	add    esp,0x10
c00074c0:	eb e4                	jmp    c00074a6 <Computer::rdmsr(unsigned int)+0x10>

c00074c2 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	52                   	push   edx
c00074c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074c9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00074cd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00074d1:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00074d8:	74 0e                	je     c00074e8 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00074da:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00074de:	89 f0                	mov    eax,esi
c00074e0:	89 fa                	mov    edx,edi
c00074e2:	0f 30                	wrmsr  
c00074e4:	58                   	pop    eax
c00074e5:	5e                   	pop    esi
c00074e6:	5f                   	pop    edi
c00074e7:	c3                   	ret    
c00074e8:	83 ec 0c             	sub    esp,0xc
c00074eb:	68 67 d6 01 c0       	push   0xc001d667
c00074f0:	e8 f6 91 00 00       	call   c00106eb <Krnl::panic(char const*)>
c00074f5:	83 c4 10             	add    esp,0x10
c00074f8:	eb e0                	jmp    c00074da <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00074fa <Computer::shutdown()>:
c00074fa:	83 ec 0c             	sub    esp,0xc
c00074fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007501:	8b 10                	mov    edx,DWORD PTR [eax]
c0007503:	6a 00                	push   0x0
c0007505:	6a 00                	push   0x0
c0007507:	6a 00                	push   0x0
c0007509:	50                   	push   eax
c000750a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000750d:	83 c4 1c             	add    esp,0x1c
c0007510:	c3                   	ret    
c0007511:	90                   	nop

c0007512 <Computer::restart()>:
c0007512:	83 ec 0c             	sub    esp,0xc
c0007515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007519:	8b 10                	mov    edx,DWORD PTR [eax]
c000751b:	6a 00                	push   0x0
c000751d:	6a 00                	push   0x0
c000751f:	6a 01                	push   0x1
c0007521:	50                   	push   eax
c0007522:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007525:	83 c4 1c             	add    esp,0x1c
c0007528:	c3                   	ret    
c0007529:	90                   	nop

c000752a <Computer::sleep()>:
c000752a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000752e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007534:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007538:	e9 3f 7c 00 00       	jmp    c000f17c <ACPI::sleep()>
c000753d:	90                   	nop

c000753e <Computer::nmiEnabled()>:
c000753e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007542:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007548:	c3                   	ret    
c0007549:	90                   	nop

c000754a <Computer::readCMOS(unsigned char)>:
c000754a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000754e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007555:	19 c0                	sbb    eax,eax
c0007557:	83 e0 80             	and    eax,0xffffff80
c000755a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000755e:	e6 70                	out    0x70,al
c0007560:	e4 71                	in     al,0x71
c0007562:	c3                   	ret    
c0007563:	90                   	nop

c0007564 <Computer::enableNMI(bool)>:
c0007564:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007568:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000756c:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0007572:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000757a:	eb ce                	jmp    c000754a <Computer::readCMOS(unsigned char)>

c000757c <Computer::open(int, int, void*)>:
c000757c:	56                   	push   esi
c000757d:	53                   	push   ebx
c000757e:	83 ec 10             	sub    esp,0x10
c0007581:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007585:	f6 05 d0 09 02 c0 04 	test   BYTE PTR ds:0xc00209d0,0x4
c000758c:	68 6d d6 01 c0       	push   0xc001d66d
c0007591:	0f 94 05 a0 f8 01 c0 	sete   BYTE PTR ds:0xc001f8a0
c0007598:	e8 1a 09 00 00       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c000759d:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00075a4:	e8 b4 08 00 00       	call   c0007e5d <malloc>
c00075a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00075ac:	89 c6                	mov    esi,eax
c00075ae:	e8 61 77 00 00       	call   c000ed14 <ACPI::ACPI()>
c00075b3:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00075b9:	58                   	pop    eax
c00075ba:	5a                   	pop    edx
c00075bb:	56                   	push   esi
c00075bc:	53                   	push   ebx
c00075bd:	e8 6a 4a 00 00       	call   c000c02c <Device::addChild(Device*)>
c00075c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00075c5:	e8 c0 fc ff ff       	call   c000728a <Computer::detectFeatures()>
c00075ca:	59                   	pop    ecx
c00075cb:	5e                   	pop    esi
c00075cc:	6a 01                	push   0x1
c00075ce:	53                   	push   ebx
c00075cf:	e8 90 ff ff ff       	call   c0007564 <Computer::enableNMI(bool)>
c00075d4:	c7 04 24 85 d6 01 c0 	mov    DWORD PTR [esp],0xc001d685
c00075db:	e8 d7 08 00 00       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c00075e0:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c00075e7:	e8 71 08 00 00       	call   c0007e5d <malloc>
c00075ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00075ef:	89 c6                	mov    esi,eax
c00075f1:	e8 c6 81 00 00       	call   c000f7bc <CPU::CPU()>
c00075f6:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00075fc:	58                   	pop    eax
c00075fd:	5a                   	pop    edx
c00075fe:	56                   	push   esi
c00075ff:	53                   	push   ebx
c0007600:	e8 27 4a 00 00       	call   c000c02c <Device::addChild(Device*)>
c0007605:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000760b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000760f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007611:	51                   	push   ecx
c0007612:	6a 00                	push   0x0
c0007614:	6a 00                	push   0x0
c0007616:	50                   	push   eax
c0007617:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000761a:	83 c4 14             	add    esp,0x14
c000761d:	68 34 d7 01 c0       	push   0xc001d734
c0007622:	e8 90 08 00 00       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c0007627:	e8 5e e1 00 00       	call   c001578a <HalInitialiseCoprocessor()>
c000762c:	c7 04 24 9f d6 01 c0 	mov    DWORD PTR [esp],0xc001d69f
c0007633:	e8 7f 08 00 00       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c0007638:	c7 04 24 9d 70 00 c0 	mov    DWORD PTR [esp],0xc000709d
c000763f:	e8 f4 c2 00 00       	call   c0013938 <setupMultitasking(void (*)())>
c0007644:	83 c4 14             	add    esp,0x14
c0007647:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000764c:	5b                   	pop    ebx
c000764d:	5e                   	pop    esi
c000764e:	c3                   	ret    
c000764f:	90                   	nop

c0007650 <Computer::disableNMI()>:
c0007650:	6a 00                	push   0x0
c0007652:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007656:	50                   	push   eax
c0007657:	e8 08 ff ff ff       	call   c0007564 <Computer::enableNMI(bool)>
c000765c:	5a                   	pop    edx
c000765d:	59                   	pop    ecx
c000765e:	c3                   	ret    
c000765f:	90                   	nop

c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007664:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000766b:	19 c0                	sbb    eax,eax
c000766d:	83 e0 80             	and    eax,0xffffff80
c0007670:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0007674:	e6 70                	out    0x70,al
c0007676:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000767a:	e6 71                	out    0x71,al
c000767c:	c3                   	ret    
c000767d:	90                   	nop

c000767e <Computer::handleNMI()>:
c000767e:	56                   	push   esi
c000767f:	53                   	push   ebx
c0007680:	83 ec 10             	sub    esp,0x10
c0007683:	e4 92                	in     al,0x92
c0007685:	89 c6                	mov    esi,eax
c0007687:	e4 61                	in     al,0x61
c0007689:	68 ba d6 01 c0       	push   0xc001d6ba
c000768e:	88 c3                	mov    bl,al
c0007690:	e8 57 35 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0007695:	83 c4 10             	add    esp,0x10
c0007698:	83 e6 10             	and    esi,0x10
c000769b:	75 0d                	jne    c00076aa <Computer::handleNMI()+0x2c>
c000769d:	f6 c3 40             	test   bl,0x40
c00076a0:	75 1d                	jne    c00076bf <Computer::handleNMI()+0x41>
c00076a2:	84 db                	test   bl,bl
c00076a4:	78 2d                	js     c00076d3 <Computer::handleNMI()+0x55>
c00076a6:	58                   	pop    eax
c00076a7:	5b                   	pop    ebx
c00076a8:	5e                   	pop    esi
c00076a9:	c3                   	ret    
c00076aa:	83 ec 0c             	sub    esp,0xc
c00076ad:	68 cb d6 01 c0       	push   0xc001d6cb
c00076b2:	e8 34 90 00 00       	call   c00106eb <Krnl::panic(char const*)>
c00076b7:	83 c4 10             	add    esp,0x10
c00076ba:	f6 c3 40             	test   bl,0x40
c00076bd:	74 e3                	je     c00076a2 <Computer::handleNMI()+0x24>
c00076bf:	83 ec 0c             	sub    esp,0xc
c00076c2:	68 d8 d6 01 c0       	push   0xc001d6d8
c00076c7:	e8 1f 90 00 00       	call   c00106eb <Krnl::panic(char const*)>
c00076cc:	83 c4 10             	add    esp,0x10
c00076cf:	84 db                	test   bl,bl
c00076d1:	79 d3                	jns    c00076a6 <Computer::handleNMI()+0x28>
c00076d3:	c7 44 24 10 e2 d6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d6e2
c00076db:	5a                   	pop    edx
c00076dc:	5b                   	pop    ebx
c00076dd:	5e                   	pop    esi
c00076de:	e9 08 90 00 00       	jmp    c00106eb <Krnl::panic(char const*)>
c00076e3:	90                   	nop

c00076e4 <GDTEntry::setBase(unsigned int)>:
c00076e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076ec:	89 c1                	mov    ecx,eax
c00076ee:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00076f2:	c1 e9 10             	shr    ecx,0x10
c00076f5:	c1 e8 18             	shr    eax,0x18
c00076f8:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00076fb:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00076fe:	c3                   	ret    
c00076ff:	90                   	nop

c0007700 <GDTEntry::setLimit(unsigned int)>:
c0007700:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007708:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000770b:	66 89 01             	mov    WORD PTR [ecx],ax
c000770e:	83 e2 f0             	and    edx,0xfffffff0
c0007711:	c1 e8 10             	shr    eax,0x10
c0007714:	83 e0 0f             	and    eax,0xf
c0007717:	09 d0                	or     eax,edx
c0007719:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000771c:	c3                   	ret    
c000771d:	90                   	nop

c000771e <GDT::GDT()>:
c000771e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007722:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000772c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007732:	90                   	nop
c0007733:	c3                   	ret    

c0007734 <GDT::addEntry(GDTEntry)>:
c0007734:	53                   	push   ebx
c0007735:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007739:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000773d:	8b 02                	mov    eax,DWORD PTR [edx]
c000773f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007743:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007747:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000774b:	8d 48 01             	lea    ecx,[eax+0x1]
c000774e:	c1 e0 03             	shl    eax,0x3
c0007751:	89 0a                	mov    DWORD PTR [edx],ecx
c0007753:	5b                   	pop    ebx
c0007754:	c3                   	ret    
c0007755:	90                   	nop

c0007756 <GDT::getNumberOfEntries()>:
c0007756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000775a:	8b 00                	mov    eax,DWORD PTR [eax]
c000775c:	c3                   	ret    
c000775d:	90                   	nop

c000775e <GDT::flush()>:
c000775e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007762:	8b 10                	mov    edx,DWORD PTR [eax]
c0007764:	83 c0 04             	add    eax,0x4
c0007767:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000776e:	a3 c2 09 02 c0       	mov    ds:0xc00209c2,eax
c0007773:	66 89 15 c0 09 02 c0 	mov    WORD PTR ds:0xc00209c0,dx
c000777a:	e9 fe 8b ff ff       	jmp    c000037d <loadGDT>
c000777f:	90                   	nop

c0007780 <GDT::setup()>:
c0007780:	57                   	push   edi
c0007781:	56                   	push   esi
c0007782:	53                   	push   ebx
c0007783:	83 ec 30             	sub    esp,0x30
c0007786:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000778a:	6a 00                	push   0x0
c000778c:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007790:	56                   	push   esi
c0007791:	e8 4e ff ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c0007796:	6a 00                	push   0x0
c0007798:	56                   	push   esi
c0007799:	e8 62 ff ff ff       	call   c0007700 <GDTEntry::setLimit(unsigned int)>
c000779e:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00077a6:	6a 00                	push   0x0
c00077a8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00077ac:	56                   	push   esi
c00077ad:	e8 32 ff ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c00077b2:	68 ff ff ff 00       	push   0xffffff
c00077b7:	56                   	push   esi
c00077b8:	e8 43 ff ff ff       	call   c0007700 <GDTEntry::setLimit(unsigned int)>
c00077bd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00077c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00077c5:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00077c9:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00077cd:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00077d2:	0d 00 9a c0 00       	or     eax,0xc09a00
c00077d7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00077db:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00077df:	89 f8                	mov    eax,edi
c00077e1:	89 fa                	mov    edx,edi
c00077e3:	80 e4 f7             	and    ah,0xf7
c00077e6:	80 ce 60             	or     dh,0x60
c00077e9:	89 c7                	mov    edi,eax
c00077eb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00077ef:	80 cc 60             	or     ah,0x60
c00077f2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00077f6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00077fa:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007802:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007806:	83 c4 20             	add    esp,0x20
c0007809:	6a 00                	push   0x0
c000780b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000780f:	50                   	push   eax
c0007810:	e8 cf fe ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c0007815:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007819:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000781d:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c0007822:	6a 00                	push   0x0
c0007824:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007828:	50                   	push   eax
c0007829:	e8 b6 fe ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c000782e:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c0007833:	83 c4 0c             	add    esp,0xc
c0007836:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000783a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000783e:	53                   	push   ebx
c000783f:	e8 f0 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007844:	83 c4 0c             	add    esp,0xc
c0007847:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000784b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000784f:	53                   	push   ebx
c0007850:	e8 df fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007855:	83 c4 0c             	add    esp,0xc
c0007858:	57                   	push   edi
c0007859:	56                   	push   esi
c000785a:	53                   	push   ebx
c000785b:	e8 d4 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007860:	83 c4 0c             	add    esp,0xc
c0007863:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007867:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000786b:	53                   	push   ebx
c000786c:	e8 c3 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007871:	83 c4 0c             	add    esp,0xc
c0007874:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007878:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000787c:	53                   	push   ebx
c000787d:	e8 b2 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007882:	83 c4 0c             	add    esp,0xc
c0007885:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007889:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000788d:	53                   	push   ebx
c000788e:	e8 a1 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007893:	83 c4 0c             	add    esp,0xc
c0007896:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000789a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000789e:	53                   	push   ebx
c000789f:	e8 90 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c00078a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078a7:	e8 b2 fe ff ff       	call   c000775e <GDT::flush()>
c00078ac:	83 c4 40             	add    esp,0x40
c00078af:	5b                   	pop    ebx
c00078b0:	5e                   	pop    esi
c00078b1:	5f                   	pop    edi
c00078b2:	c3                   	ret    

c00078b3 <idleFunction(void*)>:
c00078b3:	83 ec 0c             	sub    esp,0xc
c00078b6:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c00078bb:	48                   	dec    eax
c00078bc:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c00078c1:	75 01                	jne    c00078c4 <idleFunction(void*)+0x11>
c00078c3:	fb                   	sti    
c00078c4:	e8 9b db 00 00       	call   c0015464 <HalSystemIdle()>
c00078c9:	e8 e4 4b 01 00       	call   c001c4b2 <idleCommon()>
c00078ce:	eb f4                	jmp    c00078c4 <idleFunction(void*)+0x11>

c00078d0 <IDTEntry::IDTEntry(bool)>:
c00078d0:	83 ec 04             	sub    esp,0x4
c00078d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00078d7:	88 04 24             	mov    BYTE PTR [esp],al
c00078da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078de:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00078e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078e8:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00078ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078f0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00078f3:	83 e2 f0             	and    edx,0xfffffff0
c00078f6:	83 ca 0e             	or     edx,0xe
c00078f9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00078fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007900:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007903:	83 e2 ef             	and    edx,0xffffffef
c0007906:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007909:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000790d:	74 05                	je     c0007914 <IDTEntry::IDTEntry(bool)+0x44>
c000790f:	b2 03                	mov    dl,0x3
c0007911:	eb 05                	jmp    c0007918 <IDTEntry::IDTEntry(bool)+0x48>
c0007913:	90                   	nop
c0007914:	b2 00                	mov    dl,0x0
c0007916:	66 90                	xchg   ax,ax
c0007918:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000791c:	83 e2 03             	and    edx,0x3
c000791f:	88 d1                	mov    cl,dl
c0007921:	c1 e1 05             	shl    ecx,0x5
c0007924:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007927:	83 e2 9f             	and    edx,0xffffff9f
c000792a:	09 ca                	or     edx,ecx
c000792c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000792f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007933:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007936:	83 ca 80             	or     edx,0xffffff80
c0007939:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000793c:	90                   	nop
c000793d:	83 c4 04             	add    esp,0x4
c0007940:	c3                   	ret    
c0007941:	90                   	nop

c0007942 <IDTEntry::setOffset(unsigned int)>:
c0007942:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007946:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000794a:	66 89 02             	mov    WORD PTR [edx],ax
c000794d:	c1 e8 10             	shr    eax,0x10
c0007950:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0007954:	c3                   	ret    
c0007955:	90                   	nop
c0007956:	66 90                	xchg   ax,ax

c0007958 <IDT::IDT()>:
c0007958:	90                   	nop
c0007959:	c3                   	ret    

c000795a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000795a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000795e:	83 c0 30             	add    eax,0x30
c0007961:	c3                   	ret    

c0007962 <IDT::addEntry(IDTEntry, int)>:
c0007962:	53                   	push   ebx
c0007963:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007967:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000796b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000796f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007973:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0007976:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000797a:	5b                   	pop    ebx
c000797b:	c3                   	ret    

c000797c <IDT::addEntry(int, void (*)(), bool)>:
c000797c:	53                   	push   ebx
c000797d:	83 ec 10             	sub    esp,0x10
c0007980:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0007985:	50                   	push   eax
c0007986:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000798a:	53                   	push   ebx
c000798b:	e8 40 ff ff ff       	call   c00078d0 <IDTEntry::IDTEntry(bool)>
c0007990:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007994:	53                   	push   ebx
c0007995:	e8 a8 ff ff ff       	call   c0007942 <IDTEntry::setOffset(unsigned int)>
c000799a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000799e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00079a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00079a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00079aa:	e8 b3 ff ff ff       	call   c0007962 <IDT::addEntry(IDTEntry, int)>
c00079af:	83 c4 30             	add    esp,0x30
c00079b2:	5b                   	pop    ebx
c00079b3:	c3                   	ret    

c00079b4 <IDT::flush()>:
c00079b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079b8:	66 c7 05 c8 09 02 c0 ff 07 	mov    WORD PTR ds:0xc00209c8,0x7ff
c00079c1:	a3 ca 09 02 c0       	mov    ds:0xc00209ca,eax
c00079c6:	0f 01 1d c8 09 02 c0 	lidtd  ds:0xc00209c8
c00079cd:	c3                   	ret    

c00079ce <IDT::setup()>:
c00079ce:	57                   	push   edi
c00079cf:	56                   	push   esi
c00079d0:	53                   	push   ebx
c00079d1:	83 ec 10             	sub    esp,0x10
c00079d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00079d8:	6a 00                	push   0x0
c00079da:	68 c0 bc 01 c0       	push   0xc001bcc0
c00079df:	6a 00                	push   0x0
c00079e1:	53                   	push   ebx
c00079e2:	e8 95 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c00079e7:	6a 00                	push   0x0
c00079e9:	68 d0 bc 01 c0       	push   0xc001bcd0
c00079ee:	6a 01                	push   0x1
c00079f0:	53                   	push   ebx
c00079f1:	e8 86 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c00079f6:	83 c4 20             	add    esp,0x20
c00079f9:	6a 00                	push   0x0
c00079fb:	68 da bc 01 c0       	push   0xc001bcda
c0007a00:	6a 02                	push   0x2
c0007a02:	53                   	push   ebx
c0007a03:	e8 74 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a08:	6a 00                	push   0x0
c0007a0a:	68 e4 bc 01 c0       	push   0xc001bce4
c0007a0f:	6a 03                	push   0x3
c0007a11:	53                   	push   ebx
c0007a12:	e8 65 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a17:	83 c4 20             	add    esp,0x20
c0007a1a:	6a 00                	push   0x0
c0007a1c:	68 ee bc 01 c0       	push   0xc001bcee
c0007a21:	6a 04                	push   0x4
c0007a23:	53                   	push   ebx
c0007a24:	e8 53 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a29:	6a 00                	push   0x0
c0007a2b:	68 f8 bc 01 c0       	push   0xc001bcf8
c0007a30:	6a 05                	push   0x5
c0007a32:	53                   	push   ebx
c0007a33:	e8 44 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a38:	83 c4 20             	add    esp,0x20
c0007a3b:	6a 00                	push   0x0
c0007a3d:	68 02 bd 01 c0       	push   0xc001bd02
c0007a42:	6a 06                	push   0x6
c0007a44:	53                   	push   ebx
c0007a45:	e8 32 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a4a:	6a 00                	push   0x0
c0007a4c:	68 0c bd 01 c0       	push   0xc001bd0c
c0007a51:	6a 07                	push   0x7
c0007a53:	53                   	push   ebx
c0007a54:	e8 23 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a59:	83 c4 20             	add    esp,0x20
c0007a5c:	6a 00                	push   0x0
c0007a5e:	68 16 bd 01 c0       	push   0xc001bd16
c0007a63:	6a 08                	push   0x8
c0007a65:	53                   	push   ebx
c0007a66:	e8 11 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a6b:	6a 00                	push   0x0
c0007a6d:	68 1e bd 01 c0       	push   0xc001bd1e
c0007a72:	6a 09                	push   0x9
c0007a74:	53                   	push   ebx
c0007a75:	e8 02 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a7a:	83 c4 20             	add    esp,0x20
c0007a7d:	6a 00                	push   0x0
c0007a7f:	68 28 bd 01 c0       	push   0xc001bd28
c0007a84:	6a 0a                	push   0xa
c0007a86:	53                   	push   ebx
c0007a87:	e8 f0 fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a8c:	6a 00                	push   0x0
c0007a8e:	68 30 bd 01 c0       	push   0xc001bd30
c0007a93:	6a 0b                	push   0xb
c0007a95:	53                   	push   ebx
c0007a96:	e8 e1 fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a9b:	83 c4 20             	add    esp,0x20
c0007a9e:	6a 00                	push   0x0
c0007aa0:	68 38 bd 01 c0       	push   0xc001bd38
c0007aa5:	6a 0c                	push   0xc
c0007aa7:	53                   	push   ebx
c0007aa8:	e8 cf fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007aad:	6a 00                	push   0x0
c0007aaf:	68 40 bd 01 c0       	push   0xc001bd40
c0007ab4:	6a 0d                	push   0xd
c0007ab6:	53                   	push   ebx
c0007ab7:	e8 c0 fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007abc:	83 c4 20             	add    esp,0x20
c0007abf:	6a 00                	push   0x0
c0007ac1:	68 48 bd 01 c0       	push   0xc001bd48
c0007ac6:	6a 0e                	push   0xe
c0007ac8:	53                   	push   ebx
c0007ac9:	e8 ae fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007ace:	6a 00                	push   0x0
c0007ad0:	68 50 bd 01 c0       	push   0xc001bd50
c0007ad5:	6a 0f                	push   0xf
c0007ad7:	53                   	push   ebx
c0007ad8:	e8 9f fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	6a 00                	push   0x0
c0007ae2:	68 5a bd 01 c0       	push   0xc001bd5a
c0007ae7:	6a 10                	push   0x10
c0007ae9:	53                   	push   ebx
c0007aea:	e8 8d fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007aef:	6a 00                	push   0x0
c0007af1:	68 64 bd 01 c0       	push   0xc001bd64
c0007af6:	6a 11                	push   0x11
c0007af8:	53                   	push   ebx
c0007af9:	e8 7e fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007afe:	83 c4 20             	add    esp,0x20
c0007b01:	6a 00                	push   0x0
c0007b03:	68 6e bd 01 c0       	push   0xc001bd6e
c0007b08:	6a 12                	push   0x12
c0007b0a:	53                   	push   ebx
c0007b0b:	e8 6c fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b10:	6a 01                	push   0x1
c0007b12:	68 08 be 01 c0       	push   0xc001be08
c0007b17:	6a 60                	push   0x60
c0007b19:	53                   	push   ebx
c0007b1a:	e8 5d fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b1f:	83 c4 20             	add    esp,0x20
c0007b22:	6a 00                	push   0x0
c0007b24:	68 0f be 01 c0       	push   0xc001be0f
c0007b29:	6a 20                	push   0x20
c0007b2b:	53                   	push   ebx
c0007b2c:	e8 4b fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b31:	6a 00                	push   0x0
c0007b33:	68 fa bd 01 c0       	push   0xc001bdfa
c0007b38:	6a 21                	push   0x21
c0007b3a:	53                   	push   ebx
c0007b3b:	e8 3c fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b40:	83 c4 20             	add    esp,0x20
c0007b43:	6a 00                	push   0x0
c0007b45:	68 01 be 01 c0       	push   0xc001be01
c0007b4a:	6a 22                	push   0x22
c0007b4c:	53                   	push   ebx
c0007b4d:	e8 2a fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b52:	6a 00                	push   0x0
c0007b54:	68 78 bd 01 c0       	push   0xc001bd78
c0007b59:	6a 23                	push   0x23
c0007b5b:	53                   	push   ebx
c0007b5c:	e8 1b fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b61:	83 c4 20             	add    esp,0x20
c0007b64:	6a 00                	push   0x0
c0007b66:	68 82 bd 01 c0       	push   0xc001bd82
c0007b6b:	6a 24                	push   0x24
c0007b6d:	53                   	push   ebx
c0007b6e:	e8 09 fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b73:	6a 00                	push   0x0
c0007b75:	68 8c bd 01 c0       	push   0xc001bd8c
c0007b7a:	6a 25                	push   0x25
c0007b7c:	53                   	push   ebx
c0007b7d:	e8 fa fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b82:	83 c4 20             	add    esp,0x20
c0007b85:	6a 00                	push   0x0
c0007b87:	68 96 bd 01 c0       	push   0xc001bd96
c0007b8c:	6a 26                	push   0x26
c0007b8e:	53                   	push   ebx
c0007b8f:	e8 e8 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b94:	6a 00                	push   0x0
c0007b96:	68 a0 bd 01 c0       	push   0xc001bda0
c0007b9b:	6a 27                	push   0x27
c0007b9d:	53                   	push   ebx
c0007b9e:	e8 d9 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007ba3:	83 c4 20             	add    esp,0x20
c0007ba6:	6a 00                	push   0x0
c0007ba8:	68 aa bd 01 c0       	push   0xc001bdaa
c0007bad:	6a 28                	push   0x28
c0007baf:	53                   	push   ebx
c0007bb0:	e8 c7 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007bb5:	6a 00                	push   0x0
c0007bb7:	68 b4 bd 01 c0       	push   0xc001bdb4
c0007bbc:	6a 29                	push   0x29
c0007bbe:	53                   	push   ebx
c0007bbf:	e8 b8 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007bc4:	83 c4 20             	add    esp,0x20
c0007bc7:	6a 00                	push   0x0
c0007bc9:	68 be bd 01 c0       	push   0xc001bdbe
c0007bce:	6a 2a                	push   0x2a
c0007bd0:	53                   	push   ebx
c0007bd1:	e8 a6 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007bd6:	6a 00                	push   0x0
c0007bd8:	68 c8 bd 01 c0       	push   0xc001bdc8
c0007bdd:	6a 2b                	push   0x2b
c0007bdf:	53                   	push   ebx
c0007be0:	e8 97 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007be5:	83 c4 20             	add    esp,0x20
c0007be8:	6a 00                	push   0x0
c0007bea:	68 d2 bd 01 c0       	push   0xc001bdd2
c0007bef:	6a 2c                	push   0x2c
c0007bf1:	53                   	push   ebx
c0007bf2:	e8 85 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007bf7:	6a 00                	push   0x0
c0007bf9:	68 dc bd 01 c0       	push   0xc001bddc
c0007bfe:	6a 2d                	push   0x2d
c0007c00:	53                   	push   ebx
c0007c01:	e8 76 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c06:	83 c4 20             	add    esp,0x20
c0007c09:	6a 00                	push   0x0
c0007c0b:	68 e6 bd 01 c0       	push   0xc001bde6
c0007c10:	6a 2e                	push   0x2e
c0007c12:	53                   	push   ebx
c0007c13:	e8 64 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c18:	6a 00                	push   0x0
c0007c1a:	68 f0 bd 01 c0       	push   0xc001bdf0
c0007c1f:	6a 2f                	push   0x2f
c0007c21:	53                   	push   ebx
c0007c22:	e8 55 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c27:	83 c4 20             	add    esp,0x20
c0007c2a:	6a 00                	push   0x0
c0007c2c:	68 46 be 01 c0       	push   0xc001be46
c0007c31:	6a 30                	push   0x30
c0007c33:	53                   	push   ebx
c0007c34:	e8 43 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c39:	6a 00                	push   0x0
c0007c3b:	68 50 be 01 c0       	push   0xc001be50
c0007c40:	6a 31                	push   0x31
c0007c42:	53                   	push   ebx
c0007c43:	e8 34 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c48:	83 c4 20             	add    esp,0x20
c0007c4b:	6a 00                	push   0x0
c0007c4d:	68 5a be 01 c0       	push   0xc001be5a
c0007c52:	6a 32                	push   0x32
c0007c54:	53                   	push   ebx
c0007c55:	e8 22 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c5a:	6a 00                	push   0x0
c0007c5c:	68 64 be 01 c0       	push   0xc001be64
c0007c61:	6a 33                	push   0x33
c0007c63:	53                   	push   ebx
c0007c64:	e8 13 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c69:	83 c4 20             	add    esp,0x20
c0007c6c:	6a 00                	push   0x0
c0007c6e:	68 6e be 01 c0       	push   0xc001be6e
c0007c73:	6a 34                	push   0x34
c0007c75:	53                   	push   ebx
c0007c76:	e8 01 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c7b:	6a 00                	push   0x0
c0007c7d:	68 78 be 01 c0       	push   0xc001be78
c0007c82:	6a 35                	push   0x35
c0007c84:	53                   	push   ebx
c0007c85:	e8 f2 fc ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c8a:	83 c4 20             	add    esp,0x20
c0007c8d:	6a 00                	push   0x0
c0007c8f:	68 82 be 01 c0       	push   0xc001be82
c0007c94:	6a 36                	push   0x36
c0007c96:	53                   	push   ebx
c0007c97:	e8 e0 fc ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c9c:	6a 00                	push   0x0
c0007c9e:	68 8c be 01 c0       	push   0xc001be8c
c0007ca3:	6a 37                	push   0x37
c0007ca5:	53                   	push   ebx
c0007ca6:	e8 d1 fc ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007cab:	83 c4 1c             	add    esp,0x1c
c0007cae:	6a 03                	push   0x3
c0007cb0:	6a 02                	push   0x2
c0007cb2:	ff 35 b0 0a 02 c0    	push   DWORD PTR ds:0xc0020ab0
c0007cb8:	e8 75 24 00 00       	call   c000a132 <VAS::allocatePages(int, int)>
c0007cbd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007cc4:	89 c6                	mov    esi,eax
c0007cc6:	e8 92 01 00 00       	call   c0007e5d <malloc>
c0007ccb:	81 c6 00 20 00 00    	add    esi,0x2000
c0007cd1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cd4:	89 c7                	mov    edi,eax
c0007cd6:	e8 01 16 00 00       	call   c00092dc <TSS::TSS()>
c0007cdb:	83 c4 0c             	add    esp,0xc
c0007cde:	68 16 bd 01 c0       	push   0xc001bd16
c0007ce3:	56                   	push   esi
c0007ce4:	57                   	push   edi
c0007ce5:	e8 36 16 00 00       	call   c0009320 <TSS::setup(unsigned long, unsigned long)>
c0007cea:	89 c6                	mov    esi,eax
c0007cec:	58                   	pop    eax
c0007ced:	5a                   	pop    edx
c0007cee:	6a 00                	push   0x0
c0007cf0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007cf4:	50                   	push   eax
c0007cf5:	e8 d6 fb ff ff       	call   c00078d0 <IDTEntry::IDTEntry(bool)>
c0007cfa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007cfe:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007d03:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007d0a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007d10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d14:	80 ce 05             	or     dh,0x5
c0007d17:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007d1a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007d1e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007d22:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007d25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007d28:	e8 87 fc ff ff       	call   c00079b4 <IDT::flush()>
c0007d2d:	83 c4 20             	add    esp,0x20
c0007d30:	5b                   	pop    ebx
c0007d31:	5e                   	pop    esi
c0007d32:	5f                   	pop    edi
c0007d33:	c3                   	ret    

c0007d34 <sbrk>:
c0007d34:	55                   	push   ebp
c0007d35:	57                   	push   edi
c0007d36:	56                   	push   esi
c0007d37:	53                   	push   ebx
c0007d38:	83 ec 1c             	sub    esp,0x1c
c0007d3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007d3f:	85 c0                	test   eax,eax
c0007d41:	74 5f                	je     c0007da2 <sbrk+0x6e>
c0007d43:	78 64                	js     c0007da9 <sbrk+0x75>
c0007d45:	8b 15 3c f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f73c
c0007d4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007d4f:	05 ff 0f 00 00       	add    eax,0xfff
c0007d54:	89 c5                	mov    ebp,eax
c0007d56:	78 69                	js     c0007dc1 <sbrk+0x8d>
c0007d58:	c1 fd 0c             	sar    ebp,0xc
c0007d5b:	bb 00 00 00 00       	mov    ebx,0x0
c0007d60:	8b 35 b0 0a 02 c0    	mov    esi,DWORD PTR ds:0xc0020ab0
c0007d66:	8b 3d 3c f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f73c
c0007d6c:	e8 b9 04 00 00       	call   c000822a <Phys::allocatePage()>
c0007d71:	68 01 04 00 00       	push   0x401
c0007d76:	57                   	push   edi
c0007d77:	50                   	push   eax
c0007d78:	56                   	push   esi
c0007d79:	e8 b0 22 00 00       	call   c000a02e <VAS::mapPage(unsigned long, unsigned long, int)>
c0007d7e:	81 05 3c f7 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f73c,0x1000
c0007d88:	43                   	inc    ebx
c0007d89:	83 c4 10             	add    esp,0x10
c0007d8c:	39 dd                	cmp    ebp,ebx
c0007d8e:	75 d0                	jne    c0007d60 <sbrk+0x2c>
c0007d90:	0f 20 d8             	mov    eax,cr3
c0007d93:	0f 22 d8             	mov    cr3,eax
c0007d96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d9a:	83 c4 1c             	add    esp,0x1c
c0007d9d:	5b                   	pop    ebx
c0007d9e:	5e                   	pop    esi
c0007d9f:	5f                   	pop    edi
c0007da0:	5d                   	pop    ebp
c0007da1:	c3                   	ret    
c0007da2:	a1 3c f7 01 c0       	mov    eax,ds:0xc001f73c
c0007da7:	eb f1                	jmp    c0007d9a <sbrk+0x66>
c0007da9:	83 ec 08             	sub    esp,0x8
c0007dac:	50                   	push   eax
c0007dad:	68 84 d7 01 c0       	push   0xc001d784
c0007db2:	e8 35 2e 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007dbf:	eb d9                	jmp    c0007d9a <sbrk+0x66>
c0007dc1:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007dc7:	eb 8f                	jmp    c0007d58 <sbrk+0x24>

c0007dc9 <mmap>:
c0007dc9:	83 ec 18             	sub    esp,0x18
c0007dcc:	68 b4 d7 01 c0       	push   0xc001d7b4
c0007dd1:	e8 15 89 00 00       	call   c00106eb <Krnl::panic(char const*)>
c0007dd6:	b8 00 00 00 00       	mov    eax,0x0
c0007ddb:	83 c4 1c             	add    esp,0x1c
c0007dde:	c3                   	ret    

c0007ddf <munmap>:
c0007ddf:	83 ec 18             	sub    esp,0x18
c0007de2:	68 b9 d7 01 c0       	push   0xc001d7b9
c0007de7:	e8 ff 88 00 00       	call   c00106eb <Krnl::panic(char const*)>
c0007dec:	b8 00 00 00 00       	mov    eax,0x0
c0007df1:	83 c4 1c             	add    esp,0x1c
c0007df4:	c3                   	ret    

c0007df5 <liballoc_lock()>:
c0007df5:	fa                   	cli    
c0007df6:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0007dfc:	b8 00 00 00 00       	mov    eax,0x0
c0007e01:	c3                   	ret    

c0007e02 <liballoc_unlock()>:
c0007e02:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0007e07:	48                   	dec    eax
c0007e08:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0007e0d:	75 01                	jne    c0007e10 <liballoc_unlock()+0xe>
c0007e0f:	fb                   	sti    
c0007e10:	b8 00 00 00 00       	mov    eax,0x0
c0007e15:	c3                   	ret    

c0007e16 <liballoc_alloc(int)>:
c0007e16:	83 ec 10             	sub    esp,0x10
c0007e19:	6a 01                	push   0x1
c0007e1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007e1f:	ff 35 b0 0a 02 c0    	push   DWORD PTR ds:0xc0020ab0
c0007e25:	e8 08 23 00 00       	call   c000a132 <VAS::allocatePages(int, int)>
c0007e2a:	83 c4 1c             	add    esp,0x1c
c0007e2d:	c3                   	ret    

c0007e2e <liballoc_free(void*, int)>:
c0007e2e:	83 ec 14             	sub    esp,0x14
c0007e31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007e35:	ff 35 b0 0a 02 c0    	push   DWORD PTR ds:0xc0020ab0
c0007e3b:	e8 ae 1f 00 00       	call   c0009dee <VAS::freeAllocatedPages(unsigned long)>
c0007e40:	b8 00 00 00 00       	mov    eax,0x0
c0007e45:	83 c4 1c             	add    esp,0x1c
c0007e48:	c3                   	ret    

c0007e49 <realloc>:
c0007e49:	83 ec 14             	sub    esp,0x14
c0007e4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e54:	e8 f8 96 ff ff       	call   c0001551 <dlrealloc>
c0007e59:	83 c4 1c             	add    esp,0x1c
c0007e5c:	c3                   	ret    

c0007e5d <malloc>:
c0007e5d:	83 ec 18             	sub    esp,0x18
c0007e60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e64:	e8 ab 91 ff ff       	call   c0001014 <dlmalloc>
c0007e69:	83 c4 1c             	add    esp,0x1c
c0007e6c:	c3                   	ret    

c0007e6d <free>:
c0007e6d:	83 ec 18             	sub    esp,0x18
c0007e70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e74:	e8 40 8e ff ff       	call   c0000cb9 <dlfree>
c0007e79:	83 c4 1c             	add    esp,0x1c
c0007e7c:	c3                   	ret    

c0007e7d <rfree>:
c0007e7d:	83 ec 18             	sub    esp,0x18
c0007e80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e84:	e8 30 8e ff ff       	call   c0000cb9 <dlfree>
c0007e89:	83 c4 1c             	add    esp,0x1c
c0007e8c:	c3                   	ret    

c0007e8d <calloc>:
c0007e8d:	56                   	push   esi
c0007e8e:	53                   	push   ebx
c0007e8f:	83 ec 10             	sub    esp,0x10
c0007e92:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007e96:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007e9b:	53                   	push   ebx
c0007e9c:	e8 bc ff ff ff       	call   c0007e5d <malloc>
c0007ea1:	89 c6                	mov    esi,eax
c0007ea3:	83 c4 0c             	add    esp,0xc
c0007ea6:	53                   	push   ebx
c0007ea7:	6a 00                	push   0x0
c0007ea9:	50                   	push   eax
c0007eaa:	e8 41 86 ff ff       	call   c00004f0 <memset>
c0007eaf:	89 f0                	mov    eax,esi
c0007eb1:	83 c4 14             	add    esp,0x14
c0007eb4:	5b                   	pop    ebx
c0007eb5:	5e                   	pop    esi
c0007eb6:	c3                   	ret    

c0007eb7 <Krnl::setBootMessage(char const*)>:
c0007eb7:	57                   	push   edi
c0007eb8:	56                   	push   esi
c0007eb9:	53                   	push   ebx
c0007eba:	81 ec a4 00 00 00    	sub    esp,0xa4
c0007ec0:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0007ec7:	68 9e 00 00 00       	push   0x9e
c0007ecc:	6a 00                	push   0x0
c0007ece:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0007ed2:	56                   	push   esi
c0007ed3:	e8 18 86 ff ff       	call   c00004f0 <memset>
c0007ed8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007edb:	e8 80 86 ff ff       	call   c0000560 <strlen>
c0007ee0:	ba 50 00 00 00       	mov    edx,0x50
c0007ee5:	83 c4 10             	add    esp,0x10
c0007ee8:	29 c2                	sub    edx,eax
c0007eea:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0007eee:	d1 ea                	shr    edx,1
c0007ef0:	84 c0                	test   al,al
c0007ef2:	74 19                	je     c0007f0d <Krnl::setBootMessage(char const*)+0x56>
c0007ef4:	01 d2                	add    edx,edx
c0007ef6:	43                   	inc    ebx
c0007ef7:	01 f2                	add    edx,esi
c0007ef9:	80 cc 0f             	or     ah,0xf
c0007efc:	83 c2 02             	add    edx,0x2
c0007eff:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0007f03:	43                   	inc    ebx
c0007f04:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0007f09:	84 c0                	test   al,al
c0007f0b:	75 ec                	jne    c0007ef9 <Krnl::setBootMessage(char const*)+0x42>
c0007f0d:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0007f12:	b9 9e 00 00 00       	mov    ecx,0x9e
c0007f17:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f19:	81 c4 a0 00 00 00    	add    esp,0xa0
c0007f1f:	5b                   	pop    ebx
c0007f20:	5e                   	pop    esi
c0007f21:	5f                   	pop    edi
c0007f22:	c3                   	ret    

c0007f23 <kernel_main>:
c0007f23:	55                   	push   ebp
c0007f24:	57                   	push   edi
c0007f25:	bf f9 03 00 00       	mov    edi,0x3f9
c0007f2a:	56                   	push   esi
c0007f2b:	89 fa                	mov    edx,edi
c0007f2d:	53                   	push   ebx
c0007f2e:	31 f6                	xor    esi,esi
c0007f30:	83 ec 38             	sub    esp,0x38
c0007f33:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007f38:	a3 d0 09 02 c0       	mov    ds:0xc00209d0,eax
c0007f3d:	89 f0                	mov    eax,esi
c0007f3f:	ee                   	out    dx,al
c0007f40:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007f45:	b0 80                	mov    al,0x80
c0007f47:	89 da                	mov    edx,ebx
c0007f49:	ee                   	out    dx,al
c0007f4a:	b1 03                	mov    cl,0x3
c0007f4c:	ba f8 03 00 00       	mov    edx,0x3f8
c0007f51:	88 c8                	mov    al,cl
c0007f53:	ee                   	out    dx,al
c0007f54:	89 f0                	mov    eax,esi
c0007f56:	89 fa                	mov    edx,edi
c0007f58:	ee                   	out    dx,al
c0007f59:	88 c8                	mov    al,cl
c0007f5b:	89 da                	mov    edx,ebx
c0007f5d:	ee                   	out    dx,al
c0007f5e:	b0 c7                	mov    al,0xc7
c0007f60:	ba fa 03 00 00       	mov    edx,0x3fa
c0007f65:	ee                   	out    dx,al
c0007f66:	b0 0b                	mov    al,0xb
c0007f68:	ba fc 03 00 00       	mov    edx,0x3fc
c0007f6d:	ee                   	out    dx,al
c0007f6e:	68 c0 d7 01 c0       	push   0xc001d7c0
c0007f73:	e8 74 2c 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0007f78:	0f be 05 40 f7 01 c0 	movsx  eax,BYTE PTR ds:0xc001f740
c0007f7f:	83 c4 10             	add    esp,0x10
c0007f82:	84 c0                	test   al,al
c0007f84:	74 5c                	je     c0007fe2 <kernel_main+0xbf>
c0007f86:	31 db                	xor    ebx,ebx
c0007f88:	bd 0a 00 00 00       	mov    ebp,0xa
c0007f8d:	bf 05 00 00 00       	mov    edi,0x5
c0007f92:	31 f6                	xor    esi,esi
c0007f94:	eb 14                	jmp    c0007faa <kernel_main+0x87>
c0007f96:	47                   	inc    edi
c0007f97:	bd 0a 00 00 00       	mov    ebp,0xa
c0007f9c:	31 f6                	xor    esi,esi
c0007f9e:	43                   	inc    ebx
c0007f9f:	0f be 83 40 f7 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe08c0]
c0007fa6:	84 c0                	test   al,al
c0007fa8:	74 38                	je     c0007fe2 <kernel_main+0xbf>
c0007faa:	80 be 76 f7 01 c0 db 	cmp    BYTE PTR [esi-0x3ffe088a],0xdb
c0007fb1:	0f 84 97 00 00 00    	je     c000804e <kernel_main+0x12b>
c0007fb7:	3c 0d                	cmp    al,0xd
c0007fb9:	74 e3                	je     c0007f9e <kernel_main+0x7b>
c0007fbb:	3c 0a                	cmp    al,0xa
c0007fbd:	74 d7                	je     c0007f96 <kernel_main+0x73>
c0007fbf:	83 ec 0c             	sub    esp,0xc
c0007fc2:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0007fc6:	57                   	push   edi
c0007fc7:	43                   	inc    ebx
c0007fc8:	52                   	push   edx
c0007fc9:	46                   	inc    esi
c0007fca:	6a 00                	push   0x0
c0007fcc:	6a 0e                	push   0xe
c0007fce:	50                   	push   eax
c0007fcf:	e8 e8 e4 00 00       	call   c00164bc <HalConsoleWriteCharacter(char, int, int, int, int)>
c0007fd4:	83 c4 20             	add    esp,0x20
c0007fd7:	0f be 83 40 f7 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe08c0]
c0007fde:	84 c0                	test   al,al
c0007fe0:	75 c8                	jne    c0007faa <kernel_main+0x87>
c0007fe2:	83 ec 0c             	sub    esp,0xc
c0007fe5:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007fea:	05 ff 0f 00 00       	add    eax,0xfff
c0007fef:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007ff4:	50                   	push   eax
c0007ff5:	e8 82 03 00 00       	call   c000837c <Phys::physicalMemorySetup(unsigned int)>
c0007ffa:	e8 59 1b 00 00       	call   c0009b58 <Virt::virtualMemorySetup()>
c0007fff:	58                   	pop    eax
c0008000:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0008004:	53                   	push   ebx
c0008005:	e8 0a 1c 00 00       	call   c0009c14 <VAS::VAS()>
c000800a:	89 1d b0 0a 02 c0    	mov    DWORD PTR ds:0xc0020ab0,ebx
c0008010:	e8 0b 80 ff ff       	call   c0000020 <callGlobalConstructors>
c0008015:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c000801c:	e8 3c fe ff ff       	call   c0007e5d <malloc>
c0008021:	89 04 24             	mov    DWORD PTR [esp],eax
c0008024:	89 c6                	mov    esi,eax
c0008026:	e8 ab f1 ff ff       	call   c00071d6 <Computer::Computer()>
c000802b:	6a 00                	push   0x0
c000802d:	89 35 b8 09 02 c0    	mov    DWORD PTR ds:0xc00209b8,esi
c0008033:	6a 00                	push   0x0
c0008035:	6a 00                	push   0x0
c0008037:	56                   	push   esi
c0008038:	e8 3f f5 ff ff       	call   c000757c <Computer::open(int, int, void*)>
c000803d:	83 c4 14             	add    esp,0x14
c0008040:	53                   	push   ebx
c0008041:	e8 84 1e 00 00       	call   c0009eca <VAS::~VAS()>
c0008046:	83 c4 3c             	add    esp,0x3c
c0008049:	5b                   	pop    ebx
c000804a:	5e                   	pop    esi
c000804b:	5f                   	pop    edi
c000804c:	5d                   	pop    ebp
c000804d:	c3                   	ret    
c000804e:	31 d2                	xor    edx,edx
c0008050:	8a 96 75 f7 01 c0    	mov    dl,BYTE PTR [esi-0x3ffe088b]
c0008056:	83 e2 fe             	and    edx,0xfffffffe
c0008059:	81 fa ba 00 00 00    	cmp    edx,0xba
c000805f:	0f 85 52 ff ff ff    	jne    c0007fb7 <kernel_main+0x94>
c0008065:	45                   	inc    ebp
c0008066:	e9 4c ff ff ff       	jmp    c0007fb7 <kernel_main+0x94>

c000806b <Phys::allocateDMA(unsigned long)>:
c000806b:	55                   	push   ebp
c000806c:	31 ed                	xor    ebp,ebp
c000806e:	57                   	push   edi
c000806f:	56                   	push   esi
c0008070:	53                   	push   ebx
c0008071:	31 db                	xor    ebx,ebx
c0008073:	83 ec 1c             	sub    esp,0x1c
c0008076:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000807a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0008082:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0008088:	31 c0                	xor    eax,eax
c000808a:	c1 ef 0c             	shr    edi,0xc
c000808d:	eb 19                	jmp    c00080a8 <Phys::allocateDMA(unsigned long)+0x3d>
c000808f:	85 c0                	test   eax,eax
c0008091:	75 06                	jne    c0008099 <Phys::allocateDMA(unsigned long)+0x2e>
c0008093:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008097:	89 dd                	mov    ebp,ebx
c0008099:	8d 70 01             	lea    esi,[eax+0x1]
c000809c:	39 f7                	cmp    edi,esi
c000809e:	74 33                	je     c00080d3 <Phys::allocateDMA(unsigned long)+0x68>
c00080a0:	89 f0                	mov    eax,esi
c00080a2:	43                   	inc    ebx
c00080a3:	83 fb 0f             	cmp    ebx,0xf
c00080a6:	7f 11                	jg     c00080b9 <Phys::allocateDMA(unsigned long)+0x4e>
c00080a8:	80 bb ec 09 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdf614],0x0
c00080af:	74 de                	je     c000808f <Phys::allocateDMA(unsigned long)+0x24>
c00080b1:	31 c0                	xor    eax,eax
c00080b3:	43                   	inc    ebx
c00080b4:	83 fb 0f             	cmp    ebx,0xf
c00080b7:	7e ef                	jle    c00080a8 <Phys::allocateDMA(unsigned long)+0x3d>
c00080b9:	83 ec 0c             	sub    esp,0xc
c00080bc:	68 d8 d7 01 c0       	push   0xc001d7d8
c00080c1:	e8 25 86 00 00       	call   c00106eb <Krnl::panic(char const*)>
c00080c6:	83 c4 10             	add    esp,0x10
c00080c9:	31 c0                	xor    eax,eax
c00080cb:	83 c4 1c             	add    esp,0x1c
c00080ce:	5b                   	pop    ebx
c00080cf:	5e                   	pop    esi
c00080d0:	5f                   	pop    edi
c00080d1:	5d                   	pop    ebp
c00080d2:	c3                   	ret    
c00080d3:	89 e9                	mov    ecx,ebp
c00080d5:	c1 f9 04             	sar    ecx,0x4
c00080d8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00080dc:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c00080e0:	89 ca                	mov    edx,ecx
c00080e2:	4a                   	dec    edx
c00080e3:	79 03                	jns    c00080e8 <Phys::allocateDMA(unsigned long)+0x7d>
c00080e5:	8d 51 0e             	lea    edx,[ecx+0xe]
c00080e8:	c1 fa 04             	sar    edx,0x4
c00080eb:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c00080ef:	74 08                	je     c00080f9 <Phys::allocateDMA(unsigned long)+0x8e>
c00080f1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00080f5:	31 c0                	xor    eax,eax
c00080f7:	eb ba                	jmp    c00080b3 <Phys::allocateDMA(unsigned long)+0x48>
c00080f9:	85 f6                	test   esi,esi
c00080fb:	74 15                	je     c0008112 <Phys::allocateDMA(unsigned long)+0xa7>
c00080fd:	8d 95 ec 09 02 c0    	lea    edx,[ebp-0x3ffdf614]
c0008103:	8d 84 05 ed 09 02 c0 	lea    eax,[ebp+eax*1-0x3ffdf613]
c000810a:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000810d:	42                   	inc    edx
c000810e:	39 d0                	cmp    eax,edx
c0008110:	75 f8                	jne    c000810a <Phys::allocateDMA(unsigned long)+0x9f>
c0008112:	01 3d e4 09 02 c0    	add    DWORD PTR ds:0xc00209e4,edi
c0008118:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000811c:	85 c0                	test   eax,eax
c000811e:	74 17                	je     c0008137 <Phys::allocateDMA(unsigned long)+0xcc>
c0008120:	83 ec 0c             	sub    esp,0xc
c0008123:	68 d8 d7 01 c0       	push   0xc001d7d8
c0008128:	e8 be 85 00 00       	call   c00106eb <Krnl::panic(char const*)>
c000812d:	83 c4 10             	add    esp,0x10
c0008130:	89 f0                	mov    eax,esi
c0008132:	e9 6b ff ff ff       	jmp    c00080a2 <Phys::allocateDMA(unsigned long)+0x37>
c0008137:	c1 e5 0c             	shl    ebp,0xc
c000813a:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0008140:	eb 89                	jmp    c00080cb <Phys::allocateDMA(unsigned long)+0x60>

c0008142 <Phys::freeDMA(unsigned long, unsigned long)>:
c0008142:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008146:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000814c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008150:	c1 ea 0c             	shr    edx,0xc
c0008153:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0008158:	29 15 e4 09 02 c0    	sub    DWORD PTR ds:0xc00209e4,edx
c000815e:	c1 e8 0c             	shr    eax,0xc
c0008161:	85 d2                	test   edx,edx
c0008163:	74 0f                	je     c0008174 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0008165:	05 ec 09 02 c0       	add    eax,0xc00209ec
c000816a:	01 c2                	add    edx,eax
c000816c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000816f:	40                   	inc    eax
c0008170:	39 d0                	cmp    eax,edx
c0008172:	75 f8                	jne    c000816c <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0008174:	c3                   	ret    

c0008175 <Phys::setPageState(unsigned long, bool)>:
c0008175:	56                   	push   esi
c0008176:	ba 01 00 00 00       	mov    edx,0x1
c000817b:	53                   	push   ebx
c000817c:	8b 35 84 f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f884
c0008182:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008186:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000818a:	89 c8                	mov    eax,ecx
c000818c:	83 e1 07             	and    ecx,0x7
c000818f:	c1 e8 03             	shr    eax,0x3
c0008192:	d3 e3                	shl    ebx,cl
c0008194:	01 c6                	add    esi,eax
c0008196:	d3 e2                	shl    edx,cl
c0008198:	f7 d2                	not    edx
c000819a:	20 16                	and    BYTE PTR [esi],dl
c000819c:	03 05 84 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f884
c00081a2:	08 18                	or     BYTE PTR [eax],bl
c00081a4:	5b                   	pop    ebx
c00081a5:	5e                   	pop    esi
c00081a6:	c3                   	ret    

c00081a7 <Phys::getPageState(unsigned long)>:
c00081a7:	53                   	push   ebx
c00081a8:	8b 15 84 f8 01 c0    	mov    edx,DWORD PTR ds:0xc001f884
c00081ae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00081b2:	31 db                	xor    ebx,ebx
c00081b4:	89 c8                	mov    eax,ecx
c00081b6:	83 e1 07             	and    ecx,0x7
c00081b9:	c1 e8 03             	shr    eax,0x3
c00081bc:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c00081bf:	89 d8                	mov    eax,ebx
c00081c1:	5b                   	pop    ebx
c00081c2:	d3 f8                	sar    eax,cl
c00081c4:	83 e0 01             	and    eax,0x1
c00081c7:	c3                   	ret    

c00081c8 <Phys::freePage(unsigned long)>:
c00081c8:	53                   	push   ebx
c00081c9:	83 ec 08             	sub    esp,0x8
c00081cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081d0:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c00081d6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00081dc:	76 3a                	jbe    c0008218 <Phys::freePage(unsigned long)+0x50>
c00081de:	c1 e8 0c             	shr    eax,0xc
c00081e1:	50                   	push   eax
c00081e2:	89 c3                	mov    ebx,eax
c00081e4:	e8 be ff ff ff       	call   c00081a7 <Phys::getPageState(unsigned long)>
c00081e9:	5a                   	pop    edx
c00081ea:	84 c0                	test   al,al
c00081ec:	74 19                	je     c0008207 <Phys::freePage(unsigned long)+0x3f>
c00081ee:	83 ec 08             	sub    esp,0x8
c00081f1:	ff 0d e4 09 02 c0    	dec    DWORD PTR ds:0xc00209e4
c00081f7:	6a 00                	push   0x0
c00081f9:	53                   	push   ebx
c00081fa:	e8 76 ff ff ff       	call   c0008175 <Phys::setPageState(unsigned long, bool)>
c00081ff:	83 c4 10             	add    esp,0x10
c0008202:	83 c4 08             	add    esp,0x8
c0008205:	5b                   	pop    ebx
c0008206:	c3                   	ret    
c0008207:	c7 44 24 10 7d d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d87d
c000820f:	83 c4 08             	add    esp,0x8
c0008212:	5b                   	pop    ebx
c0008213:	e9 d3 84 00 00       	jmp    c00106eb <Krnl::panic(char const*)>
c0008218:	68 00 10 00 00       	push   0x1000
c000821d:	50                   	push   eax
c000821e:	e8 1f ff ff ff       	call   c0008142 <Phys::freeDMA(unsigned long, unsigned long)>
c0008223:	59                   	pop    ecx
c0008224:	5b                   	pop    ebx
c0008225:	83 c4 08             	add    esp,0x8
c0008228:	5b                   	pop    ebx
c0008229:	c3                   	ret    

c000822a <Phys::allocatePage()>:
c000822a:	56                   	push   esi
c000822b:	53                   	push   ebx
c000822c:	83 ec 14             	sub    esp,0x14
c000822f:	8b 35 d8 09 02 c0    	mov    esi,DWORD PTR ds:0xc00209d8
c0008235:	89 f3                	mov    ebx,esi
c0008237:	eb 0a                	jmp    c0008243 <Phys::allocatePage()+0x19>
c0008239:	89 1d d8 09 02 c0    	mov    DWORD PTR ds:0xc00209d8,ebx
c000823f:	39 de                	cmp    esi,ebx
c0008241:	74 24                	je     c0008267 <Phys::allocatePage()+0x3d>
c0008243:	53                   	push   ebx
c0008244:	e8 5e ff ff ff       	call   c00081a7 <Phys::getPageState(unsigned long)>
c0008249:	5a                   	pop    edx
c000824a:	84 c0                	test   al,al
c000824c:	74 5f                	je     c00082ad <Phys::allocatePage()+0x83>
c000824e:	43                   	inc    ebx
c000824f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0008255:	75 e2                	jne    c0008239 <Phys::allocatePage()+0xf>
c0008257:	31 db                	xor    ebx,ebx
c0008259:	c7 05 d8 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00209d8,0x0
c0008263:	39 de                	cmp    esi,ebx
c0008265:	75 dc                	jne    c0008243 <Phys::allocatePage()+0x19>
c0008267:	83 ec 0c             	sub    esp,0xc
c000826a:	80 35 fc 09 02 c0 01 	xor    BYTE PTR ds:0xc00209fc,0x1
c0008271:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008276:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008279:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000827f:	50                   	push   eax
c0008280:	e8 87 26 00 00       	call   c000a90c <VAS::scanForEviction()>
c0008285:	83 c4 10             	add    esp,0x10
c0008288:	85 c0                	test   eax,eax
c000828a:	75 3f                	jne    c00082cb <Phys::allocatePage()+0xa1>
c000828c:	83 ec 0c             	sub    esp,0xc
c000828f:	68 00 d8 01 c0       	push   0xc001d800
c0008294:	e8 52 84 00 00       	call   c00106eb <Krnl::panic(char const*)>
c0008299:	83 c4 10             	add    esp,0x10
c000829c:	8b 1d d8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209d8
c00082a2:	53                   	push   ebx
c00082a3:	e8 ff fe ff ff       	call   c00081a7 <Phys::getPageState(unsigned long)>
c00082a8:	5a                   	pop    edx
c00082a9:	84 c0                	test   al,al
c00082ab:	75 a1                	jne    c000824e <Phys::allocatePage()+0x24>
c00082ad:	6a 01                	push   0x1
c00082af:	53                   	push   ebx
c00082b0:	e8 c0 fe ff ff       	call   c0008175 <Phys::setPageState(unsigned long, bool)>
c00082b5:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c00082ba:	5a                   	pop    edx
c00082bb:	ff 05 e4 09 02 c0    	inc    DWORD PTR ds:0xc00209e4
c00082c1:	c1 e0 0c             	shl    eax,0xc
c00082c4:	59                   	pop    ecx
c00082c5:	83 c4 14             	add    esp,0x14
c00082c8:	5b                   	pop    ebx
c00082c9:	5e                   	pop    esi
c00082ca:	c3                   	ret    
c00082cb:	83 ec 08             	sub    esp,0x8
c00082ce:	89 c2                	mov    edx,eax
c00082d0:	6a 01                	push   0x1
c00082d2:	c1 ea 0c             	shr    edx,0xc
c00082d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00082d9:	52                   	push   edx
c00082da:	e8 96 fe ff ff       	call   c0008175 <Phys::setPageState(unsigned long, bool)>
c00082df:	83 c4 10             	add    esp,0x10
c00082e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082e6:	eb dd                	jmp    c00082c5 <Phys::allocatePage()+0x9b>

c00082e8 <Phys::allocateContiguousPages(int)>:
c00082e8:	57                   	push   edi
c00082e9:	56                   	push   esi
c00082ea:	53                   	push   ebx
c00082eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082ef:	fa                   	cli    
c00082f0:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c00082f6:	31 db                	xor    ebx,ebx
c00082f8:	85 db                	test   ebx,ebx
c00082fa:	75 11                	jne    c000830d <Phys::allocateContiguousPages(int)+0x25>
c00082fc:	e8 29 ff ff ff       	call   c000822a <Phys::allocatePage()>
c0008301:	83 fe 01             	cmp    esi,0x1
c0008304:	89 c7                	mov    edi,eax
c0008306:	74 21                	je     c0008329 <Phys::allocateContiguousPages(int)+0x41>
c0008308:	bb 01 00 00 00       	mov    ebx,0x1
c000830d:	e8 18 ff ff ff       	call   c000822a <Phys::allocatePage()>
c0008312:	89 da                	mov    edx,ebx
c0008314:	c1 e2 0c             	shl    edx,0xc
c0008317:	01 fa                	add    edx,edi
c0008319:	39 c2                	cmp    edx,eax
c000831b:	74 20                	je     c000833d <Phys::allocateContiguousPages(int)+0x55>
c000831d:	bb 01 00 00 00       	mov    ebx,0x1
c0008322:	89 c7                	mov    edi,eax
c0008324:	83 fe 01             	cmp    esi,0x1
c0008327:	75 e4                	jne    c000830d <Phys::allocateContiguousPages(int)+0x25>
c0008329:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000832e:	48                   	dec    eax
c000832f:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0008334:	75 01                	jne    c0008337 <Phys::allocateContiguousPages(int)+0x4f>
c0008336:	fb                   	sti    
c0008337:	89 f8                	mov    eax,edi
c0008339:	5b                   	pop    ebx
c000833a:	5e                   	pop    esi
c000833b:	5f                   	pop    edi
c000833c:	c3                   	ret    
c000833d:	43                   	inc    ebx
c000833e:	39 f3                	cmp    ebx,esi
c0008340:	75 b6                	jne    c00082f8 <Phys::allocateContiguousPages(int)+0x10>
c0008342:	eb e5                	jmp    c0008329 <Phys::allocateContiguousPages(int)+0x41>

c0008344 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0008344:	56                   	push   esi
c0008345:	53                   	push   ebx
c0008346:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000834a:	39 1d dc 09 02 c0    	cmp    DWORD PTR ds:0xc00209dc,ebx
c0008350:	73 06                	jae    c0008358 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0008352:	89 1d dc 09 02 c0    	mov    DWORD PTR ds:0xc00209dc,ebx
c0008358:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000835c:	c1 eb 0c             	shr    ebx,0xc
c000835f:	c1 e8 0c             	shr    eax,0xc
c0008362:	39 d8                	cmp    eax,ebx
c0008364:	73 13                	jae    c0008379 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0008366:	6a 00                	push   0x0
c0008368:	8d 70 01             	lea    esi,[eax+0x1]
c000836b:	50                   	push   eax
c000836c:	e8 04 fe ff ff       	call   c0008175 <Phys::setPageState(unsigned long, bool)>
c0008371:	5a                   	pop    edx
c0008372:	89 f0                	mov    eax,esi
c0008374:	59                   	pop    ecx
c0008375:	39 f3                	cmp    ebx,esi
c0008377:	75 ed                	jne    c0008366 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0008379:	5b                   	pop    ebx
c000837a:	5e                   	pop    esi
c000837b:	c3                   	ret    

c000837c <Phys::physicalMemorySetup(unsigned int)>:
c000837c:	55                   	push   ebp
c000837d:	57                   	push   edi
c000837e:	56                   	push   esi
c000837f:	53                   	push   ebx
c0008380:	31 db                	xor    ebx,ebx
c0008382:	83 ec 40             	sub    esp,0x40
c0008385:	6a 10                	push   0x10
c0008387:	6a 00                	push   0x0
c0008389:	68 ec 09 02 c0       	push   0xc00209ec
c000838e:	e8 5d 81 ff ff       	call   c00004f0 <memset>
c0008393:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008397:	25 00 f0 ff ff       	and    eax,0xfffff000
c000839c:	05 00 10 00 00       	add    eax,0x1000
c00083a1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083a5:	5a                   	pop    edx
c00083a6:	59                   	pop    ecx
c00083a7:	50                   	push   eax
c00083a8:	68 93 d8 01 c0       	push   0xc001d893
c00083ad:	e8 3a 28 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00083b2:	83 c4 10             	add    esp,0x10
c00083b5:	83 ec 08             	sub    esp,0x8
c00083b8:	6a 01                	push   0x1
c00083ba:	53                   	push   ebx
c00083bb:	43                   	inc    ebx
c00083bc:	e8 b4 fd ff ff       	call   c0008175 <Phys::setPageState(unsigned long, bool)>
c00083c1:	83 c4 10             	add    esp,0x10
c00083c4:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00083ca:	75 e9                	jne    c00083b5 <Phys::physicalMemorySetup(unsigned int)+0x39>
c00083cc:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c00083d2:	66 85 c0             	test   ax,ax
c00083d5:	0f 84 97 01 00 00    	je     c0008572 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00083db:	89 c7                	mov    edi,eax
c00083dd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00083e5:	81 e7 ff ff 00 00    	and    edi,0xffff
c00083eb:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00083f0:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00083f4:	eb 15                	jmp    c000840b <Phys::physicalMemorySetup(unsigned int)+0x8f>
c00083f6:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00083fa:	83 c3 18             	add    ebx,0x18
c00083fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008401:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0008405:	0f 84 77 01 00 00    	je     c0008582 <Phys::physicalMemorySetup(unsigned int)+0x206>
c000840b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000840e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008411:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0008414:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008418:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000841c:	8b 33                	mov    esi,DWORD PTR [ebx]
c000841e:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008421:	01 f0                	add    eax,esi
c0008423:	55                   	push   ebp
c0008424:	11 fa                	adc    edx,edi
c0008426:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000842a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000842e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008432:	50                   	push   eax
c0008433:	56                   	push   esi
c0008434:	68 30 d8 01 c0       	push   0xc001d830
c0008439:	e8 ae 27 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000843e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008442:	83 c4 10             	add    esp,0x10
c0008445:	09 f8                	or     eax,edi
c0008447:	0f 85 35 01 00 00    	jne    c0008582 <Phys::physicalMemorySetup(unsigned int)+0x206>
c000844d:	4d                   	dec    ebp
c000844e:	75 a6                	jne    c00083f6 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008450:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008454:	ba 00 00 08 00       	mov    edx,0x80000
c0008459:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000845d:	39 f2                	cmp    edx,esi
c000845f:	89 c1                	mov    ecx,eax
c0008461:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0008469:	19 f9                	sbb    ecx,edi
c000846b:	0f 82 a7 00 00 00    	jb     c0008518 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0008471:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008475:	89 c1                	mov    ecx,eax
c0008477:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000847b:	0f 83 97 00 00 00    	jae    c0008518 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0008481:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008486:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000848a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000848e:	39 fa                	cmp    edx,edi
c0008490:	19 e8                	sbb    eax,ebp
c0008492:	0f 82 9a 01 00 00    	jb     c0008632 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0008498:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000849c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00084a0:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00084a6:	ba ff 1f 00 00       	mov    edx,0x1fff
c00084ab:	83 d5 ff             	adc    ebp,0xffffffff
c00084ae:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00084b2:	31 c0                	xor    eax,eax
c00084b4:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00084b8:	39 fa                	cmp    edx,edi
c00084ba:	89 c1                	mov    ecx,eax
c00084bc:	19 e9                	sbb    ecx,ebp
c00084be:	0f 83 32 ff ff ff    	jae    c00083f6 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00084c4:	be 00 00 08 00       	mov    esi,0x80000
c00084c9:	51                   	push   ecx
c00084ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00084ce:	57                   	push   edi
c00084cf:	56                   	push   esi
c00084d0:	68 54 d8 01 c0       	push   0xc001d854
c00084d5:	e8 12 27 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00084da:	5d                   	pop    ebp
c00084db:	58                   	pop    eax
c00084dc:	57                   	push   edi
c00084dd:	56                   	push   esi
c00084de:	e8 61 fe ff ff       	call   c0008344 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00084e3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00084e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00084eb:	83 c4 0c             	add    esp,0xc
c00084ee:	0f ac d0 0c          	shrd   eax,edx,0xc
c00084f2:	03 05 e8 09 02 c0    	add    eax,DWORD PTR ds:0xc00209e8
c00084f8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00084ff:	a3 e8 09 02 c0       	mov    ds:0xc00209e8,eax
c0008504:	52                   	push   edx
c0008505:	50                   	push   eax
c0008506:	68 b9 d8 01 c0       	push   0xc001d8b9
c000850b:	e8 dc 26 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0008510:	83 c4 10             	add    esp,0x10
c0008513:	e9 de fe ff ff       	jmp    c00083f6 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008518:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000851c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008520:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008524:	39 ea                	cmp    edx,ebp
c0008526:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000852a:	0f 82 c6 fe ff ff    	jb     c00083f6 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008530:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008535:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0008539:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000853d:	0f 83 b3 fe ff ff    	jae    c00083f6 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008543:	39 ee                	cmp    esi,ebp
c0008545:	89 f8                	mov    eax,edi
c0008547:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000854b:	0f 83 78 ff ff ff    	jae    c00084c9 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0008551:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008555:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008559:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000855d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008561:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008565:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008569:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000856d:	e9 57 ff ff ff       	jmp    c00084c9 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0008572:	83 ec 0c             	sub    esp,0xc
c0008575:	68 ab d8 01 c0       	push   0xc001d8ab
c000857a:	e8 6c 81 00 00       	call   c00106eb <Krnl::panic(char const*)>
c000857f:	83 c4 10             	add    esp,0x10
c0008582:	83 ec 08             	sub    esp,0x8
c0008585:	bb 60 00 00 00       	mov    ebx,0x60
c000858a:	6a 00                	push   0x0
c000858c:	6a 06                	push   0x6
c000858e:	e8 e2 fb ff ff       	call   c0008175 <Phys::setPageState(unsigned long, bool)>
c0008593:	58                   	pop    eax
c0008594:	5a                   	pop    edx
c0008595:	6a 00                	push   0x0
c0008597:	6a 07                	push   0x7
c0008599:	e8 d7 fb ff ff       	call   c0008175 <Phys::setPageState(unsigned long, bool)>
c000859e:	83 05 e8 09 02 c0 02 	add    DWORD PTR ds:0xc00209e8,0x2
c00085a5:	83 c4 10             	add    esp,0x10
c00085a8:	83 ec 08             	sub    esp,0x8
c00085ab:	6a 00                	push   0x0
c00085ad:	53                   	push   ebx
c00085ae:	43                   	inc    ebx
c00085af:	e8 c1 fb ff ff       	call   c0008175 <Phys::setPageState(unsigned long, bool)>
c00085b4:	83 c4 10             	add    esp,0x10
c00085b7:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00085bd:	75 e9                	jne    c00085a8 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c00085bf:	a1 e8 09 02 c0       	mov    eax,ds:0xc00209e8
c00085c4:	bb 40 01 00 00       	mov    ebx,0x140
c00085c9:	83 c0 20             	add    eax,0x20
c00085cc:	a3 e8 09 02 c0       	mov    ds:0xc00209e8,eax
c00085d1:	eb 22                	jmp    c00085f5 <Phys::physicalMemorySetup(unsigned int)+0x279>
c00085d3:	83 ec 08             	sub    esp,0x8
c00085d6:	6a 00                	push   0x0
c00085d8:	53                   	push   ebx
c00085d9:	43                   	inc    ebx
c00085da:	e8 96 fb ff ff       	call   c0008175 <Phys::setPageState(unsigned long, bool)>
c00085df:	a1 e8 09 02 c0       	mov    eax,ds:0xc00209e8
c00085e4:	83 c4 10             	add    esp,0x10
c00085e7:	40                   	inc    eax
c00085e8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00085ee:	a3 e8 09 02 c0       	mov    ds:0xc00209e8,eax
c00085f3:	74 07                	je     c00085fc <Phys::physicalMemorySetup(unsigned int)+0x280>
c00085f5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00085fa:	7e d7                	jle    c00085d3 <Phys::physicalMemorySetup(unsigned int)+0x257>
c00085fc:	bb d0 01 00 00       	mov    ebx,0x1d0
c0008601:	3d ff 07 00 00       	cmp    eax,0x7ff
c0008606:	7f 22                	jg     c000862a <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0008608:	83 ec 08             	sub    esp,0x8
c000860b:	6a 00                	push   0x0
c000860d:	53                   	push   ebx
c000860e:	43                   	inc    ebx
c000860f:	e8 61 fb ff ff       	call   c0008175 <Phys::setPageState(unsigned long, bool)>
c0008614:	a1 e8 09 02 c0       	mov    eax,ds:0xc00209e8
c0008619:	83 c4 10             	add    esp,0x10
c000861c:	40                   	inc    eax
c000861d:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0008623:	a3 e8 09 02 c0       	mov    ds:0xc00209e8,eax
c0008628:	75 d7                	jne    c0008601 <Phys::physicalMemorySetup(unsigned int)+0x285>
c000862a:	83 c4 3c             	add    esp,0x3c
c000862d:	5b                   	pop    ebx
c000862e:	5e                   	pop    esi
c000862f:	5f                   	pop    edi
c0008630:	5d                   	pop    ebp
c0008631:	c3                   	ret    
c0008632:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000863a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008642:	e9 51 fe ff ff       	jmp    c0008498 <Phys::physicalMemorySetup(unsigned int)+0x11c>
c0008647:	90                   	nop

c0008648 <Pipe::isAtty()>:
c0008648:	31 c0                	xor    eax,eax
c000864a:	c3                   	ret    
c000864b:	90                   	nop

c000864c <Pipe::~Pipe()>:
c000864c:	83 ec 0c             	sub    esp,0xc
c000864f:	ba 18 d9 01 c0       	mov    edx,0xc001d918
c0008654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008658:	89 10                	mov    DWORD PTR [eax],edx
c000865a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000865e:	83 ec 0c             	sub    esp,0xc
c0008661:	50                   	push   eax
c0008662:	e8 d1 10 00 00       	call   c0009738 <UnixFile::~UnixFile()>
c0008667:	83 c4 10             	add    esp,0x10
c000866a:	90                   	nop
c000866b:	83 c4 0c             	add    esp,0xc
c000866e:	c3                   	ret    
c000866f:	90                   	nop

c0008670 <Pipe::~Pipe()>:
c0008670:	83 ec 0c             	sub    esp,0xc
c0008673:	83 ec 0c             	sub    esp,0xc
c0008676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000867a:	e8 cd ff ff ff       	call   c000864c <Pipe::~Pipe()>
c000867f:	83 c4 10             	add    esp,0x10
c0008682:	83 ec 08             	sub    esp,0x8
c0008685:	6a 20                	push   0x20
c0008687:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000868b:	e8 66 24 00 00       	call   c000aaf6 <operator delete(void*, unsigned long)>
c0008690:	83 c4 10             	add    esp,0x10
c0008693:	83 c4 0c             	add    esp,0xc
c0008696:	c3                   	ret    
c0008697:	90                   	nop

c0008698 <Pipe::write(unsigned long long, void*, int*)>:
c0008698:	55                   	push   ebp
c0008699:	57                   	push   edi
c000869a:	56                   	push   esi
c000869b:	53                   	push   ebx
c000869c:	83 ec 1c             	sub    esp,0x1c
c000869f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00086a7:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00086aa:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00086ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00086b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00086b5:	89 d8                	mov    eax,ebx
c00086b7:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00086ba:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00086be:	89 d6                	mov    esi,edx
c00086c0:	89 d7                	mov    edi,edx
c00086c2:	c1 ff 1f             	sar    edi,0x1f
c00086c5:	03 34 24             	add    esi,DWORD PTR [esp]
c00086c8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00086cc:	c1 f8 1f             	sar    eax,0x1f
c00086cf:	39 f3                	cmp    ebx,esi
c00086d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086d9:	19 f8                	sbb    eax,edi
c00086db:	b8 01 00 00 00       	mov    eax,0x1
c00086e0:	72 6e                	jb     c0008750 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00086e2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00086e5:	01 d0                	add    eax,edx
c00086e7:	99                   	cdq    
c00086e8:	f7 fb                	idiv   ebx
c00086ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086ee:	29 d3                	sub    ebx,edx
c00086f0:	89 d7                	mov    edi,edx
c00086f2:	89 de                	mov    esi,ebx
c00086f4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00086f7:	c1 fb 1f             	sar    ebx,0x1f
c00086fa:	39 f2                	cmp    edx,esi
c00086fc:	19 d8                	sbb    eax,ebx
c00086fe:	b8 00 00 00 00       	mov    eax,0x0
c0008703:	72 04                	jb     c0008709 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0008705:	89 d0                	mov    eax,edx
c0008707:	29 f0                	sub    eax,esi
c0008709:	89 d3                	mov    ebx,edx
c000870b:	29 c3                	sub    ebx,eax
c000870d:	74 0b                	je     c000871a <Pipe::write(unsigned long long, void*, int*)+0x82>
c000870f:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0008712:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0008716:	89 d9                	mov    ecx,ebx
c0008718:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000871a:	85 c0                	test   eax,eax
c000871c:	74 0d                	je     c000872b <Pipe::write(unsigned long long, void*, int*)+0x93>
c000871e:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0008722:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008725:	89 de                	mov    esi,ebx
c0008727:	89 c1                	mov    ecx,eax
c0008729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000872b:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000872e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008733:	75 10                	jne    c0008745 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008735:	83 ec 0c             	sub    esp,0xc
c0008738:	68 d5 d8 01 c0       	push   0xc001d8d5
c000873d:	e8 a9 7f 00 00       	call   c00106eb <Krnl::panic(char const*)>
c0008742:	83 c4 10             	add    esp,0x10
c0008745:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008749:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000874c:	89 08                	mov    DWORD PTR [eax],ecx
c000874e:	31 c0                	xor    eax,eax
c0008750:	83 c4 1c             	add    esp,0x1c
c0008753:	5b                   	pop    ebx
c0008754:	5e                   	pop    esi
c0008755:	5f                   	pop    edi
c0008756:	5d                   	pop    ebp
c0008757:	c3                   	ret    

c0008758 <Pipe::read(unsigned long long, void*, int*)>:
c0008758:	55                   	push   ebp
c0008759:	57                   	push   edi
c000875a:	56                   	push   esi
c000875b:	53                   	push   ebx
c000875c:	83 ec 1c             	sub    esp,0x1c
c000875f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008763:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008767:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000876b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000876e:	89 c8                	mov    eax,ecx
c0008770:	99                   	cdq    
c0008771:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008775:	74 24                	je     c000879b <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008777:	39 f9                	cmp    ecx,edi
c0008779:	89 d1                	mov    ecx,edx
c000877b:	19 f1                	sbb    ecx,esi
c000877d:	73 1c                	jae    c000879b <Pipe::read(unsigned long long, void*, int*)+0x43>
c000877f:	fa                   	cli    
c0008780:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0008786:	e8 b5 b2 00 00       	call   c0013a40 <schedule()>
c000878b:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0008790:	48                   	dec    eax
c0008791:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0008796:	75 d3                	jne    c000876b <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008798:	fb                   	sti    
c0008799:	eb d0                	jmp    c000876b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000879b:	39 f8                	cmp    eax,edi
c000879d:	89 d1                	mov    ecx,edx
c000879f:	89 3c 24             	mov    DWORD PTR [esp],edi
c00087a2:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00087a6:	19 f1                	sbb    ecx,esi
c00087a8:	73 07                	jae    c00087b1 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00087aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00087ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00087b1:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00087b4:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00087b7:	29 f7                	sub    edi,esi
c00087b9:	89 f8                	mov    eax,edi
c00087bb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00087bf:	99                   	cdq    
c00087c0:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00087c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00087c7:	19 d0                	sbb    eax,edx
c00087c9:	73 07                	jae    c00087d2 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00087cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00087ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087d2:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00087d5:	89 ea                	mov    edx,ebp
c00087d7:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00087db:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00087e0:	74 0d                	je     c00087ef <Pipe::read(unsigned long long, void*, int*)+0x97>
c00087e2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00087e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00087ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00087ef:	85 d2                	test   edx,edx
c00087f1:	74 11                	je     c0008804 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00087f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087f7:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00087fa:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00087fe:	89 d1                	mov    ecx,edx
c0008800:	89 c7                	mov    edi,eax
c0008802:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008804:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008807:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000880a:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000880d:	99                   	cdq    
c000880e:	89 f7                	mov    edi,esi
c0008810:	03 04 24             	add    eax,DWORD PTR [esp]
c0008813:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008817:	c1 ff 1f             	sar    edi,0x1f
c000881a:	57                   	push   edi
c000881b:	56                   	push   esi
c000881c:	52                   	push   edx
c000881d:	50                   	push   eax
c000881e:	e8 0d 3b 01 00       	call   c001c330 <__umoddi3>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008829:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000882e:	75 10                	jne    c0008840 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008830:	83 ec 0c             	sub    esp,0xc
c0008833:	68 f2 d8 01 c0       	push   0xc001d8f2
c0008838:	e8 ae 7e 00 00       	call   c00106eb <Krnl::panic(char const*)>
c000883d:	83 c4 10             	add    esp,0x10
c0008840:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008844:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008847:	89 10                	mov    DWORD PTR [eax],edx
c0008849:	83 c4 1c             	add    esp,0x1c
c000884c:	31 c0                	xor    eax,eax
c000884e:	5b                   	pop    ebx
c000884f:	5e                   	pop    esi
c0008850:	5f                   	pop    edi
c0008851:	5d                   	pop    ebp
c0008852:	c3                   	ret    
c0008853:	90                   	nop

c0008854 <Pipe::Pipe(int)>:
c0008854:	83 ec 0c             	sub    esp,0xc
c0008857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000885b:	83 ec 08             	sub    esp,0x8
c000885e:	6a 00                	push   0x0
c0008860:	50                   	push   eax
c0008861:	e8 f0 0c 00 00       	call   c0009556 <UnixFile::UnixFile(int)>
c0008866:	83 c4 10             	add    esp,0x10
c0008869:	ba 18 d9 01 c0       	mov    edx,0xc001d918
c000886e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008872:	89 10                	mov    DWORD PTR [eax],edx
c0008874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008878:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000887c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000887f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008883:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000888a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000888e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008895:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008899:	83 ec 0c             	sub    esp,0xc
c000889c:	50                   	push   eax
c000889d:	e8 bb f5 ff ff       	call   c0007e5d <malloc>
c00088a2:	83 c4 10             	add    esp,0x10
c00088a5:	89 c2                	mov    edx,eax
c00088a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088ab:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00088ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088b2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00088b6:	90                   	nop
c00088b7:	83 c4 0c             	add    esp,0xc
c00088ba:	c3                   	ret    
c00088bb:	90                   	nop

c00088bc <VgaText::isAtty()>:
c00088bc:	b0 01                	mov    al,0x1
c00088be:	c3                   	ret    
c00088bf:	90                   	nop

c00088c0 <VgaText::~VgaText()>:
c00088c0:	83 ec 0c             	sub    esp,0xc
c00088c3:	ba a0 d9 01 c0       	mov    edx,0xc001d9a0
c00088c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088cc:	89 10                	mov    DWORD PTR [eax],edx
c00088ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088d2:	83 ec 0c             	sub    esp,0xc
c00088d5:	50                   	push   eax
c00088d6:	e8 5d 0e 00 00       	call   c0009738 <UnixFile::~UnixFile()>
c00088db:	83 c4 10             	add    esp,0x10
c00088de:	90                   	nop
c00088df:	83 c4 0c             	add    esp,0xc
c00088e2:	c3                   	ret    
c00088e3:	90                   	nop

c00088e4 <VgaText::~VgaText()>:
c00088e4:	83 ec 0c             	sub    esp,0xc
c00088e7:	83 ec 0c             	sub    esp,0xc
c00088ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00088ee:	e8 cd ff ff ff       	call   c00088c0 <VgaText::~VgaText()>
c00088f3:	83 c4 10             	add    esp,0x10
c00088f6:	83 ec 08             	sub    esp,0x8
c00088f9:	68 34 01 00 00       	push   0x134
c00088fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008902:	e8 ef 21 00 00       	call   c000aaf6 <operator delete(void*, unsigned long)>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	83 c4 0c             	add    esp,0xc
c000890d:	c3                   	ret    

c000890e <VgaText::read(unsigned long long, void*, int*)>:
c000890e:	83 ec 10             	sub    esp,0x10
c0008911:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008915:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008919:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891d:	e8 24 45 00 00       	call   c000ce46 <readKeyboard(VgaText*, char*, unsigned long)>
c0008922:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008926:	89 02                	mov    DWORD PTR [edx],eax
c0008928:	31 c0                	xor    eax,eax
c000892a:	83 c4 1c             	add    esp,0x1c
c000892d:	c3                   	ret    

c000892e <setTerminalScrollLock(bool)>:
c000892e:	c3                   	ret    

c000892f <doTerminalCycle()>:
c000892f:	c3                   	ret    

c0008930 <addToTerminalCycle(VgaText*)>:
c0008930:	c3                   	ret    

c0008931 <scrollTerminalScrollLock(int)>:
c0008931:	c3                   	ret    

c0008932 <VgaText::updateTitle()>:
c0008932:	c3                   	ret    
c0008933:	90                   	nop

c0008934 <VgaText::load()>:
c0008934:	c3                   	ret    
c0008935:	90                   	nop

c0008936 <VgaText::updateCursor()>:
c0008936:	83 ec 14             	sub    esp,0x14
c0008939:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000893d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008940:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008943:	e8 e0 db 00 00       	call   c0016528 <HalConsoleCursorUpdate(int, int)>
c0008948:	83 c4 1c             	add    esp,0x1c
c000894b:	c3                   	ret    

c000894c <VgaText::doANSI_SGR(int)>:
c000894c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008954:	85 d2                	test   edx,edx
c0008956:	75 0b                	jne    c0008963 <VgaText::doANSI_SGR(int)+0x17>
c0008958:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000895b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000895e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008961:	eb 59                	jmp    c00089bc <VgaText::doANSI_SGR(int)+0x70>
c0008963:	83 fa 07             	cmp    edx,0x7
c0008966:	75 0b                	jne    c0008973 <VgaText::doANSI_SGR(int)+0x27>
c0008968:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000896b:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000896e:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008971:	eb 49                	jmp    c00089bc <VgaText::doANSI_SGR(int)+0x70>
c0008973:	83 fa 1b             	cmp    edx,0x1b
c0008976:	74 e0                	je     c0008958 <VgaText::doANSI_SGR(int)+0xc>
c0008978:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000897b:	83 f9 07             	cmp    ecx,0x7
c000897e:	77 09                	ja     c0008989 <VgaText::doANSI_SGR(int)+0x3d>
c0008980:	8b 14 8d c0 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0740]
c0008987:	eb 20                	jmp    c00089a9 <VgaText::doANSI_SGR(int)+0x5d>
c0008989:	8d 4a d8             	lea    ecx,[edx-0x28]
c000898c:	83 f9 07             	cmp    ecx,0x7
c000898f:	77 09                	ja     c000899a <VgaText::doANSI_SGR(int)+0x4e>
c0008991:	8b 14 8d c0 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0740]
c0008998:	eb 22                	jmp    c00089bc <VgaText::doANSI_SGR(int)+0x70>
c000899a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000899d:	83 f9 07             	cmp    ecx,0x7
c00089a0:	77 0b                	ja     c00089ad <VgaText::doANSI_SGR(int)+0x61>
c00089a2:	8b 14 95 78 f7 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0888]
c00089a9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00089ac:	c3                   	ret    
c00089ad:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00089b0:	83 f9 07             	cmp    ecx,0x7
c00089b3:	77 0a                	ja     c00089bf <VgaText::doANSI_SGR(int)+0x73>
c00089b5:	8b 14 95 50 f7 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe08b0]
c00089bc:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00089bf:	c3                   	ret    

c00089c0 <VgaText::setDefaultBgColour(VgaColour)>:
c00089c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00089c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00089c8:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00089cb:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00089ce:	c3                   	ret    
c00089cf:	90                   	nop

c00089d0 <VgaText::setDefaultFgColour(VgaColour)>:
c00089d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00089d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00089d8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00089db:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00089de:	c3                   	ret    
c00089df:	90                   	nop

c00089e0 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00089e0:	53                   	push   ebx
c00089e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00089e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00089e9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00089ed:	51                   	push   ecx
c00089ee:	e8 cd ff ff ff       	call   c00089c0 <VgaText::setDefaultBgColour(VgaColour)>
c00089f3:	58                   	pop    eax
c00089f4:	5a                   	pop    edx
c00089f5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00089f9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00089fd:	5b                   	pop    ebx
c00089fe:	eb d0                	jmp    c00089d0 <VgaText::setDefaultFgColour(VgaColour)>

c0008a00 <VgaText::setTitleTextColour(VgaColour)>:
c0008a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008a04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008a08:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008a0b:	c3                   	ret    

c0008a0c <VgaText::setTitleColour(VgaColour)>:
c0008a0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008a10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008a14:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008a17:	c3                   	ret    

c0008a18 <VgaText::setTitle(char*)>:
c0008a18:	c3                   	ret    
c0008a19:	90                   	nop

c0008a1a <VgaText::combineColours(unsigned char, unsigned char)>:
c0008a1a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008a1e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008a23:	83 e0 0f             	and    eax,0xf
c0008a26:	c1 e2 04             	shl    edx,0x4
c0008a29:	09 d0                	or     eax,edx
c0008a2b:	c3                   	ret    

c0008a2c <VgaText::scrollScreen()>:
c0008a2c:	55                   	push   ebp
c0008a2d:	b9 01 00 00 00       	mov    ecx,0x1
c0008a32:	57                   	push   edi
c0008a33:	56                   	push   esi
c0008a34:	53                   	push   ebx
c0008a35:	83 ec 0c             	sub    esp,0xc
c0008a38:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a3c:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0008a42:	31 ff                	xor    edi,edi
c0008a44:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008a47:	83 f9 18             	cmp    ecx,0x18
c0008a4a:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0008a4d:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0008a54:	75 27                	jne    c0008a7d <VgaText::scrollScreen()+0x51>
c0008a56:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008a59:	01 f5                	add    ebp,esi
c0008a5b:	f7 c7 01 00 00 00    	test   edi,0x1
c0008a61:	74 16                	je     c0008a79 <VgaText::scrollScreen()+0x4d>
c0008a63:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008a67:	50                   	push   eax
c0008a68:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008a6c:	50                   	push   eax
c0008a6d:	e8 a8 ff ff ff       	call   c0008a1a <VgaText::combineColours(unsigned char, unsigned char)>
c0008a72:	5a                   	pop    edx
c0008a73:	5a                   	pop    edx
c0008a74:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0008a77:	eb 04                	jmp    c0008a7d <VgaText::scrollScreen()+0x51>
c0008a79:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0008a7d:	47                   	inc    edi
c0008a7e:	46                   	inc    esi
c0008a7f:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008a85:	75 bd                	jne    c0008a44 <VgaText::scrollScreen()+0x18>
c0008a87:	41                   	inc    ecx
c0008a88:	83 f9 19             	cmp    ecx,0x19
c0008a8b:	75 af                	jne    c0008a3c <VgaText::scrollScreen()+0x10>
c0008a8d:	39 1d 04 0a 02 c0    	cmp    DWORD PTR ds:0xc0020a04,ebx
c0008a93:	75 1f                	jne    c0008ab4 <VgaText::scrollScreen()+0x88>
c0008a95:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008a99:	74 05                	je     c0008aa0 <VgaText::scrollScreen()+0x74>
c0008a9b:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008a9e:	eb 14                	jmp    c0008ab4 <VgaText::scrollScreen()+0x88>
c0008aa0:	50                   	push   eax
c0008aa1:	50                   	push   eax
c0008aa2:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008aa6:	50                   	push   eax
c0008aa7:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008aab:	50                   	push   eax
c0008aac:	e8 03 d9 00 00       	call   c00163b4 <HalConsoleScroll(int, int)>
c0008ab1:	83 c4 10             	add    esp,0x10
c0008ab4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008ab8:	83 c4 0c             	add    esp,0xc
c0008abb:	5b                   	pop    ebx
c0008abc:	5e                   	pop    esi
c0008abd:	5f                   	pop    edi
c0008abe:	5d                   	pop    ebp
c0008abf:	e9 72 fe ff ff       	jmp    c0008936 <VgaText::updateCursor()>

c0008ac4 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008ac4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008ac9:	c1 e0 08             	shl    eax,0x8
c0008acc:	89 c2                	mov    edx,eax
c0008ace:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0008ad3:	09 d0                	or     eax,edx
c0008ad5:	c3                   	ret    

c0008ad6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008ad6:	55                   	push   ebp
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	53                   	push   ebx
c0008ada:	83 ec 1c             	sub    esp,0x1c
c0008add:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008ae1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008ae5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008ae9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008aed:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0008af1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008af5:	0f b6 c3             	movzx  eax,bl
c0008af8:	50                   	push   eax
c0008af9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008afe:	50                   	push   eax
c0008aff:	e8 16 ff ff ff       	call   c0008a1a <VgaText::combineColours(unsigned char, unsigned char)>
c0008b04:	5a                   	pop    edx
c0008b05:	0f b6 c0             	movzx  eax,al
c0008b08:	59                   	pop    ecx
c0008b09:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008b0e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008b12:	50                   	push   eax
c0008b13:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008b17:	e8 a8 ff ff ff       	call   c0008ac4 <VgaText::combineCharAndColour(char, unsigned char)>
c0008b1c:	5a                   	pop    edx
c0008b1d:	66 6b d7 50          	imul   dx,di,0x50
c0008b21:	59                   	pop    ecx
c0008b22:	01 f2                	add    edx,esi
c0008b24:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008b27:	0f b7 d2             	movzx  edx,dx
c0008b2a:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008b2e:	39 2d 04 0a 02 c0    	cmp    DWORD PTR ds:0xc0020a04,ebp
c0008b34:	75 28                	jne    c0008b5e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c0008b36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b3a:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008b3e:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008b42:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008b46:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008b4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008b4e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008b52:	83 c4 1c             	add    esp,0x1c
c0008b55:	5b                   	pop    ebx
c0008b56:	5e                   	pop    esi
c0008b57:	5f                   	pop    edi
c0008b58:	5d                   	pop    ebp
c0008b59:	e9 5e d9 00 00       	jmp    c00164bc <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008b5e:	83 c4 1c             	add    esp,0x1c
c0008b61:	5b                   	pop    ebx
c0008b62:	5e                   	pop    esi
c0008b63:	5f                   	pop    edi
c0008b64:	5d                   	pop    ebp
c0008b65:	c3                   	ret    

c0008b66 <VgaText::getCursorX()>:
c0008b66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b6a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008b6d:	c3                   	ret    

c0008b6e <VgaText::getCursorY()>:
c0008b6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b72:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008b75:	c3                   	ret    

c0008b76 <VgaText::setCursor(int, int)>:
c0008b76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008b7e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008b81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008b85:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008b88:	e9 a9 fd ff ff       	jmp    c0008936 <VgaText::updateCursor()>

c0008b8d <setActiveTerminal(VgaText*)>:
c0008b8d:	53                   	push   ebx
c0008b8e:	83 ec 08             	sub    esp,0x8
c0008b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b95:	85 db                	test   ebx,ebx
c0008b97:	75 11                	jne    c0008baa <setActiveTerminal(VgaText*)+0x1d>
c0008b99:	c7 44 24 10 2c d9 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d92c
c0008ba1:	83 c4 08             	add    esp,0x8
c0008ba4:	5b                   	pop    ebx
c0008ba5:	e9 41 7b 00 00       	jmp    c00106eb <Krnl::panic(char const*)>
c0008baa:	a1 04 0a 02 c0       	mov    eax,ds:0xc0020a04
c0008baf:	85 c0                	test   eax,eax
c0008bb1:	74 0c                	je     c0008bbf <setActiveTerminal(VgaText*)+0x32>
c0008bb3:	83 ec 0c             	sub    esp,0xc
c0008bb6:	50                   	push   eax
c0008bb7:	e8 7a fd ff ff       	call   c0008936 <VgaText::updateCursor()>
c0008bbc:	83 c4 10             	add    esp,0x10
c0008bbf:	89 1d 04 0a 02 c0    	mov    DWORD PTR ds:0xc0020a04,ebx
c0008bc5:	50                   	push   eax
c0008bc6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bc9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcc:	53                   	push   ebx
c0008bcd:	e8 a4 ff ff ff       	call   c0008b76 <VgaText::setCursor(int, int)>
c0008bd2:	83 c4 18             	add    esp,0x18
c0008bd5:	5b                   	pop    ebx
c0008bd6:	c3                   	ret    
c0008bd7:	90                   	nop

c0008bd8 <VgaText::clearScreen()>:
c0008bd8:	57                   	push   edi
c0008bd9:	56                   	push   esi
c0008bda:	31 f6                	xor    esi,esi
c0008bdc:	53                   	push   ebx
c0008bdd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008be1:	52                   	push   edx
c0008be2:	6a 00                	push   0x0
c0008be4:	6a 00                	push   0x0
c0008be6:	53                   	push   ebx
c0008be7:	e8 8a ff ff ff       	call   c0008b76 <VgaText::setCursor(int, int)>
c0008bec:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008bf3:	83 c4 10             	add    esp,0x10
c0008bf6:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008bf9:	7e 20                	jle    c0008c1b <VgaText::clearScreen()+0x43>
c0008bfb:	31 ff                	xor    edi,edi
c0008bfd:	50                   	push   eax
c0008bfe:	50                   	push   eax
c0008bff:	56                   	push   esi
c0008c00:	57                   	push   edi
c0008c01:	47                   	inc    edi
c0008c02:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c05:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008c08:	6a 20                	push   0x20
c0008c0a:	53                   	push   ebx
c0008c0b:	e8 c6 fe ff ff       	call   c0008ad6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008c10:	83 c4 20             	add    esp,0x20
c0008c13:	83 ff 50             	cmp    edi,0x50
c0008c16:	75 e5                	jne    c0008bfd <VgaText::clearScreen()+0x25>
c0008c18:	46                   	inc    esi
c0008c19:	eb db                	jmp    c0008bf6 <VgaText::clearScreen()+0x1e>
c0008c1b:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c22:	5b                   	pop    ebx
c0008c23:	5e                   	pop    esi
c0008c24:	5f                   	pop    edi
c0008c25:	c3                   	ret    

c0008c26 <VgaText::setCursorX(int)>:
c0008c26:	83 ec 10             	sub    esp,0x10
c0008c29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c2d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008c30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008c34:	50                   	push   eax
c0008c35:	e8 3c ff ff ff       	call   c0008b76 <VgaText::setCursor(int, int)>
c0008c3a:	83 c4 1c             	add    esp,0x1c
c0008c3d:	c3                   	ret    

c0008c3e <VgaText::setCursorY(int)>:
c0008c3e:	83 ec 10             	sub    esp,0x10
c0008c41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008c49:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008c4c:	50                   	push   eax
c0008c4d:	e8 24 ff ff ff       	call   c0008b76 <VgaText::setCursor(int, int)>
c0008c52:	83 c4 1c             	add    esp,0x1c
c0008c55:	c3                   	ret    

c0008c56 <VgaText::incrementCursor(bool)>:
c0008c56:	56                   	push   esi
c0008c57:	53                   	push   ebx
c0008c58:	51                   	push   ecx
c0008c59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008c5d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008c61:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008c64:	40                   	inc    eax
c0008c65:	83 f8 50             	cmp    eax,0x50
c0008c68:	74 05                	je     c0008c6f <VgaText::incrementCursor(bool)+0x19>
c0008c6a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c6d:	eb 24                	jmp    c0008c93 <VgaText::incrementCursor(bool)+0x3d>
c0008c6f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008c72:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008c79:	8d 50 01             	lea    edx,[eax+0x1]
c0008c7c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008c7f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008c82:	75 0f                	jne    c0008c93 <VgaText::incrementCursor(bool)+0x3d>
c0008c84:	83 ec 0c             	sub    esp,0xc
c0008c87:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008c8a:	53                   	push   ebx
c0008c8b:	e8 9c fd ff ff       	call   c0008a2c <VgaText::scrollScreen()>
c0008c90:	83 c4 10             	add    esp,0x10
c0008c93:	89 f0                	mov    eax,esi
c0008c95:	84 c0                	test   al,al
c0008c97:	74 0c                	je     c0008ca5 <VgaText::incrementCursor(bool)+0x4f>
c0008c99:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c9d:	5a                   	pop    edx
c0008c9e:	5b                   	pop    ebx
c0008c9f:	5e                   	pop    esi
c0008ca0:	e9 91 fc ff ff       	jmp    c0008936 <VgaText::updateCursor()>
c0008ca5:	58                   	pop    eax
c0008ca6:	5b                   	pop    ebx
c0008ca7:	5e                   	pop    esi
c0008ca8:	c3                   	ret    
c0008ca9:	90                   	nop

c0008caa <VgaText::decrementCursor(bool)>:
c0008caa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008cae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008cb2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008cb5:	85 c0                	test   eax,eax
c0008cb7:	74 04                	je     c0008cbd <VgaText::decrementCursor(bool)+0x13>
c0008cb9:	48                   	dec    eax
c0008cba:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008cbd:	84 c9                	test   cl,cl
c0008cbf:	74 09                	je     c0008cca <VgaText::decrementCursor(bool)+0x20>
c0008cc1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008cc5:	e9 6c fc ff ff       	jmp    c0008936 <VgaText::updateCursor()>
c0008cca:	c3                   	ret    
c0008ccb:	90                   	nop

c0008ccc <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008ccc:	53                   	push   ebx
c0008ccd:	83 ec 08             	sub    esp,0x8
c0008cd0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008cd4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008cd8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008cdc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008ce0:	3c 07                	cmp    al,0x7
c0008ce2:	75 21                	jne    c0008d05 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c0008ce4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008cec:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008cf4:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008cfc:	83 c4 08             	add    esp,0x8
c0008cff:	5b                   	pop    ebx
c0008d00:	e9 3e 2d 00 00       	jmp    c000ba43 <Krnl::beep(int, int, bool)>
c0008d05:	3c 0d                	cmp    al,0xd
c0008d07:	75 09                	jne    c0008d12 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008d09:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008d10:	eb 2c                	jmp    c0008d3e <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008d12:	3c 0a                	cmp    al,0xa
c0008d14:	75 31                	jne    c0008d47 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008d16:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008d19:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008d20:	8d 50 01             	lea    edx,[eax+0x1]
c0008d23:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008d26:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008d29:	75 0f                	jne    c0008d3a <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008d2b:	83 ec 0c             	sub    esp,0xc
c0008d2e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008d31:	53                   	push   ebx
c0008d32:	e8 f5 fc ff ff       	call   c0008a2c <VgaText::scrollScreen()>
c0008d37:	83 c4 10             	add    esp,0x10
c0008d3a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008d3e:	83 c4 08             	add    esp,0x8
c0008d41:	5b                   	pop    ebx
c0008d42:	e9 ef fb ff ff       	jmp    c0008936 <VgaText::updateCursor()>
c0008d47:	3c 08                	cmp    al,0x8
c0008d49:	75 25                	jne    c0008d70 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0008d4b:	50                   	push   eax
c0008d4c:	50                   	push   eax
c0008d4d:	6a 01                	push   0x1
c0008d4f:	53                   	push   ebx
c0008d50:	e8 55 ff ff ff       	call   c0008caa <VgaText::decrementCursor(bool)>
c0008d55:	5a                   	pop    edx
c0008d56:	59                   	pop    ecx
c0008d57:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008d5a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008d5d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008d60:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008d63:	6a 20                	push   0x20
c0008d65:	53                   	push   ebx
c0008d66:	e8 6b fd ff ff       	call   c0008ad6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008d6b:	83 c4 28             	add    esp,0x28
c0008d6e:	5b                   	pop    ebx
c0008d6f:	c3                   	ret    
c0008d70:	83 ec 08             	sub    esp,0x8
c0008d73:	0f be c0             	movsx  eax,al
c0008d76:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008d79:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008d7c:	51                   	push   ecx
c0008d7d:	52                   	push   edx
c0008d7e:	50                   	push   eax
c0008d7f:	53                   	push   ebx
c0008d80:	e8 51 fd ff ff       	call   c0008ad6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008d85:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008d89:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008d91:	83 c4 28             	add    esp,0x28
c0008d94:	5b                   	pop    ebx
c0008d95:	e9 bc fe ff ff       	jmp    c0008c56 <VgaText::incrementCursor(bool)>

c0008d9a <VgaText::putchar(char)>:
c0008d9a:	56                   	push   esi
c0008d9b:	53                   	push   ebx
c0008d9c:	83 ec 14             	sub    esp,0x14
c0008d9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008da3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008da7:	3c 5b                	cmp    al,0x5b
c0008da9:	75 18                	jne    c0008dc3 <VgaText::putchar(char)+0x29>
c0008dab:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008daf:	74 1f                	je     c0008dd0 <VgaText::putchar(char)+0x36>
c0008db1:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008db7:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008dbe:	e9 bd 00 00 00       	jmp    c0008e80 <VgaText::putchar(char)+0xe6>
c0008dc3:	3c 1b                	cmp    al,0x1b
c0008dc5:	75 09                	jne    c0008dd0 <VgaText::putchar(char)+0x36>
c0008dc7:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008dcb:	e9 b0 00 00 00       	jmp    c0008e80 <VgaText::putchar(char)+0xe6>
c0008dd0:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0008dd3:	84 c9                	test   cl,cl
c0008dd5:	0f 84 92 00 00 00    	je     c0008e6d <VgaText::putchar(char)+0xd3>
c0008ddb:	8d 50 c0             	lea    edx,[eax-0x40]
c0008dde:	80 fa 3e             	cmp    dl,0x3e
c0008de1:	77 76                	ja     c0008e59 <VgaText::putchar(char)+0xbf>
c0008de3:	3c 6d                	cmp    al,0x6d
c0008de5:	75 47                	jne    c0008e2e <VgaText::putchar(char)+0x94>
c0008de7:	31 f6                	xor    esi,esi
c0008de9:	31 d2                	xor    edx,edx
c0008deb:	31 c0                	xor    eax,eax
c0008ded:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008df0:	7e 2d                	jle    c0008e1f <VgaText::putchar(char)+0x85>
c0008df2:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008df7:	80 fa 3b             	cmp    dl,0x3b
c0008dfa:	75 17                	jne    c0008e13 <VgaText::putchar(char)+0x79>
c0008dfc:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0008e00:	50                   	push   eax
c0008e01:	53                   	push   ebx
c0008e02:	e8 45 fb ff ff       	call   c000894c <VgaText::doANSI_SGR(int)>
c0008e07:	59                   	pop    ecx
c0008e08:	31 d2                	xor    edx,edx
c0008e0a:	58                   	pop    eax
c0008e0b:	31 c0                	xor    eax,eax
c0008e0d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008e11:	eb 09                	jmp    c0008e1c <VgaText::putchar(char)+0x82>
c0008e13:	6b c0 0a             	imul   eax,eax,0xa
c0008e16:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008e1a:	88 ca                	mov    dl,cl
c0008e1c:	46                   	inc    esi
c0008e1d:	eb ce                	jmp    c0008ded <VgaText::putchar(char)+0x53>
c0008e1f:	84 d2                	test   dl,dl
c0008e21:	74 2e                	je     c0008e51 <VgaText::putchar(char)+0xb7>
c0008e23:	50                   	push   eax
c0008e24:	53                   	push   ebx
c0008e25:	e8 22 fb ff ff       	call   c000894c <VgaText::doANSI_SGR(int)>
c0008e2a:	58                   	pop    eax
c0008e2b:	5a                   	pop    edx
c0008e2c:	eb 23                	jmp    c0008e51 <VgaText::putchar(char)+0xb7>
c0008e2e:	3c 4a                	cmp    al,0x4a
c0008e30:	75 1f                	jne    c0008e51 <VgaText::putchar(char)+0xb7>
c0008e32:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008e36:	75 19                	jne    c0008e51 <VgaText::putchar(char)+0xb7>
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	53                   	push   ebx
c0008e3c:	e8 97 fd ff ff       	call   c0008bd8 <VgaText::clearScreen()>
c0008e41:	83 c4 0c             	add    esp,0xc
c0008e44:	6a 00                	push   0x0
c0008e46:	6a 00                	push   0x0
c0008e48:	53                   	push   ebx
c0008e49:	e8 28 fd ff ff       	call   c0008b76 <VgaText::setCursor(int, int)>
c0008e4e:	83 c4 10             	add    esp,0x10
c0008e51:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008e57:	eb 27                	jmp    c0008e80 <VgaText::putchar(char)+0xe6>
c0008e59:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0008e5c:	83 fa 0e             	cmp    edx,0xe
c0008e5f:	7f 1f                	jg     c0008e80 <VgaText::putchar(char)+0xe6>
c0008e61:	8d 4a 01             	lea    ecx,[edx+0x1]
c0008e64:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008e67:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0008e6b:	eb 13                	jmp    c0008e80 <VgaText::putchar(char)+0xe6>
c0008e6d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e70:	0f be c0             	movsx  eax,al
c0008e73:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e76:	50                   	push   eax
c0008e77:	53                   	push   ebx
c0008e78:	e8 4f fe ff ff       	call   c0008ccc <VgaText::putchar(char, VgaColour, VgaColour)>
c0008e7d:	83 c4 10             	add    esp,0x10
c0008e80:	83 c4 14             	add    esp,0x14
c0008e83:	5b                   	pop    ebx
c0008e84:	5e                   	pop    esi
c0008e85:	c3                   	ret    

c0008e86 <VgaText::putx(unsigned int)>:
c0008e86:	57                   	push   edi
c0008e87:	b9 11 00 00 00       	mov    ecx,0x11
c0008e8c:	56                   	push   esi
c0008e8d:	be 3a d9 01 c0       	mov    esi,0xc001d93a
c0008e92:	53                   	push   ebx
c0008e93:	83 ec 20             	sub    esp,0x20
c0008e96:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008e9a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008e9e:	fc                   	cld    
c0008e9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008ea1:	be 08 00 00 00       	mov    esi,0x8
c0008ea6:	50                   	push   eax
c0008ea7:	50                   	push   eax
c0008ea8:	89 d8                	mov    eax,ebx
c0008eaa:	c1 e3 04             	shl    ebx,0x4
c0008ead:	c1 e8 1c             	shr    eax,0x1c
c0008eb0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008eb5:	50                   	push   eax
c0008eb6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008eba:	e8 db fe ff ff       	call   c0008d9a <VgaText::putchar(char)>
c0008ebf:	83 c4 10             	add    esp,0x10
c0008ec2:	4e                   	dec    esi
c0008ec3:	75 e1                	jne    c0008ea6 <VgaText::putx(unsigned int)+0x20>
c0008ec5:	83 c4 20             	add    esp,0x20
c0008ec8:	5b                   	pop    ebx
c0008ec9:	5e                   	pop    esi
c0008eca:	5f                   	pop    edi
c0008ecb:	c3                   	ret    

c0008ecc <VgaText::puts(char const*)>:
c0008ecc:	53                   	push   ebx
c0008ecd:	83 ec 08             	sub    esp,0x8
c0008ed0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ed4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ed7:	84 c0                	test   al,al
c0008ed9:	74 12                	je     c0008eed <VgaText::puts(char const*)+0x21>
c0008edb:	43                   	inc    ebx
c0008edc:	51                   	push   ecx
c0008edd:	51                   	push   ecx
c0008ede:	50                   	push   eax
c0008edf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ee3:	e8 b2 fe ff ff       	call   c0008d9a <VgaText::putchar(char)>
c0008ee8:	83 c4 10             	add    esp,0x10
c0008eeb:	eb e7                	jmp    c0008ed4 <VgaText::puts(char const*)+0x8>
c0008eed:	83 c4 08             	add    esp,0x8
c0008ef0:	5b                   	pop    ebx
c0008ef1:	c3                   	ret    

c0008ef2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ef2:	55                   	push   ebp
c0008ef3:	57                   	push   edi
c0008ef4:	56                   	push   esi
c0008ef5:	53                   	push   ebx
c0008ef6:	83 ec 0c             	sub    esp,0xc
c0008ef9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008efd:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008f01:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008f05:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008f0c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008f0f:	39 eb                	cmp    ebx,ebp
c0008f11:	74 13                	je     c0008f26 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008f13:	43                   	inc    ebx
c0008f14:	50                   	push   eax
c0008f15:	50                   	push   eax
c0008f16:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008f1a:	50                   	push   eax
c0008f1b:	56                   	push   esi
c0008f1c:	e8 79 fe ff ff       	call   c0008d9a <VgaText::putchar(char)>
c0008f21:	83 c4 10             	add    esp,0x10
c0008f24:	eb e9                	jmp    c0008f0f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008f26:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008f2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f31:	89 38                	mov    DWORD PTR [eax],edi
c0008f33:	83 c4 0c             	add    esp,0xc
c0008f36:	31 c0                	xor    eax,eax
c0008f38:	5b                   	pop    ebx
c0008f39:	5e                   	pop    esi
c0008f3a:	5f                   	pop    edi
c0008f3b:	5d                   	pop    ebp
c0008f3c:	c3                   	ret    
c0008f3d:	90                   	nop

c0008f3e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008f3e:	55                   	push   ebp
c0008f3f:	57                   	push   edi
c0008f40:	56                   	push   esi
c0008f41:	53                   	push   ebx
c0008f42:	83 ec 0c             	sub    esp,0xc
c0008f45:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008f49:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008f4e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008f55:	50                   	push   eax
c0008f56:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008f5b:	50                   	push   eax
c0008f5c:	e8 b9 fa ff ff       	call   c0008a1a <VgaText::combineColours(unsigned char, unsigned char)>
c0008f61:	5a                   	pop    edx
c0008f62:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008f67:	59                   	pop    ecx
c0008f68:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008f6b:	89 c5                	mov    ebp,eax
c0008f6d:	0f b7 f6             	movzx  esi,si
c0008f70:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008f74:	01 f6                	add    esi,esi
c0008f76:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008f79:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008f7c:	84 c0                	test   al,al
c0008f7e:	0f 84 f4 00 00 00    	je     c0009078 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0008f84:	3c 0d                	cmp    al,0xd
c0008f86:	75 0c                	jne    c0008f94 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008f88:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008f8f:	e9 de 00 00 00       	jmp    c0009072 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008f94:	3c 0a                	cmp    al,0xa
c0008f96:	75 45                	jne    c0008fdd <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008f98:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008f9b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008fa2:	8d 48 01             	lea    ecx,[eax+0x1]
c0008fa5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008fa8:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008fab:	75 0f                	jne    c0008fbc <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008fad:	83 ec 0c             	sub    esp,0xc
c0008fb0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008fb3:	53                   	push   ebx
c0008fb4:	e8 73 fa ff ff       	call   c0008a2c <VgaText::scrollScreen()>
c0008fb9:	83 c4 10             	add    esp,0x10
c0008fbc:	83 ec 0c             	sub    esp,0xc
c0008fbf:	53                   	push   ebx
c0008fc0:	e8 71 f9 ff ff       	call   c0008936 <VgaText::updateCursor()>
c0008fc5:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008fca:	83 c4 10             	add    esp,0x10
c0008fcd:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008fd0:	0f b7 f6             	movzx  esi,si
c0008fd3:	01 f6                	add    esi,esi
c0008fd5:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008fd8:	e9 95 00 00 00       	jmp    c0009072 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008fdd:	3c 08                	cmp    al,0x8
c0008fdf:	75 35                	jne    c0009016 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0008fe1:	51                   	push   ecx
c0008fe2:	51                   	push   ecx
c0008fe3:	6a 01                	push   0x1
c0008fe5:	53                   	push   ebx
c0008fe6:	e8 bf fc ff ff       	call   c0008caa <VgaText::decrementCursor(bool)>
c0008feb:	5e                   	pop    esi
c0008fec:	58                   	pop    eax
c0008fed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008ff0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008ff3:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ff6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ff9:	6a 20                	push   0x20
c0008ffb:	53                   	push   ebx
c0008ffc:	e8 d5 fa ff ff       	call   c0008ad6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0009001:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0009006:	83 c4 20             	add    esp,0x20
c0009009:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000900c:	0f b7 f6             	movzx  esi,si
c000900f:	01 f6                	add    esi,esi
c0009011:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0009014:	eb 5c                	jmp    c0009072 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0009016:	52                   	push   edx
c0009017:	52                   	push   edx
c0009018:	89 ea                	mov    edx,ebp
c000901a:	0f b6 ca             	movzx  ecx,dl
c000901d:	51                   	push   ecx
c000901e:	50                   	push   eax
c000901f:	e8 a0 fa ff ff       	call   c0008ac4 <VgaText::combineCharAndColour(char, unsigned char)>
c0009024:	83 c4 10             	add    esp,0x10
c0009027:	66 89 06             	mov    WORD PTR [esi],ax
c000902a:	39 1d 04 0a 02 c0    	cmp    DWORD PTR ds:0xc0020a04,ebx
c0009030:	75 1d                	jne    c000904f <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0009032:	83 ec 0c             	sub    esp,0xc
c0009035:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009038:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000903b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000903f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0009043:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0009046:	50                   	push   eax
c0009047:	e8 70 d4 00 00       	call   c00164bc <HalConsoleWriteCharacter(char, int, int, int, int)>
c000904c:	83 c4 20             	add    esp,0x20
c000904f:	83 c6 02             	add    esi,0x2
c0009052:	50                   	push   eax
c0009053:	50                   	push   eax
c0009054:	6a 00                	push   0x0
c0009056:	53                   	push   ebx
c0009057:	e8 fa fb ff ff       	call   c0008c56 <VgaText::incrementCursor(bool)>
c000905c:	83 c4 10             	add    esp,0x10
c000905f:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0009063:	75 0d                	jne    c0009072 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0009065:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000906a:	0f b7 f6             	movzx  esi,si
c000906d:	01 f6                	add    esi,esi
c000906f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0009072:	47                   	inc    edi
c0009073:	e9 01 ff ff ff       	jmp    c0008f79 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0009078:	83 ec 0c             	sub    esp,0xc
c000907b:	53                   	push   ebx
c000907c:	e8 b5 f8 ff ff       	call   c0008936 <VgaText::updateCursor()>
c0009081:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0009088:	83 c4 1c             	add    esp,0x1c
c000908b:	5b                   	pop    ebx
c000908c:	5e                   	pop    esi
c000908d:	5f                   	pop    edi
c000908e:	5d                   	pop    ebp
c000908f:	c3                   	ret    

c0009090 <VgaText::VgaText(char const*)>:
c0009090:	56                   	push   esi
c0009091:	53                   	push   ebx
c0009092:	83 ec 04             	sub    esp,0x4
c0009095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009099:	83 ec 08             	sub    esp,0x8
c000909c:	6a 00                	push   0x0
c000909e:	50                   	push   eax
c000909f:	e8 b2 04 00 00       	call   c0009556 <UnixFile::UnixFile(int)>
c00090a4:	83 c4 10             	add    esp,0x10
c00090a7:	ba a0 d9 01 c0       	mov    edx,0xc001d9a0
c00090ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090b0:	89 10                	mov    DWORD PTR [eax],edx
c00090b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090b6:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00090bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090c1:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00090c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090cc:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00090d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d4:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00090d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090dc:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00090e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090e7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00090ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00090f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090fd:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0009104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009108:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c000910f:	83 ec 0c             	sub    esp,0xc
c0009112:	6a 01                	push   0x1
c0009114:	e8 80 08 00 00       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c0009119:	83 c4 10             	add    esp,0x10
c000911c:	89 c2                	mov    edx,eax
c000911e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009122:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009125:	8b 1d b0 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ab0
c000912b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000912f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009132:	89 c6                	mov    esi,eax
c0009134:	e8 f1 f0 ff ff       	call   c000822a <Phys::allocatePage()>
c0009139:	68 05 0c 00 00       	push   0xc05
c000913e:	56                   	push   esi
c000913f:	50                   	push   eax
c0009140:	53                   	push   ebx
c0009141:	e8 e8 0e 00 00       	call   c000a02e <VAS::mapPage(unsigned long, unsigned long, int)>
c0009146:	83 c4 10             	add    esp,0x10
c0009149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000914d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009150:	83 ec 04             	sub    esp,0x4
c0009153:	68 a0 0f 00 00       	push   0xfa0
c0009158:	6a 00                	push   0x0
c000915a:	50                   	push   eax
c000915b:	e8 90 73 ff ff       	call   c00004f0 <memset>
c0009160:	83 c4 10             	add    esp,0x10
c0009163:	83 ec 04             	sub    esp,0x4
c0009166:	6a 00                	push   0x0
c0009168:	6a 07                	push   0x7
c000916a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000916e:	e8 6d f8 ff ff       	call   c00089e0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0009173:	83 c4 10             	add    esp,0x10
c0009176:	83 ec 04             	sub    esp,0x4
c0009179:	6a 00                	push   0x0
c000917b:	6a 00                	push   0x0
c000917d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009181:	e8 f0 f9 ff ff       	call   c0008b76 <VgaText::setCursor(int, int)>
c0009186:	83 c4 10             	add    esp,0x10
c0009189:	83 ec 0c             	sub    esp,0xc
c000918c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009190:	e8 43 fa ff ff       	call   c0008bd8 <VgaText::clearScreen()>
c0009195:	83 c4 10             	add    esp,0x10
c0009198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000919c:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00091a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091a4:	05 82 00 00 00       	add    eax,0x82
c00091a9:	83 ec 04             	sub    esp,0x4
c00091ac:	6a 30                	push   0x30
c00091ae:	6a 00                	push   0x0
c00091b0:	50                   	push   eax
c00091b1:	e8 3a 73 ff ff       	call   c00004f0 <memset>
c00091b6:	83 c4 10             	add    esp,0x10
c00091b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091bd:	05 b2 00 00 00       	add    eax,0xb2
c00091c2:	83 ec 04             	sub    esp,0x4
c00091c5:	68 80 00 00 00       	push   0x80
c00091ca:	6a 00                	push   0x0
c00091cc:	50                   	push   eax
c00091cd:	e8 1e 73 ff ff       	call   c00004f0 <memset>
c00091d2:	83 c4 10             	add    esp,0x10
c00091d5:	90                   	nop
c00091d6:	83 c4 04             	add    esp,0x4
c00091d9:	5b                   	pop    ebx
c00091da:	5e                   	pop    esi
c00091db:	c3                   	ret    

c00091dc <VgaText::receiveKey(unsigned char)>:
c00091dc:	57                   	push   edi
c00091dd:	56                   	push   esi
c00091de:	53                   	push   ebx
c00091df:	83 ec 10             	sub    esp,0x10
c00091e2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00091e6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00091ea:	84 db                	test   bl,bl
c00091ec:	0f 84 ba 00 00 00    	je     c00092ac <VgaText::receiveKey(unsigned char)+0xd0>
c00091f2:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c00091f8:	80 fb 08             	cmp    bl,0x8
c00091fb:	75 2c                	jne    c0009229 <VgaText::receiveKey(unsigned char)+0x4d>
c00091fd:	83 ec 0c             	sub    esp,0xc
c0009200:	57                   	push   edi
c0009201:	e8 5a 73 ff ff       	call   c0000560 <strlen>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	85 c0                	test   eax,eax
c000920b:	74 41                	je     c000924e <VgaText::receiveKey(unsigned char)+0x72>
c000920d:	50                   	push   eax
c000920e:	50                   	push   eax
c000920f:	6a 08                	push   0x8
c0009211:	56                   	push   esi
c0009212:	e8 83 fb ff ff       	call   c0008d9a <VgaText::putchar(char)>
c0009217:	89 3c 24             	mov    DWORD PTR [esp],edi
c000921a:	e8 41 73 ff ff       	call   c0000560 <strlen>
c000921f:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0009227:	eb 22                	jmp    c000924b <VgaText::receiveKey(unsigned char)+0x6f>
c0009229:	0f be c3             	movsx  eax,bl
c000922c:	52                   	push   edx
c000922d:	52                   	push   edx
c000922e:	50                   	push   eax
c000922f:	56                   	push   esi
c0009230:	e8 65 fb ff ff       	call   c0008d9a <VgaText::putchar(char)>
c0009235:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0009239:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000923e:	59                   	pop    ecx
c000923f:	58                   	pop    eax
c0009240:	8d 44 24 16          	lea    eax,[esp+0x16]
c0009244:	50                   	push   eax
c0009245:	57                   	push   edi
c0009246:	e8 95 75 ff ff       	call   c00007e0 <strcat>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0009255:	75 05                	jne    c000925c <VgaText::receiveKey(unsigned char)+0x80>
c0009257:	80 fb 0a             	cmp    bl,0xa
c000925a:	75 50                	jne    c00092ac <VgaText::receiveKey(unsigned char)+0xd0>
c000925c:	83 ec 0c             	sub    esp,0xc
c000925f:	81 c6 b2 00 00 00    	add    esi,0xb2
c0009265:	56                   	push   esi
c0009266:	e8 f5 72 ff ff       	call   c0000560 <strlen>
c000926b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000926e:	89 c3                	mov    ebx,eax
c0009270:	e8 eb 72 ff ff       	call   c0000560 <strlen>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c000927c:	3d 80 00 00 00       	cmp    eax,0x80
c0009281:	76 10                	jbe    c0009293 <VgaText::receiveKey(unsigned char)+0xb7>
c0009283:	83 ec 0c             	sub    esp,0xc
c0009286:	68 4b d9 01 c0       	push   0xc001d94b
c000928b:	e8 5b 74 00 00       	call   c00106eb <Krnl::panic(char const*)>
c0009290:	83 c4 10             	add    esp,0x10
c0009293:	50                   	push   eax
c0009294:	50                   	push   eax
c0009295:	57                   	push   edi
c0009296:	56                   	push   esi
c0009297:	e8 44 75 ff ff       	call   c00007e0 <strcat>
c000929c:	83 c4 0c             	add    esp,0xc
c000929f:	6a 30                	push   0x30
c00092a1:	6a 00                	push   0x0
c00092a3:	57                   	push   edi
c00092a4:	e8 47 72 ff ff       	call   c00004f0 <memset>
c00092a9:	83 c4 10             	add    esp,0x10
c00092ac:	83 c4 10             	add    esp,0x10
c00092af:	5b                   	pop    ebx
c00092b0:	5e                   	pop    esi
c00092b1:	5f                   	pop    edi
c00092b2:	c3                   	ret    
c00092b3:	90                   	nop

c00092b4 <VgaText::doUpdate()>:
c00092b4:	c3                   	ret    

c00092b5 <newTerminal(char*)>:
c00092b5:	83 ec 28             	sub    esp,0x28
c00092b8:	68 34 01 00 00       	push   0x134
c00092bd:	e8 9b eb ff ff       	call   c0007e5d <malloc>
c00092c2:	5a                   	pop    edx
c00092c3:	59                   	pop    ecx
c00092c4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00092c8:	50                   	push   eax
c00092c9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00092cd:	e8 be fd ff ff       	call   c0009090 <VgaText::VgaText(char const*)>
c00092d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092d6:	83 c4 2c             	add    esp,0x2c
c00092d9:	c3                   	ret    
c00092da:	66 90                	xchg   ax,ax

c00092dc <TSS::TSS()>:
c00092dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00092e7:	90                   	nop
c00092e8:	c3                   	ret    
c00092e9:	90                   	nop
c00092ea:	66 90                	xchg   ax,ax

c00092ec <TSS::setESP(unsigned long)>:
c00092ec:	55                   	push   ebp
c00092ed:	89 e5                	mov    ebp,esp
c00092ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092f5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00092f8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00092fb:	90                   	nop
c00092fc:	5d                   	pop    ebp
c00092fd:	c3                   	ret    
c00092fe:	66 90                	xchg   ax,ax

c0009300 <TSS::flush()>:
c0009300:	55                   	push   ebp
c0009301:	89 e5                	mov    ebp,esp
c0009303:	83 ec 10             	sub    esp,0x10
c0009306:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009309:	8b 00                	mov    eax,DWORD PTR [eax]
c000930b:	83 c8 03             	or     eax,0x3
c000930e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0009312:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0009316:	66 89 d0             	mov    ax,dx
c0009319:	0f 00 d8             	ltr    ax
c000931c:	90                   	nop
c000931d:	c9                   	leave  
c000931e:	c3                   	ret    
c000931f:	90                   	nop

c0009320 <TSS::setup(unsigned long, unsigned long)>:
c0009320:	55                   	push   ebp
c0009321:	89 e5                	mov    ebp,esp
c0009323:	83 ec 18             	sub    esp,0x18
c0009326:	83 ec 0c             	sub    esp,0xc
c0009329:	6a 68                	push   0x68
c000932b:	e8 2d eb ff ff       	call   c0007e5d <malloc>
c0009330:	83 c4 10             	add    esp,0x10
c0009333:	89 c2                	mov    edx,eax
c0009335:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009338:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000933b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000933e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009341:	83 ec 04             	sub    esp,0x4
c0009344:	6a 68                	push   0x68
c0009346:	6a 00                	push   0x0
c0009348:	50                   	push   eax
c0009349:	e8 a2 71 ff ff       	call   c00004f0 <memset>
c000934e:	83 c4 10             	add    esp,0x10
c0009351:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009354:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009357:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000935d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009360:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009363:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0009369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000936c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000936f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009372:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009378:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000937b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0009381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009384:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009387:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000938d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009390:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009393:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000939c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000939f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00093a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093ab:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00093b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00093bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093c3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00093c6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00093c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093cf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00093d2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00093d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093db:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00093e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093e8:	0f 20 da             	mov    edx,cr3
c00093eb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00093ee:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00093f1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00093f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093fa:	83 ec 08             	sub    esp,0x8
c00093fd:	50                   	push   eax
c00093fe:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009401:	50                   	push   eax
c0009402:	e8 dd e2 ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	83 ec 08             	sub    esp,0x8
c000940d:	6a 68                	push   0x68
c000940f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009412:	50                   	push   eax
c0009413:	e8 e8 e2 ff ff       	call   c0007700 <GDTEntry::setLimit(unsigned int)>
c0009418:	83 c4 10             	add    esp,0x10
c000941b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000941f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009422:	83 e0 0f             	and    eax,0xf
c0009425:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009428:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000942b:	83 c8 40             	or     eax,0x40
c000942e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009431:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0009436:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000943c:	05 78 01 00 00       	add    eax,0x178
c0009441:	83 ec 04             	sub    esp,0x4
c0009444:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009447:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000944a:	50                   	push   eax
c000944b:	e8 e4 e2 ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0009450:	83 c4 10             	add    esp,0x10
c0009453:	89 c2                	mov    edx,eax
c0009455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009458:	89 10                	mov    DWORD PTR [eax],edx
c000945a:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000945f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009465:	05 78 01 00 00       	add    eax,0x178
c000946a:	83 ec 0c             	sub    esp,0xc
c000946d:	50                   	push   eax
c000946e:	e8 eb e2 ff ff       	call   c000775e <GDT::flush()>
c0009473:	83 c4 10             	add    esp,0x10
c0009476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009479:	8b 00                	mov    eax,DWORD PTR [eax]
c000947b:	c9                   	leave  
c000947c:	c3                   	ret    
c000947d:	90                   	nop

c000947e <ReservedFilename::read(unsigned long long, void*, int*)>:
c000947e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009482:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009486:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009489:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000948e:	75 08                	jne    c0009498 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0009490:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009496:	eb 38                	jmp    c00094d0 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009498:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000949d:	75 17                	jne    c00094b6 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000949f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00094a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00094a7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00094ad:	8b 10                	mov    edx,DWORD PTR [eax]
c00094af:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00094b3:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00094b6:	89 c1                	mov    ecx,eax
c00094b8:	83 e1 fd             	and    ecx,0xfffffffd
c00094bb:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00094c1:	74 cd                	je     c0009490 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00094c3:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00094c8:	83 e0 ef             	and    eax,0xffffffef
c00094cb:	83 f8 08             	cmp    eax,0x8
c00094ce:	76 c0                	jbe    c0009490 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00094d0:	31 c0                	xor    eax,eax
c00094d2:	c3                   	ret    
c00094d3:	90                   	nop

c00094d4 <ReservedFilename::isAtty()>:
c00094d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094d8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00094db:	31 c0                	xor    eax,eax
c00094dd:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00094e3:	74 09                	je     c00094ee <ReservedFilename::isAtty()+0x1a>
c00094e5:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00094eb:	0f 94 c0             	sete   al
c00094ee:	c3                   	ret    
c00094ef:	90                   	nop

c00094f0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00094f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00094f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00094fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00094ff:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009504:	75 08                	jne    c000950e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009506:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000950c:	eb 3d                	jmp    c000954b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000950e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009513:	75 17                	jne    c000952c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009515:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000951a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000951d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009523:	8b 10                	mov    edx,DWORD PTR [eax]
c0009525:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009529:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000952c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009531:	75 04                	jne    c0009537 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009533:	89 0a                	mov    DWORD PTR [edx],ecx
c0009535:	eb 14                	jmp    c000954b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009537:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000953c:	74 c8                	je     c0009506 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000953e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009543:	83 e0 ef             	and    eax,0xffffffef
c0009546:	83 f8 08             	cmp    eax,0x8
c0009549:	76 bb                	jbe    c0009506 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000954b:	31 c0                	xor    eax,eax
c000954d:	c3                   	ret    

c000954e <UnixFile::getFileDescriptor()>:
c000954e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009552:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009555:	c3                   	ret    

c0009556 <UnixFile::UnixFile(int)>:
c0009556:	53                   	push   ebx
c0009557:	83 ec 28             	sub    esp,0x28
c000955a:	ba 68 da 01 c0       	mov    edx,0xc001da68
c000955f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009563:	89 10                	mov    DWORD PTR [eax],edx
c0009565:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000956d:	0f 8f 8c 01 00 00    	jg     c00096ff <UnixFile::UnixFile(int)+0x1a9>
c0009573:	a1 00 f9 01 c0       	mov    eax,ds:0xc001f900
c0009578:	8d 50 01             	lea    edx,[eax+0x1]
c000957b:	89 15 00 f9 01 c0    	mov    DWORD PTR ds:0xc001f900,edx
c0009581:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009585:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009588:	83 ec 08             	sub    esp,0x8
c000958b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000958f:	68 98 0a 02 c0       	push   0xc0020a98
c0009594:	e8 7f 2f 01 00       	call   c001c518 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009599:	83 c4 10             	add    esp,0x10
c000959c:	a0 94 0a 02 c0       	mov    al,ds:0xc0020a94
c00095a1:	83 f0 01             	xor    eax,0x1
c00095a4:	84 c0                	test   al,al
c00095a6:	0f 84 54 01 00 00    	je     c0009700 <UnixFile::UnixFile(int)+0x1aa>
c00095ac:	c6 05 94 0a 02 c0 01 	mov    BYTE PTR ds:0xc0020a94,0x1
c00095b3:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00095bb:	83 ec 0c             	sub    esp,0xc
c00095be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00095c2:	e8 96 e8 ff ff       	call   c0007e5d <malloc>
c00095c7:	83 c4 10             	add    esp,0x10
c00095ca:	89 c3                	mov    ebx,eax
c00095cc:	83 ec 08             	sub    esp,0x8
c00095cf:	68 03 ff ff 0f       	push   0xfffff03
c00095d4:	53                   	push   ebx
c00095d5:	e8 2c 01 00 00       	call   c0009706 <ReservedFilename::ReservedFilename(int)>
c00095da:	83 c4 10             	add    esp,0x10
c00095dd:	89 1d 8c 0a 02 c0    	mov    DWORD PTR ds:0xc0020a8c,ebx
c00095e3:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00095eb:	83 ec 0c             	sub    esp,0xc
c00095ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095f2:	e8 66 e8 ff ff       	call   c0007e5d <malloc>
c00095f7:	83 c4 10             	add    esp,0x10
c00095fa:	89 c3                	mov    ebx,eax
c00095fc:	83 ec 08             	sub    esp,0x8
c00095ff:	68 01 ff ff 0f       	push   0xfffff01
c0009604:	53                   	push   ebx
c0009605:	e8 fc 00 00 00       	call   c0009706 <ReservedFilename::ReservedFilename(int)>
c000960a:	83 c4 10             	add    esp,0x10
c000960d:	89 1d 90 0a 02 c0    	mov    DWORD PTR ds:0xc0020a90,ebx
c0009613:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000961b:	83 ec 0c             	sub    esp,0xc
c000961e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009622:	e8 36 e8 ff ff       	call   c0007e5d <malloc>
c0009627:	83 c4 10             	add    esp,0x10
c000962a:	89 c3                	mov    ebx,eax
c000962c:	83 ec 08             	sub    esp,0x8
c000962f:	68 00 ff ff 0f       	push   0xfffff00
c0009634:	53                   	push   ebx
c0009635:	e8 cc 00 00 00       	call   c0009706 <ReservedFilename::ReservedFilename(int)>
c000963a:	83 c4 10             	add    esp,0x10
c000963d:	89 1d 84 0a 02 c0    	mov    DWORD PTR ds:0xc0020a84,ebx
c0009643:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000964b:	83 ec 0c             	sub    esp,0xc
c000964e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009652:	e8 06 e8 ff ff       	call   c0007e5d <malloc>
c0009657:	83 c4 10             	add    esp,0x10
c000965a:	89 c3                	mov    ebx,eax
c000965c:	83 ec 08             	sub    esp,0x8
c000965f:	68 02 ff ff 0f       	push   0xfffff02
c0009664:	53                   	push   ebx
c0009665:	e8 9c 00 00 00       	call   c0009706 <ReservedFilename::ReservedFilename(int)>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 1d 88 0a 02 c0    	mov    DWORD PTR ds:0xc0020a88,ebx
c0009673:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000967b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0009680:	7f 7e                	jg     c0009700 <UnixFile::UnixFile(int)+0x1aa>
c0009682:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000968a:	83 ec 0c             	sub    esp,0xc
c000968d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009691:	e8 c7 e7 ff ff       	call   c0007e5d <malloc>
c0009696:	83 c4 10             	add    esp,0x10
c0009699:	89 c3                	mov    ebx,eax
c000969b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000969f:	05 10 ff ff 0f       	add    eax,0xfffff10
c00096a4:	83 ec 08             	sub    esp,0x8
c00096a7:	50                   	push   eax
c00096a8:	53                   	push   ebx
c00096a9:	e8 58 00 00 00       	call   c0009706 <ReservedFilename::ReservedFilename(int)>
c00096ae:	83 c4 10             	add    esp,0x10
c00096b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096b5:	89 1c 85 60 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf5a0],ebx
c00096bc:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00096c4:	83 ec 0c             	sub    esp,0xc
c00096c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096cb:	e8 8d e7 ff ff       	call   c0007e5d <malloc>
c00096d0:	83 c4 10             	add    esp,0x10
c00096d3:	89 c3                	mov    ebx,eax
c00096d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096d9:	05 20 ff ff 0f       	add    eax,0xfffff20
c00096de:	83 ec 08             	sub    esp,0x8
c00096e1:	50                   	push   eax
c00096e2:	53                   	push   ebx
c00096e3:	e8 1e 00 00 00       	call   c0009706 <ReservedFilename::ReservedFilename(int)>
c00096e8:	83 c4 10             	add    esp,0x10
c00096eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096ef:	89 1c 85 20 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf5e0],ebx
c00096f6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00096fa:	e9 7c ff ff ff       	jmp    c000967b <UnixFile::UnixFile(int)+0x125>
c00096ff:	90                   	nop
c0009700:	83 c4 28             	add    esp,0x28
c0009703:	5b                   	pop    ebx
c0009704:	c3                   	ret    
c0009705:	90                   	nop

c0009706 <ReservedFilename::ReservedFilename(int)>:
c0009706:	83 ec 0c             	sub    esp,0xc
c0009709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000970d:	83 ec 08             	sub    esp,0x8
c0009710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009714:	50                   	push   eax
c0009715:	e8 3c fe ff ff       	call   c0009556 <UnixFile::UnixFile(int)>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	ba 84 da 01 c0       	mov    edx,0xc001da84
c0009722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009726:	89 10                	mov    DWORD PTR [eax],edx
c0009728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000972c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009730:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009733:	90                   	nop
c0009734:	83 c4 0c             	add    esp,0xc
c0009737:	c3                   	ret    

c0009738 <UnixFile::~UnixFile()>:
c0009738:	83 ec 1c             	sub    esp,0x1c
c000973b:	ba 68 da 01 c0       	mov    edx,0xc001da68
c0009740:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009744:	89 10                	mov    DWORD PTR [eax],edx
c0009746:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000974a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000974d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0009752:	7f 73                	jg     c00097c7 <UnixFile::~UnixFile()+0x8f>
c0009754:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000975c:	83 ec 0c             	sub    esp,0xc
c000975f:	68 98 0a 02 c0       	push   0xc0020a98
c0009764:	e8 83 2e 01 00       	call   c001c5ec <LinkedList<UnixFile>::getFirstElement()>
c0009769:	83 c4 10             	add    esp,0x10
c000976c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009770:	83 ec 0c             	sub    esp,0xc
c0009773:	68 98 0a 02 c0       	push   0xc0020a98
c0009778:	e8 77 2e 01 00       	call   c001c5f4 <LinkedList<UnixFile>::removeFirst()>
c000977d:	83 c4 10             	add    esp,0x10
c0009780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009784:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009788:	74 40                	je     c00097ca <UnixFile::~UnixFile()+0x92>
c000978a:	83 ec 08             	sub    esp,0x8
c000978d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009791:	68 98 0a 02 c0       	push   0xc0020a98
c0009796:	e8 7d 2d 01 00       	call   c001c518 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000979b:	83 c4 10             	add    esp,0x10
c000979e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097a2:	8d 50 01             	lea    edx,[eax+0x1]
c00097a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097a9:	3d 88 13 00 00       	cmp    eax,0x1388
c00097ae:	0f 94 c0             	sete   al
c00097b1:	84 c0                	test   al,al
c00097b3:	74 a7                	je     c000975c <UnixFile::~UnixFile()+0x24>
c00097b5:	83 ec 0c             	sub    esp,0xc
c00097b8:	68 40 da 01 c0       	push   0xc001da40
c00097bd:	e8 29 6f 00 00       	call   c00106eb <Krnl::panic(char const*)>
c00097c2:	83 c4 10             	add    esp,0x10
c00097c5:	eb 95                	jmp    c000975c <UnixFile::~UnixFile()+0x24>
c00097c7:	90                   	nop
c00097c8:	eb 01                	jmp    c00097cb <UnixFile::~UnixFile()+0x93>
c00097ca:	90                   	nop
c00097cb:	90                   	nop
c00097cc:	83 c4 1c             	add    esp,0x1c
c00097cf:	c3                   	ret    

c00097d0 <UnixFile::~UnixFile()>:
c00097d0:	83 ec 0c             	sub    esp,0xc
c00097d3:	83 ec 0c             	sub    esp,0xc
c00097d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097da:	e8 59 ff ff ff       	call   c0009738 <UnixFile::~UnixFile()>
c00097df:	83 c4 10             	add    esp,0x10
c00097e2:	83 ec 08             	sub    esp,0x8
c00097e5:	6a 0c                	push   0xc
c00097e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097eb:	e8 06 13 00 00       	call   c000aaf6 <operator delete(void*, unsigned long)>
c00097f0:	83 c4 10             	add    esp,0x10
c00097f3:	83 c4 0c             	add    esp,0xc
c00097f6:	c3                   	ret    
c00097f7:	90                   	nop

c00097f8 <ReservedFilename::~ReservedFilename()>:
c00097f8:	83 ec 0c             	sub    esp,0xc
c00097fb:	ba 84 da 01 c0       	mov    edx,0xc001da84
c0009800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009804:	89 10                	mov    DWORD PTR [eax],edx
c0009806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000980a:	83 ec 0c             	sub    esp,0xc
c000980d:	50                   	push   eax
c000980e:	e8 25 ff ff ff       	call   c0009738 <UnixFile::~UnixFile()>
c0009813:	83 c4 10             	add    esp,0x10
c0009816:	90                   	nop
c0009817:	83 c4 0c             	add    esp,0xc
c000981a:	c3                   	ret    
c000981b:	90                   	nop

c000981c <ReservedFilename::~ReservedFilename()>:
c000981c:	83 ec 0c             	sub    esp,0xc
c000981f:	83 ec 0c             	sub    esp,0xc
c0009822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009826:	e8 cd ff ff ff       	call   c00097f8 <ReservedFilename::~ReservedFilename()>
c000982b:	83 c4 10             	add    esp,0x10
c000982e:	83 ec 08             	sub    esp,0x8
c0009831:	6a 0c                	push   0xc
c0009833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009837:	e8 ba 12 00 00       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000983c:	83 c4 10             	add    esp,0x10
c000983f:	83 c4 0c             	add    esp,0xc
c0009842:	c3                   	ret    

c0009843 <getFromFileDescriptor(int)>:
c0009843:	53                   	push   ebx
c0009844:	83 ec 08             	sub    esp,0x8
c0009847:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000984b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009851:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009857:	7f 2c                	jg     c0009885 <getFromFileDescriptor(int)+0x42>
c0009859:	83 ec 0c             	sub    esp,0xc
c000985c:	68 98 0a 02 c0       	push   0xc0020a98
c0009861:	e8 86 2d 01 00       	call   c001c5ec <LinkedList<UnixFile>::getFirstElement()>
c0009866:	83 c4 10             	add    esp,0x10
c0009869:	85 c0                	test   eax,eax
c000986b:	75 04                	jne    c0009871 <getFromFileDescriptor(int)+0x2e>
c000986d:	31 c0                	xor    eax,eax
c000986f:	eb 6e                	jmp    c00098df <getFromFileDescriptor(int)+0x9c>
c0009871:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009874:	74 69                	je     c00098df <getFromFileDescriptor(int)+0x9c>
c0009876:	52                   	push   edx
c0009877:	52                   	push   edx
c0009878:	50                   	push   eax
c0009879:	68 98 0a 02 c0       	push   0xc0020a98
c000987e:	e8 13 2e 01 00       	call   c001c696 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009883:	eb e1                	jmp    c0009866 <getFromFileDescriptor(int)+0x23>
c0009885:	a1 8c 0a 02 c0       	mov    eax,ds:0xc0020a8c
c000988a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009890:	74 4d                	je     c00098df <getFromFileDescriptor(int)+0x9c>
c0009892:	a1 90 0a 02 c0       	mov    eax,ds:0xc0020a90
c0009897:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000989d:	74 40                	je     c00098df <getFromFileDescriptor(int)+0x9c>
c000989f:	a1 88 0a 02 c0       	mov    eax,ds:0xc0020a88
c00098a4:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00098aa:	74 33                	je     c00098df <getFromFileDescriptor(int)+0x9c>
c00098ac:	a1 84 0a 02 c0       	mov    eax,ds:0xc0020a84
c00098b1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00098b7:	74 26                	je     c00098df <getFromFileDescriptor(int)+0x9c>
c00098b9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00098bf:	83 f8 08             	cmp    eax,0x8
c00098c2:	77 09                	ja     c00098cd <getFromFileDescriptor(int)+0x8a>
c00098c4:	8b 04 85 60 0a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf5a0]
c00098cb:	eb 12                	jmp    c00098df <getFromFileDescriptor(int)+0x9c>
c00098cd:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00098d3:	83 fb 08             	cmp    ebx,0x8
c00098d6:	77 95                	ja     c000986d <getFromFileDescriptor(int)+0x2a>
c00098d8:	8b 04 9d 20 0a 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdf5e0]
c00098df:	83 c4 08             	add    esp,0x8
c00098e2:	5b                   	pop    ebx
c00098e3:	c3                   	ret    

c00098e4 <__static_initialization_and_destruction_0(int, int)>:
c00098e4:	83 ec 0c             	sub    esp,0xc
c00098e7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00098ec:	75 34                	jne    c0009922 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00098ee:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00098f6:	75 2a                	jne    c0009922 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00098f8:	83 ec 0c             	sub    esp,0xc
c00098fb:	68 98 0a 02 c0       	push   0xc0020a98
c0009900:	e8 d1 2b 01 00       	call   c001c4d6 <LinkedList<UnixFile>::LinkedList()>
c0009905:	83 c4 10             	add    esp,0x10
c0009908:	83 ec 04             	sub    esp,0x4
c000990b:	68 38 f7 01 c0       	push   0xc001f738
c0009910:	68 98 0a 02 c0       	push   0xc0020a98
c0009915:	68 d4 c4 01 c0       	push   0xc001c4d4
c000991a:	e8 87 11 00 00       	call   c000aaa6 <__cxa_atexit>
c000991f:	83 c4 10             	add    esp,0x10
c0009922:	90                   	nop
c0009923:	83 c4 0c             	add    esp,0xc
c0009926:	c3                   	ret    

c0009927 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009927:	83 ec 0c             	sub    esp,0xc
c000992a:	83 ec 08             	sub    esp,0x8
c000992d:	68 ff ff 00 00       	push   0xffff
c0009932:	6a 01                	push   0x1
c0009934:	e8 ab ff ff ff       	call   c00098e4 <__static_initialization_and_destruction_0(int, int)>
c0009939:	83 c4 10             	add    esp,0x10
c000993c:	83 c4 0c             	add    esp,0xc
c000993f:	c3                   	ret    

c0009940 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009940:	53                   	push   ebx
c0009941:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009945:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009949:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000994f:	89 c8                	mov    eax,ecx
c0009951:	d1 e8                	shr    eax,1
c0009953:	03 05 08 f9 01 c0    	add    eax,DWORD PTR ds:0xc001f908
c0009959:	83 e1 01             	and    ecx,0x1
c000995c:	8a 10                	mov    dl,BYTE PTR [eax]
c000995e:	75 09                	jne    c0009969 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0009960:	83 e2 f0             	and    edx,0xfffffff0
c0009963:	09 da                	or     edx,ebx
c0009965:	88 10                	mov    BYTE PTR [eax],dl
c0009967:	5b                   	pop    ebx
c0009968:	c3                   	ret    
c0009969:	c1 e3 04             	shl    ebx,0x4
c000996c:	83 e2 0f             	and    edx,0xf
c000996f:	09 da                	or     edx,ebx
c0009971:	88 10                	mov    BYTE PTR [eax],dl
c0009973:	5b                   	pop    ebx
c0009974:	c3                   	ret    

c0009975 <Virt::getPageState(unsigned long)>:
c0009975:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009979:	8b 0d 08 f9 01 c0    	mov    ecx,DWORD PTR ds:0xc001f908
c000997f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009985:	89 d0                	mov    eax,edx
c0009987:	d1 e8                	shr    eax,1
c0009989:	83 e2 01             	and    edx,0x1
c000998c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000998f:	75 04                	jne    c0009995 <Virt::getPageState(unsigned long)+0x20>
c0009991:	83 e0 0f             	and    eax,0xf
c0009994:	c3                   	ret    
c0009995:	c0 e8 04             	shr    al,0x4
c0009998:	c3                   	ret    

c0009999 <Virt::allocateKernelVirtualPages(int)>:
c0009999:	55                   	push   ebp
c000999a:	31 ed                	xor    ebp,ebp
c000999c:	57                   	push   edi
c000999d:	56                   	push   esi
c000999e:	53                   	push   ebx
c000999f:	31 db                	xor    ebx,ebx
c00099a1:	83 ec 1c             	sub    esp,0x1c
c00099a4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00099a8:	8b 3d 04 f9 01 c0    	mov    edi,DWORD PTR ds:0xc001f904
c00099ae:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00099b3:	57                   	push   edi
c00099b4:	e8 bc ff ff ff       	call   c0009975 <Virt::getPageState(unsigned long)>
c00099b9:	5a                   	pop    edx
c00099ba:	84 c0                	test   al,al
c00099bc:	75 3a                	jne    c00099f8 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00099be:	85 db                	test   ebx,ebx
c00099c0:	75 02                	jne    c00099c4 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00099c2:	89 fd                	mov    ebp,edi
c00099c4:	43                   	inc    ebx
c00099c5:	39 f3                	cmp    ebx,esi
c00099c7:	74 5a                	je     c0009a23 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00099c9:	47                   	inc    edi
c00099ca:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00099d0:	76 31                	jbe    c0009a03 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00099d2:	c7 05 04 f9 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f904,0xc8000
c00099dc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00099e1:	75 28                	jne    c0009a0b <Virt::allocateKernelVirtualPages(int)+0x72>
c00099e3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00099e8:	bf 00 80 0c 00       	mov    edi,0xc8000
c00099ed:	57                   	push   edi
c00099ee:	e8 82 ff ff ff       	call   c0009975 <Virt::getPageState(unsigned long)>
c00099f3:	5a                   	pop    edx
c00099f4:	84 c0                	test   al,al
c00099f6:	74 c6                	je     c00099be <Virt::allocateKernelVirtualPages(int)+0x25>
c00099f8:	31 db                	xor    ebx,ebx
c00099fa:	47                   	inc    edi
c00099fb:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009a01:	77 cf                	ja     c00099d2 <Virt::allocateKernelVirtualPages(int)+0x39>
c0009a03:	89 3d 04 f9 01 c0    	mov    DWORD PTR ds:0xc001f904,edi
c0009a09:	eb a8                	jmp    c00099b3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009a0b:	83 ec 0c             	sub    esp,0xc
c0009a0e:	68 98 da 01 c0       	push   0xc001da98
c0009a13:	e8 d3 6c 00 00       	call   c00106eb <Krnl::panic(char const*)>
c0009a18:	8b 3d 04 f9 01 c0    	mov    edi,DWORD PTR ds:0xc001f904
c0009a1e:	83 c4 10             	add    esp,0x10
c0009a21:	eb 90                	jmp    c00099b3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009a23:	89 2d 04 f9 01 c0    	mov    DWORD PTR ds:0xc001f904,ebp
c0009a29:	4b                   	dec    ebx
c0009a2a:	74 5f                	je     c0009a8b <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009a2c:	85 f6                	test   esi,esi
c0009a2e:	74 3d                	je     c0009a6d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009a30:	89 e8                	mov    eax,ebp
c0009a32:	31 db                	xor    ebx,ebx
c0009a34:	8d 7e ff             	lea    edi,[esi-0x1]
c0009a37:	eb 14                	jmp    c0009a4d <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009a39:	6a 01                	push   0x1
c0009a3b:	43                   	inc    ebx
c0009a3c:	50                   	push   eax
c0009a3d:	e8 fe fe ff ff       	call   c0009940 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a42:	58                   	pop    eax
c0009a43:	39 f3                	cmp    ebx,esi
c0009a45:	5a                   	pop    edx
c0009a46:	74 25                	je     c0009a6d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009a48:	a1 04 f9 01 c0       	mov    eax,ds:0xc001f904
c0009a4d:	8d 50 01             	lea    edx,[eax+0x1]
c0009a50:	85 db                	test   ebx,ebx
c0009a52:	89 15 04 f9 01 c0    	mov    DWORD PTR ds:0xc001f904,edx
c0009a58:	74 20                	je     c0009a7a <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009a5a:	39 df                	cmp    edi,ebx
c0009a5c:	75 db                	jne    c0009a39 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0009a5e:	6a 03                	push   0x3
c0009a60:	43                   	inc    ebx
c0009a61:	50                   	push   eax
c0009a62:	e8 d9 fe ff ff       	call   c0009940 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a67:	59                   	pop    ecx
c0009a68:	39 f3                	cmp    ebx,esi
c0009a6a:	58                   	pop    eax
c0009a6b:	75 db                	jne    c0009a48 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009a6d:	83 c4 1c             	add    esp,0x1c
c0009a70:	89 e8                	mov    eax,ebp
c0009a72:	5b                   	pop    ebx
c0009a73:	c1 e0 0c             	shl    eax,0xc
c0009a76:	5e                   	pop    esi
c0009a77:	5f                   	pop    edi
c0009a78:	5d                   	pop    ebp
c0009a79:	c3                   	ret    
c0009a7a:	6a 02                	push   0x2
c0009a7c:	bb 01 00 00 00       	mov    ebx,0x1
c0009a81:	50                   	push   eax
c0009a82:	e8 b9 fe ff ff       	call   c0009940 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a87:	58                   	pop    eax
c0009a88:	5a                   	pop    edx
c0009a89:	eb bd                	jmp    c0009a48 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009a8b:	6a 04                	push   0x4
c0009a8d:	8d 45 01             	lea    eax,[ebp+0x1]
c0009a90:	55                   	push   ebp
c0009a91:	a3 04 f9 01 c0       	mov    ds:0xc001f904,eax
c0009a96:	e8 a5 fe ff ff       	call   c0009940 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	89 e8                	mov    eax,ebp
c0009a9e:	5b                   	pop    ebx
c0009a9f:	c1 e0 0c             	shl    eax,0xc
c0009aa2:	83 c4 1c             	add    esp,0x1c
c0009aa5:	5b                   	pop    ebx
c0009aa6:	5e                   	pop    esi
c0009aa7:	5f                   	pop    edi
c0009aa8:	5d                   	pop    ebp
c0009aa9:	c3                   	ret    

c0009aaa <Virt::freeSwapfilePage(unsigned long)>:
c0009aaa:	53                   	push   ebx
c0009aab:	8b 15 ac 0a 02 c0    	mov    edx,DWORD PTR ds:0xc0020aac
c0009ab1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ab5:	b8 01 00 00 00       	mov    eax,0x1
c0009aba:	89 cb                	mov    ebx,ecx
c0009abc:	d3 e0                	shl    eax,cl
c0009abe:	c1 eb 05             	shr    ebx,0x5
c0009ac1:	f7 d0                	not    eax
c0009ac3:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0009ac6:	5b                   	pop    ebx
c0009ac7:	c3                   	ret    

c0009ac8 <Virt::swapIDToSector(unsigned long)>:
c0009ac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009acc:	0f af 05 0c f9 01 c0 	imul   eax,DWORD PTR ds:0xc001f90c
c0009ad3:	03 05 14 f9 01 c0    	add    eax,DWORD PTR ds:0xc001f914
c0009ad9:	c3                   	ret    

c0009ada <Virt::allocateSwapfilePage()>:
c0009ada:	55                   	push   ebp
c0009adb:	31 d2                	xor    edx,edx
c0009add:	57                   	push   edi
c0009ade:	56                   	push   esi
c0009adf:	53                   	push   ebx
c0009ae0:	83 ec 0c             	sub    esp,0xc
c0009ae3:	8b 0d 0c f9 01 c0    	mov    ecx,DWORD PTR ds:0xc001f90c
c0009ae9:	a1 10 f9 01 c0       	mov    eax,ds:0xc001f910
c0009aee:	f7 f1                	div    ecx
c0009af0:	39 0d 10 f9 01 c0    	cmp    DWORD PTR ds:0xc001f910,ecx
c0009af6:	72 2d                	jb     c0009b25 <Virt::allocateSwapfilePage()+0x4b>
c0009af8:	8b 35 ac 0a 02 c0    	mov    esi,DWORD PTR ds:0xc0020aac
c0009afe:	8b 16                	mov    edx,DWORD PTR [esi]
c0009b00:	f6 c2 01             	test   dl,0x1
c0009b03:	74 3c                	je     c0009b41 <Virt::allocateSwapfilePage()+0x67>
c0009b05:	31 c9                	xor    ecx,ecx
c0009b07:	bf 01 00 00 00       	mov    edi,0x1
c0009b0c:	eb 12                	jmp    c0009b20 <Virt::allocateSwapfilePage()+0x46>
c0009b0e:	89 fd                	mov    ebp,edi
c0009b10:	89 ca                	mov    edx,ecx
c0009b12:	d3 e5                	shl    ebp,cl
c0009b14:	c1 ea 05             	shr    edx,0x5
c0009b17:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009b1a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009b1c:	85 ea                	test   edx,ebp
c0009b1e:	74 2a                	je     c0009b4a <Virt::allocateSwapfilePage()+0x70>
c0009b20:	41                   	inc    ecx
c0009b21:	39 c8                	cmp    eax,ecx
c0009b23:	77 e9                	ja     c0009b0e <Virt::allocateSwapfilePage()+0x34>
c0009b25:	83 ec 0c             	sub    esp,0xc
c0009b28:	68 ff db 01 c0       	push   0xc001dbff
c0009b2d:	e8 b9 6b 00 00       	call   c00106eb <Krnl::panic(char const*)>
c0009b32:	83 c4 10             	add    esp,0x10
c0009b35:	31 c9                	xor    ecx,ecx
c0009b37:	83 c4 0c             	add    esp,0xc
c0009b3a:	89 c8                	mov    eax,ecx
c0009b3c:	5b                   	pop    ebx
c0009b3d:	5e                   	pop    esi
c0009b3e:	5f                   	pop    edi
c0009b3f:	5d                   	pop    ebp
c0009b40:	c3                   	ret    
c0009b41:	89 f3                	mov    ebx,esi
c0009b43:	bd 01 00 00 00       	mov    ebp,0x1
c0009b48:	31 c9                	xor    ecx,ecx
c0009b4a:	09 ea                	or     edx,ebp
c0009b4c:	89 c8                	mov    eax,ecx
c0009b4e:	89 13                	mov    DWORD PTR [ebx],edx
c0009b50:	83 c4 0c             	add    esp,0xc
c0009b53:	5b                   	pop    ebx
c0009b54:	5e                   	pop    esi
c0009b55:	5f                   	pop    edi
c0009b56:	5d                   	pop    ebp
c0009b57:	c3                   	ret    

c0009b58 <Virt::virtualMemorySetup()>:
c0009b58:	53                   	push   ebx
c0009b59:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009b5e:	6a 0f                	push   0xf
c0009b60:	53                   	push   ebx
c0009b61:	43                   	inc    ebx
c0009b62:	e8 d9 fd ff ff       	call   c0009940 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b67:	58                   	pop    eax
c0009b68:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009b6e:	5a                   	pop    edx
c0009b6f:	75 ed                	jne    c0009b5e <Virt::virtualMemorySetup()+0x6>
c0009b71:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009b76:	6a 00                	push   0x0
c0009b78:	53                   	push   ebx
c0009b79:	43                   	inc    ebx
c0009b7a:	e8 c1 fd ff ff       	call   c0009940 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b7f:	59                   	pop    ecx
c0009b80:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009b86:	58                   	pop    eax
c0009b87:	75 ed                	jne    c0009b76 <Virt::virtualMemorySetup()+0x1e>
c0009b89:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009b8e:	6a 0f                	push   0xf
c0009b90:	53                   	push   ebx
c0009b91:	43                   	inc    ebx
c0009b92:	e8 a9 fd ff ff       	call   c0009940 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b97:	58                   	pop    eax
c0009b98:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009b9e:	5a                   	pop    edx
c0009b9f:	75 ed                	jne    c0009b8e <Virt::virtualMemorySetup()+0x36>
c0009ba1:	5b                   	pop    ebx
c0009ba2:	c3                   	ret    

c0009ba3 <Virt::setupPageSwapping(int)>:
c0009ba3:	53                   	push   ebx
c0009ba4:	83 ec 0c             	sub    esp,0xc
c0009ba7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009bab:	a1 28 2f 02 c0       	mov    eax,ds:0xc0022f28
c0009bb0:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009bb6:	8b 10                	mov    edx,DWORD PTR [eax]
c0009bb8:	53                   	push   ebx
c0009bb9:	c1 e3 0b             	shl    ebx,0xb
c0009bbc:	68 16 dc 01 c0       	push   0xc001dc16
c0009bc1:	50                   	push   eax
c0009bc2:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009bc5:	89 1d 10 f9 01 c0    	mov    DWORD PTR ds:0xc001f910,ebx
c0009bcb:	c6 05 18 f9 01 c0 43 	mov    BYTE PTR ds:0xc001f918,0x43
c0009bd2:	c1 eb 08             	shr    ebx,0x8
c0009bd5:	a3 14 f9 01 c0       	mov    ds:0xc001f914,eax
c0009bda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009bdd:	c7 05 0c f9 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f90c,0x8
c0009be7:	e8 71 e2 ff ff       	call   c0007e5d <malloc>
c0009bec:	83 c4 0c             	add    esp,0xc
c0009bef:	89 c1                	mov    ecx,eax
c0009bf1:	a3 ac 0a 02 c0       	mov    ds:0xc0020aac,eax
c0009bf6:	31 d2                	xor    edx,edx
c0009bf8:	a1 10 f9 01 c0       	mov    eax,ds:0xc001f910
c0009bfd:	f7 35 0c f9 01 c0    	div    DWORD PTR ds:0xc001f90c
c0009c03:	c1 e8 05             	shr    eax,0x5
c0009c06:	50                   	push   eax
c0009c07:	6a 00                	push   0x0
c0009c09:	51                   	push   ecx
c0009c0a:	e8 e1 68 ff ff       	call   c00004f0 <memset>
c0009c0f:	83 c4 18             	add    esp,0x18
c0009c12:	5b                   	pop    ebx
c0009c13:	c3                   	ret    

c0009c14 <VAS::VAS()>:
c0009c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c18:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c23:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009c2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c2e:	a3 b0 0a 02 c0       	mov    ds:0xc0020ab0,eax
c0009c33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c37:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009c3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c3f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009c42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c46:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009c4d:	90                   	nop
c0009c4e:	c3                   	ret    
c0009c4f:	90                   	nop

c0009c50 <VAS::VAS(VAS*)>:
c0009c50:	83 ec 0c             	sub    esp,0xc
c0009c53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c62:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009c69:	83 ec 0c             	sub    esp,0xc
c0009c6c:	68 b8 da 01 c0       	push   0xc001dab8
c0009c71:	e8 75 6a 00 00       	call   c00106eb <Krnl::panic(char const*)>
c0009c76:	83 c4 10             	add    esp,0x10
c0009c79:	90                   	nop
c0009c7a:	83 c4 0c             	add    esp,0xc
c0009c7d:	c3                   	ret    

c0009c7e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0009c7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c82:	89 c2                	mov    edx,eax
c0009c84:	c1 e8 0a             	shr    eax,0xa
c0009c87:	c1 ea 16             	shr    edx,0x16
c0009c8a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009c8f:	19 c9                	sbb    ecx,ecx
c0009c91:	c1 e2 0c             	shl    edx,0xc
c0009c94:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009c9a:	25 fc 0f 00 00       	and    eax,0xffc
c0009c9f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009ca6:	01 d0                	add    eax,edx
c0009ca8:	c3                   	ret    
c0009ca9:	90                   	nop

c0009caa <VAS::getPageTableEntry(unsigned long)>:
c0009caa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009cae:	89 ca                	mov    edx,ecx
c0009cb0:	c1 e9 0a             	shr    ecx,0xa
c0009cb3:	c1 ea 16             	shr    edx,0x16
c0009cb6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009cbc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009cc2:	c1 e0 0c             	shl    eax,0xc
c0009cc5:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009cc8:	c3                   	ret    

c0009cc9 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009cc9:	57                   	push   edi
c0009cca:	56                   	push   esi
c0009ccb:	be 01 00 00 00       	mov    esi,0x1
c0009cd0:	53                   	push   ebx
c0009cd1:	83 ec 10             	sub    esp,0x10
c0009cd4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009cd8:	c1 eb 0c             	shr    ebx,0xc
c0009cdb:	eb 3f                	jmp    c0009d1c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009cdd:	83 ec 08             	sub    esp,0x8
c0009ce0:	a1 b0 0a 02 c0       	mov    eax,ds:0xc0020ab0
c0009ce5:	57                   	push   edi
c0009ce6:	50                   	push   eax
c0009ce7:	e8 be ff ff ff       	call   c0009caa <VAS::getPageTableEntry(unsigned long)>
c0009cec:	83 c4 10             	add    esp,0x10
c0009cef:	8b 00                	mov    eax,DWORD PTR [eax]
c0009cf1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009cf5:	f6 c4 04             	test   ah,0x4
c0009cf8:	75 60                	jne    c0009d5a <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009cfa:	80 fa 04             	cmp    dl,0x4
c0009cfd:	74 79                	je     c0009d78 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0009cff:	80 fa 02             	cmp    dl,0x2
c0009d02:	0f 84 89 00 00 00    	je     c0009d91 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009d08:	80 fa 03             	cmp    dl,0x3
c0009d0b:	0f 84 ae 00 00 00    	je     c0009dbf <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0009d11:	fe ca                	dec    dl
c0009d13:	0f 84 93 00 00 00    	je     c0009dac <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009d19:	43                   	inc    ebx
c0009d1a:	31 f6                	xor    esi,esi
c0009d1c:	53                   	push   ebx
c0009d1d:	89 df                	mov    edi,ebx
c0009d1f:	e8 51 fc ff ff       	call   c0009975 <Virt::getPageState(unsigned long)>
c0009d24:	c1 e7 0c             	shl    edi,0xc
c0009d27:	5a                   	pop    edx
c0009d28:	84 c0                	test   al,al
c0009d2a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009d2e:	75 ad                	jne    c0009cdd <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0009d30:	83 ec 0c             	sub    esp,0xc
c0009d33:	68 2d dc 01 c0       	push   0xc001dc2d
c0009d38:	e8 ae 69 00 00       	call   c00106eb <Krnl::panic(char const*)>
c0009d3d:	5a                   	pop    edx
c0009d3e:	59                   	pop    ecx
c0009d3f:	57                   	push   edi
c0009d40:	8b 3d b0 0a 02 c0    	mov    edi,DWORD PTR ds:0xc0020ab0
c0009d46:	57                   	push   edi
c0009d47:	e8 5e ff ff ff       	call   c0009caa <VAS::getPageTableEntry(unsigned long)>
c0009d4c:	83 c4 10             	add    esp,0x10
c0009d4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009d51:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009d55:	f6 c4 04             	test   ah,0x4
c0009d58:	74 bf                	je     c0009d19 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009d5a:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0009d5e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009d63:	83 ec 0c             	sub    esp,0xc
c0009d66:	50                   	push   eax
c0009d67:	e8 5c e4 ff ff       	call   c00081c8 <Phys::freePage(unsigned long)>
c0009d6c:	83 c4 10             	add    esp,0x10
c0009d6f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009d73:	80 fa 04             	cmp    dl,0x4
c0009d76:	75 87                	jne    c0009cff <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009d78:	89 f0                	mov    eax,esi
c0009d7a:	84 c0                	test   al,al
c0009d7c:	75 47                	jne    c0009dc5 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c0009d7e:	c7 44 24 20 dc da 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dadc
c0009d86:	83 c4 10             	add    esp,0x10
c0009d89:	5b                   	pop    ebx
c0009d8a:	5e                   	pop    esi
c0009d8b:	5f                   	pop    edi
c0009d8c:	e9 5a 69 00 00       	jmp    c00106eb <Krnl::panic(char const*)>
c0009d91:	89 f0                	mov    eax,esi
c0009d93:	84 c0                	test   al,al
c0009d95:	75 15                	jne    c0009dac <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009d97:	83 ec 0c             	sub    esp,0xc
c0009d9a:	68 49 dc 01 c0       	push   0xc001dc49
c0009d9f:	e8 47 69 00 00       	call   c00106eb <Krnl::panic(char const*)>
c0009da4:	83 c4 10             	add    esp,0x10
c0009da7:	e9 6d ff ff ff       	jmp    c0009d19 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009dac:	83 ec 08             	sub    esp,0x8
c0009daf:	6a 00                	push   0x0
c0009db1:	53                   	push   ebx
c0009db2:	e8 89 fb ff ff       	call   c0009940 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009db7:	83 c4 10             	add    esp,0x10
c0009dba:	e9 5a ff ff ff       	jmp    c0009d19 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009dbf:	89 f0                	mov    eax,esi
c0009dc1:	84 c0                	test   al,al
c0009dc3:	75 15                	jne    c0009dda <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009dc5:	83 ec 08             	sub    esp,0x8
c0009dc8:	6a 00                	push   0x0
c0009dca:	53                   	push   ebx
c0009dcb:	e8 70 fb ff ff       	call   c0009940 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009dd0:	83 c4 10             	add    esp,0x10
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	5b                   	pop    ebx
c0009dd7:	5e                   	pop    esi
c0009dd8:	5f                   	pop    edi
c0009dd9:	c3                   	ret    
c0009dda:	c7 44 24 20 65 dc 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dc65
c0009de2:	83 c4 10             	add    esp,0x10
c0009de5:	5b                   	pop    ebx
c0009de6:	5e                   	pop    esi
c0009de7:	5f                   	pop    edi
c0009de8:	e9 fe 68 00 00       	jmp    c00106eb <Krnl::panic(char const*)>
c0009ded:	90                   	nop

c0009dee <VAS::freeAllocatedPages(unsigned long)>:
c0009dee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009df2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009df6:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009dfa:	74 09                	je     c0009e05 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009dfc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009e00:	e9 c4 fe ff ff       	jmp    c0009cc9 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e05:	c7 44 24 04 00 db 01 c0 	mov    DWORD PTR [esp+0x4],0xc001db00
c0009e0d:	e9 da 0d 00 00       	jmp    c000abec <Dbg::kprintf(char const*, ...)>

c0009e12 <VAS::virtualToPhysical(unsigned long)>:
c0009e12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e16:	50                   	push   eax
c0009e17:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009e1b:	52                   	push   edx
c0009e1c:	e8 89 fe ff ff       	call   c0009caa <VAS::getPageTableEntry(unsigned long)>
c0009e21:	59                   	pop    ecx
c0009e22:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e24:	5a                   	pop    edx
c0009e25:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009e2a:	c3                   	ret    
c0009e2b:	90                   	nop

c0009e2c <VAS::reflagRange(unsigned long, int, int, int)>:
c0009e2c:	55                   	push   ebp
c0009e2d:	57                   	push   edi
c0009e2e:	56                   	push   esi
c0009e2f:	53                   	push   ebx
c0009e30:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009e34:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009e38:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009e3c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009e40:	85 db                	test   ebx,ebx
c0009e42:	7e 22                	jle    c0009e66 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009e44:	c1 e3 0c             	shl    ebx,0xc
c0009e47:	01 f3                	add    ebx,esi
c0009e49:	56                   	push   esi
c0009e4a:	81 c6 00 10 00 00    	add    esi,0x1000
c0009e50:	55                   	push   ebp
c0009e51:	e8 54 fe ff ff       	call   c0009caa <VAS::getPageTableEntry(unsigned long)>
c0009e56:	5a                   	pop    edx
c0009e57:	59                   	pop    ecx
c0009e58:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009e5a:	21 f9                	and    ecx,edi
c0009e5c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0009e60:	39 f3                	cmp    ebx,esi
c0009e62:	89 08                	mov    DWORD PTR [eax],ecx
c0009e64:	75 e3                	jne    c0009e49 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009e66:	5b                   	pop    ebx
c0009e67:	5e                   	pop    esi
c0009e68:	5f                   	pop    edi
c0009e69:	5d                   	pop    ebp
c0009e6a:	c3                   	ret    
c0009e6b:	90                   	nop

c0009e6c <VAS::setToWriteCombining(unsigned long, int)>:
c0009e6c:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0009e71:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e77:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009e7e:	75 01                	jne    c0009e81 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009e80:	c3                   	ret    
c0009e81:	68 80 00 00 00       	push   0x80
c0009e86:	6a ff                	push   0xffffffff
c0009e88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009e8c:	50                   	push   eax
c0009e8d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009e91:	52                   	push   edx
c0009e92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009e96:	51                   	push   ecx
c0009e97:	e8 90 ff ff ff       	call   c0009e2c <VAS::reflagRange(unsigned long, int, int, int)>
c0009e9c:	83 c4 14             	add    esp,0x14
c0009e9f:	c3                   	ret    

c0009ea0 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009ea0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009ea5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ea9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009eac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009eb0:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009eb3:	19 c0                	sbb    eax,eax
c0009eb5:	83 ca 03             	or     edx,0x3
c0009eb8:	83 e0 fc             	and    eax,0xfffffffc
c0009ebb:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009ec2:	0f 20 d8             	mov    eax,cr3
c0009ec5:	0f 22 d8             	mov    cr3,eax
c0009ec8:	c3                   	ret    
c0009ec9:	90                   	nop

c0009eca <VAS::~VAS()>:
c0009eca:	83 ec 2c             	sub    esp,0x2c
c0009ecd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009ed5:	fa                   	cli    
c0009ed6:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0009edb:	40                   	inc    eax
c0009edc:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0009ee1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009ee6:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ee8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009eeb:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009ef1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009ef5:	6a 01                	push   0x1
c0009ef7:	50                   	push   eax
c0009ef8:	e8 a3 ff ff ff       	call   c0009ea0 <VAS::mapOtherVASIn(bool, VAS*)>
c0009efd:	83 c4 0c             	add    esp,0xc
c0009f00:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009f08:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009f10:	0f 8f d4 00 00 00    	jg     c0009fea <VAS::~VAS()+0x120>
c0009f16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f1a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f1d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f21:	c1 e2 02             	shl    edx,0x2
c0009f24:	01 d0                	add    eax,edx
c0009f26:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f30:	83 e0 01             	and    eax,0x1
c0009f33:	0f 84 a8 00 00 00    	je     c0009fe1 <VAS::~VAS()+0x117>
c0009f39:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009f41:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009f49:	7f 72                	jg     c0009fbd <VAS::~VAS()+0xf3>
c0009f4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f4f:	c1 e0 0a             	shl    eax,0xa
c0009f52:	89 c2                	mov    edx,eax
c0009f54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009f58:	01 d0                	add    eax,edx
c0009f5a:	c1 e0 0c             	shl    eax,0xc
c0009f5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f61:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009f66:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f68:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009f6b:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009f71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009f75:	6a 01                	push   0x1
c0009f77:	50                   	push   eax
c0009f78:	e8 01 fd ff ff       	call   c0009c7e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009f7d:	83 c4 0c             	add    esp,0xc
c0009f80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f88:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f8a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009f92:	25 01 04 00 00       	and    eax,0x401
c0009f97:	3d 01 04 00 00       	cmp    eax,0x401
c0009f9c:	75 19                	jne    c0009fb7 <VAS::~VAS()+0xed>
c0009f9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009fa2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fa7:	83 ec 0c             	sub    esp,0xc
c0009faa:	50                   	push   eax
c0009fab:	e8 18 e2 ff ff       	call   c00081c8 <Phys::freePage(unsigned long)>
c0009fb0:	83 c4 10             	add    esp,0x10
c0009fb3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009fb7:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009fbb:	eb 84                	jmp    c0009f41 <VAS::~VAS()+0x77>
c0009fbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fc1:	25 00 04 00 00       	and    eax,0x400
c0009fc6:	74 19                	je     c0009fe1 <VAS::~VAS()+0x117>
c0009fc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fcc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	50                   	push   eax
c0009fd5:	e8 ee e1 ff ff       	call   c00081c8 <Phys::freePage(unsigned long)>
c0009fda:	83 c4 10             	add    esp,0x10
c0009fdd:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009fe1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009fe5:	e9 1e ff ff ff       	jmp    c0009f08 <VAS::~VAS()+0x3e>
c0009fea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fee:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ff1:	83 ec 0c             	sub    esp,0xc
c0009ff4:	50                   	push   eax
c0009ff5:	e8 cf fc ff ff       	call   c0009cc9 <Virt::freeKernelVirtualPages(unsigned long)>
c0009ffa:	83 c4 10             	add    esp,0x10
c0009ffd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a001:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	50                   	push   eax
c000a008:	e8 bb e1 ff ff       	call   c00081c8 <Phys::freePage(unsigned long)>
c000a00d:	83 c4 10             	add    esp,0x10
c000a010:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000a014:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000a019:	48                   	dec    eax
c000a01a:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000a01f:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000a024:	85 c0                	test   eax,eax
c000a026:	75 01                	jne    c000a029 <VAS::~VAS()+0x15f>
c000a028:	fb                   	sti    
c000a029:	90                   	nop
c000a02a:	83 c4 2c             	add    esp,0x2c
c000a02d:	c3                   	ret    

c000a02e <VAS::mapPage(unsigned long, unsigned long, int)>:
c000a02e:	55                   	push   ebp
c000a02f:	57                   	push   edi
c000a030:	56                   	push   esi
c000a031:	53                   	push   ebx
c000a032:	83 ec 1c             	sub    esp,0x1c
c000a035:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000a039:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a03d:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000a043:	77 0b                	ja     c000a050 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000a045:	0f 20 d8             	mov    eax,cr3
c000a048:	0f 20 d8             	mov    eax,cr3
c000a04b:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000a04e:	75 47                	jne    c000a097 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000a050:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a054:	09 d8                	or     eax,ebx
c000a056:	a9 ff 0f 00 00       	test   eax,0xfff
c000a05b:	75 57                	jne    c000a0b4 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c000a05d:	89 de                	mov    esi,ebx
c000a05f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a062:	c1 ee 16             	shr    esi,0x16
c000a065:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000a06c:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000a070:	74 54                	je     c000a0c6 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000a072:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a076:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000a07c:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a080:	c1 e6 0c             	shl    esi,0xc
c000a083:	c1 eb 0a             	shr    ebx,0xa
c000a086:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000a08c:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000a08f:	83 c4 1c             	add    esp,0x1c
c000a092:	5b                   	pop    ebx
c000a093:	5e                   	pop    esi
c000a094:	5f                   	pop    edi
c000a095:	5d                   	pop    ebp
c000a096:	c3                   	ret    
c000a097:	83 ec 0c             	sub    esp,0xc
c000a09a:	68 24 db 01 c0       	push   0xc001db24
c000a09f:	e8 48 0b 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000a0a4:	83 c4 10             	add    esp,0x10
c000a0a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0ab:	09 d8                	or     eax,ebx
c000a0ad:	a9 ff 0f 00 00       	test   eax,0xfff
c000a0b2:	74 a9                	je     c000a05d <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000a0b4:	83 ec 0c             	sub    esp,0xc
c000a0b7:	68 8c db 01 c0       	push   0xc001db8c
c000a0bc:	e8 2a 66 00 00       	call   c00106eb <Krnl::panic(char const*)>
c000a0c1:	83 c4 10             	add    esp,0x10
c000a0c4:	eb 97                	jmp    c000a05d <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000a0c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a0ca:	e8 5b e1 ff ff       	call   c000822a <Phys::allocatePage()>
c000a0cf:	83 ec 0c             	sub    esp,0xc
c000a0d2:	89 c5                	mov    ebp,eax
c000a0d4:	8b 0d b0 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020ab0
c000a0da:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a0de:	6a 01                	push   0x1
c000a0e0:	e8 b4 f8 ff ff       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c000a0e5:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a0ec:	6a 01                	push   0x1
c000a0ee:	50                   	push   eax
c000a0ef:	55                   	push   ebp
c000a0f0:	81 cd 07 04 00 00    	or     ebp,0x407
c000a0f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a0fa:	51                   	push   ecx
c000a0fb:	e8 28 02 00 00       	call   c000a328 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a100:	83 c4 1c             	add    esp,0x1c
c000a103:	68 00 10 00 00       	push   0x1000
c000a108:	6a 00                	push   0x0
c000a10a:	50                   	push   eax
c000a10b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a10f:	e8 dc 63 ff ff       	call   c00004f0 <memset>
c000a114:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a118:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a11b:	e8 a9 fb ff ff       	call   c0009cc9 <Virt::freeKernelVirtualPages(unsigned long)>
c000a120:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a124:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a127:	83 c4 10             	add    esp,0x10
c000a12a:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000a12d:	e9 40 ff ff ff       	jmp    c000a072 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000a132 <VAS::allocatePages(int, int)>:
c000a132:	55                   	push   ebp
c000a133:	57                   	push   edi
c000a134:	56                   	push   esi
c000a135:	53                   	push   ebx
c000a136:	83 ec 1c             	sub    esp,0x1c
c000a139:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a13d:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000a142:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a148:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a14e:	83 e0 01             	and    eax,0x1
c000a151:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000a155:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a159:	0f 85 cc 00 00 00    	jne    c000a22b <VAS::allocatePages(int, int)+0xf9>
c000a15f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a162:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a166:	85 c0                	test   eax,eax
c000a168:	0f 84 a1 00 00 00    	je     c000a20f <VAS::allocatePages(int, int)+0xdd>
c000a16e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a172:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a176:	c1 e6 0c             	shl    esi,0xc
c000a179:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000a17d:	85 c0                	test   eax,eax
c000a17f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000a182:	7e 33                	jle    c000a1b7 <VAS::allocatePages(int, int)+0x85>
c000a184:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a188:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a18c:	81 cd 00 04 00 00    	or     ebp,0x400
c000a192:	e8 93 e0 ff ff       	call   c000822a <Phys::allocatePage()>
c000a197:	55                   	push   ebp
c000a198:	53                   	push   ebx
c000a199:	50                   	push   eax
c000a19a:	57                   	push   edi
c000a19b:	e8 8e fe ff ff       	call   c000a02e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a1a0:	83 c4 10             	add    esp,0x10
c000a1a3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a1a8:	74 03                	je     c000a1ad <VAS::allocatePages(int, int)+0x7b>
c000a1aa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a1ad:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a1b3:	39 de                	cmp    esi,ebx
c000a1b5:	75 db                	jne    c000a192 <VAS::allocatePages(int, int)+0x60>
c000a1b7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a1bc:	75 12                	jne    c000a1d0 <VAS::allocatePages(int, int)+0x9e>
c000a1be:	0f 20 d8             	mov    eax,cr3
c000a1c1:	0f 22 d8             	mov    cr3,eax
c000a1c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1c8:	83 c4 1c             	add    esp,0x1c
c000a1cb:	5b                   	pop    ebx
c000a1cc:	5e                   	pop    esi
c000a1cd:	5f                   	pop    edi
c000a1ce:	5d                   	pop    ebp
c000a1cf:	c3                   	ret    
c000a1d0:	c1 ee 0a             	shr    esi,0xa
c000a1d3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a1d7:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000a1dd:	c1 eb 0a             	shr    ebx,0xa
c000a1e0:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000a1e6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a1ec:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a1f2:	39 c3                	cmp    ebx,eax
c000a1f4:	77 ce                	ja     c000a1c4 <VAS::allocatePages(int, int)+0x92>
c000a1f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a1f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a1ff:	39 d8                	cmp    eax,ebx
c000a201:	73 f3                	jae    c000a1f6 <VAS::allocatePages(int, int)+0xc4>
c000a203:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a207:	83 c4 1c             	add    esp,0x1c
c000a20a:	5b                   	pop    ebx
c000a20b:	5e                   	pop    esi
c000a20c:	5f                   	pop    edi
c000a20d:	5d                   	pop    ebp
c000a20e:	c3                   	ret    
c000a20f:	83 ec 0c             	sub    esp,0xc
c000a212:	68 b0 db 01 c0       	push   0xc001dbb0
c000a217:	e8 cf 64 00 00       	call   c00106eb <Krnl::panic(char const*)>
c000a21c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a21f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a223:	83 c4 10             	add    esp,0x10
c000a226:	e9 43 ff ff ff       	jmp    c000a16e <VAS::allocatePages(int, int)+0x3c>
c000a22b:	83 ec 0c             	sub    esp,0xc
c000a22e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000a232:	51                   	push   ecx
c000a233:	e8 61 f7 ff ff       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c000a238:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a23c:	83 c4 10             	add    esp,0x10
c000a23f:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000a244:	0f 87 9b 00 00 00    	ja     c000a2e5 <VAS::allocatePages(int, int)+0x1b3>
c000a24a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a24e:	85 d2                	test   edx,edx
c000a250:	7e 3c                	jle    c000a28e <VAS::allocatePages(int, int)+0x15c>
c000a252:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a256:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a25a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a25e:	c1 e5 0c             	shl    ebp,0xc
c000a261:	81 ce 00 04 00 00    	or     esi,0x400
c000a267:	01 dd                	add    ebp,ebx
c000a269:	e8 bc df ff ff       	call   c000822a <Phys::allocatePage()>
c000a26e:	56                   	push   esi
c000a26f:	53                   	push   ebx
c000a270:	50                   	push   eax
c000a271:	57                   	push   edi
c000a272:	e8 b7 fd ff ff       	call   c000a02e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a277:	83 c4 10             	add    esp,0x10
c000a27a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a27f:	74 03                	je     c000a284 <VAS::allocatePages(int, int)+0x152>
c000a281:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a284:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a28a:	39 dd                	cmp    ebp,ebx
c000a28c:	75 db                	jne    c000a269 <VAS::allocatePages(int, int)+0x137>
c000a28e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a293:	0f 84 25 ff ff ff    	je     c000a1be <VAS::allocatePages(int, int)+0x8c>
c000a299:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a29d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a2a1:	89 d3                	mov    ebx,edx
c000a2a3:	c1 e0 0c             	shl    eax,0xc
c000a2a6:	c1 eb 0a             	shr    ebx,0xa
c000a2a9:	01 d0                	add    eax,edx
c000a2ab:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a2b1:	c1 e8 0a             	shr    eax,0xa
c000a2b4:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a2ba:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2bf:	2d 00 00 40 00       	sub    eax,0x400000
c000a2c4:	39 c3                	cmp    ebx,eax
c000a2c6:	0f 87 f8 fe ff ff    	ja     c000a1c4 <VAS::allocatePages(int, int)+0x92>
c000a2cc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a2cf:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a2d5:	39 d8                	cmp    eax,ebx
c000a2d7:	73 f3                	jae    c000a2cc <VAS::allocatePages(int, int)+0x19a>
c000a2d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2dd:	83 c4 1c             	add    esp,0x1c
c000a2e0:	5b                   	pop    ebx
c000a2e1:	5e                   	pop    esi
c000a2e2:	5f                   	pop    edi
c000a2e3:	5d                   	pop    ebp
c000a2e4:	c3                   	ret    
c000a2e5:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000a2ea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2f0:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000a2f7:	0f 84 4d ff ff ff    	je     c000a24a <VAS::allocatePages(int, int)+0x118>
c000a2fd:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000a305:	e9 40 ff ff ff       	jmp    c000a24a <VAS::allocatePages(int, int)+0x118>

c000a30a <VAS::setCPUSpecific(unsigned long)>:
c000a30a:	83 ec 0c             	sub    esp,0xc
c000a30d:	6a 05                	push   0x5
c000a30f:	68 00 00 40 c2       	push   0xc2400000
c000a314:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a318:	50                   	push   eax
c000a319:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a31d:	52                   	push   edx
c000a31e:	e8 0b fd ff ff       	call   c000a02e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a323:	83 c4 1c             	add    esp,0x1c
c000a326:	c3                   	ret    
c000a327:	90                   	nop

c000a328 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000a328:	55                   	push   ebp
c000a329:	57                   	push   edi
c000a32a:	56                   	push   esi
c000a32b:	53                   	push   ebx
c000a32c:	83 ec 1c             	sub    esp,0x1c
c000a32f:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000a334:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a338:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a33e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a342:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a348:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a34c:	83 e0 01             	and    eax,0x1
c000a34f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a353:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a357:	85 c0                	test   eax,eax
c000a359:	7e 39                	jle    c000a394 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000a35b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a35f:	89 f3                	mov    ebx,esi
c000a361:	c1 e0 0c             	shl    eax,0xc
c000a364:	01 f0                	add    eax,esi
c000a366:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a36a:	55                   	push   ebp
c000a36b:	53                   	push   ebx
c000a36c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a370:	29 f0                	sub    eax,esi
c000a372:	01 d8                	add    eax,ebx
c000a374:	50                   	push   eax
c000a375:	57                   	push   edi
c000a376:	e8 b3 fc ff ff       	call   c000a02e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a37b:	83 c4 10             	add    esp,0x10
c000a37e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a383:	74 03                	je     c000a388 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000a385:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a388:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a38e:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000a392:	75 d6                	jne    c000a36a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a394:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a399:	75 10                	jne    c000a3ab <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000a39b:	0f 20 d8             	mov    eax,cr3
c000a39e:	0f 22 d8             	mov    cr3,eax
c000a3a1:	83 c4 1c             	add    esp,0x1c
c000a3a4:	89 f0                	mov    eax,esi
c000a3a6:	5b                   	pop    ebx
c000a3a7:	5e                   	pop    esi
c000a3a8:	5f                   	pop    edi
c000a3a9:	5d                   	pop    ebp
c000a3aa:	c3                   	ret    
c000a3ab:	89 f3                	mov    ebx,esi
c000a3ad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a3b1:	c1 eb 0a             	shr    ebx,0xa
c000a3b4:	c1 e0 0c             	shl    eax,0xc
c000a3b7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3bd:	01 f0                	add    eax,esi
c000a3bf:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a3c5:	c1 e8 0a             	shr    eax,0xa
c000a3c8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a3cd:	2d 00 00 40 00       	sub    eax,0x400000
c000a3d2:	39 c3                	cmp    ebx,eax
c000a3d4:	77 cb                	ja     c000a3a1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000a3d6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a3d9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a3df:	39 d8                	cmp    eax,ebx
c000a3e1:	73 f3                	jae    c000a3d6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000a3e3:	83 c4 1c             	add    esp,0x1c
c000a3e6:	89 f0                	mov    eax,esi
c000a3e8:	5b                   	pop    ebx
c000a3e9:	5e                   	pop    esi
c000a3ea:	5f                   	pop    edi
c000a3eb:	5d                   	pop    ebp
c000a3ec:	c3                   	ret    
c000a3ed:	90                   	nop

c000a3ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a3ee:	55                   	push   ebp
c000a3ef:	57                   	push   edi
c000a3f0:	56                   	push   esi
c000a3f1:	53                   	push   ebx
c000a3f2:	83 ec 1c             	sub    esp,0x1c
c000a3f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a3f9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a3fd:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000a401:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000a405:	a9 ff 0f 00 00       	test   eax,0xfff
c000a40a:	75 4a                	jne    c000a456 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000a40c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a410:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a413:	c1 eb 16             	shr    ebx,0x16
c000a416:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000a41d:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000a421:	74 4d                	je     c000a470 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000a423:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a427:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000a42b:	c1 e8 0a             	shr    eax,0xa
c000a42e:	80 fa 01             	cmp    dl,0x1
c000a431:	19 d2                	sbb    edx,edx
c000a433:	c1 e3 0c             	shl    ebx,0xc
c000a436:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000a43a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000a440:	25 fc 0f 00 00       	and    eax,0xffc
c000a445:	01 d8                	add    eax,ebx
c000a447:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000a44e:	83 c4 1c             	add    esp,0x1c
c000a451:	5b                   	pop    ebx
c000a452:	5e                   	pop    esi
c000a453:	5f                   	pop    edi
c000a454:	5d                   	pop    ebp
c000a455:	c3                   	ret    
c000a456:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a45a:	83 ec 0c             	sub    esp,0xc
c000a45d:	68 dc db 01 c0       	push   0xc001dbdc
c000a462:	e8 84 62 00 00       	call   c00106eb <Krnl::panic(char const*)>
c000a467:	83 c4 10             	add    esp,0x10
c000a46a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a46e:	eb 9c                	jmp    c000a40c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000a470:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a474:	e8 b1 dd ff ff       	call   c000822a <Phys::allocatePage()>
c000a479:	83 ec 0c             	sub    esp,0xc
c000a47c:	89 c5                	mov    ebp,eax
c000a47e:	8b 0d b0 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020ab0
c000a484:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a488:	6a 01                	push   0x1
c000a48a:	e8 0a f5 ff ff       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c000a48f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a496:	6a 01                	push   0x1
c000a498:	50                   	push   eax
c000a499:	55                   	push   ebp
c000a49a:	81 cd 07 04 00 00    	or     ebp,0x407
c000a4a0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a4a4:	51                   	push   ecx
c000a4a5:	e8 7e fe ff ff       	call   c000a328 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a4aa:	83 c4 1c             	add    esp,0x1c
c000a4ad:	68 00 10 00 00       	push   0x1000
c000a4b2:	6a 00                	push   0x0
c000a4b4:	50                   	push   eax
c000a4b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a4b9:	e8 32 60 ff ff       	call   c00004f0 <memset>
c000a4be:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a4c2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a4c5:	e8 ff f7 ff ff       	call   c0009cc9 <Virt::freeKernelVirtualPages(unsigned long)>
c000a4ca:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a4cd:	83 c4 10             	add    esp,0x10
c000a4d0:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000a4d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a4d7:	e9 47 ff ff ff       	jmp    c000a423 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000a4dc <VAS::VAS(bool)>:
c000a4dc:	53                   	push   ebx
c000a4dd:	83 ec 28             	sub    esp,0x28
c000a4e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a4e4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a4e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a4f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a4fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a502:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a506:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a509:	e8 1c dd ff ff       	call   c000822a <Phys::allocatePage()>
c000a50e:	89 c2                	mov    edx,eax
c000a510:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a514:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a517:	8b 1d b0 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ab0
c000a51d:	83 ec 0c             	sub    esp,0xc
c000a520:	6a 01                	push   0x1
c000a522:	e8 72 f4 ff ff       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c000a527:	83 c4 10             	add    esp,0x10
c000a52a:	89 c2                	mov    edx,eax
c000a52c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a530:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a533:	83 ec 0c             	sub    esp,0xc
c000a536:	6a 03                	push   0x3
c000a538:	6a 01                	push   0x1
c000a53a:	52                   	push   edx
c000a53b:	50                   	push   eax
c000a53c:	53                   	push   ebx
c000a53d:	e8 e6 fd ff ff       	call   c000a328 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a542:	83 c4 20             	add    esp,0x20
c000a545:	89 c2                	mov    edx,eax
c000a547:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a54b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a54e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a556:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a55e:	7f 1c                	jg     c000a57c <VAS::VAS(bool)+0xa0>
c000a560:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a564:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a567:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a56b:	c1 e2 02             	shl    edx,0x2
c000a56e:	01 d0                	add    eax,edx
c000a570:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a576:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000a57a:	eb da                	jmp    c000a556 <VAS::VAS(bool)+0x7a>
c000a57c:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a584:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a58c:	7f 7a                	jg     c000a608 <VAS::VAS(bool)+0x12c>
c000a58e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a592:	2d 00 02 00 00       	sub    eax,0x200
c000a597:	c1 e0 0c             	shl    eax,0xc
c000a59a:	83 c8 03             	or     eax,0x3
c000a59d:	89 c2                	mov    edx,eax
c000a59f:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000a5a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a5aa:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a5b0:	83 e0 10             	and    eax,0x10
c000a5b3:	84 c0                	test   al,al
c000a5b5:	74 07                	je     c000a5be <VAS::VAS(bool)+0xe2>
c000a5b7:	b8 00 01 00 00       	mov    eax,0x100
c000a5bc:	eb 05                	jmp    c000a5c3 <VAS::VAS(bool)+0xe7>
c000a5be:	b8 00 00 00 00       	mov    eax,0x0
c000a5c3:	09 d0                	or     eax,edx
c000a5c5:	89 c1                	mov    ecx,eax
c000a5c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a5cb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a5ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a5d2:	c1 e2 02             	shl    edx,0x2
c000a5d5:	01 d0                	add    eax,edx
c000a5d7:	89 ca                	mov    edx,ecx
c000a5d9:	89 10                	mov    DWORD PTR [eax],edx
c000a5db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a5df:	2d 40 03 00 00       	sub    eax,0x340
c000a5e4:	83 f8 7f             	cmp    eax,0x7f
c000a5e7:	77 16                	ja     c000a5ff <VAS::VAS(bool)+0x123>
c000a5e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a5ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a5f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a5f4:	c1 e2 02             	shl    edx,0x2
c000a5f7:	01 d0                	add    eax,edx
c000a5f9:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a5ff:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000a603:	e9 7c ff ff ff       	jmp    c000a584 <VAS::VAS(bool)+0xa8>
c000a608:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000a60d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a613:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a619:	83 e0 10             	and    eax,0x10
c000a61c:	84 c0                	test   al,al
c000a61e:	74 07                	je     c000a627 <VAS::VAS(bool)+0x14b>
c000a620:	b8 03 41 00 00       	mov    eax,0x4103
c000a625:	eb 05                	jmp    c000a62c <VAS::VAS(bool)+0x150>
c000a627:	b8 03 40 00 00       	mov    eax,0x4003
c000a62c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a630:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a633:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a639:	89 02                	mov    DWORD PTR [edx],eax
c000a63b:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000a640:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a646:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a64c:	83 ec 08             	sub    esp,0x8
c000a64f:	50                   	push   eax
c000a650:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a654:	e8 b1 fc ff ff       	call   c000a30a <VAS::setCPUSpecific(unsigned long)>
c000a659:	83 c4 10             	add    esp,0x10
c000a65c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a660:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a663:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000a668:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a66e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a674:	83 e0 10             	and    eax,0x10
c000a677:	84 c0                	test   al,al
c000a679:	74 07                	je     c000a682 <VAS::VAS(bool)+0x1a6>
c000a67b:	b8 00 01 00 00       	mov    eax,0x100
c000a680:	eb 05                	jmp    c000a687 <VAS::VAS(bool)+0x1ab>
c000a682:	b8 00 00 00 00       	mov    eax,0x0
c000a687:	09 c2                	or     edx,eax
c000a689:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a68d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a690:	05 fc 0f 00 00       	add    eax,0xffc
c000a695:	83 ca 03             	or     edx,0x3
c000a698:	89 10                	mov    DWORD PTR [eax],edx
c000a69a:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000a69f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a6a5:	83 ec 0c             	sub    esp,0xc
c000a6a8:	50                   	push   eax
c000a6a9:	e8 12 1c 00 00       	call   c000c2c0 <Device::getName()>
c000a6ae:	83 c4 10             	add    esp,0x10
c000a6b1:	83 ec 08             	sub    esp,0x8
c000a6b4:	68 7f dc 01 c0       	push   0xc001dc7f
c000a6b9:	50                   	push   eax
c000a6ba:	e8 41 60 ff ff       	call   c0000700 <strcmp>
c000a6bf:	83 c4 10             	add    esp,0x10
c000a6c2:	85 c0                	test   eax,eax
c000a6c4:	0f 94 c0             	sete   al
c000a6c7:	84 c0                	test   al,al
c000a6c9:	0f 84 87 00 00 00    	je     c000a756 <VAS::VAS(bool)+0x27a>
c000a6cf:	fa                   	cli    
c000a6d0:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000a6d5:	40                   	inc    eax
c000a6d6:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000a6db:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000a6e0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a6e6:	05 7c 09 00 00       	add    eax,0x97c
c000a6eb:	83 ec 0c             	sub    esp,0xc
c000a6ee:	50                   	push   eax
c000a6ef:	e8 66 d2 ff ff       	call   c000795a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a6f4:	83 c4 10             	add    esp,0x10
c000a6f7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a6fc:	89 c3                	mov    ebx,eax
c000a6fe:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000a703:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a709:	05 7c 09 00 00       	add    eax,0x97c
c000a70e:	83 ec 0c             	sub    esp,0xc
c000a711:	50                   	push   eax
c000a712:	e8 43 d2 ff ff       	call   c000795a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a717:	83 c4 10             	add    esp,0x10
c000a71a:	83 ec 08             	sub    esp,0x8
c000a71d:	50                   	push   eax
c000a71e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a722:	e8 83 f5 ff ff       	call   c0009caa <VAS::getPageTableEntry(unsigned long)>
c000a727:	83 c4 10             	add    esp,0x10
c000a72a:	8b 00                	mov    eax,DWORD PTR [eax]
c000a72c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a731:	6a 11                	push   0x11
c000a733:	53                   	push   ebx
c000a734:	50                   	push   eax
c000a735:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a739:	e8 f0 f8 ff ff       	call   c000a02e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a73e:	83 c4 10             	add    esp,0x10
c000a741:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000a746:	48                   	dec    eax
c000a747:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000a74c:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000a751:	85 c0                	test   eax,eax
c000a753:	75 01                	jne    c000a756 <VAS::VAS(bool)+0x27a>
c000a755:	fb                   	sti    
c000a756:	90                   	nop
c000a757:	83 c4 28             	add    esp,0x28
c000a75a:	5b                   	pop    ebx
c000a75b:	c3                   	ret    

c000a75c <VAS::evict(unsigned long)>:
c000a75c:	55                   	push   ebp
c000a75d:	57                   	push   edi
c000a75e:	56                   	push   esi
c000a75f:	53                   	push   ebx
c000a760:	83 ec 1c             	sub    esp,0x1c
c000a763:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a767:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a76b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a76f:	e8 66 f3 ff ff       	call   c0009ada <Virt::allocateSwapfilePage()>
c000a774:	8b 0d 0c f9 01 c0    	mov    ecx,DWORD PTR ds:0xc001f90c
c000a77a:	89 c7                	mov    edi,eax
c000a77c:	85 c9                	test   ecx,ecx
c000a77e:	7e 3e                	jle    c000a7be <VAS::evict(unsigned long)+0x62>
c000a780:	89 ee                	mov    esi,ebp
c000a782:	31 db                	xor    ebx,ebx
c000a784:	83 ec 0c             	sub    esp,0xc
c000a787:	57                   	push   edi
c000a788:	e8 3b f3 ff ff       	call   c0009ac8 <Virt::swapIDToSector(unsigned long)>
c000a78d:	89 34 24             	mov    DWORD PTR [esp],esi
c000a790:	01 d8                	add    eax,ebx
c000a792:	6a 01                	push   0x1
c000a794:	31 d2                	xor    edx,edx
c000a796:	43                   	inc    ebx
c000a797:	52                   	push   edx
c000a798:	81 c6 00 02 00 00    	add    esi,0x200
c000a79e:	50                   	push   eax
c000a79f:	0f be 05 18 f9 01 c0 	movsx  eax,BYTE PTR ds:0xc001f918
c000a7a6:	8b 14 85 1c 2e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd1e4]
c000a7ad:	52                   	push   edx
c000a7ae:	e8 8d 2b 00 00       	call   c000d340 <LogicalDisk::write(unsigned long long, int, void*)>
c000a7b3:	83 c4 20             	add    esp,0x20
c000a7b6:	39 1d 0c f9 01 c0    	cmp    DWORD PTR ds:0xc001f90c,ebx
c000a7bc:	7f c6                	jg     c000a784 <VAS::evict(unsigned long)+0x28>
c000a7be:	83 ec 08             	sub    esp,0x8
c000a7c1:	c1 e7 0b             	shl    edi,0xb
c000a7c4:	55                   	push   ebp
c000a7c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a7c9:	50                   	push   eax
c000a7ca:	e8 db f4 ff ff       	call   c0009caa <VAS::getPageTableEntry(unsigned long)>
c000a7cf:	8b 10                	mov    edx,DWORD PTR [eax]
c000a7d1:	89 d1                	mov    ecx,edx
c000a7d3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a7d9:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a7df:	09 cf                	or     edi,ecx
c000a7e1:	89 38                	mov    DWORD PTR [eax],edi
c000a7e3:	89 14 24             	mov    DWORD PTR [esp],edx
c000a7e6:	ff 05 a8 0a 02 c0    	inc    DWORD PTR ds:0xc0020aa8
c000a7ec:	e8 d7 d9 ff ff       	call   c00081c8 <Phys::freePage(unsigned long)>
c000a7f1:	0f 20 d8             	mov    eax,cr3
c000a7f4:	0f 22 d8             	mov    cr3,eax
c000a7f7:	a1 a4 0a 02 c0       	mov    eax,ds:0xc0020aa4
c000a7fc:	c7 44 24 40 8d dc 01 c0 	mov    DWORD PTR [esp+0x40],0xc001dc8d
c000a804:	8d 50 01             	lea    edx,[eax+0x1]
c000a807:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a80b:	89 15 a4 0a 02 c0    	mov    DWORD PTR ds:0xc0020aa4,edx
c000a811:	83 c4 2c             	add    esp,0x2c
c000a814:	5b                   	pop    ebx
c000a815:	5e                   	pop    esi
c000a816:	5f                   	pop    edi
c000a817:	5d                   	pop    ebp
c000a818:	e9 cf 03 00 00       	jmp    c000abec <Dbg::kprintf(char const*, ...)>
c000a81d:	90                   	nop

c000a81e <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a81e:	55                   	push   ebp
c000a81f:	57                   	push   edi
c000a820:	56                   	push   esi
c000a821:	53                   	push   ebx
c000a822:	83 ec 14             	sub    esp,0x14
c000a825:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a829:	53                   	push   ebx
c000a82a:	68 9e dc 01 c0       	push   0xc001dc9e
c000a82f:	e8 b8 03 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000a834:	83 c4 10             	add    esp,0x10
c000a837:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a83d:	74 21                	je     c000a860 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a83f:	83 ec 08             	sub    esp,0x8
c000a842:	53                   	push   ebx
c000a843:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a847:	57                   	push   edi
c000a848:	e8 5d f4 ff ff       	call   c0009caa <VAS::getPageTableEntry(unsigned long)>
c000a84d:	83 c4 10             	add    esp,0x10
c000a850:	89 c6                	mov    esi,eax
c000a852:	85 c0                	test   eax,eax
c000a854:	74 0a                	je     c000a860 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a856:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a858:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a85e:	74 0a                	je     c000a86a <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a860:	31 c0                	xor    eax,eax
c000a862:	83 c4 0c             	add    esp,0xc
c000a865:	5b                   	pop    ebx
c000a866:	5e                   	pop    esi
c000a867:	5f                   	pop    edi
c000a868:	5d                   	pop    ebp
c000a869:	c3                   	ret    
c000a86a:	e8 bb d9 ff ff       	call   c000822a <Phys::allocatePage()>
c000a86f:	c1 ed 0b             	shr    ebp,0xb
c000a872:	8b 16                	mov    edx,DWORD PTR [esi]
c000a874:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a87a:	09 c2                	or     edx,eax
c000a87c:	81 ca 01 08 00 00    	or     edx,0x801
c000a882:	89 16                	mov    DWORD PTR [esi],edx
c000a884:	8b 35 0c f9 01 c0    	mov    esi,DWORD PTR ds:0xc001f90c
c000a88a:	85 f6                	test   esi,esi
c000a88c:	7e 3e                	jle    c000a8cc <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a88e:	89 df                	mov    edi,ebx
c000a890:	31 f6                	xor    esi,esi
c000a892:	83 ec 0c             	sub    esp,0xc
c000a895:	55                   	push   ebp
c000a896:	e8 2d f2 ff ff       	call   c0009ac8 <Virt::swapIDToSector(unsigned long)>
c000a89b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a89e:	01 f0                	add    eax,esi
c000a8a0:	6a 01                	push   0x1
c000a8a2:	31 d2                	xor    edx,edx
c000a8a4:	46                   	inc    esi
c000a8a5:	52                   	push   edx
c000a8a6:	81 c7 00 02 00 00    	add    edi,0x200
c000a8ac:	50                   	push   eax
c000a8ad:	0f be 05 18 f9 01 c0 	movsx  eax,BYTE PTR ds:0xc001f918
c000a8b4:	8b 0c 85 1c 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd1e4]
c000a8bb:	51                   	push   ecx
c000a8bc:	e8 13 2a 00 00       	call   c000d2d4 <LogicalDisk::read(unsigned long long, int, void*)>
c000a8c1:	83 c4 20             	add    esp,0x20
c000a8c4:	39 35 0c f9 01 c0    	cmp    DWORD PTR ds:0xc001f90c,esi
c000a8ca:	7f c6                	jg     c000a892 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a8cc:	a1 a8 0a 02 c0       	mov    eax,ds:0xc0020aa8
c000a8d1:	48                   	dec    eax
c000a8d2:	52                   	push   edx
c000a8d3:	a3 a8 0a 02 c0       	mov    ds:0xc0020aa8,eax
c000a8d8:	50                   	push   eax
c000a8d9:	53                   	push   ebx
c000a8da:	68 b1 dc 01 c0       	push   0xc001dcb1
c000a8df:	e8 08 03 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000a8e4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a8e7:	e8 be f1 ff ff       	call   c0009aaa <Virt::freeSwapfilePage(unsigned long)>
c000a8ec:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000a8f1:	83 c4 10             	add    esp,0x10
c000a8f4:	48                   	dec    eax
c000a8f5:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000a8fa:	85 c0                	test   eax,eax
c000a8fc:	75 01                	jne    c000a8ff <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a8fe:	fb                   	sti    
c000a8ff:	0f 20 d8             	mov    eax,cr3
c000a902:	0f 22 d8             	mov    cr3,eax
c000a905:	b0 01                	mov    al,0x1
c000a907:	e9 56 ff ff ff       	jmp    c000a862 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a90c <VAS::scanForEviction()>:
c000a90c:	57                   	push   edi
c000a90d:	31 ff                	xor    edi,edi
c000a90f:	56                   	push   esi
c000a910:	53                   	push   ebx
c000a911:	83 ec 10             	sub    esp,0x10
c000a914:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a918:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a91b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a921:	75 0e                	jne    c000a931 <VAS::scanForEviction()+0x25>
c000a923:	89 da                	mov    edx,ebx
c000a925:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a928:	c1 ea 16             	shr    edx,0x16
c000a92b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a92f:	74 4e                	je     c000a97f <VAS::scanForEviction()+0x73>
c000a931:	53                   	push   ebx
c000a932:	56                   	push   esi
c000a933:	e8 72 f3 ff ff       	call   c0009caa <VAS::getPageTableEntry(unsigned long)>
c000a938:	5a                   	pop    edx
c000a939:	8b 10                	mov    edx,DWORD PTR [eax]
c000a93b:	59                   	pop    ecx
c000a93c:	89 d1                	mov    ecx,edx
c000a93e:	81 e1 01 08 00 00    	and    ecx,0x801
c000a944:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a94a:	74 3e                	je     c000a98a <VAS::scanForEviction()+0x7e>
c000a94c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a952:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a958:	76 2b                	jbe    c000a985 <VAS::scanForEviction()+0x79>
c000a95a:	47                   	inc    edi
c000a95b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a962:	83 ff 03             	cmp    edi,0x3
c000a965:	74 32                	je     c000a999 <VAS::scanForEviction()+0x8d>
c000a967:	31 db                	xor    ebx,ebx
c000a969:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a96f:	75 c0                	jne    c000a931 <VAS::scanForEviction()+0x25>
c000a971:	89 da                	mov    edx,ebx
c000a973:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a976:	c1 ea 16             	shr    edx,0x16
c000a979:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a97d:	75 b2                	jne    c000a931 <VAS::scanForEviction()+0x25>
c000a97f:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a985:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a988:	eb 91                	jmp    c000a91b <VAS::scanForEviction()+0xf>
c000a98a:	f6 c2 20             	test   dl,0x20
c000a98d:	74 13                	je     c000a9a2 <VAS::scanForEviction()+0x96>
c000a98f:	83 e2 df             	and    edx,0xffffffdf
c000a992:	89 10                	mov    DWORD PTR [eax],edx
c000a994:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a997:	eb b3                	jmp    c000a94c <VAS::scanForEviction()+0x40>
c000a999:	83 c4 10             	add    esp,0x10
c000a99c:	31 c0                	xor    eax,eax
c000a99e:	5b                   	pop    ebx
c000a99f:	5e                   	pop    esi
c000a9a0:	5f                   	pop    edi
c000a9a1:	c3                   	ret    
c000a9a2:	83 ec 08             	sub    esp,0x8
c000a9a5:	89 d0                	mov    eax,edx
c000a9a7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a9ac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a9b0:	53                   	push   ebx
c000a9b1:	68 c6 dc 01 c0       	push   0xc001dcc6
c000a9b6:	e8 31 02 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000a9bb:	58                   	pop    eax
c000a9bc:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a9bf:	5a                   	pop    edx
c000a9c0:	51                   	push   ecx
c000a9c1:	56                   	push   esi
c000a9c2:	e8 95 fd ff ff       	call   c000a75c <VAS::evict(unsigned long)>
c000a9c7:	5b                   	pop    ebx
c000a9c8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a9cb:	5f                   	pop    edi
c000a9cc:	50                   	push   eax
c000a9cd:	68 da dc 01 c0       	push   0xc001dcda
c000a9d2:	e8 15 02 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000a9d7:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a9de:	83 c4 10             	add    esp,0x10
c000a9e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a9e5:	83 c4 10             	add    esp,0x10
c000a9e8:	5b                   	pop    ebx
c000a9e9:	5e                   	pop    esi
c000a9ea:	5f                   	pop    edi
c000a9eb:	c3                   	ret    

c000a9ec <mapVASFirstTime>:
c000a9ec:	55                   	push   ebp
c000a9ed:	57                   	push   edi
c000a9ee:	56                   	push   esi
c000a9ef:	53                   	push   ebx
c000a9f0:	83 ec 0c             	sub    esp,0xc
c000a9f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a9f8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a9fb:	4a                   	dec    edx
c000a9fc:	0f 84 8c 00 00 00    	je     c000aa8e <mapVASFirstTime+0xa2>
c000aa02:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000aa05:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000aa08:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000aa0d:	c1 e5 15             	shl    ebp,0x15
c000aa10:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000aa15:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000aa1b:	29 eb                	sub    ebx,ebp
c000aa1d:	29 ef                	sub    edi,ebp
c000aa1f:	e8 06 d8 ff ff       	call   c000822a <Phys::allocatePage()>
c000aa24:	83 ec 0c             	sub    esp,0xc
c000aa27:	68 03 04 00 00       	push   0x403
c000aa2c:	6a 01                	push   0x1
c000aa2e:	53                   	push   ebx
c000aa2f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000aa35:	50                   	push   eax
c000aa36:	56                   	push   esi
c000aa37:	e8 ec f8 ff ff       	call   c000a328 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000aa3c:	83 c4 20             	add    esp,0x20
c000aa3f:	39 fb                	cmp    ebx,edi
c000aa41:	75 dc                	jne    c000aa1f <mapVASFirstTime+0x33>
c000aa43:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000aa48:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000aa4d:	29 eb                	sub    ebx,ebp
c000aa4f:	29 ef                	sub    edi,ebp
c000aa51:	e8 d4 d7 ff ff       	call   c000822a <Phys::allocatePage()>
c000aa56:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000aa5a:	19 d2                	sbb    edx,edx
c000aa5c:	83 ec 0c             	sub    esp,0xc
c000aa5f:	83 e2 04             	and    edx,0x4
c000aa62:	81 c2 03 04 00 00    	add    edx,0x403
c000aa68:	52                   	push   edx
c000aa69:	6a 01                	push   0x1
c000aa6b:	53                   	push   ebx
c000aa6c:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000aa72:	50                   	push   eax
c000aa73:	56                   	push   esi
c000aa74:	e8 af f8 ff ff       	call   c000a328 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000aa79:	83 c4 20             	add    esp,0x20
c000aa7c:	39 df                	cmp    edi,ebx
c000aa7e:	75 d1                	jne    c000aa51 <mapVASFirstTime+0x65>
c000aa80:	0f 20 d8             	mov    eax,cr3
c000aa83:	0f 22 d8             	mov    cr3,eax
c000aa86:	83 c4 0c             	add    esp,0xc
c000aa89:	5b                   	pop    ebx
c000aa8a:	5e                   	pop    esi
c000aa8b:	5f                   	pop    edi
c000aa8c:	5d                   	pop    ebp
c000aa8d:	c3                   	ret    
c000aa8e:	83 ec 0c             	sub    esp,0xc
c000aa91:	68 ed dc 01 c0       	push   0xc001dced
c000aa96:	e8 51 01 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 c4 0c             	add    esp,0xc
c000aaa1:	5b                   	pop    ebx
c000aaa2:	5e                   	pop    esi
c000aaa3:	5f                   	pop    edi
c000aaa4:	5d                   	pop    ebp
c000aaa5:	c3                   	ret    

c000aaa6 <__cxa_atexit>:
c000aaa6:	31 c0                	xor    eax,eax
c000aaa8:	c3                   	ret    

c000aaa9 <__cxa_finalize>:
c000aaa9:	c3                   	ret    

c000aaaa <__stack_chk_fail>:
c000aaaa:	55                   	push   ebp
c000aaab:	89 e5                	mov    ebp,esp
c000aaad:	83 ec 10             	sub    esp,0x10
c000aab0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aab3:	68 06 dd 01 c0       	push   0xc001dd06
c000aab8:	e8 2f 01 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000aabd:	58                   	pop    eax
c000aabe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000aac1:	5a                   	pop    edx
c000aac2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000aac5:	68 06 dd 01 c0       	push   0xc001dd06
c000aaca:	e8 1d 01 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000aacf:	c7 04 24 0e dd 01 c0 	mov    DWORD PTR [esp],0xc001dd0e
c000aad6:	e8 10 5c 00 00       	call   c00106eb <Krnl::panic(char const*)>
c000aadb:	83 c4 10             	add    esp,0x10
c000aade:	c9                   	leave  
c000aadf:	c3                   	ret    

c000aae0 <__cxa_pure_virtual>:
c000aae0:	83 ec 18             	sub    esp,0x18
c000aae3:	68 26 dd 01 c0       	push   0xc001dd26
c000aae8:	e8 fe 5b 00 00       	call   c00106eb <Krnl::panic(char const*)>
c000aaed:	83 c4 1c             	add    esp,0x1c
c000aaf0:	c3                   	ret    

c000aaf1 <operator new[](unsigned long)>:
c000aaf1:	e9 67 d3 ff ff       	jmp    c0007e5d <malloc>

c000aaf6 <operator delete(void*, unsigned long)>:
c000aaf6:	e9 82 d3 ff ff       	jmp    c0007e7d <rfree>

c000aafb <operator delete[](void*)>:
c000aafb:	e9 7d d3 ff ff       	jmp    c0007e7d <rfree>

c000ab00 <operator delete[](void*, unsigned long)>:
c000ab00:	e9 78 d3 ff ff       	jmp    c0007e7d <rfree>

c000ab05 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000ab05:	55                   	push   ebp
c000ab06:	b9 04 00 00 00       	mov    ecx,0x4
c000ab0b:	57                   	push   edi
c000ab0c:	56                   	push   esi
c000ab0d:	be 3b d9 01 c0       	mov    esi,0xc001d93b
c000ab12:	53                   	push   ebx
c000ab13:	83 ec 20             	sub    esp,0x20
c000ab16:	a1 3a d9 01 c0       	mov    eax,ds:0xc001d93a
c000ab1b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ab1f:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000ab23:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ab27:	a1 47 d9 01 c0       	mov    eax,ds:0xc001d947
c000ab2c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000ab30:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab34:	fc                   	cld    
c000ab35:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ab37:	89 ee                	mov    esi,ebp
c000ab39:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ab3d:	eb 02                	jmp    c000ab41 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000ab3f:	89 c6                	mov    esi,eax
c000ab41:	31 d2                	xor    edx,edx
c000ab43:	41                   	inc    ecx
c000ab44:	89 f0                	mov    eax,esi
c000ab46:	f7 f3                	div    ebx
c000ab48:	39 de                	cmp    esi,ebx
c000ab4a:	73 f3                	jae    c000ab3f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000ab4c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ab4f:	eb 02                	jmp    c000ab53 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000ab51:	89 c5                	mov    ebp,eax
c000ab53:	31 d2                	xor    edx,edx
c000ab55:	49                   	dec    ecx
c000ab56:	89 e8                	mov    eax,ebp
c000ab58:	f7 f3                	div    ebx
c000ab5a:	39 dd                	cmp    ebp,ebx
c000ab5c:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000ab60:	88 11                	mov    BYTE PTR [ecx],dl
c000ab62:	73 ed                	jae    c000ab51 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000ab64:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ab68:	83 c4 20             	add    esp,0x20
c000ab6b:	5b                   	pop    ebx
c000ab6c:	5e                   	pop    esi
c000ab6d:	5f                   	pop    edi
c000ab6e:	5d                   	pop    ebp
c000ab6f:	c3                   	ret    

c000ab70 <Dbg::logc(char)>:
c000ab70:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ab74:	f6 05 d0 09 02 c0 10 	test   BYTE PTR ds:0xc00209d0,0x10
c000ab7b:	75 12                	jne    c000ab8f <Dbg::logc(char)+0x1f>
c000ab7d:	ba fd 03 00 00       	mov    edx,0x3fd
c000ab82:	ec                   	in     al,dx
c000ab83:	a8 20                	test   al,0x20
c000ab85:	74 fb                	je     c000ab82 <Dbg::logc(char)+0x12>
c000ab87:	ba f8 03 00 00       	mov    edx,0x3f8
c000ab8c:	88 c8                	mov    al,cl
c000ab8e:	ee                   	out    dx,al
c000ab8f:	c3                   	ret    

c000ab90 <Dbg::logs(char*)>:
c000ab90:	53                   	push   ebx
c000ab91:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ab95:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ab98:	84 c0                	test   al,al
c000ab9a:	74 0f                	je     c000abab <Dbg::logs(char*)+0x1b>
c000ab9c:	50                   	push   eax
c000ab9d:	43                   	inc    ebx
c000ab9e:	e8 cd ff ff ff       	call   c000ab70 <Dbg::logc(char)>
c000aba3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000aba6:	5a                   	pop    edx
c000aba7:	84 c0                	test   al,al
c000aba9:	75 f1                	jne    c000ab9c <Dbg::logs(char*)+0xc>
c000abab:	5b                   	pop    ebx
c000abac:	c3                   	ret    

c000abad <Dbg::logWriteInt(unsigned int)>:
c000abad:	83 ec 10             	sub    esp,0x10
c000abb0:	6a 0a                	push   0xa
c000abb2:	8d 44 24 08          	lea    eax,[esp+0x8]
c000abb6:	50                   	push   eax
c000abb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000abbb:	50                   	push   eax
c000abbc:	e8 44 ff ff ff       	call   c000ab05 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000abc1:	50                   	push   eax
c000abc2:	e8 c9 ff ff ff       	call   c000ab90 <Dbg::logs(char*)>
c000abc7:	83 c4 20             	add    esp,0x20
c000abca:	c3                   	ret    

c000abcb <Dbg::logWriteIntBase(unsigned int, int)>:
c000abcb:	83 ec 10             	sub    esp,0x10
c000abce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000abd2:	50                   	push   eax
c000abd3:	8d 44 24 08          	lea    eax,[esp+0x8]
c000abd7:	50                   	push   eax
c000abd8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000abdc:	52                   	push   edx
c000abdd:	e8 23 ff ff ff       	call   c000ab05 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000abe2:	50                   	push   eax
c000abe3:	e8 a8 ff ff ff       	call   c000ab90 <Dbg::logs(char*)>
c000abe8:	83 c4 20             	add    esp,0x20
c000abeb:	c3                   	ret    

c000abec <Dbg::kprintf(char const*, ...)>:
c000abec:	55                   	push   ebp
c000abed:	57                   	push   edi
c000abee:	56                   	push   esi
c000abef:	53                   	push   ebx
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000abf7:	f6 05 d0 09 02 c0 10 	test   BYTE PTR ds:0xc00209d0,0x10
c000abfe:	74 08                	je     c000ac08 <Dbg::kprintf(char const*, ...)+0x1c>
c000ac00:	83 c4 0c             	add    esp,0xc
c000ac03:	5b                   	pop    ebx
c000ac04:	5e                   	pop    esi
c000ac05:	5f                   	pop    edi
c000ac06:	5d                   	pop    ebp
c000ac07:	c3                   	ret    
c000ac08:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ac0c:	31 ff                	xor    edi,edi
c000ac0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ac12:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ac15:	84 c0                	test   al,al
c000ac17:	74 e7                	je     c000ac00 <Dbg::kprintf(char const*, ...)+0x14>
c000ac19:	8d 77 01             	lea    esi,[edi+0x1]
c000ac1c:	3c 25                	cmp    al,0x25
c000ac1e:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000ac21:	75 47                	jne    c000ac6a <Dbg::kprintf(char const*, ...)+0x7e>
c000ac23:	83 c7 02             	add    edi,0x2
c000ac26:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ac29:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000ac2c:	83 e8 25             	sub    eax,0x25
c000ac2f:	3c 53                	cmp    al,0x53
c000ac31:	0f 87 d2 00 00 00    	ja     c000ad09 <Dbg::kprintf(char const*, ...)+0x11d>
c000ac37:	25 ff 00 00 00       	and    eax,0xff
c000ac3c:	ff 24 85 3c dd 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe22c4]
c000ac43:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ac47:	89 c8                	mov    eax,ecx
c000ac49:	83 c1 04             	add    ecx,0x4
c000ac4c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ac50:	8b 28                	mov    ebp,DWORD PTR [eax]
c000ac52:	55                   	push   ebp
c000ac53:	e8 55 ff ff ff       	call   c000abad <Dbg::logWriteInt(unsigned int)>
c000ac58:	58                   	pop    eax
c000ac59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ac5c:	84 c0                	test   al,al
c000ac5e:	74 a0                	je     c000ac00 <Dbg::kprintf(char const*, ...)+0x14>
c000ac60:	8d 77 01             	lea    esi,[edi+0x1]
c000ac63:	3c 25                	cmp    al,0x25
c000ac65:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000ac68:	74 b9                	je     c000ac23 <Dbg::kprintf(char const*, ...)+0x37>
c000ac6a:	50                   	push   eax
c000ac6b:	89 f7                	mov    edi,esi
c000ac6d:	e8 fe fe ff ff       	call   c000ab70 <Dbg::logc(char)>
c000ac72:	89 ee                	mov    esi,ebp
c000ac74:	58                   	pop    eax
c000ac75:	eb e2                	jmp    c000ac59 <Dbg::kprintf(char const*, ...)+0x6d>
c000ac77:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ac7b:	89 c8                	mov    eax,ecx
c000ac7d:	83 c1 04             	add    ecx,0x4
c000ac80:	8b 00                	mov    eax,DWORD PTR [eax]
c000ac82:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ac86:	50                   	push   eax
c000ac87:	e8 04 ff ff ff       	call   c000ab90 <Dbg::logs(char*)>
c000ac8c:	58                   	pop    eax
c000ac8d:	eb ca                	jmp    c000ac59 <Dbg::kprintf(char const*, ...)+0x6d>
c000ac8f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ac93:	89 d0                	mov    eax,edx
c000ac95:	83 c2 04             	add    edx,0x4
c000ac98:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac9c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ac9e:	50                   	push   eax
c000ac9f:	e8 09 ff ff ff       	call   c000abad <Dbg::logWriteInt(unsigned int)>
c000aca4:	58                   	pop    eax
c000aca5:	eb b2                	jmp    c000ac59 <Dbg::kprintf(char const*, ...)+0x6d>
c000aca7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000acab:	89 d0                	mov    eax,edx
c000acad:	83 c2 04             	add    edx,0x4
c000acb0:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000acb3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acb7:	50                   	push   eax
c000acb8:	e8 b3 fe ff ff       	call   c000ab70 <Dbg::logc(char)>
c000acbd:	58                   	pop    eax
c000acbe:	eb 99                	jmp    c000ac59 <Dbg::kprintf(char const*, ...)+0x6d>
c000acc0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000acc4:	89 c8                	mov    eax,ecx
c000acc6:	83 c1 04             	add    ecx,0x4
c000acc9:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000accd:	6a 10                	push   0x10
c000accf:	8b 08                	mov    ecx,DWORD PTR [eax]
c000acd1:	51                   	push   ecx
c000acd2:	e8 f4 fe ff ff       	call   c000abcb <Dbg::logWriteIntBase(unsigned int, int)>
c000acd7:	5d                   	pop    ebp
c000acd8:	58                   	pop    eax
c000acd9:	e9 7b ff ff ff       	jmp    c000ac59 <Dbg::kprintf(char const*, ...)+0x6d>
c000acde:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ace2:	89 d0                	mov    eax,edx
c000ace4:	83 c2 08             	add    edx,0x8
c000ace7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aceb:	6a 10                	push   0x10
c000aced:	8b 00                	mov    eax,DWORD PTR [eax]
c000acef:	50                   	push   eax
c000acf0:	e8 d6 fe ff ff       	call   c000abcb <Dbg::logWriteIntBase(unsigned int, int)>
c000acf5:	58                   	pop    eax
c000acf6:	5a                   	pop    edx
c000acf7:	e9 5d ff ff ff       	jmp    c000ac59 <Dbg::kprintf(char const*, ...)+0x6d>
c000acfc:	6a 25                	push   0x25
c000acfe:	e8 6d fe ff ff       	call   c000ab70 <Dbg::logc(char)>
c000ad03:	5a                   	pop    edx
c000ad04:	e9 50 ff ff ff       	jmp    c000ac59 <Dbg::kprintf(char const*, ...)+0x6d>
c000ad09:	6a 25                	push   0x25
c000ad0b:	e8 60 fe ff ff       	call   c000ab70 <Dbg::logc(char)>
c000ad10:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000ad14:	50                   	push   eax
c000ad15:	e8 56 fe ff ff       	call   c000ab70 <Dbg::logc(char)>
c000ad1a:	5a                   	pop    edx
c000ad1b:	59                   	pop    ecx
c000ad1c:	e9 38 ff ff ff       	jmp    c000ac59 <Dbg::kprintf(char const*, ...)+0x6d>
c000ad21:	90                   	nop

c000ad22 <File::read(unsigned long long, void*, int*)>:
c000ad22:	53                   	push   ebx
c000ad23:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad27:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad2b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad32:	3c 19                	cmp    al,0x19
c000ad34:	77 35                	ja     c000ad6b <File::read(unsigned long long, void*, int*)+0x49>
c000ad36:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c000ad3d:	85 c0                	test   eax,eax
c000ad3f:	74 2a                	je     c000ad6b <File::read(unsigned long long, void*, int*)+0x49>
c000ad41:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ad47:	85 c0                	test   eax,eax
c000ad49:	74 20                	je     c000ad6b <File::read(unsigned long long, void*, int*)+0x49>
c000ad4b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad4f:	74 21                	je     c000ad72 <File::read(unsigned long long, void*, int*)+0x50>
c000ad51:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ad53:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ad57:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ad5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad61:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad65:	5b                   	pop    ebx
c000ad66:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ad69:	ff e0                	jmp    eax
c000ad6b:	b8 0b 00 00 00       	mov    eax,0xb
c000ad70:	eb 05                	jmp    c000ad77 <File::read(unsigned long long, void*, int*)+0x55>
c000ad72:	b8 05 00 00 00       	mov    eax,0x5
c000ad77:	5b                   	pop    ebx
c000ad78:	c3                   	ret    
c000ad79:	90                   	nop

c000ad7a <File::write(unsigned long long, void*, int*)>:
c000ad7a:	53                   	push   ebx
c000ad7b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad7f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad83:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad8a:	3c 19                	cmp    al,0x19
c000ad8c:	77 35                	ja     c000adc3 <File::write(unsigned long long, void*, int*)+0x49>
c000ad8e:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c000ad95:	85 c0                	test   eax,eax
c000ad97:	74 2a                	je     c000adc3 <File::write(unsigned long long, void*, int*)+0x49>
c000ad99:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ad9f:	85 c0                	test   eax,eax
c000ada1:	74 20                	je     c000adc3 <File::write(unsigned long long, void*, int*)+0x49>
c000ada3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ada7:	74 21                	je     c000adca <File::write(unsigned long long, void*, int*)+0x50>
c000ada9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000adab:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000adaf:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000adb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adb9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adbd:	5b                   	pop    ebx
c000adbe:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000adc1:	ff e0                	jmp    eax
c000adc3:	b8 0b 00 00 00       	mov    eax,0xb
c000adc8:	eb 05                	jmp    c000adcf <File::write(unsigned long long, void*, int*)+0x55>
c000adca:	b8 05 00 00 00       	mov    eax,0x5
c000adcf:	5b                   	pop    ebx
c000add0:	c3                   	ret    
c000add1:	90                   	nop

c000add2 <Directory::read(unsigned long long, void*, int*)>:
c000add2:	53                   	push   ebx
c000add3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000add7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000addb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ade2:	3c 19                	cmp    al,0x19
c000ade4:	77 35                	ja     c000ae1b <Directory::read(unsigned long long, void*, int*)+0x49>
c000ade6:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c000aded:	85 c0                	test   eax,eax
c000adef:	74 2a                	je     c000ae1b <Directory::read(unsigned long long, void*, int*)+0x49>
c000adf1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000adf7:	85 c0                	test   eax,eax
c000adf9:	74 20                	je     c000ae1b <Directory::read(unsigned long long, void*, int*)+0x49>
c000adfb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adff:	74 21                	je     c000ae22 <Directory::read(unsigned long long, void*, int*)+0x50>
c000ae01:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ae03:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ae07:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ae0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae11:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae15:	5b                   	pop    ebx
c000ae16:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ae19:	ff e0                	jmp    eax
c000ae1b:	b8 0b 00 00 00       	mov    eax,0xb
c000ae20:	eb 05                	jmp    c000ae27 <Directory::read(unsigned long long, void*, int*)+0x55>
c000ae22:	b8 05 00 00 00       	mov    eax,0x5
c000ae27:	5b                   	pop    ebx
c000ae28:	c3                   	ret    
c000ae29:	90                   	nop

c000ae2a <Directory::write(unsigned long long, void*, int*)>:
c000ae2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae2e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ae35:	b8 0b 00 00 00       	mov    eax,0xb
c000ae3a:	80 fa 19             	cmp    dl,0x19
c000ae3d:	77 18                	ja     c000ae57 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae3f:	8b 14 95 20 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0e0]
c000ae46:	85 d2                	test   edx,edx
c000ae48:	74 0d                	je     c000ae57 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae4a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000ae51:	19 c0                	sbb    eax,eax
c000ae53:	83 e0 0a             	and    eax,0xa
c000ae56:	40                   	inc    eax
c000ae57:	c3                   	ret    

c000ae58 <File::isAtty()>:
c000ae58:	31 c0                	xor    eax,eax
c000ae5a:	c3                   	ret    
c000ae5b:	90                   	nop

c000ae5c <Directory::isAtty()>:
c000ae5c:	31 c0                	xor    eax,eax
c000ae5e:	c3                   	ret    
c000ae5f:	90                   	nop

c000ae60 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ae60:	b8 0a 00 00 00       	mov    eax,0xa
c000ae65:	c3                   	ret    

c000ae66 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ae66:	b8 0a 00 00 00       	mov    eax,0xa
c000ae6b:	c3                   	ret    

c000ae6c <Filesystem::allocateSwapfile(char const*, int)>:
c000ae6c:	31 c0                	xor    eax,eax
c000ae6e:	31 d2                	xor    edx,edx
c000ae70:	c3                   	ret    
c000ae71:	90                   	nop

c000ae72 <File::~File()>:
c000ae72:	83 ec 0c             	sub    esp,0xc
c000ae75:	ba fc de 01 c0       	mov    edx,0xc001defc
c000ae7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7e:	89 10                	mov    DWORD PTR [eax],edx
c000ae80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae84:	83 ec 0c             	sub    esp,0xc
c000ae87:	50                   	push   eax
c000ae88:	e8 ab e8 ff ff       	call   c0009738 <UnixFile::~UnixFile()>
c000ae8d:	83 c4 10             	add    esp,0x10
c000ae90:	90                   	nop
c000ae91:	83 c4 0c             	add    esp,0xc
c000ae94:	c3                   	ret    
c000ae95:	90                   	nop

c000ae96 <File::~File()>:
c000ae96:	83 ec 0c             	sub    esp,0xc
c000ae99:	83 ec 0c             	sub    esp,0xc
c000ae9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aea0:	e8 cd ff ff ff       	call   c000ae72 <File::~File()>
c000aea5:	83 c4 10             	add    esp,0x10
c000aea8:	83 ec 08             	sub    esp,0x8
c000aeab:	68 14 01 00 00       	push   0x114
c000aeb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeb4:	e8 3d fc ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000aeb9:	83 c4 10             	add    esp,0x10
c000aebc:	83 c4 0c             	add    esp,0xc
c000aebf:	c3                   	ret    

c000aec0 <Directory::~Directory()>:
c000aec0:	83 ec 0c             	sub    esp,0xc
c000aec3:	ba 18 df 01 c0       	mov    edx,0xc001df18
c000aec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecc:	89 10                	mov    DWORD PTR [eax],edx
c000aece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed2:	83 ec 0c             	sub    esp,0xc
c000aed5:	50                   	push   eax
c000aed6:	e8 5d e8 ff ff       	call   c0009738 <UnixFile::~UnixFile()>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	90                   	nop
c000aedf:	83 c4 0c             	add    esp,0xc
c000aee2:	c3                   	ret    
c000aee3:	90                   	nop

c000aee4 <Directory::~Directory()>:
c000aee4:	83 ec 0c             	sub    esp,0xc
c000aee7:	83 ec 0c             	sub    esp,0xc
c000aeea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeee:	e8 cd ff ff ff       	call   c000aec0 <Directory::~Directory()>
c000aef3:	83 c4 10             	add    esp,0x10
c000aef6:	83 ec 08             	sub    esp,0x8
c000aef9:	68 14 01 00 00       	push   0x114
c000aefe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af02:	e8 ef fb ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000af07:	83 c4 10             	add    esp,0x10
c000af0a:	83 c4 0c             	add    esp,0xc
c000af0d:	c3                   	ret    

c000af0e <Filesystem::Filesystem()>:
c000af0e:	ba 94 de 01 c0       	mov    edx,0xc001de94
c000af13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af17:	89 10                	mov    DWORD PTR [eax],edx
c000af19:	8b 15 b4 0a 02 c0    	mov    edx,DWORD PTR ds:0xc0020ab4
c000af1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af23:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000af26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af2a:	a3 b4 0a 02 c0       	mov    ds:0xc0020ab4,eax
c000af2f:	90                   	nop
c000af30:	c3                   	ret    
c000af31:	90                   	nop

c000af32 <Filesystem::~Filesystem()>:
c000af32:	ba 94 de 01 c0       	mov    edx,0xc001de94
c000af37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af3b:	89 10                	mov    DWORD PTR [eax],edx
c000af3d:	90                   	nop
c000af3e:	c3                   	ret    
c000af3f:	90                   	nop

c000af40 <Filesystem::~Filesystem()>:
c000af40:	83 ec 0c             	sub    esp,0xc
c000af43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000af47:	e8 e6 ff ff ff       	call   c000af32 <Filesystem::~Filesystem()>
c000af4c:	83 c4 04             	add    esp,0x4
c000af4f:	83 ec 08             	sub    esp,0x8
c000af52:	6a 08                	push   0x8
c000af54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af58:	e8 99 fb ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000af5d:	83 c4 10             	add    esp,0x10
c000af60:	83 c4 0c             	add    esp,0xc
c000af63:	c3                   	ret    

c000af64 <Fs::getcwd(Process*, char*, int)>:
c000af64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000af68:	31 c0                	xor    eax,eax
c000af6a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000af6d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af71:	7d 15                	jge    c000af88 <Fs::getcwd(Process*, char*, int)+0x24>
c000af73:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000af77:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000af7e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000af81:	84 c9                	test   cl,cl
c000af83:	74 06                	je     c000af8b <Fs::getcwd(Process*, char*, int)+0x27>
c000af85:	40                   	inc    eax
c000af86:	eb e2                	jmp    c000af6a <Fs::getcwd(Process*, char*, int)+0x6>
c000af88:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000af8b:	31 c0                	xor    eax,eax
c000af8d:	c3                   	ret    

c000af8e <Fs::initVFS()>:
c000af8e:	83 ec 18             	sub    esp,0x18
c000af91:	6a 08                	push   0x8
c000af93:	e8 c5 ce ff ff       	call   c0007e5d <malloc>
c000af98:	89 04 24             	mov    DWORD PTR [esp],eax
c000af9b:	e8 c8 c2 00 00       	call   c0017268 <FAT::FAT()>
c000afa0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000afa7:	e8 b1 ce ff ff       	call   c0007e5d <malloc>
c000afac:	89 04 24             	mov    DWORD PTR [esp],eax
c000afaf:	e8 ac cf 00 00       	call   c0017f60 <ISO9660::ISO9660()>
c000afb4:	83 c4 1c             	add    esp,0x1c
c000afb7:	c3                   	ret    

c000afb8 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000afb8:	55                   	push   ebp
c000afb9:	57                   	push   edi
c000afba:	56                   	push   esi
c000afbb:	53                   	push   ebx
c000afbc:	81 ec 10 04 00 00    	sub    esp,0x410
c000afc2:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000afc9:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000afd0:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000afd7:	68 00 04 00 00       	push   0x400
c000afdc:	6a 00                	push   0x0
c000afde:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000afe2:	56                   	push   esi
c000afe3:	e8 08 55 ff ff       	call   c00004f0 <memset>
c000afe8:	83 c4 10             	add    esp,0x10
c000afeb:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000afef:	75 0b                	jne    c000affc <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000aff1:	50                   	push   eax
c000aff2:	50                   	push   eax
c000aff3:	57                   	push   edi
c000aff4:	56                   	push   esi
c000aff5:	e8 26 56 ff ff       	call   c0000620 <strcpy>
c000affa:	eb 41                	jmp    c000b03d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000affc:	8a 07                	mov    al,BYTE PTR [edi]
c000affe:	3c 5c                	cmp    al,0x5c
c000b000:	74 04                	je     c000b006 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000b002:	3c 2f                	cmp    al,0x2f
c000b004:	75 18                	jne    c000b01e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000b006:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b009:	3c 60                	cmp    al,0x60
c000b00b:	7e 03                	jle    c000b010 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000b00d:	83 e8 20             	sub    eax,0x20
c000b010:	88 04 24             	mov    BYTE PTR [esp],al
c000b013:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b01a:	50                   	push   eax
c000b01b:	50                   	push   eax
c000b01c:	eb 18                	jmp    c000b036 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000b01e:	50                   	push   eax
c000b01f:	50                   	push   eax
c000b020:	55                   	push   ebp
c000b021:	56                   	push   esi
c000b022:	e8 f9 55 ff ff       	call   c0000620 <strcpy>
c000b027:	5a                   	pop    edx
c000b028:	59                   	pop    ecx
c000b029:	68 3f eb 01 c0       	push   0xc001eb3f
c000b02e:	56                   	push   esi
c000b02f:	e8 ac 57 ff ff       	call   c00007e0 <strcat>
c000b034:	5d                   	pop    ebp
c000b035:	58                   	pop    eax
c000b036:	57                   	push   edi
c000b037:	56                   	push   esi
c000b038:	e8 a3 57 ff ff       	call   c00007e0 <strcat>
c000b03d:	83 c4 10             	add    esp,0x10
c000b040:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b043:	3c 60                	cmp    al,0x60
c000b045:	7e 03                	jle    c000b04a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000b047:	83 e8 20             	sub    eax,0x20
c000b04a:	88 04 24             	mov    BYTE PTR [esp],al
c000b04d:	88 03                	mov    BYTE PTR [ebx],al
c000b04f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b056:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b05c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b060:	bf 03 00 00 00       	mov    edi,0x3
c000b065:	b8 03 00 00 00       	mov    eax,0x3
c000b06a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000b06d:	84 d2                	test   dl,dl
c000b06f:	0f 84 91 00 00 00    	je     c000b106 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000b075:	8d 4f 01             	lea    ecx,[edi+0x1]
c000b078:	80 fa 5c             	cmp    dl,0x5c
c000b07b:	74 05                	je     c000b082 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000b07d:	80 fa 2f             	cmp    dl,0x2f
c000b080:	75 12                	jne    c000b094 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000b082:	89 c5                	mov    ebp,eax
c000b084:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b089:	74 09                	je     c000b094 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000b08b:	40                   	inc    eax
c000b08c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b090:	89 cf                	mov    edi,ecx
c000b092:	eb d6                	jmp    c000b06a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000b094:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b099:	75 5b                	jne    c000b0f6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000b09b:	80 fa 2e             	cmp    dl,0x2e
c000b09e:	75 56                	jne    c000b0f6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000b0a0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000b0a4:	74 19                	je     c000b0bf <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000b0a6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000b0ab:	74 53                	je     c000b100 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000b0ad:	89 f9                	mov    ecx,edi
c000b0af:	41                   	inc    ecx
c000b0b0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000b0b3:	80 fa 2f             	cmp    dl,0x2f
c000b0b6:	74 f7                	je     c000b0af <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000b0b8:	80 fa 5c             	cmp    dl,0x5c
c000b0bb:	74 f2                	je     c000b0af <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000b0bd:	eb d1                	jmp    c000b090 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0bf:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000b0c4:	74 3a                	je     c000b100 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000b0c6:	83 f8 03             	cmp    eax,0x3
c000b0c9:	74 c5                	je     c000b090 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0cb:	41                   	inc    ecx
c000b0cc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000b0cf:	80 fa 2f             	cmp    dl,0x2f
c000b0d2:	74 f7                	je     c000b0cb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000b0d4:	80 fa 5c             	cmp    dl,0x5c
c000b0d7:	74 f2                	je     c000b0cb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000b0d9:	48                   	dec    eax
c000b0da:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b0de:	75 06                	jne    c000b0e6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000b0e0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b0e4:	eb f3                	jmp    c000b0d9 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000b0e6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b0ea:	74 07                	je     c000b0f3 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b0ec:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b0f0:	48                   	dec    eax
c000b0f1:	eb f3                	jmp    c000b0e6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000b0f3:	40                   	inc    eax
c000b0f4:	eb 9a                	jmp    c000b090 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0f6:	80 fa 2f             	cmp    dl,0x2f
c000b0f9:	74 95                	je     c000b090 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0fb:	80 fa 5c             	cmp    dl,0x5c
c000b0fe:	74 90                	je     c000b090 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b100:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000b103:	40                   	inc    eax
c000b104:	eb 8a                	jmp    c000b090 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b106:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b10a:	83 ec 0c             	sub    esp,0xc
c000b10d:	53                   	push   ebx
c000b10e:	e8 4d 54 ff ff       	call   c0000560 <strlen>
c000b113:	83 c4 10             	add    esp,0x10
c000b116:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b11b:	75 26                	jne    c000b143 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000b11d:	83 ec 0c             	sub    esp,0xc
c000b120:	53                   	push   ebx
c000b121:	e8 3a 54 ff ff       	call   c0000560 <strlen>
c000b126:	83 c4 10             	add    esp,0x10
c000b129:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b12e:	74 26                	je     c000b156 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000b130:	83 ec 0c             	sub    esp,0xc
c000b133:	53                   	push   ebx
c000b134:	e8 27 54 ff ff       	call   c0000560 <strlen>
c000b139:	83 c4 10             	add    esp,0x10
c000b13c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b141:	eb c7                	jmp    c000b10a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000b143:	83 ec 0c             	sub    esp,0xc
c000b146:	53                   	push   ebx
c000b147:	e8 14 54 ff ff       	call   c0000560 <strlen>
c000b14c:	83 c4 10             	add    esp,0x10
c000b14f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b154:	74 c7                	je     c000b11d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000b156:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b15c:	5b                   	pop    ebx
c000b15d:	5e                   	pop    esi
c000b15e:	5f                   	pop    edi
c000b15f:	5d                   	pop    ebp
c000b160:	c3                   	ret    
c000b161:	90                   	nop

c000b162 <File::File(char const*, Process*)>:
c000b162:	83 ec 0c             	sub    esp,0xc
c000b165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b169:	83 ec 08             	sub    esp,0x8
c000b16c:	6a 00                	push   0x0
c000b16e:	50                   	push   eax
c000b16f:	e8 e2 e3 ff ff       	call   c0009556 <UnixFile::UnixFile(int)>
c000b174:	83 c4 10             	add    esp,0x10
c000b177:	ba fc de 01 c0       	mov    edx,0xc001defc
c000b17c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b180:	89 10                	mov    DWORD PTR [eax],edx
c000b182:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b186:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b18c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b190:	83 c0 0d             	add    eax,0xd
c000b193:	83 ec 04             	sub    esp,0x4
c000b196:	52                   	push   edx
c000b197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b19b:	50                   	push   eax
c000b19c:	e8 17 fe ff ff       	call   c000afb8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b1a1:	83 c4 10             	add    esp,0x10
c000b1a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1a8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b1ab:	8d 50 bf             	lea    edx,[eax-0x41]
c000b1ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1b2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b1b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1bc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b1c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1c4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1ca:	25 ff 00 00 00       	and    eax,0xff
c000b1cf:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c000b1d6:	85 c0                	test   eax,eax
c000b1d8:	74 42                	je     c000b21c <File::File(char const*, Process*)+0xba>
c000b1da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1de:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1e4:	25 ff 00 00 00       	and    eax,0xff
c000b1e9:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c000b1f0:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b1f6:	85 c0                	test   eax,eax
c000b1f8:	75 22                	jne    c000b21c <File::File(char const*, Process*)+0xba>
c000b1fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1fe:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b204:	25 ff 00 00 00       	and    eax,0xff
c000b209:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c000b210:	83 ec 0c             	sub    esp,0xc
c000b213:	50                   	push   eax
c000b214:	e8 f9 1f 00 00       	call   c000d212 <LogicalDisk::mount()>
c000b219:	83 c4 10             	add    esp,0x10
c000b21c:	90                   	nop
c000b21d:	83 c4 0c             	add    esp,0xc
c000b220:	c3                   	ret    
c000b221:	90                   	nop

c000b222 <File::open(FileOpenMode)>:
c000b222:	53                   	push   ebx
c000b223:	b8 0b 00 00 00       	mov    eax,0xb
c000b228:	83 ec 08             	sub    esp,0x8
c000b22b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b22f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b236:	80 fa 19             	cmp    dl,0x19
c000b239:	77 40                	ja     c000b27b <File::open(FileOpenMode)+0x59>
c000b23b:	8b 14 95 20 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0e0]
c000b242:	85 d2                	test   edx,edx
c000b244:	74 35                	je     c000b27b <File::open(FileOpenMode)+0x59>
c000b246:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b24c:	85 d2                	test   edx,edx
c000b24e:	74 2b                	je     c000b27b <File::open(FileOpenMode)+0x59>
c000b250:	b8 06 00 00 00       	mov    eax,0x6
c000b255:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b259:	75 20                	jne    c000b27b <File::open(FileOpenMode)+0x59>
c000b25b:	8b 02                	mov    eax,DWORD PTR [edx]
c000b25d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b263:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b267:	51                   	push   ecx
c000b268:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b26b:	51                   	push   ecx
c000b26c:	52                   	push   edx
c000b26d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b270:	83 c4 10             	add    esp,0x10
c000b273:	85 c0                	test   eax,eax
c000b275:	75 04                	jne    c000b27b <File::open(FileOpenMode)+0x59>
c000b277:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b27b:	83 c4 08             	add    esp,0x8
c000b27e:	5b                   	pop    ebx
c000b27f:	c3                   	ret    

c000b280 <File::close()>:
c000b280:	53                   	push   ebx
c000b281:	b8 0b 00 00 00       	mov    eax,0xb
c000b286:	83 ec 08             	sub    esp,0x8
c000b289:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b28d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b294:	80 fa 19             	cmp    dl,0x19
c000b297:	77 41                	ja     c000b2da <File::close()+0x5a>
c000b299:	8b 1c 95 20 2f 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd0e0]
c000b2a0:	85 db                	test   ebx,ebx
c000b2a2:	74 36                	je     c000b2da <File::close()+0x5a>
c000b2a4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b2ab:	74 2d                	je     c000b2da <File::close()+0x5a>
c000b2ad:	b8 05 00 00 00       	mov    eax,0x5
c000b2b2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b2b6:	74 22                	je     c000b2da <File::close()+0x5a>
c000b2b8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b2bc:	8b 04 95 20 2f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd0e0]
c000b2c3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b2c9:	53                   	push   ebx
c000b2ca:	53                   	push   ebx
c000b2cb:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2cd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b2d3:	50                   	push   eax
c000b2d4:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000b2d7:	83 c4 10             	add    esp,0x10
c000b2da:	83 c4 08             	add    esp,0x8
c000b2dd:	5b                   	pop    ebx
c000b2de:	c3                   	ret    
c000b2df:	90                   	nop

c000b2e0 <File::seek(unsigned long long)>:
c000b2e0:	56                   	push   esi
c000b2e1:	53                   	push   ebx
c000b2e2:	b8 0b 00 00 00       	mov    eax,0xb
c000b2e7:	51                   	push   ecx
c000b2e8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b2ec:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b2f0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b2f7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b2fb:	80 fa 19             	cmp    dl,0x19
c000b2fe:	77 31                	ja     c000b331 <File::seek(unsigned long long)+0x51>
c000b300:	8b 14 95 20 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0e0]
c000b307:	85 d2                	test   edx,edx
c000b309:	74 26                	je     c000b331 <File::seek(unsigned long long)+0x51>
c000b30b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b311:	85 d2                	test   edx,edx
c000b313:	74 1c                	je     c000b331 <File::seek(unsigned long long)+0x51>
c000b315:	b8 05 00 00 00       	mov    eax,0x5
c000b31a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b31e:	74 11                	je     c000b331 <File::seek(unsigned long long)+0x51>
c000b320:	8b 02                	mov    eax,DWORD PTR [edx]
c000b322:	53                   	push   ebx
c000b323:	51                   	push   ecx
c000b324:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b32a:	52                   	push   edx
c000b32b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b32e:	83 c4 10             	add    esp,0x10
c000b331:	5a                   	pop    edx
c000b332:	5b                   	pop    ebx
c000b333:	5e                   	pop    esi
c000b334:	c3                   	ret    
c000b335:	90                   	nop

c000b336 <File::tell(unsigned long long*)>:
c000b336:	83 ec 0c             	sub    esp,0xc
c000b339:	b8 0b 00 00 00       	mov    eax,0xb
c000b33e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b342:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b349:	80 fa 19             	cmp    dl,0x19
c000b34c:	77 34                	ja     c000b382 <File::tell(unsigned long long*)+0x4c>
c000b34e:	8b 14 95 20 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0e0]
c000b355:	85 d2                	test   edx,edx
c000b357:	74 29                	je     c000b382 <File::tell(unsigned long long*)+0x4c>
c000b359:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b35f:	85 d2                	test   edx,edx
c000b361:	74 1f                	je     c000b382 <File::tell(unsigned long long*)+0x4c>
c000b363:	b8 05 00 00 00       	mov    eax,0x5
c000b368:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b36c:	74 14                	je     c000b382 <File::tell(unsigned long long*)+0x4c>
c000b36e:	50                   	push   eax
c000b36f:	8b 02                	mov    eax,DWORD PTR [edx]
c000b371:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b375:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b37b:	52                   	push   edx
c000b37c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b37f:	83 c4 10             	add    esp,0x10
c000b382:	83 c4 0c             	add    esp,0xc
c000b385:	c3                   	ret    

c000b386 <File::rewind()>:
c000b386:	83 ec 10             	sub    esp,0x10
c000b389:	6a 00                	push   0x0
c000b38b:	6a 00                	push   0x0
c000b38d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b391:	e8 4a ff ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c000b396:	83 c4 1c             	add    esp,0x1c
c000b399:	c3                   	ret    

c000b39a <File::unlink()>:
c000b39a:	83 ec 0c             	sub    esp,0xc
c000b39d:	b8 0b 00 00 00       	mov    eax,0xb
c000b3a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3a6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3ad:	80 f9 19             	cmp    cl,0x19
c000b3b0:	77 2f                	ja     c000b3e1 <File::unlink()+0x47>
c000b3b2:	8b 0c 8d 20 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0e0]
c000b3b9:	85 c9                	test   ecx,ecx
c000b3bb:	74 24                	je     c000b3e1 <File::unlink()+0x47>
c000b3bd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b3c3:	85 c9                	test   ecx,ecx
c000b3c5:	74 1a                	je     c000b3e1 <File::unlink()+0x47>
c000b3c7:	b8 06 00 00 00       	mov    eax,0x6
c000b3cc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3d0:	75 0f                	jne    c000b3e1 <File::unlink()+0x47>
c000b3d2:	83 c2 0d             	add    edx,0xd
c000b3d5:	50                   	push   eax
c000b3d6:	50                   	push   eax
c000b3d7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b3d9:	52                   	push   edx
c000b3da:	51                   	push   ecx
c000b3db:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	83 c4 0c             	add    esp,0xc
c000b3e4:	c3                   	ret    
c000b3e5:	90                   	nop

c000b3e6 <File::rename(char const*)>:
c000b3e6:	83 ec 0c             	sub    esp,0xc
c000b3e9:	b8 0b 00 00 00       	mov    eax,0xb
c000b3ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3f2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3f9:	80 f9 19             	cmp    cl,0x19
c000b3fc:	77 32                	ja     c000b430 <File::rename(char const*)+0x4a>
c000b3fe:	8b 0c 8d 20 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0e0]
c000b405:	85 c9                	test   ecx,ecx
c000b407:	74 27                	je     c000b430 <File::rename(char const*)+0x4a>
c000b409:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b40f:	85 c9                	test   ecx,ecx
c000b411:	74 1d                	je     c000b430 <File::rename(char const*)+0x4a>
c000b413:	b8 06 00 00 00       	mov    eax,0x6
c000b418:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b41c:	75 12                	jne    c000b430 <File::rename(char const*)+0x4a>
c000b41e:	83 c2 0d             	add    edx,0xd
c000b421:	50                   	push   eax
c000b422:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b424:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b428:	52                   	push   edx
c000b429:	51                   	push   ecx
c000b42a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b42d:	83 c4 10             	add    esp,0x10
c000b430:	83 c4 0c             	add    esp,0xc
c000b433:	c3                   	ret    

c000b434 <File::chfatattr(unsigned char, unsigned char)>:
c000b434:	57                   	push   edi
c000b435:	b8 0b 00 00 00       	mov    eax,0xb
c000b43a:	56                   	push   esi
c000b43b:	53                   	push   ebx
c000b43c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b440:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b444:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b44b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b44f:	80 f9 19             	cmp    cl,0x19
c000b452:	77 37                	ja     c000b48b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b454:	8b 0c 8d 20 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0e0]
c000b45b:	85 c9                	test   ecx,ecx
c000b45d:	74 2c                	je     c000b48b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b45f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b465:	85 c9                	test   ecx,ecx
c000b467:	74 22                	je     c000b48b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b469:	b8 06 00 00 00       	mov    eax,0x6
c000b46e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b472:	75 17                	jne    c000b48b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b474:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b476:	89 f0                	mov    eax,esi
c000b478:	83 c2 0d             	add    edx,0xd
c000b47b:	0f b6 f0             	movzx  esi,al
c000b47e:	0f b6 db             	movzx  ebx,bl
c000b481:	56                   	push   esi
c000b482:	53                   	push   ebx
c000b483:	52                   	push   edx
c000b484:	51                   	push   ecx
c000b485:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b488:	83 c4 10             	add    esp,0x10
c000b48b:	5b                   	pop    ebx
c000b48c:	5e                   	pop    esi
c000b48d:	5f                   	pop    edi
c000b48e:	c3                   	ret    
c000b48f:	90                   	nop

c000b490 <File::exists()>:
c000b490:	83 ec 0c             	sub    esp,0xc
c000b493:	31 c0                	xor    eax,eax
c000b495:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b499:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b4a0:	80 f9 19             	cmp    cl,0x19
c000b4a3:	77 24                	ja     c000b4c9 <File::exists()+0x39>
c000b4a5:	8b 0c 8d 20 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0e0]
c000b4ac:	85 c9                	test   ecx,ecx
c000b4ae:	74 19                	je     c000b4c9 <File::exists()+0x39>
c000b4b0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b4b6:	85 c9                	test   ecx,ecx
c000b4b8:	74 0f                	je     c000b4c9 <File::exists()+0x39>
c000b4ba:	83 c2 0d             	add    edx,0xd
c000b4bd:	50                   	push   eax
c000b4be:	50                   	push   eax
c000b4bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4c1:	52                   	push   edx
c000b4c2:	51                   	push   ecx
c000b4c3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	83 c4 0c             	add    esp,0xc
c000b4cc:	c3                   	ret    
c000b4cd:	90                   	nop

c000b4ce <File::stat(unsigned long long*, bool*)>:
c000b4ce:	56                   	push   esi
c000b4cf:	53                   	push   ebx
c000b4d0:	50                   	push   eax
c000b4d1:	b8 0b 00 00 00       	mov    eax,0xb
c000b4d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b4da:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b4de:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b4e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b4e9:	80 f9 19             	cmp    cl,0x19
c000b4ec:	77 3d                	ja     c000b52b <File::stat(unsigned long long*, bool*)+0x5d>
c000b4ee:	8b 0c 8d 20 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0e0]
c000b4f5:	85 c9                	test   ecx,ecx
c000b4f7:	74 32                	je     c000b52b <File::stat(unsigned long long*, bool*)+0x5d>
c000b4f9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b4ff:	85 c9                	test   ecx,ecx
c000b501:	74 28                	je     c000b52b <File::stat(unsigned long long*, bool*)+0x5d>
c000b503:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b505:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b509:	74 13                	je     c000b51e <File::stat(unsigned long long*, bool*)+0x50>
c000b50b:	83 ec 04             	sub    esp,0x4
c000b50e:	56                   	push   esi
c000b50f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b515:	51                   	push   ecx
c000b516:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b519:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b51c:	eb 0a                	jmp    c000b528 <File::stat(unsigned long long*, bool*)+0x5a>
c000b51e:	53                   	push   ebx
c000b51f:	83 c2 0d             	add    edx,0xd
c000b522:	56                   	push   esi
c000b523:	52                   	push   edx
c000b524:	51                   	push   ecx
c000b525:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b528:	83 c4 10             	add    esp,0x10
c000b52b:	5a                   	pop    edx
c000b52c:	5b                   	pop    ebx
c000b52d:	5e                   	pop    esi
c000b52e:	c3                   	ret    

c000b52f <Fs::setcwd(Process*, char*)>:
c000b52f:	55                   	push   ebp
c000b530:	57                   	push   edi
c000b531:	56                   	push   esi
c000b532:	53                   	push   ebx
c000b533:	81 ec 20 02 00 00    	sub    esp,0x220
c000b539:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b540:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b546:	57                   	push   edi
c000b547:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b54e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b552:	56                   	push   esi
c000b553:	e8 60 fa ff ff       	call   c000afb8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b558:	89 34 24             	mov    DWORD PTR [esp],esi
c000b55b:	e8 00 50 ff ff       	call   c0000560 <strlen>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	83 f8 02             	cmp    eax,0x2
c000b566:	77 15                	ja     c000b57d <Fs::setcwd(Process*, char*)+0x4e>
c000b568:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b56d:	83 eb 41             	sub    ebx,0x41
c000b570:	8b 04 9d 20 2f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd0e0]
c000b577:	85 c0                	test   eax,eax
c000b579:	75 1c                	jne    c000b597 <Fs::setcwd(Process*, char*)+0x68>
c000b57b:	eb 2f                	jmp    c000b5ac <Fs::setcwd(Process*, char*)+0x7d>
c000b57d:	83 ec 0c             	sub    esp,0xc
c000b580:	56                   	push   esi
c000b581:	e8 da 4f ff ff       	call   c0000560 <strlen>
c000b586:	83 c4 10             	add    esp,0x10
c000b589:	83 f8 03             	cmp    eax,0x3
c000b58c:	75 57                	jne    c000b5e5 <Fs::setcwd(Process*, char*)+0xb6>
c000b58e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b593:	75 50                	jne    c000b5e5 <Fs::setcwd(Process*, char*)+0xb6>
c000b595:	eb d1                	jmp    c000b568 <Fs::setcwd(Process*, char*)+0x39>
c000b597:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000b59e:	75 0c                	jne    c000b5ac <Fs::setcwd(Process*, char*)+0x7d>
c000b5a0:	83 ec 0c             	sub    esp,0xc
c000b5a3:	50                   	push   eax
c000b5a4:	e8 69 1c 00 00       	call   c000d212 <LogicalDisk::mount()>
c000b5a9:	83 c4 10             	add    esp,0x10
c000b5ac:	b8 03 00 00 00       	mov    eax,0x3
c000b5b1:	83 fb 19             	cmp    ebx,0x19
c000b5b4:	0f 87 c6 00 00 00    	ja     c000b680 <Fs::setcwd(Process*, char*)+0x151>
c000b5ba:	8b 14 9d 20 2f 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd0e0]
c000b5c1:	b8 05 00 00 00       	mov    eax,0x5
c000b5c6:	85 d2                	test   edx,edx
c000b5c8:	0f 84 b2 00 00 00    	je     c000b680 <Fs::setcwd(Process*, char*)+0x151>
c000b5ce:	b8 06 00 00 00       	mov    eax,0x6
c000b5d3:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b5da:	0f 85 92 00 00 00    	jne    c000b672 <Fs::setcwd(Process*, char*)+0x143>
c000b5e0:	e9 9b 00 00 00       	jmp    c000b680 <Fs::setcwd(Process*, char*)+0x151>
c000b5e5:	83 ec 0c             	sub    esp,0xc
c000b5e8:	68 14 01 00 00       	push   0x114
c000b5ed:	e8 6b c8 ff ff       	call   c0007e5d <malloc>
c000b5f2:	83 c4 0c             	add    esp,0xc
c000b5f5:	89 c3                	mov    ebx,eax
c000b5f7:	55                   	push   ebp
c000b5f8:	56                   	push   esi
c000b5f9:	50                   	push   eax
c000b5fa:	e8 63 fb ff ff       	call   c000b162 <File::File(char const*, Process*)>
c000b5ff:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b604:	83 c4 0c             	add    esp,0xc
c000b607:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b60b:	50                   	push   eax
c000b60c:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b610:	50                   	push   eax
c000b611:	53                   	push   ebx
c000b612:	e8 b7 fe ff ff       	call   c000b4ce <File::stat(unsigned long long*, bool*)>
c000b617:	83 c4 10             	add    esp,0x10
c000b61a:	83 f8 02             	cmp    eax,0x2
c000b61d:	74 04                	je     c000b623 <Fs::setcwd(Process*, char*)+0xf4>
c000b61f:	85 c0                	test   eax,eax
c000b621:	74 1c                	je     c000b63f <Fs::setcwd(Process*, char*)+0x110>
c000b623:	b8 01 00 00 00       	mov    eax,0x1
c000b628:	85 db                	test   ebx,ebx
c000b62a:	74 54                	je     c000b680 <Fs::setcwd(Process*, char*)+0x151>
c000b62c:	83 ec 0c             	sub    esp,0xc
c000b62f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b631:	53                   	push   ebx
c000b632:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b635:	83 c4 10             	add    esp,0x10
c000b638:	b8 01 00 00 00       	mov    eax,0x1
c000b63d:	eb 41                	jmp    c000b680 <Fs::setcwd(Process*, char*)+0x151>
c000b63f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b644:	75 1c                	jne    c000b662 <Fs::setcwd(Process*, char*)+0x133>
c000b646:	b8 02 00 00 00       	mov    eax,0x2
c000b64b:	85 db                	test   ebx,ebx
c000b64d:	74 31                	je     c000b680 <Fs::setcwd(Process*, char*)+0x151>
c000b64f:	83 ec 0c             	sub    esp,0xc
c000b652:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b654:	53                   	push   ebx
c000b655:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b658:	83 c4 10             	add    esp,0x10
c000b65b:	b8 02 00 00 00       	mov    eax,0x2
c000b660:	eb 1e                	jmp    c000b680 <Fs::setcwd(Process*, char*)+0x151>
c000b662:	85 db                	test   ebx,ebx
c000b664:	74 0c                	je     c000b672 <Fs::setcwd(Process*, char*)+0x143>
c000b666:	83 ec 0c             	sub    esp,0xc
c000b669:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b66b:	53                   	push   ebx
c000b66c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b66f:	83 c4 10             	add    esp,0x10
c000b672:	50                   	push   eax
c000b673:	50                   	push   eax
c000b674:	56                   	push   esi
c000b675:	57                   	push   edi
c000b676:	e8 a5 4f ff ff       	call   c0000620 <strcpy>
c000b67b:	83 c4 10             	add    esp,0x10
c000b67e:	31 c0                	xor    eax,eax
c000b680:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b686:	5b                   	pop    ebx
c000b687:	5e                   	pop    esi
c000b688:	5f                   	pop    edi
c000b689:	5d                   	pop    ebp
c000b68a:	c3                   	ret    
c000b68b:	90                   	nop

c000b68c <Directory::Directory(char const*, Process*)>:
c000b68c:	83 ec 0c             	sub    esp,0xc
c000b68f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b693:	83 ec 08             	sub    esp,0x8
c000b696:	6a 00                	push   0x0
c000b698:	50                   	push   eax
c000b699:	e8 b8 de ff ff       	call   c0009556 <UnixFile::UnixFile(int)>
c000b69e:	83 c4 10             	add    esp,0x10
c000b6a1:	ba 18 df 01 c0       	mov    edx,0xc001df18
c000b6a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6aa:	89 10                	mov    DWORD PTR [eax],edx
c000b6ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b6b0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b6b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6ba:	83 c0 0d             	add    eax,0xd
c000b6bd:	83 ec 04             	sub    esp,0x4
c000b6c0:	52                   	push   edx
c000b6c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c5:	50                   	push   eax
c000b6c6:	e8 ed f8 ff ff       	call   c000afb8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b6cb:	83 c4 10             	add    esp,0x10
c000b6ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6d2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b6d5:	8d 50 bf             	lea    edx,[eax-0x41]
c000b6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6dc:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6e6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6ee:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b6f4:	25 ff 00 00 00       	and    eax,0xff
c000b6f9:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c000b700:	85 c0                	test   eax,eax
c000b702:	74 42                	je     c000b746 <Directory::Directory(char const*, Process*)+0xba>
c000b704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b708:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b70e:	25 ff 00 00 00       	and    eax,0xff
c000b713:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c000b71a:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b720:	85 c0                	test   eax,eax
c000b722:	75 22                	jne    c000b746 <Directory::Directory(char const*, Process*)+0xba>
c000b724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b728:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b72e:	25 ff 00 00 00       	and    eax,0xff
c000b733:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c000b73a:	83 ec 0c             	sub    esp,0xc
c000b73d:	50                   	push   eax
c000b73e:	e8 cf 1a 00 00       	call   c000d212 <LogicalDisk::mount()>
c000b743:	83 c4 10             	add    esp,0x10
c000b746:	90                   	nop
c000b747:	83 c4 0c             	add    esp,0xc
c000b74a:	c3                   	ret    
c000b74b:	90                   	nop

c000b74c <Directory::open()>:
c000b74c:	53                   	push   ebx
c000b74d:	b8 0b 00 00 00       	mov    eax,0xb
c000b752:	83 ec 08             	sub    esp,0x8
c000b755:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b759:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b760:	80 fa 19             	cmp    dl,0x19
c000b763:	77 3d                	ja     c000b7a2 <Directory::open()+0x56>
c000b765:	8b 14 95 20 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0e0]
c000b76c:	85 d2                	test   edx,edx
c000b76e:	74 32                	je     c000b7a2 <Directory::open()+0x56>
c000b770:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b776:	85 d2                	test   edx,edx
c000b778:	74 28                	je     c000b7a2 <Directory::open()+0x56>
c000b77a:	b8 06 00 00 00       	mov    eax,0x6
c000b77f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b783:	75 1d                	jne    c000b7a2 <Directory::open()+0x56>
c000b785:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b78b:	50                   	push   eax
c000b78c:	8b 02                	mov    eax,DWORD PTR [edx]
c000b78e:	51                   	push   ecx
c000b78f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b792:	51                   	push   ecx
c000b793:	52                   	push   edx
c000b794:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b797:	83 c4 10             	add    esp,0x10
c000b79a:	85 c0                	test   eax,eax
c000b79c:	75 04                	jne    c000b7a2 <Directory::open()+0x56>
c000b79e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b7a2:	83 c4 08             	add    esp,0x8
c000b7a5:	5b                   	pop    ebx
c000b7a6:	c3                   	ret    
c000b7a7:	90                   	nop

c000b7a8 <Directory::close()>:
c000b7a8:	53                   	push   ebx
c000b7a9:	b8 0b 00 00 00       	mov    eax,0xb
c000b7ae:	83 ec 08             	sub    esp,0x8
c000b7b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b7b5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b7bc:	80 fa 19             	cmp    dl,0x19
c000b7bf:	77 41                	ja     c000b802 <Directory::close()+0x5a>
c000b7c1:	8b 1c 95 20 2f 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd0e0]
c000b7c8:	85 db                	test   ebx,ebx
c000b7ca:	74 36                	je     c000b802 <Directory::close()+0x5a>
c000b7cc:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b7d3:	74 2d                	je     c000b802 <Directory::close()+0x5a>
c000b7d5:	b8 05 00 00 00       	mov    eax,0x5
c000b7da:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b7de:	74 22                	je     c000b802 <Directory::close()+0x5a>
c000b7e0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b7e4:	8b 04 95 20 2f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd0e0]
c000b7eb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b7f1:	53                   	push   ebx
c000b7f2:	53                   	push   ebx
c000b7f3:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7f5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b7fb:	50                   	push   eax
c000b7fc:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b7ff:	83 c4 10             	add    esp,0x10
c000b802:	83 c4 08             	add    esp,0x8
c000b805:	5b                   	pop    ebx
c000b806:	c3                   	ret    
c000b807:	90                   	nop

c000b808 <Directory::unlink()>:
c000b808:	83 ec 0c             	sub    esp,0xc
c000b80b:	b8 0b 00 00 00       	mov    eax,0xb
c000b810:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b814:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b81b:	80 f9 19             	cmp    cl,0x19
c000b81e:	77 2f                	ja     c000b84f <Directory::unlink()+0x47>
c000b820:	8b 0c 8d 20 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0e0]
c000b827:	85 c9                	test   ecx,ecx
c000b829:	74 24                	je     c000b84f <Directory::unlink()+0x47>
c000b82b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b831:	85 c9                	test   ecx,ecx
c000b833:	74 1a                	je     c000b84f <Directory::unlink()+0x47>
c000b835:	b8 06 00 00 00       	mov    eax,0x6
c000b83a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b83e:	75 0f                	jne    c000b84f <Directory::unlink()+0x47>
c000b840:	83 c2 0d             	add    edx,0xd
c000b843:	50                   	push   eax
c000b844:	50                   	push   eax
c000b845:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b847:	52                   	push   edx
c000b848:	51                   	push   ecx
c000b849:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	83 c4 0c             	add    esp,0xc
c000b852:	c3                   	ret    
c000b853:	90                   	nop

c000b854 <Directory::rename(char const*)>:
c000b854:	83 ec 0c             	sub    esp,0xc
c000b857:	b8 0b 00 00 00       	mov    eax,0xb
c000b85c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b860:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b867:	80 f9 19             	cmp    cl,0x19
c000b86a:	77 32                	ja     c000b89e <Directory::rename(char const*)+0x4a>
c000b86c:	8b 0c 8d 20 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0e0]
c000b873:	85 c9                	test   ecx,ecx
c000b875:	74 27                	je     c000b89e <Directory::rename(char const*)+0x4a>
c000b877:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b87d:	85 c9                	test   ecx,ecx
c000b87f:	74 1d                	je     c000b89e <Directory::rename(char const*)+0x4a>
c000b881:	b8 06 00 00 00       	mov    eax,0x6
c000b886:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b88a:	75 12                	jne    c000b89e <Directory::rename(char const*)+0x4a>
c000b88c:	83 c2 0d             	add    edx,0xd
c000b88f:	50                   	push   eax
c000b890:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b892:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b896:	52                   	push   edx
c000b897:	51                   	push   ecx
c000b898:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b89b:	83 c4 10             	add    esp,0x10
c000b89e:	83 c4 0c             	add    esp,0xc
c000b8a1:	c3                   	ret    

c000b8a2 <Directory::exists()>:
c000b8a2:	83 ec 0c             	sub    esp,0xc
c000b8a5:	31 c0                	xor    eax,eax
c000b8a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8ab:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b8b2:	80 f9 19             	cmp    cl,0x19
c000b8b5:	77 24                	ja     c000b8db <Directory::exists()+0x39>
c000b8b7:	8b 0c 8d 20 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0e0]
c000b8be:	85 c9                	test   ecx,ecx
c000b8c0:	74 19                	je     c000b8db <Directory::exists()+0x39>
c000b8c2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b8c8:	85 c9                	test   ecx,ecx
c000b8ca:	74 0f                	je     c000b8db <Directory::exists()+0x39>
c000b8cc:	83 c2 0d             	add    edx,0xd
c000b8cf:	50                   	push   eax
c000b8d0:	50                   	push   eax
c000b8d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b8d3:	52                   	push   edx
c000b8d4:	51                   	push   ecx
c000b8d5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b8d8:	83 c4 10             	add    esp,0x10
c000b8db:	83 c4 0c             	add    esp,0xc
c000b8de:	c3                   	ret    
c000b8df:	90                   	nop

c000b8e0 <Directory::read(dirent*)>:
c000b8e0:	83 ec 1c             	sub    esp,0x1c
c000b8e3:	b8 0b 00 00 00       	mov    eax,0xb
c000b8e8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b8ec:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b8f3:	80 fa 19             	cmp    dl,0x19
c000b8f6:	77 30                	ja     c000b928 <Directory::read(dirent*)+0x48>
c000b8f8:	8b 14 95 20 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0e0]
c000b8ff:	85 d2                	test   edx,edx
c000b901:	74 25                	je     c000b928 <Directory::read(dirent*)+0x48>
c000b903:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b90a:	74 1c                	je     c000b928 <Directory::read(dirent*)+0x48>
c000b90c:	83 ec 0c             	sub    esp,0xc
c000b90f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b911:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b915:	52                   	push   edx
c000b916:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b91a:	6a 00                	push   0x0
c000b91c:	68 10 01 00 00       	push   0x110
c000b921:	51                   	push   ecx
c000b922:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b925:	83 c4 20             	add    esp,0x20
c000b928:	83 c4 1c             	add    esp,0x1c
c000b92b:	c3                   	ret    

c000b92c <Directory::create()>:
c000b92c:	83 ec 0c             	sub    esp,0xc
c000b92f:	b8 0b 00 00 00       	mov    eax,0xb
c000b934:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b938:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b93f:	80 f9 19             	cmp    cl,0x19
c000b942:	77 2f                	ja     c000b973 <Directory::create()+0x47>
c000b944:	8b 0c 8d 20 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0e0]
c000b94b:	85 c9                	test   ecx,ecx
c000b94d:	74 24                	je     c000b973 <Directory::create()+0x47>
c000b94f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b955:	85 c9                	test   ecx,ecx
c000b957:	74 1a                	je     c000b973 <Directory::create()+0x47>
c000b959:	b8 06 00 00 00       	mov    eax,0x6
c000b95e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b962:	75 0f                	jne    c000b973 <Directory::create()+0x47>
c000b964:	83 c2 0d             	add    edx,0xd
c000b967:	50                   	push   eax
c000b968:	50                   	push   eax
c000b969:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b96b:	52                   	push   edx
c000b96c:	51                   	push   ecx
c000b96d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b970:	83 c4 10             	add    esp,0x10
c000b973:	83 c4 0c             	add    esp,0xc
c000b976:	c3                   	ret    
c000b977:	90                   	nop

c000b978 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b978:	b8 0a 00 00 00       	mov    eax,0xa
c000b97d:	c3                   	ret    
c000b97e:	66 90                	xchg   ax,ax

c000b980 <Bus::Bus(char const*)>:
c000b980:	83 ec 0c             	sub    esp,0xc
c000b983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b987:	83 ec 08             	sub    esp,0x8
c000b98a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b98e:	50                   	push   eax
c000b98f:	e8 30 08 00 00       	call   c000c1c4 <Device::Device(char const*)>
c000b994:	83 c4 10             	add    esp,0x10
c000b997:	ba 34 df 01 c0       	mov    edx,0xc001df34
c000b99c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9a0:	89 10                	mov    DWORD PTR [eax],edx
c000b9a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9a6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b9b0:	90                   	nop
c000b9b1:	83 c4 0c             	add    esp,0xc
c000b9b4:	c3                   	ret    
c000b9b5:	90                   	nop
c000b9b6:	66 90                	xchg   ax,ax

c000b9b8 <Bus::~Bus()>:
c000b9b8:	83 ec 0c             	sub    esp,0xc
c000b9bb:	ba 34 df 01 c0       	mov    edx,0xc001df34
c000b9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9c4:	89 10                	mov    DWORD PTR [eax],edx
c000b9c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9ca:	83 ec 0c             	sub    esp,0xc
c000b9cd:	50                   	push   eax
c000b9ce:	e8 5b 05 00 00       	call   c000bf2e <Device::~Device()>
c000b9d3:	83 c4 10             	add    esp,0x10
c000b9d6:	90                   	nop
c000b9d7:	83 c4 0c             	add    esp,0xc
c000b9da:	c3                   	ret    
c000b9db:	90                   	nop

c000b9dc <Bus::~Bus()>:
c000b9dc:	83 ec 0c             	sub    esp,0xc
c000b9df:	83 ec 0c             	sub    esp,0xc
c000b9e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9e6:	e8 cd ff ff ff       	call   c000b9b8 <Bus::~Bus()>
c000b9eb:	83 c4 10             	add    esp,0x10
c000b9ee:	83 ec 08             	sub    esp,0x8
c000b9f1:	68 58 01 00 00       	push   0x158
c000b9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9fa:	e8 f7 f0 ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000b9ff:	83 c4 10             	add    esp,0x10
c000ba02:	83 c4 0c             	add    esp,0xc
c000ba05:	c3                   	ret    

c000ba06 <beepThread(void*)>:
c000ba06:	83 ec 0c             	sub    esp,0xc
c000ba09:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000ba0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba12:	48                   	dec    eax
c000ba13:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000ba18:	75 01                	jne    c000ba1b <beepThread(void*)+0x15>
c000ba1a:	fb                   	sti    
c000ba1b:	83 ec 0c             	sub    esp,0xc
c000ba1e:	6b c2 0a             	imul   eax,edx,0xa
c000ba21:	50                   	push   eax
c000ba22:	e8 19 83 00 00       	call   c0013d40 <milliTenthSleep(unsigned int)>
c000ba27:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000ba2e:	e8 cb 9f 00 00       	call   c00159fe <HalMakeBeep(int)>
c000ba33:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ba3b:	83 c4 1c             	add    esp,0x1c
c000ba3e:	e9 f9 81 00 00       	jmp    c0013c3c <blockTask(TaskState)>

c000ba43 <Krnl::beep(int, int, bool)>:
c000ba43:	56                   	push   esi
c000ba44:	53                   	push   ebx
c000ba45:	83 ec 10             	sub    esp,0x10
c000ba48:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ba4c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ba50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba54:	e8 a5 9f 00 00       	call   c00159fe <HalMakeBeep(int)>
c000ba59:	83 c4 10             	add    esp,0x10
c000ba5c:	89 f0                	mov    eax,esi
c000ba5e:	84 c0                	test   al,al
c000ba60:	74 1e                	je     c000ba80 <Krnl::beep(int, int, bool)+0x3d>
c000ba62:	83 ec 0c             	sub    esp,0xc
c000ba65:	6b db 0a             	imul   ebx,ebx,0xa
c000ba68:	53                   	push   ebx
c000ba69:	e8 d2 82 00 00       	call   c0013d40 <milliTenthSleep(unsigned int)>
c000ba6e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000ba76:	83 c4 14             	add    esp,0x14
c000ba79:	5b                   	pop    ebx
c000ba7a:	5e                   	pop    esi
c000ba7b:	e9 7e 9f 00 00       	jmp    c00159fe <HalMakeBeep(int)>
c000ba80:	68 e6 00 00 00       	push   0xe6
c000ba85:	53                   	push   ebx
c000ba86:	68 06 ba 00 c0       	push   0xc000ba06
c000ba8b:	ff 35 b0 3e 02 c0    	push   DWORD PTR ds:0xc0023eb0
c000ba91:	e8 8a 7d 00 00       	call   c0013820 <Process::createThread(void (*)(void*), void*, int)>
c000ba96:	83 c4 14             	add    esp,0x14
c000ba99:	5b                   	pop    ebx
c000ba9a:	5e                   	pop    esi
c000ba9b:	c3                   	ret    

c000ba9c <User::loadClockSettings(int)>:
c000ba9c:	53                   	push   ebx
c000ba9d:	83 ec 14             	sub    esp,0x14
c000baa0:	68 14 01 00 00       	push   0x114
c000baa5:	e8 b3 c3 ff ff       	call   c0007e5d <malloc>
c000baaa:	83 c4 0c             	add    esp,0xc
c000baad:	89 c3                	mov    ebx,eax
c000baaf:	ff 35 b0 3e 02 c0    	push   DWORD PTR ds:0xc0023eb0
c000bab5:	68 58 df 01 c0       	push   0xc001df58
c000baba:	50                   	push   eax
c000babb:	e8 a2 f6 ff ff       	call   c000b162 <File::File(char const*, Process*)>
c000bac0:	58                   	pop    eax
c000bac1:	5a                   	pop    edx
c000bac2:	6a 01                	push   0x1
c000bac4:	53                   	push   ebx
c000bac5:	e8 58 f7 ff ff       	call   c000b222 <File::open(FileOpenMode)>
c000baca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bacd:	e8 ae f7 ff ff       	call   c000b280 <File::close()>
c000bad2:	83 c4 10             	add    esp,0x10
c000bad5:	85 db                	test   ebx,ebx
c000bad7:	74 0f                	je     c000bae8 <User::loadClockSettings(int)+0x4c>
c000bad9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000badb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000badf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bae2:	83 c4 08             	add    esp,0x8
c000bae5:	5b                   	pop    ebx
c000bae6:	ff e0                	jmp    eax
c000bae8:	83 c4 08             	add    esp,0x8
c000baeb:	5b                   	pop    ebx
c000baec:	c3                   	ret    
c000baed:	90                   	nop

c000baee <Clock::Clock(char const*)>:
c000baee:	83 ec 0c             	sub    esp,0xc
c000baf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000baf5:	83 ec 08             	sub    esp,0x8
c000baf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bafc:	50                   	push   eax
c000bafd:	e8 c2 06 00 00       	call   c000c1c4 <Device::Device(char const*)>
c000bb02:	83 c4 10             	add    esp,0x10
c000bb05:	ba 80 df 01 c0       	mov    edx,0xc001df80
c000bb0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb0e:	89 10                	mov    DWORD PTR [eax],edx
c000bb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb14:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000bb1e:	90                   	nop
c000bb1f:	83 c4 0c             	add    esp,0xc
c000bb22:	c3                   	ret    
c000bb23:	90                   	nop

c000bb24 <Clock::~Clock()>:
c000bb24:	83 ec 0c             	sub    esp,0xc
c000bb27:	ba 80 df 01 c0       	mov    edx,0xc001df80
c000bb2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb30:	89 10                	mov    DWORD PTR [eax],edx
c000bb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb36:	83 ec 0c             	sub    esp,0xc
c000bb39:	50                   	push   eax
c000bb3a:	e8 ef 03 00 00       	call   c000bf2e <Device::~Device()>
c000bb3f:	83 c4 10             	add    esp,0x10
c000bb42:	90                   	nop
c000bb43:	83 c4 0c             	add    esp,0xc
c000bb46:	c3                   	ret    
c000bb47:	90                   	nop

c000bb48 <Clock::~Clock()>:
c000bb48:	83 ec 0c             	sub    esp,0xc
c000bb4b:	83 ec 0c             	sub    esp,0xc
c000bb4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb52:	e8 cd ff ff ff       	call   c000bb24 <Clock::~Clock()>
c000bb57:	83 c4 10             	add    esp,0x10
c000bb5a:	83 ec 08             	sub    esp,0x8
c000bb5d:	68 58 01 00 00       	push   0x158
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 8b ef ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	83 c4 0c             	add    esp,0xc
c000bb71:	c3                   	ret    

c000bb72 <Clock::timeInSecondsLocal()>:
c000bb72:	53                   	push   ebx
c000bb73:	83 ec 14             	sub    esp,0x14
c000bb76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bb7a:	8b 10                	mov    edx,DWORD PTR [eax]
c000bb7c:	50                   	push   eax
c000bb7d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bb80:	0f b6 0d b8 0a 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020ab8
c000bb87:	03 0d bc 0a 02 c0    	add    ecx,DWORD PTR ds:0xc0020abc
c000bb8d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bb93:	89 cb                	mov    ebx,ecx
c000bb95:	c1 fb 1f             	sar    ebx,0x1f
c000bb98:	01 c8                	add    eax,ecx
c000bb9a:	11 da                	adc    edx,ebx
c000bb9c:	83 c4 10             	add    esp,0x10
c000bb9f:	31 c9                	xor    ecx,ecx
c000bba1:	80 3d b9 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020ab9,0x0
c000bba8:	74 05                	je     c000bbaf <Clock::timeInSecondsLocal()+0x3d>
c000bbaa:	b9 08 07 00 00       	mov    ecx,0x708
c000bbaf:	31 db                	xor    ebx,ebx
c000bbb1:	01 c8                	add    eax,ecx
c000bbb3:	11 da                	adc    edx,ebx
c000bbb5:	83 c4 08             	add    esp,0x8
c000bbb8:	5b                   	pop    ebx
c000bbb9:	c3                   	ret    

c000bbba <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000bbba:	57                   	push   edi
c000bbbb:	56                   	push   esi
c000bbbc:	53                   	push   ebx
c000bbbd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bbc1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbc5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bbc7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bbcb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000bbce:	0f b6 05 b8 0a 02 c0 	movzx  eax,BYTE PTR ds:0xc0020ab8
c000bbd5:	03 05 bc 0a 02 c0    	add    eax,DWORD PTR ds:0xc0020abc
c000bbdb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000bbe1:	99                   	cdq    
c000bbe2:	29 c6                	sub    esi,eax
c000bbe4:	19 d7                	sbb    edi,edx
c000bbe6:	89 f0                	mov    eax,esi
c000bbe8:	89 fa                	mov    edx,edi
c000bbea:	31 f6                	xor    esi,esi
c000bbec:	80 3d b9 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020ab9,0x0
c000bbf3:	74 05                	je     c000bbfa <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000bbf5:	be 08 07 00 00       	mov    esi,0x708
c000bbfa:	31 ff                	xor    edi,edi
c000bbfc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000bc00:	29 f0                	sub    eax,esi
c000bc02:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bc06:	19 fa                	sbb    edx,edi
c000bc08:	89 d8                	mov    eax,ebx
c000bc0a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bc0e:	5b                   	pop    ebx
c000bc0f:	5e                   	pop    esi
c000bc10:	5f                   	pop    edi
c000bc11:	ff e0                	jmp    eax

c000bc13 <datetimeToSeconds(datetime_t)>:
c000bc13:	55                   	push   ebp
c000bc14:	57                   	push   edi
c000bc15:	56                   	push   esi
c000bc16:	53                   	push   ebx
c000bc17:	83 ec 14             	sub    esp,0x14
c000bc1a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc1e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bc22:	89 d3                	mov    ebx,edx
c000bc24:	0f b6 c6             	movzx  eax,dh
c000bc27:	c1 eb 10             	shr    ebx,0x10
c000bc2a:	48                   	dec    eax
c000bc2b:	66 81 eb 6c 07       	sub    bx,0x76c
c000bc30:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000bc34:	0f b6 f5             	movzx  esi,ch
c000bc37:	89 cf                	mov    edi,ecx
c000bc39:	6b f6 3c             	imul   esi,esi,0x3c
c000bc3c:	c1 ef 10             	shr    edi,0x10
c000bc3f:	0f b6 c9             	movzx  ecx,cl
c000bc42:	89 f8                	mov    eax,edi
c000bc44:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bc4a:	0f b6 f8             	movzx  edi,al
c000bc4d:	0f b6 d2             	movzx  edx,dl
c000bc50:	01 fe                	add    esi,edi
c000bc52:	01 f1                	add    ecx,esi
c000bc54:	0f b7 f3             	movzx  esi,bx
c000bc57:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000bc5b:	c1 f9 1f             	sar    ecx,0x1f
c000bc5e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000bc63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bc67:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000bc6c:	8b 0c 8d c0 df 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2040]
c000bc73:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000bc77:	76 29                	jbe    c000bca2 <datetimeToSeconds(datetime_t)+0x8f>
c000bc79:	f6 c3 03             	test   bl,0x3
c000bc7c:	75 24                	jne    c000bca2 <datetimeToSeconds(datetime_t)+0x8f>
c000bc7e:	31 d2                	xor    edx,edx
c000bc80:	bf 64 00 00 00       	mov    edi,0x64
c000bc85:	89 d8                	mov    eax,ebx
c000bc87:	66 f7 f7             	div    di
c000bc8a:	66 85 d2             	test   dx,dx
c000bc8d:	75 12                	jne    c000bca1 <datetimeToSeconds(datetime_t)+0x8e>
c000bc8f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000bc95:	bf 90 01 00 00       	mov    edi,0x190
c000bc9a:	99                   	cdq    
c000bc9b:	f7 ff                	idiv   edi
c000bc9d:	85 d2                	test   edx,edx
c000bc9f:	75 01                	jne    c000bca2 <datetimeToSeconds(datetime_t)+0x8f>
c000bca1:	41                   	inc    ecx
c000bca2:	66 83 fb 46          	cmp    bx,0x46
c000bca6:	76 45                	jbe    c000bced <datetimeToSeconds(datetime_t)+0xda>
c000bca8:	bb 46 00 00 00       	mov    ebx,0x46
c000bcad:	bf 64 00 00 00       	mov    edi,0x64
c000bcb2:	bd 90 01 00 00       	mov    ebp,0x190
c000bcb7:	b8 6d 01 00 00       	mov    eax,0x16d
c000bcbc:	f6 c3 03             	test   bl,0x3
c000bcbf:	75 23                	jne    c000bce4 <datetimeToSeconds(datetime_t)+0xd1>
c000bcc1:	89 d8                	mov    eax,ebx
c000bcc3:	99                   	cdq    
c000bcc4:	f7 ff                	idiv   edi
c000bcc6:	b8 6e 01 00 00       	mov    eax,0x16e
c000bccb:	85 d2                	test   edx,edx
c000bccd:	75 15                	jne    c000bce4 <datetimeToSeconds(datetime_t)+0xd1>
c000bccf:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000bcd5:	99                   	cdq    
c000bcd6:	f7 fd                	idiv   ebp
c000bcd8:	31 c0                	xor    eax,eax
c000bcda:	85 d2                	test   edx,edx
c000bcdc:	0f 94 c0             	sete   al
c000bcdf:	05 6d 01 00 00       	add    eax,0x16d
c000bce4:	01 c1                	add    ecx,eax
c000bce6:	43                   	inc    ebx
c000bce7:	39 f3                	cmp    ebx,esi
c000bce9:	7c cc                	jl     c000bcb7 <datetimeToSeconds(datetime_t)+0xa4>
c000bceb:	eb 3b                	jmp    c000bd28 <datetimeToSeconds(datetime_t)+0x115>
c000bced:	74 39                	je     c000bd28 <datetimeToSeconds(datetime_t)+0x115>
c000bcef:	b8 45 00 00 00       	mov    eax,0x45
c000bcf4:	89 c2                	mov    edx,eax
c000bcf6:	83 e2 03             	and    edx,0x3
c000bcf9:	39 f0                	cmp    eax,esi
c000bcfb:	7e 13                	jle    c000bd10 <datetimeToSeconds(datetime_t)+0xfd>
c000bcfd:	85 d2                	test   edx,edx
c000bcff:	0f 94 c2             	sete   dl
c000bd02:	48                   	dec    eax
c000bd03:	0f b6 d2             	movzx  edx,dl
c000bd06:	81 c2 6d 01 00 00    	add    edx,0x16d
c000bd0c:	29 d1                	sub    ecx,edx
c000bd0e:	eb e4                	jmp    c000bcf4 <datetimeToSeconds(datetime_t)+0xe1>
c000bd10:	b8 6d 01 00 00       	mov    eax,0x16d
c000bd15:	85 d2                	test   edx,edx
c000bd17:	75 0d                	jne    c000bd26 <datetimeToSeconds(datetime_t)+0x113>
c000bd19:	31 c0                	xor    eax,eax
c000bd1b:	66 85 db             	test   bx,bx
c000bd1e:	0f 95 c0             	setne  al
c000bd21:	05 6d 01 00 00       	add    eax,0x16d
c000bd26:	29 c1                	sub    ecx,eax
c000bd28:	b8 80 51 01 00       	mov    eax,0x15180
c000bd2d:	f7 e9                	imul   ecx
c000bd2f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bd33:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000bd37:	83 c4 14             	add    esp,0x14
c000bd3a:	5b                   	pop    ebx
c000bd3b:	5e                   	pop    esi
c000bd3c:	5f                   	pop    edi
c000bd3d:	5d                   	pop    ebp
c000bd3e:	c3                   	ret    
c000bd3f:	90                   	nop

c000bd40 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bd40:	57                   	push   edi
c000bd41:	56                   	push   esi
c000bd42:	53                   	push   ebx
c000bd43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd47:	8b 06                	mov    eax,DWORD PTR [esi]
c000bd49:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bd4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd54:	e8 ba fe ff ff       	call   c000bc13 <datetimeToSeconds(datetime_t)>
c000bd59:	59                   	pop    ecx
c000bd5a:	0f b6 0d b8 0a 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020ab8
c000bd61:	5b                   	pop    ebx
c000bd62:	03 0d bc 0a 02 c0    	add    ecx,DWORD PTR ds:0xc0020abc
c000bd68:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bd6e:	89 cb                	mov    ebx,ecx
c000bd70:	c1 fb 1f             	sar    ebx,0x1f
c000bd73:	29 c8                	sub    eax,ecx
c000bd75:	19 da                	sbb    edx,ebx
c000bd77:	31 c9                	xor    ecx,ecx
c000bd79:	80 3d b9 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020ab9,0x0
c000bd80:	74 05                	je     c000bd87 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bd82:	b9 08 07 00 00       	mov    ecx,0x708
c000bd87:	31 db                	xor    ebx,ebx
c000bd89:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bd8d:	29 c8                	sub    eax,ecx
c000bd8f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd93:	19 da                	sbb    edx,ebx
c000bd95:	89 f8                	mov    eax,edi
c000bd97:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd9b:	5b                   	pop    ebx
c000bd9c:	5e                   	pop    esi
c000bd9d:	5f                   	pop    edi
c000bd9e:	ff e0                	jmp    eax

c000bda0 <secondsToDatetime(unsigned long long)>:
c000bda0:	55                   	push   ebp
c000bda1:	57                   	push   edi
c000bda2:	56                   	push   esi
c000bda3:	53                   	push   ebx
c000bda4:	83 ec 1c             	sub    esp,0x1c
c000bda7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bdab:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bdaf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bdb3:	6a 00                	push   0x0
c000bdb5:	68 80 51 01 00       	push   0x15180
c000bdba:	55                   	push   ebp
c000bdbb:	57                   	push   edi
c000bdbc:	e8 6f 04 01 00       	call   c001c230 <__udivdi3>
c000bdc1:	83 c4 10             	add    esp,0x10
c000bdc4:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bdca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdce:	6a 00                	push   0x0
c000bdd0:	68 80 51 01 00       	push   0x15180
c000bdd5:	55                   	push   ebp
c000bdd6:	57                   	push   edi
c000bdd7:	bf 10 0e 00 00       	mov    edi,0xe10
c000bddc:	e8 4f 05 01 00       	call   c001c330 <__umoddi3>
c000bde1:	83 c4 10             	add    esp,0x10
c000bde4:	99                   	cdq    
c000bde5:	f7 ff                	idiv   edi
c000bde7:	bf 3c 00 00 00       	mov    edi,0x3c
c000bdec:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bdef:	89 d0                	mov    eax,edx
c000bdf1:	99                   	cdq    
c000bdf2:	f7 ff                	idiv   edi
c000bdf4:	85 db                	test   ebx,ebx
c000bdf6:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bdf9:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bdfc:	79 11                	jns    c000be0f <secondsToDatetime(unsigned long long)+0x6f>
c000bdfe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be02:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000be08:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be0d:	eb 07                	jmp    c000be16 <secondsToDatetime(unsigned long long)+0x76>
c000be0f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be14:	89 d8                	mov    eax,ebx
c000be16:	bf b4 05 00 00       	mov    edi,0x5b4
c000be1b:	99                   	cdq    
c000be1c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000be21:	f7 f9                	idiv   ecx
c000be23:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000be28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be2c:	31 d2                	xor    edx,edx
c000be2e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000be36:	01 c3                	add    ebx,eax
c000be38:	89 d8                	mov    eax,ebx
c000be3a:	f7 f1                	div    ecx
c000be3c:	31 d2                	xor    edx,edx
c000be3e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000be41:	89 d8                	mov    eax,ebx
c000be43:	f7 f7                	div    edi
c000be45:	31 d2                	xor    edx,edx
c000be47:	29 c1                	sub    ecx,eax
c000be49:	89 d8                	mov    eax,ebx
c000be4b:	f7 f5                	div    ebp
c000be4d:	bd 6d 01 00 00       	mov    ebp,0x16d
c000be52:	29 c1                	sub    ecx,eax
c000be54:	31 d2                	xor    edx,edx
c000be56:	89 c8                	mov    eax,ecx
c000be58:	f7 f5                	div    ebp
c000be5a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000be5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000be63:	31 d2                	xor    edx,edx
c000be65:	89 c8                	mov    eax,ecx
c000be67:	f7 f5                	div    ebp
c000be69:	31 d2                	xor    edx,edx
c000be6b:	01 c3                	add    ebx,eax
c000be6d:	89 c8                	mov    eax,ecx
c000be6f:	f7 f7                	div    edi
c000be71:	bf 99 00 00 00       	mov    edi,0x99
c000be76:	29 c3                	sub    ebx,eax
c000be78:	31 d2                	xor    edx,edx
c000be7a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000be82:	29 c3                	sub    ebx,eax
c000be84:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000be87:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000be8a:	bb 05 00 00 00       	mov    ebx,0x5
c000be8f:	83 c1 02             	add    ecx,0x2
c000be92:	89 c8                	mov    eax,ecx
c000be94:	f7 f7                	div    edi
c000be96:	31 d2                	xor    edx,edx
c000be98:	89 c7                	mov    edi,eax
c000be9a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bea0:	83 c0 02             	add    eax,0x2
c000bea3:	f7 f3                	div    ebx
c000bea5:	89 eb                	mov    ebx,ebp
c000bea7:	29 c3                	sub    ebx,eax
c000bea9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000beaf:	88 1e                	mov    BYTE PTR [esi],bl
c000beb1:	19 c0                	sbb    eax,eax
c000beb3:	31 d2                	xor    edx,edx
c000beb5:	83 e0 0c             	and    eax,0xc
c000beb8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bebc:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bec4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bec8:	83 f9 01             	cmp    ecx,0x1
c000becb:	0f 96 c2             	setbe  dl
c000bece:	41                   	inc    ecx
c000becf:	01 d0                	add    eax,edx
c000bed1:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bed4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bed8:	83 c4 1c             	add    esp,0x1c
c000bedb:	89 f0                	mov    eax,esi
c000bedd:	5b                   	pop    ebx
c000bede:	5e                   	pop    esi
c000bedf:	5f                   	pop    edi
c000bee0:	5d                   	pop    ebp
c000bee1:	c2 04 00             	ret    0x4

c000bee4 <Clock::timeInDatetimeLocal()>:
c000bee4:	53                   	push   ebx
c000bee5:	83 ec 14             	sub    esp,0x14
c000bee8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000beec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bef0:	e8 7d fc ff ff       	call   c000bb72 <Clock::timeInSecondsLocal()>
c000bef5:	83 c4 0c             	add    esp,0xc
c000bef8:	52                   	push   edx
c000bef9:	50                   	push   eax
c000befa:	53                   	push   ebx
c000befb:	e8 a0 fe ff ff       	call   c000bda0 <secondsToDatetime(unsigned long long)>
c000bf00:	89 d8                	mov    eax,ebx
c000bf02:	83 c4 14             	add    esp,0x14
c000bf05:	5b                   	pop    ebx
c000bf06:	c2 04 00             	ret    0x4
c000bf09:	90                   	nop

c000bf0a <Device::hibernate()>:
c000bf0a:	c3                   	ret    
c000bf0b:	90                   	nop

c000bf0c <Device::wake()>:
c000bf0c:	c3                   	ret    
c000bf0d:	90                   	nop

c000bf0e <Device::detect()>:
c000bf0e:	c3                   	ret    
c000bf0f:	90                   	nop

c000bf10 <Device::disableLegacy()>:
c000bf10:	c3                   	ret    
c000bf11:	90                   	nop

c000bf12 <Device::powerSaving(PowerSavingLevel)>:
c000bf12:	c3                   	ret    
c000bf13:	90                   	nop

c000bf14 <DriverlessDevice::close(int, int, void*)>:
c000bf14:	31 c0                	xor    eax,eax
c000bf16:	c3                   	ret    
c000bf17:	90                   	nop

c000bf18 <DriverlessDevice::detect()>:
c000bf18:	c3                   	ret    
c000bf19:	90                   	nop

c000bf1a <DriverlessDevice::open(int, int, void*)>:
c000bf1a:	83 ec 18             	sub    esp,0x18
c000bf1d:	68 f0 df 01 c0       	push   0xc001dff0
c000bf22:	e8 c4 47 00 00       	call   c00106eb <Krnl::panic(char const*)>
c000bf27:	83 c8 ff             	or     eax,0xffffffff
c000bf2a:	83 c4 1c             	add    esp,0x1c
c000bf2d:	c3                   	ret    

c000bf2e <Device::~Device()>:
c000bf2e:	ba 50 e0 01 c0       	mov    edx,0xc001e050
c000bf33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf37:	89 10                	mov    DWORD PTR [eax],edx
c000bf39:	90                   	nop
c000bf3a:	c3                   	ret    
c000bf3b:	90                   	nop

c000bf3c <Device::~Device()>:
c000bf3c:	83 ec 0c             	sub    esp,0xc
c000bf3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bf43:	e8 e6 ff ff ff       	call   c000bf2e <Device::~Device()>
c000bf48:	83 c4 04             	add    esp,0x4
c000bf4b:	83 ec 08             	sub    esp,0x8
c000bf4e:	68 58 01 00 00       	push   0x158
c000bf53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf57:	e8 9a eb ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000bf5c:	83 c4 10             	add    esp,0x10
c000bf5f:	83 c4 0c             	add    esp,0xc
c000bf62:	c3                   	ret    
c000bf63:	90                   	nop

c000bf64 <Device::findAndLoadDriver()>:
c000bf64:	c7 44 24 04 0e e0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e00e
c000bf6c:	e9 7b ec ff ff       	jmp    c000abec <Dbg::kprintf(char const*, ...)>
c000bf71:	90                   	nop

c000bf72 <Device::preOpenPCI(PCIDeviceInfo)>:
c000bf72:	57                   	push   edi
c000bf73:	b9 09 00 00 00       	mov    ecx,0x9
c000bf78:	56                   	push   esi
c000bf79:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bf7d:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bf81:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bf8b:	81 c7 18 01 00 00    	add    edi,0x118
c000bf91:	fc                   	cld    
c000bf92:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bf94:	5e                   	pop    esi
c000bf95:	5f                   	pop    edi
c000bf96:	c3                   	ret    
c000bf97:	90                   	nop

c000bf98 <Device::preOpenACPI(void*, char*, char*)>:
c000bf98:	57                   	push   edi
c000bf99:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bf9e:	56                   	push   esi
c000bf9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfa3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfa7:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bfb1:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bfb7:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bfbd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bfc1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfc3:	b9 0e 00 00 00       	mov    ecx,0xe
c000bfc8:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bfce:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bfd2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfd4:	5e                   	pop    esi
c000bfd5:	5f                   	pop    edi
c000bfd6:	c3                   	ret    
c000bfd7:	90                   	nop

c000bfd8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bfd8:	53                   	push   ebx
c000bfd9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bfdd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bfe1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bfe5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bfe9:	0f b6 c0             	movzx  eax,al
c000bfec:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bff0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bff4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bff8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bffc:	5b                   	pop    ebx
c000bffd:	e9 a6 05 00 00       	jmp    c000c5a8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c002 <Device::getParent()>:
c000c002:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c006:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c00c:	c3                   	ret    
c000c00d:	90                   	nop

c000c00e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c00e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c012:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c016:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c01b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c01f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c023:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c027:	e9 e8 06 00 00       	jmp    c000c714 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c02c <Device::addChild(Device*)>:
c000c02c:	53                   	push   ebx
c000c02d:	83 ec 08             	sub    esp,0x8
c000c030:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c034:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c038:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c03e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c044:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c046:	85 d2                	test   edx,edx
c000c048:	74 04                	je     c000c04e <Device::addChild(Device*)+0x22>
c000c04a:	89 d3                	mov    ebx,edx
c000c04c:	eb f6                	jmp    c000c044 <Device::addChild(Device*)+0x18>
c000c04e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c051:	83 ec 0c             	sub    esp,0xc
c000c054:	6a 08                	push   0x8
c000c056:	e8 02 be ff ff       	call   c0007e5d <malloc>
c000c05b:	89 03                	mov    DWORD PTR [ebx],eax
c000c05d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c063:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c06a:	83 c4 18             	add    esp,0x18
c000c06d:	5b                   	pop    ebx
c000c06e:	c3                   	ret    
c000c06f:	90                   	nop

c000c070 <Device::removeAllChildren()>:
c000c070:	56                   	push   esi
c000c071:	53                   	push   ebx
c000c072:	52                   	push   edx
c000c073:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c077:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c07d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c080:	74 17                	je     c000c099 <Device::removeAllChildren()+0x29>
c000c082:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c085:	85 c0                	test   eax,eax
c000c087:	74 0c                	je     c000c095 <Device::removeAllChildren()+0x25>
c000c089:	83 ec 0c             	sub    esp,0xc
c000c08c:	8b 10                	mov    edx,DWORD PTR [eax]
c000c08e:	50                   	push   eax
c000c08f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c092:	83 c4 10             	add    esp,0x10
c000c095:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c097:	eb e4                	jmp    c000c07d <Device::removeAllChildren()+0xd>
c000c099:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c09f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c0a5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c0ab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c0b2:	58                   	pop    eax
c000c0b3:	5b                   	pop    ebx
c000c0b4:	5e                   	pop    esi
c000c0b5:	c3                   	ret    

c000c0b6 <Device::hibernateAll()>:
c000c0b6:	53                   	push   ebx
c000c0b7:	83 ec 14             	sub    esp,0x14
c000c0ba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0be:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0c0:	53                   	push   ebx
c000c0c1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c0c4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0ca:	83 c4 10             	add    esp,0x10
c000c0cd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0d0:	74 0f                	je     c000c0e1 <Device::hibernateAll()+0x2b>
c000c0d2:	83 ec 0c             	sub    esp,0xc
c000c0d5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0d8:	e8 d9 ff ff ff       	call   c000c0b6 <Device::hibernateAll()>
c000c0dd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0df:	eb e9                	jmp    c000c0ca <Device::hibernateAll()+0x14>
c000c0e1:	83 c4 08             	add    esp,0x8
c000c0e4:	5b                   	pop    ebx
c000c0e5:	c3                   	ret    

c000c0e6 <Device::wakeAll()>:
c000c0e6:	53                   	push   ebx
c000c0e7:	83 ec 14             	sub    esp,0x14
c000c0ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0f0:	53                   	push   ebx
c000c0f1:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c0f4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0fa:	83 c4 10             	add    esp,0x10
c000c0fd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c100:	74 0f                	je     c000c111 <Device::wakeAll()+0x2b>
c000c102:	83 ec 0c             	sub    esp,0xc
c000c105:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c108:	e8 d9 ff ff ff       	call   c000c0e6 <Device::wakeAll()>
c000c10d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c10f:	eb e9                	jmp    c000c0fa <Device::wakeAll()+0x14>
c000c111:	83 c4 08             	add    esp,0x8
c000c114:	5b                   	pop    ebx
c000c115:	c3                   	ret    

c000c116 <Device::detectAll()>:
c000c116:	53                   	push   ebx
c000c117:	83 ec 14             	sub    esp,0x14
c000c11a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c11e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c120:	53                   	push   ebx
c000c121:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c124:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c12a:	83 c4 10             	add    esp,0x10
c000c12d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c130:	74 0f                	je     c000c141 <Device::detectAll()+0x2b>
c000c132:	83 ec 0c             	sub    esp,0xc
c000c135:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c138:	e8 d9 ff ff ff       	call   c000c116 <Device::detectAll()>
c000c13d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c13f:	eb e9                	jmp    c000c12a <Device::detectAll()+0x14>
c000c141:	83 c4 08             	add    esp,0x8
c000c144:	5b                   	pop    ebx
c000c145:	c3                   	ret    

c000c146 <Device::disableLegacyAll()>:
c000c146:	c3                   	ret    
c000c147:	90                   	nop

c000c148 <Device::loadDriversForAll()>:
c000c148:	c3                   	ret    
c000c149:	90                   	nop

c000c14a <Device::closeAll()>:
c000c14a:	53                   	push   ebx
c000c14b:	83 ec 08             	sub    esp,0x8
c000c14e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c152:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c154:	6a 00                	push   0x0
c000c156:	6a 00                	push   0x0
c000c158:	6a 00                	push   0x0
c000c15a:	53                   	push   ebx
c000c15b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c15e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c164:	83 c4 10             	add    esp,0x10
c000c167:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c16a:	74 0f                	je     c000c17b <Device::closeAll()+0x31>
c000c16c:	83 ec 0c             	sub    esp,0xc
c000c16f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c172:	e8 d3 ff ff ff       	call   c000c14a <Device::closeAll()>
c000c177:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c179:	eb e9                	jmp    c000c164 <Device::closeAll()+0x1a>
c000c17b:	83 c4 08             	add    esp,0x8
c000c17e:	5b                   	pop    ebx
c000c17f:	c3                   	ret    

c000c180 <Device::powerSavingAll(PowerSavingLevel)>:
c000c180:	56                   	push   esi
c000c181:	53                   	push   ebx
c000c182:	83 ec 0c             	sub    esp,0xc
c000c185:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c189:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c18d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c18f:	56                   	push   esi
c000c190:	53                   	push   ebx
c000c191:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c194:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c19a:	83 c4 10             	add    esp,0x10
c000c19d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c1a0:	74 0f                	je     c000c1b1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c1a2:	52                   	push   edx
c000c1a3:	52                   	push   edx
c000c1a4:	56                   	push   esi
c000c1a5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c1a8:	e8 d3 ff ff ff       	call   c000c180 <Device::powerSavingAll(PowerSavingLevel)>
c000c1ad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c1af:	eb e9                	jmp    c000c19a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c1b1:	58                   	pop    eax
c000c1b2:	5b                   	pop    ebx
c000c1b3:	5e                   	pop    esi
c000c1b4:	c3                   	ret    
c000c1b5:	90                   	nop

c000c1b6 <Device::setName(char const*)>:
c000c1b6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c1be:	e9 5d 44 ff ff       	jmp    c0000620 <strcpy>
c000c1c3:	90                   	nop

c000c1c4 <Device::Device(char const*)>:
c000c1c4:	83 ec 1c             	sub    esp,0x1c
c000c1c7:	ba 50 e0 01 c0       	mov    edx,0xc001e050
c000c1cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1d0:	89 10                	mov    DWORD PTR [eax],edx
c000c1d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1d6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c1e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1e4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c1ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1f2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c1fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c200:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c20a:	83 ec 08             	sub    esp,0x8
c000c20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c211:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c215:	e8 9c ff ff ff       	call   c000c1b6 <Device::setName(char const*)>
c000c21a:	83 c4 10             	add    esp,0x10
c000c21d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c225:	83 ec 0c             	sub    esp,0xc
c000c228:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c22c:	e8 2c bc ff ff       	call   c0007e5d <malloc>
c000c231:	83 c4 10             	add    esp,0x10
c000c234:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c23a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c241:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c245:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c24b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c24f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c255:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c25b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c25f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c265:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c26c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c270:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c277:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c27b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c286:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c290:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c294:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c29e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2a2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c2ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2b0:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c2ba:	90                   	nop
c000c2bb:	83 c4 1c             	add    esp,0x1c
c000c2be:	c3                   	ret    
c000c2bf:	90                   	nop

c000c2c0 <Device::getName()>:
c000c2c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c2c4:	05 d0 00 00 00       	add    eax,0xd0
c000c2c9:	c3                   	ret    

c000c2ca <DriverlessDevice::DriverlessDevice(char const*)>:
c000c2ca:	83 ec 0c             	sub    esp,0xc
c000c2cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2d1:	83 ec 08             	sub    esp,0x8
c000c2d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2d8:	50                   	push   eax
c000c2d9:	e8 e6 fe ff ff       	call   c000c1c4 <Device::Device(char const*)>
c000c2de:	83 c4 10             	add    esp,0x10
c000c2e1:	ba 7c e0 01 c0       	mov    edx,0xc001e07c
c000c2e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2ea:	89 10                	mov    DWORD PTR [eax],edx
c000c2ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2f0:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000c2fa:	90                   	nop
c000c2fb:	83 c4 0c             	add    esp,0xc
c000c2fe:	c3                   	ret    
c000c2ff:	90                   	nop

c000c300 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c300:	57                   	push   edi
c000c301:	56                   	push   esi
c000c302:	53                   	push   ebx
c000c303:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c307:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c30b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c30f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c315:	75 0c                	jne    c000c323 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c317:	52                   	push   edx
c000c318:	52                   	push   edx
c000c319:	53                   	push   ebx
c000c31a:	56                   	push   esi
c000c31b:	e8 c2 03 01 00       	call   c001c6e2 <LinkedList<Device>::addElement(Device*)>
c000c320:	83 c4 10             	add    esp,0x10
c000c323:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c329:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c32c:	74 12                	je     c000c340 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c32e:	50                   	push   eax
c000c32f:	57                   	push   edi
c000c330:	56                   	push   esi
c000c331:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c334:	e8 c7 ff ff ff       	call   c000c300 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c339:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c33b:	83 c4 10             	add    esp,0x10
c000c33e:	eb e9                	jmp    c000c329 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c340:	5b                   	pop    ebx
c000c341:	5e                   	pop    esi
c000c342:	5f                   	pop    edi
c000c343:	c3                   	ret    

c000c344 <getDevicesOfType(DeviceType)>:
c000c344:	53                   	push   ebx
c000c345:	83 ec 14             	sub    esp,0x14
c000c348:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c34c:	53                   	push   ebx
c000c34d:	e8 6c 04 01 00       	call   c001c7be <LinkedList<Device>::LinkedList()>
c000c352:	83 c4 0c             	add    esp,0xc
c000c355:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c359:	53                   	push   ebx
c000c35a:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c000c360:	e8 9b ff ff ff       	call   c000c300 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c365:	89 d8                	mov    eax,ebx
c000c367:	83 c4 18             	add    esp,0x18
c000c36a:	5b                   	pop    ebx
c000c36b:	c2 04 00             	ret    0x4
c000c36e:	66 90                	xchg   ax,ax

c000c370 <HardDiskController::HardDiskController(char const*)>:
c000c370:	83 ec 0c             	sub    esp,0xc
c000c373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c377:	83 ec 08             	sub    esp,0x8
c000c37a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c37e:	50                   	push   eax
c000c37f:	e8 40 fe ff ff       	call   c000c1c4 <Device::Device(char const*)>
c000c384:	83 c4 10             	add    esp,0x10
c000c387:	ba a8 e0 01 c0       	mov    edx,0xc001e0a8
c000c38c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c390:	89 10                	mov    DWORD PTR [eax],edx
c000c392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c396:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c3a0:	90                   	nop
c000c3a1:	83 c4 0c             	add    esp,0xc
c000c3a4:	c3                   	ret    
c000c3a5:	90                   	nop
c000c3a6:	66 90                	xchg   ax,ax

c000c3a8 <HardDiskController::~HardDiskController()>:
c000c3a8:	83 ec 0c             	sub    esp,0xc
c000c3ab:	ba a8 e0 01 c0       	mov    edx,0xc001e0a8
c000c3b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3b4:	89 10                	mov    DWORD PTR [eax],edx
c000c3b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3ba:	83 ec 0c             	sub    esp,0xc
c000c3bd:	50                   	push   eax
c000c3be:	e8 6b fb ff ff       	call   c000bf2e <Device::~Device()>
c000c3c3:	83 c4 10             	add    esp,0x10
c000c3c6:	90                   	nop
c000c3c7:	83 c4 0c             	add    esp,0xc
c000c3ca:	c3                   	ret    
c000c3cb:	90                   	nop

c000c3cc <HardDiskController::~HardDiskController()>:
c000c3cc:	83 ec 0c             	sub    esp,0xc
c000c3cf:	83 ec 0c             	sub    esp,0xc
c000c3d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3d6:	e8 cd ff ff ff       	call   c000c3a8 <HardDiskController::~HardDiskController()>
c000c3db:	83 c4 10             	add    esp,0x10
c000c3de:	83 ec 08             	sub    esp,0x8
c000c3e1:	68 58 01 00 00       	push   0x158
c000c3e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ea:	e8 07 e7 ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000c3ef:	83 c4 10             	add    esp,0x10
c000c3f2:	83 c4 0c             	add    esp,0xc
c000c3f5:	c3                   	ret    

c000c3f6 <PhysicalDisk::eject()>:
c000c3f6:	83 c8 ff             	or     eax,0xffffffff
c000c3f9:	c3                   	ret    

c000c3fa <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c3fa:	83 ec 0c             	sub    esp,0xc
c000c3fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c401:	83 ec 08             	sub    esp,0x8
c000c404:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c408:	50                   	push   eax
c000c409:	e8 b6 fd ff ff       	call   c000c1c4 <Device::Device(char const*)>
c000c40e:	83 c4 10             	add    esp,0x10
c000c411:	ba d4 e0 01 c0       	mov    edx,0xc001e0d4
c000c416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41a:	89 10                	mov    DWORD PTR [eax],edx
c000c41c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c420:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c42b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c436:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c444:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c448:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c452:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c45c:	90                   	nop
c000c45d:	83 c4 0c             	add    esp,0xc
c000c460:	c3                   	ret    
c000c461:	90                   	nop

c000c462 <PhysicalDisk::startCache()>:
c000c462:	56                   	push   esi
c000c463:	53                   	push   ebx
c000c464:	83 ec 10             	sub    esp,0x10
c000c467:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c46b:	6a 44                	push   0x44
c000c46d:	e8 eb b9 ff ff       	call   c0007e5d <malloc>
c000c472:	89 c6                	mov    esi,eax
c000c474:	58                   	pop    eax
c000c475:	5a                   	pop    edx
c000c476:	53                   	push   ebx
c000c477:	56                   	push   esi
c000c478:	e8 ab 15 00 00       	call   c000da28 <VCache::VCache(PhysicalDisk*)>
c000c47d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c483:	83 c4 14             	add    esp,0x14
c000c486:	5b                   	pop    ebx
c000c487:	5e                   	pop    esi
c000c488:	c3                   	ret    
c000c489:	90                   	nop

c000c48a <PhysicalDisk::~PhysicalDisk()>:
c000c48a:	83 ec 0c             	sub    esp,0xc
c000c48d:	ba d4 e0 01 c0       	mov    edx,0xc001e0d4
c000c492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c496:	89 10                	mov    DWORD PTR [eax],edx
c000c498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c49c:	83 ec 0c             	sub    esp,0xc
c000c49f:	50                   	push   eax
c000c4a0:	e8 89 fa ff ff       	call   c000bf2e <Device::~Device()>
c000c4a5:	83 c4 10             	add    esp,0x10
c000c4a8:	90                   	nop
c000c4a9:	83 c4 0c             	add    esp,0xc
c000c4ac:	c3                   	ret    
c000c4ad:	90                   	nop

c000c4ae <PhysicalDisk::~PhysicalDisk()>:
c000c4ae:	83 ec 0c             	sub    esp,0xc
c000c4b1:	83 ec 0c             	sub    esp,0xc
c000c4b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4b8:	e8 cd ff ff ff       	call   c000c48a <PhysicalDisk::~PhysicalDisk()>
c000c4bd:	83 c4 10             	add    esp,0x10
c000c4c0:	83 ec 08             	sub    esp,0x8
c000c4c3:	68 6c 01 00 00       	push   0x16c
c000c4c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4cc:	e8 25 e6 ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000c4d1:	83 c4 10             	add    esp,0x10
c000c4d4:	83 c4 0c             	add    esp,0xc
c000c4d7:	c3                   	ret    

c000c4d8 <int_handler>:
c000c4d8:	55                   	push   ebp
c000c4d9:	57                   	push   edi
c000c4da:	56                   	push   esi
c000c4db:	53                   	push   ebx
c000c4dc:	83 ec 0c             	sub    esp,0xc
c000c4df:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c4e3:	80 3d 40 34 02 c0 00 	cmp    BYTE PTR ds:0xc0023440,0x0
c000c4ea:	74 0b                	je     c000c4f7 <int_handler+0x1f>
c000c4ec:	fa                   	cli    
c000c4ed:	f4                   	hlt    
c000c4ee:	80 3d 40 34 02 c0 00 	cmp    BYTE PTR ds:0xc0023440,0x0
c000c4f5:	75 f5                	jne    c000c4ec <int_handler+0x14>
c000c4f7:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c4fa:	8d 46 e0             	lea    eax,[esi-0x20]
c000c4fd:	83 f8 17             	cmp    eax,0x17
c000c500:	76 3e                	jbe    c000c540 <int_handler+0x68>
c000c502:	c1 e6 04             	shl    esi,0x4
c000c505:	31 db                	xor    ebx,ebx
c000c507:	8d ae c0 1a 02 c0    	lea    ebp,[esi-0x3ffde540]
c000c50d:	81 c6 c0 0a 02 c0    	add    esi,0xc0020ac0
c000c513:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c517:	85 c0                	test   eax,eax
c000c519:	74 13                	je     c000c52e <int_handler+0x56>
c000c51b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c51e:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c522:	74 2a                	je     c000c54e <int_handler+0x76>
c000c524:	83 ec 08             	sub    esp,0x8
c000c527:	52                   	push   edx
c000c528:	57                   	push   edi
c000c529:	ff d0                	call   eax
c000c52b:	83 c4 10             	add    esp,0x10
c000c52e:	43                   	inc    ebx
c000c52f:	83 fb 04             	cmp    ebx,0x4
c000c532:	75 df                	jne    c000c513 <int_handler+0x3b>
c000c534:	83 c4 0c             	add    esp,0xc
c000c537:	31 c0                	xor    eax,eax
c000c539:	5b                   	pop    ebx
c000c53a:	31 d2                	xor    edx,edx
c000c53c:	5e                   	pop    esi
c000c53d:	5f                   	pop    edi
c000c53e:	5d                   	pop    ebp
c000c53f:	c3                   	ret    
c000c540:	83 ec 0c             	sub    esp,0xc
c000c543:	50                   	push   eax
c000c544:	e8 f2 94 00 00       	call   c0015a3b <HalEndOfInterrupt(int)>
c000c549:	83 c4 10             	add    esp,0x10
c000c54c:	eb b4                	jmp    c000c502 <int_handler+0x2a>
c000c54e:	83 ec 08             	sub    esp,0x8
c000c551:	52                   	push   edx
c000c552:	57                   	push   edi
c000c553:	ff d0                	call   eax
c000c555:	83 c4 10             	add    esp,0x10
c000c558:	83 c4 0c             	add    esp,0xc
c000c55b:	5b                   	pop    ebx
c000c55c:	5e                   	pop    esi
c000c55d:	5f                   	pop    edi
c000c55e:	5d                   	pop    ebp
c000c55f:	c3                   	ret    

c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c560:	56                   	push   esi
c000c561:	31 c0                	xor    eax,eax
c000c563:	53                   	push   ebx
c000c564:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c568:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c56c:	89 ca                	mov    edx,ecx
c000c56e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c572:	c1 e2 04             	shl    edx,0x4
c000c575:	83 bc 82 c0 1a 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffde540],0x0
c000c57d:	74 15                	je     c000c594 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000c57f:	40                   	inc    eax
c000c580:	83 f8 04             	cmp    eax,0x4
c000c583:	75 f0                	jne    c000c575 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c585:	c7 44 24 0c 04 e1 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e104
c000c58d:	5b                   	pop    ebx
c000c58e:	5e                   	pop    esi
c000c58f:	e9 57 41 00 00       	jmp    c00106eb <Krnl::panic(char const*)>
c000c594:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c597:	89 1c 85 c0 1a 02 c0 	mov    DWORD PTR [eax*4-0x3ffde540],ebx
c000c59e:	89 34 85 c0 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf540],esi
c000c5a5:	5b                   	pop    ebx
c000c5a6:	5e                   	pop    esi
c000c5a7:	c3                   	ret    

c000c5a8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c5a8:	57                   	push   edi
c000c5a9:	8b 15 b8 09 02 c0    	mov    edx,DWORD PTR ds:0xc00209b8
c000c5af:	56                   	push   esi
c000c5b0:	53                   	push   ebx
c000c5b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c5b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c5b9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c5c0:	74 5b                	je     c000c61d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c5c2:	89 c7                	mov    edi,eax
c000c5c4:	84 c0                	test   al,al
c000c5c6:	74 24                	je     c000c5ec <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c5c8:	83 fe 0f             	cmp    esi,0xf
c000c5cb:	0f 8f d9 00 00 00    	jg     c000c6aa <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000c5d1:	8a 86 20 f9 01 c0    	mov    al,BYTE PTR [esi-0x3ffe06e0]
c000c5d7:	25 ff 00 00 00       	and    eax,0xff
c000c5dc:	66 8b bc 00 60 32 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdcda0]
c000c5e4:	89 c6                	mov    esi,eax
c000c5e6:	66 d1 ef             	shr    di,1
c000c5e9:	83 e7 01             	and    edi,0x1
c000c5ec:	83 ec 08             	sub    esp,0x8
c000c5ef:	a1 80 48 02 c0       	mov    eax,ds:0xc0024880
c000c5f4:	31 db                	xor    ebx,ebx
c000c5f6:	50                   	push   eax
c000c5f7:	68 11 e1 01 c0       	push   0xc001e111
c000c5fc:	e8 eb e5 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000c601:	83 c4 10             	add    esp,0x10
c000c604:	a1 80 48 02 c0       	mov    eax,ds:0xc0024880
c000c609:	85 c0                	test   eax,eax
c000c60b:	7f 51                	jg     c000c65e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c60d:	83 ec 0c             	sub    esp,0xc
c000c610:	68 28 e1 01 c0       	push   0xc001e128
c000c615:	e8 d1 40 00 00       	call   c00106eb <Krnl::panic(char const*)>
c000c61a:	83 c4 10             	add    esp,0x10
c000c61d:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c620:	31 d2                	xor    edx,edx
c000c622:	89 c8                	mov    eax,ecx
c000c624:	c1 e0 04             	shl    eax,0x4
c000c627:	8b 9c 90 c0 1a 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffde540]
c000c62e:	85 db                	test   ebx,ebx
c000c630:	0f 84 8b 00 00 00    	je     c000c6c1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c636:	42                   	inc    edx
c000c637:	83 fa 04             	cmp    edx,0x4
c000c63a:	75 eb                	jne    c000c627 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c63c:	83 ec 0c             	sub    esp,0xc
c000c63f:	68 7c e1 01 c0       	push   0xc001e17c
c000c644:	e8 a2 40 00 00       	call   c00106eb <Krnl::panic(char const*)>
c000c649:	83 c4 10             	add    esp,0x10
c000c64c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c651:	5b                   	pop    ebx
c000c652:	5e                   	pop    esi
c000c653:	5f                   	pop    edi
c000c654:	c3                   	ret    
c000c655:	43                   	inc    ebx
c000c656:	39 1d 80 48 02 c0    	cmp    DWORD PTR ds:0xc0024880,ebx
c000c65c:	7e af                	jle    c000c60d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c65e:	83 ec 08             	sub    esp,0x8
c000c661:	8b 04 9d a0 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb760]
c000c668:	56                   	push   esi
c000c669:	50                   	push   eax
c000c66a:	e8 9b f0 00 00       	call   c001b70a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c66f:	83 c4 10             	add    esp,0x10
c000c672:	84 c0                	test   al,al
c000c674:	74 df                	je     c000c655 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c676:	81 e7 ff 00 00 00    	and    edi,0xff
c000c67c:	50                   	push   eax
c000c67d:	8d 46 20             	lea    eax,[esi+0x20]
c000c680:	57                   	push   edi
c000c681:	25 ff 00 00 00       	and    eax,0xff
c000c686:	6a 00                	push   0x0
c000c688:	50                   	push   eax
c000c689:	89 f0                	mov    eax,esi
c000c68b:	6a 00                	push   0x0
c000c68d:	25 ff 00 00 00       	and    eax,0xff
c000c692:	6a 00                	push   0x0
c000c694:	50                   	push   eax
c000c695:	8b 04 9d a0 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb760]
c000c69c:	50                   	push   eax
c000c69d:	e8 e2 f1 00 00       	call   c001b884 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c6a2:	83 c4 20             	add    esp,0x20
c000c6a5:	e9 73 ff ff ff       	jmp    c000c61d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c6aa:	83 ec 0c             	sub    esp,0xc
c000c6ad:	31 ff                	xor    edi,edi
c000c6af:	68 44 e1 01 c0       	push   0xc001e144
c000c6b4:	e8 32 40 00 00       	call   c00106eb <Krnl::panic(char const*)>
c000c6b9:	83 c4 10             	add    esp,0x10
c000c6bc:	e9 2b ff ff ff       	jmp    c000c5ec <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c6c1:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c6c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6c8:	89 14 85 c0 1a 02 c0 	mov    DWORD PTR [eax*4-0x3ffde540],edx
c000c6cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c6d3:	5b                   	pop    ebx
c000c6d4:	89 14 85 c0 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf540],edx
c000c6db:	89 f0                	mov    eax,esi
c000c6dd:	5e                   	pop    esi
c000c6de:	5f                   	pop    edi
c000c6df:	c3                   	ret    

c000c6e0 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c6e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c6e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c6e8:	c1 e0 04             	shl    eax,0x4
c000c6eb:	8d 50 10             	lea    edx,[eax+0x10]
c000c6ee:	39 88 c0 1a 02 c0    	cmp    DWORD PTR [eax-0x3ffde540],ecx
c000c6f4:	74 08                	je     c000c6fe <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c6f6:	83 c0 04             	add    eax,0x4
c000c6f9:	39 d0                	cmp    eax,edx
c000c6fb:	75 f1                	jne    c000c6ee <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c6fd:	c3                   	ret    
c000c6fe:	c7 80 c0 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde540],0x0
c000c708:	c7 80 c0 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf540],0x0
c000c712:	eb e2                	jmp    c000c6f6 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c714 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c714:	53                   	push   ebx
c000c715:	83 ec 08             	sub    esp,0x8
c000c718:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c71c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c721:	74 0e                	je     c000c731 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c723:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000c728:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c72f:	75 37                	jne    c000c768 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c735:	83 c0 20             	add    eax,0x20
c000c738:	c1 e0 04             	shl    eax,0x4
c000c73b:	8d 50 10             	lea    edx,[eax+0x10]
c000c73e:	39 98 c0 1a 02 c0    	cmp    DWORD PTR [eax-0x3ffde540],ebx
c000c744:	74 0c                	je     c000c752 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c746:	83 c0 04             	add    eax,0x4
c000c749:	39 d0                	cmp    eax,edx
c000c74b:	75 f1                	jne    c000c73e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c74d:	83 c4 08             	add    esp,0x8
c000c750:	5b                   	pop    ebx
c000c751:	c3                   	ret    
c000c752:	c7 80 c0 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde540],0x0
c000c75c:	c7 80 c0 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf540],0x0
c000c766:	eb de                	jmp    c000c746 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c768:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c76d:	7f 12                	jg     c000c781 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c76f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c773:	31 c0                	xor    eax,eax
c000c775:	8a 81 20 f9 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe06e0]
c000c77b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c77f:	eb b0                	jmp    c000c731 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c781:	83 ec 0c             	sub    esp,0xc
c000c784:	68 35 e1 01 c0       	push   0xc001e135
c000c789:	e8 5d 3f 00 00       	call   c00106eb <Krnl::panic(char const*)>
c000c78e:	83 c4 10             	add    esp,0x10
c000c791:	eb 9e                	jmp    c000c731 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c793 <setupINTS()>:
c000c793:	31 c0                	xor    eax,eax
c000c795:	c7 80 c0 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde540],0x0
c000c79f:	c7 80 c0 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf540],0x0
c000c7a9:	c7 80 c4 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde53c],0x0
c000c7b3:	c7 80 c4 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf53c],0x0
c000c7bd:	c7 80 c8 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde538],0x0
c000c7c7:	c7 80 c8 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf538],0x0
c000c7d1:	c7 80 cc 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde534],0x0
c000c7db:	c7 80 cc 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf534],0x0
c000c7e5:	83 c0 10             	add    eax,0x10
c000c7e8:	3d 00 10 00 00       	cmp    eax,0x1000
c000c7ed:	75 a6                	jne    c000c795 <setupINTS()+0x2>
c000c7ef:	c3                   	ret    

c000c7f0 <convertLegacyIRQNumber(int)>:
c000c7f0:	83 ec 0c             	sub    esp,0xc
c000c7f3:	8b 15 b8 09 02 c0    	mov    edx,DWORD PTR ds:0xc00209b8
c000c7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7fd:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c804:	74 0f                	je     c000c815 <convertLegacyIRQNumber(int)+0x25>
c000c806:	83 f8 0f             	cmp    eax,0xf
c000c809:	7f 0e                	jg     c000c819 <convertLegacyIRQNumber(int)+0x29>
c000c80b:	31 c9                	xor    ecx,ecx
c000c80d:	8a 88 20 f9 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe06e0]
c000c813:	89 c8                	mov    eax,ecx
c000c815:	83 c4 0c             	add    esp,0xc
c000c818:	c3                   	ret    
c000c819:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c81d:	83 ec 0c             	sub    esp,0xc
c000c820:	68 44 e1 01 c0       	push   0xc001e144
c000c825:	e8 c1 3e 00 00       	call   c00106eb <Krnl::panic(char const*)>
c000c82a:	83 c4 10             	add    esp,0x10
c000c82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c831:	83 c4 0c             	add    esp,0xc
c000c834:	c3                   	ret    
c000c835:	90                   	nop

c000c836 <startGUI(void*)>:
c000c836:	55                   	push   ebp
c000c837:	89 e5                	mov    ebp,esp
c000c839:	53                   	push   ebx
c000c83a:	83 ec 04             	sub    esp,0x4
c000c83d:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000c842:	48                   	dec    eax
c000c843:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000c848:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000c84d:	85 c0                	test   eax,eax
c000c84f:	75 01                	jne    c000c852 <startGUI(void*)+0x1c>
c000c851:	fb                   	sti    
c000c852:	8b 1d b8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209b8
c000c858:	83 ec 08             	sub    esp,0x8
c000c85b:	6a 01                	push   0x1
c000c85d:	68 a1 e1 01 c0       	push   0xc001e1a1
c000c862:	e8 e7 67 00 00       	call   c001304e <Thr::loadDLL(char const*, bool)>
c000c867:	83 c4 10             	add    esp,0x10
c000c86a:	83 ec 08             	sub    esp,0x8
c000c86d:	53                   	push   ebx
c000c86e:	50                   	push   eax
c000c86f:	e8 0b 6a 00 00       	call   c001327f <Thr::executeDLL(unsigned long, void*)>
c000c874:	83 c4 10             	add    esp,0x10
c000c877:	8b 1d b8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209b8
c000c87d:	83 ec 08             	sub    esp,0x8
c000c880:	6a 01                	push   0x1
c000c882:	68 bb e1 01 c0       	push   0xc001e1bb
c000c887:	e8 c2 67 00 00       	call   c001304e <Thr::loadDLL(char const*, bool)>
c000c88c:	83 c4 10             	add    esp,0x10
c000c88f:	83 ec 08             	sub    esp,0x8
c000c892:	53                   	push   ebx
c000c893:	50                   	push   eax
c000c894:	e8 e6 69 00 00       	call   c001327f <Thr::executeDLL(unsigned long, void*)>
c000c899:	83 c4 10             	add    esp,0x10
c000c89c:	90                   	nop
c000c89d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c8a0:	c9                   	leave  
c000c8a1:	c3                   	ret    

c000c8a2 <startGUIVESA(void*)>:
c000c8a2:	55                   	push   ebp
c000c8a3:	89 e5                	mov    ebp,esp
c000c8a5:	53                   	push   ebx
c000c8a6:	83 ec 04             	sub    esp,0x4
c000c8a9:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000c8ae:	48                   	dec    eax
c000c8af:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000c8b4:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000c8b9:	85 c0                	test   eax,eax
c000c8bb:	75 01                	jne    c000c8be <startGUIVESA(void*)+0x1c>
c000c8bd:	fb                   	sti    
c000c8be:	8b 1d b8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209b8
c000c8c4:	83 ec 08             	sub    esp,0x8
c000c8c7:	6a 01                	push   0x1
c000c8c9:	68 d9 e1 01 c0       	push   0xc001e1d9
c000c8ce:	e8 7b 67 00 00       	call   c001304e <Thr::loadDLL(char const*, bool)>
c000c8d3:	83 c4 10             	add    esp,0x10
c000c8d6:	83 ec 08             	sub    esp,0x8
c000c8d9:	53                   	push   ebx
c000c8da:	50                   	push   eax
c000c8db:	e8 9f 69 00 00       	call   c001327f <Thr::executeDLL(unsigned long, void*)>
c000c8e0:	83 c4 10             	add    esp,0x10
c000c8e3:	8b 1d b8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209b8
c000c8e9:	83 ec 08             	sub    esp,0x8
c000c8ec:	6a 01                	push   0x1
c000c8ee:	68 bb e1 01 c0       	push   0xc001e1bb
c000c8f3:	e8 56 67 00 00       	call   c001304e <Thr::loadDLL(char const*, bool)>
c000c8f8:	83 c4 10             	add    esp,0x10
c000c8fb:	83 ec 08             	sub    esp,0x8
c000c8fe:	53                   	push   ebx
c000c8ff:	50                   	push   eax
c000c900:	e8 7a 69 00 00       	call   c001327f <Thr::executeDLL(unsigned long, void*)>
c000c905:	83 c4 10             	add    esp,0x10
c000c908:	90                   	nop
c000c909:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c90c:	c9                   	leave  
c000c90d:	c3                   	ret    

c000c90e <sendKeyToTerminal(unsigned char)>:
c000c90e:	55                   	push   ebp
c000c90f:	89 e5                	mov    ebp,esp
c000c911:	83 ec 28             	sub    esp,0x28
c000c914:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c917:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c91a:	8b 15 04 0a 02 c0    	mov    edx,DWORD PTR ds:0xc0020a04
c000c920:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c923:	25 ff 00 00 00       	and    eax,0xff
c000c928:	83 ec 08             	sub    esp,0x8
c000c92b:	50                   	push   eax
c000c92c:	52                   	push   edx
c000c92d:	e8 aa c8 ff ff       	call   c00091dc <VgaText::receiveKey(unsigned char)>
c000c932:	83 c4 10             	add    esp,0x10
c000c935:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c939:	0f 85 8f 00 00 00    	jne    c000c9ce <sendKeyToTerminal(unsigned char)+0xc0>
c000c93f:	fa                   	cli    
c000c940:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000c945:	40                   	inc    eax
c000c946:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000c94b:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c000c950:	40                   	inc    eax
c000c951:	a3 84 3e 02 c0       	mov    ds:0xc0023e84,eax
c000c956:	a1 c0 2a 02 c0       	mov    eax,ds:0xc0022ac0
c000c95b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c95e:	c7 05 c0 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ac0,0x0
c000c968:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c96c:	74 1f                	je     c000c98d <sendKeyToTerminal(unsigned char)+0x7f>
c000c96e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c971:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c974:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c977:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c97a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c983:	e8 7c 75 00 00       	call   c0013f04 <unblockTask(ThreadControlBlock*)>
c000c988:	83 c4 10             	add    esp,0x10
c000c98b:	eb db                	jmp    c000c968 <sendKeyToTerminal(unsigned char)+0x5a>
c000c98d:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c000c992:	48                   	dec    eax
c000c993:	a3 84 3e 02 c0       	mov    ds:0xc0023e84,eax
c000c998:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c000c99d:	85 c0                	test   eax,eax
c000c99f:	75 18                	jne    c000c9b9 <sendKeyToTerminal(unsigned char)+0xab>
c000c9a1:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c000c9a6:	85 c0                	test   eax,eax
c000c9a8:	74 0f                	je     c000c9b9 <sendKeyToTerminal(unsigned char)+0xab>
c000c9aa:	c7 05 80 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x0
c000c9b4:	e8 87 70 00 00       	call   c0013a40 <schedule()>
c000c9b9:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000c9be:	48                   	dec    eax
c000c9bf:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000c9c4:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000c9c9:	85 c0                	test   eax,eax
c000c9cb:	75 01                	jne    c000c9ce <sendKeyToTerminal(unsigned char)+0xc0>
c000c9cd:	fb                   	sti    
c000c9ce:	90                   	nop
c000c9cf:	c9                   	leave  
c000c9d0:	c3                   	ret    

c000c9d1 <sendKeyboardToken(KeyboardToken)>:
c000c9d1:	55                   	push   ebp
c000c9d2:	89 e5                	mov    ebp,esp
c000c9d4:	83 ec 18             	sub    esp,0x18
c000c9d7:	e8 5b 3e 00 00       	call   c0010837 <Krnl::userIOReceived()>
c000c9dc:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c9df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9e2:	25 ff ff 00 00       	and    eax,0xffff
c000c9e7:	83 f2 01             	xor    edx,0x1
c000c9ea:	88 90 e0 2a 02 c0    	mov    BYTE PTR [eax-0x3ffdd520],dl
c000c9f0:	a1 c8 2a 02 c0       	mov    eax,ds:0xc0022ac8
c000c9f5:	85 c0                	test   eax,eax
c000c9f7:	74 24                	je     c000ca1d <sendKeyboardToken(KeyboardToken)+0x4c>
c000c9f9:	8b 0d c8 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022ac8
c000c9ff:	83 ec 04             	sub    esp,0x4
c000ca02:	68 e0 2a 02 c0       	push   0xc0022ae0
c000ca07:	83 ec 08             	sub    esp,0x8
c000ca0a:	89 e2                	mov    edx,esp
c000ca0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca0f:	89 02                	mov    DWORD PTR [edx],eax
c000ca11:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ca14:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ca18:	ff d1                	call   ecx
c000ca1a:	83 c4 10             	add    esp,0x10
c000ca1d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ca21:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000ca24:	a0 e8 2e 02 c0       	mov    al,ds:0xc0022ee8
c000ca29:	38 c2                	cmp    dl,al
c000ca2b:	74 1e                	je     c000ca4b <sendKeyboardToken(KeyboardToken)+0x7a>
c000ca2d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000ca30:	a2 e8 2e 02 c0       	mov    ds:0xc0022ee8,al
c000ca35:	a0 e8 2e 02 c0       	mov    al,ds:0xc0022ee8
c000ca3a:	25 ff 00 00 00       	and    eax,0xff
c000ca3f:	83 ec 0c             	sub    esp,0xc
c000ca42:	50                   	push   eax
c000ca43:	e8 e6 be ff ff       	call   c000892e <setTerminalScrollLock(bool)>
c000ca48:	83 c4 10             	add    esp,0x10
c000ca4b:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000ca4e:	84 c0                	test   al,al
c000ca50:	0f 84 ae 00 00 00    	je     c000cb04 <sendKeyboardToken(KeyboardToken)+0x133>
c000ca56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca59:	66 3d 10 03          	cmp    ax,0x310
c000ca5d:	75 06                	jne    c000ca65 <sendKeyboardToken(KeyboardToken)+0x94>
c000ca5f:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000ca65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca68:	66 3d 11 03          	cmp    ax,0x311
c000ca6c:	75 06                	jne    c000ca74 <sendKeyboardToken(KeyboardToken)+0xa3>
c000ca6e:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000ca74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca77:	66 3d 12 03          	cmp    ax,0x312
c000ca7b:	75 06                	jne    c000ca83 <sendKeyboardToken(KeyboardToken)+0xb2>
c000ca7d:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000ca83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca86:	66 3d 13 03          	cmp    ax,0x313
c000ca8a:	75 06                	jne    c000ca92 <sendKeyboardToken(KeyboardToken)+0xc1>
c000ca8c:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000ca92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca95:	66 3d 14 03          	cmp    ax,0x314
c000ca99:	75 06                	jne    c000caa1 <sendKeyboardToken(KeyboardToken)+0xd0>
c000ca9b:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000caa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caa4:	66 3d 15 03          	cmp    ax,0x315
c000caa8:	75 06                	jne    c000cab0 <sendKeyboardToken(KeyboardToken)+0xdf>
c000caaa:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cab0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cab3:	66 3d 16 03          	cmp    ax,0x316
c000cab7:	75 06                	jne    c000cabf <sendKeyboardToken(KeyboardToken)+0xee>
c000cab9:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000cabf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cac2:	66 3d 17 03          	cmp    ax,0x317
c000cac6:	75 06                	jne    c000cace <sendKeyboardToken(KeyboardToken)+0xfd>
c000cac8:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000cace:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cad1:	66 3d 18 03          	cmp    ax,0x318
c000cad5:	75 06                	jne    c000cadd <sendKeyboardToken(KeyboardToken)+0x10c>
c000cad7:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000cadd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cae0:	66 3d 19 03          	cmp    ax,0x319
c000cae4:	75 06                	jne    c000caec <sendKeyboardToken(KeyboardToken)+0x11b>
c000cae6:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000caec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caef:	66 3d 1a 03          	cmp    ax,0x31a
c000caf3:	0f 85 c9 00 00 00    	jne    c000cbc2 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000caf9:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000caff:	e9 be 00 00 00       	jmp    c000cbc2 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000cb04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb07:	66 3d 10 03          	cmp    ax,0x310
c000cb0b:	75 0a                	jne    c000cb17 <sendKeyboardToken(KeyboardToken)+0x146>
c000cb0d:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000cb13:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb1a:	66 3d 11 03          	cmp    ax,0x311
c000cb1e:	75 0a                	jne    c000cb2a <sendKeyboardToken(KeyboardToken)+0x159>
c000cb20:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000cb26:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb2d:	66 3d 12 03          	cmp    ax,0x312
c000cb31:	75 0a                	jne    c000cb3d <sendKeyboardToken(KeyboardToken)+0x16c>
c000cb33:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000cb39:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb40:	66 3d 13 03          	cmp    ax,0x313
c000cb44:	75 0a                	jne    c000cb50 <sendKeyboardToken(KeyboardToken)+0x17f>
c000cb46:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000cb4c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb53:	66 3d 14 03          	cmp    ax,0x314
c000cb57:	75 0a                	jne    c000cb63 <sendKeyboardToken(KeyboardToken)+0x192>
c000cb59:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000cb5f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb66:	66 3d 15 03          	cmp    ax,0x315
c000cb6a:	75 0a                	jne    c000cb76 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000cb6c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cb72:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb79:	66 3d 16 03          	cmp    ax,0x316
c000cb7d:	75 0a                	jne    c000cb89 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000cb7f:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000cb85:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb8c:	66 3d 17 03          	cmp    ax,0x317
c000cb90:	75 0a                	jne    c000cb9c <sendKeyboardToken(KeyboardToken)+0x1cb>
c000cb92:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000cb98:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb9f:	66 3d 18 03          	cmp    ax,0x318
c000cba3:	75 0a                	jne    c000cbaf <sendKeyboardToken(KeyboardToken)+0x1de>
c000cba5:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000cbab:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbb2:	66 3d 19 03          	cmp    ax,0x319
c000cbb6:	75 0a                	jne    c000cbc2 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000cbb8:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000cbbe:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbc5:	66 3d 00 02          	cmp    ax,0x200
c000cbc9:	75 2c                	jne    c000cbf7 <sendKeyboardToken(KeyboardToken)+0x226>
c000cbcb:	a0 e0 2e 02 c0       	mov    al,ds:0xc0022ee0
c000cbd0:	83 f0 01             	xor    eax,0x1
c000cbd3:	84 c0                	test   al,al
c000cbd5:	74 20                	je     c000cbf7 <sendKeyboardToken(KeyboardToken)+0x226>
c000cbd7:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c000cbdc:	6a 01                	push   0x1
c000cbde:	6a 00                	push   0x0
c000cbe0:	68 36 c8 00 c0       	push   0xc000c836
c000cbe5:	50                   	push   eax
c000cbe6:	e8 35 6c 00 00       	call   c0013820 <Process::createThread(void (*)(void*), void*, int)>
c000cbeb:	83 c4 10             	add    esp,0x10
c000cbee:	c6 05 e0 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022ee0,0x1
c000cbf5:	eb 33                	jmp    c000cc2a <sendKeyboardToken(KeyboardToken)+0x259>
c000cbf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbfa:	66 3d 01 02          	cmp    ax,0x201
c000cbfe:	75 2a                	jne    c000cc2a <sendKeyboardToken(KeyboardToken)+0x259>
c000cc00:	a0 e0 2e 02 c0       	mov    al,ds:0xc0022ee0
c000cc05:	83 f0 01             	xor    eax,0x1
c000cc08:	84 c0                	test   al,al
c000cc0a:	74 1e                	je     c000cc2a <sendKeyboardToken(KeyboardToken)+0x259>
c000cc0c:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c000cc11:	6a 01                	push   0x1
c000cc13:	6a 00                	push   0x0
c000cc15:	68 a2 c8 00 c0       	push   0xc000c8a2
c000cc1a:	50                   	push   eax
c000cc1b:	e8 00 6c 00 00       	call   c0013820 <Process::createThread(void (*)(void*), void*, int)>
c000cc20:	83 c4 10             	add    esp,0x10
c000cc23:	c6 05 e0 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022ee0,0x1
c000cc2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc2d:	66 3d 1d 03          	cmp    ax,0x31d
c000cc31:	75 06                	jne    c000cc39 <sendKeyboardToken(KeyboardToken)+0x268>
c000cc33:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000cc39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc3c:	66 3d 1c 03          	cmp    ax,0x31c
c000cc40:	75 06                	jne    c000cc48 <sendKeyboardToken(KeyboardToken)+0x277>
c000cc42:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000cc48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc4b:	66 3d 1b 03          	cmp    ax,0x31b
c000cc4f:	75 06                	jne    c000cc57 <sendKeyboardToken(KeyboardToken)+0x286>
c000cc51:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000cc57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc5a:	66 3d 1e 03          	cmp    ax,0x31e
c000cc5e:	75 06                	jne    c000cc66 <sendKeyboardToken(KeyboardToken)+0x295>
c000cc60:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cc66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc69:	66 3d 1f 03          	cmp    ax,0x31f
c000cc6d:	75 06                	jne    c000cc75 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000cc6f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cc75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc78:	66 3d 1a 03          	cmp    ax,0x31a
c000cc7c:	75 06                	jne    c000cc84 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000cc7e:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cc84:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cc88:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc8b:	83 f0 01             	xor    eax,0x1
c000cc8e:	84 c0                	test   al,al
c000cc90:	74 7b                	je     c000cd0d <sendKeyboardToken(KeyboardToken)+0x33c>
c000cc92:	a0 e1 2b 02 c0       	mov    al,ds:0xc0022be1
c000cc97:	84 c0                	test   al,al
c000cc99:	74 43                	je     c000ccde <sendKeyboardToken(KeyboardToken)+0x30d>
c000cc9b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cc9f:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000cca3:	74 2d                	je     c000ccd2 <sendKeyboardToken(KeyboardToken)+0x301>
c000cca5:	8b 15 e4 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022ee4
c000ccab:	89 d0                	mov    eax,edx
c000ccad:	c1 e0 02             	shl    eax,0x2
c000ccb0:	01 d0                	add    eax,edx
c000ccb2:	01 c0                	add    eax,eax
c000ccb4:	a3 e4 2e 02 c0       	mov    ds:0xc0022ee4,eax
c000ccb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccbc:	25 ff ff 00 00       	and    eax,0xffff
c000ccc1:	8d 50 d0             	lea    edx,[eax-0x30]
c000ccc4:	a1 e4 2e 02 c0       	mov    eax,ds:0xc0022ee4
c000ccc9:	01 d0                	add    eax,edx
c000cccb:	a3 e4 2e 02 c0       	mov    ds:0xc0022ee4,eax
c000ccd0:	eb 71                	jmp    c000cd43 <sendKeyboardToken(KeyboardToken)+0x372>
c000ccd2:	c7 05 e4 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ee4,0x0
c000ccdc:	eb 65                	jmp    c000cd43 <sendKeyboardToken(KeyboardToken)+0x372>
c000ccde:	a1 e4 2e 02 c0       	mov    eax,ds:0xc0022ee4
c000cce3:	85 c0                	test   eax,eax
c000cce5:	74 1a                	je     c000cd01 <sendKeyboardToken(KeyboardToken)+0x330>
c000cce7:	a1 e4 2e 02 c0       	mov    eax,ds:0xc0022ee4
c000ccec:	25 ff 00 00 00       	and    eax,0xff
c000ccf1:	83 ec 0c             	sub    esp,0xc
c000ccf4:	50                   	push   eax
c000ccf5:	e8 14 fc ff ff       	call   c000c90e <sendKeyToTerminal(unsigned char)>
c000ccfa:	83 c4 10             	add    esp,0x10
c000ccfd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cd01:	c7 05 e4 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ee4,0x0
c000cd0b:	eb 36                	jmp    c000cd43 <sendKeyboardToken(KeyboardToken)+0x372>
c000cd0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd10:	66 3d 01 01          	cmp    ax,0x101
c000cd14:	75 2d                	jne    c000cd43 <sendKeyboardToken(KeyboardToken)+0x372>
c000cd16:	a1 e4 2e 02 c0       	mov    eax,ds:0xc0022ee4
c000cd1b:	85 c0                	test   eax,eax
c000cd1d:	74 1a                	je     c000cd39 <sendKeyboardToken(KeyboardToken)+0x368>
c000cd1f:	a1 e4 2e 02 c0       	mov    eax,ds:0xc0022ee4
c000cd24:	25 ff 00 00 00       	and    eax,0xff
c000cd29:	83 ec 0c             	sub    esp,0xc
c000cd2c:	50                   	push   eax
c000cd2d:	e8 dc fb ff ff       	call   c000c90e <sendKeyToTerminal(unsigned char)>
c000cd32:	83 c4 10             	add    esp,0x10
c000cd35:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cd39:	c7 05 e4 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ee4,0x0
c000cd43:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cd46:	83 f0 01             	xor    eax,0x1
c000cd49:	84 c0                	test   al,al
c000cd4b:	74 4e                	je     c000cd9b <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd4d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cd50:	83 f0 01             	xor    eax,0x1
c000cd53:	84 c0                	test   al,al
c000cd55:	74 44                	je     c000cd9b <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd57:	a0 e0 2b 02 c0       	mov    al,ds:0xc0022be0
c000cd5c:	83 f0 01             	xor    eax,0x1
c000cd5f:	84 c0                	test   al,al
c000cd61:	74 38                	je     c000cd9b <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd66:	66 83 f8 1f          	cmp    ax,0x1f
c000cd6a:	76 09                	jbe    c000cd75 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000cd6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd6f:	66 83 f8 7e          	cmp    ax,0x7e
c000cd73:	76 12                	jbe    c000cd87 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000cd75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd78:	66 83 f8 0a          	cmp    ax,0xa
c000cd7c:	74 09                	je     c000cd87 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000cd7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd81:	66 83 f8 08          	cmp    ax,0x8
c000cd85:	75 14                	jne    c000cd9b <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd8a:	25 ff 00 00 00       	and    eax,0xff
c000cd8f:	83 ec 0c             	sub    esp,0xc
c000cd92:	50                   	push   eax
c000cd93:	e8 76 fb ff ff       	call   c000c90e <sendKeyToTerminal(unsigned char)>
c000cd98:	83 c4 10             	add    esp,0x10
c000cd9b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cd9e:	83 f0 01             	xor    eax,0x1
c000cda1:	84 c0                	test   al,al
c000cda3:	74 51                	je     c000cdf6 <sendKeyboardToken(KeyboardToken)+0x425>
c000cda5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cda8:	83 f0 01             	xor    eax,0x1
c000cdab:	84 c0                	test   al,al
c000cdad:	74 47                	je     c000cdf6 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdaf:	a0 e0 2b 02 c0       	mov    al,ds:0xc0022be0
c000cdb4:	84 c0                	test   al,al
c000cdb6:	74 3e                	je     c000cdf6 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdbb:	66 83 f8 3f          	cmp    ax,0x3f
c000cdbf:	76 35                	jbe    c000cdf6 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdc4:	66 83 f8 7f          	cmp    ax,0x7f
c000cdc8:	77 2c                	ja     c000cdf6 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdcd:	88 c2                	mov    dl,al
c000cdcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdd2:	66 83 f8 5f          	cmp    ax,0x5f
c000cdd6:	76 04                	jbe    c000cddc <sendKeyboardToken(KeyboardToken)+0x40b>
c000cdd8:	b0 20                	mov    al,0x20
c000cdda:	eb 02                	jmp    c000cdde <sendKeyboardToken(KeyboardToken)+0x40d>
c000cddc:	b0 00                	mov    al,0x0
c000cdde:	29 c2                	sub    edx,eax
c000cde0:	88 d0                	mov    al,dl
c000cde2:	83 e8 40             	sub    eax,0x40
c000cde5:	25 ff 00 00 00       	and    eax,0xff
c000cdea:	83 ec 0c             	sub    esp,0xc
c000cded:	50                   	push   eax
c000cdee:	e8 1b fb ff ff       	call   c000c90e <sendKeyToTerminal(unsigned char)>
c000cdf3:	83 c4 10             	add    esp,0x10
c000cdf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdf9:	66 3d 00 03          	cmp    ax,0x300
c000cdfd:	75 0f                	jne    c000ce0e <sendKeyboardToken(KeyboardToken)+0x43d>
c000cdff:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ce02:	83 f0 01             	xor    eax,0x1
c000ce05:	84 c0                	test   al,al
c000ce07:	74 05                	je     c000ce0e <sendKeyboardToken(KeyboardToken)+0x43d>
c000ce09:	e8 21 bb ff ff       	call   c000892f <doTerminalCycle()>
c000ce0e:	90                   	nop
c000ce0f:	c9                   	leave  
c000ce10:	c3                   	ret    

c000ce11 <clearInternalKeybuffer(VgaText*)>:
c000ce11:	55                   	push   ebp
c000ce12:	89 e5                	mov    ebp,esp
c000ce14:	83 ec 08             	sub    esp,0x8
c000ce17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce1a:	05 b2 00 00 00       	add    eax,0xb2
c000ce1f:	83 ec 0c             	sub    esp,0xc
c000ce22:	50                   	push   eax
c000ce23:	e8 38 37 ff ff       	call   c0000560 <strlen>
c000ce28:	83 c4 10             	add    esp,0x10
c000ce2b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce2e:	81 c2 b2 00 00 00    	add    edx,0xb2
c000ce34:	83 ec 04             	sub    esp,0x4
c000ce37:	50                   	push   eax
c000ce38:	6a 00                	push   0x0
c000ce3a:	52                   	push   edx
c000ce3b:	e8 b0 36 ff ff       	call   c00004f0 <memset>
c000ce40:	83 c4 10             	add    esp,0x10
c000ce43:	90                   	nop
c000ce44:	c9                   	leave  
c000ce45:	c3                   	ret    

c000ce46 <readKeyboard(VgaText*, char*, unsigned long)>:
c000ce46:	55                   	push   ebp
c000ce47:	89 e5                	mov    ebp,esp
c000ce49:	83 ec 18             	sub    esp,0x18
c000ce4c:	a1 c8 2a 02 c0       	mov    eax,ds:0xc0022ac8
c000ce51:	85 c0                	test   eax,eax
c000ce53:	74 2a                	je     c000ce7f <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ce55:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ce5b:	8b 0d c8 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022ac8
c000ce61:	83 ec 04             	sub    esp,0x4
c000ce64:	68 e0 2a 02 c0       	push   0xc0022ae0
c000ce69:	83 ec 08             	sub    esp,0x8
c000ce6c:	89 e2                	mov    edx,esp
c000ce6e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000ce71:	89 02                	mov    DWORD PTR [edx],eax
c000ce73:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ce76:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ce7a:	ff d1                	call   ecx
c000ce7c:	83 c4 10             	add    esp,0x10
c000ce7f:	fb                   	sti    
c000ce80:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ce87:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ce8b:	0f 84 a1 00 00 00    	je     c000cf32 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000ce91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce94:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000ce9a:	84 c0                	test   al,al
c000ce9c:	75 28                	jne    c000cec6 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000ce9e:	fa                   	cli    
c000ce9f:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000cea4:	40                   	inc    eax
c000cea5:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000ceaa:	e8 91 6b 00 00       	call   c0013a40 <schedule()>
c000ceaf:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000ceb4:	48                   	dec    eax
c000ceb5:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000ceba:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000cebf:	85 c0                	test   eax,eax
c000cec1:	75 ce                	jne    c000ce91 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cec3:	fb                   	sti    
c000cec4:	eb cb                	jmp    c000ce91 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cec6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cec9:	8d 50 01             	lea    edx,[eax+0x1]
c000cecc:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cecf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ced2:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000ced8:	88 10                	mov    BYTE PTR [eax],dl
c000ceda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cedd:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000cee3:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cee6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cee9:	05 b2 00 00 00       	add    eax,0xb2
c000ceee:	83 ec 0c             	sub    esp,0xc
c000cef1:	50                   	push   eax
c000cef2:	e8 69 36 ff ff       	call   c0000560 <strlen>
c000cef7:	83 c4 10             	add    esp,0x10
c000cefa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cefd:	81 c2 b2 00 00 00    	add    edx,0xb2
c000cf03:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cf06:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cf09:	81 c2 b2 00 00 00    	add    edx,0xb2
c000cf0f:	83 ec 04             	sub    esp,0x4
c000cf12:	50                   	push   eax
c000cf13:	51                   	push   ecx
c000cf14:	52                   	push   edx
c000cf15:	e8 e6 34 ff ff       	call   c0000400 <memmove>
c000cf1a:	83 c4 10             	add    esp,0x10
c000cf1d:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000cf20:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000cf23:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000cf27:	0f 85 5a ff ff ff    	jne    c000ce87 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000cf2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf30:	eb 03                	jmp    c000cf35 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000cf32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf35:	c9                   	leave  
c000cf36:	c3                   	ret    
c000cf37:	90                   	nop

c000cf38 <Keyboard::Keyboard(char const*)>:
c000cf38:	83 ec 0c             	sub    esp,0xc
c000cf3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf3f:	83 ec 08             	sub    esp,0x8
c000cf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf46:	50                   	push   eax
c000cf47:	e8 78 f2 ff ff       	call   c000c1c4 <Device::Device(char const*)>
c000cf4c:	83 c4 10             	add    esp,0x10
c000cf4f:	ba fc e1 01 c0       	mov    edx,0xc001e1fc
c000cf54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf58:	89 10                	mov    DWORD PTR [eax],edx
c000cf5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf5e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000cf68:	c6 05 c4 2a 02 c0 01 	mov    BYTE PTR ds:0xc0022ac4,0x1
c000cf6f:	90                   	nop
c000cf70:	83 c4 0c             	add    esp,0xc
c000cf73:	c3                   	ret    

c000cf74 <Keyboard::~Keyboard()>:
c000cf74:	83 ec 0c             	sub    esp,0xc
c000cf77:	ba fc e1 01 c0       	mov    edx,0xc001e1fc
c000cf7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf80:	89 10                	mov    DWORD PTR [eax],edx
c000cf82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf86:	83 ec 0c             	sub    esp,0xc
c000cf89:	50                   	push   eax
c000cf8a:	e8 9f ef ff ff       	call   c000bf2e <Device::~Device()>
c000cf8f:	83 c4 10             	add    esp,0x10
c000cf92:	90                   	nop
c000cf93:	83 c4 0c             	add    esp,0xc
c000cf96:	c3                   	ret    
c000cf97:	90                   	nop

c000cf98 <Keyboard::~Keyboard()>:
c000cf98:	83 ec 0c             	sub    esp,0xc
c000cf9b:	83 ec 0c             	sub    esp,0xc
c000cf9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfa2:	e8 cd ff ff ff       	call   c000cf74 <Keyboard::~Keyboard()>
c000cfa7:	83 c4 10             	add    esp,0x10
c000cfaa:	83 ec 08             	sub    esp,0x8
c000cfad:	68 5c 01 00 00       	push   0x15c
c000cfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb6:	e8 3b db ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000cfbb:	83 c4 10             	add    esp,0x10
c000cfbe:	83 c4 0c             	add    esp,0xc
c000cfc1:	c3                   	ret    

c000cfc2 <LogicalDisk::close(int, int, void*)>:
c000cfc2:	83 c8 ff             	or     eax,0xffffffff
c000cfc5:	c3                   	ret    

c000cfc6 <LogicalDisk::~LogicalDisk()>:
c000cfc6:	83 ec 0c             	sub    esp,0xc
c000cfc9:	ba 74 e2 01 c0       	mov    edx,0xc001e274
c000cfce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd2:	89 10                	mov    DWORD PTR [eax],edx
c000cfd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd8:	83 ec 0c             	sub    esp,0xc
c000cfdb:	50                   	push   eax
c000cfdc:	e8 4d ef ff ff       	call   c000bf2e <Device::~Device()>
c000cfe1:	83 c4 10             	add    esp,0x10
c000cfe4:	90                   	nop
c000cfe5:	83 c4 0c             	add    esp,0xc
c000cfe8:	c3                   	ret    
c000cfe9:	90                   	nop

c000cfea <LogicalDisk::~LogicalDisk()>:
c000cfea:	83 ec 0c             	sub    esp,0xc
c000cfed:	83 ec 0c             	sub    esp,0xc
c000cff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff4:	e8 cd ff ff ff       	call   c000cfc6 <LogicalDisk::~LogicalDisk()>
c000cff9:	83 c4 10             	add    esp,0x10
c000cffc:	83 ec 08             	sub    esp,0x8
c000cfff:	68 74 01 00 00       	push   0x174
c000d004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d008:	e8 e9 da ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000d00d:	83 c4 10             	add    esp,0x10
c000d010:	83 c4 0c             	add    esp,0xc
c000d013:	c3                   	ret    

c000d014 <LogicalDisk::open(int, int, void*)>:
c000d014:	83 ec 18             	sub    esp,0x18
c000d017:	68 28 e2 01 c0       	push   0xc001e228
c000d01c:	e8 ca 36 00 00       	call   c00106eb <Krnl::panic(char const*)>
c000d021:	83 c8 ff             	or     eax,0xffffffff
c000d024:	83 c4 1c             	add    esp,0x1c
c000d027:	c3                   	ret    

c000d028 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d028:	53                   	push   ebx
c000d029:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d02d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d031:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d035:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d03b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d041:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d047:	77 10                	ja     c000d059 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d049:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d04f:	89 d3                	mov    ebx,edx
c000d051:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d057:	72 05                	jb     c000d05e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d059:	83 c8 ff             	or     eax,0xffffffff
c000d05c:	89 c2                	mov    edx,eax
c000d05e:	5b                   	pop    ebx
c000d05f:	c3                   	ret    

c000d060 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d060:	56                   	push   esi
c000d061:	83 c8 ff             	or     eax,0xffffffff
c000d064:	53                   	push   ebx
c000d065:	89 c2                	mov    edx,eax
c000d067:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d06b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d06f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d073:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d079:	77 27                	ja     c000d0a2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d07b:	89 d8                	mov    eax,ebx
c000d07d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d083:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d089:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d08e:	89 c2                	mov    edx,eax
c000d090:	73 10                	jae    c000d0a2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d092:	89 c8                	mov    eax,ecx
c000d094:	89 da                	mov    edx,ebx
c000d096:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d09c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d0a2:	5b                   	pop    ebx
c000d0a3:	5e                   	pop    esi
c000d0a4:	c3                   	ret    
c000d0a5:	90                   	nop

c000d0a6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d0a6:	83 ec 1c             	sub    esp,0x1c
c000d0a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d0b9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d0bd:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0c0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d0c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d0c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0cc:	83 ec 08             	sub    esp,0x8
c000d0cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0d3:	50                   	push   eax
c000d0d4:	e8 eb f0 ff ff       	call   c000c1c4 <Device::Device(char const*)>
c000d0d9:	83 c4 10             	add    esp,0x10
c000d0dc:	ba 74 e2 01 c0       	mov    edx,0xc001e274
c000d0e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0e5:	89 10                	mov    DWORD PTR [eax],edx
c000d0e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0eb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d0f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0f6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d0fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d101:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d10b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d10f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d113:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d117:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d11d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d123:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d127:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d12a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d12e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d134:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d13a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d13e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d142:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d148:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d14c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000d156:	90                   	nop
c000d157:	83 c4 1c             	add    esp,0x1c
c000d15a:	c3                   	ret    
c000d15b:	90                   	nop

c000d15c <LogicalDisk::assignDriveLetter()>:
c000d15c:	55                   	push   ebp
c000d15d:	57                   	push   edi
c000d15e:	56                   	push   esi
c000d15f:	53                   	push   ebx
c000d160:	83 ec 14             	sub    esp,0x14
c000d163:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d167:	8b 3d 00 2f 02 c0    	mov    edi,DWORD PTR ds:0xc0022f00
c000d16d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d173:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d177:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000d17d:	8b 3d 04 2f 02 c0    	mov    edi,DWORD PTR ds:0xc0022f04
c000d183:	3c 01                	cmp    al,0x1
c000d185:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000d189:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000d18d:	19 c0                	sbb    eax,eax
c000d18f:	83 e0 02             	and    eax,0x2
c000d192:	83 c0 41             	add    eax,0x41
c000d195:	0f be e8             	movsx  ebp,al
c000d198:	3c 43                	cmp    al,0x43
c000d19a:	75 10                	jne    c000d1ac <LogicalDisk::assignDriveLetter()+0x50>
c000d19c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d1a3:	75 5d                	jne    c000d202 <LogicalDisk::assignDriveLetter()+0xa6>
c000d1a5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000d1aa:	75 56                	jne    c000d202 <LogicalDisk::assignDriveLetter()+0xa6>
c000d1ac:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d1af:	ba 01 00 00 00       	mov    edx,0x1
c000d1b4:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000d1b8:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000d1bc:	d3 e2                	shl    edx,cl
c000d1be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d1c2:	89 d7                	mov    edi,edx
c000d1c4:	89 d6                	mov    esi,edx
c000d1c6:	c1 ff 1f             	sar    edi,0x1f
c000d1c9:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000d1cd:	21 f9                	and    ecx,edi
c000d1cf:	09 d1                	or     ecx,edx
c000d1d1:	75 2f                	jne    c000d202 <LogicalDisk::assignDriveLetter()+0xa6>
c000d1d3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d1d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1db:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d1e1:	09 f2                	or     edx,esi
c000d1e3:	89 15 00 2f 02 c0    	mov    DWORD PTR ds:0xc0022f00,edx
c000d1e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1ed:	09 fa                	or     edx,edi
c000d1ef:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d1f3:	89 15 04 2f 02 c0    	mov    DWORD PTR ds:0xc0022f04,edx
c000d1f9:	89 1c bd 20 2f 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd0e0],ebx
c000d200:	eb 08                	jmp    c000d20a <LogicalDisk::assignDriveLetter()+0xae>
c000d202:	45                   	inc    ebp
c000d203:	40                   	inc    eax
c000d204:	3c 5b                	cmp    al,0x5b
c000d206:	75 90                	jne    c000d198 <LogicalDisk::assignDriveLetter()+0x3c>
c000d208:	31 c0                	xor    eax,eax
c000d20a:	83 c4 14             	add    esp,0x14
c000d20d:	5b                   	pop    ebx
c000d20e:	5e                   	pop    esi
c000d20f:	5f                   	pop    edi
c000d210:	5d                   	pop    ebp
c000d211:	c3                   	ret    

c000d212 <LogicalDisk::mount()>:
c000d212:	56                   	push   esi
c000d213:	53                   	push   ebx
c000d214:	53                   	push   ebx
c000d215:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d219:	8b 1d b4 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ab4
c000d21f:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000d229:	85 db                	test   ebx,ebx
c000d22b:	74 27                	je     c000d254 <LogicalDisk::mount()+0x42>
c000d22d:	51                   	push   ecx
c000d22e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d235:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d237:	83 e8 41             	sub    eax,0x41
c000d23a:	50                   	push   eax
c000d23b:	56                   	push   esi
c000d23c:	53                   	push   ebx
c000d23d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	84 c0                	test   al,al
c000d245:	74 08                	je     c000d24f <LogicalDisk::mount()+0x3d>
c000d247:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000d24d:	eb 07                	jmp    c000d256 <LogicalDisk::mount()+0x44>
c000d24f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d252:	eb d5                	jmp    c000d229 <LogicalDisk::mount()+0x17>
c000d254:	31 c0                	xor    eax,eax
c000d256:	5a                   	pop    edx
c000d257:	5b                   	pop    ebx
c000d258:	5e                   	pop    esi
c000d259:	c3                   	ret    

c000d25a <LogicalDisk::unmount()>:
c000d25a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d25e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000d268:	c3                   	ret    
c000d269:	90                   	nop

c000d26a <LogicalDisk::eject()>:
c000d26a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d26e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d274:	8b 10                	mov    edx,DWORD PTR [eax]
c000d276:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d27a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d27d:	90                   	nop

c000d27e <LogicalDisk::unassignDriveLetter()>:
c000d27e:	57                   	push   edi
c000d27f:	56                   	push   esi
c000d280:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d284:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d28b:	84 c9                	test   cl,cl
c000d28d:	75 0f                	jne    c000d29e <LogicalDisk::unassignDriveLetter()+0x20>
c000d28f:	c7 44 24 0c 4c e2 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e24c
c000d297:	5e                   	pop    esi
c000d298:	5f                   	pop    edi
c000d299:	e9 4d 34 00 00       	jmp    c00106eb <Krnl::panic(char const*)>
c000d29e:	83 e9 41             	sub    ecx,0x41
c000d2a1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d2a8:	b8 01 00 00 00       	mov    eax,0x1
c000d2ad:	c7 04 8d 20 2f 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd0e0],0x0
c000d2b8:	d3 e0                	shl    eax,cl
c000d2ba:	89 c7                	mov    edi,eax
c000d2bc:	f7 d0                	not    eax
c000d2be:	c1 ff 1f             	sar    edi,0x1f
c000d2c1:	21 05 00 2f 02 c0    	and    DWORD PTR ds:0xc0022f00,eax
c000d2c7:	89 fe                	mov    esi,edi
c000d2c9:	f7 d6                	not    esi
c000d2cb:	21 35 04 2f 02 c0    	and    DWORD PTR ds:0xc0022f04,esi
c000d2d1:	5e                   	pop    esi
c000d2d2:	5f                   	pop    edi
c000d2d3:	c3                   	ret    

c000d2d4 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d2d4:	57                   	push   edi
c000d2d5:	56                   	push   esi
c000d2d6:	53                   	push   ebx
c000d2d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d2db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d2df:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d2e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d2e7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d2ed:	77 41                	ja     c000d330 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d2ef:	99                   	cdq    
c000d2f0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d2f6:	01 c8                	add    eax,ecx
c000d2f8:	11 da                	adc    edx,ebx
c000d2fa:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d300:	19 d7                	sbb    edi,edx
c000d302:	72 33                	jb     c000d337 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d304:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d30a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d310:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d314:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d318:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d31e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d324:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d328:	5b                   	pop    ebx
c000d329:	5e                   	pop    esi
c000d32a:	5f                   	pop    edi
c000d32b:	e9 4e 0a 00 00       	jmp    c000dd7e <VCache::read(unsigned long long, int, void*)>
c000d330:	b8 05 00 00 00       	mov    eax,0x5
c000d335:	eb 05                	jmp    c000d33c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d337:	b8 07 00 00 00       	mov    eax,0x7
c000d33c:	5b                   	pop    ebx
c000d33d:	5e                   	pop    esi
c000d33e:	5f                   	pop    edi
c000d33f:	c3                   	ret    

c000d340 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d340:	57                   	push   edi
c000d341:	56                   	push   esi
c000d342:	53                   	push   ebx
c000d343:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d347:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d34b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d34f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d353:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d359:	77 41                	ja     c000d39c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d35b:	99                   	cdq    
c000d35c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d362:	01 c8                	add    eax,ecx
c000d364:	11 da                	adc    edx,ebx
c000d366:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d36c:	19 d7                	sbb    edi,edx
c000d36e:	72 33                	jb     c000d3a3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d370:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d376:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d37c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d380:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d384:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d38a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d390:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d394:	5b                   	pop    ebx
c000d395:	5e                   	pop    esi
c000d396:	5f                   	pop    edi
c000d397:	e9 cc 08 00 00       	jmp    c000dc68 <VCache::write(unsigned long long, int, void*)>
c000d39c:	b8 05 00 00 00       	mov    eax,0x5
c000d3a1:	eb 05                	jmp    c000d3a8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d3a3:	b8 07 00 00 00       	mov    eax,0x7
c000d3a8:	5b                   	pop    ebx
c000d3a9:	5e                   	pop    esi
c000d3aa:	5f                   	pop    edi
c000d3ab:	c3                   	ret    

c000d3ac <Mouse::Mouse(char const*)>:
c000d3ac:	83 ec 0c             	sub    esp,0xc
c000d3af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3b3:	83 ec 08             	sub    esp,0x8
c000d3b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ba:	50                   	push   eax
c000d3bb:	e8 04 ee ff ff       	call   c000c1c4 <Device::Device(char const*)>
c000d3c0:	83 c4 10             	add    esp,0x10
c000d3c3:	ba a0 e2 01 c0       	mov    edx,0xc001e2a0
c000d3c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3cc:	89 10                	mov    DWORD PTR [eax],edx
c000d3ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3d2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d3dc:	90                   	nop
c000d3dd:	83 c4 0c             	add    esp,0xc
c000d3e0:	c3                   	ret    
c000d3e1:	90                   	nop
c000d3e2:	66 90                	xchg   ax,ax

c000d3e4 <Mouse::~Mouse()>:
c000d3e4:	83 ec 0c             	sub    esp,0xc
c000d3e7:	ba a0 e2 01 c0       	mov    edx,0xc001e2a0
c000d3ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3f0:	89 10                	mov    DWORD PTR [eax],edx
c000d3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3f6:	83 ec 0c             	sub    esp,0xc
c000d3f9:	50                   	push   eax
c000d3fa:	e8 2f eb ff ff       	call   c000bf2e <Device::~Device()>
c000d3ff:	83 c4 10             	add    esp,0x10
c000d402:	90                   	nop
c000d403:	83 c4 0c             	add    esp,0xc
c000d406:	c3                   	ret    
c000d407:	90                   	nop

c000d408 <Mouse::~Mouse()>:
c000d408:	83 ec 0c             	sub    esp,0xc
c000d40b:	83 ec 0c             	sub    esp,0xc
c000d40e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d412:	e8 cd ff ff ff       	call   c000d3e4 <Mouse::~Mouse()>
c000d417:	83 c4 10             	add    esp,0x10
c000d41a:	83 ec 08             	sub    esp,0x8
c000d41d:	68 58 01 00 00       	push   0x158
c000d422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d426:	e8 cb d6 ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000d42b:	83 c4 10             	add    esp,0x10
c000d42e:	83 c4 0c             	add    esp,0xc
c000d431:	c3                   	ret    

c000d432 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d432:	55                   	push   ebp
c000d433:	57                   	push   edi
c000d434:	56                   	push   esi
c000d435:	53                   	push   ebx
c000d436:	81 ec 28 01 00 00    	sub    esp,0x128
c000d43c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d443:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d44a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d451:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d458:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d45c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d460:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d467:	e8 54 ee ff ff       	call   c000c2c0 <Device::getName()>
c000d46c:	5a                   	pop    edx
c000d46d:	59                   	pop    ecx
c000d46e:	50                   	push   eax
c000d46f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d473:	55                   	push   ebp
c000d474:	e8 a7 31 ff ff       	call   c0000620 <strcpy>
c000d479:	5b                   	pop    ebx
c000d47a:	58                   	pop    eax
c000d47b:	68 c4 e2 01 c0       	push   0xc001e2c4
c000d480:	55                   	push   ebp
c000d481:	e8 5a 33 ff ff       	call   c00007e0 <strcat>
c000d486:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000d48d:	e8 cb a9 ff ff       	call   c0007e5d <malloc>
c000d492:	83 c4 0c             	add    esp,0xc
c000d495:	89 c3                	mov    ebx,eax
c000d497:	57                   	push   edi
c000d498:	56                   	push   esi
c000d499:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d49d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4a1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d4a8:	55                   	push   ebp
c000d4a9:	50                   	push   eax
c000d4aa:	e8 f7 fb ff ff       	call   c000d0a6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d4af:	83 c4 14             	add    esp,0x14
c000d4b2:	53                   	push   ebx
c000d4b3:	e8 a4 fc ff ff       	call   c000d15c <LogicalDisk::assignDriveLetter()>
c000d4b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d4bb:	e8 52 fd ff ff       	call   c000d212 <LogicalDisk::mount()>
c000d4c0:	58                   	pop    eax
c000d4c1:	5a                   	pop    edx
c000d4c2:	53                   	push   ebx
c000d4c3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d4ca:	e8 5d eb ff ff       	call   c000c02c <Device::addChild(Device*)>
c000d4cf:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d4d5:	5b                   	pop    ebx
c000d4d6:	5e                   	pop    esi
c000d4d7:	5f                   	pop    edi
c000d4d8:	5d                   	pop    ebp
c000d4d9:	c3                   	ret    

c000d4da <createPartitionsForDisk(PhysicalDisk*)>:
c000d4da:	55                   	push   ebp
c000d4db:	57                   	push   edi
c000d4dc:	56                   	push   esi
c000d4dd:	53                   	push   ebx
c000d4de:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d4e4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d4eb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d4f1:	3d 00 02 00 00       	cmp    eax,0x200
c000d4f6:	74 27                	je     c000d51f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d4f8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d4fe:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d504:	83 ec 10             	sub    esp,0x10
c000d507:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d50b:	99                   	cdq    
c000d50c:	c1 e6 0a             	shl    esi,0xa
c000d50f:	52                   	push   edx
c000d510:	89 fd                	mov    ebp,edi
c000d512:	50                   	push   eax
c000d513:	55                   	push   ebp
c000d514:	56                   	push   esi
c000d515:	e8 16 ed 00 00       	call   c001c230 <__udivdi3>
c000d51a:	e9 b1 00 00 00       	jmp    c000d5d0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d51f:	83 ec 0c             	sub    esp,0xc
c000d522:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d524:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d528:	56                   	push   esi
c000d529:	6a 01                	push   0x1
c000d52b:	6a 00                	push   0x0
c000d52d:	6a 00                	push   0x0
c000d52f:	53                   	push   ebx
c000d530:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d533:	83 c4 20             	add    esp,0x20
c000d536:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d53e:	75 0a                	jne    c000d54a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d540:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d548:	74 2c                	je     c000d576 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d54a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d550:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d556:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d55c:	83 ec 10             	sub    esp,0x10
c000d55f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d563:	89 f7                	mov    edi,esi
c000d565:	c1 e0 0a             	shl    eax,0xa
c000d568:	c1 ff 1f             	sar    edi,0x1f
c000d56b:	57                   	push   edi
c000d56c:	56                   	push   esi
c000d56d:	52                   	push   edx
c000d56e:	50                   	push   eax
c000d56f:	e8 bc ec 00 00       	call   c001c230 <__udivdi3>
c000d574:	eb 5a                	jmp    c000d5d0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d576:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d57d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d584:	83 e1 7f             	and    ecx,0x7f
c000d587:	83 e0 7f             	and    eax,0x7f
c000d58a:	01 c1                	add    ecx,eax
c000d58c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d593:	83 e0 7f             	and    eax,0x7f
c000d596:	01 c1                	add    ecx,eax
c000d598:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d59f:	83 e0 7f             	and    eax,0x7f
c000d5a2:	00 c1                	add    cl,al
c000d5a4:	74 41                	je     c000d5e7 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d5a6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d5ac:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d5b2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d5b8:	83 ec 10             	sub    esp,0x10
c000d5bb:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d5bf:	89 f7                	mov    edi,esi
c000d5c1:	c1 e0 0a             	shl    eax,0xa
c000d5c4:	c1 ff 1f             	sar    edi,0x1f
c000d5c7:	57                   	push   edi
c000d5c8:	56                   	push   esi
c000d5c9:	52                   	push   edx
c000d5ca:	50                   	push   eax
c000d5cb:	e8 60 ec 00 00       	call   c001c230 <__udivdi3>
c000d5d0:	83 c4 14             	add    esp,0x14
c000d5d3:	52                   	push   edx
c000d5d4:	50                   	push   eax
c000d5d5:	6a 00                	push   0x0
c000d5d7:	6a 00                	push   0x0
c000d5d9:	53                   	push   ebx
c000d5da:	e8 53 fe ff ff       	call   c000d432 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d5df:	83 c4 20             	add    esp,0x20
c000d5e2:	e9 79 01 00 00       	jmp    c000d760 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d5e7:	89 f0                	mov    eax,esi
c000d5e9:	31 f6                	xor    esi,esi
c000d5eb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d5f2:	75 02                	jne    c000d5f6 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d5f4:	89 f1                	mov    ecx,esi
c000d5f6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d5fd:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d604:	c1 e2 08             	shl    edx,0x8
c000d607:	c1 e7 10             	shl    edi,0x10
c000d60a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d612:	09 fa                	or     edx,edi
c000d614:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d61c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d623:	83 c0 10             	add    eax,0x10
c000d626:	09 fa                	or     edx,edi
c000d628:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d62f:	c1 e7 18             	shl    edi,0x18
c000d632:	09 fa                	or     edx,edi
c000d634:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d63b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d63f:	c1 e7 10             	shl    edi,0x10
c000d642:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d649:	c1 e2 08             	shl    edx,0x8
c000d64c:	09 fa                	or     edx,edi
c000d64e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d655:	09 fa                	or     edx,edi
c000d657:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d65e:	c1 e7 18             	shl    edi,0x18
c000d661:	09 fa                	or     edx,edi
c000d663:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d667:	46                   	inc    esi
c000d668:	83 fe 04             	cmp    esi,0x4
c000d66b:	0f 85 7a ff ff ff    	jne    c000d5eb <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d675:	83 f0 01             	xor    eax,0x1
c000d678:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d67c:	75 57                	jne    c000d6d5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d67e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d682:	83 f0 01             	xor    eax,0x1
c000d685:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d689:	75 4a                	jne    c000d6d5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d68b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d68f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d697:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d69f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d6a5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d6ab:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d6b1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d6b5:	89 f7                	mov    edi,esi
c000d6b7:	c1 e0 0a             	shl    eax,0xa
c000d6ba:	c1 ff 1f             	sar    edi,0x1f
c000d6bd:	57                   	push   edi
c000d6be:	56                   	push   esi
c000d6bf:	52                   	push   edx
c000d6c0:	50                   	push   eax
c000d6c1:	e8 6a eb 00 00       	call   c001c230 <__udivdi3>
c000d6c6:	83 c4 10             	add    esp,0x10
c000d6c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6d1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d6d5:	84 c9                	test   cl,cl
c000d6d7:	74 53                	je     c000d72c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d6d9:	0f b6 c9             	movzx  ecx,cl
c000d6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6e4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d6e8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d6ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6f0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6f4:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d6f8:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d6fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d700:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d708:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d70c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d710:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d714:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d718:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d71c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d720:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d724:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d728:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d72c:	31 ed                	xor    ebp,ebp
c000d72e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d732:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d736:	89 f8                	mov    eax,edi
c000d738:	09 f0                	or     eax,esi
c000d73a:	74 1e                	je     c000d75a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d73c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d740:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d744:	89 d1                	mov    ecx,edx
c000d746:	09 c1                	or     ecx,eax
c000d748:	74 10                	je     c000d75a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d74a:	83 ec 0c             	sub    esp,0xc
c000d74d:	57                   	push   edi
c000d74e:	56                   	push   esi
c000d74f:	52                   	push   edx
c000d750:	50                   	push   eax
c000d751:	53                   	push   ebx
c000d752:	e8 db fc ff ff       	call   c000d432 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d757:	83 c4 20             	add    esp,0x20
c000d75a:	45                   	inc    ebp
c000d75b:	83 fd 04             	cmp    ebp,0x4
c000d75e:	75 ce                	jne    c000d72e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d760:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d766:	5b                   	pop    ebx
c000d767:	5e                   	pop    esi
c000d768:	5f                   	pop    edi
c000d769:	5d                   	pop    ebp
c000d76a:	c3                   	ret    
c000d76b:	90                   	nop

c000d76c <Serial::Serial(char const*)>:
c000d76c:	83 ec 0c             	sub    esp,0xc
c000d76f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d773:	83 ec 08             	sub    esp,0x8
c000d776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d77a:	50                   	push   eax
c000d77b:	e8 44 ea ff ff       	call   c000c1c4 <Device::Device(char const*)>
c000d780:	83 c4 10             	add    esp,0x10
c000d783:	ba d8 e2 01 c0       	mov    edx,0xc001e2d8
c000d788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d78c:	89 10                	mov    DWORD PTR [eax],edx
c000d78e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d792:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d79c:	90                   	nop
c000d79d:	83 c4 0c             	add    esp,0xc
c000d7a0:	c3                   	ret    
c000d7a1:	90                   	nop
c000d7a2:	66 90                	xchg   ax,ax

c000d7a4 <Serial::~Serial()>:
c000d7a4:	83 ec 0c             	sub    esp,0xc
c000d7a7:	ba d8 e2 01 c0       	mov    edx,0xc001e2d8
c000d7ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b0:	89 10                	mov    DWORD PTR [eax],edx
c000d7b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b6:	83 ec 0c             	sub    esp,0xc
c000d7b9:	50                   	push   eax
c000d7ba:	e8 6f e7 ff ff       	call   c000bf2e <Device::~Device()>
c000d7bf:	83 c4 10             	add    esp,0x10
c000d7c2:	90                   	nop
c000d7c3:	83 c4 0c             	add    esp,0xc
c000d7c6:	c3                   	ret    
c000d7c7:	90                   	nop

c000d7c8 <Serial::~Serial()>:
c000d7c8:	83 ec 0c             	sub    esp,0xc
c000d7cb:	83 ec 0c             	sub    esp,0xc
c000d7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7d2:	e8 cd ff ff ff       	call   c000d7a4 <Serial::~Serial()>
c000d7d7:	83 c4 10             	add    esp,0x10
c000d7da:	83 ec 08             	sub    esp,0x8
c000d7dd:	68 58 01 00 00       	push   0x158
c000d7e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e6:	e8 0b d3 ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000d7eb:	83 c4 10             	add    esp,0x10
c000d7ee:	83 c4 0c             	add    esp,0xc
c000d7f1:	c3                   	ret    
c000d7f2:	66 90                	xchg   ax,ax

c000d7f4 <Timer::Timer(char const*)>:
c000d7f4:	83 ec 0c             	sub    esp,0xc
c000d7f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7fb:	83 ec 08             	sub    esp,0x8
c000d7fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d802:	50                   	push   eax
c000d803:	e8 bc e9 ff ff       	call   c000c1c4 <Device::Device(char const*)>
c000d808:	83 c4 10             	add    esp,0x10
c000d80b:	ba 1c e3 01 c0       	mov    edx,0xc001e31c
c000d810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d814:	89 10                	mov    DWORD PTR [eax],edx
c000d816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d81a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d824:	90                   	nop
c000d825:	83 c4 0c             	add    esp,0xc
c000d828:	c3                   	ret    
c000d829:	90                   	nop
c000d82a:	66 90                	xchg   ax,ax

c000d82c <Timer::~Timer()>:
c000d82c:	83 ec 0c             	sub    esp,0xc
c000d82f:	ba 1c e3 01 c0       	mov    edx,0xc001e31c
c000d834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d838:	89 10                	mov    DWORD PTR [eax],edx
c000d83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d83e:	83 ec 0c             	sub    esp,0xc
c000d841:	50                   	push   eax
c000d842:	e8 e7 e6 ff ff       	call   c000bf2e <Device::~Device()>
c000d847:	83 c4 10             	add    esp,0x10
c000d84a:	90                   	nop
c000d84b:	83 c4 0c             	add    esp,0xc
c000d84e:	c3                   	ret    
c000d84f:	90                   	nop

c000d850 <Timer::~Timer()>:
c000d850:	83 ec 0c             	sub    esp,0xc
c000d853:	83 ec 0c             	sub    esp,0xc
c000d856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d85a:	e8 cd ff ff ff       	call   c000d82c <Timer::~Timer()>
c000d85f:	83 c4 10             	add    esp,0x10
c000d862:	83 ec 08             	sub    esp,0x8
c000d865:	68 5c 01 00 00       	push   0x15c
c000d86a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d86e:	e8 83 d2 ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000d873:	83 c4 10             	add    esp,0x10
c000d876:	83 c4 0c             	add    esp,0xc
c000d879:	c3                   	ret    

c000d87a <Timer::read()>:
c000d87a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d87e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d884:	c3                   	ret    

c000d885 <setupTimer(int)>:
c000d885:	53                   	push   ebx
c000d886:	83 ec 14             	sub    esp,0x14
c000d889:	68 5c 01 00 00       	push   0x15c
c000d88e:	e8 ca a5 ff ff       	call   c0007e5d <malloc>
c000d893:	89 04 24             	mov    DWORD PTR [esp],eax
c000d896:	89 c3                	mov    ebx,eax
c000d898:	e8 07 e3 00 00       	call   c001bba4 <PIT::PIT()>
c000d89d:	58                   	pop    eax
c000d89e:	5a                   	pop    edx
c000d89f:	53                   	push   ebx
c000d8a0:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c000d8a6:	e8 81 e7 ff ff       	call   c000c02c <Device::addChild(Device*)>
c000d8ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d8ad:	6a 00                	push   0x0
c000d8af:	6a 00                	push   0x0
c000d8b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d8b5:	53                   	push   ebx
c000d8b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d8b9:	89 d8                	mov    eax,ebx
c000d8bb:	83 c4 28             	add    esp,0x28
c000d8be:	5b                   	pop    ebx
c000d8bf:	c3                   	ret    

c000d8c0 <timerHandler(unsigned int)>:
c000d8c0:	56                   	push   esi
c000d8c1:	53                   	push   ebx
c000d8c2:	51                   	push   ecx
c000d8c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c7:	01 05 8c 2f 02 c0    	add    DWORD PTR ds:0xc0022f8c,eax
c000d8cd:	80 3d bd 09 02 c0 00 	cmp    BYTE PTR ds:0xc00209bd,0x0
c000d8d4:	0f 84 4a 01 00 00    	je     c000da24 <timerHandler(unsigned int)+0x164>
c000d8da:	fa                   	cli    
c000d8db:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c000d8e1:	83 ec 0c             	sub    esp,0xc
c000d8e4:	ff 05 84 3e 02 c0    	inc    DWORD PTR ds:0xc0023e84
c000d8ea:	68 98 3e 02 c0       	push   0xc0023e98
c000d8ef:	e8 0c ef 00 00       	call   c001c800 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8f4:	83 c4 10             	add    esp,0x10
c000d8f7:	84 c0                	test   al,al
c000d8f9:	0f 85 a1 00 00 00    	jne    c000d9a0 <timerHandler(unsigned int)+0xe0>
c000d8ff:	83 ec 0c             	sub    esp,0xc
c000d902:	68 98 3e 02 c0       	push   0xc0023e98
c000d907:	e8 10 ef 00 00       	call   c001c81c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d90c:	83 c4 10             	add    esp,0x10
c000d90f:	89 c6                	mov    esi,eax
c000d911:	8d 76 00             	lea    esi,[esi+0x0]
c000d914:	83 ec 0c             	sub    esp,0xc
c000d917:	68 98 3e 02 c0       	push   0xc0023e98
c000d91c:	e8 fb ee 00 00       	call   c001c81c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d921:	c7 04 24 98 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e98
c000d928:	89 c3                	mov    ebx,eax
c000d92a:	e8 f5 ee 00 00       	call   c001c824 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d92f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d932:	83 c4 10             	add    esp,0x10
c000d935:	3b 05 8c 2f 02 c0    	cmp    eax,DWORD PTR ds:0xc0022f8c
c000d93b:	77 23                	ja     c000d960 <timerHandler(unsigned int)+0xa0>
c000d93d:	83 ec 0c             	sub    esp,0xc
c000d940:	53                   	push   ebx
c000d941:	e8 be 65 00 00       	call   c0013f04 <unblockTask(ThreadControlBlock*)>
c000d946:	83 c4 10             	add    esp,0x10
c000d949:	39 de                	cmp    esi,ebx
c000d94b:	75 27                	jne    c000d974 <timerHandler(unsigned int)+0xb4>
c000d94d:	83 ec 0c             	sub    esp,0xc
c000d950:	68 98 3e 02 c0       	push   0xc0023e98
c000d955:	e8 c2 ee 00 00       	call   c001c81c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d95a:	89 c6                	mov    esi,eax
c000d95c:	eb 12                	jmp    c000d970 <timerHandler(unsigned int)+0xb0>
c000d95e:	66 90                	xchg   ax,ax
c000d960:	52                   	push   edx
c000d961:	52                   	push   edx
c000d962:	53                   	push   ebx
c000d963:	68 98 3e 02 c0       	push   0xc0023e98
c000d968:	e8 6f ef 00 00       	call   c001c8dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d96d:	8d 76 00             	lea    esi,[esi+0x0]
c000d970:	83 c4 10             	add    esp,0x10
c000d973:	90                   	nop
c000d974:	83 ec 0c             	sub    esp,0xc
c000d977:	68 98 3e 02 c0       	push   0xc0023e98
c000d97c:	e8 7f ee 00 00       	call   c001c800 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d981:	83 c4 10             	add    esp,0x10
c000d984:	84 c0                	test   al,al
c000d986:	75 18                	jne    c000d9a0 <timerHandler(unsigned int)+0xe0>
c000d988:	83 ec 0c             	sub    esp,0xc
c000d98b:	68 98 3e 02 c0       	push   0xc0023e98
c000d990:	e8 87 ee 00 00       	call   c001c81c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d995:	83 c4 10             	add    esp,0x10
c000d998:	39 f0                	cmp    eax,esi
c000d99a:	0f 85 74 ff ff ff    	jne    c000d914 <timerHandler(unsigned int)+0x54>
c000d9a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d9a5:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d9a9:	74 41                	je     c000d9ec <timerHandler(unsigned int)+0x12c>
c000d9ab:	80 3d bc 09 02 c0 00 	cmp    BYTE PTR ds:0xc00209bc,0x0
c000d9b2:	74 38                	je     c000d9ec <timerHandler(unsigned int)+0x12c>
c000d9b4:	fa                   	cli    
c000d9b5:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c000d9bb:	a1 8c 2f 02 c0       	mov    eax,ds:0xc0022f8c
c000d9c0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d9c6:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d9c9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d9cf:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d9d2:	72 08                	jb     c000d9dc <timerHandler(unsigned int)+0x11c>
c000d9d4:	e8 67 60 00 00       	call   c0013a40 <schedule()>
c000d9d9:	8d 76 00             	lea    esi,[esi+0x0]
c000d9dc:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000d9e1:	48                   	dec    eax
c000d9e2:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000d9e7:	75 03                	jne    c000d9ec <timerHandler(unsigned int)+0x12c>
c000d9e9:	fb                   	sti    
c000d9ea:	66 90                	xchg   ax,ax
c000d9ec:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c000d9f1:	48                   	dec    eax
c000d9f2:	a3 84 3e 02 c0       	mov    ds:0xc0023e84,eax
c000d9f7:	75 1b                	jne    c000da14 <timerHandler(unsigned int)+0x154>
c000d9f9:	83 3d 80 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e80,0x0
c000da00:	74 12                	je     c000da14 <timerHandler(unsigned int)+0x154>
c000da02:	c7 05 80 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x0
c000da0c:	e8 2f 60 00 00       	call   c0013a40 <schedule()>
c000da11:	8d 76 00             	lea    esi,[esi+0x0]
c000da14:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000da19:	48                   	dec    eax
c000da1a:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000da1f:	75 03                	jne    c000da24 <timerHandler(unsigned int)+0x164>
c000da21:	fb                   	sti    
c000da22:	66 90                	xchg   ax,ax
c000da24:	58                   	pop    eax
c000da25:	5b                   	pop    ebx
c000da26:	5e                   	pop    esi
c000da27:	c3                   	ret    

c000da28 <VCache::VCache(PhysicalDisk*)>:
c000da28:	53                   	push   ebx
c000da29:	83 ec 18             	sub    esp,0x18
c000da2c:	ba 4c e3 01 c0       	mov    edx,0xc001e34c
c000da31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da35:	89 10                	mov    DWORD PTR [eax],edx
c000da37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da3b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000da42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da46:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000da4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da51:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000da58:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000da5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da63:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000da6a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000da71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da75:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000da7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da80:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da88:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000da8f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000da96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da9a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daa2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000daa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daaa:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000daae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dab9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000dac1:	83 ec 0c             	sub    esp,0xc
c000dac4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dac8:	e8 90 a3 ff ff       	call   c0007e5d <malloc>
c000dacd:	83 c4 10             	add    esp,0x10
c000dad0:	89 c3                	mov    ebx,eax
c000dad2:	83 ec 0c             	sub    esp,0xc
c000dad5:	53                   	push   ebx
c000dad6:	e8 31 5d 00 00       	call   c001380c <Mutex::Mutex()>
c000dadb:	83 c4 10             	add    esp,0x10
c000dade:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000dae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000daed:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000daf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daf4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000dafb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000daff:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000db05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db09:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000db0c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db10:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000db16:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000db1c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000db20:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000db23:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000db26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db2a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000db2e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db32:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000db38:	05 00 01 00 00       	add    eax,0x100
c000db3d:	c1 e0 04             	shl    eax,0x4
c000db40:	83 ec 0c             	sub    esp,0xc
c000db43:	50                   	push   eax
c000db44:	e8 14 a3 ff ff       	call   c0007e5d <malloc>
c000db49:	83 c4 10             	add    esp,0x10
c000db4c:	89 c2                	mov    edx,eax
c000db4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db52:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000db55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db59:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000db60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db64:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000db68:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db6c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000db72:	c1 e0 06             	shl    eax,0x6
c000db75:	83 ec 0c             	sub    esp,0xc
c000db78:	50                   	push   eax
c000db79:	e8 df a2 ff ff       	call   c0007e5d <malloc>
c000db7e:	83 c4 10             	add    esp,0x10
c000db81:	89 c2                	mov    edx,eax
c000db83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db87:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000db8a:	90                   	nop
c000db8b:	83 c4 18             	add    esp,0x18
c000db8e:	5b                   	pop    ebx
c000db8f:	c3                   	ret    

c000db90 <VCache::invalidateReadBuffer()>:
c000db90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db94:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000db9a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000db9e:	c3                   	ret    
c000db9f:	90                   	nop

c000dba0 <VCache::writeWriteBuffer()>:
c000dba0:	53                   	push   ebx
c000dba1:	83 ec 08             	sub    esp,0x8
c000dba4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dba8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dbac:	74 1e                	je     c000dbcc <VCache::writeWriteBuffer()+0x2c>
c000dbae:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dbb1:	83 ec 0c             	sub    esp,0xc
c000dbb4:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbb6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000dbb9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000dbbc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000dbbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dbc2:	50                   	push   eax
c000dbc3:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000dbc6:	83 c4 20             	add    esp,0x20
c000dbc9:	8d 76 00             	lea    esi,[esi+0x0]
c000dbcc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dbd3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000dbda:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000dbde:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000dbe5:	83 c4 08             	add    esp,0x8
c000dbe8:	5b                   	pop    ebx
c000dbe9:	c3                   	ret    
c000dbea:	66 90                	xchg   ax,ax

c000dbec <VCache::~VCache()>:
c000dbec:	83 ec 0c             	sub    esp,0xc
c000dbef:	ba 4c e3 01 c0       	mov    edx,0xc001e34c
c000dbf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbf8:	89 10                	mov    DWORD PTR [eax],edx
c000dbfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbfe:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000dc01:	84 c0                	test   al,al
c000dc03:	74 0f                	je     c000dc14 <VCache::~VCache()+0x28>
c000dc05:	83 ec 0c             	sub    esp,0xc
c000dc08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0c:	e8 8f ff ff ff       	call   c000dba0 <VCache::writeWriteBuffer()>
c000dc11:	83 c4 10             	add    esp,0x10
c000dc14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc18:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dc1b:	83 ec 0c             	sub    esp,0xc
c000dc1e:	50                   	push   eax
c000dc1f:	e8 49 a2 ff ff       	call   c0007e6d <free>
c000dc24:	83 c4 10             	add    esp,0x10
c000dc27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc2b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000dc2e:	83 ec 0c             	sub    esp,0xc
c000dc31:	50                   	push   eax
c000dc32:	e8 36 a2 ff ff       	call   c0007e6d <free>
c000dc37:	83 c4 10             	add    esp,0x10
c000dc3a:	90                   	nop
c000dc3b:	83 c4 0c             	add    esp,0xc
c000dc3e:	c3                   	ret    
c000dc3f:	90                   	nop

c000dc40 <VCache::~VCache()>:
c000dc40:	83 ec 0c             	sub    esp,0xc
c000dc43:	83 ec 0c             	sub    esp,0xc
c000dc46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc4a:	e8 9d ff ff ff       	call   c000dbec <VCache::~VCache()>
c000dc4f:	83 c4 10             	add    esp,0x10
c000dc52:	83 ec 08             	sub    esp,0x8
c000dc55:	6a 44                	push   0x44
c000dc57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc5b:	e8 96 ce ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000dc60:	83 c4 10             	add    esp,0x10
c000dc63:	83 c4 0c             	add    esp,0xc
c000dc66:	c3                   	ret    
c000dc67:	90                   	nop

c000dc68 <VCache::write(unsigned long long, int, void*)>:
c000dc68:	55                   	push   ebp
c000dc69:	57                   	push   edi
c000dc6a:	56                   	push   esi
c000dc6b:	53                   	push   ebx
c000dc6c:	83 ec 1c             	sub    esp,0x1c
c000dc6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc73:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc7b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dc7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dc83:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dc87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc8b:	31 c0                	xor    eax,eax
c000dc8d:	8d 76 00             	lea    esi,[esi+0x0]
c000dc90:	39 e8                	cmp    eax,ebp
c000dc92:	7d 18                	jge    c000dcac <VCache::write(unsigned long long, int, void*)+0x44>
c000dc94:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000dc97:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000dc9d:	0f af c8             	imul   ecx,eax
c000dca0:	89 ca                	mov    edx,ecx
c000dca2:	01 f2                	add    edx,esi
c000dca4:	8b 3a                	mov    edi,DWORD PTR [edx]
c000dca6:	40                   	inc    eax
c000dca7:	eb e7                	jmp    c000dc90 <VCache::write(unsigned long long, int, void*)+0x28>
c000dca9:	8d 76 00             	lea    esi,[esi+0x0]
c000dcac:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dcb0:	74 0a                	je     c000dcbc <VCache::write(unsigned long long, int, void*)+0x54>
c000dcb2:	53                   	push   ebx
c000dcb3:	e8 d8 fe ff ff       	call   c000db90 <VCache::invalidateReadBuffer()>
c000dcb8:	58                   	pop    eax
c000dcb9:	8d 76 00             	lea    esi,[esi+0x0]
c000dcbc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dcc0:	74 5a                	je     c000dd1c <VCache::write(unsigned long long, int, void*)+0xb4>
c000dcc2:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000dcc5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dcc9:	89 f8                	mov    eax,edi
c000dccb:	99                   	cdq    
c000dccc:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dccf:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dcd2:	31 c1                	xor    ecx,eax
c000dcd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dcd8:	31 d0                	xor    eax,edx
c000dcda:	09 c1                	or     ecx,eax
c000dcdc:	75 32                	jne    c000dd10 <VCache::write(unsigned long long, int, void*)+0xa8>
c000dcde:	83 fd 01             	cmp    ebp,0x1
c000dce1:	75 2d                	jne    c000dd10 <VCache::write(unsigned long long, int, void*)+0xa8>
c000dce3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dce6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dcec:	0f af f9             	imul   edi,ecx
c000dcef:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000dcf2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcf4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dcf7:	40                   	inc    eax
c000dcf8:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dcfb:	83 f8 40             	cmp    eax,0x40
c000dcfe:	75 74                	jne    c000dd74 <VCache::write(unsigned long long, int, void*)+0x10c>
c000dd00:	83 ec 0c             	sub    esp,0xc
c000dd03:	53                   	push   ebx
c000dd04:	e8 97 fe ff ff       	call   c000dba0 <VCache::writeWriteBuffer()>
c000dd09:	83 c4 10             	add    esp,0x10
c000dd0c:	eb 66                	jmp    c000dd74 <VCache::write(unsigned long long, int, void*)+0x10c>
c000dd0e:	66 90                	xchg   ax,ax
c000dd10:	83 ec 0c             	sub    esp,0xc
c000dd13:	53                   	push   ebx
c000dd14:	e8 87 fe ff ff       	call   c000dba0 <VCache::writeWriteBuffer()>
c000dd19:	83 c4 10             	add    esp,0x10
c000dd1c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dd1f:	83 fd 3f             	cmp    ebp,0x3f
c000dd22:	7f 24                	jg     c000dd48 <VCache::write(unsigned long long, int, void*)+0xe0>
c000dd24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dd28:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000dd2b:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000dd2e:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dd32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dd36:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dd39:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000dd3c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dd42:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd44:	eb 2e                	jmp    c000dd74 <VCache::write(unsigned long long, int, void*)+0x10c>
c000dd46:	66 90                	xchg   ax,ax
c000dd48:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd4a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dd4e:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dd52:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dd56:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dd5a:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dd5e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dd62:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000dd66:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dd69:	83 c4 1c             	add    esp,0x1c
c000dd6c:	5b                   	pop    ebx
c000dd6d:	5e                   	pop    esi
c000dd6e:	5f                   	pop    edi
c000dd6f:	5d                   	pop    ebp
c000dd70:	ff e0                	jmp    eax
c000dd72:	66 90                	xchg   ax,ax
c000dd74:	83 c4 1c             	add    esp,0x1c
c000dd77:	31 c0                	xor    eax,eax
c000dd79:	5b                   	pop    ebx
c000dd7a:	5e                   	pop    esi
c000dd7b:	5f                   	pop    edi
c000dd7c:	5d                   	pop    ebp
c000dd7d:	c3                   	ret    

c000dd7e <VCache::read(unsigned long long, int, void*)>:
c000dd7e:	55                   	push   ebp
c000dd7f:	57                   	push   edi
c000dd80:	56                   	push   esi
c000dd81:	53                   	push   ebx
c000dd82:	83 ec 1c             	sub    esp,0x1c
c000dd85:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dd89:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd91:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dd95:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dd99:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dd9d:	31 c0                	xor    eax,eax
c000dd9f:	90                   	nop
c000dda0:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000dda4:	7d 16                	jge    c000ddbc <VCache::read(unsigned long long, int, void*)+0x3e>
c000dda6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000dda9:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000ddaf:	0f af c8             	imul   ecx,eax
c000ddb2:	89 ca                	mov    edx,ecx
c000ddb4:	01 f2                	add    edx,esi
c000ddb6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000ddb8:	40                   	inc    eax
c000ddb9:	eb e5                	jmp    c000dda0 <VCache::read(unsigned long long, int, void*)+0x22>
c000ddbb:	90                   	nop
c000ddbc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ddc0:	74 0e                	je     c000ddd0 <VCache::read(unsigned long long, int, void*)+0x52>
c000ddc2:	83 ec 0c             	sub    esp,0xc
c000ddc5:	53                   	push   ebx
c000ddc6:	e8 d5 fd ff ff       	call   c000dba0 <VCache::writeWriteBuffer()>
c000ddcb:	83 c4 10             	add    esp,0x10
c000ddce:	66 90                	xchg   ax,ax
c000ddd0:	83 ec 0c             	sub    esp,0xc
c000ddd3:	53                   	push   ebx
c000ddd4:	e8 b7 fd ff ff       	call   c000db90 <VCache::invalidateReadBuffer()>
c000ddd9:	83 c4 0c             	add    esp,0xc
c000dddc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dddf:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000dde5:	6a 00                	push   0x0
c000dde7:	56                   	push   esi
c000dde8:	e8 03 27 ff ff       	call   c00004f0 <memset>
c000dded:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ddf0:	8b 10                	mov    edx,DWORD PTR [eax]
c000ddf2:	89 74 24 50          	mov    DWORD PTR [esp+0x50],esi
c000ddf6:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000ddfa:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ddfe:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000de02:	89 74 24 4c          	mov    DWORD PTR [esp+0x4c],esi
c000de06:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000de0a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000de0d:	83 c4 2c             	add    esp,0x2c
c000de10:	5b                   	pop    ebx
c000de11:	5e                   	pop    esi
c000de12:	5f                   	pop    edi
c000de13:	5d                   	pop    ebp
c000de14:	ff e0                	jmp    eax

c000de16 <Video::putrect(int, int, int, int, unsigned int)>:
c000de16:	55                   	push   ebp
c000de17:	57                   	push   edi
c000de18:	56                   	push   esi
c000de19:	53                   	push   ebx
c000de1a:	83 ec 1c             	sub    esp,0x1c
c000de1d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000de21:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de25:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000de29:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000de2d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de35:	01 df                	add    edi,ebx
c000de37:	39 fb                	cmp    ebx,edi
c000de39:	7d 1f                	jge    c000de5a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000de3b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de3f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000de43:	7d 12                	jge    c000de57 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000de45:	8b 16                	mov    edx,DWORD PTR [esi]
c000de47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de4b:	53                   	push   ebx
c000de4c:	55                   	push   ebp
c000de4d:	45                   	inc    ebp
c000de4e:	56                   	push   esi
c000de4f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000de52:	83 c4 10             	add    esp,0x10
c000de55:	eb e8                	jmp    c000de3f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000de57:	43                   	inc    ebx
c000de58:	eb dd                	jmp    c000de37 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000de5a:	83 c4 1c             	add    esp,0x1c
c000de5d:	5b                   	pop    ebx
c000de5e:	5e                   	pop    esi
c000de5f:	5f                   	pop    edi
c000de60:	5d                   	pop    ebp
c000de61:	c3                   	ret    

c000de62 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000de62:	55                   	push   ebp
c000de63:	57                   	push   edi
c000de64:	31 ff                	xor    edi,edi
c000de66:	56                   	push   esi
c000de67:	53                   	push   ebx
c000de68:	83 ec 1c             	sub    esp,0x1c
c000de6b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000de6f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de73:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000de7a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000de7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de83:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000de87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000de8b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000de8e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000de92:	01 f9                	add    ecx,edi
c000de94:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000de98:	7d 2f                	jge    c000dec9 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000de9a:	31 f6                	xor    esi,esi
c000de9c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dea0:	01 f2                	add    edx,esi
c000dea2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000dea6:	7d 1a                	jge    c000dec2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000dea8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000deab:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000deae:	46                   	inc    esi
c000deaf:	51                   	push   ecx
c000deb0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000deb4:	52                   	push   edx
c000deb5:	55                   	push   ebp
c000deb6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000deb9:	83 c4 10             	add    esp,0x10
c000debc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dec0:	eb da                	jmp    c000de9c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000dec2:	47                   	inc    edi
c000dec3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000dec7:	eb c5                	jmp    c000de8e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000dec9:	83 c4 1c             	add    esp,0x1c
c000decc:	5b                   	pop    ebx
c000decd:	5e                   	pop    esi
c000dece:	5f                   	pop    edi
c000decf:	5d                   	pop    ebp
c000ded0:	c3                   	ret    
c000ded1:	90                   	nop

c000ded2 <Video::blit(unsigned int*, int, int, int, int)>:
c000ded2:	55                   	push   ebp
c000ded3:	57                   	push   edi
c000ded4:	56                   	push   esi
c000ded5:	53                   	push   ebx
c000ded6:	83 ec 1c             	sub    esp,0x1c
c000ded9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dedd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dee1:	85 c0                	test   eax,eax
c000dee3:	79 02                	jns    c000dee7 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000dee5:	31 c0                	xor    eax,eax
c000dee7:	c1 e0 02             	shl    eax,0x2
c000deea:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000deee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000def2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000def6:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000defa:	39 d8                	cmp    eax,ebx
c000defc:	7e 49                	jle    c000df47 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000defe:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df04:	7c 41                	jl     c000df47 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000df06:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000df0a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000df0e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000df12:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000df16:	39 f9                	cmp    ecx,edi
c000df18:	7e 22                	jle    c000df3c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000df1a:	83 c5 04             	add    ebp,0x4
c000df1d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df23:	7c 14                	jl     c000df39 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000df25:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df27:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000df2a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df2e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df32:	56                   	push   esi
c000df33:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000df36:	83 c4 10             	add    esp,0x10
c000df39:	47                   	inc    edi
c000df3a:	eb d2                	jmp    c000df0e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000df3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df40:	43                   	inc    ebx
c000df41:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000df45:	eb ab                	jmp    c000def2 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000df47:	83 c4 1c             	add    esp,0x1c
c000df4a:	5b                   	pop    ebx
c000df4b:	5e                   	pop    esi
c000df4c:	5f                   	pop    edi
c000df4d:	5d                   	pop    ebp
c000df4e:	c3                   	ret    
c000df4f:	90                   	nop

c000df50 <Video::clearScreen(unsigned int)>:
c000df50:	57                   	push   edi
c000df51:	56                   	push   esi
c000df52:	53                   	push   ebx
c000df53:	31 db                	xor    ebx,ebx
c000df55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df59:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df5f:	7e 1f                	jle    c000df80 <Video::clearScreen(unsigned int)+0x30>
c000df61:	31 ff                	xor    edi,edi
c000df63:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df69:	7e 12                	jle    c000df7d <Video::clearScreen(unsigned int)+0x2d>
c000df6b:	8b 06                	mov    eax,DWORD PTR [esi]
c000df6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df71:	53                   	push   ebx
c000df72:	57                   	push   edi
c000df73:	47                   	inc    edi
c000df74:	56                   	push   esi
c000df75:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000df78:	83 c4 10             	add    esp,0x10
c000df7b:	eb e6                	jmp    c000df63 <Video::clearScreen(unsigned int)+0x13>
c000df7d:	43                   	inc    ebx
c000df7e:	eb d9                	jmp    c000df59 <Video::clearScreen(unsigned int)+0x9>
c000df80:	5b                   	pop    ebx
c000df81:	5e                   	pop    esi
c000df82:	5f                   	pop    edi
c000df83:	c3                   	ret    

c000df84 <Video::putpixel(int, int, unsigned int)>:
c000df84:	c7 44 24 04 54 e3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e354
c000df8c:	e9 5a 27 00 00       	jmp    c00106eb <Krnl::panic(char const*)>
c000df91:	90                   	nop

c000df92 <Video::Video(char const*)>:
c000df92:	83 ec 0c             	sub    esp,0xc
c000df95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df99:	83 ec 08             	sub    esp,0x8
c000df9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa0:	50                   	push   eax
c000dfa1:	e8 1e e2 ff ff       	call   c000c1c4 <Device::Device(char const*)>
c000dfa6:	83 c4 10             	add    esp,0x10
c000dfa9:	ba c4 e3 01 c0       	mov    edx,0xc001e3c4
c000dfae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb2:	89 10                	mov    DWORD PTR [eax],edx
c000dfb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000dfc2:	90                   	nop
c000dfc3:	83 c4 0c             	add    esp,0xc
c000dfc6:	c3                   	ret    
c000dfc7:	90                   	nop

c000dfc8 <Video::~Video()>:
c000dfc8:	83 ec 0c             	sub    esp,0xc
c000dfcb:	ba c4 e3 01 c0       	mov    edx,0xc001e3c4
c000dfd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd4:	89 10                	mov    DWORD PTR [eax],edx
c000dfd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfda:	83 ec 0c             	sub    esp,0xc
c000dfdd:	50                   	push   eax
c000dfde:	e8 4b df ff ff       	call   c000bf2e <Device::~Device()>
c000dfe3:	83 c4 10             	add    esp,0x10
c000dfe6:	90                   	nop
c000dfe7:	83 c4 0c             	add    esp,0xc
c000dfea:	c3                   	ret    
c000dfeb:	90                   	nop

c000dfec <Video::~Video()>:
c000dfec:	83 ec 0c             	sub    esp,0xc
c000dfef:	83 ec 0c             	sub    esp,0xc
c000dff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff6:	e8 cd ff ff ff       	call   c000dfc8 <Video::~Video()>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	83 ec 08             	sub    esp,0x8
c000e001:	68 64 01 00 00       	push   0x164
c000e006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00a:	e8 e7 ca ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000e00f:	83 c4 10             	add    esp,0x10
c000e012:	83 c4 0c             	add    esp,0xc
c000e015:	c3                   	ret    

c000e016 <Video::isMonochrome()>:
c000e016:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e01a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e020:	c3                   	ret    
c000e021:	90                   	nop

c000e022 <Video::getWidth()>:
c000e022:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e026:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e02c:	c3                   	ret    
c000e02d:	90                   	nop

c000e02e <Video::getHeight()>:
c000e02e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e032:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e038:	c3                   	ret    
c000e039:	90                   	nop

c000e03a <Video::drawCursor(int, int, unsigned char*, int)>:
c000e03a:	55                   	push   ebp
c000e03b:	57                   	push   edi
c000e03c:	56                   	push   esi
c000e03d:	53                   	push   ebx
c000e03e:	83 ec 2c             	sub    esp,0x2c
c000e041:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e045:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e049:	83 f8 01             	cmp    eax,0x1
c000e04c:	19 c9                	sbb    ecx,ecx
c000e04e:	31 db                	xor    ebx,ebx
c000e050:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e054:	89 cd                	mov    ebp,ecx
c000e056:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e05e:	f7 d5                	not    ebp
c000e060:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e066:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e06a:	01 d8                	add    eax,ebx
c000e06c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e070:	56                   	push   esi
c000e071:	e8 b8 ff ff ff       	call   c000e02e <Video::getHeight()>
c000e076:	59                   	pop    ecx
c000e077:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e07b:	7e 70                	jle    c000e0ed <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000e07d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e081:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e085:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e088:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e08c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e090:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e097:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09b:	89 f8                	mov    eax,edi
c000e09d:	83 c0 20             	add    eax,0x20
c000e0a0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e0a4:	56                   	push   esi
c000e0a5:	e8 78 ff ff ff       	call   c000e022 <Video::getWidth()>
c000e0aa:	5a                   	pop    edx
c000e0ab:	39 c7                	cmp    edi,eax
c000e0ad:	7d 34                	jge    c000e0e3 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000e0af:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e0b4:	74 05                	je     c000e0bb <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000e0b6:	8b 06                	mov    eax,DWORD PTR [esi]
c000e0b8:	55                   	push   ebp
c000e0b9:	eb 0d                	jmp    c000e0c8 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000e0bb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e0c0:	74 12                	je     c000e0d4 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000e0c2:	8b 06                	mov    eax,DWORD PTR [esi]
c000e0c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e0c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e0cc:	57                   	push   edi
c000e0cd:	56                   	push   esi
c000e0ce:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e0d1:	83 c4 10             	add    esp,0x10
c000e0d4:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e0d8:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e0dc:	47                   	inc    edi
c000e0dd:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e0e1:	75 c1                	jne    c000e0a4 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000e0e3:	43                   	inc    ebx
c000e0e4:	83 fb 20             	cmp    ebx,0x20
c000e0e7:	0f 85 79 ff ff ff    	jne    c000e066 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000e0ed:	83 c4 2c             	add    esp,0x2c
c000e0f0:	5b                   	pop    ebx
c000e0f1:	5e                   	pop    esi
c000e0f2:	5f                   	pop    edi
c000e0f3:	5d                   	pop    ebp
c000e0f4:	c3                   	ret    
c000e0f5:	90                   	nop

c000e0f6 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e0f6:	55                   	push   ebp
c000e0f7:	57                   	push   edi
c000e0f8:	56                   	push   esi
c000e0f9:	53                   	push   ebx
c000e0fa:	83 ec 28             	sub    esp,0x28
c000e0fd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e101:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e105:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e109:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e10d:	c1 e6 08             	shl    esi,0x8
c000e110:	01 c6                	add    esi,eax
c000e112:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e116:	c1 e0 08             	shl    eax,0x8
c000e119:	01 d0                	add    eax,edx
c000e11b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e11f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e123:	0f af c6             	imul   eax,esi
c000e126:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e12d:	50                   	push   eax
c000e12e:	e8 2a 9d ff ff       	call   c0007e5d <malloc>
c000e133:	83 c4 10             	add    esp,0x10
c000e136:	89 c7                	mov    edi,eax
c000e138:	85 c0                	test   eax,eax
c000e13a:	75 10                	jne    c000e14c <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e13c:	83 ec 0c             	sub    esp,0xc
c000e13f:	68 75 e3 01 c0       	push   0xc001e375
c000e144:	e8 a2 25 00 00       	call   c00106eb <Krnl::panic(char const*)>
c000e149:	83 c4 10             	add    esp,0x10
c000e14c:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000e14f:	ba 12 00 00 00       	mov    edx,0x12
c000e154:	84 c0                	test   al,al
c000e156:	74 11                	je     c000e169 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000e158:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e15c:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e160:	c1 fa 03             	sar    edx,0x3
c000e163:	0f af d1             	imul   edx,ecx
c000e166:	83 c2 12             	add    edx,0x12
c000e169:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e16d:	74 04                	je     c000e173 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000e16f:	85 f6                	test   esi,esi
c000e171:	75 12                	jne    c000e185 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000e173:	83 ec 0c             	sub    esp,0xc
c000e176:	68 85 e3 01 c0       	push   0xc001e385
c000e17b:	e8 6c ca ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000e180:	e9 b8 00 00 00       	jmp    c000e23d <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000e185:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e189:	80 f9 02             	cmp    cl,0x2
c000e18c:	0f 85 96 00 00 00    	jne    c000e228 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000e192:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e197:	75 0e                	jne    c000e1a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000e199:	84 c0                	test   al,al
c000e19b:	75 0a                	jne    c000e1a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000e19d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e1a0:	83 e8 18             	sub    eax,0x18
c000e1a3:	a8 f7                	test   al,0xf7
c000e1a5:	74 0a                	je     c000e1b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000e1a7:	83 ec 0c             	sub    esp,0xc
c000e1aa:	68 9a e3 01 c0       	push   0xc001e39a
c000e1af:	eb 7f                	jmp    c000e230 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000e1b1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e1b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e1c1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e1c5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e1cd:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e1d1:	75 0c                	jne    c000e1df <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000e1d3:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e1d8:	c1 e0 18             	shl    eax,0x18
c000e1db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1df:	45                   	inc    ebp
c000e1e0:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e1e5:	c1 e1 10             	shl    ecx,0x10
c000e1e8:	89 c8                	mov    eax,ecx
c000e1ea:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e1ef:	c1 e1 08             	shl    ecx,0x8
c000e1f2:	09 c1                	or     ecx,eax
c000e1f4:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e1f8:	09 c1                	or     ecx,eax
c000e1fa:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e1fe:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e202:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e206:	c1 f8 03             	sar    eax,0x3
c000e209:	01 c2                	add    edx,eax
c000e20b:	89 e8                	mov    eax,ebp
c000e20d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e211:	39 c6                	cmp    esi,eax
c000e213:	7f b0                	jg     c000e1c5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000e215:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e219:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e21d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e220:	7e 22                	jle    c000e244 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000e222:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000e226:	eb 99                	jmp    c000e1c1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000e228:	50                   	push   eax
c000e229:	50                   	push   eax
c000e22a:	51                   	push   ecx
c000e22b:	68 a8 e3 01 c0       	push   0xc001e3a8
c000e230:	e8 b7 c9 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000e235:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e238:	e8 30 9c ff ff       	call   c0007e6d <free>
c000e23d:	83 c4 10             	add    esp,0x10
c000e240:	31 ff                	xor    edi,edi
c000e242:	eb 0f                	jmp    c000e253 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000e244:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e248:	89 30                	mov    DWORD PTR [eax],esi
c000e24a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e24e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000e251:	89 30                	mov    DWORD PTR [eax],esi
c000e253:	83 c4 1c             	add    esp,0x1c
c000e256:	89 f8                	mov    eax,edi
c000e258:	5b                   	pop    ebx
c000e259:	5e                   	pop    esi
c000e25a:	5f                   	pop    edi
c000e25b:	5d                   	pop    ebp
c000e25c:	c3                   	ret    
c000e25d:	90                   	nop

c000e25e <Video::putTGA(int, int, unsigned char*, int)>:
c000e25e:	55                   	push   ebp
c000e25f:	57                   	push   edi
c000e260:	56                   	push   esi
c000e261:	53                   	push   ebx
c000e262:	83 ec 28             	sub    esp,0x28
c000e265:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e269:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e26d:	50                   	push   eax
c000e26e:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e272:	50                   	push   eax
c000e273:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e277:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e27b:	56                   	push   esi
c000e27c:	e8 75 fe ff ff       	call   c000e0f6 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e281:	83 c4 20             	add    esp,0x20
c000e284:	85 c0                	test   eax,eax
c000e286:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e28a:	74 35                	je     c000e2c1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e28c:	89 c7                	mov    edi,eax
c000e28e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e292:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e296:	39 d8                	cmp    eax,ebx
c000e298:	7e 27                	jle    c000e2c1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e29a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e29e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e2a2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e2a6:	39 e8                	cmp    eax,ebp
c000e2a8:	7e 14                	jle    c000e2be <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e2aa:	8b 06                	mov    eax,DWORD PTR [esi]
c000e2ac:	83 c7 04             	add    edi,0x4
c000e2af:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000e2b2:	53                   	push   ebx
c000e2b3:	55                   	push   ebp
c000e2b4:	45                   	inc    ebp
c000e2b5:	56                   	push   esi
c000e2b6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e2b9:	83 c4 10             	add    esp,0x10
c000e2bc:	eb e0                	jmp    c000e29e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e2be:	43                   	inc    ebx
c000e2bf:	eb cd                	jmp    c000e28e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e2c1:	83 c4 1c             	add    esp,0x1c
c000e2c4:	5b                   	pop    ebx
c000e2c5:	5e                   	pop    esi
c000e2c6:	5f                   	pop    edi
c000e2c7:	5d                   	pop    ebp
c000e2c8:	c3                   	ret    
c000e2c9:	66 90                	xchg   ax,ax
c000e2cb:	90                   	nop

c000e2cc <ACPI::close(int, int, void*)>:
c000e2cc:	83 ec 1c             	sub    esp,0x1c
c000e2cf:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e2d7:	74 0b                	je     c000e2e4 <ACPI::close(int, int, void*)+0x18>
c000e2d9:	b8 00 00 00 00       	mov    eax,0x0
c000e2de:	e9 9d 00 00 00       	jmp    c000e380 <ACPI::close(int, int, void*)+0xb4>
c000e2e3:	90                   	nop
c000e2e4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e2e9:	75 29                	jne    c000e314 <ACPI::close(int, int, void*)+0x48>
c000e2eb:	a1 a8 2f 02 c0       	mov    eax,ds:0xc0022fa8
c000e2f0:	85 c0                	test   eax,eax
c000e2f2:	74 08                	je     c000e2fc <ACPI::close(int, int, void*)+0x30>
c000e2f4:	a1 a8 2f 02 c0       	mov    eax,ds:0xc0022fa8
c000e2f9:	ff d0                	call   eax
c000e2fb:	90                   	nop
c000e2fc:	83 ec 0c             	sub    esp,0xc
c000e2ff:	68 04 e4 01 c0       	push   0xc001e404
c000e304:	e8 e2 23 00 00       	call   c00106eb <Krnl::panic(char const*)>
c000e309:	83 c4 10             	add    esp,0x10
c000e30c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e311:	eb 6d                	jmp    c000e380 <ACPI::close(int, int, void*)+0xb4>
c000e313:	90                   	nop
c000e314:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e319:	75 5d                	jne    c000e378 <ACPI::close(int, int, void*)+0xac>
c000e31b:	a1 a4 2f 02 c0       	mov    eax,ds:0xc0022fa4
c000e320:	85 c0                	test   eax,eax
c000e322:	74 08                	je     c000e32c <ACPI::close(int, int, void*)+0x60>
c000e324:	a1 a4 2f 02 c0       	mov    eax,ds:0xc0022fa4
c000e329:	ff d0                	call   eax
c000e32b:	90                   	nop
c000e32c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e331:	8d 76 00             	lea    esi,[esi+0x0]
c000e334:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e338:	25 ff 00 00 00       	and    eax,0xff
c000e33d:	83 e0 02             	and    eax,0x2
c000e340:	74 1e                	je     c000e360 <ACPI::close(int, int, void*)+0x94>
c000e342:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e349:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e34d:	89 c2                	mov    edx,eax
c000e34f:	ec                   	in     al,dx
c000e350:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e354:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e358:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e35c:	eb d6                	jmp    c000e334 <ACPI::close(int, int, void*)+0x68>
c000e35e:	66 90                	xchg   ax,ax
c000e360:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e367:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e36c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e370:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e374:	ee                   	out    dx,al
c000e375:	8d 76 00             	lea    esi,[esi+0x0]
c000e378:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e37d:	8d 76 00             	lea    esi,[esi+0x0]
c000e380:	83 c4 1c             	add    esp,0x1c
c000e383:	c3                   	ret    

c000e384 <findRSDP()>:
c000e384:	83 ec 1c             	sub    esp,0x1c
c000e387:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000e38c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e392:	83 e0 04             	and    eax,0x4
c000e395:	84 c0                	test   al,al
c000e397:	75 07                	jne    c000e3a0 <findRSDP()+0x1c>
c000e399:	b8 00 00 00 00       	mov    eax,0x0
c000e39e:	eb 70                	jmp    c000e410 <findRSDP()+0x8c>
c000e3a0:	a1 e8 09 02 c0       	mov    eax,ds:0xc00209e8
c000e3a5:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e3aa:	7f 1c                	jg     c000e3c8 <findRSDP()+0x44>
c000e3ac:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000e3b1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3b7:	83 e2 fb             	and    edx,0xfffffffb
c000e3ba:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3c0:	b8 00 00 00 00       	mov    eax,0x0
c000e3c5:	eb 49                	jmp    c000e410 <findRSDP()+0x8c>
c000e3c7:	90                   	nop
c000e3c8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e3d0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e3d8:	77 2e                	ja     c000e408 <findRSDP()+0x84>
c000e3da:	83 ec 04             	sub    esp,0x4
c000e3dd:	6a 08                	push   0x8
c000e3df:	68 9f e4 01 c0       	push   0xc001e49f
c000e3e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3e8:	e8 c3 1f ff ff       	call   c00003b0 <memcmp>
c000e3ed:	83 c4 10             	add    esp,0x10
c000e3f0:	85 c0                	test   eax,eax
c000e3f2:	0f 94 c0             	sete   al
c000e3f5:	84 c0                	test   al,al
c000e3f7:	74 07                	je     c000e400 <findRSDP()+0x7c>
c000e3f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3fd:	eb 11                	jmp    c000e410 <findRSDP()+0x8c>
c000e3ff:	90                   	nop
c000e400:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e405:	eb c9                	jmp    c000e3d0 <findRSDP()+0x4c>
c000e407:	90                   	nop
c000e408:	b8 00 00 00 00       	mov    eax,0x0
c000e40d:	8d 76 00             	lea    esi,[esi+0x0]
c000e410:	83 c4 1c             	add    esp,0x1c
c000e413:	c3                   	ret    

c000e414 <loadACPITables(unsigned char*)>:
c000e414:	57                   	push   edi
c000e415:	56                   	push   esi
c000e416:	53                   	push   ebx
c000e417:	83 ec 60             	sub    esp,0x60
c000e41a:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000e41f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e425:	83 e0 04             	and    eax,0x4
c000e428:	84 c0                	test   al,al
c000e42a:	0f 84 3c 02 00 00    	je     c000e66c <loadACPITables(unsigned char*)+0x258>
c000e430:	a0 c0 31 02 c0       	mov    al,ds:0xc00231c0
c000e435:	84 c0                	test   al,al
c000e437:	74 77                	je     c000e4b0 <loadACPITables(unsigned char*)+0x9c>
c000e439:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e43d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e441:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e445:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e448:	83 e8 24             	sub    eax,0x24
c000e44b:	c1 e8 03             	shr    eax,0x3
c000e44e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e452:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e45a:	66 90                	xchg   ax,ax
c000e45c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e460:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e464:	0f 8d b6 00 00 00    	jge    c000e520 <loadACPITables(unsigned char*)+0x10c>
c000e46a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e46e:	83 c0 24             	add    eax,0x24
c000e471:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e475:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e479:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e47d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e481:	c1 e0 03             	shl    eax,0x3
c000e484:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e488:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e48c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e48f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e491:	89 c1                	mov    ecx,eax
c000e493:	a1 ac 2f 02 c0       	mov    eax,ds:0xc0022fac
c000e498:	8d 50 01             	lea    edx,[eax+0x1]
c000e49b:	89 15 ac 2f 02 c0    	mov    DWORD PTR ds:0xc0022fac,edx
c000e4a1:	89 ca                	mov    edx,ecx
c000e4a3:	89 14 c5 c4 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd03c],edx
c000e4aa:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000e4ae:	eb ac                	jmp    c000e45c <loadACPITables(unsigned char*)+0x48>
c000e4b0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4b4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e4b8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e4bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4bf:	83 e8 24             	sub    eax,0x24
c000e4c2:	c1 e8 02             	shr    eax,0x2
c000e4c5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e4c9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e4d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e4d4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e4d8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e4dc:	7d 42                	jge    c000e520 <loadACPITables(unsigned char*)+0x10c>
c000e4de:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4e2:	83 c0 24             	add    eax,0x24
c000e4e5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e4e9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e4ed:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e4f1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e4f5:	c1 e0 02             	shl    eax,0x2
c000e4f8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e4fc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e500:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e502:	a1 ac 2f 02 c0       	mov    eax,ds:0xc0022fac
c000e507:	8d 50 01             	lea    edx,[eax+0x1]
c000e50a:	89 15 ac 2f 02 c0    	mov    DWORD PTR ds:0xc0022fac,edx
c000e510:	89 ca                	mov    edx,ecx
c000e512:	89 14 c5 c4 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd03c],edx
c000e519:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000e51d:	eb b5                	jmp    c000e4d4 <loadACPITables(unsigned char*)+0xc0>
c000e51f:	90                   	nop
c000e520:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e528:	a1 ac 2f 02 c0       	mov    eax,ds:0xc0022fac
c000e52d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e531:	0f 8d 39 01 00 00    	jge    c000e670 <loadACPITables(unsigned char*)+0x25c>
c000e537:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e53b:	8b 04 c5 c4 2f 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd03c]
c000e542:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e546:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e54a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e54e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e552:	25 ff 0f 00 00       	and    eax,0xfff
c000e557:	89 c6                	mov    esi,eax
c000e559:	8b 1d b0 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ab0
c000e55f:	83 ec 0c             	sub    esp,0xc
c000e562:	6a 01                	push   0x1
c000e564:	e8 30 b4 ff ff       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c000e569:	83 c4 10             	add    esp,0x10
c000e56c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e570:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e576:	83 ec 0c             	sub    esp,0xc
c000e579:	6a 01                	push   0x1
c000e57b:	6a 01                	push   0x1
c000e57d:	50                   	push   eax
c000e57e:	52                   	push   edx
c000e57f:	53                   	push   ebx
c000e580:	e8 a3 bd ff ff       	call   c000a328 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e585:	83 c4 20             	add    esp,0x20
c000e588:	09 f0                	or     eax,esi
c000e58a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e58e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e592:	c1 e0 03             	shl    eax,0x3
c000e595:	05 c0 2f 02 c0       	add    eax,0xc0022fc0
c000e59a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e59e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e5a6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e5ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e5b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e5ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e5be:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e5c2:	89 c6                	mov    esi,eax
c000e5c4:	89 d7                	mov    edi,edx
c000e5c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5c8:	89 c8                	mov    eax,ecx
c000e5ca:	89 fa                	mov    edx,edi
c000e5cc:	89 f3                	mov    ebx,esi
c000e5ce:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e5d2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e5d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e5e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e5e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5e9:	05 00 10 00 00       	add    eax,0x1000
c000e5ee:	c1 e8 0c             	shr    eax,0xc
c000e5f1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e5f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e5fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e601:	25 ff 0f 00 00       	and    eax,0xfff
c000e606:	89 c6                	mov    esi,eax
c000e608:	8b 1d b0 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ab0
c000e60e:	83 ec 0c             	sub    esp,0xc
c000e611:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e615:	e8 7f b3 ff ff       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c000e61a:	83 c4 10             	add    esp,0x10
c000e61d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e621:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e627:	83 ec 0c             	sub    esp,0xc
c000e62a:	6a 01                	push   0x1
c000e62c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e630:	50                   	push   eax
c000e631:	52                   	push   edx
c000e632:	53                   	push   ebx
c000e633:	e8 f0 bc ff ff       	call   c000a328 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e638:	83 c4 20             	add    esp,0x20
c000e63b:	09 f0                	or     eax,esi
c000e63d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e641:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e645:	83 ec 0c             	sub    esp,0xc
c000e648:	50                   	push   eax
c000e649:	e8 7b b6 ff ff       	call   c0009cc9 <Virt::freeKernelVirtualPages(unsigned long)>
c000e64e:	83 c4 10             	add    esp,0x10
c000e651:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e655:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e659:	89 14 c5 c4 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd03c],edx
c000e660:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e664:	e9 bf fe ff ff       	jmp    c000e528 <loadACPITables(unsigned char*)+0x114>
c000e669:	8d 76 00             	lea    esi,[esi+0x0]
c000e66c:	90                   	nop
c000e66d:	8d 76 00             	lea    esi,[esi+0x0]
c000e670:	83 c4 60             	add    esp,0x60
c000e673:	5b                   	pop    ebx
c000e674:	5e                   	pop    esi
c000e675:	5f                   	pop    edi
c000e676:	c3                   	ret    
c000e677:	90                   	nop

c000e678 <findRSDT(unsigned char*)>:
c000e678:	57                   	push   edi
c000e679:	56                   	push   esi
c000e67a:	53                   	push   ebx
c000e67b:	83 ec 50             	sub    esp,0x50
c000e67e:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000e683:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e689:	83 e0 04             	and    eax,0x4
c000e68c:	84 c0                	test   al,al
c000e68e:	75 0c                	jne    c000e69c <findRSDT(unsigned char*)+0x24>
c000e690:	b8 00 00 00 00       	mov    eax,0x0
c000e695:	e9 26 01 00 00       	jmp    c000e7c0 <findRSDT(unsigned char*)+0x148>
c000e69a:	66 90                	xchg   ax,ax
c000e69c:	89 e0                	mov    eax,esp
c000e69e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e6a2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e6a6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e6aa:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e6b2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e6ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e6be:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e6c2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e6c6:	89 c6                	mov    esi,eax
c000e6c8:	89 d7                	mov    edi,edx
c000e6ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6cc:	89 c8                	mov    eax,ecx
c000e6ce:	89 fa                	mov    edx,edi
c000e6d0:	89 f3                	mov    ebx,esi
c000e6d2:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e6d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e6da:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e6de:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e6e2:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e6e6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e6ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e6f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e6f6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e6fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6fe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e702:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e706:	25 ff 0f 00 00       	and    eax,0xfff
c000e70b:	89 c6                	mov    esi,eax
c000e70d:	8b 1d b0 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ab0
c000e713:	83 ec 0c             	sub    esp,0xc
c000e716:	6a 02                	push   0x2
c000e718:	e8 7c b2 ff ff       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c000e71d:	83 c4 10             	add    esp,0x10
c000e720:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e724:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 01                	push   0x1
c000e72f:	6a 02                	push   0x2
c000e731:	50                   	push   eax
c000e732:	52                   	push   edx
c000e733:	53                   	push   ebx
c000e734:	e8 ef bb ff ff       	call   c000a328 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e739:	83 c4 20             	add    esp,0x20
c000e73c:	09 f0                	or     eax,esi
c000e73e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e742:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e746:	25 ff 0f 00 00       	and    eax,0xfff
c000e74b:	89 c6                	mov    esi,eax
c000e74d:	8b 1d b0 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ab0
c000e753:	83 ec 0c             	sub    esp,0xc
c000e756:	6a 02                	push   0x2
c000e758:	e8 3c b2 ff ff       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c000e75d:	83 c4 10             	add    esp,0x10
c000e760:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e764:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e76a:	83 ec 0c             	sub    esp,0xc
c000e76d:	6a 01                	push   0x1
c000e76f:	6a 02                	push   0x2
c000e771:	50                   	push   eax
c000e772:	52                   	push   edx
c000e773:	53                   	push   ebx
c000e774:	e8 af bb ff ff       	call   c000a328 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e779:	83 c4 20             	add    esp,0x20
c000e77c:	09 f0                	or     eax,esi
c000e77e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e782:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e787:	75 13                	jne    c000e79c <findRSDT(unsigned char*)+0x124>
c000e789:	c6 05 c0 31 02 c0 00 	mov    BYTE PTR ds:0xc00231c0,0x0
c000e790:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e794:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e798:	eb 22                	jmp    c000e7bc <findRSDT(unsigned char*)+0x144>
c000e79a:	66 90                	xchg   ax,ax
c000e79c:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e7a1:	75 11                	jne    c000e7b4 <findRSDT(unsigned char*)+0x13c>
c000e7a3:	c6 05 c0 31 02 c0 01 	mov    BYTE PTR ds:0xc00231c0,0x1
c000e7aa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e7ae:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7b2:	eb 08                	jmp    c000e7bc <findRSDT(unsigned char*)+0x144>
c000e7b4:	b8 00 00 00 00       	mov    eax,0x0
c000e7b9:	eb 05                	jmp    c000e7c0 <findRSDT(unsigned char*)+0x148>
c000e7bb:	90                   	nop
c000e7bc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e7c0:	83 c4 50             	add    esp,0x50
c000e7c3:	5b                   	pop    ebx
c000e7c4:	5e                   	pop    esi
c000e7c5:	5f                   	pop    edi
c000e7c6:	c3                   	ret    
c000e7c7:	90                   	nop

c000e7c8 <findDataTable(unsigned char*, char*)>:
c000e7c8:	83 ec 1c             	sub    esp,0x1c
c000e7cb:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000e7d0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e7d6:	83 e0 04             	and    eax,0x4
c000e7d9:	84 c0                	test   al,al
c000e7db:	75 07                	jne    c000e7e4 <findDataTable(unsigned char*, char*)+0x1c>
c000e7dd:	b8 00 00 00 00       	mov    eax,0x0
c000e7e2:	eb 58                	jmp    c000e83c <findDataTable(unsigned char*, char*)+0x74>
c000e7e4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e7ec:	a1 ac 2f 02 c0       	mov    eax,ds:0xc0022fac
c000e7f1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e7f5:	7d 3d                	jge    c000e834 <findDataTable(unsigned char*, char*)+0x6c>
c000e7f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7fb:	c1 e0 03             	shl    eax,0x3
c000e7fe:	05 c0 2f 02 c0       	add    eax,0xc0022fc0
c000e803:	83 ec 04             	sub    esp,0x4
c000e806:	6a 04                	push   0x4
c000e808:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e80c:	50                   	push   eax
c000e80d:	e8 9e 1b ff ff       	call   c00003b0 <memcmp>
c000e812:	83 c4 10             	add    esp,0x10
c000e815:	85 c0                	test   eax,eax
c000e817:	0f 94 c0             	sete   al
c000e81a:	84 c0                	test   al,al
c000e81c:	74 0e                	je     c000e82c <findDataTable(unsigned char*, char*)+0x64>
c000e81e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e822:	8b 04 c5 c4 2f 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd03c]
c000e829:	eb 11                	jmp    c000e83c <findDataTable(unsigned char*, char*)+0x74>
c000e82b:	90                   	nop
c000e82c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e830:	eb ba                	jmp    c000e7ec <findDataTable(unsigned char*, char*)+0x24>
c000e832:	66 90                	xchg   ax,ax
c000e834:	b8 00 00 00 00       	mov    eax,0x0
c000e839:	8d 76 00             	lea    esi,[esi+0x0]
c000e83c:	83 c4 1c             	add    esp,0x1c
c000e83f:	c3                   	ret    

c000e840 <scanMADT()>:
c000e840:	53                   	push   ebx
c000e841:	83 ec 38             	sub    esp,0x38
c000e844:	a1 d0 09 02 c0       	mov    eax,ds:0xc00209d0
c000e849:	25 00 04 00 00       	and    eax,0x400
c000e84e:	74 14                	je     c000e864 <scanMADT()+0x24>
c000e850:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000e855:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e85b:	83 e2 fb             	and    edx,0xfffffffb
c000e85e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e864:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000e869:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e86f:	83 e0 04             	and    eax,0x4
c000e872:	84 c0                	test   al,al
c000e874:	0f 84 8a 04 00 00    	je     c000ed04 <scanMADT()+0x4c4>
c000e87a:	e8 05 fb ff ff       	call   c000e384 <findRSDP()>
c000e87f:	a3 cc 31 02 c0       	mov    ds:0xc00231cc,eax
c000e884:	a1 cc 31 02 c0       	mov    eax,ds:0xc00231cc
c000e889:	85 c0                	test   eax,eax
c000e88b:	75 1b                	jne    c000e8a8 <scanMADT()+0x68>
c000e88d:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000e892:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e898:	83 e2 fb             	and    edx,0xfffffffb
c000e89b:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8a1:	e9 66 04 00 00       	jmp    c000ed0c <scanMADT()+0x4cc>
c000e8a6:	66 90                	xchg   ax,ax
c000e8a8:	a1 cc 31 02 c0       	mov    eax,ds:0xc00231cc
c000e8ad:	83 ec 0c             	sub    esp,0xc
c000e8b0:	50                   	push   eax
c000e8b1:	e8 c2 fd ff ff       	call   c000e678 <findRSDT(unsigned char*)>
c000e8b6:	83 c4 10             	add    esp,0x10
c000e8b9:	a3 c8 31 02 c0       	mov    ds:0xc00231c8,eax
c000e8be:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000e8c3:	85 c0                	test   eax,eax
c000e8c5:	75 19                	jne    c000e8e0 <scanMADT()+0xa0>
c000e8c7:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000e8cc:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8d2:	83 e2 fb             	and    edx,0xfffffffb
c000e8d5:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8db:	e9 2c 04 00 00       	jmp    c000ed0c <scanMADT()+0x4cc>
c000e8e0:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000e8e5:	83 ec 0c             	sub    esp,0xc
c000e8e8:	50                   	push   eax
c000e8e9:	e8 26 fb ff ff       	call   c000e414 <loadACPITables(unsigned char*)>
c000e8ee:	83 c4 10             	add    esp,0x10
c000e8f1:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000e8f6:	83 ec 08             	sub    esp,0x8
c000e8f9:	68 a8 e4 01 c0       	push   0xc001e4a8
c000e8fe:	50                   	push   eax
c000e8ff:	e8 c4 fe ff ff       	call   c000e7c8 <findDataTable(unsigned char*, char*)>
c000e904:	83 c4 10             	add    esp,0x10
c000e907:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e90b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e910:	75 1a                	jne    c000e92c <scanMADT()+0xec>
c000e912:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000e917:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e91d:	83 e2 fe             	and    edx,0xfffffffe
c000e920:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e926:	e9 e1 03 00 00       	jmp    c000ed0c <scanMADT()+0x4cc>
c000e92b:	90                   	nop
c000e92c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e934:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e938:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e93b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e93f:	0f 87 c7 03 00 00    	ja     c000ed0c <scanMADT()+0x4cc>
c000e945:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e94d:	0f 87 b9 03 00 00    	ja     c000ed0c <scanMADT()+0x4cc>
c000e953:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e957:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e95b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e95f:	8d 50 01             	lea    edx,[eax+0x1]
c000e962:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e966:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e96a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e96e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e972:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e976:	8d 50 01             	lea    edx,[eax+0x1]
c000e979:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e97d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e981:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e985:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e989:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e98e:	0f 86 74 03 00 00    	jbe    c000ed08 <scanMADT()+0x4c8>
c000e994:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e999:	75 5d                	jne    c000e9f8 <scanMADT()+0x1b8>
c000e99b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e99f:	8d 50 01             	lea    edx,[eax+0x1]
c000e9a2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9a6:	8a 15 c0 33 02 c0    	mov    dl,BYTE PTR ds:0xc00233c0
c000e9ac:	81 e2 ff 00 00 00    	and    edx,0xff
c000e9b2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9b6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e9ba:	88 82 00 34 02 c0    	mov    BYTE PTR [edx-0x3ffdcc00],al
c000e9c0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e9c4:	8d 42 01             	lea    eax,[edx+0x1]
c000e9c7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e9cb:	a0 c0 33 02 c0       	mov    al,ds:0xc00233c0
c000e9d0:	8d 48 01             	lea    ecx,[eax+0x1]
c000e9d3:	88 0d c0 33 02 c0    	mov    BYTE PTR ds:0xc00233c0,cl
c000e9d9:	25 ff 00 00 00       	and    eax,0xff
c000e9de:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9e2:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e9e6:	88 90 e0 33 02 c0    	mov    BYTE PTR [eax-0x3ffdcc20],dl
c000e9ec:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e9f1:	e9 f6 02 00 00       	jmp    c000ecec <scanMADT()+0x4ac>
c000e9f6:	66 90                	xchg   ax,ax
c000e9f8:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e9fd:	0f 85 29 01 00 00    	jne    c000eb2c <scanMADT()+0x2ec>
c000ea03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea07:	8d 50 01             	lea    edx,[eax+0x1]
c000ea0a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea0e:	8a 15 80 32 02 c0    	mov    dl,BYTE PTR ds:0xc0023280
c000ea14:	81 e2 ff 00 00 00    	and    edx,0xff
c000ea1a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea1e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea22:	88 82 a0 32 02 c0    	mov    BYTE PTR [edx-0x3ffdcd60],al
c000ea28:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000ea2c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea30:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea34:	01 d0                	add    eax,edx
c000ea36:	83 c0 2c             	add    eax,0x2c
c000ea39:	8a 00                	mov    al,BYTE PTR [eax]
c000ea3b:	31 d2                	xor    edx,edx
c000ea3d:	88 c2                	mov    dl,al
c000ea3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea43:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea46:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea4a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ea4e:	25 ff 00 00 00       	and    eax,0xff
c000ea53:	c1 e0 08             	shl    eax,0x8
c000ea56:	89 d1                	mov    ecx,edx
c000ea58:	09 c1                	or     ecx,eax
c000ea5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea5e:	8d 50 02             	lea    edx,[eax+0x2]
c000ea61:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea65:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea69:	25 ff 00 00 00       	and    eax,0xff
c000ea6e:	c1 e0 10             	shl    eax,0x10
c000ea71:	09 c1                	or     ecx,eax
c000ea73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea77:	8d 50 03             	lea    edx,[eax+0x3]
c000ea7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea7e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea82:	25 ff 00 00 00       	and    eax,0xff
c000ea87:	c1 e0 18             	shl    eax,0x18
c000ea8a:	09 c1                	or     ecx,eax
c000ea8c:	89 ca                	mov    edx,ecx
c000ea8e:	a0 80 32 02 c0       	mov    al,ds:0xc0023280
c000ea93:	25 ff 00 00 00       	and    eax,0xff
c000ea98:	89 14 85 c0 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcd40],edx
c000ea9f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eaa4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eaa8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaac:	01 d0                	add    eax,edx
c000eaae:	83 c0 2c             	add    eax,0x2c
c000eab1:	8a 00                	mov    al,BYTE PTR [eax]
c000eab3:	31 d2                	xor    edx,edx
c000eab5:	88 c2                	mov    dl,al
c000eab7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eabb:	8d 48 01             	lea    ecx,[eax+0x1]
c000eabe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eac2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eac6:	25 ff 00 00 00       	and    eax,0xff
c000eacb:	c1 e0 08             	shl    eax,0x8
c000eace:	89 d1                	mov    ecx,edx
c000ead0:	09 c1                	or     ecx,eax
c000ead2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ead6:	8d 50 02             	lea    edx,[eax+0x2]
c000ead9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eadd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eae1:	25 ff 00 00 00       	and    eax,0xff
c000eae6:	c1 e0 10             	shl    eax,0x10
c000eae9:	09 c1                	or     ecx,eax
c000eaeb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaef:	8d 50 03             	lea    edx,[eax+0x3]
c000eaf2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eaf6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eafa:	25 ff 00 00 00       	and    eax,0xff
c000eaff:	c1 e0 18             	shl    eax,0x18
c000eb02:	09 c1                	or     ecx,eax
c000eb04:	89 ca                	mov    edx,ecx
c000eb06:	a0 80 32 02 c0       	mov    al,ds:0xc0023280
c000eb0b:	25 ff 00 00 00       	and    eax,0xff
c000eb10:	89 14 85 40 33 02 c0 	mov    DWORD PTR [eax*4-0x3ffdccc0],edx
c000eb17:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eb1c:	a0 80 32 02 c0       	mov    al,ds:0xc0023280
c000eb21:	40                   	inc    eax
c000eb22:	a2 80 32 02 c0       	mov    ds:0xc0023280,al
c000eb27:	e9 c0 01 00 00       	jmp    c000ecec <scanMADT()+0x4ac>
c000eb2c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000eb31:	0f 85 fd 00 00 00    	jne    c000ec34 <scanMADT()+0x3f4>
c000eb37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb3b:	8d 50 01             	lea    edx,[eax+0x1]
c000eb3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb42:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb46:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb4a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000eb4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb52:	8d 50 01             	lea    edx,[eax+0x1]
c000eb55:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb59:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb5d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb61:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000eb65:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb69:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb6d:	01 d0                	add    eax,edx
c000eb6f:	83 c0 2c             	add    eax,0x2c
c000eb72:	8a 00                	mov    al,BYTE PTR [eax]
c000eb74:	31 d2                	xor    edx,edx
c000eb76:	88 c2                	mov    dl,al
c000eb78:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb7c:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb83:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eb87:	25 ff 00 00 00       	and    eax,0xff
c000eb8c:	c1 e0 08             	shl    eax,0x8
c000eb8f:	89 d1                	mov    ecx,edx
c000eb91:	09 c1                	or     ecx,eax
c000eb93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb97:	8d 50 02             	lea    edx,[eax+0x2]
c000eb9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb9e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eba2:	25 ff 00 00 00       	and    eax,0xff
c000eba7:	c1 e0 10             	shl    eax,0x10
c000ebaa:	09 c1                	or     ecx,eax
c000ebac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebb0:	8d 50 03             	lea    edx,[eax+0x3]
c000ebb3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebb7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ebbb:	25 ff 00 00 00       	and    eax,0xff
c000ebc0:	c1 e0 18             	shl    eax,0x18
c000ebc3:	09 c8                	or     eax,ecx
c000ebc5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ebc9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ebce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebd2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebd6:	01 d0                	add    eax,edx
c000ebd8:	83 c0 2c             	add    eax,0x2c
c000ebdb:	8a 00                	mov    al,BYTE PTR [eax]
c000ebdd:	25 ff 00 00 00       	and    eax,0xff
c000ebe2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ebe6:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ebe9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebed:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000ebf1:	81 e2 ff 00 00 00    	and    edx,0xff
c000ebf7:	c1 e2 08             	shl    edx,0x8
c000ebfa:	09 d0                	or     eax,edx
c000ebfc:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ec01:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec06:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000ec0a:	25 ff 00 00 00       	and    eax,0xff
c000ec0f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ec13:	88 90 20 f9 01 c0    	mov    BYTE PTR [eax-0x3ffe06e0],dl
c000ec19:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000ec1d:	31 d2                	xor    edx,edx
c000ec1f:	88 c2                	mov    dl,al
c000ec21:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000ec26:	66 89 84 12 60 32 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdcda0],ax
c000ec2e:	e9 b9 00 00 00       	jmp    c000ecec <scanMADT()+0x4ac>
c000ec33:	90                   	nop
c000ec34:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000ec39:	0f 85 a1 00 00 00    	jne    c000ece0 <scanMADT()+0x4a0>
c000ec3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec43:	8d 50 01             	lea    edx,[eax+0x1]
c000ec46:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec4e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec52:	25 ff 00 00 00       	and    eax,0xff
c000ec57:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec5b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec5f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec63:	01 d0                	add    eax,edx
c000ec65:	83 c0 2c             	add    eax,0x2c
c000ec68:	8a 00                	mov    al,BYTE PTR [eax]
c000ec6a:	31 d2                	xor    edx,edx
c000ec6c:	88 c2                	mov    dl,al
c000ec6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec72:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec75:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec79:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ec7d:	25 ff 00 00 00       	and    eax,0xff
c000ec82:	c1 e0 08             	shl    eax,0x8
c000ec85:	09 d0                	or     eax,edx
c000ec87:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec8b:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec94:	8d 50 01             	lea    edx,[eax+0x1]
c000ec97:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec9b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec9f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eca3:	25 ff 00 00 00       	and    eax,0xff
c000eca8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ecac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecb0:	c1 e0 08             	shl    eax,0x8
c000ecb3:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ecb7:	89 c1                	mov    ecx,eax
c000ecb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecbd:	c1 e0 18             	shl    eax,0x18
c000ecc0:	89 c3                	mov    ebx,eax
c000ecc2:	a1 d0 31 02 c0       	mov    eax,ds:0xc00231d0
c000ecc7:	8d 50 01             	lea    edx,[eax+0x1]
c000ecca:	89 15 d0 31 02 c0    	mov    DWORD PTR ds:0xc00231d0,edx
c000ecd0:	09 d9                	or     ecx,ebx
c000ecd2:	89 ca                	mov    edx,ecx
c000ecd4:	89 14 85 e0 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdce20],edx
c000ecdb:	eb 0f                	jmp    c000ecec <scanMADT()+0x4ac>
c000ecdd:	8d 76 00             	lea    esi,[esi+0x0]
c000ece0:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000ece5:	75 05                	jne    c000ecec <scanMADT()+0x4ac>
c000ece7:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ecec:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000ecf0:	31 d2                	xor    edx,edx
c000ecf2:	88 c2                	mov    dl,al
c000ecf4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ecf8:	01 d0                	add    eax,edx
c000ecfa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ecfe:	e9 31 fc ff ff       	jmp    c000e934 <scanMADT()+0xf4>
c000ed03:	90                   	nop
c000ed04:	90                   	nop
c000ed05:	eb 05                	jmp    c000ed0c <scanMADT()+0x4cc>
c000ed07:	90                   	nop
c000ed08:	90                   	nop
c000ed09:	8d 76 00             	lea    esi,[esi+0x0]
c000ed0c:	83 c4 38             	add    esp,0x38
c000ed0f:	5b                   	pop    ebx
c000ed10:	c3                   	ret    
c000ed11:	90                   	nop
c000ed12:	66 90                	xchg   ax,ax

c000ed14 <ACPI::ACPI()>:
c000ed14:	83 ec 0c             	sub    esp,0xc
c000ed17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed1b:	83 ec 08             	sub    esp,0x8
c000ed1e:	68 ad e4 01 c0       	push   0xc001e4ad
c000ed23:	50                   	push   eax
c000ed24:	e8 9b d4 ff ff       	call   c000c1c4 <Device::Device(char const*)>
c000ed29:	83 c4 10             	add    esp,0x10
c000ed2c:	ba e4 e5 01 c0       	mov    edx,0xc001e5e4
c000ed31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed35:	89 10                	mov    DWORD PTR [eax],edx
c000ed37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed3b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ed42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed46:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed54:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ed5e:	e8 dd fa ff ff       	call   c000e840 <scanMADT()>
c000ed63:	90                   	nop
c000ed64:	83 c4 0c             	add    esp,0xc
c000ed67:	c3                   	ret    

c000ed68 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000ed68:	83 ec 2c             	sub    esp,0x2c
c000ed6b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ed6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ed73:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ed77:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000ed7b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ed80:	88 d0                	mov    al,dl
c000ed82:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ed86:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ed8b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ed93:	90                   	nop
c000ed94:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed98:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ed9e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000eda2:	0f 8d 9c 00 00 00    	jge    c000ee44 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000eda8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edb0:	83 c2 2a             	add    edx,0x2a
c000edb3:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000edb7:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000edbc:	75 7a                	jne    c000ee38 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000edbe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edc2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edc6:	83 c2 2a             	add    edx,0x2a
c000edc9:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000edcd:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000edd1:	75 65                	jne    c000ee38 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000edd3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000edd8:	74 3a                	je     c000ee14 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000edda:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edde:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ede2:	83 c2 2a             	add    edx,0x2a
c000ede5:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ede9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eded:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edf0:	39 c2                	cmp    edx,eax
c000edf2:	74 10                	je     c000ee04 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000edf4:	83 ec 0c             	sub    esp,0xc
c000edf7:	68 28 e4 01 c0       	push   0xc001e428
c000edfc:	e8 ea 18 00 00       	call   c00106eb <Krnl::panic(char const*)>
c000ee01:	83 c4 10             	add    esp,0x10
c000ee04:	83 ec 0c             	sub    esp,0xc
c000ee07:	68 b2 e4 01 c0       	push   0xc001e4b2
c000ee0c:	e8 da 18 00 00       	call   c00106eb <Krnl::panic(char const*)>
c000ee11:	83 c4 10             	add    esp,0x10
c000ee14:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee18:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee1c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee20:	83 c2 2a             	add    edx,0x2a
c000ee23:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ee27:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee29:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee2c:	89 01                	mov    DWORD PTR [ecx],eax
c000ee2e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ee31:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee36:	66 90                	xchg   ax,ax
c000ee38:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ee3c:	e9 53 ff ff ff       	jmp    c000ed94 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ee41:	8d 76 00             	lea    esi,[esi+0x0]
c000ee44:	90                   	nop
c000ee45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee49:	83 c4 2c             	add    esp,0x2c
c000ee4c:	c2 04 00             	ret    0x4
c000ee4f:	90                   	nop

c000ee50 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ee50:	83 ec 1c             	sub    esp,0x1c
c000ee53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee57:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ee5b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee5f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ee64:	88 c8                	mov    al,cl
c000ee66:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ee6a:	88 d0                	mov    al,dl
c000ee6c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ee70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee74:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee7e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ee81:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000ee85:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000ee89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee8d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ee93:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ee97:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000ee9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee9e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000eea3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eea7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eead:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000eeb1:	8d 48 01             	lea    ecx,[eax+0x1]
c000eeb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeb8:	83 c2 2a             	add    edx,0x2a
c000eebb:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000eebf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eecd:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eed0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000eed4:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000eed8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eedc:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eee2:	8d 50 01             	lea    edx,[eax+0x1]
c000eee5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eee9:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000eeef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eef3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eef9:	3d 00 02 00 00       	cmp    eax,0x200
c000eefe:	75 10                	jne    c000ef10 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000ef00:	83 ec 0c             	sub    esp,0xc
c000ef03:	68 c1 e4 01 c0       	push   0xc001e4c1
c000ef08:	e8 de 17 00 00       	call   c00106eb <Krnl::panic(char const*)>
c000ef0d:	83 c4 10             	add    esp,0x10
c000ef10:	90                   	nop
c000ef11:	83 c4 1c             	add    esp,0x1c
c000ef14:	c3                   	ret    
c000ef15:	90                   	nop
c000ef16:	66 90                	xchg   ax,ax

c000ef18 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ef18:	b8 00 00 00 00       	mov    eax,0x0
c000ef1d:	c3                   	ret    
c000ef1e:	66 90                	xchg   ax,ax

c000ef20 <ACPI::detectPCI()>:
c000ef20:	53                   	push   ebx
c000ef21:	83 ec 28             	sub    esp,0x28
c000ef24:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ef29:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ef2e:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000ef33:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef39:	83 e0 04             	and    eax,0x4
c000ef3c:	84 c0                	test   al,al
c000ef3e:	74 2c                	je     c000ef6c <ACPI::detectPCI()+0x4c>
c000ef40:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000ef45:	83 ec 08             	sub    esp,0x8
c000ef48:	68 de e4 01 c0       	push   0xc001e4de
c000ef4d:	50                   	push   eax
c000ef4e:	e8 75 f8 ff ff       	call   c000e7c8 <findDataTable(unsigned char*, char*)>
c000ef53:	83 c4 10             	add    esp,0x10
c000ef56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef5a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ef5f:	74 0b                	je     c000ef6c <ACPI::detectPCI()+0x4c>
c000ef61:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef66:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef6b:	90                   	nop
c000ef6c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ef74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef78:	8a 00                	mov    al,BYTE PTR [eax]
c000ef7a:	3c 01                	cmp    al,0x1
c000ef7c:	75 0e                	jne    c000ef8c <ACPI::detectPCI()+0x6c>
c000ef7e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef83:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef88:	eb 2a                	jmp    c000efb4 <ACPI::detectPCI()+0x94>
c000ef8a:	66 90                	xchg   ax,ax
c000ef8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef90:	8a 00                	mov    al,BYTE PTR [eax]
c000ef92:	3c 02                	cmp    al,0x2
c000ef94:	75 1e                	jne    c000efb4 <ACPI::detectPCI()+0x94>
c000ef96:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef9b:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000efa0:	74 12                	je     c000efb4 <ACPI::detectPCI()+0x94>
c000efa2:	83 ec 0c             	sub    esp,0xc
c000efa5:	68 58 e4 01 c0       	push   0xc001e458
c000efaa:	e8 3c 17 00 00       	call   c00106eb <Krnl::panic(char const*)>
c000efaf:	83 c4 10             	add    esp,0x10
c000efb2:	66 90                	xchg   ax,ax
c000efb4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000efb8:	83 f0 01             	xor    eax,0x1
c000efbb:	84 c0                	test   al,al
c000efbd:	74 41                	je     c000f000 <ACPI::detectPCI()+0xe0>
c000efbf:	e8 8c 11 ff ff       	call   c0000150 <manualPCIProbe>
c000efc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000efc8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000efcd:	75 0d                	jne    c000efdc <ACPI::detectPCI()+0xbc>
c000efcf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efd4:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efd9:	eb 25                	jmp    c000f000 <ACPI::detectPCI()+0xe0>
c000efdb:	90                   	nop
c000efdc:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000efe1:	75 1d                	jne    c000f000 <ACPI::detectPCI()+0xe0>
c000efe3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efe8:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000efed:	74 11                	je     c000f000 <ACPI::detectPCI()+0xe0>
c000efef:	83 ec 0c             	sub    esp,0xc
c000eff2:	68 58 e4 01 c0       	push   0xc001e458
c000eff7:	e8 ef 16 00 00       	call   c00106eb <Krnl::panic(char const*)>
c000effc:	83 c4 10             	add    esp,0x10
c000efff:	90                   	nop
c000f000:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000f005:	0f 84 85 00 00 00    	je     c000f090 <ACPI::detectPCI()+0x170>
c000f00b:	83 ec 0c             	sub    esp,0xc
c000f00e:	68 e3 e4 01 c0       	push   0xc001e4e3
c000f013:	e8 9f 8e ff ff       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c000f018:	83 c4 10             	add    esp,0x10
c000f01b:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f023:	83 ec 0c             	sub    esp,0xc
c000f026:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f02a:	e8 2e 8e ff ff       	call   c0007e5d <malloc>
c000f02f:	83 c4 10             	add    esp,0x10
c000f032:	89 c3                	mov    ebx,eax
c000f034:	83 ec 0c             	sub    esp,0xc
c000f037:	53                   	push   ebx
c000f038:	e8 51 95 00 00       	call   c001858e <PCI::PCI()>
c000f03d:	83 c4 10             	add    esp,0x10
c000f040:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f044:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f048:	83 ec 08             	sub    esp,0x8
c000f04b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f04f:	50                   	push   eax
c000f050:	e8 d7 cf ff ff       	call   c000c02c <Device::addChild(Device*)>
c000f055:	83 c4 10             	add    esp,0x10
c000f058:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f05c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f05e:	83 c0 08             	add    eax,0x8
c000f061:	8b 00                	mov    eax,DWORD PTR [eax]
c000f063:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000f068:	74 0a                	je     c000f074 <ACPI::detectPCI()+0x154>
c000f06a:	ba 01 00 00 00       	mov    edx,0x1
c000f06f:	eb 0b                	jmp    c000f07c <ACPI::detectPCI()+0x15c>
c000f071:	8d 76 00             	lea    esi,[esi+0x0]
c000f074:	ba 02 00 00 00       	mov    edx,0x2
c000f079:	8d 76 00             	lea    esi,[esi+0x0]
c000f07c:	6a 00                	push   0x0
c000f07e:	6a 00                	push   0x0
c000f080:	52                   	push   edx
c000f081:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f085:	ff d0                	call   eax
c000f087:	83 c4 10             	add    esp,0x10
c000f08a:	e9 91 00 00 00       	jmp    c000f120 <ACPI::detectPCI()+0x200>
c000f08f:	90                   	nop
c000f090:	83 ec 0c             	sub    esp,0xc
c000f093:	68 fb e4 01 c0       	push   0xc001e4fb
c000f098:	e8 1a 8e ff ff       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c000f09d:	83 c4 10             	add    esp,0x10
c000f0a0:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f0a7:	83 ec 0c             	sub    esp,0xc
c000f0aa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f0ae:	e8 aa 8d ff ff       	call   c0007e5d <malloc>
c000f0b3:	83 c4 10             	add    esp,0x10
c000f0b6:	89 c3                	mov    ebx,eax
c000f0b8:	83 ec 0c             	sub    esp,0xc
c000f0bb:	53                   	push   ebx
c000f0bc:	e8 f9 9f 00 00       	call   c00190ba <IDE::IDE()>
c000f0c1:	83 c4 10             	add    esp,0x10
c000f0c4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f0c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0cc:	83 ec 08             	sub    esp,0x8
c000f0cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f0d3:	50                   	push   eax
c000f0d4:	e8 53 cf ff ff       	call   c000c02c <Device::addChild(Device*)>
c000f0d9:	83 c4 10             	add    esp,0x10
c000f0dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0e0:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f0ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0ee:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f0f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0fb:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f108:	8b 00                	mov    eax,DWORD PTR [eax]
c000f10a:	83 c0 08             	add    eax,0x8
c000f10d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f10f:	6a 00                	push   0x0
c000f111:	6a 00                	push   0x0
c000f113:	6a 00                	push   0x0
c000f115:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f119:	ff d0                	call   eax
c000f11b:	83 c4 10             	add    esp,0x10
c000f11e:	66 90                	xchg   ax,ax
c000f120:	90                   	nop
c000f121:	83 c4 28             	add    esp,0x28
c000f124:	5b                   	pop    ebx
c000f125:	c3                   	ret    
c000f126:	66 90                	xchg   ax,ax

c000f128 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f128:	83 ec 1c             	sub    esp,0x1c
c000f12b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f12f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f132:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f136:	8b 15 b8 09 02 c0    	mov    edx,DWORD PTR ds:0xc00209b8
c000f13c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f140:	25 ff 00 00 00       	and    eax,0xff
c000f145:	83 ec 08             	sub    esp,0x8
c000f148:	50                   	push   eax
c000f149:	52                   	push   edx
c000f14a:	e8 fb 83 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c000f14f:	83 c4 10             	add    esp,0x10
c000f152:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f156:	8b 15 b8 09 02 c0    	mov    edx,DWORD PTR ds:0xc00209b8
c000f15c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f160:	25 ff 00 00 00       	and    eax,0xff
c000f165:	83 ec 04             	sub    esp,0x4
c000f168:	6a 01                	push   0x1
c000f16a:	50                   	push   eax
c000f16b:	52                   	push   edx
c000f16c:	e8 ef 84 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f171:	83 c4 10             	add    esp,0x10
c000f174:	90                   	nop
c000f175:	83 c4 1c             	add    esp,0x1c
c000f178:	c3                   	ret    
c000f179:	90                   	nop
c000f17a:	66 90                	xchg   ax,ax

c000f17c <ACPI::sleep()>:
c000f17c:	83 ec 0c             	sub    esp,0xc
c000f17f:	a1 a0 2f 02 c0       	mov    eax,ds:0xc0022fa0
c000f184:	85 c0                	test   eax,eax
c000f186:	74 08                	je     c000f190 <ACPI::sleep()+0x14>
c000f188:	a1 a0 2f 02 c0       	mov    eax,ds:0xc0022fa0
c000f18d:	ff d0                	call   eax
c000f18f:	90                   	nop
c000f190:	90                   	nop
c000f191:	83 c4 0c             	add    esp,0xc
c000f194:	c3                   	ret    
c000f195:	90                   	nop
c000f196:	66 90                	xchg   ax,ax

c000f198 <ACPI::open(int, int, void*)>:
c000f198:	57                   	push   edi
c000f199:	56                   	push   esi
c000f19a:	53                   	push   ebx
c000f19b:	81 ec 70 01 00 00    	sub    esp,0x170
c000f1a1:	83 ec 0c             	sub    esp,0xc
c000f1a4:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f1ab:	e8 70 fd ff ff       	call   c000ef20 <ACPI::detectPCI()>
c000f1b0:	83 c4 10             	add    esp,0x10
c000f1b3:	83 ec 0c             	sub    esp,0xc
c000f1b6:	68 80 e4 01 c0       	push   0xc001e480
c000f1bb:	e8 f7 8c ff ff       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c000f1c0:	83 c4 10             	add    esp,0x10
c000f1c3:	83 ec 0c             	sub    esp,0xc
c000f1c6:	68 10 e5 01 c0       	push   0xc001e510
c000f1cb:	e8 07 34 00 00       	call   c00125d7 <Thr::loadKernelSymbolTable(char const*)>
c000f1d0:	83 c4 10             	add    esp,0x10
c000f1d3:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000f1db:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000f1e6:	83 ec 0c             	sub    esp,0xc
c000f1e9:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f1f0:	e8 68 8c ff ff       	call   c0007e5d <malloc>
c000f1f5:	83 c4 10             	add    esp,0x10
c000f1f8:	89 c3                	mov    ebx,eax
c000f1fa:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c000f1ff:	83 ec 04             	sub    esp,0x4
c000f202:	50                   	push   eax
c000f203:	68 2e e5 01 c0       	push   0xc001e52e
c000f208:	53                   	push   ebx
c000f209:	e8 54 bf ff ff       	call   c000b162 <File::File(char const*, Process*)>
c000f20e:	83 c4 10             	add    esp,0x10
c000f211:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000f218:	83 ec 08             	sub    esp,0x8
c000f21b:	6a 01                	push   0x1
c000f21d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f224:	e8 f9 bf ff ff       	call   c000b222 <File::open(FileOpenMode)>
c000f229:	83 c4 10             	add    esp,0x10
c000f22c:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000f233:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000f23b:	75 17                	jne    c000f254 <ACPI::open(int, int, void*)+0xbc>
c000f23d:	83 ec 0c             	sub    esp,0xc
c000f240:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f247:	e8 34 c0 ff ff       	call   c000b280 <File::close()>
c000f24c:	83 c4 10             	add    esp,0x10
c000f24f:	eb 0b                	jmp    c000f25c <ACPI::open(int, int, void*)+0xc4>
c000f251:	8d 76 00             	lea    esi,[esi+0x0]
c000f254:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000f25c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000f264:	74 1e                	je     c000f284 <ACPI::open(int, int, void*)+0xec>
c000f266:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000f26d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f26f:	83 c0 08             	add    eax,0x8
c000f272:	8b 00                	mov    eax,DWORD PTR [eax]
c000f274:	83 ec 0c             	sub    esp,0xc
c000f277:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f27e:	ff d0                	call   eax
c000f280:	83 c4 10             	add    esp,0x10
c000f283:	90                   	nop
c000f284:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000f28b:	83 f0 01             	xor    eax,0x1
c000f28e:	84 c0                	test   al,al
c000f290:	74 42                	je     c000f2d4 <ACPI::open(int, int, void*)+0x13c>
c000f292:	83 ec 0c             	sub    esp,0xc
c000f295:	68 4c e5 01 c0       	push   0xc001e54c
c000f29a:	e8 18 8c ff ff       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c000f29f:	83 c4 10             	add    esp,0x10
c000f2a2:	83 ec 04             	sub    esp,0x4
c000f2a5:	6a 0c                	push   0xc
c000f2a7:	68 67 e5 01 c0       	push   0xc001e567
c000f2ac:	68 78 e5 01 c0       	push   0xc001e578
c000f2b1:	e8 20 1b 00 00       	call   c0010dd6 <Reg::readIntWithDefault(char*, char*, int)>
c000f2b6:	83 c4 10             	add    esp,0x10
c000f2b9:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f2c0:	83 ec 0c             	sub    esp,0xc
c000f2c3:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f2ca:	e8 d4 a8 ff ff       	call   c0009ba3 <Virt::setupPageSwapping(int)>
c000f2cf:	83 c4 10             	add    esp,0x10
c000f2d2:	66 90                	xchg   ax,ax
c000f2d4:	83 ec 0c             	sub    esp,0xc
c000f2d7:	68 00 d6 01 c0       	push   0xc001d600
c000f2dc:	e8 d6 8b ff ff       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c000f2e1:	83 c4 10             	add    esp,0x10
c000f2e4:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f2eb:	83 ec 08             	sub    esp,0x8
c000f2ee:	6a 12                	push   0x12
c000f2f0:	50                   	push   eax
c000f2f1:	e8 4e d0 ff ff       	call   c000c344 <getDevicesOfType(DeviceType)>
c000f2f6:	83 c4 0c             	add    esp,0xc
c000f2f9:	8d 76 00             	lea    esi,[esi+0x0]
c000f2fc:	83 ec 0c             	sub    esp,0xc
c000f2ff:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f306:	50                   	push   eax
c000f307:	e8 00 d7 00 00       	call   c001ca0c <LinkedList<Device>::isEmpty()>
c000f30c:	83 c4 10             	add    esp,0x10
c000f30f:	83 f0 01             	xor    eax,0x1
c000f312:	84 c0                	test   al,al
c000f314:	0f 84 46 01 00 00    	je     c000f460 <ACPI::open(int, int, void*)+0x2c8>
c000f31a:	83 ec 0c             	sub    esp,0xc
c000f31d:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f324:	50                   	push   eax
c000f325:	e8 fe d6 00 00       	call   c001ca28 <LinkedList<Device>::getFirstElement()>
c000f32a:	83 c4 10             	add    esp,0x10
c000f32d:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f334:	83 ec 0c             	sub    esp,0xc
c000f337:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f33e:	50                   	push   eax
c000f33f:	e8 ec d6 00 00       	call   c001ca30 <LinkedList<Device>::removeFirst()>
c000f344:	83 c4 10             	add    esp,0x10
c000f347:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f34e:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f355:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000f35c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f360:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000f366:	ba 09 00 00 00       	mov    edx,0x9
c000f36b:	fc                   	cld    
c000f36c:	89 c7                	mov    edi,eax
c000f36e:	89 de                	mov    esi,ebx
c000f370:	89 d1                	mov    ecx,edx
c000f372:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f374:	83 ec 08             	sub    esp,0x8
c000f377:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f37b:	50                   	push   eax
c000f37c:	83 ec 24             	sub    esp,0x24
c000f37f:	89 e0                	mov    eax,esp
c000f381:	89 c3                	mov    ebx,eax
c000f383:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000f387:	ba 09 00 00 00       	mov    edx,0x9
c000f38c:	89 df                	mov    edi,ebx
c000f38e:	89 c6                	mov    esi,eax
c000f390:	89 d1                	mov    ecx,edx
c000f392:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f394:	e8 d7 96 00 00       	call   c0018a70 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f399:	83 c4 30             	add    esp,0x30
c000f39c:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f3a3:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f3ab:	0f 84 4b ff ff ff    	je     c000f2fc <ACPI::open(int, int, void*)+0x164>
c000f3b1:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f3bc:	83 ec 0c             	sub    esp,0xc
c000f3bf:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f3c6:	e8 92 8a ff ff       	call   c0007e5d <malloc>
c000f3cb:	83 c4 10             	add    esp,0x10
c000f3ce:	89 c3                	mov    ebx,eax
c000f3d0:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c000f3d5:	83 ec 04             	sub    esp,0x4
c000f3d8:	50                   	push   eax
c000f3d9:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f3e0:	53                   	push   ebx
c000f3e1:	e8 7c bd ff ff       	call   c000b162 <File::File(char const*, Process*)>
c000f3e6:	83 c4 10             	add    esp,0x10
c000f3e9:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f3f0:	83 ec 0c             	sub    esp,0xc
c000f3f3:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f3fa:	e8 91 c0 ff ff       	call   c000b490 <File::exists()>
c000f3ff:	83 c4 10             	add    esp,0x10
c000f402:	84 c0                	test   al,al
c000f404:	74 2a                	je     c000f430 <ACPI::open(int, int, void*)+0x298>
c000f406:	83 ec 08             	sub    esp,0x8
c000f409:	6a 01                	push   0x1
c000f40b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f412:	e8 37 3c 00 00       	call   c001304e <Thr::loadDLL(char const*, bool)>
c000f417:	83 c4 10             	add    esp,0x10
c000f41a:	83 ec 08             	sub    esp,0x8
c000f41d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f424:	50                   	push   eax
c000f425:	e8 55 3e 00 00       	call   c001327f <Thr::executeDLL(unsigned long, void*)>
c000f42a:	83 c4 10             	add    esp,0x10
c000f42d:	8d 76 00             	lea    esi,[esi+0x0]
c000f430:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f438:	0f 84 be fe ff ff    	je     c000f2fc <ACPI::open(int, int, void*)+0x164>
c000f43e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f445:	8b 00                	mov    eax,DWORD PTR [eax]
c000f447:	83 c0 08             	add    eax,0x8
c000f44a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f44c:	83 ec 0c             	sub    esp,0xc
c000f44f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f456:	ff d0                	call   eax
c000f458:	83 c4 10             	add    esp,0x10
c000f45b:	e9 9c fe ff ff       	jmp    c000f2fc <ACPI::open(int, int, void*)+0x164>
c000f460:	83 ec 0c             	sub    esp,0xc
c000f463:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f46a:	50                   	push   eax
c000f46b:	e8 98 d5 00 00       	call   c001ca08 <LinkedList<Device>::~LinkedList()>
c000f470:	83 c4 10             	add    esp,0x10
c000f473:	8b 1d b8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209b8
c000f479:	83 ec 08             	sub    esp,0x8
c000f47c:	6a 01                	push   0x1
c000f47e:	68 7f e5 01 c0       	push   0xc001e57f
c000f483:	e8 c6 3b 00 00       	call   c001304e <Thr::loadDLL(char const*, bool)>
c000f488:	83 c4 10             	add    esp,0x10
c000f48b:	83 ec 08             	sub    esp,0x8
c000f48e:	53                   	push   ebx
c000f48f:	50                   	push   eax
c000f490:	e8 ea 3d 00 00       	call   c001327f <Thr::executeDLL(unsigned long, void*)>
c000f495:	83 c4 10             	add    esp,0x10
c000f498:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000f49d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f4a3:	83 e0 04             	and    eax,0x4
c000f4a6:	84 c0                	test   al,al
c000f4a8:	0f 84 16 01 00 00    	je     c000f5c4 <ACPI::open(int, int, void*)+0x42c>
c000f4ae:	83 ec 0c             	sub    esp,0xc
c000f4b1:	68 9c e5 01 c0       	push   0xc001e59c
c000f4b6:	e8 fc 89 ff ff       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c000f4bb:	83 c4 10             	add    esp,0x10
c000f4be:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f4c9:	83 ec 0c             	sub    esp,0xc
c000f4cc:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f4d3:	e8 85 89 ff ff       	call   c0007e5d <malloc>
c000f4d8:	83 c4 10             	add    esp,0x10
c000f4db:	89 c3                	mov    ebx,eax
c000f4dd:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c000f4e2:	83 ec 04             	sub    esp,0x4
c000f4e5:	50                   	push   eax
c000f4e6:	68 b9 e5 01 c0       	push   0xc001e5b9
c000f4eb:	53                   	push   ebx
c000f4ec:	e8 71 bc ff ff       	call   c000b162 <File::File(char const*, Process*)>
c000f4f1:	83 c4 10             	add    esp,0x10
c000f4f4:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f4fb:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f503:	74 1b                	je     c000f520 <ACPI::open(int, int, void*)+0x388>
c000f505:	83 ec 0c             	sub    esp,0xc
c000f508:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f50f:	e8 7c bf ff ff       	call   c000b490 <File::exists()>
c000f514:	83 c4 10             	add    esp,0x10
c000f517:	84 c0                	test   al,al
c000f519:	74 05                	je     c000f520 <ACPI::open(int, int, void*)+0x388>
c000f51b:	b0 01                	mov    al,0x1
c000f51d:	eb 05                	jmp    c000f524 <ACPI::open(int, int, void*)+0x38c>
c000f51f:	90                   	nop
c000f520:	b0 00                	mov    al,0x0
c000f522:	66 90                	xchg   ax,ax
c000f524:	84 c0                	test   al,al
c000f526:	74 28                	je     c000f550 <ACPI::open(int, int, void*)+0x3b8>
c000f528:	83 ec 08             	sub    esp,0x8
c000f52b:	6a 01                	push   0x1
c000f52d:	68 b9 e5 01 c0       	push   0xc001e5b9
c000f532:	e8 17 3b 00 00       	call   c001304e <Thr::loadDLL(char const*, bool)>
c000f537:	83 c4 10             	add    esp,0x10
c000f53a:	83 ec 08             	sub    esp,0x8
c000f53d:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f544:	50                   	push   eax
c000f545:	e8 35 3d 00 00       	call   c001327f <Thr::executeDLL(unsigned long, void*)>
c000f54a:	83 c4 10             	add    esp,0x10
c000f54d:	8d 76 00             	lea    esi,[esi+0x0]
c000f550:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f558:	74 2a                	je     c000f584 <ACPI::open(int, int, void*)+0x3ec>
c000f55a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f562:	74 20                	je     c000f584 <ACPI::open(int, int, void*)+0x3ec>
c000f564:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f56b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f56d:	83 c0 08             	add    eax,0x8
c000f570:	8b 00                	mov    eax,DWORD PTR [eax]
c000f572:	83 ec 0c             	sub    esp,0xc
c000f575:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f57c:	ff d0                	call   eax
c000f57e:	83 c4 10             	add    esp,0x10
c000f581:	8d 76 00             	lea    esi,[esi+0x0]
c000f584:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000f589:	83 ec 08             	sub    esp,0x8
c000f58c:	68 d6 e5 01 c0       	push   0xc001e5d6
c000f591:	50                   	push   eax
c000f592:	e8 31 f2 ff ff       	call   c000e7c8 <findDataTable(unsigned char*, char*)>
c000f597:	83 c4 10             	add    esp,0x10
c000f59a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f5a1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f5a9:	74 19                	je     c000f5c4 <ACPI::open(int, int, void*)+0x42c>
c000f5ab:	83 ec 08             	sub    esp,0x8
c000f5ae:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f5b5:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f5bc:	e8 67 fb ff ff       	call   c000f128 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f5c1:	83 c4 10             	add    esp,0x10
c000f5c4:	b8 00 00 00 00       	mov    eax,0x0
c000f5c9:	81 c4 70 01 00 00    	add    esp,0x170
c000f5cf:	5b                   	pop    ebx
c000f5d0:	5e                   	pop    esi
c000f5d1:	5f                   	pop    edi
c000f5d2:	c3                   	ret    
c000f5d3:	90                   	nop

c000f5d4 <CPU::close(int, int, void*)>:
c000f5d4:	31 c0                	xor    eax,eax
c000f5d6:	c3                   	ret    
c000f5d7:	90                   	nop

c000f5d8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f5d8:	60                   	pusha  
c000f5d9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f5e5:	9c                   	pushf  
c000f5e6:	fa                   	cli    
c000f5e7:	0f 09                	wbinvd 
c000f5e9:	0f 30                	wrmsr  
c000f5eb:	9d                   	popf   
c000f5ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f5f0:	89 02                	mov    DWORD PTR [edx],eax
c000f5f2:	61                   	popa   
c000f5f3:	c3                   	ret    

c000f5f4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f5f4:	60                   	pusha  
c000f5f5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5f9:	9c                   	pushf  
c000f5fa:	fa                   	cli    
c000f5fb:	0f 09                	wbinvd 
c000f5fd:	31 c0                	xor    eax,eax
c000f5ff:	31 d2                	xor    edx,edx
c000f601:	0f 32                	rdmsr  
c000f603:	9d                   	popf   
c000f604:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f608:	89 02                	mov    DWORD PTR [edx],eax
c000f60a:	61                   	popa   
c000f60b:	c3                   	ret    

c000f60c <CPU::AMD_K6_writeback(int, int, int)>:
c000f60c:	56                   	push   esi
c000f60d:	53                   	push   ebx
c000f60e:	83 ec 10             	sub    esp,0x10
c000f611:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f615:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f61a:	75 5d                	jne    c000f679 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f61c:	83 f8 08             	cmp    eax,0x8
c000f61f:	75 09                	jne    c000f62a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f621:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f626:	7e 13                	jle    c000f63b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f628:	eb 30                	jmp    c000f65a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f62a:	83 f8 06             	cmp    eax,0x6
c000f62d:	7c 4a                	jl     c000f679 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f62f:	83 f8 07             	cmp    eax,0x7
c000f632:	7e 07                	jle    c000f63b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f634:	83 f8 09             	cmp    eax,0x9
c000f637:	74 21                	je     c000f65a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f639:	eb 3e                	jmp    c000f679 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f63b:	89 e6                	mov    esi,esp
c000f63d:	8b 1d dc 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209dc
c000f643:	56                   	push   esi
c000f644:	c1 eb 15             	shr    ebx,0x15
c000f647:	68 82 00 00 c0       	push   0xc0000082
c000f64c:	83 e3 7e             	and    ebx,0x7e
c000f64f:	e8 a0 ff ff ff       	call   c000f5f4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f654:	56                   	push   esi
c000f655:	6a 00                	push   0x0
c000f657:	53                   	push   ebx
c000f658:	eb 12                	jmp    c000f66c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f65a:	89 e3                	mov    ebx,esp
c000f65c:	53                   	push   ebx
c000f65d:	68 82 00 00 c0       	push   0xc0000082
c000f662:	e8 8d ff ff ff       	call   c000f5f4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f667:	53                   	push   ebx
c000f668:	6a 00                	push   0x0
c000f66a:	6a 00                	push   0x0
c000f66c:	68 82 00 00 c0       	push   0xc0000082
c000f671:	e8 62 ff ff ff       	call   c000f5d8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f676:	83 c4 18             	add    esp,0x18
c000f679:	83 c4 10             	add    esp,0x10
c000f67c:	5b                   	pop    ebx
c000f67d:	5e                   	pop    esi
c000f67e:	c3                   	ret    
c000f67f:	90                   	nop

c000f680 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f680:	55                   	push   ebp
c000f681:	57                   	push   edi
c000f682:	56                   	push   esi
c000f683:	53                   	push   ebx
c000f684:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f688:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f68c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f690:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f694:	39 05 30 f9 01 c0    	cmp    DWORD PTR ds:0xc001f930,eax
c000f69a:	75 23                	jne    c000f6bf <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f69c:	a1 2c 34 02 c0       	mov    eax,ds:0xc002342c
c000f6a1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f6a5:	89 06                	mov    DWORD PTR [esi],eax
c000f6a7:	a1 28 34 02 c0       	mov    eax,ds:0xc0023428
c000f6ac:	89 07                	mov    DWORD PTR [edi],eax
c000f6ae:	a1 24 34 02 c0       	mov    eax,ds:0xc0023424
c000f6b3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f6b6:	a1 20 34 02 c0       	mov    eax,ds:0xc0023420
c000f6bb:	89 02                	mov    DWORD PTR [edx],eax
c000f6bd:	eb 3f                	jmp    c000f6fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f6bf:	31 c9                	xor    ecx,ecx
c000f6c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6c5:	0f a2                	cpuid  
c000f6c7:	89 06                	mov    DWORD PTR [esi],eax
c000f6c9:	89 1f                	mov    DWORD PTR [edi],ebx
c000f6cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6cf:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f6d2:	89 10                	mov    DWORD PTR [eax],edx
c000f6d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6d8:	a3 30 f9 01 c0       	mov    ds:0xc001f930,eax
c000f6dd:	8b 06                	mov    eax,DWORD PTR [esi]
c000f6df:	a3 2c 34 02 c0       	mov    ds:0xc002342c,eax
c000f6e4:	8b 07                	mov    eax,DWORD PTR [edi]
c000f6e6:	a3 28 34 02 c0       	mov    ds:0xc0023428,eax
c000f6eb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f6ee:	a3 24 34 02 c0       	mov    ds:0xc0023424,eax
c000f6f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6f7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6f9:	a3 20 34 02 c0       	mov    ds:0xc0023420,eax
c000f6fe:	5b                   	pop    ebx
c000f6ff:	5e                   	pop    esi
c000f700:	5f                   	pop    edi
c000f701:	5d                   	pop    ebp
c000f702:	c3                   	ret    
c000f703:	90                   	nop

c000f704 <CPU::cpuidCheckEDX(unsigned int)>:
c000f704:	83 ec 10             	sub    esp,0x10
c000f707:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f70b:	50                   	push   eax
c000f70c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f710:	50                   	push   eax
c000f711:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f715:	50                   	push   eax
c000f716:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f71a:	50                   	push   eax
c000f71b:	6a 01                	push   0x1
c000f71d:	e8 5e ff ff ff       	call   c000f680 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f722:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f726:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f72a:	0f 95 c0             	setne  al
c000f72d:	83 c4 24             	add    esp,0x24
c000f730:	c3                   	ret    
c000f731:	90                   	nop

c000f732 <CPU::cpuidCheckECX(unsigned int)>:
c000f732:	83 ec 10             	sub    esp,0x10
c000f735:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f739:	50                   	push   eax
c000f73a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f73e:	50                   	push   eax
c000f73f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f743:	50                   	push   eax
c000f744:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f748:	50                   	push   eax
c000f749:	6a 01                	push   0x1
c000f74b:	e8 30 ff ff ff       	call   c000f680 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f750:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f754:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f758:	0f 95 c0             	setne  al
c000f75b:	83 c4 24             	add    esp,0x24
c000f75e:	c3                   	ret    
c000f75f:	90                   	nop

c000f760 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f760:	83 ec 10             	sub    esp,0x10
c000f763:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f767:	50                   	push   eax
c000f768:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f76c:	50                   	push   eax
c000f76d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f771:	50                   	push   eax
c000f772:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f776:	50                   	push   eax
c000f777:	6a 07                	push   0x7
c000f779:	e8 02 ff ff ff       	call   c000f680 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f77e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f782:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f786:	0f 95 c0             	setne  al
c000f789:	83 c4 24             	add    esp,0x24
c000f78c:	c3                   	ret    
c000f78d:	90                   	nop

c000f78e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f78e:	83 ec 10             	sub    esp,0x10
c000f791:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f795:	50                   	push   eax
c000f796:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f79a:	50                   	push   eax
c000f79b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f79f:	50                   	push   eax
c000f7a0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7a4:	50                   	push   eax
c000f7a5:	6a 07                	push   0x7
c000f7a7:	e8 d4 fe ff ff       	call   c000f680 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7b0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f7b4:	0f 95 c0             	setne  al
c000f7b7:	83 c4 24             	add    esp,0x24
c000f7ba:	c3                   	ret    
c000f7bb:	90                   	nop

c000f7bc <CPU::CPU()>:
c000f7bc:	83 ec 0c             	sub    esp,0xc
c000f7bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7c3:	83 ec 08             	sub    esp,0x8
c000f7c6:	68 f9 e6 01 c0       	push   0xc001e6f9
c000f7cb:	50                   	push   eax
c000f7cc:	e8 f3 c9 ff ff       	call   c000c1c4 <Device::Device(char const*)>
c000f7d1:	83 c4 10             	add    esp,0x10
c000f7d4:	ba 80 e7 01 c0       	mov    edx,0xc001e780
c000f7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7dd:	89 10                	mov    DWORD PTR [eax],edx
c000f7df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7e3:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f7ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7f1:	05 78 01 00 00       	add    eax,0x178
c000f7f6:	83 ec 0c             	sub    esp,0xc
c000f7f9:	50                   	push   eax
c000f7fa:	e8 1f 7f ff ff       	call   c000771e <GDT::GDT()>
c000f7ff:	83 c4 10             	add    esp,0x10
c000f802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f806:	05 7c 09 00 00       	add    eax,0x97c
c000f80b:	83 ec 0c             	sub    esp,0xc
c000f80e:	50                   	push   eax
c000f80f:	e8 44 81 ff ff       	call   c0007958 <IDT::IDT()>
c000f814:	83 c4 10             	add    esp,0x10
c000f817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f81b:	05 7c 11 00 00       	add    eax,0x117c
c000f820:	83 ec 0c             	sub    esp,0xc
c000f823:	50                   	push   eax
c000f824:	e8 b3 9a ff ff       	call   c00092dc <TSS::TSS()>
c000f829:	83 c4 10             	add    esp,0x10
c000f82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f830:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f83b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f845:	90                   	nop
c000f846:	83 c4 0c             	add    esp,0xc
c000f849:	c3                   	ret    

c000f84a <CPU::displayFeatures()>:
c000f84a:	c3                   	ret    
c000f84b:	90                   	nop

c000f84c <CPU::detectFeatures()>:
c000f84c:	55                   	push   ebp
c000f84d:	57                   	push   edi
c000f84e:	56                   	push   esi
c000f84f:	53                   	push   ebx
c000f850:	83 ec 30             	sub    esp,0x30
c000f853:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f857:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f861:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f868:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f86e:	6a 0d                	push   0xd
c000f870:	6a 00                	push   0x0
c000f872:	55                   	push   ebp
c000f873:	e8 78 0c ff ff       	call   c00004f0 <memset>
c000f878:	83 c4 10             	add    esp,0x10
c000f87b:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000f880:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f887:	0f 84 d5 05 00 00    	je     c000fe62 <CPU::detectFeatures()+0x616>
c000f88d:	83 ec 0c             	sub    esp,0xc
c000f890:	89 ef                	mov    edi,ebp
c000f892:	6a 10                	push   0x10
c000f894:	e8 6b fe ff ff       	call   c000f704 <CPU::cpuidCheckEDX(unsigned int)>
c000f899:	83 e0 01             	and    eax,0x1
c000f89c:	8d 14 00             	lea    edx,[eax+eax*1]
c000f89f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8a5:	83 e0 fd             	and    eax,0xfffffffd
c000f8a8:	09 d0                	or     eax,edx
c000f8aa:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8b0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f8b7:	e8 48 fe ff ff       	call   c000f704 <CPU::cpuidCheckEDX(unsigned int)>
c000f8bc:	83 e0 01             	and    eax,0x1
c000f8bf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f8c6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8cc:	83 e0 fb             	and    eax,0xfffffffb
c000f8cf:	09 d0                	or     eax,edx
c000f8d1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8d7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f8de:	e8 21 fe ff ff       	call   c000f704 <CPU::cpuidCheckEDX(unsigned int)>
c000f8e3:	83 e0 01             	and    eax,0x1
c000f8e6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f8ed:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8f3:	83 e0 f7             	and    eax,0xfffffff7
c000f8f6:	09 d0                	or     eax,edx
c000f8f8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8fe:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f905:	e8 fa fd ff ff       	call   c000f704 <CPU::cpuidCheckEDX(unsigned int)>
c000f90a:	83 e0 01             	and    eax,0x1
c000f90d:	c1 e0 04             	shl    eax,0x4
c000f910:	88 c2                	mov    dl,al
c000f912:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f918:	83 e0 ef             	and    eax,0xffffffef
c000f91b:	09 d0                	or     eax,edx
c000f91d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f923:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f92a:	e8 d5 fd ff ff       	call   c000f704 <CPU::cpuidCheckEDX(unsigned int)>
c000f92f:	83 e0 01             	and    eax,0x1
c000f932:	c1 e0 05             	shl    eax,0x5
c000f935:	88 c2                	mov    dl,al
c000f937:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f93d:	83 e0 df             	and    eax,0xffffffdf
c000f940:	09 d0                	or     eax,edx
c000f942:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f948:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f94f:	e8 b0 fd ff ff       	call   c000f704 <CPU::cpuidCheckEDX(unsigned int)>
c000f954:	83 e0 01             	and    eax,0x1
c000f957:	8d 14 00             	lea    edx,[eax+eax*1]
c000f95a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f960:	83 e0 fd             	and    eax,0xfffffffd
c000f963:	09 d0                	or     eax,edx
c000f965:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f96b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f972:	e8 8d fd ff ff       	call   c000f704 <CPU::cpuidCheckEDX(unsigned int)>
c000f977:	83 e0 01             	and    eax,0x1
c000f97a:	c1 e0 06             	shl    eax,0x6
c000f97d:	88 c2                	mov    dl,al
c000f97f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f985:	83 e0 bf             	and    eax,0xffffffbf
c000f988:	09 d0                	or     eax,edx
c000f98a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f990:	58                   	pop    eax
c000f991:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f995:	50                   	push   eax
c000f996:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f99a:	50                   	push   eax
c000f99b:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f99f:	56                   	push   esi
c000f9a0:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9a4:	50                   	push   eax
c000f9a5:	6a 00                	push   0x0
c000f9a7:	e8 d4 fc ff ff       	call   c000f680 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9ac:	b8 04 00 00 00       	mov    eax,0x4
c000f9b1:	89 c1                	mov    ecx,eax
c000f9b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9b5:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f9bb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f9bf:	89 c1                	mov    ecx,eax
c000f9c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9c3:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f9c9:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f9cd:	89 c1                	mov    ecx,eax
c000f9cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9d1:	83 c4 18             	add    esp,0x18
c000f9d4:	68 08 e6 01 c0       	push   0xc001e608
c000f9d9:	55                   	push   ebp
c000f9da:	e8 21 0d ff ff       	call   c0000700 <strcmp>
c000f9df:	83 c4 10             	add    esp,0x10
c000f9e2:	85 c0                	test   eax,eax
c000f9e4:	75 0f                	jne    c000f9f5 <CPU::detectFeatures()+0x1a9>
c000f9e6:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f9f0:	e9 22 02 00 00       	jmp    c000fc17 <CPU::detectFeatures()+0x3cb>
c000f9f5:	50                   	push   eax
c000f9f6:	50                   	push   eax
c000f9f7:	68 15 e6 01 c0       	push   0xc001e615
c000f9fc:	55                   	push   ebp
c000f9fd:	e8 fe 0c ff ff       	call   c0000700 <strcmp>
c000fa02:	83 c4 10             	add    esp,0x10
c000fa05:	85 c0                	test   eax,eax
c000fa07:	74 dd                	je     c000f9e6 <CPU::detectFeatures()+0x19a>
c000fa09:	50                   	push   eax
c000fa0a:	50                   	push   eax
c000fa0b:	68 22 e6 01 c0       	push   0xc001e622
c000fa10:	55                   	push   ebp
c000fa11:	e8 ea 0c ff ff       	call   c0000700 <strcmp>
c000fa16:	83 c4 10             	add    esp,0x10
c000fa19:	85 c0                	test   eax,eax
c000fa1b:	74 2a                	je     c000fa47 <CPU::detectFeatures()+0x1fb>
c000fa1d:	50                   	push   eax
c000fa1e:	50                   	push   eax
c000fa1f:	68 2f e6 01 c0       	push   0xc001e62f
c000fa24:	55                   	push   ebp
c000fa25:	e8 d6 0c ff ff       	call   c0000700 <strcmp>
c000fa2a:	83 c4 10             	add    esp,0x10
c000fa2d:	85 c0                	test   eax,eax
c000fa2f:	74 16                	je     c000fa47 <CPU::detectFeatures()+0x1fb>
c000fa31:	50                   	push   eax
c000fa32:	50                   	push   eax
c000fa33:	68 3c e6 01 c0       	push   0xc001e63c
c000fa38:	55                   	push   ebp
c000fa39:	e8 c2 0c ff ff       	call   c0000700 <strcmp>
c000fa3e:	83 c4 10             	add    esp,0x10
c000fa41:	85 c0                	test   eax,eax
c000fa43:	74 48                	je     c000fa8d <CPU::detectFeatures()+0x241>
c000fa45:	eb 0f                	jmp    c000fa56 <CPU::detectFeatures()+0x20a>
c000fa47:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fa51:	e9 c1 01 00 00       	jmp    c000fc17 <CPU::detectFeatures()+0x3cb>
c000fa56:	50                   	push   eax
c000fa57:	50                   	push   eax
c000fa58:	68 49 e6 01 c0       	push   0xc001e649
c000fa5d:	55                   	push   ebp
c000fa5e:	e8 9d 0c ff ff       	call   c0000700 <strcmp>
c000fa63:	83 c4 10             	add    esp,0x10
c000fa66:	85 c0                	test   eax,eax
c000fa68:	74 23                	je     c000fa8d <CPU::detectFeatures()+0x241>
c000fa6a:	57                   	push   edi
c000fa6b:	57                   	push   edi
c000fa6c:	68 56 e6 01 c0       	push   0xc001e656
c000fa71:	55                   	push   ebp
c000fa72:	e8 89 0c ff ff       	call   c0000700 <strcmp>
c000fa77:	83 c4 10             	add    esp,0x10
c000fa7a:	85 c0                	test   eax,eax
c000fa7c:	75 1e                	jne    c000fa9c <CPU::detectFeatures()+0x250>
c000fa7e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fa88:	e9 8a 01 00 00       	jmp    c000fc17 <CPU::detectFeatures()+0x3cb>
c000fa8d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fa97:	e9 7b 01 00 00       	jmp    c000fc17 <CPU::detectFeatures()+0x3cb>
c000fa9c:	56                   	push   esi
c000fa9d:	56                   	push   esi
c000fa9e:	68 63 e6 01 c0       	push   0xc001e663
c000faa3:	55                   	push   ebp
c000faa4:	e8 57 0c ff ff       	call   c0000700 <strcmp>
c000faa9:	83 c4 10             	add    esp,0x10
c000faac:	85 c0                	test   eax,eax
c000faae:	75 0f                	jne    c000fabf <CPU::detectFeatures()+0x273>
c000fab0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000faba:	e9 58 01 00 00       	jmp    c000fc17 <CPU::detectFeatures()+0x3cb>
c000fabf:	51                   	push   ecx
c000fac0:	51                   	push   ecx
c000fac1:	68 22 e6 01 c0       	push   0xc001e622
c000fac6:	55                   	push   ebp
c000fac7:	e8 34 0c ff ff       	call   c0000700 <strcmp>
c000facc:	83 c4 10             	add    esp,0x10
c000facf:	85 c0                	test   eax,eax
c000fad1:	75 0f                	jne    c000fae2 <CPU::detectFeatures()+0x296>
c000fad3:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fadd:	e9 35 01 00 00       	jmp    c000fc17 <CPU::detectFeatures()+0x3cb>
c000fae2:	52                   	push   edx
c000fae3:	52                   	push   edx
c000fae4:	68 70 e6 01 c0       	push   0xc001e670
c000fae9:	55                   	push   ebp
c000faea:	e8 11 0c ff ff       	call   c0000700 <strcmp>
c000faef:	83 c4 10             	add    esp,0x10
c000faf2:	85 c0                	test   eax,eax
c000faf4:	75 0f                	jne    c000fb05 <CPU::detectFeatures()+0x2b9>
c000faf6:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fb00:	e9 12 01 00 00       	jmp    c000fc17 <CPU::detectFeatures()+0x3cb>
c000fb05:	50                   	push   eax
c000fb06:	50                   	push   eax
c000fb07:	68 7d e6 01 c0       	push   0xc001e67d
c000fb0c:	55                   	push   ebp
c000fb0d:	e8 ee 0b ff ff       	call   c0000700 <strcmp>
c000fb12:	83 c4 10             	add    esp,0x10
c000fb15:	85 c0                	test   eax,eax
c000fb17:	75 0f                	jne    c000fb28 <CPU::detectFeatures()+0x2dc>
c000fb19:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fb23:	e9 ef 00 00 00       	jmp    c000fc17 <CPU::detectFeatures()+0x3cb>
c000fb28:	50                   	push   eax
c000fb29:	50                   	push   eax
c000fb2a:	68 8a e6 01 c0       	push   0xc001e68a
c000fb2f:	55                   	push   ebp
c000fb30:	e8 cb 0b ff ff       	call   c0000700 <strcmp>
c000fb35:	83 c4 10             	add    esp,0x10
c000fb38:	85 c0                	test   eax,eax
c000fb3a:	75 0f                	jne    c000fb4b <CPU::detectFeatures()+0x2ff>
c000fb3c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fb46:	e9 cc 00 00 00       	jmp    c000fc17 <CPU::detectFeatures()+0x3cb>
c000fb4b:	50                   	push   eax
c000fb4c:	50                   	push   eax
c000fb4d:	68 97 e6 01 c0       	push   0xc001e697
c000fb52:	55                   	push   ebp
c000fb53:	e8 a8 0b ff ff       	call   c0000700 <strcmp>
c000fb58:	83 c4 10             	add    esp,0x10
c000fb5b:	85 c0                	test   eax,eax
c000fb5d:	75 0f                	jne    c000fb6e <CPU::detectFeatures()+0x322>
c000fb5f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fb69:	e9 a9 00 00 00       	jmp    c000fc17 <CPU::detectFeatures()+0x3cb>
c000fb6e:	50                   	push   eax
c000fb6f:	50                   	push   eax
c000fb70:	68 a4 e6 01 c0       	push   0xc001e6a4
c000fb75:	55                   	push   ebp
c000fb76:	e8 85 0b ff ff       	call   c0000700 <strcmp>
c000fb7b:	83 c4 10             	add    esp,0x10
c000fb7e:	85 c0                	test   eax,eax
c000fb80:	75 0f                	jne    c000fb91 <CPU::detectFeatures()+0x345>
c000fb82:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fb8c:	e9 86 00 00 00       	jmp    c000fc17 <CPU::detectFeatures()+0x3cb>
c000fb91:	50                   	push   eax
c000fb92:	50                   	push   eax
c000fb93:	68 b1 e6 01 c0       	push   0xc001e6b1
c000fb98:	55                   	push   ebp
c000fb99:	e8 62 0b ff ff       	call   c0000700 <strcmp>
c000fb9e:	83 c4 10             	add    esp,0x10
c000fba1:	85 c0                	test   eax,eax
c000fba3:	75 0c                	jne    c000fbb1 <CPU::detectFeatures()+0x365>
c000fba5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fbaf:	eb 66                	jmp    c000fc17 <CPU::detectFeatures()+0x3cb>
c000fbb1:	50                   	push   eax
c000fbb2:	50                   	push   eax
c000fbb3:	68 be e6 01 c0       	push   0xc001e6be
c000fbb8:	55                   	push   ebp
c000fbb9:	e8 42 0b ff ff       	call   c0000700 <strcmp>
c000fbbe:	83 c4 10             	add    esp,0x10
c000fbc1:	85 c0                	test   eax,eax
c000fbc3:	75 0c                	jne    c000fbd1 <CPU::detectFeatures()+0x385>
c000fbc5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fbcf:	eb 46                	jmp    c000fc17 <CPU::detectFeatures()+0x3cb>
c000fbd1:	57                   	push   edi
c000fbd2:	57                   	push   edi
c000fbd3:	68 cb e6 01 c0       	push   0xc001e6cb
c000fbd8:	55                   	push   ebp
c000fbd9:	e8 22 0b ff ff       	call   c0000700 <strcmp>
c000fbde:	83 c4 10             	add    esp,0x10
c000fbe1:	85 c0                	test   eax,eax
c000fbe3:	74 e0                	je     c000fbc5 <CPU::detectFeatures()+0x379>
c000fbe5:	56                   	push   esi
c000fbe6:	56                   	push   esi
c000fbe7:	68 d8 e6 01 c0       	push   0xc001e6d8
c000fbec:	55                   	push   ebp
c000fbed:	e8 0e 0b ff ff       	call   c0000700 <strcmp>
c000fbf2:	83 c4 10             	add    esp,0x10
c000fbf5:	85 c0                	test   eax,eax
c000fbf7:	74 cc                	je     c000fbc5 <CPU::detectFeatures()+0x379>
c000fbf9:	51                   	push   ecx
c000fbfa:	51                   	push   ecx
c000fbfb:	68 e5 e6 01 c0       	push   0xc001e6e5
c000fc00:	55                   	push   ebp
c000fc01:	e8 fa 0a ff ff       	call   c0000700 <strcmp>
c000fc06:	83 c4 10             	add    esp,0x10
c000fc09:	85 c0                	test   eax,eax
c000fc0b:	74 b8                	je     c000fbc5 <CPU::detectFeatures()+0x379>
c000fc0d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fc17:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fc1c:	0f 86 be 00 00 00    	jbe    c000fce0 <CPU::detectFeatures()+0x494>
c000fc22:	83 ec 0c             	sub    esp,0xc
c000fc25:	68 80 00 00 00       	push   0x80
c000fc2a:	e8 31 fb ff ff       	call   c000f760 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc2f:	83 e0 01             	and    eax,0x1
c000fc32:	c1 e0 06             	shl    eax,0x6
c000fc35:	88 c2                	mov    dl,al
c000fc37:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc3d:	83 e0 bf             	and    eax,0xffffffbf
c000fc40:	09 d0                	or     eax,edx
c000fc42:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc48:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fc4f:	e8 0c fb ff ff       	call   c000f760 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc54:	83 e0 01             	and    eax,0x1
c000fc57:	c1 e0 04             	shl    eax,0x4
c000fc5a:	88 c2                	mov    dl,al
c000fc5c:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc62:	83 e0 ef             	and    eax,0xffffffef
c000fc65:	09 d0                	or     eax,edx
c000fc67:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc6d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fc74:	e8 e7 fa ff ff       	call   c000f760 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc79:	c1 e0 07             	shl    eax,0x7
c000fc7c:	88 c2                	mov    dl,al
c000fc7e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc84:	83 e0 7f             	and    eax,0x7f
c000fc87:	09 d0                	or     eax,edx
c000fc89:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc8f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fc96:	e8 f3 fa ff ff       	call   c000f78e <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc9b:	83 e0 01             	and    eax,0x1
c000fc9e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fca5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fcab:	83 e0 f7             	and    eax,0xfffffff7
c000fcae:	09 d0                	or     eax,edx
c000fcb0:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fcb6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fcbd:	e8 cc fa ff ff       	call   c000f78e <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fcc2:	83 c4 10             	add    esp,0x10
c000fcc5:	83 e0 01             	and    eax,0x1
c000fcc8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fccf:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fcd5:	83 e0 fb             	and    eax,0xfffffffb
c000fcd8:	09 d0                	or     eax,edx
c000fcda:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fce0:	83 ec 0c             	sub    esp,0xc
c000fce3:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fce7:	50                   	push   eax
c000fce8:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcec:	50                   	push   eax
c000fced:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fcf1:	56                   	push   esi
c000fcf2:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcf6:	50                   	push   eax
c000fcf7:	6a 01                	push   0x1
c000fcf9:	e8 82 f9 ff ff       	call   c000f680 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fcfe:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fd02:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000fd08:	88 ca                	mov    dl,cl
c000fd0a:	83 e0 f0             	and    eax,0xfffffff0
c000fd0d:	83 e2 0f             	and    edx,0xf
c000fd10:	09 d0                	or     eax,edx
c000fd12:	88 ca                	mov    dl,cl
c000fd14:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000fd1a:	c0 ea 04             	shr    dl,0x4
c000fd1d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000fd21:	0f b6 c2             	movzx  eax,dl
c000fd24:	83 c4 20             	add    esp,0x20
c000fd27:	c1 e0 06             	shl    eax,0x6
c000fd2a:	89 c7                	mov    edi,eax
c000fd2c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000fd32:	66 25 3f c0          	and    ax,0xc03f
c000fd36:	09 f8                	or     eax,edi
c000fd38:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000fd3f:	89 c8                	mov    eax,ecx
c000fd41:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000fd48:	c1 e8 08             	shr    eax,0x8
c000fd4b:	83 e5 3f             	and    ebp,0x3f
c000fd4e:	83 e0 0f             	and    eax,0xf
c000fd51:	89 c7                	mov    edi,eax
c000fd53:	c1 e7 06             	shl    edi,0x6
c000fd56:	09 ef                	or     edi,ebp
c000fd58:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000fd5f:	89 fa                	mov    edx,edi
c000fd61:	83 e5 c0             	and    ebp,0xffffffc0
c000fd64:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fd6a:	88 c2                	mov    dl,al
c000fd6c:	c0 ea 02             	shr    dl,0x2
c000fd6f:	89 d7                	mov    edi,edx
c000fd71:	09 ef                	or     edi,ebp
c000fd73:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fd79:	89 fa                	mov    edx,edi
c000fd7b:	83 e5 cf             	and    ebp,0xffffffcf
c000fd7e:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000fd84:	89 cf                	mov    edi,ecx
c000fd86:	c1 ef 0c             	shr    edi,0xc
c000fd89:	83 e7 03             	and    edi,0x3
c000fd8c:	c1 e7 04             	shl    edi,0x4
c000fd8f:	09 ef                	or     edi,ebp
c000fd91:	3c 06                	cmp    al,0x6
c000fd93:	89 fa                	mov    edx,edi
c000fd95:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fd9b:	74 04                	je     c000fda1 <CPU::detectFeatures()+0x555>
c000fd9d:	3c 0f                	cmp    al,0xf
c000fd9f:	75 5c                	jne    c000fdfd <CPU::detectFeatures()+0x5b1>
c000fda1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000fda5:	89 cf                	mov    edi,ecx
c000fda7:	c1 ef 10             	shr    edi,0x10
c000fdaa:	c1 e7 04             	shl    edi,0x4
c000fdad:	09 fa                	or     edx,edi
c000fdaf:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000fdb5:	0f b6 d2             	movzx  edx,dl
c000fdb8:	66 81 e7 3f c0       	and    di,0xc03f
c000fdbd:	c1 e2 06             	shl    edx,0x6
c000fdc0:	09 fa                	or     edx,edi
c000fdc2:	3c 0f                	cmp    al,0xf
c000fdc4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fdcb:	75 30                	jne    c000fdfd <CPU::detectFeatures()+0x5b1>
c000fdcd:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000fdd3:	c1 e9 14             	shr    ecx,0x14
c000fdd6:	83 e0 3f             	and    eax,0x3f
c000fdd9:	83 c1 0f             	add    ecx,0xf
c000fddc:	88 ca                	mov    dl,cl
c000fdde:	c0 e9 02             	shr    cl,0x2
c000fde1:	c1 e2 06             	shl    edx,0x6
c000fde4:	09 d0                	or     eax,edx
c000fde6:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000fdec:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000fdf2:	83 e0 c0             	and    eax,0xffffffc0
c000fdf5:	09 c1                	or     ecx,eax
c000fdf7:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fdfd:	83 ec 0c             	sub    esp,0xc
c000fe00:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000fe07:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fe0b:	50                   	push   eax
c000fe0c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fe10:	55                   	push   ebp
c000fe11:	56                   	push   esi
c000fe12:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fe16:	57                   	push   edi
c000fe17:	68 00 00 00 80       	push   0x80000000
c000fe1c:	e8 5f f8 ff ff       	call   c000f680 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe21:	83 c4 20             	add    esp,0x20
c000fe24:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fe2c:	76 22                	jbe    c000fe50 <CPU::detectFeatures()+0x604>
c000fe2e:	83 ec 0c             	sub    esp,0xc
c000fe31:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fe35:	50                   	push   eax
c000fe36:	55                   	push   ebp
c000fe37:	56                   	push   esi
c000fe38:	57                   	push   edi
c000fe39:	68 01 00 00 80       	push   0x80000001
c000fe3e:	e8 3d f8 ff ff       	call   c000f680 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe43:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fe4d:	83 c4 20             	add    esp,0x20
c000fe50:	52                   	push   edx
c000fe51:	52                   	push   edx
c000fe52:	68 f1 e6 01 c0       	push   0xc001e6f1
c000fe57:	53                   	push   ebx
c000fe58:	e8 59 c3 ff ff       	call   c000c1b6 <Device::setName(char const*)>
c000fe5d:	83 c4 10             	add    esp,0x10
c000fe60:	eb 67                	jmp    c000fec9 <CPU::detectFeatures()+0x67d>
c000fe62:	50                   	push   eax
c000fe63:	50                   	push   eax
c000fe64:	68 56 e6 01 c0       	push   0xc001e656
c000fe69:	55                   	push   ebp
c000fe6a:	e8 b1 07 ff ff       	call   c0000620 <strcpy>
c000fe6f:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fe79:	e8 65 03 ff ff       	call   c00001e3 <is486>
c000fe7e:	83 c4 10             	add    esp,0x10
c000fe81:	85 c0                	test   eax,eax
c000fe83:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fe89:	74 1d                	je     c000fea8 <CPU::detectFeatures()+0x65c>
c000fe8b:	83 c8 07             	or     eax,0x7
c000fe8e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fe94:	0f 20 c0             	mov    eax,cr0
c000fe97:	83 e0 14             	and    eax,0x14
c000fe9a:	83 f8 04             	cmp    eax,0x4
c000fe9d:	75 0e                	jne    c000fead <CPU::detectFeatures()+0x661>
c000fe9f:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000fea6:	eb 21                	jmp    c000fec9 <CPU::detectFeatures()+0x67d>
c000fea8:	83 e0 f8             	and    eax,0xfffffff8
c000feab:	eb e1                	jmp    c000fe8e <CPU::detectFeatures()+0x642>
c000fead:	e8 0c 03 ff ff       	call   c00001be <hasLegacyFPU>
c000feb2:	83 e0 01             	and    eax,0x1
c000feb5:	8d 14 00             	lea    edx,[eax+eax*1]
c000feb8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000febe:	83 e0 fd             	and    eax,0xfffffffd
c000fec1:	09 d0                	or     eax,edx
c000fec3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fec9:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fed0:	74 0e                	je     c000fee0 <CPU::detectFeatures()+0x694>
c000fed2:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000fed7:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000fede:	eb 20                	jmp    c000ff00 <CPU::detectFeatures()+0x6b4>
c000fee0:	e8 d9 02 ff ff       	call   c00001be <hasLegacyFPU>
c000fee5:	83 e0 01             	and    eax,0x1
c000fee8:	8d 14 00             	lea    edx,[eax+eax*1]
c000feeb:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fef1:	83 e0 fd             	and    eax,0xfffffffd
c000fef4:	09 d0                	or     eax,edx
c000fef6:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fefc:	a8 02                	test   al,0x2
c000fefe:	75 d2                	jne    c000fed2 <CPU::detectFeatures()+0x686>
c000ff00:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000ff07:	83 c4 2c             	add    esp,0x2c
c000ff0a:	5b                   	pop    ebx
c000ff0b:	5e                   	pop    esi
c000ff0c:	5f                   	pop    edi
c000ff0d:	5d                   	pop    ebp
c000ff0e:	c3                   	ret    
c000ff0f:	90                   	nop

c000ff10 <CPU::setupSMEP()>:
c000ff10:	0f 20 e0             	mov    eax,cr4
c000ff13:	0d 00 00 10 00       	or     eax,0x100000
c000ff18:	0f 22 e0             	mov    cr4,eax
c000ff1b:	c3                   	ret    

c000ff1c <CPU::setupUMIP()>:
c000ff1c:	0f 20 e0             	mov    eax,cr4
c000ff1f:	80 cc 08             	or     ah,0x8
c000ff22:	0f 22 e0             	mov    cr4,eax
c000ff25:	c3                   	ret    

c000ff26 <CPU::setupTSC()>:
c000ff26:	0f 20 e0             	mov    eax,cr4
c000ff29:	83 c8 04             	or     eax,0x4
c000ff2c:	0f 22 e0             	mov    cr4,eax
c000ff2f:	c3                   	ret    

c000ff30 <CPU::setupLargePages()>:
c000ff30:	0f 20 e0             	mov    eax,cr4
c000ff33:	83 c8 10             	or     eax,0x10
c000ff36:	0f 22 e0             	mov    cr4,eax
c000ff39:	c3                   	ret    

c000ff3a <CPU::setupPAT()>:
c000ff3a:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000ff3f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ff46:	74 2c                	je     c000ff74 <CPU::setupPAT()+0x3a>
c000ff48:	53                   	push   ebx
c000ff49:	83 ec 10             	sub    esp,0x10
c000ff4c:	68 77 02 00 00       	push   0x277
c000ff51:	50                   	push   eax
c000ff52:	e8 3f 75 ff ff       	call   c0007496 <Computer::rdmsr(unsigned int)>
c000ff57:	83 e2 f8             	and    edx,0xfffffff8
c000ff5a:	83 ca 01             	or     edx,0x1
c000ff5d:	52                   	push   edx
c000ff5e:	50                   	push   eax
c000ff5f:	68 77 02 00 00       	push   0x277
c000ff64:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c000ff6a:	e8 53 75 ff ff       	call   c00074c2 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ff6f:	83 c4 28             	add    esp,0x28
c000ff72:	5b                   	pop    ebx
c000ff73:	c3                   	ret    
c000ff74:	c3                   	ret    
c000ff75:	90                   	nop

c000ff76 <CPU::setupMTRR()>:
c000ff76:	c3                   	ret    
c000ff77:	90                   	nop

c000ff78 <CPU::setupGlobalPages()>:
c000ff78:	0f 20 e0             	mov    eax,cr4
c000ff7b:	0c 80                	or     al,0x80
c000ff7d:	0f 22 e0             	mov    cr4,eax
c000ff80:	c3                   	ret    
c000ff81:	90                   	nop

c000ff82 <CPU::allowUsermodeDataAccess()>:
c000ff82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff86:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff8d:	74 03                	je     c000ff92 <CPU::allowUsermodeDataAccess()+0x10>
c000ff8f:	0f 01 cb             	stac   
c000ff92:	c3                   	ret    
c000ff93:	90                   	nop

c000ff94 <CPU::prohibitUsermodeDataAccess()>:
c000ff94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff98:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff9f:	74 03                	je     c000ffa4 <CPU::prohibitUsermodeDataAccess()+0x10>
c000ffa1:	0f 01 ca             	clac   
c000ffa4:	c3                   	ret    
c000ffa5:	90                   	nop

c000ffa6 <CPU::setupSMAP()>:
c000ffa6:	0f 20 e0             	mov    eax,cr4
c000ffa9:	0d 00 00 20 00       	or     eax,0x200000
c000ffae:	0f 22 e0             	mov    cr4,eax
c000ffb1:	eb e1                	jmp    c000ff94 <CPU::prohibitUsermodeDataAccess()>
c000ffb3:	90                   	nop

c000ffb4 <CPU::setupFeatures()>:
c000ffb4:	53                   	push   ebx
c000ffb5:	83 ec 08             	sub    esp,0x8
c000ffb8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffbc:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ffc3:	74 18                	je     c000ffdd <CPU::setupFeatures()+0x29>
c000ffc5:	83 ec 0c             	sub    esp,0xc
c000ffc8:	68 fd e6 01 c0       	push   0xc001e6fd
c000ffcd:	e8 1a ac ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000ffd2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffd5:	e8 42 ff ff ff       	call   c000ff1c <CPU::setupUMIP()>
c000ffda:	83 c4 10             	add    esp,0x10
c000ffdd:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000ffe4:	74 18                	je     c000fffe <CPU::setupFeatures()+0x4a>
c000ffe6:	83 ec 0c             	sub    esp,0xc
c000ffe9:	68 07 e7 01 c0       	push   0xc001e707
c000ffee:	e8 f9 ab ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000fff3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fff6:	e8 2b ff ff ff       	call   c000ff26 <CPU::setupTSC()>
c000fffb:	83 c4 10             	add    esp,0x10
c000fffe:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010005:	74 18                	je     c001001f <CPU::setupFeatures()+0x6b>
c0010007:	83 ec 0c             	sub    esp,0xc
c001000a:	68 10 e7 01 c0       	push   0xc001e710
c001000f:	e8 d8 ab ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0010014:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010017:	e8 14 ff ff ff       	call   c000ff30 <CPU::setupLargePages()>
c001001c:	83 c4 10             	add    esp,0x10
c001001f:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010026:	74 18                	je     c0010040 <CPU::setupFeatures()+0x8c>
c0010028:	83 ec 0c             	sub    esp,0xc
c001002b:	68 19 e7 01 c0       	push   0xc001e719
c0010030:	e8 b7 ab ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0010035:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010038:	e8 3b ff ff ff       	call   c000ff78 <CPU::setupGlobalPages()>
c001003d:	83 c4 10             	add    esp,0x10
c0010040:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010047:	74 18                	je     c0010061 <CPU::setupFeatures()+0xad>
c0010049:	83 ec 0c             	sub    esp,0xc
c001004c:	68 2b e7 01 c0       	push   0xc001e72b
c0010051:	e8 96 ab ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0010056:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010059:	e8 dc fe ff ff       	call   c000ff3a <CPU::setupPAT()>
c001005e:	83 c4 10             	add    esp,0x10
c0010061:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010068:	74 11                	je     c001007b <CPU::setupFeatures()+0xc7>
c001006a:	c7 44 24 10 34 e7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e734
c0010072:	83 c4 08             	add    esp,0x8
c0010075:	5b                   	pop    ebx
c0010076:	e9 71 ab ff ff       	jmp    c000abec <Dbg::kprintf(char const*, ...)>
c001007b:	83 c4 08             	add    esp,0x8
c001007e:	5b                   	pop    ebx
c001007f:	c3                   	ret    

c0010080 <CPU::open(int, int, void*)>:
c0010080:	57                   	push   edi
c0010081:	56                   	push   esi
c0010082:	53                   	push   ebx
c0010083:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010087:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001008b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010091:	83 ec 0c             	sub    esp,0xc
c0010094:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001009a:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00100a0:	50                   	push   eax
c00100a1:	e8 da 76 ff ff       	call   c0007780 <GDT::setup()>
c00100a6:	83 c4 0c             	add    esp,0xc
c00100a9:	6a 00                	push   0x0
c00100ab:	68 ef be ad de       	push   0xdeadbeef
c00100b0:	57                   	push   edi
c00100b1:	e8 6a 92 ff ff       	call   c0009320 <TSS::setup(unsigned long, unsigned long)>
c00100b6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00100b9:	e8 42 92 ff ff       	call   c0009300 <TSS::flush()>
c00100be:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00100c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00100c7:	e8 02 79 ff ff       	call   c00079ce <IDT::setup()>
c00100cc:	b8 00 04 00 00       	mov    eax,0x400
c00100d1:	0f 23 f8             	mov    db7,eax
c00100d4:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00100de:	e8 47 81 ff ff       	call   c000822a <Phys::allocatePage()>
c00100e3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00100e9:	89 30                	mov    DWORD PTR [eax],esi
c00100eb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00100f1:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00100f4:	58                   	pop    eax
c00100f5:	5a                   	pop    edx
c00100f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00100fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010100:	e8 05 a2 ff ff       	call   c000a30a <VAS::setCPUSpecific(unsigned long)>
c0010105:	c7 04 24 3e e7 01 c0 	mov    DWORD PTR [esp],0xc001e73e
c001010c:	e8 a6 7d ff ff       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c0010111:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010114:	e8 33 f7 ff ff       	call   c000f84c <CPU::detectFeatures()>
c0010119:	c7 04 24 61 e7 01 c0 	mov    DWORD PTR [esp],0xc001e761
c0010120:	e8 92 7d ff ff       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c0010125:	e8 2e 57 00 00       	call   c0015858 <HalInitialise()>
c001012a:	a1 d0 09 02 c0       	mov    eax,ds:0xc00209d0
c001012f:	83 e0 10             	and    eax,0x10
c0010132:	83 f8 01             	cmp    eax,0x1
c0010135:	19 c0                	sbb    eax,eax
c0010137:	83 e0 46             	and    eax,0x46
c001013a:	83 c0 1e             	add    eax,0x1e
c001013d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010140:	e8 40 d7 ff ff       	call   c000d885 <setupTimer(int)>
c0010145:	83 c4 10             	add    esp,0x10
c0010148:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001014e:	f6 05 d0 09 02 c0 20 	test   BYTE PTR ds:0xc00209d0,0x20
c0010155:	74 0c                	je     c0010163 <CPU::open(int, int, void*)+0xe3>
c0010157:	83 ec 0c             	sub    esp,0xc
c001015a:	53                   	push   ebx
c001015b:	e8 54 fe ff ff       	call   c000ffb4 <CPU::setupFeatures()>
c0010160:	83 c4 10             	add    esp,0x10
c0010163:	5b                   	pop    ebx
c0010164:	31 c0                	xor    eax,eax
c0010166:	5e                   	pop    esi
c0010167:	5f                   	pop    edi
c0010168:	c3                   	ret    
c0010169:	90                   	nop

c001016a <EnvVarContainer::getEnv(char const*)>:
c001016a:	57                   	push   edi
c001016b:	56                   	push   esi
c001016c:	53                   	push   ebx
c001016d:	31 db                	xor    ebx,ebx
c001016f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010173:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010175:	7e 2b                	jle    c00101a2 <EnvVarContainer::getEnv(char const*)+0x38>
c0010177:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001017e:	50                   	push   eax
c001017f:	50                   	push   eax
c0010180:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010183:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010186:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001018a:	e8 71 05 ff ff       	call   c0000700 <strcmp>
c001018f:	83 c4 10             	add    esp,0x10
c0010192:	85 c0                	test   eax,eax
c0010194:	75 09                	jne    c001019f <EnvVarContainer::getEnv(char const*)+0x35>
c0010196:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010199:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001019d:	eb 05                	jmp    c00101a4 <EnvVarContainer::getEnv(char const*)+0x3a>
c001019f:	43                   	inc    ebx
c00101a0:	eb d1                	jmp    c0010173 <EnvVarContainer::getEnv(char const*)+0x9>
c00101a2:	31 c0                	xor    eax,eax
c00101a4:	5b                   	pop    ebx
c00101a5:	5e                   	pop    esi
c00101a6:	5f                   	pop    edi
c00101a7:	c3                   	ret    

c00101a8 <EnvVarContainer::setEnv(char const*, char const*)>:
c00101a8:	55                   	push   ebp
c00101a9:	57                   	push   edi
c00101aa:	56                   	push   esi
c00101ab:	53                   	push   ebx
c00101ac:	83 ec 28             	sub    esp,0x28
c00101af:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00101b3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00101b7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00101bb:	56                   	push   esi
c00101bc:	e8 9f 03 ff ff       	call   c0000560 <strlen>
c00101c1:	40                   	inc    eax
c00101c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00101c5:	e8 93 7c ff ff       	call   c0007e5d <malloc>
c00101ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00101d1:	e8 8a 03 ff ff       	call   c0000560 <strlen>
c00101d6:	40                   	inc    eax
c00101d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00101da:	e8 7e 7c ff ff       	call   c0007e5d <malloc>
c00101df:	89 34 24             	mov    DWORD PTR [esp],esi
c00101e2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00101e6:	e8 75 03 ff ff       	call   c0000560 <strlen>
c00101eb:	83 c4 0c             	add    esp,0xc
c00101ee:	40                   	inc    eax
c00101ef:	50                   	push   eax
c00101f0:	6a 00                	push   0x0
c00101f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00101f6:	e8 f5 02 ff ff       	call   c00004f0 <memset>
c00101fb:	89 34 24             	mov    DWORD PTR [esp],esi
c00101fe:	e8 5d 03 ff ff       	call   c0000560 <strlen>
c0010203:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010207:	8d 48 01             	lea    ecx,[eax+0x1]
c001020a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001020c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001020f:	89 de                	mov    esi,ebx
c0010211:	e8 4a 03 ff ff       	call   c0000560 <strlen>
c0010216:	83 c4 0c             	add    esp,0xc
c0010219:	40                   	inc    eax
c001021a:	50                   	push   eax
c001021b:	6a 00                	push   0x0
c001021d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010221:	e8 ca 02 ff ff       	call   c00004f0 <memset>
c0010226:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010229:	e8 32 03 ff ff       	call   c0000560 <strlen>
c001022e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010232:	8d 48 01             	lea    ecx,[eax+0x1]
c0010235:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010237:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001023a:	40                   	inc    eax
c001023b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001023e:	c1 e0 03             	shl    eax,0x3
c0010241:	5a                   	pop    edx
c0010242:	59                   	pop    ecx
c0010243:	50                   	push   eax
c0010244:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010247:	e8 fd 7b ff ff       	call   c0007e49 <realloc>
c001024c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010250:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010253:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010256:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001025a:	b9 08 00 00 00       	mov    ecx,0x8
c001025f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010261:	83 c4 2c             	add    esp,0x2c
c0010264:	5b                   	pop    ebx
c0010265:	5e                   	pop    esi
c0010266:	5f                   	pop    edi
c0010267:	5d                   	pop    ebp
c0010268:	c3                   	ret    
c0010269:	90                   	nop

c001026a <EnvVarContainer::deleteEnv(char const*)>:
c001026a:	c3                   	ret    
c001026b:	90                   	nop

c001026c <EnvVarContainer::loadFrom(char const*, char const*)>:
c001026c:	55                   	push   ebp
c001026d:	57                   	push   edi
c001026e:	56                   	push   esi
c001026f:	53                   	push   ebx
c0010270:	81 ec 38 01 00 00    	sub    esp,0x138
c0010276:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001027d:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010284:	68 14 01 00 00       	push   0x114
c0010289:	e8 cf 7b ff ff       	call   c0007e5d <malloc>
c001028e:	83 c4 0c             	add    esp,0xc
c0010291:	89 c3                	mov    ebx,eax
c0010293:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010296:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001029d:	50                   	push   eax
c001029e:	e8 bf ae ff ff       	call   c000b162 <File::File(char const*, Process*)>
c00102a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102a6:	e8 e5 b1 ff ff       	call   c000b490 <File::exists()>
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	84 c0                	test   al,al
c00102b0:	75 31                	jne    c00102e3 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00102b2:	50                   	push   eax
c00102b3:	50                   	push   eax
c00102b4:	6a 12                	push   0x12
c00102b6:	53                   	push   ebx
c00102b7:	e8 66 af ff ff       	call   c000b222 <File::open(FileOpenMode)>
c00102bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00102be:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00102c1:	89 34 24             	mov    DWORD PTR [esp],esi
c00102c4:	e8 97 02 ff ff       	call   c0000560 <strlen>
c00102c9:	5a                   	pop    edx
c00102ca:	31 d2                	xor    edx,edx
c00102cc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00102d0:	51                   	push   ecx
c00102d1:	56                   	push   esi
c00102d2:	52                   	push   edx
c00102d3:	50                   	push   eax
c00102d4:	53                   	push   ebx
c00102d5:	ff d7                	call   edi
c00102d7:	83 c4 14             	add    esp,0x14
c00102da:	53                   	push   ebx
c00102db:	e8 a0 af ff ff       	call   c000b280 <File::close()>
c00102e0:	83 c4 10             	add    esp,0x10
c00102e3:	56                   	push   esi
c00102e4:	31 f6                	xor    esi,esi
c00102e6:	68 00 01 00 00       	push   0x100
c00102eb:	6a 00                	push   0x0
c00102ed:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00102f1:	50                   	push   eax
c00102f2:	e8 f9 01 ff ff       	call   c00004f0 <memset>
c00102f7:	5f                   	pop    edi
c00102f8:	58                   	pop    eax
c00102f9:	6a 01                	push   0x1
c00102fb:	53                   	push   ebx
c00102fc:	e8 21 af ff ff       	call   c000b222 <File::open(FileOpenMode)>
c0010301:	83 c4 10             	add    esp,0x10
c0010304:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001030c:	83 ec 0c             	sub    esp,0xc
c001030f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010311:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010315:	51                   	push   ecx
c0010316:	8d 54 24 23          	lea    edx,[esp+0x23]
c001031a:	52                   	push   edx
c001031b:	6a 00                	push   0x0
c001031d:	6a 01                	push   0x1
c001031f:	53                   	push   ebx
c0010320:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010323:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0010327:	83 c4 20             	add    esp,0x20
c001032a:	3c 0d                	cmp    al,0xd
c001032c:	0f 84 09 01 00 00    	je     c001043b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010332:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010337:	0f 84 ef 00 00 00    	je     c001042c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001033d:	3c 0a                	cmp    al,0xa
c001033f:	74 13                	je     c0010354 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0010341:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010346:	74 0c                	je     c0010354 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0010348:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001034e:	0f 8e d8 00 00 00    	jle    c001042c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0010354:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010358:	83 ec 0c             	sub    esp,0xc
c001035b:	8d 78 01             	lea    edi,[eax+0x1]
c001035e:	57                   	push   edi
c001035f:	e8 f9 7a ff ff       	call   c0007e5d <malloc>
c0010364:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010368:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001036c:	8d 56 04             	lea    edx,[esi+0x4]
c001036f:	89 14 24             	mov    DWORD PTR [esp],edx
c0010372:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010376:	e8 e2 7a ff ff       	call   c0007e5d <malloc>
c001037b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001037f:	83 c4 0c             	add    esp,0xc
c0010382:	57                   	push   edi
c0010383:	6a 00                	push   0x0
c0010385:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010389:	e8 62 01 ff ff       	call   c00004f0 <memset>
c001038e:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010392:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010396:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001039a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001039c:	83 c4 0c             	add    esp,0xc
c001039f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00103a3:	52                   	push   edx
c00103a4:	6a 00                	push   0x0
c00103a6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00103aa:	e8 41 01 ff ff       	call   c00004f0 <memset>
c00103af:	8d 74 24 30          	lea    esi,[esp+0x30]
c00103b3:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00103b7:	89 34 24             	mov    DWORD PTR [esp],esi
c00103ba:	e8 a1 01 ff ff       	call   c0000560 <strlen>
c00103bf:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00103c3:	89 c1                	mov    ecx,eax
c00103c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00103ca:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00103cd:	40                   	inc    eax
c00103ce:	83 c4 10             	add    esp,0x10
c00103d1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00103d4:	85 d2                	test   edx,edx
c00103d6:	75 0c                	jne    c00103e4 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c00103d8:	83 ec 0c             	sub    esp,0xc
c00103db:	6a 08                	push   0x8
c00103dd:	e8 7b 7a ff ff       	call   c0007e5d <malloc>
c00103e2:	eb 0c                	jmp    c00103f0 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c00103e4:	c1 e0 03             	shl    eax,0x3
c00103e7:	51                   	push   ecx
c00103e8:	51                   	push   ecx
c00103e9:	50                   	push   eax
c00103ea:	52                   	push   edx
c00103eb:	e8 59 7a ff ff       	call   c0007e49 <realloc>
c00103f0:	83 c4 10             	add    esp,0x10
c00103f3:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00103f6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00103f9:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00103fc:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010400:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010404:	b9 08 00 00 00       	mov    ecx,0x8
c0010409:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001040b:	31 f6                	xor    esi,esi
c001040d:	50                   	push   eax
c001040e:	68 00 01 00 00       	push   0x100
c0010413:	6a 00                	push   0x0
c0010415:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010419:	50                   	push   eax
c001041a:	e8 d1 00 ff ff       	call   c00004f0 <memset>
c001041f:	83 c4 10             	add    esp,0x10
c0010422:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001042a:	eb 0f                	jmp    c001043b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001042c:	3c 3d                	cmp    al,0x3d
c001042e:	74 07                	je     c0010437 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0010430:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0010434:	46                   	inc    esi
c0010435:	eb 04                	jmp    c001043b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010437:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001043b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010440:	0f 85 c6 fe ff ff    	jne    c001030c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010446:	81 c4 2c 01 00 00    	add    esp,0x12c
c001044c:	5b                   	pop    ebx
c001044d:	5e                   	pop    esi
c001044e:	5f                   	pop    edi
c001044f:	5d                   	pop    ebp
c0010450:	c3                   	ret    
c0010451:	90                   	nop

c0010452 <EnvVarContainer::__loadSystem()>:
c0010452:	83 ec 10             	sub    esp,0x10
c0010455:	68 40 f9 01 c0       	push   0xc001f940
c001045a:	68 a4 e7 01 c0       	push   0xc001e7a4
c001045f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010463:	e8 04 fe ff ff       	call   c001026c <EnvVarContainer::loadFrom(char const*, char const*)>
c0010468:	83 c4 1c             	add    esp,0x1c
c001046b:	c3                   	ret    

c001046c <EnvVarContainer::__loadUser()>:
c001046c:	c3                   	ret    
c001046d:	90                   	nop

c001046e <EnvVarContainer::EnvVarContainer(Process*)>:
c001046e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010472:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001047c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010480:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010483:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010487:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001048e:	90                   	nop
c001048f:	c3                   	ret    

c0010490 <EnvVarContainer::~EnvVarContainer()>:
c0010490:	83 ec 0c             	sub    esp,0xc
c0010493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010497:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001049a:	85 c0                	test   eax,eax
c001049c:	74 1d                	je     c00104bb <EnvVarContainer::~EnvVarContainer()+0x2b>
c001049e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00104a4:	85 c0                	test   eax,eax
c00104a6:	74 13                	je     c00104bb <EnvVarContainer::~EnvVarContainer()+0x2b>
c00104a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104af:	83 ec 0c             	sub    esp,0xc
c00104b2:	50                   	push   eax
c00104b3:	e8 b5 79 ff ff       	call   c0007e6d <free>
c00104b8:	83 c4 10             	add    esp,0x10
c00104bb:	90                   	nop
c00104bc:	83 c4 0c             	add    esp,0xc
c00104bf:	c3                   	ret    

c00104c0 <Krnl::getEnv(Process*, char const*)>:
c00104c0:	53                   	push   ebx
c00104c1:	83 ec 08             	sub    esp,0x8
c00104c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00104cc:	39 05 b0 3e 02 c0    	cmp    DWORD PTR ds:0xc0023eb0,eax
c00104d2:	74 04                	je     c00104d8 <Krnl::getEnv(Process*, char const*)+0x18>
c00104d4:	85 c0                	test   eax,eax
c00104d6:	75 0b                	jne    c00104e3 <Krnl::getEnv(Process*, char const*)+0x23>
c00104d8:	a1 30 34 02 c0       	mov    eax,ds:0xc0023430
c00104dd:	85 c0                	test   eax,eax
c00104df:	75 19                	jne    c00104fa <Krnl::getEnv(Process*, char const*)+0x3a>
c00104e1:	eb 27                	jmp    c001050a <Krnl::getEnv(Process*, char const*)+0x4a>
c00104e3:	52                   	push   edx
c00104e4:	52                   	push   edx
c00104e5:	53                   	push   ebx
c00104e6:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00104ec:	e8 79 fc ff ff       	call   c001016a <EnvVarContainer::getEnv(char const*)>
c00104f1:	83 c4 10             	add    esp,0x10
c00104f4:	85 c0                	test   eax,eax
c00104f6:	75 28                	jne    c0010520 <Krnl::getEnv(Process*, char const*)+0x60>
c00104f8:	eb de                	jmp    c00104d8 <Krnl::getEnv(Process*, char const*)+0x18>
c00104fa:	52                   	push   edx
c00104fb:	52                   	push   edx
c00104fc:	53                   	push   ebx
c00104fd:	50                   	push   eax
c00104fe:	e8 67 fc ff ff       	call   c001016a <EnvVarContainer::getEnv(char const*)>
c0010503:	83 c4 10             	add    esp,0x10
c0010506:	85 c0                	test   eax,eax
c0010508:	75 16                	jne    c0010520 <Krnl::getEnv(Process*, char const*)+0x60>
c001050a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001050e:	a1 34 34 02 c0       	mov    eax,ds:0xc0023434
c0010513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010517:	83 c4 08             	add    esp,0x8
c001051a:	5b                   	pop    ebx
c001051b:	e9 4a fc ff ff       	jmp    c001016a <EnvVarContainer::getEnv(char const*)>
c0010520:	83 c4 08             	add    esp,0x8
c0010523:	5b                   	pop    ebx
c0010524:	c3                   	ret    

c0010525 <Krnl::setEnvSystem(char const*, char const*)>:
c0010525:	83 ec 10             	sub    esp,0x10
c0010528:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001052c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010530:	ff 35 34 34 02 c0    	push   DWORD PTR ds:0xc0023434
c0010536:	e8 6d fc ff ff       	call   c00101a8 <EnvVarContainer::setEnv(char const*, char const*)>
c001053b:	83 c4 1c             	add    esp,0x1c
c001053e:	c3                   	ret    

c001053f <Krnl::setEnvUser(char const*, char const*)>:
c001053f:	a1 30 34 02 c0       	mov    eax,ds:0xc0023430
c0010544:	85 c0                	test   eax,eax
c0010546:	74 15                	je     c001055d <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010548:	83 ec 10             	sub    esp,0x10
c001054b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001054f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010553:	50                   	push   eax
c0010554:	e8 4f fc ff ff       	call   c00101a8 <EnvVarContainer::setEnv(char const*, char const*)>
c0010559:	83 c4 1c             	add    esp,0x1c
c001055c:	c3                   	ret    
c001055d:	c3                   	ret    

c001055e <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001055e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010562:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010568:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001056c:	e9 37 fc ff ff       	jmp    c00101a8 <EnvVarContainer::setEnv(char const*, char const*)>

c0010571 <Krnl::deleteEnvSystem(char const*)>:
c0010571:	c3                   	ret    

c0010572 <Krnl::deleteEnvUser(char const*)>:
c0010572:	c3                   	ret    

c0010573 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0010573:	c3                   	ret    

c0010574 <Krnl::newProcessEnv(Process*)>:
c0010574:	83 ec 28             	sub    esp,0x28
c0010577:	6a 0c                	push   0xc
c0010579:	e8 df 78 ff ff       	call   c0007e5d <malloc>
c001057e:	5a                   	pop    edx
c001057f:	59                   	pop    ecx
c0010580:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010584:	50                   	push   eax
c0010585:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010589:	e8 e0 fe ff ff       	call   c001046e <EnvVarContainer::EnvVarContainer(Process*)>
c001058e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010592:	83 c4 2c             	add    esp,0x2c
c0010595:	c3                   	ret    

c0010596 <Krnl::copyProcessEnv(Process*, Process*)>:
c0010596:	57                   	push   edi
c0010597:	56                   	push   esi
c0010598:	53                   	push   ebx
c0010599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001059d:	83 ec 0c             	sub    esp,0xc
c00105a0:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00105a6:	6a 0c                	push   0xc
c00105a8:	e8 b0 78 ff ff       	call   c0007e5d <malloc>
c00105ad:	89 c3                	mov    ebx,eax
c00105af:	58                   	pop    eax
c00105b0:	5a                   	pop    edx
c00105b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105b5:	53                   	push   ebx
c00105b6:	e8 b3 fe ff ff       	call   c001046e <EnvVarContainer::EnvVarContainer(Process*)>
c00105bb:	8b 07                	mov    eax,DWORD PTR [edi]
c00105bd:	89 03                	mov    DWORD PTR [ebx],eax
c00105bf:	c1 e0 03             	shl    eax,0x3
c00105c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00105c5:	e8 93 78 ff ff       	call   c0007e5d <malloc>
c00105ca:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00105cd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00105cf:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00105d2:	c1 e1 03             	shl    ecx,0x3
c00105d5:	89 c7                	mov    edi,eax
c00105d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105d9:	83 c4 10             	add    esp,0x10
c00105dc:	89 d8                	mov    eax,ebx
c00105de:	5b                   	pop    ebx
c00105df:	5e                   	pop    esi
c00105e0:	5f                   	pop    edi
c00105e1:	c3                   	ret    

c00105e2 <Krnl::loadSystemEnv()>:
c00105e2:	53                   	push   ebx
c00105e3:	83 ec 14             	sub    esp,0x14
c00105e6:	6a 0c                	push   0xc
c00105e8:	e8 70 78 ff ff       	call   c0007e5d <malloc>
c00105ed:	89 c3                	mov    ebx,eax
c00105ef:	58                   	pop    eax
c00105f0:	5a                   	pop    edx
c00105f1:	ff 35 b0 3e 02 c0    	push   DWORD PTR ds:0xc0023eb0
c00105f7:	53                   	push   ebx
c00105f8:	e8 71 fe ff ff       	call   c001046e <EnvVarContainer::EnvVarContainer(Process*)>
c00105fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010600:	89 1d 34 34 02 c0    	mov    DWORD PTR ds:0xc0023434,ebx
c0010606:	e8 47 fe ff ff       	call   c0010452 <EnvVarContainer::__loadSystem()>
c001060b:	83 c4 18             	add    esp,0x18
c001060e:	5b                   	pop    ebx
c001060f:	c3                   	ret    

c0010610 <Krnl::loadUserEnv()>:
c0010610:	53                   	push   ebx
c0010611:	83 ec 14             	sub    esp,0x14
c0010614:	6a 0c                	push   0xc
c0010616:	e8 42 78 ff ff       	call   c0007e5d <malloc>
c001061b:	89 c3                	mov    ebx,eax
c001061d:	58                   	pop    eax
c001061e:	5a                   	pop    edx
c001061f:	ff 35 b0 3e 02 c0    	push   DWORD PTR ds:0xc0023eb0
c0010625:	53                   	push   ebx
c0010626:	e8 43 fe ff ff       	call   c001046e <EnvVarContainer::EnvVarContainer(Process*)>
c001062b:	89 1d 30 34 02 c0    	mov    DWORD PTR ds:0xc0023430,ebx
c0010631:	83 c4 18             	add    esp,0x18
c0010634:	5b                   	pop    ebx
c0010635:	c3                   	ret    

c0010636 <Krnl::flushEnv()>:
c0010636:	c3                   	ret    

c0010637 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010637:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001063b:	8b 15 30 34 02 c0    	mov    edx,DWORD PTR ds:0xc0023430
c0010641:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010647:	a1 34 34 02 c0       	mov    eax,ds:0xc0023434
c001064c:	8b 00                	mov    eax,DWORD PTR [eax]
c001064e:	03 01                	add    eax,DWORD PTR [ecx]
c0010650:	85 d2                	test   edx,edx
c0010652:	74 02                	je     c0010656 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010654:	03 02                	add    eax,DWORD PTR [edx]
c0010656:	c3                   	ret    

c0010657 <Krnl::getProcessEnvPair(Process*, int)>:
c0010657:	57                   	push   edi
c0010658:	56                   	push   esi
c0010659:	8b 35 30 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023430
c001065f:	53                   	push   ebx
c0010660:	85 f6                	test   esi,esi
c0010662:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010666:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001066a:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010670:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010674:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010676:	75 16                	jne    c001068e <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010678:	39 c2                	cmp    edx,eax
c001067a:	7c 16                	jl     c0010692 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001067c:	8b 0d 34 34 02 c0    	mov    ecx,DWORD PTR ds:0xc0023434
c0010682:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010684:	01 c6                	add    esi,eax
c0010686:	39 d6                	cmp    esi,edx
c0010688:	7e 3c                	jle    c00106c6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001068a:	29 c2                	sub    edx,eax
c001068c:	eb 04                	jmp    c0010692 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001068e:	39 c2                	cmp    edx,eax
c0010690:	7d 05                	jge    c0010697 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010692:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010695:	eb 20                	jmp    c00106b7 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010697:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010699:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001069c:	39 d1                	cmp    ecx,edx
c001069e:	7e 04                	jle    c00106a4 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00106a0:	29 c2                	sub    edx,eax
c00106a2:	eb 10                	jmp    c00106b4 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00106a4:	8b 35 34 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023434
c00106aa:	03 0e                	add    ecx,DWORD PTR [esi]
c00106ac:	39 d1                	cmp    ecx,edx
c00106ae:	7e 16                	jle    c00106c6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00106b0:	29 c2                	sub    edx,eax
c00106b2:	29 fa                	sub    edx,edi
c00106b4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00106b7:	8d 14 d0             	lea    edx,[eax+edx*8]
c00106ba:	8b 02                	mov    eax,DWORD PTR [edx]
c00106bc:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00106bf:	89 03                	mov    DWORD PTR [ebx],eax
c00106c1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00106c4:	eb 1d                	jmp    c00106e3 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00106c6:	83 ec 0c             	sub    esp,0xc
c00106c9:	68 c6 e7 01 c0       	push   0xc001e7c6
c00106ce:	e8 18 00 00 00       	call   c00106eb <Krnl::panic(char const*)>
c00106d3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00106d9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00106e0:	83 c4 10             	add    esp,0x10
c00106e3:	89 d8                	mov    eax,ebx
c00106e5:	5b                   	pop    ebx
c00106e6:	5e                   	pop    esi
c00106e7:	5f                   	pop    edi
c00106e8:	c2 04 00             	ret    0x4

c00106eb <Krnl::panic(char const*)>:
c00106eb:	53                   	push   ebx
c00106ec:	83 ec 10             	sub    esp,0x10
c00106ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00106f3:	fa                   	cli    
c00106f4:	c6 05 40 34 02 c0 01 	mov    BYTE PTR ds:0xc0023440,0x1
c00106fb:	53                   	push   ebx
c00106fc:	68 e0 e7 01 c0       	push   0xc001e7e0
c0010701:	e8 e6 a4 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0010706:	83 c4 0c             	add    esp,0xc
c0010709:	a1 04 0a 02 c0       	mov    eax,ds:0xc0020a04
c001070e:	6a 01                	push   0x1
c0010710:	6a 0f                	push   0xf
c0010712:	50                   	push   eax
c0010713:	e8 c8 82 ff ff       	call   c00089e0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010718:	5a                   	pop    edx
c0010719:	8b 0d 04 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a04
c001071f:	51                   	push   ecx
c0010720:	e8 b3 84 ff ff       	call   c0008bd8 <VgaText::clearScreen()>
c0010725:	58                   	pop    eax
c0010726:	8b 0d 04 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a04
c001072c:	5a                   	pop    edx
c001072d:	68 11 e8 01 c0       	push   0xc001e811
c0010732:	51                   	push   ecx
c0010733:	e8 e0 82 ff ff       	call   c0008a18 <VgaText::setTitle(char*)>
c0010738:	83 c4 0c             	add    esp,0xc
c001073b:	a1 04 0a 02 c0       	mov    eax,ds:0xc0020a04
c0010740:	6a 01                	push   0x1
c0010742:	6a 0f                	push   0xf
c0010744:	50                   	push   eax
c0010745:	e8 96 82 ff ff       	call   c00089e0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001074a:	58                   	pop    eax
c001074b:	8b 0d 04 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a04
c0010751:	5a                   	pop    edx
c0010752:	68 f9 e7 01 c0       	push   0xc001e7f9
c0010757:	51                   	push   ecx
c0010758:	e8 6f 87 ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c001075d:	83 c4 0c             	add    esp,0xc
c0010760:	a1 04 0a 02 c0       	mov    eax,ds:0xc0020a04
c0010765:	6a 0f                	push   0xf
c0010767:	6a 01                	push   0x1
c0010769:	50                   	push   eax
c001076a:	e8 71 82 ff ff       	call   c00089e0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001076f:	58                   	pop    eax
c0010770:	8b 0d 04 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a04
c0010776:	5a                   	pop    edx
c0010777:	68 02 e8 01 c0       	push   0xc001e802
c001077c:	51                   	push   ecx
c001077d:	e8 4a 87 ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c0010782:	83 c4 0c             	add    esp,0xc
c0010785:	a1 04 0a 02 c0       	mov    eax,ds:0xc0020a04
c001078a:	6a 01                	push   0x1
c001078c:	6a 0f                	push   0xf
c001078e:	50                   	push   eax
c001078f:	e8 4c 82 ff ff       	call   c00089e0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010794:	58                   	pop    eax
c0010795:	8b 0d 04 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a04
c001079b:	5a                   	pop    edx
c001079c:	68 0f e8 01 c0       	push   0xc001e80f
c00107a1:	51                   	push   ecx
c00107a2:	e8 25 87 ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c00107a7:	58                   	pop    eax
c00107a8:	8b 0d 04 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a04
c00107ae:	5a                   	pop    edx
c00107af:	68 20 e8 01 c0       	push   0xc001e820
c00107b4:	51                   	push   ecx
c00107b5:	e8 12 87 ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c00107ba:	58                   	pop    eax
c00107bb:	8b 0d 04 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a04
c00107c1:	5a                   	pop    edx
c00107c2:	68 12 e8 01 c0       	push   0xc001e812
c00107c7:	51                   	push   ecx
c00107c8:	e8 ff 86 ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c00107cd:	58                   	pop    eax
c00107ce:	8b 0d 04 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a04
c00107d4:	5a                   	pop    edx
c00107d5:	53                   	push   ebx
c00107d6:	51                   	push   ecx
c00107d7:	e8 f0 86 ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c00107dc:	5b                   	pop    ebx
c00107dd:	58                   	pop    eax
c00107de:	a1 04 0a 02 c0       	mov    eax,ds:0xc0020a04
c00107e3:	68 0f e8 01 c0       	push   0xc001e80f
c00107e8:	50                   	push   eax
c00107e9:	e8 de 86 ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c00107ee:	83 c4 10             	add    esp,0x10
c00107f1:	eb fe                	jmp    c00107f1 <Krnl::panic(char const*)+0x106>

c00107f3 <Krnl::powerThread(void*)>:
c00107f3:	83 ec 0c             	sub    esp,0xc
c00107f6:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c00107fb:	48                   	dec    eax
c00107fc:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0010801:	75 01                	jne    c0010804 <Krnl::powerThread(void*)+0x11>
c0010803:	fb                   	sti    
c0010804:	83 ec 0c             	sub    esp,0xc
c0010807:	c6 05 60 34 02 c0 00 	mov    BYTE PTR ds:0xc0023460,0x0
c001080e:	6a 0a                	push   0xa
c0010810:	e8 3b 35 00 00       	call   c0013d50 <sleep(unsigned int)>
c0010815:	83 05 a4 34 02 c0 0a 	add    DWORD PTR ds:0xc00234a4,0xa
c001081c:	83 c4 10             	add    esp,0x10
c001081f:	eb e3                	jmp    c0010804 <Krnl::powerThread(void*)+0x11>

c0010821 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010821:	57                   	push   edi
c0010822:	b9 09 00 00 00       	mov    ecx,0x9
c0010827:	56                   	push   esi
c0010828:	bf 80 34 02 c0       	mov    edi,0xc0023480
c001082d:	fc                   	cld    
c001082e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010832:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010834:	5e                   	pop    esi
c0010835:	5f                   	pop    edi
c0010836:	c3                   	ret    

c0010837 <Krnl::userIOReceived()>:
c0010837:	c7 05 a4 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00234a4,0x0
c0010841:	c3                   	ret    

c0010842 <Krnl::handlePowerButton()>:
c0010842:	83 ec 0c             	sub    esp,0xc
c0010845:	a1 80 34 02 c0       	mov    eax,ds:0xc0023480
c001084a:	83 f8 02             	cmp    eax,0x2
c001084d:	75 10                	jne    c001085f <Krnl::handlePowerButton()+0x1d>
c001084f:	83 ec 0c             	sub    esp,0xc
c0010852:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0010858:	e8 9d 6c ff ff       	call   c00074fa <Computer::shutdown()>
c001085d:	eb 11                	jmp    c0010870 <Krnl::handlePowerButton()+0x2e>
c001085f:	48                   	dec    eax
c0010860:	75 11                	jne    c0010873 <Krnl::handlePowerButton()+0x31>
c0010862:	83 ec 0c             	sub    esp,0xc
c0010865:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c001086b:	e8 ba 6c ff ff       	call   c000752a <Computer::sleep()>
c0010870:	83 c4 10             	add    esp,0x10
c0010873:	83 c4 0c             	add    esp,0xc
c0010876:	c3                   	ret    

c0010877 <Krnl::handleSleepButton()>:
c0010877:	83 ec 0c             	sub    esp,0xc
c001087a:	a1 84 34 02 c0       	mov    eax,ds:0xc0023484
c001087f:	83 f8 02             	cmp    eax,0x2
c0010882:	75 10                	jne    c0010894 <Krnl::handleSleepButton()+0x1d>
c0010884:	83 ec 0c             	sub    esp,0xc
c0010887:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c001088d:	e8 68 6c ff ff       	call   c00074fa <Computer::shutdown()>
c0010892:	eb 11                	jmp    c00108a5 <Krnl::handleSleepButton()+0x2e>
c0010894:	48                   	dec    eax
c0010895:	75 11                	jne    c00108a8 <Krnl::handleSleepButton()+0x31>
c0010897:	83 ec 0c             	sub    esp,0xc
c001089a:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c00108a0:	e8 85 6c ff ff       	call   c000752a <Computer::sleep()>
c00108a5:	83 c4 10             	add    esp,0x10
c00108a8:	83 c4 0c             	add    esp,0xc
c00108ab:	c3                   	ret    

c00108ac <Krnl::setupPowerManager()>:
c00108ac:	83 ec 0c             	sub    esp,0xc
c00108af:	c7 05 a4 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00234a4,0x0
c00108b9:	68 f0 00 00 00       	push   0xf0
c00108be:	c6 05 60 34 02 c0 00 	mov    BYTE PTR ds:0xc0023460,0x0
c00108c5:	6a 00                	push   0x0
c00108c7:	68 f3 07 01 c0       	push   0xc00107f3
c00108cc:	ff 35 b0 3e 02 c0    	push   DWORD PTR ds:0xc0023eb0
c00108d2:	e8 49 2f 00 00       	call   c0013820 <Process::createThread(void (*)(void*), void*, int)>
c00108d7:	c7 05 80 34 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0023480,0x2
c00108e1:	c7 05 84 34 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023484,0x1
c00108eb:	c7 05 88 34 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0023488,0x3
c00108f5:	c7 05 8c 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002348c,0x0
c00108ff:	c7 05 98 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023498,0x0
c0010909:	c7 05 90 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023490,0x0
c0010913:	c7 05 9c 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002349c,0x0
c001091d:	c7 05 94 34 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023494,0x3c
c0010927:	c7 05 a0 34 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00234a0,0x3c
c0010931:	83 c4 1c             	add    esp,0x1c
c0010934:	c3                   	ret    

c0010935 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0010935:	55                   	push   ebp
c0010936:	57                   	push   edi
c0010937:	56                   	push   esi
c0010938:	53                   	push   ebx
c0010939:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001093f:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0010946:	8a 1e                	mov    bl,BYTE PTR [esi]
c0010948:	8d 6e 01             	lea    ebp,[esi+0x1]
c001094b:	80 fb 40             	cmp    bl,0x40
c001094e:	75 1b                	jne    c001096b <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0010950:	8a 16                	mov    dl,BYTE PTR [esi]
c0010952:	84 d2                	test   dl,dl
c0010954:	0f 84 f1 00 00 00    	je     c0010a4b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001095a:	8d 46 01             	lea    eax,[esi+0x1]
c001095d:	80 fa 3a             	cmp    dl,0x3a
c0010960:	74 04                	je     c0010966 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0010962:	89 c6                	mov    esi,eax
c0010964:	eb ea                	jmp    c0010950 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0010966:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010969:	89 c6                	mov    esi,eax
c001096b:	50                   	push   eax
c001096c:	6a 40                	push   0x40
c001096e:	6a 00                	push   0x0
c0010970:	8d 44 24 24          	lea    eax,[esp+0x24]
c0010974:	50                   	push   eax
c0010975:	e8 76 fb fe ff       	call   c00004f0 <memset>
c001097a:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0010981:	31 c0                	xor    eax,eax
c0010983:	83 c4 10             	add    esp,0x10
c0010986:	8a 0f                	mov    cl,BYTE PTR [edi]
c0010988:	84 c9                	test   cl,cl
c001098a:	0f 84 bb 00 00 00    	je     c0010a4b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010990:	3d c7 00 00 00       	cmp    eax,0xc7
c0010995:	0f 8f b0 00 00 00    	jg     c0010a4b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001099b:	80 f9 0a             	cmp    cl,0xa
c001099e:	0f 85 98 00 00 00    	jne    c0010a3c <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00109a4:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00109a9:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00109ad:	a8 df                	test   al,0xdf
c00109af:	0f 94 c1             	sete   cl
c00109b2:	3c 23                	cmp    al,0x23
c00109b4:	0f 94 c2             	sete   dl
c00109b7:	08 d1                	or     cl,dl
c00109b9:	75 4a                	jne    c0010a05 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00109bb:	8d 50 f7             	lea    edx,[eax-0x9]
c00109be:	80 fa 01             	cmp    dl,0x1
c00109c1:	76 42                	jbe    c0010a05 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00109c3:	3c 5b                	cmp    al,0x5b
c00109c5:	75 42                	jne    c0010a09 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00109c7:	80 fb 40             	cmp    bl,0x40
c00109ca:	75 39                	jne    c0010a05 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00109cc:	83 ec 0c             	sub    esp,0xc
c00109cf:	8d 54 24 65          	lea    edx,[esp+0x65]
c00109d3:	52                   	push   edx
c00109d4:	e8 87 fb fe ff       	call   c0000560 <strlen>
c00109d9:	83 c4 10             	add    esp,0x10
c00109dc:	83 f8 3f             	cmp    eax,0x3f
c00109df:	77 6a                	ja     c0010a4b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00109e1:	50                   	push   eax
c00109e2:	50                   	push   eax
c00109e3:	8d 54 24 61          	lea    edx,[esp+0x61]
c00109e7:	52                   	push   edx
c00109e8:	8d 54 24 24          	lea    edx,[esp+0x24]
c00109ec:	52                   	push   edx
c00109ed:	e8 2e fc fe ff       	call   c0000620 <strcpy>
c00109f2:	58                   	pop    eax
c00109f3:	8d 54 24 24          	lea    edx,[esp+0x24]
c00109f7:	52                   	push   edx
c00109f8:	e8 63 fb fe ff       	call   c0000560 <strlen>
c00109fd:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0010a02:	83 c4 10             	add    esp,0x10
c0010a05:	31 d2                	xor    edx,edx
c0010a07:	eb 3a                	jmp    c0010a43 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0010a09:	80 fb 40             	cmp    bl,0x40
c0010a0c:	74 06                	je     c0010a14 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0010a0e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0010a12:	eb 20                	jmp    c0010a34 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0010a14:	50                   	push   eax
c0010a15:	50                   	push   eax
c0010a16:	55                   	push   ebp
c0010a17:	8d 44 24 24          	lea    eax,[esp+0x24]
c0010a1b:	50                   	push   eax
c0010a1c:	e8 df fc fe ff       	call   c0000700 <strcmp>
c0010a21:	83 c4 10             	add    esp,0x10
c0010a24:	85 c0                	test   eax,eax
c0010a26:	75 dd                	jne    c0010a05 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a28:	eb e4                	jmp    c0010a0e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0010a2a:	8d 50 01             	lea    edx,[eax+0x1]
c0010a2d:	80 f9 3d             	cmp    cl,0x3d
c0010a30:	74 1d                	je     c0010a4f <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0010a32:	89 d0                	mov    eax,edx
c0010a34:	8a 08                	mov    cl,BYTE PTR [eax]
c0010a36:	84 c9                	test   cl,cl
c0010a38:	75 f0                	jne    c0010a2a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0010a3a:	eb 0f                	jmp    c0010a4b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010a3c:	8d 50 01             	lea    edx,[eax+0x1]
c0010a3f:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0010a43:	47                   	inc    edi
c0010a44:	89 d0                	mov    eax,edx
c0010a46:	e9 3b ff ff ff       	jmp    c0010986 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0010a4b:	31 c0                	xor    eax,eax
c0010a4d:	eb 33                	jmp    c0010a82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0010a4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010a53:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0010a56:	50                   	push   eax
c0010a57:	50                   	push   eax
c0010a58:	8d 44 24 60          	lea    eax,[esp+0x60]
c0010a5c:	50                   	push   eax
c0010a5d:	56                   	push   esi
c0010a5e:	e8 9d fc fe ff       	call   c0000700 <strcmp>
c0010a63:	83 c4 10             	add    esp,0x10
c0010a66:	85 c0                	test   eax,eax
c0010a68:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010a6c:	75 97                	jne    c0010a05 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a6e:	51                   	push   ecx
c0010a6f:	51                   	push   ecx
c0010a70:	52                   	push   edx
c0010a71:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0010a78:	e8 a3 fb fe ff       	call   c0000620 <strcpy>
c0010a7d:	83 c4 10             	add    esp,0x10
c0010a80:	b0 01                	mov    al,0x1
c0010a82:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010a88:	5b                   	pop    ebx
c0010a89:	5e                   	pop    esi
c0010a8a:	5f                   	pop    edi
c0010a8b:	5d                   	pop    ebp
c0010a8c:	c3                   	ret    

c0010a8d <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0010a8d:	57                   	push   edi
c0010a8e:	56                   	push   esi
c0010a8f:	53                   	push   ebx
c0010a90:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0010a96:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0010a9d:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0010aa4:	53                   	push   ebx
c0010aa5:	e8 b6 fa fe ff       	call   c0000560 <strlen>
c0010aaa:	89 34 24             	mov    DWORD PTR [esp],esi
c0010aad:	89 c7                	mov    edi,eax
c0010aaf:	e8 ac fa fe ff       	call   c0000560 <strlen>
c0010ab4:	83 c4 10             	add    esp,0x10
c0010ab7:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0010abb:	3d ff 00 00 00       	cmp    eax,0xff
c0010ac0:	0f 87 d3 00 00 00    	ja     c0010b99 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0010ac6:	57                   	push   edi
c0010ac7:	57                   	push   edi
c0010ac8:	56                   	push   esi
c0010ac9:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0010acd:	56                   	push   esi
c0010ace:	e8 4d fb fe ff       	call   c0000620 <strcpy>
c0010ad3:	58                   	pop    eax
c0010ad4:	5a                   	pop    edx
c0010ad5:	68 3f eb 01 c0       	push   0xc001eb3f
c0010ada:	56                   	push   esi
c0010adb:	e8 00 fd fe ff       	call   c00007e0 <strcat>
c0010ae0:	59                   	pop    ecx
c0010ae1:	5f                   	pop    edi
c0010ae2:	53                   	push   ebx
c0010ae3:	56                   	push   esi
c0010ae4:	e8 f7 fc fe ff       	call   c00007e0 <strcat>
c0010ae9:	58                   	pop    eax
c0010aea:	5a                   	pop    edx
c0010aeb:	68 5a e8 01 c0       	push   0xc001e85a
c0010af0:	56                   	push   esi
c0010af1:	e8 ea fc fe ff       	call   c00007e0 <strcat>
c0010af6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010afd:	e8 5b 73 ff ff       	call   c0007e5d <malloc>
c0010b02:	83 c4 0c             	add    esp,0xc
c0010b05:	89 c3                	mov    ebx,eax
c0010b07:	ff 35 b0 3e 02 c0    	push   DWORD PTR ds:0xc0023eb0
c0010b0d:	56                   	push   esi
c0010b0e:	50                   	push   eax
c0010b0f:	e8 4e a6 ff ff       	call   c000b162 <File::File(char const*, Process*)>
c0010b14:	83 c4 10             	add    esp,0x10
c0010b17:	85 db                	test   ebx,ebx
c0010b19:	74 7e                	je     c0010b99 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0010b1b:	51                   	push   ecx
c0010b1c:	51                   	push   ecx
c0010b1d:	6a 01                	push   0x1
c0010b1f:	53                   	push   ebx
c0010b20:	e8 fd a6 ff ff       	call   c000b222 <File::open(FileOpenMode)>
c0010b25:	83 c4 10             	add    esp,0x10
c0010b28:	85 c0                	test   eax,eax
c0010b2a:	74 08                	je     c0010b34 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0010b2c:	83 ec 0c             	sub    esp,0xc
c0010b2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b31:	53                   	push   ebx
c0010b32:	eb 5f                	jmp    c0010b93 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0010b34:	52                   	push   edx
c0010b35:	8d 44 24 17          	lea    eax,[esp+0x17]
c0010b39:	50                   	push   eax
c0010b3a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0010b3e:	50                   	push   eax
c0010b3f:	53                   	push   ebx
c0010b40:	e8 89 a9 ff ff       	call   c000b4ce <File::stat(unsigned long long*, bool*)>
c0010b45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010b49:	83 c4 10             	add    esp,0x10
c0010b4c:	89 c1                	mov    ecx,eax
c0010b4e:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0010b52:	74 31                	je     c0010b85 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0010b54:	83 ec 0c             	sub    esp,0xc
c0010b57:	50                   	push   eax
c0010b58:	e8 00 73 ff ff       	call   c0007e5d <malloc>
c0010b5d:	89 c6                	mov    esi,eax
c0010b5f:	58                   	pop    eax
c0010b60:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b62:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010b66:	52                   	push   edx
c0010b67:	56                   	push   esi
c0010b68:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010b6c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010b70:	53                   	push   ebx
c0010b71:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010b74:	83 c4 20             	add    esp,0x20
c0010b77:	85 c0                	test   eax,eax
c0010b79:	75 0a                	jne    c0010b85 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0010b7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b7f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0010b83:	74 18                	je     c0010b9d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0010b85:	83 ec 0c             	sub    esp,0xc
c0010b88:	53                   	push   ebx
c0010b89:	e8 f2 a6 ff ff       	call   c000b280 <File::close()>
c0010b8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b93:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010b96:	83 c4 10             	add    esp,0x10
c0010b99:	31 c0                	xor    eax,eax
c0010b9b:	eb 3b                	jmp    c0010bd8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0010b9d:	83 ec 0c             	sub    esp,0xc
c0010ba0:	53                   	push   ebx
c0010ba1:	e8 da a6 ff ff       	call   c000b280 <File::close()>
c0010ba6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ba8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010bae:	83 c4 0c             	add    esp,0xc
c0010bb1:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0010bb8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0010bbf:	56                   	push   esi
c0010bc0:	e8 70 fd ff ff       	call   c0010935 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0010bc5:	89 34 24             	mov    DWORD PTR [esp],esi
c0010bc8:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0010bcc:	e8 9c 72 ff ff       	call   c0007e6d <free>
c0010bd1:	83 c4 10             	add    esp,0x10
c0010bd4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010bd8:	81 c4 20 01 00 00    	add    esp,0x120
c0010bde:	5b                   	pop    ebx
c0010bdf:	5e                   	pop    esi
c0010be0:	5f                   	pop    edi
c0010be1:	c3                   	ret    

c0010be2 <Reg::getLine(char*, char*, char*)>:
c0010be2:	57                   	push   edi
c0010be3:	56                   	push   esi
c0010be4:	53                   	push   ebx
c0010be5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010be9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010bed:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010bf1:	57                   	push   edi
c0010bf2:	56                   	push   esi
c0010bf3:	53                   	push   ebx
c0010bf4:	68 5f e8 01 c0       	push   0xc001e85f
c0010bf9:	e8 8f fe ff ff       	call   c0010a8d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0010bfe:	83 c4 10             	add    esp,0x10
c0010c01:	84 c0                	test   al,al
c0010c03:	75 10                	jne    c0010c15 <Reg::getLine(char*, char*, char*)+0x33>
c0010c05:	57                   	push   edi
c0010c06:	56                   	push   esi
c0010c07:	53                   	push   ebx
c0010c08:	68 84 e8 01 c0       	push   0xc001e884
c0010c0d:	e8 7b fe ff ff       	call   c0010a8d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0010c12:	83 c4 10             	add    esp,0x10
c0010c15:	5b                   	pop    ebx
c0010c16:	5e                   	pop    esi
c0010c17:	5f                   	pop    edi
c0010c18:	c3                   	ret    

c0010c19 <Reg::readInt(char*, char*, int*)>:
c0010c19:	55                   	push   ebp
c0010c1a:	57                   	push   edi
c0010c1b:	56                   	push   esi
c0010c1c:	53                   	push   ebx
c0010c1d:	81 ec f0 00 00 00    	sub    esp,0xf0
c0010c23:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0010c27:	57                   	push   edi
c0010c28:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0010c2f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0010c36:	e8 a7 ff ff ff       	call   c0010be2 <Reg::getLine(char*, char*, char*)>
c0010c3b:	83 c4 10             	add    esp,0x10
c0010c3e:	84 c0                	test   al,al
c0010c40:	0f 84 b3 00 00 00    	je     c0010cf9 <Reg::readInt(char*, char*, int*)+0xe0>
c0010c46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0010c4a:	80 fa 2b             	cmp    dl,0x2b
c0010c4d:	74 0c                	je     c0010c5b <Reg::readInt(char*, char*, int*)+0x42>
c0010c4f:	80 fa 2d             	cmp    dl,0x2d
c0010c52:	75 0e                	jne    c0010c62 <Reg::readInt(char*, char*, int*)+0x49>
c0010c54:	ba 01 00 00 00       	mov    edx,0x1
c0010c59:	eb 0b                	jmp    c0010c66 <Reg::readInt(char*, char*, int*)+0x4d>
c0010c5b:	ba 01 00 00 00       	mov    edx,0x1
c0010c60:	eb 02                	jmp    c0010c64 <Reg::readInt(char*, char*, int*)+0x4b>
c0010c62:	31 d2                	xor    edx,edx
c0010c64:	31 c0                	xor    eax,eax
c0010c66:	be 0a 00 00 00       	mov    esi,0xa
c0010c6b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0010c70:	75 20                	jne    c0010c92 <Reg::readInt(char*, char*, int*)+0x79>
c0010c72:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0010c76:	80 f9 78             	cmp    cl,0x78
c0010c79:	75 0a                	jne    c0010c85 <Reg::readInt(char*, char*, int*)+0x6c>
c0010c7b:	83 c2 02             	add    edx,0x2
c0010c7e:	be 10 00 00 00       	mov    esi,0x10
c0010c83:	eb 0d                	jmp    c0010c92 <Reg::readInt(char*, char*, int*)+0x79>
c0010c85:	80 f9 62             	cmp    cl,0x62
c0010c88:	75 08                	jne    c0010c92 <Reg::readInt(char*, char*, int*)+0x79>
c0010c8a:	83 c2 02             	add    edx,0x2
c0010c8d:	be 02 00 00 00       	mov    esi,0x2
c0010c92:	01 d7                	add    edi,edx
c0010c94:	31 d2                	xor    edx,edx
c0010c96:	8a 1f                	mov    bl,BYTE PTR [edi]
c0010c98:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0010c9c:	80 fb 0d             	cmp    bl,0xd
c0010c9f:	0f 94 c3             	sete   bl
c0010ca2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0010ca7:	0f 94 c1             	sete   cl
c0010caa:	08 cb                	or     bl,cl
c0010cac:	75 3a                	jne    c0010ce8 <Reg::readInt(char*, char*, int*)+0xcf>
c0010cae:	0f af d6             	imul   edx,esi
c0010cb1:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0010cb6:	83 fe 10             	cmp    esi,0x10
c0010cb9:	75 26                	jne    c0010ce1 <Reg::readInt(char*, char*, int*)+0xc8>
c0010cbb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010cbf:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0010cc2:	89 e9                	mov    ecx,ebp
c0010cc4:	80 f9 05             	cmp    cl,0x5
c0010cc7:	77 06                	ja     c0010ccf <Reg::readInt(char*, char*, int*)+0xb6>
c0010cc9:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0010ccd:	eb 16                	jmp    c0010ce5 <Reg::readInt(char*, char*, int*)+0xcc>
c0010ccf:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010cd3:	83 e9 61             	sub    ecx,0x61
c0010cd6:	80 f9 05             	cmp    cl,0x5
c0010cd9:	77 06                	ja     c0010ce1 <Reg::readInt(char*, char*, int*)+0xc8>
c0010cdb:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0010cdf:	eb 04                	jmp    c0010ce5 <Reg::readInt(char*, char*, int*)+0xcc>
c0010ce1:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0010ce5:	47                   	inc    edi
c0010ce6:	eb ae                	jmp    c0010c96 <Reg::readInt(char*, char*, int*)+0x7d>
c0010ce8:	84 c0                	test   al,al
c0010cea:	74 02                	je     c0010cee <Reg::readInt(char*, char*, int*)+0xd5>
c0010cec:	f7 da                	neg    edx
c0010cee:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0010cf5:	89 10                	mov    DWORD PTR [eax],edx
c0010cf7:	88 d8                	mov    al,bl
c0010cf9:	81 c4 ec 00 00 00    	add    esp,0xec
c0010cff:	5b                   	pop    ebx
c0010d00:	5e                   	pop    esi
c0010d01:	5f                   	pop    edi
c0010d02:	5d                   	pop    ebp
c0010d03:	c3                   	ret    

c0010d04 <Reg::readString(char*, char*, char*, int)>:
c0010d04:	57                   	push   edi
c0010d05:	56                   	push   esi
c0010d06:	53                   	push   ebx
c0010d07:	81 ec d4 00 00 00    	sub    esp,0xd4
c0010d0d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0010d14:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0010d18:	57                   	push   edi
c0010d19:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0010d20:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0010d27:	e8 b6 fe ff ff       	call   c0010be2 <Reg::getLine(char*, char*, char*)>
c0010d2c:	83 c4 10             	add    esp,0x10
c0010d2f:	89 c6                	mov    esi,eax
c0010d31:	84 c0                	test   al,al
c0010d33:	74 44                	je     c0010d79 <Reg::readString(char*, char*, char*, int)+0x75>
c0010d35:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0010d3c:	31 c0                	xor    eax,eax
c0010d3e:	4a                   	dec    edx
c0010d3f:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0010d42:	84 c9                	test   cl,cl
c0010d44:	74 0f                	je     c0010d55 <Reg::readString(char*, char*, char*, int)+0x51>
c0010d46:	39 c2                	cmp    edx,eax
c0010d48:	7e 0b                	jle    c0010d55 <Reg::readString(char*, char*, char*, int)+0x51>
c0010d4a:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0010d4d:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0010d52:	40                   	inc    eax
c0010d53:	eb ea                	jmp    c0010d3f <Reg::readString(char*, char*, char*, int)+0x3b>
c0010d55:	83 ec 0c             	sub    esp,0xc
c0010d58:	53                   	push   ebx
c0010d59:	e8 02 f8 fe ff       	call   c0000560 <strlen>
c0010d5e:	83 c4 10             	add    esp,0x10
c0010d61:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0010d66:	75 11                	jne    c0010d79 <Reg::readString(char*, char*, char*, int)+0x75>
c0010d68:	83 ec 0c             	sub    esp,0xc
c0010d6b:	53                   	push   ebx
c0010d6c:	e8 ef f7 fe ff       	call   c0000560 <strlen>
c0010d71:	83 c4 10             	add    esp,0x10
c0010d74:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0010d79:	81 c4 d0 00 00 00    	add    esp,0xd0
c0010d7f:	89 f0                	mov    eax,esi
c0010d81:	5b                   	pop    ebx
c0010d82:	5e                   	pop    esi
c0010d83:	5f                   	pop    edi
c0010d84:	c3                   	ret    

c0010d85 <Reg::readBool(char*, char*, bool*)>:
c0010d85:	83 ec 20             	sub    esp,0x20
c0010d88:	8d 44 24 10          	lea    eax,[esp+0x10]
c0010d8c:	50                   	push   eax
c0010d8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010d91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010d95:	e8 7f fe ff ff       	call   c0010c19 <Reg::readInt(char*, char*, int*)>
c0010d9a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010d9f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010da3:	0f 95 02             	setne  BYTE PTR [edx]
c0010da6:	83 c4 2c             	add    esp,0x2c
c0010da9:	c3                   	ret    

c0010daa <Reg::readBoolWithDefault(char*, char*, bool)>:
c0010daa:	53                   	push   ebx
c0010dab:	83 ec 1c             	sub    esp,0x1c
c0010dae:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0010db2:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010db6:	50                   	push   eax
c0010db7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010dbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010dbf:	e8 c1 ff ff ff       	call   c0010d85 <Reg::readBool(char*, char*, bool*)>
c0010dc4:	83 c4 10             	add    esp,0x10
c0010dc7:	84 c0                	test   al,al
c0010dc9:	74 04                	je     c0010dcf <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0010dcb:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0010dcf:	88 d8                	mov    al,bl
c0010dd1:	83 c4 18             	add    esp,0x18
c0010dd4:	5b                   	pop    ebx
c0010dd5:	c3                   	ret    

c0010dd6 <Reg::readIntWithDefault(char*, char*, int)>:
c0010dd6:	53                   	push   ebx
c0010dd7:	83 ec 1c             	sub    esp,0x1c
c0010dda:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010dde:	8d 44 24 10          	lea    eax,[esp+0x10]
c0010de2:	50                   	push   eax
c0010de3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010de7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010deb:	e8 29 fe ff ff       	call   c0010c19 <Reg::readInt(char*, char*, int*)>
c0010df0:	83 c4 10             	add    esp,0x10
c0010df3:	84 c0                	test   al,al
c0010df5:	74 04                	je     c0010dfb <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0010df7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010dfb:	89 d8                	mov    eax,ebx
c0010dfd:	83 c4 18             	add    esp,0x18
c0010e00:	5b                   	pop    ebx
c0010e01:	c3                   	ret    

c0010e02 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0010e02:	57                   	push   edi
c0010e03:	56                   	push   esi
c0010e04:	56                   	push   esi
c0010e05:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010e09:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0010e0d:	56                   	push   esi
c0010e0e:	57                   	push   edi
c0010e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e17:	e8 e8 fe ff ff       	call   c0010d04 <Reg::readString(char*, char*, char*, int)>
c0010e1c:	83 c4 10             	add    esp,0x10
c0010e1f:	84 c0                	test   al,al
c0010e21:	75 1a                	jne    c0010e3d <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0010e23:	51                   	push   ecx
c0010e24:	56                   	push   esi
c0010e25:	6a 00                	push   0x0
c0010e27:	57                   	push   edi
c0010e28:	e8 c3 f6 fe ff       	call   c00004f0 <memset>
c0010e2d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0010e30:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e34:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e36:	83 c4 10             	add    esp,0x10
c0010e39:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0010e3d:	89 f8                	mov    eax,edi
c0010e3f:	5a                   	pop    edx
c0010e40:	5e                   	pop    esi
c0010e41:	5f                   	pop    edi
c0010e42:	c3                   	ret    

c0010e43 <SysExit(regs*)>:
c0010e43:	83 ec 18             	sub    esp,0x18
c0010e46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e4a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010e4d:	e8 12 35 00 00       	call   c0014364 <terminateTask(int)>
c0010e52:	83 c8 ff             	or     eax,0xffffffff
c0010e55:	83 c4 1c             	add    esp,0x1c
c0010e58:	89 c2                	mov    edx,eax
c0010e5a:	c3                   	ret    

c0010e5b <SysGetCwd(regs*)>:
c0010e5b:	83 ec 10             	sub    esp,0x10
c0010e5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e62:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0010e65:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010e68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e6d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010e70:	e8 ef a0 ff ff       	call   c000af64 <Fs::getcwd(Process*, char*, int)>
c0010e75:	83 c4 1c             	add    esp,0x1c
c0010e78:	99                   	cdq    
c0010e79:	c3                   	ret    

c0010e7a <SysGetPID(regs*)>:
c0010e7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e7f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e82:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e84:	99                   	cdq    
c0010e85:	c3                   	ret    

c0010e86 <SysGetRAMData(regs*)>:
c0010e86:	8b 0d e8 09 02 c0    	mov    ecx,DWORD PTR ds:0xc00209e8
c0010e8c:	69 05 e4 09 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc00209e4,0xc8
c0010e96:	99                   	cdq    
c0010e97:	f7 f9                	idiv   ecx
c0010e99:	c1 e0 18             	shl    eax,0x18
c0010e9c:	09 c8                	or     eax,ecx
c0010e9e:	99                   	cdq    
c0010e9f:	c3                   	ret    

c0010ea0 <SysGetVGAPtr(regs*)>:
c0010ea0:	55                   	push   ebp
c0010ea1:	57                   	push   edi
c0010ea2:	56                   	push   esi
c0010ea3:	53                   	push   ebx
c0010ea4:	83 ec 18             	sub    esp,0x18
c0010ea7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010eab:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010eae:	e8 b1 2f 00 00       	call   c0013e64 <Thr::processFromPID(int)>
c0010eb3:	83 c4 10             	add    esp,0x10
c0010eb6:	89 c1                	mov    ecx,eax
c0010eb8:	b8 01 00 00 00       	mov    eax,0x1
c0010ebd:	85 c9                	test   ecx,ecx
c0010ebf:	74 57                	je     c0010f18 <SysGetVGAPtr(regs*)+0x78>
c0010ec1:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0010ec7:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0010ecb:	74 0c                	je     c0010ed9 <SysGetVGAPtr(regs*)+0x39>
c0010ecd:	83 ec 0c             	sub    esp,0xc
c0010ed0:	55                   	push   ebp
c0010ed1:	e8 b7 7c ff ff       	call   c0008b8d <setActiveTerminal(VgaText*)>
c0010ed6:	83 c4 10             	add    esp,0x10
c0010ed9:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0010edc:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010edf:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0010ee4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ee6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010ee9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010eec:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0010ef2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010ef5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0010ef8:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0010efe:	50                   	push   eax
c0010eff:	50                   	push   eax
c0010f00:	68 9f e8 01 c0       	push   0xc001e89f
c0010f05:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f08:	05 a8 0f 00 00       	add    eax,0xfa8
c0010f0d:	50                   	push   eax
c0010f0e:	e8 0d f7 fe ff       	call   c0000620 <strcpy>
c0010f13:	83 c4 10             	add    esp,0x10
c0010f16:	31 c0                	xor    eax,eax
c0010f18:	83 c4 0c             	add    esp,0xc
c0010f1b:	31 d2                	xor    edx,edx
c0010f1d:	5b                   	pop    ebx
c0010f1e:	5e                   	pop    esi
c0010f1f:	5f                   	pop    edi
c0010f20:	5d                   	pop    ebp
c0010f21:	c3                   	ret    

c0010f22 <SysLoadDLL(regs*)>:
c0010f22:	56                   	push   esi
c0010f23:	53                   	push   ebx
c0010f24:	31 d2                	xor    edx,edx
c0010f26:	51                   	push   ecx
c0010f27:	b8 01 00 00 00       	mov    eax,0x1
c0010f2c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f30:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0010f34:	0f 84 8c 00 00 00    	je     c0010fc6 <SysLoadDLL(regs*)+0xa4>
c0010f3a:	83 ec 0c             	sub    esp,0xc
c0010f3d:	68 14 01 00 00       	push   0x114
c0010f42:	e8 16 6f ff ff       	call   c0007e5d <malloc>
c0010f47:	83 c4 0c             	add    esp,0xc
c0010f4a:	89 c3                	mov    ebx,eax
c0010f4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f51:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010f54:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0010f57:	53                   	push   ebx
c0010f58:	e8 05 a2 ff ff       	call   c000b162 <File::File(char const*, Process*)>
c0010f5d:	83 c4 10             	add    esp,0x10
c0010f60:	31 d2                	xor    edx,edx
c0010f62:	b8 02 00 00 00       	mov    eax,0x2
c0010f67:	85 db                	test   ebx,ebx
c0010f69:	74 5b                	je     c0010fc6 <SysLoadDLL(regs*)+0xa4>
c0010f6b:	83 ec 0c             	sub    esp,0xc
c0010f6e:	53                   	push   ebx
c0010f6f:	e8 1c a5 ff ff       	call   c000b490 <File::exists()>
c0010f74:	83 c4 10             	add    esp,0x10
c0010f77:	84 c0                	test   al,al
c0010f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010f7b:	75 11                	jne    c0010f8e <SysLoadDLL(regs*)+0x6c>
c0010f7d:	83 ec 0c             	sub    esp,0xc
c0010f80:	53                   	push   ebx
c0010f81:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010f84:	83 c4 10             	add    esp,0x10
c0010f87:	b8 03 00 00 00       	mov    eax,0x3
c0010f8c:	eb 36                	jmp    c0010fc4 <SysLoadDLL(regs*)+0xa2>
c0010f8e:	83 ec 0c             	sub    esp,0xc
c0010f91:	53                   	push   ebx
c0010f92:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010f95:	58                   	pop    eax
c0010f96:	5a                   	pop    edx
c0010f97:	6a 00                	push   0x0
c0010f99:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0010f9c:	e8 ad 20 00 00       	call   c001304e <Thr::loadDLL(char const*, bool)>
c0010fa1:	83 c4 10             	add    esp,0x10
c0010fa4:	89 c1                	mov    ecx,eax
c0010fa6:	31 d2                	xor    edx,edx
c0010fa8:	b8 04 00 00 00       	mov    eax,0x4
c0010fad:	85 c9                	test   ecx,ecx
c0010faf:	74 15                	je     c0010fc6 <SysLoadDLL(regs*)+0xa4>
c0010fb1:	53                   	push   ebx
c0010fb2:	53                   	push   ebx
c0010fb3:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0010fb9:	51                   	push   ecx
c0010fba:	e8 c0 22 00 00       	call   c001327f <Thr::executeDLL(unsigned long, void*)>
c0010fbf:	83 c4 10             	add    esp,0x10
c0010fc2:	31 c0                	xor    eax,eax
c0010fc4:	31 d2                	xor    edx,edx
c0010fc6:	59                   	pop    ecx
c0010fc7:	5b                   	pop    ebx
c0010fc8:	5e                   	pop    esi
c0010fc9:	c3                   	ret    

c0010fca <SysRead(regs*)>:
c0010fca:	57                   	push   edi
c0010fcb:	56                   	push   esi
c0010fcc:	53                   	push   ebx
c0010fcd:	83 ec 10             	sub    esp,0x10
c0010fd0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010fd4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010fd7:	83 f8 02             	cmp    eax,0x2
c0010fda:	77 10                	ja     c0010fec <SysRead(regs*)+0x22>
c0010fdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fe1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010fe4:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0010fea:	eb 0e                	jmp    c0010ffa <SysRead(regs*)+0x30>
c0010fec:	83 ec 0c             	sub    esp,0xc
c0010fef:	50                   	push   eax
c0010ff0:	e8 4e 88 ff ff       	call   c0009843 <getFromFileDescriptor(int)>
c0010ff5:	83 c4 10             	add    esp,0x10
c0010ff8:	89 c1                	mov    ecx,eax
c0010ffa:	83 c8 ff             	or     eax,0xffffffff
c0010ffd:	85 c9                	test   ecx,ecx
c0010fff:	89 c2                	mov    edx,eax
c0011001:	74 28                	je     c001102b <SysRead(regs*)+0x61>
c0011003:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001100b:	31 ff                	xor    edi,edi
c001100d:	83 ec 0c             	sub    esp,0xc
c0011010:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011012:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011016:	52                   	push   edx
c0011017:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001101a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001101d:	57                   	push   edi
c001101e:	56                   	push   esi
c001101f:	51                   	push   ecx
c0011020:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011023:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011027:	83 c4 20             	add    esp,0x20
c001102a:	99                   	cdq    
c001102b:	83 c4 10             	add    esp,0x10
c001102e:	5b                   	pop    ebx
c001102f:	5e                   	pop    esi
c0011030:	5f                   	pop    edi
c0011031:	c3                   	ret    

c0011032 <SysSbrk(regs*)>:
c0011032:	56                   	push   esi
c0011033:	53                   	push   ebx
c0011034:	50                   	push   eax
c0011035:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001103a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001103e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011041:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0011044:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001104a:	85 db                	test   ebx,ebx
c001104c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001104f:	74 02                	je     c0011053 <SysSbrk(regs*)+0x21>
c0011051:	79 06                	jns    c0011059 <SysSbrk(regs*)+0x27>
c0011053:	89 f0                	mov    eax,esi
c0011055:	31 d2                	xor    edx,edx
c0011057:	eb 2a                	jmp    c0011083 <SysSbrk(regs*)+0x51>
c0011059:	83 c8 ff             	or     eax,0xffffffff
c001105c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011062:	89 c2                	mov    edx,eax
c0011064:	77 1d                	ja     c0011083 <SysSbrk(regs*)+0x51>
c0011066:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001106c:	50                   	push   eax
c001106d:	c1 ea 0c             	shr    edx,0xc
c0011070:	68 07 0c 00 00       	push   0xc07
c0011075:	52                   	push   edx
c0011076:	51                   	push   ecx
c0011077:	e8 b6 90 ff ff       	call   c000a132 <VAS::allocatePages(int, int)>
c001107c:	89 f0                	mov    eax,esi
c001107e:	31 d2                	xor    edx,edx
c0011080:	83 c4 10             	add    esp,0x10
c0011083:	59                   	pop    ecx
c0011084:	5b                   	pop    ebx
c0011085:	5e                   	pop    esi
c0011086:	c3                   	ret    

c0011087 <SysEject(regs*)>:
c0011087:	83 ec 0c             	sub    esp,0xc
c001108a:	83 ca ff             	or     edx,0xffffffff
c001108d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011091:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011094:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011099:	83 e9 41             	sub    ecx,0x41
c001109c:	83 f9 19             	cmp    ecx,0x19
c001109f:	77 18                	ja     c00110b9 <SysEject(regs*)+0x32>
c00110a1:	8b 0c 8d 20 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0e0]
c00110a8:	85 c9                	test   ecx,ecx
c00110aa:	74 0d                	je     c00110b9 <SysEject(regs*)+0x32>
c00110ac:	83 ec 0c             	sub    esp,0xc
c00110af:	51                   	push   ecx
c00110b0:	e8 b5 c1 ff ff       	call   c000d26a <LogicalDisk::eject()>
c00110b5:	83 c4 10             	add    esp,0x10
c00110b8:	99                   	cdq    
c00110b9:	83 c4 0c             	add    esp,0xc
c00110bc:	c3                   	ret    

c00110bd <SysSetCwd(regs*)>:
c00110bd:	83 ec 14             	sub    esp,0x14
c00110c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00110c4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00110c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110cc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00110cf:	e8 5b a4 ff ff       	call   c000b52f <Fs::setcwd(Process*, char*)>
c00110d4:	83 c4 1c             	add    esp,0x1c
c00110d7:	99                   	cdq    
c00110d8:	c3                   	ret    

c00110d9 <SysSetTime(regs*)>:
c00110d9:	55                   	push   ebp
c00110da:	31 c9                	xor    ecx,ecx
c00110dc:	57                   	push   edi
c00110dd:	bd 0c 00 00 00       	mov    ebp,0xc
c00110e2:	56                   	push   esi
c00110e3:	53                   	push   ebx
c00110e4:	31 db                	xor    ebx,ebx
c00110e6:	83 ec 10             	sub    esp,0x10
c00110e9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00110ed:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00110f0:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00110f3:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00110f6:	89 c2                	mov    edx,eax
c00110f8:	66 81 ef 6c 07       	sub    di,0x76c
c00110fd:	83 e2 1f             	and    edx,0x1f
c0011100:	c1 e7 10             	shl    edi,0x10
c0011103:	42                   	inc    edx
c0011104:	c1 e8 05             	shr    eax,0x5
c0011107:	88 d1                	mov    cl,dl
c0011109:	31 d2                	xor    edx,edx
c001110b:	f7 f5                	div    ebp
c001110d:	89 dd                	mov    ebp,ebx
c001110f:	88 d5                	mov    ch,dl
c0011111:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011117:	0f b7 c1             	movzx  eax,cx
c001111a:	31 d2                	xor    edx,edx
c001111c:	09 f8                	or     eax,edi
c001111e:	bf 3c 00 00 00       	mov    edi,0x3c
c0011123:	89 c1                	mov    ecx,eax
c0011125:	89 f0                	mov    eax,esi
c0011127:	f7 f7                	div    edi
c0011129:	c1 e2 10             	shl    edx,0x10
c001112c:	09 d5                	or     ebp,edx
c001112e:	31 d2                	xor    edx,edx
c0011130:	89 eb                	mov    ebx,ebp
c0011132:	f7 f7                	div    edi
c0011134:	bf 10 0e 00 00       	mov    edi,0xe10
c0011139:	88 d7                	mov    bh,dl
c001113b:	89 f0                	mov    eax,esi
c001113d:	31 d2                	xor    edx,edx
c001113f:	f7 f7                	div    edi
c0011141:	bf 18 00 00 00       	mov    edi,0x18
c0011146:	31 d2                	xor    edx,edx
c0011148:	f7 f7                	div    edi
c001114a:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c001114f:	88 d3                	mov    bl,dl
c0011151:	53                   	push   ebx
c0011152:	51                   	push   ecx
c0011153:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011159:	e8 e2 ab ff ff       	call   c000bd40 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001115e:	83 c4 1c             	add    esp,0x1c
c0011161:	83 f0 01             	xor    eax,0x1
c0011164:	5b                   	pop    ebx
c0011165:	0f b6 c0             	movzx  eax,al
c0011168:	5e                   	pop    esi
c0011169:	31 d2                	xor    edx,edx
c001116b:	5f                   	pop    edi
c001116c:	5d                   	pop    ebp
c001116d:	c3                   	ret    

c001116e <sysCallSeekDir(regs*)>:
c001116e:	31 c0                	xor    eax,eax
c0011170:	31 d2                	xor    edx,edx
c0011172:	c3                   	ret    

c0011173 <sysCallTellDir(regs*)>:
c0011173:	31 c0                	xor    eax,eax
c0011175:	31 d2                	xor    edx,edx
c0011177:	c3                   	ret    

c0011178 <sysCallVerify(regs*)>:
c0011178:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001117c:	31 d2                	xor    edx,edx
c001117e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011181:	c3                   	ret    

c0011182 <sysCallGetArgc(regs*)>:
c0011182:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011187:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001118a:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011190:	99                   	cdq    
c0011191:	c3                   	ret    

c0011192 <sysCallTTYName(regs*)>:
c0011192:	b8 01 00 00 00       	mov    eax,0x1
c0011197:	31 d2                	xor    edx,edx
c0011199:	c3                   	ret    

c001119a <sysFormatDisk(regs*)>:
c001119a:	56                   	push   esi
c001119b:	53                   	push   ebx
c001119c:	50                   	push   eax
c001119d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00111a1:	8b 1d b4 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ab4
c00111a7:	eb 28                	jmp    c00111d1 <sysFormatDisk(regs*)+0x37>
c00111a9:	83 ec 0c             	sub    esp,0xc
c00111ac:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00111af:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00111b2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00111b4:	51                   	push   ecx
c00111b5:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00111b8:	51                   	push   ecx
c00111b9:	50                   	push   eax
c00111ba:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c00111c1:	50                   	push   eax
c00111c2:	53                   	push   ebx
c00111c3:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00111c6:	83 c4 20             	add    esp,0x20
c00111c9:	83 f8 08             	cmp    eax,0x8
c00111cc:	75 12                	jne    c00111e0 <sysFormatDisk(regs*)+0x46>
c00111ce:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00111d1:	85 db                	test   ebx,ebx
c00111d3:	75 d4                	jne    c00111a9 <sysFormatDisk(regs*)+0xf>
c00111d5:	59                   	pop    ecx
c00111d6:	b8 03 00 00 00       	mov    eax,0x3
c00111db:	31 d2                	xor    edx,edx
c00111dd:	5b                   	pop    ebx
c00111de:	5e                   	pop    esi
c00111df:	c3                   	ret    
c00111e0:	85 c0                	test   eax,eax
c00111e2:	74 1b                	je     c00111ff <sysFormatDisk(regs*)+0x65>
c00111e4:	83 f8 09             	cmp    eax,0x9
c00111e7:	74 0b                	je     c00111f4 <sysFormatDisk(regs*)+0x5a>
c00111e9:	59                   	pop    ecx
c00111ea:	b8 02 00 00 00       	mov    eax,0x2
c00111ef:	31 d2                	xor    edx,edx
c00111f1:	5b                   	pop    ebx
c00111f2:	5e                   	pop    esi
c00111f3:	c3                   	ret    
c00111f4:	59                   	pop    ecx
c00111f5:	b8 01 00 00 00       	mov    eax,0x1
c00111fa:	31 d2                	xor    edx,edx
c00111fc:	5b                   	pop    ebx
c00111fd:	5e                   	pop    esi
c00111fe:	c3                   	ret    
c00111ff:	59                   	pop    ecx
c0011200:	31 c0                	xor    eax,eax
c0011202:	31 d2                	xor    edx,edx
c0011204:	5b                   	pop    ebx
c0011205:	5e                   	pop    esi
c0011206:	c3                   	ret    

c0011207 <sysSetDiskVolumeLabel(regs*)>:
c0011207:	56                   	push   esi
c0011208:	53                   	push   ebx
c0011209:	53                   	push   ebx
c001120a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001120e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011211:	83 f8 19             	cmp    eax,0x19
c0011214:	77 2d                	ja     c0011243 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0011216:	8b 0c 85 20 2f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd0e0]
c001121d:	85 c9                	test   ecx,ecx
c001121f:	74 22                	je     c0011243 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0011221:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011224:	85 db                	test   ebx,ebx
c0011226:	74 1b                	je     c0011243 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0011228:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c001122e:	85 d2                	test   edx,edx
c0011230:	74 11                	je     c0011243 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0011232:	8b 32                	mov    esi,DWORD PTR [edx]
c0011234:	53                   	push   ebx
c0011235:	50                   	push   eax
c0011236:	51                   	push   ecx
c0011237:	52                   	push   edx
c0011238:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001123b:	83 c4 10             	add    esp,0x10
c001123e:	99                   	cdq    
c001123f:	59                   	pop    ecx
c0011240:	5b                   	pop    ebx
c0011241:	5e                   	pop    esi
c0011242:	c3                   	ret    
c0011243:	59                   	pop    ecx
c0011244:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011249:	ba ff ff ff ff       	mov    edx,0xffffffff
c001124e:	5b                   	pop    ebx
c001124f:	5e                   	pop    esi
c0011250:	c3                   	ret    

c0011251 <sysGetDiskVolumeLabel(regs*)>:
c0011251:	57                   	push   edi
c0011252:	56                   	push   esi
c0011253:	53                   	push   ebx
c0011254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011258:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001125b:	83 fa 19             	cmp    edx,0x19
c001125e:	77 38                	ja     c0011298 <sysGetDiskVolumeLabel(regs*)+0x47>
c0011260:	8b 0c 95 20 2f 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd0e0]
c0011267:	85 c9                	test   ecx,ecx
c0011269:	74 2d                	je     c0011298 <sysGetDiskVolumeLabel(regs*)+0x47>
c001126b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001126e:	85 db                	test   ebx,ebx
c0011270:	74 26                	je     c0011298 <sysGetDiskVolumeLabel(regs*)+0x47>
c0011272:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011275:	85 f6                	test   esi,esi
c0011277:	74 1f                	je     c0011298 <sysGetDiskVolumeLabel(regs*)+0x47>
c0011279:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c001127f:	85 c0                	test   eax,eax
c0011281:	74 15                	je     c0011298 <sysGetDiskVolumeLabel(regs*)+0x47>
c0011283:	83 ec 0c             	sub    esp,0xc
c0011286:	8b 38                	mov    edi,DWORD PTR [eax]
c0011288:	56                   	push   esi
c0011289:	53                   	push   ebx
c001128a:	52                   	push   edx
c001128b:	51                   	push   ecx
c001128c:	50                   	push   eax
c001128d:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0011290:	83 c4 20             	add    esp,0x20
c0011293:	99                   	cdq    
c0011294:	5b                   	pop    ebx
c0011295:	5e                   	pop    esi
c0011296:	5f                   	pop    edi
c0011297:	c3                   	ret    
c0011298:	5b                   	pop    ebx
c0011299:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001129e:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112a3:	5e                   	pop    esi
c00112a4:	5f                   	pop    edi
c00112a5:	c3                   	ret    

c00112a6 <sysShutdown(regs*)>:
c00112a6:	83 ec 0c             	sub    esp,0xc
c00112a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112ad:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00112b0:	85 c0                	test   eax,eax
c00112b2:	74 18                	je     c00112cc <sysShutdown(regs*)+0x26>
c00112b4:	83 f8 01             	cmp    eax,0x1
c00112b7:	74 38                	je     c00112f1 <sysShutdown(regs*)+0x4b>
c00112b9:	83 f8 02             	cmp    eax,0x2
c00112bc:	74 24                	je     c00112e2 <sysShutdown(regs*)+0x3c>
c00112be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112c3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112c8:	83 c4 0c             	add    esp,0xc
c00112cb:	c3                   	ret    
c00112cc:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c00112d1:	8b 10                	mov    edx,DWORD PTR [eax]
c00112d3:	6a 00                	push   0x0
c00112d5:	6a 00                	push   0x0
c00112d7:	6a 00                	push   0x0
c00112d9:	50                   	push   eax
c00112da:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00112dd:	83 c4 10             	add    esp,0x10
c00112e0:	eb dc                	jmp    c00112be <sysShutdown(regs*)+0x18>
c00112e2:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c00112e7:	8b 10                	mov    edx,DWORD PTR [eax]
c00112e9:	6a 00                	push   0x0
c00112eb:	6a 00                	push   0x0
c00112ed:	6a 01                	push   0x1
c00112ef:	eb e8                	jmp    c00112d9 <sysShutdown(regs*)+0x33>
c00112f1:	a1 a0 2f 02 c0       	mov    eax,ds:0xc0022fa0
c00112f6:	85 c0                	test   eax,eax
c00112f8:	74 02                	je     c00112fc <sysShutdown(regs*)+0x56>
c00112fa:	ff d0                	call   eax
c00112fc:	31 c0                	xor    eax,eax
c00112fe:	31 d2                	xor    edx,edx
c0011300:	83 c4 0c             	add    esp,0xc
c0011303:	c3                   	ret    

c0011304 <sysCallRealpath(regs*)>:
c0011304:	83 ec 0c             	sub    esp,0xc
c0011307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001130b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001130e:	85 d2                	test   edx,edx
c0011310:	74 07                	je     c0011319 <sysCallRealpath(regs*)+0x15>
c0011312:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011315:	85 c0                	test   eax,eax
c0011317:	75 0b                	jne    c0011324 <sysCallRealpath(regs*)+0x20>
c0011319:	b8 01 00 00 00       	mov    eax,0x1
c001131e:	31 d2                	xor    edx,edx
c0011320:	83 c4 0c             	add    esp,0xc
c0011323:	c3                   	ret    
c0011324:	51                   	push   ecx
c0011325:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001132b:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001132e:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011334:	51                   	push   ecx
c0011335:	52                   	push   edx
c0011336:	50                   	push   eax
c0011337:	e8 7c 9c ff ff       	call   c000afb8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001133c:	83 c4 10             	add    esp,0x10
c001133f:	31 c0                	xor    eax,eax
c0011341:	31 d2                	xor    edx,edx
c0011343:	83 c4 0c             	add    esp,0xc
c0011346:	c3                   	ret    

c0011347 <sysCallReadDir(regs*)>:
c0011347:	53                   	push   ebx
c0011348:	83 ec 18             	sub    esp,0x18
c001134b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001134f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011352:	83 f8 02             	cmp    eax,0x2
c0011355:	76 61                	jbe    c00113b8 <sysCallReadDir(regs*)+0x71>
c0011357:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001135e:	77 49                	ja     c00113a9 <sysCallReadDir(regs*)+0x62>
c0011360:	83 ec 0c             	sub    esp,0xc
c0011363:	50                   	push   eax
c0011364:	e8 da 84 ff ff       	call   c0009843 <getFromFileDescriptor(int)>
c0011369:	83 c4 10             	add    esp,0x10
c001136c:	85 c0                	test   eax,eax
c001136e:	74 39                	je     c00113a9 <sysCallReadDir(regs*)+0x62>
c0011370:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011378:	83 ec 0c             	sub    esp,0xc
c001137b:	8b 10                	mov    edx,DWORD PTR [eax]
c001137d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011381:	51                   	push   ecx
c0011382:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011385:	51                   	push   ecx
c0011386:	6a 00                	push   0x0
c0011388:	68 10 01 00 00       	push   0x110
c001138d:	50                   	push   eax
c001138e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011391:	83 c4 20             	add    esp,0x20
c0011394:	85 c0                	test   eax,eax
c0011396:	74 29                	je     c00113c1 <sysCallReadDir(regs*)+0x7a>
c0011398:	83 f8 07             	cmp    eax,0x7
c001139b:	74 1b                	je     c00113b8 <sysCallReadDir(regs*)+0x71>
c001139d:	b8 02 00 00 00       	mov    eax,0x2
c00113a2:	31 d2                	xor    edx,edx
c00113a4:	83 c4 18             	add    esp,0x18
c00113a7:	5b                   	pop    ebx
c00113a8:	c3                   	ret    
c00113a9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113ae:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113b3:	83 c4 18             	add    esp,0x18
c00113b6:	5b                   	pop    ebx
c00113b7:	c3                   	ret    
c00113b8:	b8 01 00 00 00       	mov    eax,0x1
c00113bd:	31 d2                	xor    edx,edx
c00113bf:	eb e3                	jmp    c00113a4 <sysCallReadDir(regs*)+0x5d>
c00113c1:	31 c0                	xor    eax,eax
c00113c3:	31 d2                	xor    edx,edx
c00113c5:	eb dd                	jmp    c00113a4 <sysCallReadDir(regs*)+0x5d>

c00113c7 <sysCallIsATTY(regs*)>:
c00113c7:	83 ec 0c             	sub    esp,0xc
c00113ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113ce:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00113d1:	83 f8 02             	cmp    eax,0x2
c00113d4:	76 07                	jbe    c00113dd <sysCallIsATTY(regs*)+0x16>
c00113d6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00113db:	75 28                	jne    c0011405 <sysCallIsATTY(regs*)+0x3e>
c00113dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113e2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00113e5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00113eb:	85 c0                	test   eax,eax
c00113ed:	74 26                	je     c0011415 <sysCallIsATTY(regs*)+0x4e>
c00113ef:	83 ec 0c             	sub    esp,0xc
c00113f2:	8b 10                	mov    edx,DWORD PTR [eax]
c00113f4:	50                   	push   eax
c00113f5:	ff 12                	call   DWORD PTR [edx]
c00113f7:	31 d2                	xor    edx,edx
c00113f9:	25 ff 00 00 00       	and    eax,0xff
c00113fe:	83 c4 10             	add    esp,0x10
c0011401:	83 c4 0c             	add    esp,0xc
c0011404:	c3                   	ret    
c0011405:	83 ec 0c             	sub    esp,0xc
c0011408:	50                   	push   eax
c0011409:	e8 35 84 ff ff       	call   c0009843 <getFromFileDescriptor(int)>
c001140e:	83 c4 10             	add    esp,0x10
c0011411:	85 c0                	test   eax,eax
c0011413:	75 da                	jne    c00113ef <sysCallIsATTY(regs*)+0x28>
c0011415:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001141a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001141f:	83 c4 0c             	add    esp,0xc
c0011422:	c3                   	ret    

c0011423 <sysCallSeek(regs*)>:
c0011423:	53                   	push   ebx
c0011424:	83 ec 08             	sub    esp,0x8
c0011427:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001142b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001142e:	8d 50 fd             	lea    edx,[eax-0x3]
c0011431:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011437:	77 34                	ja     c001146d <sysCallSeek(regs*)+0x4a>
c0011439:	83 ec 0c             	sub    esp,0xc
c001143c:	50                   	push   eax
c001143d:	e8 01 84 ff ff       	call   c0009843 <getFromFileDescriptor(int)>
c0011442:	83 c4 0c             	add    esp,0xc
c0011445:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011448:	31 db                	xor    ebx,ebx
c001144a:	53                   	push   ebx
c001144b:	51                   	push   ecx
c001144c:	50                   	push   eax
c001144d:	e8 8e 9e ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c0011452:	83 c4 10             	add    esp,0x10
c0011455:	85 c0                	test   eax,eax
c0011457:	0f 95 c0             	setne  al
c001145a:	31 d2                	xor    edx,edx
c001145c:	25 ff 00 00 00       	and    eax,0xff
c0011461:	f7 d8                	neg    eax
c0011463:	83 d2 00             	adc    edx,0x0
c0011466:	83 c4 08             	add    esp,0x8
c0011469:	f7 da                	neg    edx
c001146b:	5b                   	pop    ebx
c001146c:	c3                   	ret    
c001146d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011472:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011477:	83 c4 08             	add    esp,0x8
c001147a:	5b                   	pop    ebx
c001147b:	c3                   	ret    

c001147c <sysCallTell(regs*)>:
c001147c:	53                   	push   ebx
c001147d:	83 ec 08             	sub    esp,0x8
c0011480:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011484:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011487:	83 f8 02             	cmp    eax,0x2
c001148a:	76 50                	jbe    c00114dc <sysCallTell(regs*)+0x60>
c001148c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011491:	76 19                	jbe    c00114ac <sysCallTell(regs*)+0x30>
c0011493:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011496:	31 d2                	xor    edx,edx
c0011498:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001149e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114a5:	31 c0                	xor    eax,eax
c00114a7:	83 c4 08             	add    esp,0x8
c00114aa:	5b                   	pop    ebx
c00114ab:	c3                   	ret    
c00114ac:	83 ec 0c             	sub    esp,0xc
c00114af:	50                   	push   eax
c00114b0:	e8 8e 83 ff ff       	call   c0009843 <getFromFileDescriptor(int)>
c00114b5:	5a                   	pop    edx
c00114b6:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00114b9:	59                   	pop    ecx
c00114ba:	53                   	push   ebx
c00114bb:	50                   	push   eax
c00114bc:	e8 75 9e ff ff       	call   c000b336 <File::tell(unsigned long long*)>
c00114c1:	83 c4 10             	add    esp,0x10
c00114c4:	85 c0                	test   eax,eax
c00114c6:	0f 95 c0             	setne  al
c00114c9:	31 d2                	xor    edx,edx
c00114cb:	25 ff 00 00 00       	and    eax,0xff
c00114d0:	f7 d8                	neg    eax
c00114d2:	83 d2 00             	adc    edx,0x0
c00114d5:	83 c4 08             	add    esp,0x8
c00114d8:	f7 da                	neg    edx
c00114da:	5b                   	pop    ebx
c00114db:	c3                   	ret    
c00114dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114e1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114e6:	83 c4 08             	add    esp,0x8
c00114e9:	5b                   	pop    ebx
c00114ea:	c3                   	ret    

c00114eb <sysCallSize(regs*)>:
c00114eb:	53                   	push   ebx
c00114ec:	83 ec 18             	sub    esp,0x18
c00114ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00114f3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00114f6:	83 f8 02             	cmp    eax,0x2
c00114f9:	76 56                	jbe    c0011551 <sysCallSize(regs*)+0x66>
c00114fb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011500:	76 19                	jbe    c001151b <sysCallSize(regs*)+0x30>
c0011502:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011505:	31 d2                	xor    edx,edx
c0011507:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001150d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011514:	31 c0                	xor    eax,eax
c0011516:	83 c4 18             	add    esp,0x18
c0011519:	5b                   	pop    ebx
c001151a:	c3                   	ret    
c001151b:	83 ec 0c             	sub    esp,0xc
c001151e:	50                   	push   eax
c001151f:	e8 1f 83 ff ff       	call   c0009843 <getFromFileDescriptor(int)>
c0011524:	83 c4 0c             	add    esp,0xc
c0011527:	8d 54 24 13          	lea    edx,[esp+0x13]
c001152b:	52                   	push   edx
c001152c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001152f:	52                   	push   edx
c0011530:	50                   	push   eax
c0011531:	e8 98 9f ff ff       	call   c000b4ce <File::stat(unsigned long long*, bool*)>
c0011536:	83 c4 10             	add    esp,0x10
c0011539:	85 c0                	test   eax,eax
c001153b:	0f 95 c0             	setne  al
c001153e:	31 d2                	xor    edx,edx
c0011540:	25 ff 00 00 00       	and    eax,0xff
c0011545:	f7 d8                	neg    eax
c0011547:	83 d2 00             	adc    edx,0x0
c001154a:	83 c4 18             	add    esp,0x18
c001154d:	f7 da                	neg    edx
c001154f:	5b                   	pop    ebx
c0011550:	c3                   	ret    
c0011551:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011556:	ba ff ff ff ff       	mov    edx,0xffffffff
c001155b:	83 c4 18             	add    esp,0x18
c001155e:	5b                   	pop    ebx
c001155f:	c3                   	ret    

c0011560 <sysCallSizeFromFilename(regs*)>:
c0011560:	57                   	push   edi
c0011561:	56                   	push   esi
c0011562:	53                   	push   ebx
c0011563:	83 ec 20             	sub    esp,0x20
c0011566:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001156a:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001156d:	83 fb 02             	cmp    ebx,0x2
c0011570:	0f 86 8c 00 00 00    	jbe    c0011602 <sysCallSizeFromFilename(regs*)+0xa2>
c0011576:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001157c:	76 1b                	jbe    c0011599 <sysCallSizeFromFilename(regs*)+0x39>
c001157e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011581:	31 d2                	xor    edx,edx
c0011583:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011589:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011590:	83 c4 20             	add    esp,0x20
c0011593:	31 c0                	xor    eax,eax
c0011595:	5b                   	pop    ebx
c0011596:	5e                   	pop    esi
c0011597:	5f                   	pop    edi
c0011598:	c3                   	ret    
c0011599:	83 ec 0c             	sub    esp,0xc
c001159c:	68 14 01 00 00       	push   0x114
c00115a1:	e8 b7 68 ff ff       	call   c0007e5d <malloc>
c00115a6:	83 c4 0c             	add    esp,0xc
c00115a9:	89 c7                	mov    edi,eax
c00115ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115b0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00115b3:	50                   	push   eax
c00115b4:	53                   	push   ebx
c00115b5:	57                   	push   edi
c00115b6:	e8 a7 9b ff ff       	call   c000b162 <File::File(char const*, Process*)>
c00115bb:	83 c4 0c             	add    esp,0xc
c00115be:	8d 44 24 23          	lea    eax,[esp+0x23]
c00115c2:	50                   	push   eax
c00115c3:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c00115c6:	52                   	push   edx
c00115c7:	57                   	push   edi
c00115c8:	e8 01 9f ff ff       	call   c000b4ce <File::stat(unsigned long long*, bool*)>
c00115cd:	83 c4 10             	add    esp,0x10
c00115d0:	85 ff                	test   edi,edi
c00115d2:	74 14                	je     c00115e8 <sysCallSizeFromFilename(regs*)+0x88>
c00115d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00115d8:	8b 17                	mov    edx,DWORD PTR [edi]
c00115da:	83 ec 0c             	sub    esp,0xc
c00115dd:	57                   	push   edi
c00115de:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00115e1:	83 c4 10             	add    esp,0x10
c00115e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115e8:	85 c0                	test   eax,eax
c00115ea:	0f 95 c0             	setne  al
c00115ed:	31 d2                	xor    edx,edx
c00115ef:	25 ff 00 00 00       	and    eax,0xff
c00115f4:	f7 d8                	neg    eax
c00115f6:	83 d2 00             	adc    edx,0x0
c00115f9:	83 c4 20             	add    esp,0x20
c00115fc:	f7 da                	neg    edx
c00115fe:	5b                   	pop    ebx
c00115ff:	5e                   	pop    esi
c0011600:	5f                   	pop    edi
c0011601:	c3                   	ret    
c0011602:	83 c4 20             	add    esp,0x20
c0011605:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001160a:	5b                   	pop    ebx
c001160b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011610:	5e                   	pop    esi
c0011611:	5f                   	pop    edi
c0011612:	c3                   	ret    

c0011613 <sysCallClose(regs*)>:
c0011613:	53                   	push   ebx
c0011614:	83 ec 08             	sub    esp,0x8
c0011617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001161b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001161e:	83 f8 02             	cmp    eax,0x2
c0011621:	76 41                	jbe    c0011664 <sysCallClose(regs*)+0x51>
c0011623:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011629:	83 fa 01             	cmp    edx,0x1
c001162c:	76 2d                	jbe    c001165b <sysCallClose(regs*)+0x48>
c001162e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011633:	77 2f                	ja     c0011664 <sysCallClose(regs*)+0x51>
c0011635:	83 ec 0c             	sub    esp,0xc
c0011638:	50                   	push   eax
c0011639:	e8 05 82 ff ff       	call   c0009843 <getFromFileDescriptor(int)>
c001163e:	89 c3                	mov    ebx,eax
c0011640:	89 04 24             	mov    DWORD PTR [esp],eax
c0011643:	e8 38 9c ff ff       	call   c000b280 <File::close()>
c0011648:	83 c4 10             	add    esp,0x10
c001164b:	85 db                	test   ebx,ebx
c001164d:	74 0c                	je     c001165b <sysCallClose(regs*)+0x48>
c001164f:	83 ec 0c             	sub    esp,0xc
c0011652:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011654:	53                   	push   ebx
c0011655:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011658:	83 c4 10             	add    esp,0x10
c001165b:	31 c0                	xor    eax,eax
c001165d:	31 d2                	xor    edx,edx
c001165f:	83 c4 08             	add    esp,0x8
c0011662:	5b                   	pop    ebx
c0011663:	c3                   	ret    
c0011664:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011669:	ba ff ff ff ff       	mov    edx,0xffffffff
c001166e:	83 c4 08             	add    esp,0x8
c0011671:	5b                   	pop    ebx
c0011672:	c3                   	ret    

c0011673 <sysCallOpenDir(regs*)>:
c0011673:	56                   	push   esi
c0011674:	53                   	push   ebx
c0011675:	50                   	push   eax
c0011676:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001167a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001167d:	85 c0                	test   eax,eax
c001167f:	74 5b                	je     c00116dc <sysCallOpenDir(regs*)+0x69>
c0011681:	83 ec 0c             	sub    esp,0xc
c0011684:	68 14 01 00 00       	push   0x114
c0011689:	e8 cf 67 ff ff       	call   c0007e5d <malloc>
c001168e:	83 c4 0c             	add    esp,0xc
c0011691:	89 c6                	mov    esi,eax
c0011693:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011698:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001169b:	50                   	push   eax
c001169c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001169f:	50                   	push   eax
c00116a0:	56                   	push   esi
c00116a1:	e8 e6 9f ff ff       	call   c000b68c <Directory::Directory(char const*, Process*)>
c00116a6:	83 c4 10             	add    esp,0x10
c00116a9:	85 f6                	test   esi,esi
c00116ab:	74 2f                	je     c00116dc <sysCallOpenDir(regs*)+0x69>
c00116ad:	83 ec 0c             	sub    esp,0xc
c00116b0:	56                   	push   esi
c00116b1:	e8 96 a0 ff ff       	call   c000b74c <Directory::open()>
c00116b6:	83 c4 10             	add    esp,0x10
c00116b9:	85 c0                	test   eax,eax
c00116bb:	75 1f                	jne    c00116dc <sysCallOpenDir(regs*)+0x69>
c00116bd:	83 ec 0c             	sub    esp,0xc
c00116c0:	56                   	push   esi
c00116c1:	e8 88 7e ff ff       	call   c000954e <UnixFile::getFileDescriptor()>
c00116c6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00116c9:	83 c4 10             	add    esp,0x10
c00116cc:	89 02                	mov    DWORD PTR [edx],eax
c00116ce:	c1 f8 1f             	sar    eax,0x1f
c00116d1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00116d4:	31 c0                	xor    eax,eax
c00116d6:	59                   	pop    ecx
c00116d7:	31 d2                	xor    edx,edx
c00116d9:	5b                   	pop    ebx
c00116da:	5e                   	pop    esi
c00116db:	c3                   	ret    
c00116dc:	59                   	pop    ecx
c00116dd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116e2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116e7:	5b                   	pop    ebx
c00116e8:	5e                   	pop    esi
c00116e9:	c3                   	ret    

c00116ea <sysCallCloseDir(regs*)>:
c00116ea:	53                   	push   ebx
c00116eb:	83 ec 08             	sub    esp,0x8
c00116ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116f2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00116f5:	8d 50 fd             	lea    edx,[eax-0x3]
c00116f8:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00116fe:	77 2f                	ja     c001172f <sysCallCloseDir(regs*)+0x45>
c0011700:	83 ec 0c             	sub    esp,0xc
c0011703:	50                   	push   eax
c0011704:	e8 3a 81 ff ff       	call   c0009843 <getFromFileDescriptor(int)>
c0011709:	89 c3                	mov    ebx,eax
c001170b:	89 04 24             	mov    DWORD PTR [esp],eax
c001170e:	e8 95 a0 ff ff       	call   c000b7a8 <Directory::close()>
c0011713:	83 c4 10             	add    esp,0x10
c0011716:	85 db                	test   ebx,ebx
c0011718:	74 0c                	je     c0011726 <sysCallCloseDir(regs*)+0x3c>
c001171a:	83 ec 0c             	sub    esp,0xc
c001171d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001171f:	53                   	push   ebx
c0011720:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011723:	83 c4 10             	add    esp,0x10
c0011726:	31 c0                	xor    eax,eax
c0011728:	31 d2                	xor    edx,edx
c001172a:	83 c4 08             	add    esp,0x8
c001172d:	5b                   	pop    ebx
c001172e:	c3                   	ret    
c001172f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011734:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011739:	83 c4 08             	add    esp,0x8
c001173c:	5b                   	pop    ebx
c001173d:	c3                   	ret    

c001173e <sysCallMakeDir(regs*)>:
c001173e:	56                   	push   esi
c001173f:	53                   	push   ebx
c0011740:	83 ec 10             	sub    esp,0x10
c0011743:	68 14 01 00 00       	push   0x114
c0011748:	e8 10 67 ff ff       	call   c0007e5d <malloc>
c001174d:	83 c4 0c             	add    esp,0xc
c0011750:	89 c3                	mov    ebx,eax
c0011752:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011757:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c001175a:	56                   	push   esi
c001175b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001175f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011762:	50                   	push   eax
c0011763:	53                   	push   ebx
c0011764:	e8 23 9f ff ff       	call   c000b68c <Directory::Directory(char const*, Process*)>
c0011769:	83 c4 10             	add    esp,0x10
c001176c:	85 db                	test   ebx,ebx
c001176e:	74 32                	je     c00117a2 <sysCallMakeDir(regs*)+0x64>
c0011770:	83 ec 0c             	sub    esp,0xc
c0011773:	53                   	push   ebx
c0011774:	e8 b3 a1 ff ff       	call   c000b92c <Directory::create()>
c0011779:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001177c:	89 c6                	mov    esi,eax
c001177e:	e8 25 a0 ff ff       	call   c000b7a8 <Directory::close()>
c0011783:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011785:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011788:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001178b:	83 c4 10             	add    esp,0x10
c001178e:	31 c0                	xor    eax,eax
c0011790:	59                   	pop    ecx
c0011791:	85 f6                	test   esi,esi
c0011793:	5b                   	pop    ebx
c0011794:	0f 95 c0             	setne  al
c0011797:	5e                   	pop    esi
c0011798:	31 d2                	xor    edx,edx
c001179a:	f7 d8                	neg    eax
c001179c:	83 d2 00             	adc    edx,0x0
c001179f:	f7 da                	neg    edx
c00117a1:	c3                   	ret    
c00117a2:	59                   	pop    ecx
c00117a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117a8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117ad:	5b                   	pop    ebx
c00117ae:	5e                   	pop    esi
c00117af:	c3                   	ret    

c00117b0 <sysCallWait(regs*)>:
c00117b0:	83 ec 10             	sub    esp,0x10
c00117b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00117b7:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00117ba:	52                   	push   edx
c00117bb:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00117be:	51                   	push   ecx
c00117bf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00117c2:	50                   	push   eax
c00117c3:	e8 a4 24 00 00       	call   c0013c6c <waitTask(int, int*, int)>
c00117c8:	83 c4 1c             	add    esp,0x1c
c00117cb:	99                   	cdq    
c00117cc:	c3                   	ret    

c00117cd <sysCallNotImpl(regs*)>:
c00117cd:	83 ec 18             	sub    esp,0x18
c00117d0:	68 a9 e8 01 c0       	push   0xc001e8a9
c00117d5:	e8 11 ef ff ff       	call   c00106eb <Krnl::panic(char const*)>
c00117da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117df:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117e4:	83 c4 1c             	add    esp,0x1c
c00117e7:	c3                   	ret    

c00117e8 <sysPanic(regs*)>:
c00117e8:	83 ec 18             	sub    esp,0x18
c00117eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117ef:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00117f2:	50                   	push   eax
c00117f3:	e8 f3 ee ff ff       	call   c00106eb <Krnl::panic(char const*)>
c00117f8:	b8 01 00 00 00       	mov    eax,0x1
c00117fd:	31 d2                	xor    edx,edx
c00117ff:	83 c4 1c             	add    esp,0x1c
c0011802:	c3                   	ret    

c0011803 <sysCallRmdir(regs*)>:
c0011803:	56                   	push   esi
c0011804:	53                   	push   ebx
c0011805:	83 ec 20             	sub    esp,0x20
c0011808:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001180c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001180f:	68 14 01 00 00       	push   0x114
c0011814:	e8 44 66 ff ff       	call   c0007e5d <malloc>
c0011819:	83 c4 0c             	add    esp,0xc
c001181c:	89 c3                	mov    ebx,eax
c001181e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011823:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011826:	50                   	push   eax
c0011827:	56                   	push   esi
c0011828:	53                   	push   ebx
c0011829:	e8 34 99 ff ff       	call   c000b162 <File::File(char const*, Process*)>
c001182e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011831:	e8 64 9b ff ff       	call   c000b39a <File::unlink()>
c0011836:	83 c4 10             	add    esp,0x10
c0011839:	85 db                	test   ebx,ebx
c001183b:	74 14                	je     c0011851 <sysCallRmdir(regs*)+0x4e>
c001183d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011841:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011843:	83 ec 0c             	sub    esp,0xc
c0011846:	53                   	push   ebx
c0011847:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001184a:	83 c4 10             	add    esp,0x10
c001184d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011851:	85 c0                	test   eax,eax
c0011853:	0f 95 c0             	setne  al
c0011856:	31 d2                	xor    edx,edx
c0011858:	25 ff 00 00 00       	and    eax,0xff
c001185d:	f7 d8                	neg    eax
c001185f:	83 d2 00             	adc    edx,0x0
c0011862:	83 c4 14             	add    esp,0x14
c0011865:	f7 da                	neg    edx
c0011867:	5b                   	pop    ebx
c0011868:	5e                   	pop    esi
c0011869:	c3                   	ret    

c001186a <sysCallUnlink(regs*)>:
c001186a:	56                   	push   esi
c001186b:	53                   	push   ebx
c001186c:	83 ec 20             	sub    esp,0x20
c001186f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011873:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011876:	68 14 01 00 00       	push   0x114
c001187b:	e8 dd 65 ff ff       	call   c0007e5d <malloc>
c0011880:	83 c4 0c             	add    esp,0xc
c0011883:	89 c3                	mov    ebx,eax
c0011885:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001188a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001188d:	50                   	push   eax
c001188e:	56                   	push   esi
c001188f:	53                   	push   ebx
c0011890:	e8 cd 98 ff ff       	call   c000b162 <File::File(char const*, Process*)>
c0011895:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011898:	e8 fd 9a ff ff       	call   c000b39a <File::unlink()>
c001189d:	83 c4 10             	add    esp,0x10
c00118a0:	85 db                	test   ebx,ebx
c00118a2:	74 14                	je     c00118b8 <sysCallUnlink(regs*)+0x4e>
c00118a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00118a8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00118aa:	83 ec 0c             	sub    esp,0xc
c00118ad:	53                   	push   ebx
c00118ae:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00118b1:	83 c4 10             	add    esp,0x10
c00118b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118b8:	85 c0                	test   eax,eax
c00118ba:	0f 95 c0             	setne  al
c00118bd:	31 d2                	xor    edx,edx
c00118bf:	25 ff 00 00 00       	and    eax,0xff
c00118c4:	f7 d8                	neg    eax
c00118c6:	83 d2 00             	adc    edx,0x0
c00118c9:	83 c4 14             	add    esp,0x14
c00118cc:	f7 da                	neg    edx
c00118ce:	5b                   	pop    ebx
c00118cf:	5e                   	pop    esi
c00118d0:	c3                   	ret    

c00118d1 <sysCallGetArgv(regs*)>:
c00118d1:	83 ec 0c             	sub    esp,0xc
c00118d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00118d8:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00118db:	85 c0                	test   eax,eax
c00118dd:	78 2c                	js     c001190b <sysCallGetArgv(regs*)+0x3a>
c00118df:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00118e5:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00118e8:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00118ee:	7d 1b                	jge    c001190b <sysCallGetArgv(regs*)+0x3a>
c00118f0:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00118f7:	85 c0                	test   eax,eax
c00118f9:	74 18                	je     c0011913 <sysCallGetArgv(regs*)+0x42>
c00118fb:	83 ec 08             	sub    esp,0x8
c00118fe:	50                   	push   eax
c00118ff:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011902:	50                   	push   eax
c0011903:	e8 18 ed fe ff       	call   c0000620 <strcpy>
c0011908:	83 c4 10             	add    esp,0x10
c001190b:	31 c0                	xor    eax,eax
c001190d:	31 d2                	xor    edx,edx
c001190f:	83 c4 0c             	add    esp,0xc
c0011912:	c3                   	ret    
c0011913:	b8 01 00 00 00       	mov    eax,0x1
c0011918:	31 d2                	xor    edx,edx
c001191a:	83 c4 0c             	add    esp,0xc
c001191d:	c3                   	ret    

c001191e <sysCallUSleep(regs*)>:
c001191e:	83 ec 1c             	sub    esp,0x1c
c0011921:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011925:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011928:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001192b:	6a 00                	push   0x0
c001192d:	6a 64                	push   0x64
c001192f:	52                   	push   edx
c0011930:	50                   	push   eax
c0011931:	e8 fa a8 00 00       	call   c001c230 <__udivdi3>
c0011936:	83 c4 14             	add    esp,0x14
c0011939:	50                   	push   eax
c001193a:	e8 01 24 00 00       	call   c0013d40 <milliTenthSleep(unsigned int)>
c001193f:	31 c0                	xor    eax,eax
c0011941:	31 d2                	xor    edx,edx
c0011943:	83 c4 1c             	add    esp,0x1c
c0011946:	c3                   	ret    

c0011947 <sysCallSpawn(regs*)>:
c0011947:	56                   	push   esi
c0011948:	53                   	push   ebx
c0011949:	50                   	push   eax
c001194a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001194e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011951:	85 c0                	test   eax,eax
c0011953:	75 08                	jne    c001195d <sysCallSpawn(regs*)+0x16>
c0011955:	59                   	pop    ecx
c0011956:	31 c0                	xor    eax,eax
c0011958:	31 d2                	xor    edx,edx
c001195a:	5b                   	pop    ebx
c001195b:	5e                   	pop    esi
c001195c:	c3                   	ret    
c001195d:	83 ec 0c             	sub    esp,0xc
c0011960:	68 1f 07 00 00       	push   0x71f
c0011965:	e8 f3 64 ff ff       	call   c0007e5d <malloc>
c001196a:	83 c4 10             	add    esp,0x10
c001196d:	89 c6                	mov    esi,eax
c001196f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011972:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011975:	85 c0                	test   eax,eax
c0011977:	75 33                	jne    c00119ac <sysCallSpawn(regs*)+0x65>
c0011979:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001197e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011981:	52                   	push   edx
c0011982:	50                   	push   eax
c0011983:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0011986:	53                   	push   ebx
c0011987:	56                   	push   esi
c0011988:	e8 97 1a 00 00       	call   c0013424 <Process::Process(char const*, Process*, char**)>
c001198d:	83 c4 10             	add    esp,0x10
c0011990:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011997:	75 bc                	jne    c0011955 <sysCallSpawn(regs*)+0xe>
c0011999:	83 ec 0c             	sub    esp,0xc
c001199c:	56                   	push   esi
c001199d:	e8 76 1f 00 00       	call   c0013918 <Process::createUserThread()>
c00119a2:	8b 06                	mov    eax,DWORD PTR [esi]
c00119a4:	83 c4 10             	add    esp,0x10
c00119a7:	99                   	cdq    
c00119a8:	59                   	pop    ecx
c00119a9:	5b                   	pop    ebx
c00119aa:	5e                   	pop    esi
c00119ab:	c3                   	ret    
c00119ac:	31 c0                	xor    eax,eax
c00119ae:	eb d1                	jmp    c0011981 <sysCallSpawn(regs*)+0x3a>

c00119b0 <sysCallGetEnv(regs*)>:
c00119b0:	57                   	push   edi
c00119b1:	56                   	push   esi
c00119b2:	53                   	push   ebx
c00119b3:	83 ec 1c             	sub    esp,0x1c
c00119b6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00119ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119bf:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00119c2:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00119c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119c8:	50                   	push   eax
c00119c9:	e8 69 ec ff ff       	call   c0010637 <Krnl::getProcessTotalEnvCount(Process*)>
c00119ce:	83 c4 10             	add    esp,0x10
c00119d1:	39 c7                	cmp    edi,eax
c00119d3:	7c 14                	jl     c00119e9 <sysCallGetEnv(regs*)+0x39>
c00119d5:	85 f6                	test   esi,esi
c00119d7:	75 0b                	jne    c00119e4 <sysCallGetEnv(regs*)+0x34>
c00119d9:	83 c4 10             	add    esp,0x10
c00119dc:	31 c0                	xor    eax,eax
c00119de:	5b                   	pop    ebx
c00119df:	31 d2                	xor    edx,edx
c00119e1:	5e                   	pop    esi
c00119e2:	5f                   	pop    edi
c00119e3:	c3                   	ret    
c00119e4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00119e7:	eb f0                	jmp    c00119d9 <sysCallGetEnv(regs*)+0x29>
c00119e9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00119ed:	52                   	push   edx
c00119ee:	57                   	push   edi
c00119ef:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00119f5:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c00119f8:	51                   	push   ecx
c00119f9:	50                   	push   eax
c00119fa:	e8 58 ec ff ff       	call   c0010657 <Krnl::getProcessEnvPair(Process*, int)>
c00119ff:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011a02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011a06:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011a0a:	83 c4 0c             	add    esp,0xc
c0011a0d:	85 db                	test   ebx,ebx
c0011a0f:	75 23                	jne    c0011a34 <sysCallGetEnv(regs*)+0x84>
c0011a11:	83 ec 0c             	sub    esp,0xc
c0011a14:	50                   	push   eax
c0011a15:	e8 46 eb fe ff       	call   c0000560 <strlen>
c0011a1a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011a1d:	89 c3                	mov    ebx,eax
c0011a1f:	e8 3c eb fe ff       	call   c0000560 <strlen>
c0011a24:	31 d2                	xor    edx,edx
c0011a26:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011a2a:	83 c4 10             	add    esp,0x10
c0011a2d:	83 c4 10             	add    esp,0x10
c0011a30:	5b                   	pop    ebx
c0011a31:	5e                   	pop    esi
c0011a32:	5f                   	pop    edi
c0011a33:	c3                   	ret    
c0011a34:	83 ec 08             	sub    esp,0x8
c0011a37:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011a3a:	50                   	push   eax
c0011a3b:	56                   	push   esi
c0011a3c:	e8 df eb fe ff       	call   c0000620 <strcpy>
c0011a41:	58                   	pop    eax
c0011a42:	5a                   	pop    edx
c0011a43:	68 c3 e8 01 c0       	push   0xc001e8c3
c0011a48:	56                   	push   esi
c0011a49:	e8 92 ed fe ff       	call   c00007e0 <strcat>
c0011a4e:	59                   	pop    ecx
c0011a4f:	5b                   	pop    ebx
c0011a50:	57                   	push   edi
c0011a51:	56                   	push   esi
c0011a52:	e8 89 ed fe ff       	call   c00007e0 <strcat>
c0011a57:	83 c4 10             	add    esp,0x10
c0011a5a:	e9 7a ff ff ff       	jmp    c00119d9 <sysCallGetEnv(regs*)+0x29>

c0011a5f <sysSetFatAttrib(regs*)>:
c0011a5f:	57                   	push   edi
c0011a60:	56                   	push   esi
c0011a61:	53                   	push   ebx
c0011a62:	83 ec 1c             	sub    esp,0x1c
c0011a65:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011a69:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011a6c:	68 14 01 00 00       	push   0x114
c0011a71:	e8 e7 63 ff ff       	call   c0007e5d <malloc>
c0011a76:	83 c4 0c             	add    esp,0xc
c0011a79:	89 c3                	mov    ebx,eax
c0011a7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a80:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a83:	50                   	push   eax
c0011a84:	57                   	push   edi
c0011a85:	53                   	push   ebx
c0011a86:	e8 d7 96 ff ff       	call   c000b162 <File::File(char const*, Process*)>
c0011a8b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011a8e:	83 c4 0c             	add    esp,0xc
c0011a91:	0f b6 d4             	movzx  edx,ah
c0011a94:	25 ff 00 00 00       	and    eax,0xff
c0011a99:	52                   	push   edx
c0011a9a:	50                   	push   eax
c0011a9b:	53                   	push   ebx
c0011a9c:	e8 93 99 ff ff       	call   c000b434 <File::chfatattr(unsigned char, unsigned char)>
c0011aa1:	83 c4 10             	add    esp,0x10
c0011aa4:	85 db                	test   ebx,ebx
c0011aa6:	74 14                	je     c0011abc <sysSetFatAttrib(regs*)+0x5d>
c0011aa8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011aac:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011aae:	83 ec 0c             	sub    esp,0xc
c0011ab1:	53                   	push   ebx
c0011ab2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011ab5:	83 c4 10             	add    esp,0x10
c0011ab8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011abc:	85 c0                	test   eax,eax
c0011abe:	0f 95 c0             	setne  al
c0011ac1:	31 d2                	xor    edx,edx
c0011ac3:	25 ff 00 00 00       	and    eax,0xff
c0011ac8:	f7 d8                	neg    eax
c0011aca:	83 d2 00             	adc    edx,0x0
c0011acd:	83 c4 10             	add    esp,0x10
c0011ad0:	f7 da                	neg    edx
c0011ad2:	5b                   	pop    ebx
c0011ad3:	5e                   	pop    esi
c0011ad4:	5f                   	pop    edi
c0011ad5:	c3                   	ret    

c0011ad6 <sysPipe(regs*)>:
c0011ad6:	57                   	push   edi
c0011ad7:	56                   	push   esi
c0011ad8:	53                   	push   ebx
c0011ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011add:	83 ec 0c             	sub    esp,0xc
c0011ae0:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011ae3:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011ae6:	6a 20                	push   0x20
c0011ae8:	e8 70 63 ff ff       	call   c0007e5d <malloc>
c0011aed:	89 c3                	mov    ebx,eax
c0011aef:	58                   	pop    eax
c0011af0:	5a                   	pop    edx
c0011af1:	68 00 50 00 00       	push   0x5000
c0011af6:	53                   	push   ebx
c0011af7:	e8 58 6d ff ff       	call   c0008854 <Pipe::Pipe(int)>
c0011afc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011aff:	e8 4a 7a ff ff       	call   c000954e <UnixFile::getFileDescriptor()>
c0011b04:	89 07                	mov    DWORD PTR [edi],eax
c0011b06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011b09:	e8 40 7a ff ff       	call   c000954e <UnixFile::getFileDescriptor()>
c0011b0e:	83 c4 10             	add    esp,0x10
c0011b11:	89 06                	mov    DWORD PTR [esi],eax
c0011b13:	31 d2                	xor    edx,edx
c0011b15:	5b                   	pop    ebx
c0011b16:	31 c0                	xor    eax,eax
c0011b18:	5e                   	pop    esi
c0011b19:	5f                   	pop    edi
c0011b1a:	c3                   	ret    

c0011b1b <sysGetUnixTime(regs*)>:
c0011b1b:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0011b20:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011b26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011b2a:	e9 43 a0 ff ff       	jmp    c000bb72 <Clock::timeInSecondsLocal()>

c0011b2f <string_ends_with(char const*, char const*)>:
c0011b2f:	57                   	push   edi
c0011b30:	56                   	push   esi
c0011b31:	53                   	push   ebx
c0011b32:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b36:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011b3a:	83 ec 0c             	sub    esp,0xc
c0011b3d:	53                   	push   ebx
c0011b3e:	e8 1d ea fe ff       	call   c0000560 <strlen>
c0011b43:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b46:	89 c6                	mov    esi,eax
c0011b48:	e8 13 ea fe ff       	call   c0000560 <strlen>
c0011b4d:	83 c4 10             	add    esp,0x10
c0011b50:	39 c6                	cmp    esi,eax
c0011b52:	7d 06                	jge    c0011b5a <string_ends_with(char const*, char const*)+0x2b>
c0011b54:	5b                   	pop    ebx
c0011b55:	31 c0                	xor    eax,eax
c0011b57:	5e                   	pop    esi
c0011b58:	5f                   	pop    edi
c0011b59:	c3                   	ret    
c0011b5a:	83 ec 08             	sub    esp,0x8
c0011b5d:	29 c6                	sub    esi,eax
c0011b5f:	57                   	push   edi
c0011b60:	01 f3                	add    ebx,esi
c0011b62:	53                   	push   ebx
c0011b63:	e8 98 eb fe ff       	call   c0000700 <strcmp>
c0011b68:	83 c4 10             	add    esp,0x10
c0011b6b:	85 c0                	test   eax,eax
c0011b6d:	5b                   	pop    ebx
c0011b6e:	0f 94 c0             	sete   al
c0011b71:	5e                   	pop    esi
c0011b72:	25 ff 00 00 00       	and    eax,0xff
c0011b77:	5f                   	pop    edi
c0011b78:	c3                   	ret    

c0011b79 <sysCallOpen(regs*)>:
c0011b79:	56                   	push   esi
c0011b7a:	53                   	push   ebx
c0011b7b:	81 ec 04 01 00 00    	sub    esp,0x104
c0011b81:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011b88:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011b8b:	85 c9                	test   ecx,ecx
c0011b8d:	0f 84 b9 01 00 00    	je     c0011d4c <sysCallOpen(regs*)+0x1d3>
c0011b93:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011b96:	85 c0                	test   eax,eax
c0011b98:	0f 84 ae 01 00 00    	je     c0011d4c <sysCallOpen(regs*)+0x1d3>
c0011b9e:	52                   	push   edx
c0011b9f:	68 c5 e8 01 c0       	push   0xc001e8c5
c0011ba4:	50                   	push   eax
c0011ba5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011ba9:	56                   	push   esi
c0011baa:	e8 09 94 ff ff       	call   c000afb8 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011baf:	89 34 24             	mov    DWORD PTR [esp],esi
c0011bb2:	e8 a9 e9 fe ff       	call   c0000560 <strlen>
c0011bb7:	83 c4 10             	add    esp,0x10
c0011bba:	48                   	dec    eax
c0011bbb:	74 1d                	je     c0011bda <sysCallOpen(regs*)+0x61>
c0011bbd:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011bc0:	eb 0f                	jmp    c0011bd1 <sysCallOpen(regs*)+0x58>
c0011bc2:	80 fa 3a             	cmp    dl,0x3a
c0011bc5:	74 0f                	je     c0011bd6 <sysCallOpen(regs*)+0x5d>
c0011bc7:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011bcb:	48                   	dec    eax
c0011bcc:	74 0c                	je     c0011bda <sysCallOpen(regs*)+0x61>
c0011bce:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011bd1:	80 fa 2e             	cmp    dl,0x2e
c0011bd4:	75 ec                	jne    c0011bc2 <sysCallOpen(regs*)+0x49>
c0011bd6:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011bda:	83 ec 08             	sub    esp,0x8
c0011bdd:	68 c9 e8 01 c0       	push   0xc001e8c9
c0011be2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011be5:	50                   	push   eax
c0011be6:	e8 44 ff ff ff       	call   c0011b2f <string_ends_with(char const*, char const*)>
c0011beb:	83 c4 10             	add    esp,0x10
c0011bee:	85 c0                	test   eax,eax
c0011bf0:	74 1d                	je     c0011c0f <sysCallOpen(regs*)+0x96>
c0011bf2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011bf5:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011bfb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c02:	81 c4 04 01 00 00    	add    esp,0x104
c0011c08:	31 c0                	xor    eax,eax
c0011c0a:	31 d2                	xor    edx,edx
c0011c0c:	5b                   	pop    ebx
c0011c0d:	5e                   	pop    esi
c0011c0e:	c3                   	ret    
c0011c0f:	83 ec 08             	sub    esp,0x8
c0011c12:	68 ce e8 01 c0       	push   0xc001e8ce
c0011c17:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011c1a:	50                   	push   eax
c0011c1b:	e8 0f ff ff ff       	call   c0011b2f <string_ends_with(char const*, char const*)>
c0011c20:	83 c4 10             	add    esp,0x10
c0011c23:	85 c0                	test   eax,eax
c0011c25:	75 cb                	jne    c0011bf2 <sysCallOpen(regs*)+0x79>
c0011c27:	83 ec 08             	sub    esp,0x8
c0011c2a:	68 ca e8 01 c0       	push   0xc001e8ca
c0011c2f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011c32:	50                   	push   eax
c0011c33:	e8 c8 ea fe ff       	call   c0000700 <strcmp>
c0011c38:	83 c4 10             	add    esp,0x10
c0011c3b:	85 c0                	test   eax,eax
c0011c3d:	74 b3                	je     c0011bf2 <sysCallOpen(regs*)+0x79>
c0011c3f:	83 ec 08             	sub    esp,0x8
c0011c42:	68 c9 e8 01 c0       	push   0xc001e8c9
c0011c47:	56                   	push   esi
c0011c48:	e8 e2 fe ff ff       	call   c0011b2f <string_ends_with(char const*, char const*)>
c0011c4d:	83 c4 10             	add    esp,0x10
c0011c50:	85 c0                	test   eax,eax
c0011c52:	75 9e                	jne    c0011bf2 <sysCallOpen(regs*)+0x79>
c0011c54:	83 ec 08             	sub    esp,0x8
c0011c57:	68 d3 e8 01 c0       	push   0xc001e8d3
c0011c5c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011c5f:	50                   	push   eax
c0011c60:	e8 ca fe ff ff       	call   c0011b2f <string_ends_with(char const*, char const*)>
c0011c65:	83 c4 10             	add    esp,0x10
c0011c68:	85 c0                	test   eax,eax
c0011c6a:	0f 85 ef 00 00 00    	jne    c0011d5f <sysCallOpen(regs*)+0x1e6>
c0011c70:	83 ec 08             	sub    esp,0x8
c0011c73:	68 d8 e8 01 c0       	push   0xc001e8d8
c0011c78:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011c7b:	50                   	push   eax
c0011c7c:	e8 ae fe ff ff       	call   c0011b2f <string_ends_with(char const*, char const*)>
c0011c81:	83 c4 10             	add    esp,0x10
c0011c84:	85 c0                	test   eax,eax
c0011c86:	0f 85 d3 00 00 00    	jne    c0011d5f <sysCallOpen(regs*)+0x1e6>
c0011c8c:	83 ec 08             	sub    esp,0x8
c0011c8f:	68 d4 e8 01 c0       	push   0xc001e8d4
c0011c94:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011c97:	51                   	push   ecx
c0011c98:	e8 63 ea fe ff       	call   c0000700 <strcmp>
c0011c9d:	83 c4 10             	add    esp,0x10
c0011ca0:	85 c0                	test   eax,eax
c0011ca2:	0f 84 b7 00 00 00    	je     c0011d5f <sysCallOpen(regs*)+0x1e6>
c0011ca8:	83 ec 08             	sub    esp,0x8
c0011cab:	68 d3 e8 01 c0       	push   0xc001e8d3
c0011cb0:	56                   	push   esi
c0011cb1:	e8 79 fe ff ff       	call   c0011b2f <string_ends_with(char const*, char const*)>
c0011cb6:	83 c4 10             	add    esp,0x10
c0011cb9:	85 c0                	test   eax,eax
c0011cbb:	0f 85 9e 00 00 00    	jne    c0011d5f <sysCallOpen(regs*)+0x1e6>
c0011cc1:	83 ec 0c             	sub    esp,0xc
c0011cc4:	68 14 01 00 00       	push   0x114
c0011cc9:	e8 8f 61 ff ff       	call   c0007e5d <malloc>
c0011cce:	83 c4 0c             	add    esp,0xc
c0011cd1:	89 c6                	mov    esi,eax
c0011cd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cd8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cdb:	50                   	push   eax
c0011cdc:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011cdf:	52                   	push   edx
c0011ce0:	56                   	push   esi
c0011ce1:	e8 7c 94 ff ff       	call   c000b162 <File::File(char const*, Process*)>
c0011ce6:	83 c4 10             	add    esp,0x10
c0011ce9:	85 f6                	test   esi,esi
c0011ceb:	74 5f                	je     c0011d4c <sysCallOpen(regs*)+0x1d3>
c0011ced:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011cf0:	89 d0                	mov    eax,edx
c0011cf2:	25 ff 00 00 00       	and    eax,0xff
c0011cf7:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011cfa:	89 d0                	mov    eax,edx
c0011cfc:	83 e0 01             	and    eax,0x1
c0011cff:	f6 c2 02             	test   dl,0x2
c0011d02:	74 03                	je     c0011d07 <sysCallOpen(regs*)+0x18e>
c0011d04:	83 c8 02             	or     eax,0x2
c0011d07:	f6 c2 04             	test   dl,0x4
c0011d0a:	74 03                	je     c0011d0f <sysCallOpen(regs*)+0x196>
c0011d0c:	83 c8 04             	or     eax,0x4
c0011d0f:	f6 c2 08             	test   dl,0x8
c0011d12:	74 03                	je     c0011d17 <sysCallOpen(regs*)+0x19e>
c0011d14:	83 c8 0a             	or     eax,0xa
c0011d17:	83 e2 10             	and    edx,0x10
c0011d1a:	74 03                	je     c0011d1f <sysCallOpen(regs*)+0x1a6>
c0011d1c:	83 c8 12             	or     eax,0x12
c0011d1f:	83 ec 08             	sub    esp,0x8
c0011d22:	50                   	push   eax
c0011d23:	56                   	push   esi
c0011d24:	e8 f9 94 ff ff       	call   c000b222 <File::open(FileOpenMode)>
c0011d29:	83 c4 10             	add    esp,0x10
c0011d2c:	85 c0                	test   eax,eax
c0011d2e:	75 1c                	jne    c0011d4c <sysCallOpen(regs*)+0x1d3>
c0011d30:	83 ec 0c             	sub    esp,0xc
c0011d33:	56                   	push   esi
c0011d34:	e8 15 78 ff ff       	call   c000954e <UnixFile::getFileDescriptor()>
c0011d39:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011d3c:	83 c4 10             	add    esp,0x10
c0011d3f:	89 02                	mov    DWORD PTR [edx],eax
c0011d41:	c1 f8 1f             	sar    eax,0x1f
c0011d44:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011d47:	e9 b6 fe ff ff       	jmp    c0011c02 <sysCallOpen(regs*)+0x89>
c0011d4c:	81 c4 04 01 00 00    	add    esp,0x104
c0011d52:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d57:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d5c:	5b                   	pop    ebx
c0011d5d:	5e                   	pop    esi
c0011d5e:	c3                   	ret    
c0011d5f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d62:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011d68:	e9 8e fe ff ff       	jmp    c0011bfb <sysCallOpen(regs*)+0x82>

c0011d6d <KeLoadSystemCalls()>:
c0011d6d:	c7 05 c0 34 02 c0 ae 20 01 c0 	mov    DWORD PTR ds:0xc00234c0,0xc00120ae
c0011d77:	c7 05 c4 34 02 c0 43 0e 01 c0 	mov    DWORD PTR ds:0xc00234c4,0xc0010e43
c0011d81:	c7 05 c8 34 02 c0 32 10 01 c0 	mov    DWORD PTR ds:0xc00234c8,0xc0011032
c0011d8b:	c7 05 cc 34 02 c0 e4 1f 01 c0 	mov    DWORD PTR ds:0xc00234cc,0xc0011fe4
c0011d95:	c7 05 d0 34 02 c0 ca 0f 01 c0 	mov    DWORD PTR ds:0xc00234d0,0xc0010fca
c0011d9f:	c7 05 d4 34 02 c0 7a 0e 01 c0 	mov    DWORD PTR ds:0xc00234d4,0xc0010e7a
c0011da9:	c7 05 d8 34 02 c0 5b 0e 01 c0 	mov    DWORD PTR ds:0xc00234d8,0xc0010e5b
c0011db3:	c7 05 dc 34 02 c0 bd 10 01 c0 	mov    DWORD PTR ds:0xc00234dc,0xc00110bd
c0011dbd:	c7 05 e4 34 02 c0 13 16 01 c0 	mov    DWORD PTR ds:0xc00234e4,0xc0011613
c0011dc7:	c7 05 e0 34 02 c0 79 1b 01 c0 	mov    DWORD PTR ds:0xc00234e0,0xc0011b79
c0011dd1:	c7 05 e8 34 02 c0 73 16 01 c0 	mov    DWORD PTR ds:0xc00234e8,0xc0011673
c0011ddb:	c7 05 ec 34 02 c0 47 13 01 c0 	mov    DWORD PTR ds:0xc00234ec,0xc0011347
c0011de5:	c7 05 f0 34 02 c0 6e 11 01 c0 	mov    DWORD PTR ds:0xc00234f0,0xc001116e
c0011def:	c7 05 f4 34 02 c0 73 11 01 c0 	mov    DWORD PTR ds:0xc00234f4,0xc0011173
c0011df9:	c7 05 f8 34 02 c0 3e 17 01 c0 	mov    DWORD PTR ds:0xc00234f8,0xc001173e
c0011e03:	c7 05 fc 34 02 c0 ea 16 01 c0 	mov    DWORD PTR ds:0xc00234fc,0xc00116ea
c0011e0d:	c7 05 00 35 02 c0 23 14 01 c0 	mov    DWORD PTR ds:0xc0023500,0xc0011423
c0011e17:	c7 05 04 35 02 c0 7c 14 01 c0 	mov    DWORD PTR ds:0xc0023504,0xc001147c
c0011e21:	c7 05 08 35 02 c0 eb 14 01 c0 	mov    DWORD PTR ds:0xc0023508,0xc00114eb
c0011e2b:	c7 05 0c 35 02 c0 78 11 01 c0 	mov    DWORD PTR ds:0xc002350c,0xc0011178
c0011e35:	c7 05 10 35 02 c0 b0 17 01 c0 	mov    DWORD PTR ds:0xc0023510,0xc00117b0
c0011e3f:	c7 05 14 35 02 c0 cd 17 01 c0 	mov    DWORD PTR ds:0xc0023514,0xc00117cd
c0011e49:	c7 05 18 35 02 c0 cd 17 01 c0 	mov    DWORD PTR ds:0xc0023518,0xc00117cd
c0011e53:	c7 05 1c 35 02 c0 03 18 01 c0 	mov    DWORD PTR ds:0xc002351c,0xc0011803
c0011e5d:	c7 05 20 35 02 c0 6a 18 01 c0 	mov    DWORD PTR ds:0xc0023520,0xc001186a
c0011e67:	c7 05 24 35 02 c0 82 11 01 c0 	mov    DWORD PTR ds:0xc0023524,0xc0011182
c0011e71:	c7 05 28 35 02 c0 d1 18 01 c0 	mov    DWORD PTR ds:0xc0023528,0xc00118d1
c0011e7b:	c7 05 2c 35 02 c0 04 13 01 c0 	mov    DWORD PTR ds:0xc002352c,0xc0011304
c0011e85:	c7 05 30 35 02 c0 92 11 01 c0 	mov    DWORD PTR ds:0xc0023530,0xc0011192
c0011e8f:	c7 05 34 35 02 c0 c7 13 01 c0 	mov    DWORD PTR ds:0xc0023534,0xc00113c7
c0011e99:	c7 05 38 35 02 c0 1e 19 01 c0 	mov    DWORD PTR ds:0xc0023538,0xc001191e
c0011ea3:	c7 05 3c 35 02 c0 60 15 01 c0 	mov    DWORD PTR ds:0xc002353c,0xc0011560
c0011ead:	c7 05 40 35 02 c0 47 19 01 c0 	mov    DWORD PTR ds:0xc0023540,0xc0011947
c0011eb7:	c7 05 44 35 02 c0 b0 19 01 c0 	mov    DWORD PTR ds:0xc0023544,0xc00119b0
c0011ec1:	c7 05 4c 35 02 c0 9a 11 01 c0 	mov    DWORD PTR ds:0xc002354c,0xc001119a
c0011ecb:	c7 05 50 35 02 c0 07 12 01 c0 	mov    DWORD PTR ds:0xc0023550,0xc0011207
c0011ed5:	c7 05 54 35 02 c0 51 12 01 c0 	mov    DWORD PTR ds:0xc0023554,0xc0011251
c0011edf:	c7 05 58 35 02 c0 5f 1a 01 c0 	mov    DWORD PTR ds:0xc0023558,0xc0011a5f
c0011ee9:	c7 05 5c 35 02 c0 e8 17 01 c0 	mov    DWORD PTR ds:0xc002355c,0xc00117e8
c0011ef3:	c7 05 60 35 02 c0 a6 12 01 c0 	mov    DWORD PTR ds:0xc0023560,0xc00112a6
c0011efd:	c7 05 64 35 02 c0 d6 1a 01 c0 	mov    DWORD PTR ds:0xc0023564,0xc0011ad6
c0011f07:	c7 05 68 35 02 c0 1b 1b 01 c0 	mov    DWORD PTR ds:0xc0023568,0xc0011b1b
c0011f11:	c7 05 6c 35 02 c0 22 0f 01 c0 	mov    DWORD PTR ds:0xc002356c,0xc0010f22
c0011f1b:	c7 05 70 35 02 c0 d9 10 01 c0 	mov    DWORD PTR ds:0xc0023570,0xc00110d9
c0011f25:	c7 05 74 35 02 c0 9a 1f 01 c0 	mov    DWORD PTR ds:0xc0023574,0xc0011f9a
c0011f2f:	c7 05 78 35 02 c0 87 10 01 c0 	mov    DWORD PTR ds:0xc0023578,0xc0011087
c0011f39:	c7 05 7c 35 02 c0 4c 20 01 c0 	mov    DWORD PTR ds:0xc002357c,0xc001204c
c0011f43:	c7 05 80 35 02 c0 86 0e 01 c0 	mov    DWORD PTR ds:0xc0023580,0xc0010e86
c0011f4d:	c7 05 84 35 02 c0 a0 0e 01 c0 	mov    DWORD PTR ds:0xc0023584,0xc0010ea0
c0011f57:	c3                   	ret    

c0011f58 <KeSystemCall(regs*, void*)>:
c0011f58:	53                   	push   ebx
c0011f59:	83 ec 08             	sub    esp,0x8
c0011f5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f60:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011f63:	83 f8 7f             	cmp    eax,0x7f
c0011f66:	77 16                	ja     c0011f7e <KeSystemCall(regs*, void*)+0x26>
c0011f68:	8b 14 85 c0 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcb40]
c0011f6f:	85 d2                	test   edx,edx
c0011f71:	74 0b                	je     c0011f7e <KeSystemCall(regs*, void*)+0x26>
c0011f73:	83 ec 0c             	sub    esp,0xc
c0011f76:	53                   	push   ebx
c0011f77:	ff d2                	call   edx
c0011f79:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011f7c:	eb 0d                	jmp    c0011f8b <KeSystemCall(regs*, void*)+0x33>
c0011f7e:	52                   	push   edx
c0011f7f:	52                   	push   edx
c0011f80:	50                   	push   eax
c0011f81:	68 dd e8 01 c0       	push   0xc001e8dd
c0011f86:	e8 61 8c ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0011f8b:	83 c4 10             	add    esp,0x10
c0011f8e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011f93:	31 d2                	xor    edx,edx
c0011f95:	83 c4 08             	add    esp,0x8
c0011f98:	5b                   	pop    ebx
c0011f99:	c3                   	ret    

c0011f9a <SysTimezone(regs*)>:
c0011f9a:	53                   	push   ebx
c0011f9b:	83 ec 08             	sub    esp,0x8
c0011f9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fa2:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011fa6:	75 17                	jne    c0011fbf <SysTimezone(regs*)+0x25>
c0011fa8:	83 ec 0c             	sub    esp,0xc
c0011fab:	68 f1 e8 01 c0       	push   0xc001e8f1
c0011fb0:	e8 37 8c ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0011fb5:	83 c8 ff             	or     eax,0xffffffff
c0011fb8:	83 c4 10             	add    esp,0x10
c0011fbb:	89 c2                	mov    edx,eax
c0011fbd:	eb 20                	jmp    c0011fdf <SysTimezone(regs*)+0x45>
c0011fbf:	83 ec 0c             	sub    esp,0xc
c0011fc2:	68 06 e9 01 c0       	push   0xc001e906
c0011fc7:	e8 20 8c ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0011fcc:	58                   	pop    eax
c0011fcd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011fd0:	e8 c7 9a ff ff       	call   c000ba9c <User::loadClockSettings(int)>
c0011fd5:	83 c4 10             	add    esp,0x10
c0011fd8:	b8 01 00 00 00       	mov    eax,0x1
c0011fdd:	31 d2                	xor    edx,edx
c0011fdf:	83 c4 08             	add    esp,0x8
c0011fe2:	5b                   	pop    ebx
c0011fe3:	c3                   	ret    

c0011fe4 <SysWrite(regs*)>:
c0011fe4:	57                   	push   edi
c0011fe5:	56                   	push   esi
c0011fe6:	53                   	push   ebx
c0011fe7:	83 ec 10             	sub    esp,0x10
c0011fea:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011fee:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ff1:	83 f8 02             	cmp    eax,0x2
c0011ff4:	77 10                	ja     c0012006 <SysWrite(regs*)+0x22>
c0011ff6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ffb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ffe:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0012004:	eb 0e                	jmp    c0012014 <SysWrite(regs*)+0x30>
c0012006:	83 ec 0c             	sub    esp,0xc
c0012009:	50                   	push   eax
c001200a:	e8 34 78 ff ff       	call   c0009843 <getFromFileDescriptor(int)>
c001200f:	83 c4 10             	add    esp,0x10
c0012012:	89 c1                	mov    ecx,eax
c0012014:	83 c8 ff             	or     eax,0xffffffff
c0012017:	85 c9                	test   ecx,ecx
c0012019:	89 c2                	mov    edx,eax
c001201b:	74 28                	je     c0012045 <SysWrite(regs*)+0x61>
c001201d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012025:	31 ff                	xor    edi,edi
c0012027:	83 ec 0c             	sub    esp,0xc
c001202a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001202c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012030:	52                   	push   edx
c0012031:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012034:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0012037:	57                   	push   edi
c0012038:	56                   	push   esi
c0012039:	51                   	push   ecx
c001203a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001203d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012041:	83 c4 20             	add    esp,0x20
c0012044:	99                   	cdq    
c0012045:	83 c4 10             	add    esp,0x10
c0012048:	5b                   	pop    ebx
c0012049:	5e                   	pop    esi
c001204a:	5f                   	pop    edi
c001204b:	c3                   	ret    

c001204c <SysWsbe(regs*)>:
c001204c:	57                   	push   edi
c001204d:	b9 0b 00 00 00       	mov    ecx,0xb
c0012052:	56                   	push   esi
c0012053:	be 45 e9 01 c0       	mov    esi,0xc001e945
c0012058:	53                   	push   ebx
c0012059:	83 ec 30             	sub    esp,0x30
c001205c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0012060:	fc                   	cld    
c0012061:	83 ec 0c             	sub    esp,0xc
c0012064:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012066:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001206a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001206f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012072:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0012078:	8b 06                	mov    eax,DWORD PTR [esi]
c001207a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001207d:	57                   	push   edi
c001207e:	e8 dd e4 fe ff       	call   c0000560 <strlen>
c0012083:	5a                   	pop    edx
c0012084:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0012088:	52                   	push   edx
c0012089:	31 d2                	xor    edx,edx
c001208b:	57                   	push   edi
c001208c:	52                   	push   edx
c001208d:	50                   	push   eax
c001208e:	56                   	push   esi
c001208f:	ff d3                	call   ebx
c0012091:	83 c4 14             	add    esp,0x14
c0012094:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012098:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001209b:	e8 c4 22 00 00       	call   c0014364 <terminateTask(int)>
c00120a0:	83 c4 40             	add    esp,0x40
c00120a3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00120a8:	5b                   	pop    ebx
c00120a9:	31 d2                	xor    edx,edx
c00120ab:	5e                   	pop    esi
c00120ac:	5f                   	pop    edi
c00120ad:	c3                   	ret    

c00120ae <SysYield(regs*)>:
c00120ae:	83 ec 0c             	sub    esp,0xc
c00120b1:	fa                   	cli    
c00120b2:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c00120b8:	e8 83 19 00 00       	call   c0013a40 <schedule()>
c00120bd:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c00120c2:	48                   	dec    eax
c00120c3:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c00120c8:	75 01                	jne    c00120cb <SysYield(regs*)+0x1d>
c00120ca:	fb                   	sti    
c00120cb:	31 c0                	xor    eax,eax
c00120cd:	31 d2                	xor    edx,edx
c00120cf:	83 c4 0c             	add    esp,0xc
c00120d2:	c3                   	ret    

c00120d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00120d3:	55                   	push   ebp
c00120d4:	57                   	push   edi
c00120d5:	56                   	push   esi
c00120d6:	53                   	push   ebx
c00120d7:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00120dd:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00120e5:	0f 95 c2             	setne  dl
c00120e8:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00120f0:	0f 94 c0             	sete   al
c00120f3:	84 c2                	test   dl,al
c00120f5:	74 34                	je     c001212b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c00120f7:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0012102:	74 27                	je     c001212b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0012104:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001210b:	05 00 10 00 00       	add    eax,0x1000
c0012110:	89 c1                	mov    ecx,eax
c0012112:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012117:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c001211d:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0012124:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c001212b:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0012132:	83 ec 0c             	sub    esp,0xc
c0012135:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001213b:	6a 01                	push   0x1
c001213d:	e8 57 78 ff ff       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c0012142:	83 c4 10             	add    esp,0x10
c0012145:	89 c3                	mov    ebx,eax
c0012147:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001214d:	0f 86 25 01 00 00    	jbe    c0012278 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0012153:	c1 ee 0c             	shr    esi,0xc
c0012156:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001215d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0012161:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012169:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0012170:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012174:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001217b:	29 ef                	sub    edi,ebp
c001217d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0012181:	0f 83 f8 00 00 00    	jae    c001227f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0012187:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001218d:	76 05                	jbe    c0012194 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c001218f:	bf 00 10 00 00       	mov    edi,0x1000
c0012194:	83 ec 0c             	sub    esp,0xc
c0012197:	31 d2                	xor    edx,edx
c0012199:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00121a0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00121a2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00121a6:	50                   	push   eax
c00121a7:	8d 74 24 30          	lea    esi,[esp+0x30]
c00121ab:	56                   	push   esi
c00121ac:	52                   	push   edx
c00121ad:	57                   	push   edi
c00121ae:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00121b5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00121b8:	83 c4 20             	add    esp,0x20
c00121bb:	85 c0                	test   eax,eax
c00121bd:	75 06                	jne    c00121c5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c00121bf:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00121c3:	74 13                	je     c00121d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c00121c5:	83 ec 0c             	sub    esp,0xc
c00121c8:	53                   	push   ebx
c00121c9:	e8 fb 7a ff ff       	call   c0009cc9 <Virt::freeKernelVirtualPages(unsigned long)>
c00121ce:	83 c4 10             	add    esp,0x10
c00121d1:	31 c0                	xor    eax,eax
c00121d3:	e9 7c 01 00 00       	jmp    c0012354 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c00121d8:	fa                   	cli    
c00121d9:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c00121df:	e8 46 60 ff ff       	call   c000822a <Phys::allocatePage()>
c00121e4:	6a 07                	push   0x7
c00121e6:	89 c7                	mov    edi,eax
c00121e8:	53                   	push   ebx
c00121e9:	50                   	push   eax
c00121ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121ef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121f2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00121f8:	e8 31 7e ff ff       	call   c000a02e <VAS::mapPage(unsigned long, unsigned long, int)>
c00121fd:	83 c4 0c             	add    esp,0xc
c0012200:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012207:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001220d:	6a 00                	push   0x0
c001220f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012214:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012217:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001221d:	e8 7e 7c ff ff       	call   c0009ea0 <VAS::mapOtherVASIn(bool, VAS*)>
c0012222:	58                   	pop    eax
c0012223:	5a                   	pop    edx
c0012224:	68 07 0c 00 00       	push   0xc07
c0012229:	55                   	push   ebp
c001222a:	57                   	push   edi
c001222b:	89 df                	mov    edi,ebx
c001222d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012234:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001223a:	6a 00                	push   0x0
c001223c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012241:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012244:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001224a:	e8 9f 81 ff ff       	call   c000a3ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001224f:	b9 00 10 00 00       	mov    ecx,0x1000
c0012254:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012256:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c001225b:	83 c4 20             	add    esp,0x20
c001225e:	48                   	dec    eax
c001225f:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0012264:	85 c0                	test   eax,eax
c0012266:	75 01                	jne    c0012269 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0012268:	fb                   	sti    
c0012269:	81 c5 00 10 00 00    	add    ebp,0x1000
c001226f:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0012273:	e9 f1 fe ff ff       	jmp    c0012169 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0012278:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001227f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0012286:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001228c:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0012292:	0f 86 ae 00 00 00    	jbe    c0012346 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012298:	fa                   	cli    
c0012299:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c001229f:	c1 ee 0c             	shr    esi,0xc
c00122a2:	51                   	push   ecx
c00122a3:	31 ff                	xor    edi,edi
c00122a5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00122ac:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00122b2:	6a 00                	push   0x0
c00122b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122bc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00122c2:	e8 d9 7b ff ff       	call   c0009ea0 <VAS::mapOtherVASIn(bool, VAS*)>
c00122c7:	83 c4 10             	add    esp,0x10
c00122ca:	e8 5b 5f ff ff       	call   c000822a <Phys::allocatePage()>
c00122cf:	47                   	inc    edi
c00122d0:	6a 07                	push   0x7
c00122d2:	53                   	push   ebx
c00122d3:	50                   	push   eax
c00122d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122d8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00122de:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00122e1:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00122e7:	e8 42 7d ff ff       	call   c000a02e <VAS::mapPage(unsigned long, unsigned long, int)>
c00122ec:	58                   	pop    eax
c00122ed:	5a                   	pop    edx
c00122ee:	68 07 0c 00 00       	push   0xc07
c00122f3:	55                   	push   ebp
c00122f4:	81 c5 00 10 00 00    	add    ebp,0x1000
c00122fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122fe:	50                   	push   eax
c00122ff:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012306:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001230c:	6a 00                	push   0x0
c001230e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012313:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012316:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001231c:	e8 cd 80 ff ff       	call   c000a3ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012321:	83 c4 1c             	add    esp,0x1c
c0012324:	68 00 10 00 00       	push   0x1000
c0012329:	6a 00                	push   0x0
c001232b:	53                   	push   ebx
c001232c:	e8 bf e1 fe ff       	call   c00004f0 <memset>
c0012331:	83 c4 10             	add    esp,0x10
c0012334:	39 fe                	cmp    esi,edi
c0012336:	77 92                	ja     c00122ca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0012338:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c001233d:	48                   	dec    eax
c001233e:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0012343:	75 01                	jne    c0012346 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012345:	fb                   	sti    
c0012346:	83 ec 0c             	sub    esp,0xc
c0012349:	53                   	push   ebx
c001234a:	e8 7a 79 ff ff       	call   c0009cc9 <Virt::freeKernelVirtualPages(unsigned long)>
c001234f:	83 c4 10             	add    esp,0x10
c0012352:	b0 01                	mov    al,0x1
c0012354:	81 c4 2c 10 00 00    	add    esp,0x102c
c001235a:	5b                   	pop    ebx
c001235b:	5e                   	pop    esi
c001235c:	5f                   	pop    edi
c001235d:	5d                   	pop    ebp
c001235e:	c3                   	ret    

c001235f <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001235f:	55                   	push   ebp
c0012360:	57                   	push   edi
c0012361:	56                   	push   esi
c0012362:	53                   	push   ebx
c0012363:	83 ec 48             	sub    esp,0x48
c0012366:	68 14 01 00 00       	push   0x114
c001236b:	e8 ed 5a ff ff       	call   c0007e5d <malloc>
c0012370:	83 c4 0c             	add    esp,0xc
c0012373:	89 c6                	mov    esi,eax
c0012375:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012379:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001237d:	50                   	push   eax
c001237e:	e8 df 8d ff ff       	call   c000b162 <File::File(char const*, Process*)>
c0012383:	58                   	pop    eax
c0012384:	5a                   	pop    edx
c0012385:	6a 01                	push   0x1
c0012387:	56                   	push   esi
c0012388:	e8 95 8e ff ff       	call   c000b222 <File::open(FileOpenMode)>
c001238d:	83 c4 10             	add    esp,0x10
c0012390:	85 c0                	test   eax,eax
c0012392:	0f 85 47 01 00 00    	jne    c00124df <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012398:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00123a0:	83 ec 0c             	sub    esp,0xc
c00123a3:	6a 34                	push   0x34
c00123a5:	e8 b3 5a ff ff       	call   c0007e5d <malloc>
c00123aa:	89 c3                	mov    ebx,eax
c00123ac:	58                   	pop    eax
c00123ad:	8b 06                	mov    eax,DWORD PTR [esi]
c00123af:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00123b3:	57                   	push   edi
c00123b4:	53                   	push   ebx
c00123b5:	6a 00                	push   0x0
c00123b7:	6a 34                	push   0x34
c00123b9:	56                   	push   esi
c00123ba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00123bd:	83 c4 20             	add    esp,0x20
c00123c0:	85 c0                	test   eax,eax
c00123c2:	0f 85 17 01 00 00    	jne    c00124df <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00123c8:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00123ce:	0f 85 0b 01 00 00    	jne    c00124df <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00123d4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00123d7:	85 c0                	test   eax,eax
c00123d9:	0f 84 00 01 00 00    	je     c00124df <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00123df:	31 d2                	xor    edx,edx
c00123e1:	55                   	push   ebp
c00123e2:	52                   	push   edx
c00123e3:	50                   	push   eax
c00123e4:	56                   	push   esi
c00123e5:	e8 f6 8e ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c00123ea:	83 c4 10             	add    esp,0x10
c00123ed:	85 c0                	test   eax,eax
c00123ef:	0f 85 ea 00 00 00    	jne    c00124df <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00123f5:	83 ec 0c             	sub    esp,0xc
c00123f8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00123fb:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00123ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012403:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012407:	0f af c2             	imul   eax,edx
c001240a:	50                   	push   eax
c001240b:	e8 4d 5a ff ff       	call   c0007e5d <malloc>
c0012410:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012412:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012416:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012419:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001241d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012421:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012425:	0f af c2             	imul   eax,edx
c0012428:	99                   	cdq    
c0012429:	52                   	push   edx
c001242a:	50                   	push   eax
c001242b:	56                   	push   esi
c001242c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001242f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0012432:	83 c4 20             	add    esp,0x20
c0012435:	85 c0                	test   eax,eax
c0012437:	0f 84 a2 00 00 00    	je     c00124df <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001243d:	31 d2                	xor    edx,edx
c001243f:	51                   	push   ecx
c0012440:	52                   	push   edx
c0012441:	50                   	push   eax
c0012442:	56                   	push   esi
c0012443:	e8 98 8e ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c0012448:	83 c4 10             	add    esp,0x10
c001244b:	85 c0                	test   eax,eax
c001244d:	0f 85 8c 00 00 00    	jne    c00124df <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012453:	83 ec 0c             	sub    esp,0xc
c0012456:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001245a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001245e:	31 ed                	xor    ebp,ebp
c0012460:	0f af c2             	imul   eax,edx
c0012463:	50                   	push   eax
c0012464:	e8 f4 59 ff ff       	call   c0007e5d <malloc>
c0012469:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001246b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001246f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012476:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001247a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001247e:	0f af c2             	imul   eax,edx
c0012481:	99                   	cdq    
c0012482:	52                   	push   edx
c0012483:	50                   	push   eax
c0012484:	56                   	push   esi
c0012485:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012488:	83 c4 20             	add    esp,0x20
c001248b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012493:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0012497:	0f 86 80 00 00 00    	jbe    c001251d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001249d:	0f b7 fd             	movzx  edi,bp
c00124a0:	c1 e7 05             	shl    edi,0x5
c00124a3:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00124a7:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00124aa:	75 6b                	jne    c0012517 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00124ac:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00124af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00124b3:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00124b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00124ba:	52                   	push   edx
c00124bb:	31 d2                	xor    edx,edx
c00124bd:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00124c0:	52                   	push   edx
c00124c1:	50                   	push   eax
c00124c2:	56                   	push   esi
c00124c3:	e8 18 8e ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c00124c8:	83 c4 10             	add    esp,0x10
c00124cb:	85 c0                	test   eax,eax
c00124cd:	74 17                	je     c00124e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00124cf:	83 ec 0c             	sub    esp,0xc
c00124d2:	68 71 e9 01 c0       	push   0xc001e971
c00124d7:	e8 10 87 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00124dc:	83 c4 10             	add    esp,0x10
c00124df:	31 c0                	xor    eax,eax
c00124e1:	e9 87 00 00 00       	jmp    c001256d <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00124e6:	83 ec 0c             	sub    esp,0xc
c00124e9:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00124ec:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00124ef:	50                   	push   eax
c00124f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00124f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00124f8:	56                   	push   esi
c00124f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00124fd:	e8 d1 fb ff ff       	call   c00120d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0012502:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012506:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001250a:	83 c4 20             	add    esp,0x20
c001250d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0012511:	73 04                	jae    c0012517 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012513:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012517:	45                   	inc    ebp
c0012518:	e9 76 ff ff ff       	jmp    c0012493 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001251d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0012521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012525:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012529:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001252f:	83 ec 0c             	sub    esp,0xc
c0012532:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0012538:	25 00 f0 ff ff       	and    eax,0xfffff000
c001253d:	05 00 10 00 00       	add    eax,0x1000
c0012542:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012545:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012549:	e8 1f 59 ff ff       	call   c0007e6d <free>
c001254e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012551:	e8 17 59 ff ff       	call   c0007e6d <free>
c0012556:	58                   	pop    eax
c0012557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001255b:	e8 0d 59 ff ff       	call   c0007e6d <free>
c0012560:	89 34 24             	mov    DWORD PTR [esp],esi
c0012563:	e8 18 8d ff ff       	call   c000b280 <File::close()>
c0012568:	83 c4 10             	add    esp,0x10
c001256b:	b0 01                	mov    al,0x1
c001256d:	83 c4 3c             	add    esp,0x3c
c0012570:	5b                   	pop    ebx
c0012571:	5e                   	pop    esi
c0012572:	5f                   	pop    edi
c0012573:	5d                   	pop    ebp
c0012574:	c3                   	ret    

c0012575 <Thr::runtimeReferenceHelper()>:
c0012575:	83 ec 18             	sub    esp,0x18
c0012578:	68 79 e9 01 c0       	push   0xc001e979
c001257d:	e8 6a 86 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0012582:	fa                   	cli    
c0012583:	83 c4 10             	add    esp,0x10
c0012586:	eb fe                	jmp    c0012586 <Thr::runtimeReferenceHelper()+0x11>

c0012588 <Thr::getAddressOfKernelSymbol(char const*)>:
c0012588:	57                   	push   edi
c0012589:	56                   	push   esi
c001258a:	53                   	push   ebx
c001258b:	31 db                	xor    ebx,ebx
c001258d:	39 1d 60 3e 02 c0    	cmp    DWORD PTR ds:0xc0023e60,ebx
c0012593:	7e 3c                	jle    c00125d1 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0012595:	8b 34 9d e0 3d 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc220]
c001259c:	31 ff                	xor    edi,edi
c001259e:	39 3c 9d e0 3c 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc320],edi
c00125a5:	7e 27                	jle    c00125ce <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00125a7:	50                   	push   eax
c00125a8:	50                   	push   eax
c00125a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00125ad:	8b 06                	mov    eax,DWORD PTR [esi]
c00125af:	03 04 9d 60 3d 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc2a0]
c00125b6:	50                   	push   eax
c00125b7:	e8 44 e1 fe ff       	call   c0000700 <strcmp>
c00125bc:	83 c4 10             	add    esp,0x10
c00125bf:	85 c0                	test   eax,eax
c00125c1:	75 05                	jne    c00125c8 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00125c3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00125c6:	eb 0b                	jmp    c00125d3 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00125c8:	83 c6 10             	add    esi,0x10
c00125cb:	47                   	inc    edi
c00125cc:	eb d0                	jmp    c001259e <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00125ce:	43                   	inc    ebx
c00125cf:	eb bc                	jmp    c001258d <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00125d1:	31 c0                	xor    eax,eax
c00125d3:	5b                   	pop    ebx
c00125d4:	5e                   	pop    esi
c00125d5:	5f                   	pop    edi
c00125d6:	c3                   	ret    

c00125d7 <Thr::loadKernelSymbolTable(char const*)>:
c00125d7:	55                   	push   ebp
c00125d8:	57                   	push   edi
c00125d9:	56                   	push   esi
c00125da:	53                   	push   ebx
c00125db:	83 ec 68             	sub    esp,0x68
c00125de:	8b 35 b0 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023eb0
c00125e4:	68 14 01 00 00       	push   0x114
c00125e9:	e8 6f 58 ff ff       	call   c0007e5d <malloc>
c00125ee:	83 c4 0c             	add    esp,0xc
c00125f1:	89 c3                	mov    ebx,eax
c00125f3:	56                   	push   esi
c00125f4:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00125f8:	50                   	push   eax
c00125f9:	e8 64 8b ff ff       	call   c000b162 <File::File(char const*, Process*)>
c00125fe:	5e                   	pop    esi
c00125ff:	5f                   	pop    edi
c0012600:	6a 01                	push   0x1
c0012602:	53                   	push   ebx
c0012603:	e8 1a 8c ff ff       	call   c000b222 <File::open(FileOpenMode)>
c0012608:	83 c4 10             	add    esp,0x10
c001260b:	85 c0                	test   eax,eax
c001260d:	74 0a                	je     c0012619 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001260f:	83 ec 0c             	sub    esp,0xc
c0012612:	68 9b e9 01 c0       	push   0xc001e99b
c0012617:	eb 34                	jmp    c001264d <Thr::loadKernelSymbolTable(char const*)+0x76>
c0012619:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0012621:	83 ec 0c             	sub    esp,0xc
c0012624:	6a 34                	push   0x34
c0012626:	e8 32 58 ff ff       	call   c0007e5d <malloc>
c001262b:	59                   	pop    ecx
c001262c:	89 c7                	mov    edi,eax
c001262e:	8d 74 24 34          	lea    esi,[esp+0x34]
c0012632:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012634:	56                   	push   esi
c0012635:	57                   	push   edi
c0012636:	6a 00                	push   0x0
c0012638:	6a 34                	push   0x34
c001263a:	53                   	push   ebx
c001263b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001263e:	83 c4 20             	add    esp,0x20
c0012641:	85 c0                	test   eax,eax
c0012643:	74 17                	je     c001265c <Thr::loadKernelSymbolTable(char const*)+0x85>
c0012645:	83 ec 0c             	sub    esp,0xc
c0012648:	68 b2 e9 01 c0       	push   0xc001e9b2
c001264d:	e8 99 e0 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c0012652:	83 c4 10             	add    esp,0x10
c0012655:	31 c0                	xor    eax,eax
c0012657:	e9 31 02 00 00       	jmp    c001288d <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001265c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012662:	75 e1                	jne    c0012645 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012664:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012667:	85 c0                	test   eax,eax
c0012669:	74 da                	je     c0012645 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001266b:	52                   	push   edx
c001266c:	31 d2                	xor    edx,edx
c001266e:	52                   	push   edx
c001266f:	50                   	push   eax
c0012670:	53                   	push   ebx
c0012671:	e8 6a 8c ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c0012676:	83 c4 10             	add    esp,0x10
c0012679:	85 c0                	test   eax,eax
c001267b:	75 c8                	jne    c0012645 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001267d:	83 ec 0c             	sub    esp,0xc
c0012680:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012684:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012688:	31 ed                	xor    ebp,ebp
c001268a:	0f af c2             	imul   eax,edx
c001268d:	50                   	push   eax
c001268e:	e8 ca 57 ff ff       	call   c0007e5d <malloc>
c0012693:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012695:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012699:	89 34 24             	mov    DWORD PTR [esp],esi
c001269c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126a0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00126a4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126a8:	0f af c2             	imul   eax,edx
c00126ab:	99                   	cdq    
c00126ac:	52                   	push   edx
c00126ad:	50                   	push   eax
c00126ae:	53                   	push   ebx
c00126af:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00126b2:	83 c4 20             	add    esp,0x20
c00126b5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00126bd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00126c5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00126cd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00126d5:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00126d9:	0f 86 aa 00 00 00    	jbe    c0012789 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00126df:	0f b7 f5             	movzx  esi,bp
c00126e2:	6b f6 28             	imul   esi,esi,0x28
c00126e5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00126e9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00126ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126f0:	50                   	push   eax
c00126f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00126f5:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00126f9:	8b 16                	mov    edx,DWORD PTR [esi]
c00126fb:	6b c0 28             	imul   eax,eax,0x28
c00126fe:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0012702:	89 d0                	mov    eax,edx
c0012704:	31 d2                	xor    edx,edx
c0012706:	52                   	push   edx
c0012707:	50                   	push   eax
c0012708:	53                   	push   ebx
c0012709:	e8 d2 8b ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c001270e:	83 c4 0c             	add    esp,0xc
c0012711:	6a 20                	push   0x20
c0012713:	6a 00                	push   0x0
c0012715:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012719:	52                   	push   edx
c001271a:	e8 d1 dd fe ff       	call   c00004f0 <memset>
c001271f:	58                   	pop    eax
c0012720:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012722:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0012726:	51                   	push   ecx
c0012727:	8d 54 24 40          	lea    edx,[esp+0x40]
c001272b:	52                   	push   edx
c001272c:	6a 00                	push   0x0
c001272e:	6a 1f                	push   0x1f
c0012730:	53                   	push   ebx
c0012731:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012734:	83 c4 18             	add    esp,0x18
c0012737:	68 c9 e9 01 c0       	push   0xc001e9c9
c001273c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012740:	52                   	push   edx
c0012741:	e8 ba df fe ff       	call   c0000700 <strcmp>
c0012746:	83 c4 10             	add    esp,0x10
c0012749:	85 c0                	test   eax,eax
c001274b:	75 0f                	jne    c001275c <Thr::loadKernelSymbolTable(char const*)+0x185>
c001274d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012750:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012754:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012758:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001275c:	50                   	push   eax
c001275d:	50                   	push   eax
c001275e:	68 d1 e9 01 c0       	push   0xc001e9d1
c0012763:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012767:	50                   	push   eax
c0012768:	e8 93 df fe ff       	call   c0000700 <strcmp>
c001276d:	83 c4 10             	add    esp,0x10
c0012770:	85 c0                	test   eax,eax
c0012772:	75 0f                	jne    c0012783 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0012774:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012777:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001277b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001277f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012783:	45                   	inc    ebp
c0012784:	e9 4c ff ff ff       	jmp    c00126d5 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0012789:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001278e:	75 10                	jne    c00127a0 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0012790:	83 ec 0c             	sub    esp,0xc
c0012793:	68 d9 e9 01 c0       	push   0xc001e9d9
c0012798:	e8 4e df ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001279d:	83 c4 10             	add    esp,0x10
c00127a0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00127a5:	75 10                	jne    c00127b7 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00127a7:	83 ec 0c             	sub    esp,0xc
c00127aa:	68 d9 e9 01 c0       	push   0xc001e9d9
c00127af:	e8 37 df ff ff       	call   c00106eb <Krnl::panic(char const*)>
c00127b4:	83 c4 10             	add    esp,0x10
c00127b7:	31 d2                	xor    edx,edx
c00127b9:	50                   	push   eax
c00127ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127be:	52                   	push   edx
c00127bf:	50                   	push   eax
c00127c0:	53                   	push   ebx
c00127c1:	e8 1a 8b ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c00127c6:	5a                   	pop    edx
c00127c7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00127cb:	e8 8d 56 ff ff       	call   c0007e5d <malloc>
c00127d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00127d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00127d8:	31 c9                	xor    ecx,ecx
c00127da:	5e                   	pop    esi
c00127db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127dd:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00127e1:	55                   	push   ebp
c00127e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127e6:	51                   	push   ecx
c00127e7:	52                   	push   edx
c00127e8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00127ec:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00127f0:	53                   	push   ebx
c00127f1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00127f4:	83 c4 14             	add    esp,0x14
c00127f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00127fb:	e8 5d 56 ff ff       	call   c0007e5d <malloc>
c0012800:	89 c6                	mov    esi,eax
c0012802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012804:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012807:	56                   	push   esi
c0012808:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001280c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012810:	51                   	push   ecx
c0012811:	52                   	push   edx
c0012812:	53                   	push   ebx
c0012813:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012816:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001281a:	8b 15 60 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e60
c0012820:	83 c4 1c             	add    esp,0x1c
c0012823:	c1 e8 04             	shr    eax,0x4
c0012826:	89 04 95 e0 3c 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc320],eax
c001282d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012831:	31 d2                	xor    edx,edx
c0012833:	52                   	push   edx
c0012834:	50                   	push   eax
c0012835:	53                   	push   ebx
c0012836:	e8 a5 8a ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c001283b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001283d:	31 d2                	xor    edx,edx
c001283f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012842:	56                   	push   esi
c0012843:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012847:	52                   	push   edx
c0012848:	50                   	push   eax
c0012849:	53                   	push   ebx
c001284a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001284d:	83 c4 14             	add    esp,0x14
c0012850:	53                   	push   ebx
c0012851:	e8 2a 8a ff ff       	call   c000b280 <File::close()>
c0012856:	5d                   	pop    ebp
c0012857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001285b:	e8 0d 56 ff ff       	call   c0007e6d <free>
c0012860:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012863:	e8 05 56 ff ff       	call   c0007e6d <free>
c0012868:	a1 60 3e 02 c0       	mov    eax,ds:0xc0023e60
c001286d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012871:	8d 50 01             	lea    edx,[eax+0x1]
c0012874:	89 0c 85 e0 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc220],ecx
c001287b:	89 34 85 60 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc2a0],esi
c0012882:	89 15 60 3e 02 c0    	mov    DWORD PTR ds:0xc0023e60,edx
c0012888:	83 c4 10             	add    esp,0x10
c001288b:	b0 01                	mov    al,0x1
c001288d:	83 c4 5c             	add    esp,0x5c
c0012890:	5b                   	pop    ebx
c0012891:	5e                   	pop    esi
c0012892:	5f                   	pop    edi
c0012893:	5d                   	pop    ebp
c0012894:	c3                   	ret    

c0012895 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0012895:	55                   	push   ebp
c0012896:	57                   	push   edi
c0012897:	56                   	push   esi
c0012898:	53                   	push   ebx
c0012899:	81 ec 68 03 00 00    	sub    esp,0x368
c001289f:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00128a6:	8b 1d b0 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb0
c00128ac:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00128b0:	68 14 01 00 00       	push   0x114
c00128b5:	e8 a3 55 ff ff       	call   c0007e5d <malloc>
c00128ba:	83 c4 0c             	add    esp,0xc
c00128bd:	89 c5                	mov    ebp,eax
c00128bf:	53                   	push   ebx
c00128c0:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00128c7:	50                   	push   eax
c00128c8:	e8 95 88 ff ff       	call   c000b162 <File::File(char const*, Process*)>
c00128cd:	5e                   	pop    esi
c00128ce:	5f                   	pop    edi
c00128cf:	6a 01                	push   0x1
c00128d1:	55                   	push   ebp
c00128d2:	e8 4b 89 ff ff       	call   c000b222 <File::open(FileOpenMode)>
c00128d7:	83 c4 10             	add    esp,0x10
c00128da:	85 c0                	test   eax,eax
c00128dc:	0f 85 a7 06 00 00    	jne    c0012f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00128e2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00128ea:	83 ec 0c             	sub    esp,0xc
c00128ed:	6a 34                	push   0x34
c00128ef:	e8 69 55 ff ff       	call   c0007e5d <malloc>
c00128f4:	5b                   	pop    ebx
c00128f5:	89 c7                	mov    edi,eax
c00128f7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00128fb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00128fe:	53                   	push   ebx
c00128ff:	57                   	push   edi
c0012900:	6a 00                	push   0x0
c0012902:	6a 34                	push   0x34
c0012904:	55                   	push   ebp
c0012905:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012908:	83 c4 20             	add    esp,0x20
c001290b:	85 c0                	test   eax,eax
c001290d:	0f 85 76 06 00 00    	jne    c0012f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012913:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012919:	0f 85 6a 06 00 00    	jne    c0012f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001291f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012922:	85 c0                	test   eax,eax
c0012924:	0f 84 5f 06 00 00    	je     c0012f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001292a:	31 d2                	xor    edx,edx
c001292c:	51                   	push   ecx
c001292d:	52                   	push   edx
c001292e:	50                   	push   eax
c001292f:	55                   	push   ebp
c0012930:	e8 ab 89 ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c0012935:	83 c4 10             	add    esp,0x10
c0012938:	85 c0                	test   eax,eax
c001293a:	0f 85 49 06 00 00    	jne    c0012f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012940:	83 ec 0c             	sub    esp,0xc
c0012943:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012946:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001294a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001294e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012952:	0f af c2             	imul   eax,edx
c0012955:	50                   	push   eax
c0012956:	e8 02 55 ff ff       	call   c0007e5d <malloc>
c001295b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001295e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012962:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012965:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012969:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001296d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012971:	0f af c2             	imul   eax,edx
c0012974:	99                   	cdq    
c0012975:	52                   	push   edx
c0012976:	50                   	push   eax
c0012977:	55                   	push   ebp
c0012978:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001297b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001297e:	83 c4 20             	add    esp,0x20
c0012981:	85 c0                	test   eax,eax
c0012983:	0f 84 00 06 00 00    	je     c0012f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012989:	52                   	push   edx
c001298a:	31 d2                	xor    edx,edx
c001298c:	52                   	push   edx
c001298d:	50                   	push   eax
c001298e:	55                   	push   ebp
c001298f:	e8 4c 89 ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c0012994:	83 c4 10             	add    esp,0x10
c0012997:	85 c0                	test   eax,eax
c0012999:	0f 85 ea 05 00 00    	jne    c0012f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001299f:	83 ec 0c             	sub    esp,0xc
c00129a2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00129a6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00129aa:	31 f6                	xor    esi,esi
c00129ac:	0f af c2             	imul   eax,edx
c00129af:	50                   	push   eax
c00129b0:	e8 a8 54 ff ff       	call   c0007e5d <malloc>
c00129b5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129b8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00129bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00129bf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00129c3:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00129c7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00129cb:	0f af c2             	imul   eax,edx
c00129ce:	99                   	cdq    
c00129cf:	52                   	push   edx
c00129d0:	50                   	push   eax
c00129d1:	55                   	push   ebp
c00129d2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129d5:	83 c4 20             	add    esp,0x20
c00129d8:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00129dc:	0f 86 8a 00 00 00    	jbe    c0012a6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00129e2:	0f b7 de             	movzx  ebx,si
c00129e5:	c1 e3 05             	shl    ebx,0x5
c00129e8:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00129ec:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00129ef:	75 75                	jne    c0012a66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00129f1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00129f4:	31 d2                	xor    edx,edx
c00129f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00129fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00129fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a01:	50                   	push   eax
c0012a02:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012a05:	52                   	push   edx
c0012a06:	50                   	push   eax
c0012a07:	55                   	push   ebp
c0012a08:	e8 d3 88 ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c0012a0d:	83 c4 10             	add    esp,0x10
c0012a10:	85 c0                	test   eax,eax
c0012a12:	0f 85 71 05 00 00    	jne    c0012f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012a18:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0012a1f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a22:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012a26:	31 d2                	xor    edx,edx
c0012a28:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012a2c:	83 ec 0c             	sub    esp,0xc
c0012a2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012a33:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012a3a:	50                   	push   eax
c0012a3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012a3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a43:	52                   	push   edx
c0012a44:	50                   	push   eax
c0012a45:	55                   	push   ebp
c0012a46:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a49:	83 c4 1c             	add    esp,0x1c
c0012a4c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012a4f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0012a52:	50                   	push   eax
c0012a53:	6a 00                	push   0x0
c0012a55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a59:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012a5d:	50                   	push   eax
c0012a5e:	e8 8d da fe ff       	call   c00004f0 <memset>
c0012a63:	83 c4 10             	add    esp,0x10
c0012a66:	46                   	inc    esi
c0012a67:	e9 6c ff ff ff       	jmp    c00129d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012a6c:	53                   	push   ebx
c0012a6d:	31 db                	xor    ebx,ebx
c0012a6f:	68 00 01 00 00       	push   0x100
c0012a74:	6a 00                	push   0x0
c0012a76:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012a7a:	50                   	push   eax
c0012a7b:	e8 70 da fe ff       	call   c00004f0 <memset>
c0012a80:	83 c4 0c             	add    esp,0xc
c0012a83:	68 00 01 00 00       	push   0x100
c0012a88:	6a 00                	push   0x0
c0012a8a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0012a91:	50                   	push   eax
c0012a92:	e8 59 da fe ff       	call   c00004f0 <memset>
c0012a97:	83 c4 10             	add    esp,0x10
c0012a9a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012aa2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012aaa:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0012ab2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012aba:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012ac2:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0012ac6:	0f 86 30 01 00 00    	jbe    c0012bfc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0012acc:	0f b7 f3             	movzx  esi,bx
c0012acf:	6b f6 28             	imul   esi,esi,0x28
c0012ad2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012ad6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012ad9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012add:	52                   	push   edx
c0012ade:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012ae2:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012ae6:	8b 06                	mov    eax,DWORD PTR [esi]
c0012ae8:	6b d2 28             	imul   edx,edx,0x28
c0012aeb:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0012aef:	31 d2                	xor    edx,edx
c0012af1:	52                   	push   edx
c0012af2:	50                   	push   eax
c0012af3:	55                   	push   ebp
c0012af4:	e8 e7 87 ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c0012af9:	83 c4 0c             	add    esp,0xc
c0012afc:	6a 20                	push   0x20
c0012afe:	6a 00                	push   0x0
c0012b00:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012b07:	51                   	push   ecx
c0012b08:	e8 e3 d9 fe ff       	call   c00004f0 <memset>
c0012b0d:	59                   	pop    ecx
c0012b0e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012b11:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012b15:	52                   	push   edx
c0012b16:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012b1d:	51                   	push   ecx
c0012b1e:	6a 00                	push   0x0
c0012b20:	6a 1f                	push   0x1f
c0012b22:	55                   	push   ebp
c0012b23:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012b26:	83 c4 1c             	add    esp,0x1c
c0012b29:	6a 09                	push   0x9
c0012b2b:	68 f3 e9 01 c0       	push   0xc001e9f3
c0012b30:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012b37:	51                   	push   ecx
c0012b38:	e8 73 d8 fe ff       	call   c00003b0 <memcmp>
c0012b3d:	83 c4 10             	add    esp,0x10
c0012b40:	85 c0                	test   eax,eax
c0012b42:	75 21                	jne    c0012b65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012b44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b4c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012b50:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b54:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012b57:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012b5e:	89 d0                	mov    eax,edx
c0012b60:	40                   	inc    eax
c0012b61:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b65:	50                   	push   eax
c0012b66:	6a 09                	push   0x9
c0012b68:	68 fd e9 01 c0       	push   0xc001e9fd
c0012b6d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b74:	50                   	push   eax
c0012b75:	e8 36 d8 fe ff       	call   c00003b0 <memcmp>
c0012b7a:	83 c4 10             	add    esp,0x10
c0012b7d:	85 c0                	test   eax,eax
c0012b7f:	75 21                	jne    c0012ba2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0012b81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b89:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012b8d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b91:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012b94:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012b9b:	89 d0                	mov    eax,edx
c0012b9d:	40                   	inc    eax
c0012b9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ba2:	50                   	push   eax
c0012ba3:	50                   	push   eax
c0012ba4:	68 c9 e9 01 c0       	push   0xc001e9c9
c0012ba9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012bb0:	50                   	push   eax
c0012bb1:	e8 4a db fe ff       	call   c0000700 <strcmp>
c0012bb6:	83 c4 10             	add    esp,0x10
c0012bb9:	85 c0                	test   eax,eax
c0012bbb:	75 0f                	jne    c0012bcc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012bbd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012bc0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012bc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012bc8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012bcc:	50                   	push   eax
c0012bcd:	50                   	push   eax
c0012bce:	68 d1 e9 01 c0       	push   0xc001e9d1
c0012bd3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012bda:	50                   	push   eax
c0012bdb:	e8 20 db fe ff       	call   c0000700 <strcmp>
c0012be0:	83 c4 10             	add    esp,0x10
c0012be3:	85 c0                	test   eax,eax
c0012be5:	75 0f                	jne    c0012bf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012be7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012bea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012bee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012bf2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012bf6:	43                   	inc    ebx
c0012bf7:	e9 c6 fe ff ff       	jmp    c0012ac2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012bfc:	31 d2                	xor    edx,edx
c0012bfe:	50                   	push   eax
c0012bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c03:	52                   	push   edx
c0012c04:	50                   	push   eax
c0012c05:	55                   	push   ebp
c0012c06:	e8 d5 86 ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c0012c0b:	58                   	pop    eax
c0012c0c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c10:	e8 48 52 ff ff       	call   c0007e5d <malloc>
c0012c15:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012c18:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012c1c:	31 d2                	xor    edx,edx
c0012c1e:	58                   	pop    eax
c0012c1f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012c23:	53                   	push   ebx
c0012c24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012c28:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c2c:	52                   	push   edx
c0012c2d:	50                   	push   eax
c0012c2e:	55                   	push   ebp
c0012c2f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012c32:	83 c4 14             	add    esp,0x14
c0012c35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c39:	e8 1f 52 ff ff       	call   c0007e5d <malloc>
c0012c3e:	31 d2                	xor    edx,edx
c0012c40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012c44:	83 c4 0c             	add    esp,0xc
c0012c47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c4b:	52                   	push   edx
c0012c4c:	50                   	push   eax
c0012c4d:	55                   	push   ebp
c0012c4e:	e8 8d 86 ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c0012c53:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012c56:	31 d2                	xor    edx,edx
c0012c58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012c5b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012c5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012c63:	52                   	push   edx
c0012c64:	50                   	push   eax
c0012c65:	55                   	push   ebp
c0012c66:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012c69:	83 c4 20             	add    esp,0x20
c0012c6c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012c74:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012c78:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012c7c:	0f 84 0b 03 00 00    	je     c0012f8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0012c82:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012c89:	31 d2                	xor    edx,edx
c0012c8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012c8f:	c1 e8 03             	shr    eax,0x3
c0012c92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012c96:	51                   	push   ecx
c0012c97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c9b:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0012c9f:	52                   	push   edx
c0012ca0:	50                   	push   eax
c0012ca1:	55                   	push   ebp
c0012ca2:	e8 39 86 ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c0012ca7:	5b                   	pop    ebx
c0012ca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012cac:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012cb3:	e8 a5 51 ff ff       	call   c0007e5d <malloc>
c0012cb8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012cbb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012cbf:	31 d2                	xor    edx,edx
c0012cc1:	5e                   	pop    esi
c0012cc2:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012cc6:	50                   	push   eax
c0012cc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ccb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012ccf:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012cd6:	52                   	push   edx
c0012cd7:	50                   	push   eax
c0012cd8:	55                   	push   ebp
c0012cd9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012cdc:	83 c4 20             	add    esp,0x20
c0012cdf:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012ce7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012ceb:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012cef:	0f 8d 7c 02 00 00    	jge    c0012f71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012cf5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012cf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012cfd:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012d02:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012d05:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012d09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d0d:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012d11:	89 d8                	mov    eax,ebx
c0012d13:	c1 e8 08             	shr    eax,0x8
c0012d16:	89 c6                	mov    esi,eax
c0012d18:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012d1c:	c1 e6 04             	shl    esi,0x4
c0012d1f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012d23:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012d26:	85 d2                	test   edx,edx
c0012d28:	0f 85 bf 00 00 00    	jne    c0012ded <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012d2e:	83 ec 0c             	sub    esp,0xc
c0012d31:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012d35:	03 06                	add    eax,DWORD PTR [esi]
c0012d37:	50                   	push   eax
c0012d38:	e8 4b f8 ff ff       	call   c0012588 <Thr::getAddressOfKernelSymbol(char const*)>
c0012d3d:	83 c4 10             	add    esp,0x10
c0012d40:	89 c2                	mov    edx,eax
c0012d42:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012d47:	85 c0                	test   eax,eax
c0012d49:	0f 85 9e 00 00 00    	jne    c0012ded <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012d4f:	83 ec 0c             	sub    esp,0xc
c0012d52:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012d56:	03 06                	add    eax,DWORD PTR [esi]
c0012d58:	50                   	push   eax
c0012d59:	e8 e2 41 ff ff       	call   c0006f40 <Krnl::resolveCompatibilitySymbol(char*)>
c0012d5e:	83 c4 10             	add    esp,0x10
c0012d61:	89 c2                	mov    edx,eax
c0012d63:	85 c0                	test   eax,eax
c0012d65:	0f 85 82 00 00 00    	jne    c0012ded <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012d6b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012d6f:	50                   	push   eax
c0012d70:	50                   	push   eax
c0012d71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d75:	03 06                	add    eax,DWORD PTR [esi]
c0012d77:	50                   	push   eax
c0012d78:	68 07 ea 01 c0       	push   0xc001ea07
c0012d7d:	e8 6a 7e ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0012d82:	58                   	pop    eax
c0012d83:	5a                   	pop    edx
c0012d84:	68 21 ea 01 c0       	push   0xc001ea21
c0012d89:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012d90:	50                   	push   eax
c0012d91:	e8 8a d8 fe ff       	call   c0000620 <strcpy>
c0012d96:	59                   	pop    ecx
c0012d97:	58                   	pop    eax
c0012d98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d9c:	03 06                	add    eax,DWORD PTR [esi]
c0012d9e:	50                   	push   eax
c0012d9f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012da6:	50                   	push   eax
c0012da7:	e8 34 da fe ff       	call   c00007e0 <strcat>
c0012dac:	58                   	pop    eax
c0012dad:	5a                   	pop    edx
c0012dae:	68 b7 ea 01 c0       	push   0xc001eab7
c0012db3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012dba:	50                   	push   eax
c0012dbb:	e8 20 da fe ff       	call   c00007e0 <strcat>
c0012dc0:	83 c4 10             	add    esp,0x10
c0012dc3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012dc8:	0f 84 5d 01 00 00    	je     c0012f2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012dce:	83 ec 0c             	sub    esp,0xc
c0012dd1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012dd8:	50                   	push   eax
c0012dd9:	e8 0d d9 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c0012dde:	83 c4 10             	add    esp,0x10
c0012de1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012de5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012de9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012ded:	80 fb 01             	cmp    bl,0x1
c0012df0:	0f 85 88 00 00 00    	jne    c0012e7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012df6:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012dfd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012e01:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012e05:	01 ce                	add    esi,ecx
c0012e07:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012e0d:	0f 94 c0             	sete   al
c0012e10:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012e16:	0f 94 c3             	sete   bl
c0012e19:	09 c3                	or     ebx,eax
c0012e1b:	8b 06                	mov    eax,DWORD PTR [esi]
c0012e1d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012e22:	74 41                	je     c0012e65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012e24:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012e27:	84 db                	test   bl,bl
c0012e29:	75 15                	jne    c0012e40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012e2b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012e2f:	66 83 f8 0c          	cmp    ax,0xc
c0012e33:	76 05                	jbe    c0012e3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012e35:	b8 0c 00 00 00       	mov    eax,0xc
c0012e3a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012e3e:	76 37                	jbe    c0012e77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012e40:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012e44:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012e49:	0f 84 dc 00 00 00    	je     c0012f2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012e4f:	83 ec 0c             	sub    esp,0xc
c0012e52:	68 38 ea 01 c0       	push   0xc001ea38
c0012e57:	e8 8f d8 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c0012e5c:	83 c4 10             	add    esp,0x10
c0012e5f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012e63:	eb 12                	jmp    c0012e77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012e65:	01 c1                	add    ecx,eax
c0012e67:	84 db                	test   bl,bl
c0012e69:	75 0c                	jne    c0012e77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012e6b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012e6f:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012e73:	77 02                	ja     c0012e77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012e75:	01 d1                	add    ecx,edx
c0012e77:	89 0e                	mov    DWORD PTR [esi],ecx
c0012e79:	e9 ea 00 00 00       	jmp    c0012f68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012e7e:	80 fb 02             	cmp    bl,0x2
c0012e81:	75 7c                	jne    c0012eff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012e83:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012e8a:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012e8e:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012e92:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012e98:	74 20                	je     c0012eba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012e9a:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012ea0:	74 18                	je     c0012eba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012ea2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012ea6:	b9 0a 00 00 00       	mov    ecx,0xa
c0012eab:	66 83 f8 0e          	cmp    ax,0xe
c0012eaf:	77 03                	ja     c0012eb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012eb1:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012eb4:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012eb8:	76 1f                	jbe    c0012ed9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012eba:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012ebe:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012ec3:	74 66                	je     c0012f2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012ec5:	83 ec 0c             	sub    esp,0xc
c0012ec8:	68 54 ea 01 c0       	push   0xc001ea54
c0012ecd:	e8 19 d8 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c0012ed2:	83 c4 10             	add    esp,0x10
c0012ed5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012ed9:	8b 06                	mov    eax,DWORD PTR [esi]
c0012edb:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012ee0:	74 13                	je     c0012ef5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012ee2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012ee6:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012eed:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012ef1:	01 c8                	add    eax,ecx
c0012ef3:	eb 04                	jmp    c0012ef9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012ef5:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012ef9:	01 c2                	add    edx,eax
c0012efb:	89 16                	mov    DWORD PTR [esi],edx
c0012efd:	eb 69                	jmp    c0012f68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012eff:	0f b6 db             	movzx  ebx,bl
c0012f02:	50                   	push   eax
c0012f03:	50                   	push   eax
c0012f04:	53                   	push   ebx
c0012f05:	68 70 ea 01 c0       	push   0xc001ea70
c0012f0a:	e8 dd 7c ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0012f0f:	83 c4 10             	add    esp,0x10
c0012f12:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012f17:	74 12                	je     c0012f2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012f19:	83 ec 0c             	sub    esp,0xc
c0012f1c:	68 7b ea 01 c0       	push   0xc001ea7b
c0012f21:	e8 c5 d7 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c0012f26:	83 c4 10             	add    esp,0x10
c0012f29:	eb 3d                	jmp    c0012f68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012f2b:	83 ec 0c             	sub    esp,0xc
c0012f2e:	55                   	push   ebp
c0012f2f:	e8 4c 83 ff ff       	call   c000b280 <File::close()>
c0012f34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012f37:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012f3a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f3d:	59                   	pop    ecx
c0012f3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f42:	e8 26 4f ff ff       	call   c0007e6d <free>
c0012f47:	5b                   	pop    ebx
c0012f48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012f4c:	e8 1c 4f ff ff       	call   c0007e6d <free>
c0012f51:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012f54:	e8 14 4f ff ff       	call   c0007e6d <free>
c0012f59:	5e                   	pop    esi
c0012f5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f5e:	e8 0a 4f ff ff       	call   c0007e6d <free>
c0012f63:	83 c4 10             	add    esp,0x10
c0012f66:	eb 21                	jmp    c0012f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012f68:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012f6c:	e9 76 fd ff ff       	jmp    c0012ce7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012f71:	83 ec 0c             	sub    esp,0xc
c0012f74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f78:	e8 f0 4e ff ff       	call   c0007e6d <free>
c0012f7d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012f81:	83 c4 10             	add    esp,0x10
c0012f84:	e9 eb fc ff ff       	jmp    c0012c74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012f89:	31 c0                	xor    eax,eax
c0012f8b:	eb 33                	jmp    c0012fc0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012f8d:	83 ec 0c             	sub    esp,0xc
c0012f90:	55                   	push   ebp
c0012f91:	e8 ea 82 ff ff       	call   c000b280 <File::close()>
c0012f96:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012f99:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012f9c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f9f:	58                   	pop    eax
c0012fa0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012fa4:	e8 c4 4e ff ff       	call   c0007e6d <free>
c0012fa9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012fac:	e8 bc 4e ff ff       	call   c0007e6d <free>
c0012fb1:	5a                   	pop    edx
c0012fb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fb6:	e8 b2 4e ff ff       	call   c0007e6d <free>
c0012fbb:	83 c4 10             	add    esp,0x10
c0012fbe:	b0 01                	mov    al,0x1
c0012fc0:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012fc6:	5b                   	pop    ebx
c0012fc7:	5e                   	pop    esi
c0012fc8:	5f                   	pop    edi
c0012fc9:	5d                   	pop    ebp
c0012fca:	c3                   	ret    

c0012fcb <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012fcb:	56                   	push   esi
c0012fcc:	31 d2                	xor    edx,edx
c0012fce:	53                   	push   ebx
c0012fcf:	8b 1d c0 36 02 c0    	mov    ebx,DWORD PTR ds:0xc00236c0
c0012fd5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012fd9:	39 d3                	cmp    ebx,edx
c0012fdb:	7e 1b                	jle    c0012ff8 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012fdd:	8b 04 95 e0 38 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc720]
c0012fe4:	39 c8                	cmp    eax,ecx
c0012fe6:	77 0d                	ja     c0012ff5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012fe8:	8b 34 95 e0 36 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdc920]
c0012fef:	01 c6                	add    esi,eax
c0012ff1:	39 ce                	cmp    esi,ecx
c0012ff3:	77 05                	ja     c0012ffa <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012ff5:	42                   	inc    edx
c0012ff6:	eb e1                	jmp    c0012fd9 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012ff8:	31 c0                	xor    eax,eax
c0012ffa:	5b                   	pop    ebx
c0012ffb:	5e                   	pop    esi
c0012ffc:	c3                   	ret    

c0012ffd <Thr::getDriverNameFromAddress(unsigned long)>:
c0012ffd:	53                   	push   ebx
c0012ffe:	31 c0                	xor    eax,eax
c0013000:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013004:	8b 1d c0 36 02 c0    	mov    ebx,DWORD PTR ds:0xc00236c0
c001300a:	39 c3                	cmp    ebx,eax
c001300c:	7e 22                	jle    c0013030 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001300e:	8b 14 85 e0 38 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc720]
c0013015:	39 ca                	cmp    edx,ecx
c0013017:	77 14                	ja     c001302d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013019:	03 14 85 e0 36 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdc920]
c0013020:	39 ca                	cmp    edx,ecx
c0013022:	76 09                	jbe    c001302d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013024:	8b 04 85 e0 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc520]
c001302b:	eb 05                	jmp    c0013032 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001302d:	40                   	inc    eax
c001302e:	eb da                	jmp    c001300a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0013030:	31 c0                	xor    eax,eax
c0013032:	5b                   	pop    ebx
c0013033:	c3                   	ret    

c0013034 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0013034:	53                   	push   ebx
c0013035:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0013039:	53                   	push   ebx
c001303a:	e8 8c ff ff ff       	call   c0012fcb <Thr::getDriverBaseFromAddress(unsigned long)>
c001303f:	5a                   	pop    edx
c0013040:	31 d2                	xor    edx,edx
c0013042:	85 c0                	test   eax,eax
c0013044:	74 04                	je     c001304a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0013046:	89 da                	mov    edx,ebx
c0013048:	29 c2                	sub    edx,eax
c001304a:	89 d0                	mov    eax,edx
c001304c:	5b                   	pop    ebx
c001304d:	c3                   	ret    

c001304e <Thr::loadDLL(char const*, bool)>:
c001304e:	55                   	push   ebp
c001304f:	57                   	push   edi
c0013050:	56                   	push   esi
c0013051:	53                   	push   ebx
c0013052:	81 ec 34 01 00 00    	sub    esp,0x134
c0013058:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001305f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0013066:	56                   	push   esi
c0013067:	68 93 ea 01 c0       	push   0xc001ea93
c001306c:	e8 7b 7b ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0013071:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013078:	e8 e0 4d ff ff       	call   c0007e5d <malloc>
c001307d:	83 c4 0c             	add    esp,0xc
c0013080:	89 c3                	mov    ebx,eax
c0013082:	ff 35 b0 3e 02 c0    	push   DWORD PTR ds:0xc0023eb0
c0013088:	56                   	push   esi
c0013089:	50                   	push   eax
c001308a:	e8 d3 80 ff ff       	call   c000b162 <File::File(char const*, Process*)>
c001308f:	83 c4 10             	add    esp,0x10
c0013092:	85 db                	test   ebx,ebx
c0013094:	75 3c                	jne    c00130d2 <Thr::loadDLL(char const*, bool)+0x84>
c0013096:	89 f8                	mov    eax,edi
c0013098:	84 c0                	test   al,al
c001309a:	0f 84 d2 01 00 00    	je     c0013272 <Thr::loadDLL(char const*, bool)+0x224>
c00130a0:	55                   	push   ebp
c00130a1:	55                   	push   ebp
c00130a2:	68 a4 ea 01 c0       	push   0xc001eaa4
c00130a7:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00130ab:	55                   	push   ebp
c00130ac:	e8 6f d5 fe ff       	call   c0000620 <strcpy>
c00130b1:	58                   	pop    eax
c00130b2:	5a                   	pop    edx
c00130b3:	56                   	push   esi
c00130b4:	55                   	push   ebp
c00130b5:	e8 26 d7 fe ff       	call   c00007e0 <strcat>
c00130ba:	59                   	pop    ecx
c00130bb:	58                   	pop    eax
c00130bc:	68 b7 ea 01 c0       	push   0xc001eab7
c00130c1:	55                   	push   ebp
c00130c2:	e8 19 d7 fe ff       	call   c00007e0 <strcat>
c00130c7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00130ca:	e8 1c d6 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c00130cf:	83 c4 10             	add    esp,0x10
c00130d2:	51                   	push   ecx
c00130d3:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00130d7:	50                   	push   eax
c00130d8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00130dc:	50                   	push   eax
c00130dd:	53                   	push   ebx
c00130de:	e8 eb 83 ff ff       	call   c000b4ce <File::stat(unsigned long long*, bool*)>
c00130e3:	83 c4 10             	add    esp,0x10
c00130e6:	85 db                	test   ebx,ebx
c00130e8:	74 0c                	je     c00130f6 <Thr::loadDLL(char const*, bool)+0xa8>
c00130ea:	83 ec 0c             	sub    esp,0xc
c00130ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130ef:	53                   	push   ebx
c00130f0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130f3:	83 c4 10             	add    esp,0x10
c00130f6:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00130fb:	75 0a                	jne    c0013107 <Thr::loadDLL(char const*, bool)+0xb9>
c00130fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013101:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0013105:	75 3c                	jne    c0013143 <Thr::loadDLL(char const*, bool)+0xf5>
c0013107:	89 f8                	mov    eax,edi
c0013109:	84 c0                	test   al,al
c001310b:	0f 84 49 01 00 00    	je     c001325a <Thr::loadDLL(char const*, bool)+0x20c>
c0013111:	51                   	push   ecx
c0013112:	51                   	push   ecx
c0013113:	68 a4 ea 01 c0       	push   0xc001eaa4
c0013118:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001311c:	53                   	push   ebx
c001311d:	e8 fe d4 fe ff       	call   c0000620 <strcpy>
c0013122:	5d                   	pop    ebp
c0013123:	58                   	pop    eax
c0013124:	56                   	push   esi
c0013125:	53                   	push   ebx
c0013126:	e8 b5 d6 fe ff       	call   c00007e0 <strcat>
c001312b:	58                   	pop    eax
c001312c:	5a                   	pop    edx
c001312d:	68 b7 ea 01 c0       	push   0xc001eab7
c0013132:	53                   	push   ebx
c0013133:	e8 a8 d6 fe ff       	call   c00007e0 <strcat>
c0013138:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001313b:	e8 ab d5 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c0013140:	83 c4 10             	add    esp,0x10
c0013143:	52                   	push   edx
c0013144:	6a 03                	push   0x3
c0013146:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001314a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001314e:	05 ff 0f 00 00       	add    eax,0xfff
c0013153:	83 d2 00             	adc    edx,0x0
c0013156:	0f ac d0 0c          	shrd   eax,edx,0xc
c001315a:	50                   	push   eax
c001315b:	ff 35 b0 0a 02 c0    	push   DWORD PTR ds:0xc0020ab0
c0013161:	e8 cc 6f ff ff       	call   c000a132 <VAS::allocatePages(int, int)>
c0013166:	59                   	pop    ecx
c0013167:	89 c3                	mov    ebx,eax
c0013169:	5d                   	pop    ebp
c001316a:	50                   	push   eax
c001316b:	68 9e d8 01 c0       	push   0xc001d89e
c0013170:	e8 77 7a ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0013175:	89 34 24             	mov    DWORD PTR [esp],esi
c0013178:	e8 e3 d3 fe ff       	call   c0000560 <strlen>
c001317d:	8b 2d c0 36 02 c0    	mov    ebp,DWORD PTR ds:0xc00236c0
c0013183:	40                   	inc    eax
c0013184:	89 04 24             	mov    DWORD PTR [esp],eax
c0013187:	e8 d1 4c ff ff       	call   c0007e5d <malloc>
c001318c:	89 04 ad e0 3a 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdc520],eax
c0013193:	58                   	pop    eax
c0013194:	a1 c0 36 02 c0       	mov    eax,ds:0xc00236c0
c0013199:	5a                   	pop    edx
c001319a:	56                   	push   esi
c001319b:	ff 34 85 e0 3a 02 c0 	push   DWORD PTR [eax*4-0x3ffdc520]
c00131a2:	e8 79 d4 fe ff       	call   c0000620 <strcpy>
c00131a7:	a1 c0 36 02 c0       	mov    eax,ds:0xc00236c0
c00131ac:	8d 50 01             	lea    edx,[eax+0x1]
c00131af:	89 1c 85 e0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc720],ebx
c00131b6:	89 15 c0 36 02 c0    	mov    DWORD PTR ds:0xc00236c0,edx
c00131bc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00131c0:	83 c4 0c             	add    esp,0xc
c00131c3:	89 14 85 e0 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc920],edx
c00131ca:	6a 01                	push   0x1
c00131cc:	53                   	push   ebx
c00131cd:	56                   	push   esi
c00131ce:	e8 c2 f6 ff ff       	call   c0012895 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00131d3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00131d7:	83 c4 10             	add    esp,0x10
c00131da:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00131df:	0f 85 89 00 00 00    	jne    c001326e <Thr::loadDLL(char const*, bool)+0x220>
c00131e5:	89 f8                	mov    eax,edi
c00131e7:	84 c0                	test   al,al
c00131e9:	74 73                	je     c001325e <Thr::loadDLL(char const*, bool)+0x210>
c00131eb:	83 ec 0c             	sub    esp,0xc
c00131ee:	68 b9 ea 01 c0       	push   0xc001eab9
c00131f3:	e8 f3 d4 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c00131f8:	83 c4 10             	add    esp,0x10
c00131fb:	eb 61                	jmp    c001325e <Thr::loadDLL(char const*, bool)+0x210>
c00131fd:	50                   	push   eax
c00131fe:	50                   	push   eax
c00131ff:	89 e8                	mov    eax,ebp
c0013201:	c1 e0 0c             	shl    eax,0xc
c0013204:	01 d8                	add    eax,ebx
c0013206:	50                   	push   eax
c0013207:	ff 35 b0 0a 02 c0    	push   DWORD PTR ds:0xc0020ab0
c001320d:	e8 98 6a ff ff       	call   c0009caa <VAS::getPageTableEntry(unsigned long)>
c0013212:	83 c4 10             	add    esp,0x10
c0013215:	8b 00                	mov    eax,DWORD PTR [eax]
c0013217:	a8 60                	test   al,0x60
c0013219:	75 11                	jne    c001322c <Thr::loadDLL(char const*, bool)+0x1de>
c001321b:	83 ec 0c             	sub    esp,0xc
c001321e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013223:	50                   	push   eax
c0013224:	e8 9f 4f ff ff       	call   c00081c8 <Phys::freePage(unsigned long)>
c0013229:	83 c4 10             	add    esp,0x10
c001322c:	45                   	inc    ebp
c001322d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013231:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013235:	05 ff 0f 00 00       	add    eax,0xfff
c001323a:	bf 00 00 00 00       	mov    edi,0x0
c001323f:	83 d2 00             	adc    edx,0x0
c0013242:	0f ac d0 0c          	shrd   eax,edx,0xc
c0013246:	c1 ea 0c             	shr    edx,0xc
c0013249:	39 c5                	cmp    ebp,eax
c001324b:	89 d1                	mov    ecx,edx
c001324d:	89 f8                	mov    eax,edi
c001324f:	19 c8                	sbb    eax,ecx
c0013251:	72 aa                	jb     c00131fd <Thr::loadDLL(char const*, bool)+0x1af>
c0013253:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013258:	75 18                	jne    c0013272 <Thr::loadDLL(char const*, bool)+0x224>
c001325a:	31 db                	xor    ebx,ebx
c001325c:	eb 14                	jmp    c0013272 <Thr::loadDLL(char const*, bool)+0x224>
c001325e:	83 ec 0c             	sub    esp,0xc
c0013261:	68 d8 ea 01 c0       	push   0xc001ead8
c0013266:	e8 80 d4 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001326b:	83 c4 10             	add    esp,0x10
c001326e:	31 ed                	xor    ebp,ebp
c0013270:	eb bb                	jmp    c001322d <Thr::loadDLL(char const*, bool)+0x1df>
c0013272:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013278:	89 d8                	mov    eax,ebx
c001327a:	5b                   	pop    ebx
c001327b:	5e                   	pop    esi
c001327c:	5f                   	pop    edi
c001327d:	5d                   	pop    ebp
c001327e:	c3                   	ret    

c001327f <Thr::executeDLL(unsigned long, void*)>:
c001327f:	56                   	push   esi
c0013280:	53                   	push   ebx
c0013281:	52                   	push   edx
c0013282:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013286:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001328a:	85 db                	test   ebx,ebx
c001328c:	75 10                	jne    c001329e <Thr::executeDLL(unsigned long, void*)+0x1f>
c001328e:	83 ec 0c             	sub    esp,0xc
c0013291:	68 f4 ea 01 c0       	push   0xc001eaf4
c0013296:	e8 50 d4 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001329b:	83 c4 10             	add    esp,0x10
c001329e:	50                   	push   eax
c001329f:	50                   	push   eax
c00132a0:	53                   	push   ebx
c00132a1:	68 1e eb 01 c0       	push   0xc001eb1e
c00132a6:	e8 41 79 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00132ab:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00132af:	89 d8                	mov    eax,ebx
c00132b1:	83 c4 14             	add    esp,0x14
c00132b4:	5b                   	pop    ebx
c00132b5:	5e                   	pop    esi
c00132b6:	ff e0                	jmp    eax

c00132b8 <userModeEntryPoint(void*)>:
c00132b8:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c00132bd:	48                   	dec    eax
c00132be:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c00132c3:	75 03                	jne    c00132c8 <userModeEntryPoint(void*)+0x10>
c00132c5:	fb                   	sti    
c00132c6:	66 90                	xchg   ax,ax
c00132c8:	fb                   	sti    
c00132c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00132d1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00132d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00132db:	e9 7f cf fe ff       	jmp    c000025f <goToUsermode>

c00132e0 <changeTSS>:
c00132e0:	83 ec 14             	sub    esp,0x14
c00132e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132e8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00132eb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00132f0:	c1 e2 15             	shl    edx,0x15
c00132f3:	29 d0                	sub    eax,edx
c00132f5:	50                   	push   eax
c00132f6:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c00132fb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013301:	05 7c 11 00 00       	add    eax,0x117c
c0013306:	50                   	push   eax
c0013307:	e8 e0 5f ff ff       	call   c00092ec <TSS::setESP(unsigned long)>
c001330c:	83 c4 1c             	add    esp,0x1c
c001330f:	c3                   	ret    

c0013310 <switchToThread(ThreadControlBlock*)>:
c0013310:	57                   	push   edi
c0013311:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c0013316:	56                   	push   esi
c0013317:	85 c0                	test   eax,eax
c0013319:	53                   	push   ebx
c001331a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001331e:	0f 85 90 00 00 00    	jne    c00133b4 <switchToThread(ThreadControlBlock*)+0xa4>
c0013324:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0013327:	80 fa ff             	cmp    dl,0xff
c001332a:	0f 84 80 00 00 00    	je     c00133b0 <switchToThread(ThreadControlBlock*)+0xa0>
c0013330:	81 e2 ff 00 00 00    	and    edx,0xff
c0013336:	b8 00 04 00 00       	mov    eax,0x400
c001333b:	29 d0                	sub    eax,edx
c001333d:	d1 f8                	sar    eax,1
c001333f:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0013342:	66 90                	xchg   ax,ax
c0013344:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0013347:	e8 f1 24 00 00       	call   c001583d <HalQueryPerformanceCounter()>
c001334c:	a3 c8 3e 02 c0       	mov    ds:0xc0023ec8,eax
c0013351:	89 15 cc 3e 02 c0    	mov    DWORD PTR ds:0xc0023ecc,edx
c0013357:	89 c6                	mov    esi,eax
c0013359:	89 d7                	mov    edi,edx
c001335b:	2b 35 b8 3e 02 c0    	sub    esi,DWORD PTR ds:0xc0023eb8
c0013361:	a3 b8 3e 02 c0       	mov    ds:0xc0023eb8,eax
c0013366:	1b 3d bc 3e 02 c0    	sbb    edi,DWORD PTR ds:0xc0023ebc
c001336c:	89 35 c0 3e 02 c0    	mov    DWORD PTR ds:0xc0023ec0,esi
c0013372:	89 3d c4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ec4,edi
c0013378:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001337e:	89 15 bc 3e 02 c0    	mov    DWORD PTR ds:0xc0023ebc,edx
c0013384:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0013387:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001338a:	01 c6                	add    esi,eax
c001338c:	11 d7                	adc    edi,edx
c001338e:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0013391:	83 ec 0c             	sub    esp,0xc
c0013394:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0013397:	53                   	push   ebx
c0013398:	e8 fa ce fe ff       	call   c0000297 <switchToThreadASM>
c001339d:	0f 20 c0             	mov    eax,cr0
c00133a0:	83 c8 08             	or     eax,0x8
c00133a3:	0f 22 c0             	mov    cr0,eax
c00133a6:	83 c4 10             	add    esp,0x10
c00133a9:	5b                   	pop    ebx
c00133aa:	5e                   	pop    esi
c00133ab:	5f                   	pop    edi
c00133ac:	c3                   	ret    
c00133ad:	8d 76 00             	lea    esi,[esi+0x0]
c00133b0:	31 c0                	xor    eax,eax
c00133b2:	eb 90                	jmp    c0013344 <switchToThread(ThreadControlBlock*)+0x34>
c00133b4:	5b                   	pop    ebx
c00133b5:	c7 05 80 3e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x1
c00133bf:	5e                   	pop    esi
c00133c0:	5f                   	pop    edi
c00133c1:	c3                   	ret    
c00133c2:	66 90                	xchg   ax,ax

c00133c4 <Process::addArgs(char**)>:
c00133c4:	57                   	push   edi
c00133c5:	56                   	push   esi
c00133c6:	53                   	push   ebx
c00133c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00133cb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00133cf:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00133d9:	85 ff                	test   edi,edi
c00133db:	74 43                	je     c0013420 <Process::addArgs(char**)+0x5c>
c00133dd:	8b 07                	mov    eax,DWORD PTR [edi]
c00133df:	85 c0                	test   eax,eax
c00133e1:	74 3d                	je     c0013420 <Process::addArgs(char**)+0x5c>
c00133e3:	31 db                	xor    ebx,ebx
c00133e5:	8d 76 00             	lea    esi,[esi+0x0]
c00133e8:	83 ec 0c             	sub    esp,0xc
c00133eb:	50                   	push   eax
c00133ec:	e8 6f d1 fe ff       	call   c0000560 <strlen>
c00133f1:	40                   	inc    eax
c00133f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00133f5:	e8 63 4a ff ff       	call   c0007e5d <malloc>
c00133fa:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0013401:	5a                   	pop    edx
c0013402:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013405:	59                   	pop    ecx
c0013406:	43                   	inc    ebx
c0013407:	52                   	push   edx
c0013408:	50                   	push   eax
c0013409:	e8 12 d2 fe ff       	call   c0000620 <strcpy>
c001340e:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013414:	83 c4 10             	add    esp,0x10
c0013417:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001341a:	85 c0                	test   eax,eax
c001341c:	75 ca                	jne    c00133e8 <Process::addArgs(char**)+0x24>
c001341e:	66 90                	xchg   ax,ax
c0013420:	5b                   	pop    ebx
c0013421:	5e                   	pop    esi
c0013422:	5f                   	pop    edi
c0013423:	c3                   	ret    

c0013424 <Process::Process(char const*, Process*, char**)>:
c0013424:	56                   	push   esi
c0013425:	53                   	push   ebx
c0013426:	83 ec 14             	sub    esp,0x14
c0013429:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001342d:	05 0c 02 00 00       	add    eax,0x20c
c0013432:	bb 07 00 00 00       	mov    ebx,0x7
c0013437:	89 c6                	mov    esi,eax
c0013439:	8d 76 00             	lea    esi,[esi+0x0]
c001343c:	85 db                	test   ebx,ebx
c001343e:	78 14                	js     c0013454 <Process::Process(char const*, Process*, char**)+0x30>
c0013440:	83 ec 0c             	sub    esp,0xc
c0013443:	56                   	push   esi
c0013444:	e8 f3 96 00 00       	call   c001cb3c <ThreadControlBlock::ThreadControlBlock()>
c0013449:	83 c4 10             	add    esp,0x10
c001344c:	83 c6 5f             	add    esi,0x5f
c001344f:	4b                   	dec    ebx
c0013450:	eb ea                	jmp    c001343c <Process::Process(char const*, Process*, char**)+0x18>
c0013452:	66 90                	xchg   ax,ax
c0013454:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013458:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001345f:	83 ec 0c             	sub    esp,0xc
c0013462:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013466:	e8 09 d1 ff ff       	call   c0010574 <Krnl::newProcessEnv(Process*)>
c001346b:	83 c4 10             	add    esp,0x10
c001346e:	89 c2                	mov    edx,eax
c0013470:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013474:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001347a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001347e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0013487:	a1 90 f9 01 c0       	mov    eax,ds:0xc001f990
c001348c:	8d 50 01             	lea    edx,[eax+0x1]
c001348f:	89 15 90 f9 01 c0    	mov    DWORD PTR ds:0xc001f990,edx
c0013495:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013499:	89 02                	mov    DWORD PTR [edx],eax
c001349b:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00134a3:	83 ec 0c             	sub    esp,0xc
c00134a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00134aa:	e8 ae 49 ff ff       	call   c0007e5d <malloc>
c00134af:	83 c4 10             	add    esp,0x10
c00134b2:	89 c3                	mov    ebx,eax
c00134b4:	83 ec 08             	sub    esp,0x8
c00134b7:	6a 00                	push   0x0
c00134b9:	53                   	push   ebx
c00134ba:	e8 1d 70 ff ff       	call   c000a4dc <VAS::VAS(bool)>
c00134bf:	83 c4 10             	add    esp,0x10
c00134c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134c6:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00134cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134d0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00134da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00134e2:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00134e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134ec:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00134f2:	85 c0                	test   eax,eax
c00134f4:	74 42                	je     c0013538 <Process::Process(char const*, Process*, char**)+0x114>
c00134f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134fa:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013500:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013506:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001350a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013510:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013514:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001351a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013520:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013524:	05 0c 01 00 00       	add    eax,0x10c
c0013529:	83 ec 08             	sub    esp,0x8
c001352c:	52                   	push   edx
c001352d:	50                   	push   eax
c001352e:	e8 ed d0 fe ff       	call   c0000620 <strcpy>
c0013533:	83 c4 10             	add    esp,0x10
c0013536:	eb 64                	jmp    c001359c <Process::Process(char const*, Process*, char**)+0x178>
c0013538:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0013540:	83 ec 0c             	sub    esp,0xc
c0013543:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013547:	e8 11 49 ff ff       	call   c0007e5d <malloc>
c001354c:	83 c4 10             	add    esp,0x10
c001354f:	89 c3                	mov    ebx,eax
c0013551:	83 ec 08             	sub    esp,0x8
c0013554:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013558:	53                   	push   ebx
c0013559:	e8 32 5b ff ff       	call   c0009090 <VgaText::VgaText(char const*)>
c001355e:	83 c4 10             	add    esp,0x10
c0013561:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013565:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001356b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001356f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013575:	83 ec 0c             	sub    esp,0xc
c0013578:	50                   	push   eax
c0013579:	e8 b2 53 ff ff       	call   c0008930 <addToTerminalCycle(VgaText*)>
c001357e:	83 c4 10             	add    esp,0x10
c0013581:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013585:	05 0c 01 00 00       	add    eax,0x10c
c001358a:	83 ec 08             	sub    esp,0x8
c001358d:	68 3d eb 01 c0       	push   0xc001eb3d
c0013592:	50                   	push   eax
c0013593:	e8 88 d0 fe ff       	call   c0000620 <strcpy>
c0013598:	83 c4 10             	add    esp,0x10
c001359b:	90                   	nop
c001359c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135a0:	83 c0 0c             	add    eax,0xc
c00135a3:	83 ec 08             	sub    esp,0x8
c00135a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135aa:	50                   	push   eax
c00135ab:	e8 70 d0 fe ff       	call   c0000620 <strcpy>
c00135b0:	83 c4 10             	add    esp,0x10
c00135b3:	83 ec 08             	sub    esp,0x8
c00135b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00135ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135be:	e8 01 fe ff ff       	call   c00133c4 <Process::addArgs(char**)>
c00135c3:	83 c4 10             	add    esp,0x10
c00135c6:	83 ec 08             	sub    esp,0x8
c00135c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135d1:	e8 89 ed ff ff       	call   c001235f <Thr::loadProgramIntoMemory(Process*, char const*)>
c00135d6:	83 c4 10             	add    esp,0x10
c00135d9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00135dd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00135e1:	83 f0 01             	xor    eax,0x1
c00135e4:	88 c2                	mov    dl,al
c00135e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135ea:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00135f0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00135f4:	25 ff 00 00 00       	and    eax,0xff
c00135f9:	83 ec 08             	sub    esp,0x8
c00135fc:	50                   	push   eax
c00135fd:	68 94 eb 01 c0       	push   0xc001eb94
c0013602:	e8 e5 75 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0013607:	83 c4 10             	add    esp,0x10
c001360a:	90                   	nop
c001360b:	83 c4 14             	add    esp,0x14
c001360e:	5b                   	pop    ebx
c001360f:	5e                   	pop    esi
c0013610:	c3                   	ret    
c0013611:	90                   	nop
c0013612:	66 90                	xchg   ax,ax

c0013614 <Process::Process(bool, char const*, Process*, char**)>:
c0013614:	56                   	push   esi
c0013615:	53                   	push   ebx
c0013616:	83 ec 24             	sub    esp,0x24
c0013619:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001361d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013621:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013625:	05 0c 02 00 00       	add    eax,0x20c
c001362a:	bb 07 00 00 00       	mov    ebx,0x7
c001362f:	89 c6                	mov    esi,eax
c0013631:	8d 76 00             	lea    esi,[esi+0x0]
c0013634:	85 db                	test   ebx,ebx
c0013636:	78 14                	js     c001364c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0013638:	83 ec 0c             	sub    esp,0xc
c001363b:	56                   	push   esi
c001363c:	e8 fb 94 00 00       	call   c001cb3c <ThreadControlBlock::ThreadControlBlock()>
c0013641:	83 c4 10             	add    esp,0x10
c0013644:	83 c6 5f             	add    esi,0x5f
c0013647:	4b                   	dec    ebx
c0013648:	eb ea                	jmp    c0013634 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001364a:	66 90                	xchg   ax,ax
c001364c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013650:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0013657:	83 ec 0c             	sub    esp,0xc
c001365a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001365e:	e8 11 cf ff ff       	call   c0010574 <Krnl::newProcessEnv(Process*)>
c0013663:	83 c4 10             	add    esp,0x10
c0013666:	89 c2                	mov    edx,eax
c0013668:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001366c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013672:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013676:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001367f:	a1 90 f9 01 c0       	mov    eax,ds:0xc001f990
c0013684:	8d 50 01             	lea    edx,[eax+0x1]
c0013687:	89 15 90 f9 01 c0    	mov    DWORD PTR ds:0xc001f990,edx
c001368d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013691:	89 02                	mov    DWORD PTR [edx],eax
c0013693:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001369b:	83 ec 0c             	sub    esp,0xc
c001369e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00136a2:	e8 b6 47 ff ff       	call   c0007e5d <malloc>
c00136a7:	83 c4 10             	add    esp,0x10
c00136aa:	89 c3                	mov    ebx,eax
c00136ac:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00136b0:	25 ff 00 00 00       	and    eax,0xff
c00136b5:	83 ec 08             	sub    esp,0x8
c00136b8:	50                   	push   eax
c00136b9:	53                   	push   ebx
c00136ba:	e8 1d 6e ff ff       	call   c000a4dc <VAS::VAS(bool)>
c00136bf:	83 c4 10             	add    esp,0x10
c00136c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136c6:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00136cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136d0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00136da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136de:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00136e2:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00136e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136ec:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00136f2:	85 c0                	test   eax,eax
c00136f4:	74 42                	je     c0013738 <Process::Process(bool, char const*, Process*, char**)+0x124>
c00136f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136fa:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013700:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013706:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001370a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013710:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013714:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001371a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013720:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013724:	05 0c 01 00 00       	add    eax,0x10c
c0013729:	83 ec 08             	sub    esp,0x8
c001372c:	52                   	push   edx
c001372d:	50                   	push   eax
c001372e:	e8 ed ce fe ff       	call   c0000620 <strcpy>
c0013733:	83 c4 10             	add    esp,0x10
c0013736:	eb 64                	jmp    c001379c <Process::Process(bool, char const*, Process*, char**)+0x188>
c0013738:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0013740:	83 ec 0c             	sub    esp,0xc
c0013743:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013747:	e8 11 47 ff ff       	call   c0007e5d <malloc>
c001374c:	83 c4 10             	add    esp,0x10
c001374f:	89 c3                	mov    ebx,eax
c0013751:	83 ec 08             	sub    esp,0x8
c0013754:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013758:	53                   	push   ebx
c0013759:	e8 32 59 ff ff       	call   c0009090 <VgaText::VgaText(char const*)>
c001375e:	83 c4 10             	add    esp,0x10
c0013761:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013765:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001376b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001376f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013775:	83 ec 0c             	sub    esp,0xc
c0013778:	50                   	push   eax
c0013779:	e8 b2 51 ff ff       	call   c0008930 <addToTerminalCycle(VgaText*)>
c001377e:	83 c4 10             	add    esp,0x10
c0013781:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013785:	05 0c 01 00 00       	add    eax,0x10c
c001378a:	83 ec 08             	sub    esp,0x8
c001378d:	68 3d eb 01 c0       	push   0xc001eb3d
c0013792:	50                   	push   eax
c0013793:	e8 88 ce fe ff       	call   c0000620 <strcpy>
c0013798:	83 c4 10             	add    esp,0x10
c001379b:	90                   	nop
c001379c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137a0:	83 c0 0c             	add    eax,0xc
c00137a3:	83 ec 08             	sub    esp,0x8
c00137a6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00137aa:	50                   	push   eax
c00137ab:	e8 70 ce fe ff       	call   c0000620 <strcpy>
c00137b0:	83 c4 10             	add    esp,0x10
c00137b3:	83 ec 08             	sub    esp,0x8
c00137b6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00137ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00137be:	e8 01 fc ff ff       	call   c00133c4 <Process::addArgs(char**)>
c00137c3:	83 c4 10             	add    esp,0x10
c00137c6:	90                   	nop
c00137c7:	83 c4 24             	add    esp,0x24
c00137ca:	5b                   	pop    ebx
c00137cb:	5e                   	pop    esi
c00137cc:	c3                   	ret    
c00137cd:	8d 76 00             	lea    esi,[esi+0x0]

c00137d0 <taskStartupFunction>:
c00137d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137d5:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00137d8:	c3                   	ret    
c00137d9:	90                   	nop
c00137da:	66 90                	xchg   ax,ax

c00137dc <Semaphore::Semaphore(int)>:
c00137dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00137e4:	89 10                	mov    DWORD PTR [eax],edx
c00137e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137ea:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00137f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00137fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013800:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013807:	90                   	nop
c0013808:	c3                   	ret    
c0013809:	90                   	nop
c001380a:	66 90                	xchg   ax,ax

c001380c <Mutex::Mutex()>:
c001380c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013810:	6a 01                	push   0x1
c0013812:	50                   	push   eax
c0013813:	e8 c4 ff ff ff       	call   c00137dc <Semaphore::Semaphore(int)>
c0013818:	83 c4 08             	add    esp,0x8
c001381b:	90                   	nop
c001381c:	c3                   	ret    
c001381d:	90                   	nop
c001381e:	66 90                	xchg   ax,ax

c0013820 <Process::createThread(void (*)(void*), void*, int)>:
c0013820:	57                   	push   edi
c0013821:	31 c9                	xor    ecx,ecx
c0013823:	56                   	push   esi
c0013824:	53                   	push   ebx
c0013825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013829:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0013830:	89 f2                	mov    edx,esi
c0013832:	66 90                	xchg   ax,ax
c0013834:	31 c0                	xor    eax,eax
c0013836:	66 89 d0             	mov    ax,dx
c0013839:	83 e2 01             	and    edx,0x1
c001383c:	74 12                	je     c0013850 <Process::createThread(void (*)(void*), void*, int)+0x30>
c001383e:	d1 f8                	sar    eax,1
c0013840:	41                   	inc    ecx
c0013841:	89 c2                	mov    edx,eax
c0013843:	83 f9 10             	cmp    ecx,0x10
c0013846:	75 ec                	jne    c0013834 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0013848:	31 db                	xor    ebx,ebx
c001384a:	89 d8                	mov    eax,ebx
c001384c:	5b                   	pop    ebx
c001384d:	5e                   	pop    esi
c001384e:	5f                   	pop    edi
c001384f:	c3                   	ret    
c0013850:	b8 01 00 00 00       	mov    eax,0x1
c0013855:	d3 e0                	shl    eax,cl
c0013857:	09 c6                	or     esi,eax
c0013859:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001385c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0013863:	01 c0                	add    eax,eax
c0013865:	01 c8                	add    eax,ecx
c0013867:	8d 04 80             	lea    eax,[eax+eax*4]
c001386a:	01 d8                	add    eax,ebx
c001386c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0013873:	75 0b                	jne    c0013880 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0013875:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001387f:	90                   	nop
c0013880:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013886:	83 ec 08             	sub    esp,0x8
c0013889:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001388c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001388f:	01 c0                	add    eax,eax
c0013891:	01 c8                	add    eax,ecx
c0013893:	8d 3c 80             	lea    edi,[eax+eax*4]
c0013896:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0013899:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001389f:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00138a5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00138a9:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00138af:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00138b5:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00138bc:	89 ca                	mov    edx,ecx
c00138be:	f7 da                	neg    edx
c00138c0:	c1 e2 15             	shl    edx,0x15
c00138c3:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00138c9:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00138cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00138d3:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00138dd:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00138e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00138e7:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00138ed:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00138f7:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0013901:	53                   	push   ebx
c0013902:	68 a4 3e 02 c0       	push   0xc0023ea4
c0013907:	e8 d0 8f 00 00       	call   c001c8dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001390c:	83 c4 10             	add    esp,0x10
c001390f:	89 d8                	mov    eax,ebx
c0013911:	5b                   	pop    ebx
c0013912:	5e                   	pop    esi
c0013913:	5f                   	pop    edi
c0013914:	c3                   	ret    
c0013915:	90                   	nop
c0013916:	66 90                	xchg   ax,ax

c0013918 <Process::createUserThread()>:
c0013918:	83 ec 0c             	sub    esp,0xc
c001391b:	68 80 00 00 00       	push   0x80
c0013920:	6a 00                	push   0x0
c0013922:	68 b8 32 01 c0       	push   0xc00132b8
c0013927:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001392b:	50                   	push   eax
c001392c:	e8 ef fe ff ff       	call   c0013820 <Process::createThread(void (*)(void*), void*, int)>
c0013931:	83 c4 1c             	add    esp,0x1c
c0013934:	c3                   	ret    
c0013935:	8d 76 00             	lea    esi,[esi+0x0]

c0013938 <setupMultitasking(void (*)())>:
c0013938:	56                   	push   esi
c0013939:	53                   	push   ebx
c001393a:	53                   	push   ebx
c001393b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001393f:	eb 13                	jmp    c0013954 <setupMultitasking(void (*)())+0x1c>
c0013941:	8d 76 00             	lea    esi,[esi+0x0]
c0013944:	83 ec 0c             	sub    esp,0xc
c0013947:	68 a4 3e 02 c0       	push   0xc0023ea4
c001394c:	e8 d3 8e 00 00       	call   c001c824 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013951:	83 c4 10             	add    esp,0x10
c0013954:	83 ec 0c             	sub    esp,0xc
c0013957:	68 a4 3e 02 c0       	push   0xc0023ea4
c001395c:	e8 9f 8e 00 00       	call   c001c800 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013961:	83 c4 10             	add    esp,0x10
c0013964:	84 c0                	test   al,al
c0013966:	74 dc                	je     c0013944 <setupMultitasking(void (*)())+0xc>
c0013968:	83 ec 0c             	sub    esp,0xc
c001396b:	68 1f 07 00 00       	push   0x71f
c0013970:	e8 e8 44 ff ff       	call   c0007e5d <malloc>
c0013975:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001397c:	89 c3                	mov    ebx,eax
c001397e:	6a 00                	push   0x0
c0013980:	68 41 eb 01 c0       	push   0xc001eb41
c0013985:	6a 01                	push   0x1
c0013987:	50                   	push   eax
c0013988:	e8 87 fc ff ff       	call   c0013614 <Process::Process(bool, char const*, Process*, char**)>
c001398d:	83 c4 14             	add    esp,0x14
c0013990:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0013996:	89 1d b0 3e 02 c0    	mov    DWORD PTR ds:0xc0023eb0,ebx
c001399c:	50                   	push   eax
c001399d:	e8 eb 51 ff ff       	call   c0008b8d <setActiveTerminal(VgaText*)>
c00139a2:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00139aa:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00139b4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00139ba:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00139bd:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00139c7:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00139cd:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00139d3:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00139dd:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00139e7:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00139f1:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00139f7:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00139fd:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0013a07:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013a0d:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0013a17:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013a1d:	5a                   	pop    edx
c0013a1e:	59                   	pop    ecx
c0013a1f:	68 3d eb 01 c0       	push   0xc001eb3d
c0013a24:	50                   	push   eax
c0013a25:	e8 f6 cb fe ff       	call   c0000620 <strcpy>
c0013a2a:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013a31:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013a35:	83 c4 14             	add    esp,0x14
c0013a38:	5b                   	pop    ebx
c0013a39:	5e                   	pop    esi
c0013a3a:	e9 4a c8 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0013a3f:	90                   	nop

c0013a40 <schedule()>:
c0013a40:	8b 15 84 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e84
c0013a46:	85 d2                	test   edx,edx
c0013a48:	74 0e                	je     c0013a58 <schedule()+0x18>
c0013a4a:	c7 05 80 3e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x1
c0013a54:	c3                   	ret    
c0013a55:	8d 76 00             	lea    esi,[esi+0x0]
c0013a58:	53                   	push   ebx
c0013a59:	83 ec 14             	sub    esp,0x14
c0013a5c:	68 a4 3e 02 c0       	push   0xc0023ea4
c0013a61:	e8 9a 8d 00 00       	call   c001c800 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013a66:	83 c4 10             	add    esp,0x10
c0013a69:	84 c0                	test   al,al
c0013a6b:	75 3b                	jne    c0013aa8 <schedule()+0x68>
c0013a6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a72:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013a75:	4a                   	dec    edx
c0013a76:	74 38                	je     c0013ab0 <schedule()+0x70>
c0013a78:	83 ec 0c             	sub    esp,0xc
c0013a7b:	68 a4 3e 02 c0       	push   0xc0023ea4
c0013a80:	e8 97 8d 00 00       	call   c001c81c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a85:	c7 04 24 a4 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ea4
c0013a8c:	89 c3                	mov    ebx,eax
c0013a8e:	e8 91 8d 00 00       	call   c001c824 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013a93:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0013a9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a9d:	e8 6e f8 ff ff       	call   c0013310 <switchToThread(ThreadControlBlock*)>
c0013aa2:	83 c4 10             	add    esp,0x10
c0013aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0013aa8:	83 c4 08             	add    esp,0x8
c0013aab:	5b                   	pop    ebx
c0013aac:	c3                   	ret    
c0013aad:	8d 76 00             	lea    esi,[esi+0x0]
c0013ab0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013ab7:	83 ec 08             	sub    esp,0x8
c0013aba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013abf:	50                   	push   eax
c0013ac0:	68 a4 3e 02 c0       	push   0xc0023ea4
c0013ac5:	e8 12 8e 00 00       	call   c001c8dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013aca:	83 c4 10             	add    esp,0x10
c0013acd:	eb a9                	jmp    c0013a78 <schedule()+0x38>
c0013acf:	90                   	nop

c0013ad0 <Semaphore::tryAcquire()>:
c0013ad0:	53                   	push   ebx
c0013ad1:	83 ec 08             	sub    esp,0x8
c0013ad4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013ad8:	fa                   	cli    
c0013ad9:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0013ade:	8d 50 01             	lea    edx,[eax+0x1]
c0013ae1:	89 15 88 3e 02 c0    	mov    DWORD PTR ds:0xc0023e88,edx
c0013ae7:	8b 15 84 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e84
c0013aed:	8d 5a 01             	lea    ebx,[edx+0x1]
c0013af0:	89 1d 84 3e 02 c0    	mov    DWORD PTR ds:0xc0023e84,ebx
c0013af6:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0013af9:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0013afb:	7c 33                	jl     c0013b30 <Semaphore::tryAcquire()+0x60>
c0013afd:	89 15 84 3e 02 c0    	mov    DWORD PTR ds:0xc0023e84,edx
c0013b03:	85 d2                	test   edx,edx
c0013b05:	75 0d                	jne    c0013b14 <Semaphore::tryAcquire()+0x44>
c0013b07:	8b 15 80 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e80
c0013b0d:	85 d2                	test   edx,edx
c0013b0f:	75 6b                	jne    c0013b7c <Semaphore::tryAcquire()+0xac>
c0013b11:	8d 76 00             	lea    esi,[esi+0x0]
c0013b14:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0013b19:	85 c0                	test   eax,eax
c0013b1b:	74 0b                	je     c0013b28 <Semaphore::tryAcquire()+0x58>
c0013b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b20:	31 c0                	xor    eax,eax
c0013b22:	83 c4 08             	add    esp,0x8
c0013b25:	5b                   	pop    ebx
c0013b26:	c3                   	ret    
c0013b27:	90                   	nop
c0013b28:	fb                   	sti    
c0013b29:	83 c4 08             	add    esp,0x8
c0013b2c:	5b                   	pop    ebx
c0013b2d:	c3                   	ret    
c0013b2e:	66 90                	xchg   ax,ax
c0013b30:	43                   	inc    ebx
c0013b31:	89 15 84 3e 02 c0    	mov    DWORD PTR ds:0xc0023e84,edx
c0013b37:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0013b3a:	85 d2                	test   edx,edx
c0013b3c:	75 22                	jne    c0013b60 <Semaphore::tryAcquire()+0x90>
c0013b3e:	8b 0d 80 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023e80
c0013b44:	85 c9                	test   ecx,ecx
c0013b46:	74 18                	je     c0013b60 <Semaphore::tryAcquire()+0x90>
c0013b48:	c7 05 80 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x0
c0013b52:	e8 e9 fe ff ff       	call   c0013a40 <schedule()>
c0013b57:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0013b5c:	48                   	dec    eax
c0013b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b60:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0013b65:	85 c0                	test   eax,eax
c0013b67:	75 0b                	jne    c0013b74 <Semaphore::tryAcquire()+0xa4>
c0013b69:	fb                   	sti    
c0013b6a:	b0 01                	mov    al,0x1
c0013b6c:	83 c4 08             	add    esp,0x8
c0013b6f:	5b                   	pop    ebx
c0013b70:	c3                   	ret    
c0013b71:	8d 76 00             	lea    esi,[esi+0x0]
c0013b74:	b0 01                	mov    al,0x1
c0013b76:	83 c4 08             	add    esp,0x8
c0013b79:	5b                   	pop    ebx
c0013b7a:	c3                   	ret    
c0013b7b:	90                   	nop
c0013b7c:	c7 05 80 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x0
c0013b86:	e8 b5 fe ff ff       	call   c0013a40 <schedule()>
c0013b8b:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0013b90:	48                   	dec    eax
c0013b91:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0013b96:	85 c0                	test   eax,eax
c0013b98:	75 86                	jne    c0013b20 <Semaphore::tryAcquire()+0x50>
c0013b9a:	eb 8c                	jmp    c0013b28 <Semaphore::tryAcquire()+0x58>

c0013b9c <Semaphore::assertLocked(char const*)>:
c0013b9c:	83 ec 0c             	sub    esp,0xc
c0013b9f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ba3:	fa                   	cli    
c0013ba4:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0013baa:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c0013baf:	8d 48 01             	lea    ecx,[eax+0x1]
c0013bb2:	89 0d 84 3e 02 c0    	mov    DWORD PTR ds:0xc0023e84,ecx
c0013bb8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013bba:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013bbd:	7c 29                	jl     c0013be8 <Semaphore::assertLocked(char const*)+0x4c>
c0013bbf:	90                   	nop
c0013bc0:	a3 84 3e 02 c0       	mov    ds:0xc0023e84,eax
c0013bc5:	85 c0                	test   eax,eax
c0013bc7:	75 0b                	jne    c0013bd4 <Semaphore::assertLocked(char const*)+0x38>
c0013bc9:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0013bce:	85 c0                	test   eax,eax
c0013bd0:	75 2e                	jne    c0013c00 <Semaphore::assertLocked(char const*)+0x64>
c0013bd2:	66 90                	xchg   ax,ax
c0013bd4:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0013bd9:	48                   	dec    eax
c0013bda:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0013bdf:	75 03                	jne    c0013be4 <Semaphore::assertLocked(char const*)+0x48>
c0013be1:	fb                   	sti    
c0013be2:	66 90                	xchg   ax,ax
c0013be4:	83 c4 0c             	add    esp,0xc
c0013be7:	c3                   	ret    
c0013be8:	83 ec 0c             	sub    esp,0xc
c0013beb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013bef:	52                   	push   edx
c0013bf0:	e8 f6 ca ff ff       	call   c00106eb <Krnl::panic(char const*)>
c0013bf5:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c0013bfa:	83 c4 10             	add    esp,0x10
c0013bfd:	48                   	dec    eax
c0013bfe:	eb c0                	jmp    c0013bc0 <Semaphore::assertLocked(char const*)+0x24>
c0013c00:	c7 05 80 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x0
c0013c0a:	e8 31 fe ff ff       	call   c0013a40 <schedule()>
c0013c0f:	eb c3                	jmp    c0013bd4 <Semaphore::assertLocked(char const*)+0x38>
c0013c11:	8d 76 00             	lea    esi,[esi+0x0]

c0013c14 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013c14:	83 ec 0c             	sub    esp,0xc
c0013c17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c20:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013c23:	e8 18 fe ff ff       	call   c0013a40 <schedule()>
c0013c28:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0013c2d:	48                   	dec    eax
c0013c2e:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0013c33:	75 03                	jne    c0013c38 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013c35:	fb                   	sti    
c0013c36:	66 90                	xchg   ax,ax
c0013c38:	83 c4 0c             	add    esp,0xc
c0013c3b:	c3                   	ret    

c0013c3c <blockTask(TaskState)>:
c0013c3c:	83 ec 0c             	sub    esp,0xc
c0013c3f:	fa                   	cli    
c0013c40:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0013c46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c4f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013c52:	e8 e9 fd ff ff       	call   c0013a40 <schedule()>
c0013c57:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0013c5c:	48                   	dec    eax
c0013c5d:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0013c62:	75 04                	jne    c0013c68 <blockTask(TaskState)+0x2c>
c0013c64:	fb                   	sti    
c0013c65:	8d 76 00             	lea    esi,[esi+0x0]
c0013c68:	83 c4 0c             	add    esp,0xc
c0013c6b:	c3                   	ret    

c0013c6c <waitTask(int, int*, int)>:
c0013c6c:	83 ec 18             	sub    esp,0x18
c0013c6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c74:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013c78:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013c7b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c84:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013c87:	6a 07                	push   0x7
c0013c89:	e8 ae ff ff ff       	call   c0013c3c <blockTask(TaskState)>
c0013c8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c93:	83 c4 10             	add    esp,0x10
c0013c96:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013c99:	85 d2                	test   edx,edx
c0013c9b:	74 0b                	je     c0013ca8 <waitTask(int, int*, int)+0x3c>
c0013c9d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013ca0:	89 02                	mov    DWORD PTR [edx],eax
c0013ca2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ca7:	90                   	nop
c0013ca8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013cab:	83 c4 0c             	add    esp,0xc
c0013cae:	c3                   	ret    
c0013caf:	90                   	nop

c0013cb0 <milliTenthSleepUntil(unsigned int)>:
c0013cb0:	83 ec 0c             	sub    esp,0xc
c0013cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cb7:	39 05 8c 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f8c,eax
c0013cbd:	76 05                	jbe    c0013cc4 <milliTenthSleepUntil(unsigned int)+0x14>
c0013cbf:	90                   	nop
c0013cc0:	83 c4 0c             	add    esp,0xc
c0013cc3:	c3                   	ret    
c0013cc4:	fa                   	cli    
c0013cc5:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0013ccb:	83 ec 08             	sub    esp,0x8
c0013cce:	ff 05 84 3e 02 c0    	inc    DWORD PTR ds:0xc0023e84
c0013cd4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013cda:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013cdd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013ce3:	52                   	push   edx
c0013ce4:	68 98 3e 02 c0       	push   0xc0023e98
c0013ce9:	e8 ee 8b 00 00       	call   c001c8dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013cee:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013cf5:	e8 42 ff ff ff       	call   c0013c3c <blockTask(TaskState)>
c0013cfa:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c0013cff:	83 c4 10             	add    esp,0x10
c0013d02:	48                   	dec    eax
c0013d03:	a3 84 3e 02 c0       	mov    ds:0xc0023e84,eax
c0013d08:	85 c0                	test   eax,eax
c0013d0a:	75 0c                	jne    c0013d18 <milliTenthSleepUntil(unsigned int)+0x68>
c0013d0c:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0013d11:	85 c0                	test   eax,eax
c0013d13:	75 17                	jne    c0013d2c <milliTenthSleepUntil(unsigned int)+0x7c>
c0013d15:	8d 76 00             	lea    esi,[esi+0x0]
c0013d18:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0013d1d:	48                   	dec    eax
c0013d1e:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0013d23:	75 9b                	jne    c0013cc0 <milliTenthSleepUntil(unsigned int)+0x10>
c0013d25:	fb                   	sti    
c0013d26:	83 c4 0c             	add    esp,0xc
c0013d29:	c3                   	ret    
c0013d2a:	66 90                	xchg   ax,ax
c0013d2c:	c7 05 80 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x0
c0013d36:	e8 05 fd ff ff       	call   c0013a40 <schedule()>
c0013d3b:	eb db                	jmp    c0013d18 <milliTenthSleepUntil(unsigned int)+0x68>
c0013d3d:	8d 76 00             	lea    esi,[esi+0x0]

c0013d40 <milliTenthSleep(unsigned int)>:
c0013d40:	a1 8c 2f 02 c0       	mov    eax,ds:0xc0022f8c
c0013d45:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013d49:	e9 62 ff ff ff       	jmp    c0013cb0 <milliTenthSleepUntil(unsigned int)>
c0013d4e:	66 90                	xchg   ax,ax

c0013d50 <sleep(unsigned int)>:
c0013d50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d54:	8d 04 80             	lea    eax,[eax+eax*4]
c0013d57:	8d 04 80             	lea    eax,[eax+eax*4]
c0013d5a:	8d 04 80             	lea    eax,[eax+eax*4]
c0013d5d:	8d 04 80             	lea    eax,[eax+eax*4]
c0013d60:	c1 e0 04             	shl    eax,0x4
c0013d63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d67:	eb d7                	jmp    c0013d40 <milliTenthSleep(unsigned int)>
c0013d69:	90                   	nop
c0013d6a:	66 90                	xchg   ax,ax

c0013d6c <Semaphore::acquire()>:
c0013d6c:	83 ec 0c             	sub    esp,0xc
c0013d6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d73:	fa                   	cli    
c0013d74:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c0013d79:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0013d7f:	8d 48 01             	lea    ecx,[eax+0x1]
c0013d82:	89 0d 84 3e 02 c0    	mov    DWORD PTR ds:0xc0023e84,ecx
c0013d88:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013d8b:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013d8d:	7d 2d                	jge    c0013dbc <Semaphore::acquire()+0x50>
c0013d8f:	41                   	inc    ecx
c0013d90:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013d93:	90                   	nop
c0013d94:	a3 84 3e 02 c0       	mov    ds:0xc0023e84,eax
c0013d99:	85 c0                	test   eax,eax
c0013d9b:	75 0b                	jne    c0013da8 <Semaphore::acquire()+0x3c>
c0013d9d:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0013da2:	85 c0                	test   eax,eax
c0013da4:	75 62                	jne    c0013e08 <Semaphore::acquire()+0x9c>
c0013da6:	66 90                	xchg   ax,ax
c0013da8:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0013dad:	48                   	dec    eax
c0013dae:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0013db3:	75 03                	jne    c0013db8 <Semaphore::acquire()+0x4c>
c0013db5:	fb                   	sti    
c0013db6:	66 90                	xchg   ax,ax
c0013db8:	83 c4 0c             	add    esp,0xc
c0013dbb:	c3                   	ret    
c0013dbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013dc1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013dc8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013dcb:	85 c9                	test   ecx,ecx
c0013dcd:	74 4d                	je     c0013e1c <Semaphore::acquire()+0xb0>
c0013dcf:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013dd2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013dd8:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013ddb:	90                   	nop
c0013ddc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013de1:	83 ec 0c             	sub    esp,0xc
c0013de4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013de7:	68 bc eb 01 c0       	push   0xc001ebbc
c0013dec:	e8 fb 6d ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0013df1:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013df8:	e8 3f fe ff ff       	call   c0013c3c <blockTask(TaskState)>
c0013dfd:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c0013e02:	83 c4 10             	add    esp,0x10
c0013e05:	48                   	dec    eax
c0013e06:	eb 8c                	jmp    c0013d94 <Semaphore::acquire()+0x28>
c0013e08:	c7 05 80 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x0
c0013e12:	e8 29 fc ff ff       	call   c0013a40 <schedule()>
c0013e17:	eb 8f                	jmp    c0013da8 <Semaphore::acquire()+0x3c>
c0013e19:	8d 76 00             	lea    esi,[esi+0x0]
c0013e1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e21:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013e24:	eb b6                	jmp    c0013ddc <Semaphore::acquire()+0x70>
c0013e26:	66 90                	xchg   ax,ax

c0013e28 <taskReturned>:
c0013e28:	83 ec 18             	sub    esp,0x18
c0013e2b:	68 dc eb 01 c0       	push   0xc001ebdc
c0013e30:	e8 b6 c8 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c0013e35:	83 c4 10             	add    esp,0x10
c0013e38:	83 ec 0c             	sub    esp,0xc
c0013e3b:	6a 02                	push   0x2
c0013e3d:	e8 fa fd ff ff       	call   c0013c3c <blockTask(TaskState)>
c0013e42:	fa                   	cli    
c0013e43:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0013e49:	e8 f2 fb ff ff       	call   c0013a40 <schedule()>
c0013e4e:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0013e53:	83 c4 10             	add    esp,0x10
c0013e56:	48                   	dec    eax
c0013e57:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0013e5c:	85 c0                	test   eax,eax
c0013e5e:	75 d8                	jne    c0013e38 <taskReturned+0x10>
c0013e60:	fb                   	sti    
c0013e61:	eb d5                	jmp    c0013e38 <taskReturned+0x10>
c0013e63:	90                   	nop

c0013e64 <Thr::processFromPID(int)>:
c0013e64:	57                   	push   edi
c0013e65:	56                   	push   esi
c0013e66:	53                   	push   ebx
c0013e67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e6b:	fa                   	cli    
c0013e6c:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0013e72:	83 ec 0c             	sub    esp,0xc
c0013e75:	68 a4 3e 02 c0       	push   0xc0023ea4
c0013e7a:	e8 9d 89 00 00       	call   c001c81c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013e7f:	83 c4 10             	add    esp,0x10
c0013e82:	89 c7                	mov    edi,eax
c0013e84:	eb 16                	jmp    c0013e9c <Thr::processFromPID(int)+0x38>
c0013e86:	66 90                	xchg   ax,ax
c0013e88:	83 ec 0c             	sub    esp,0xc
c0013e8b:	68 a4 3e 02 c0       	push   0xc0023ea4
c0013e90:	e8 87 89 00 00       	call   c001c81c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013e95:	83 c4 10             	add    esp,0x10
c0013e98:	39 f8                	cmp    eax,edi
c0013e9a:	74 4c                	je     c0013ee8 <Thr::processFromPID(int)+0x84>
c0013e9c:	83 ec 0c             	sub    esp,0xc
c0013e9f:	68 a4 3e 02 c0       	push   0xc0023ea4
c0013ea4:	e8 73 89 00 00       	call   c001c81c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ea9:	c7 04 24 a4 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ea4
c0013eb0:	89 c3                	mov    ebx,eax
c0013eb2:	e8 6d 89 00 00       	call   c001c824 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013eb7:	58                   	pop    eax
c0013eb8:	5a                   	pop    edx
c0013eb9:	53                   	push   ebx
c0013eba:	68 a4 3e 02 c0       	push   0xc0023ea4
c0013ebf:	e8 18 8a 00 00       	call   c001c8dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013ec4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ec7:	83 c4 10             	add    esp,0x10
c0013eca:	39 30                	cmp    DWORD PTR [eax],esi
c0013ecc:	75 ba                	jne    c0013e88 <Thr::processFromPID(int)+0x24>
c0013ece:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0013ed3:	48                   	dec    eax
c0013ed4:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0013ed9:	74 09                	je     c0013ee4 <Thr::processFromPID(int)+0x80>
c0013edb:	90                   	nop
c0013edc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013edf:	5b                   	pop    ebx
c0013ee0:	5e                   	pop    esi
c0013ee1:	5f                   	pop    edi
c0013ee2:	c3                   	ret    
c0013ee3:	90                   	nop
c0013ee4:	fb                   	sti    
c0013ee5:	eb f5                	jmp    c0013edc <Thr::processFromPID(int)+0x78>
c0013ee7:	90                   	nop
c0013ee8:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0013eed:	48                   	dec    eax
c0013eee:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0013ef3:	75 07                	jne    c0013efc <Thr::processFromPID(int)+0x98>
c0013ef5:	fb                   	sti    
c0013ef6:	5b                   	pop    ebx
c0013ef7:	5e                   	pop    esi
c0013ef8:	5f                   	pop    edi
c0013ef9:	c3                   	ret    
c0013efa:	66 90                	xchg   ax,ax
c0013efc:	5b                   	pop    ebx
c0013efd:	31 c0                	xor    eax,eax
c0013eff:	5e                   	pop    esi
c0013f00:	5f                   	pop    edi
c0013f01:	c3                   	ret    
c0013f02:	66 90                	xchg   ax,ax

c0013f04 <unblockTask(ThreadControlBlock*)>:
c0013f04:	53                   	push   ebx
c0013f05:	83 ec 08             	sub    esp,0x8
c0013f08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f0c:	fa                   	cli    
c0013f0d:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0013f13:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013f16:	85 c0                	test   eax,eax
c0013f18:	74 66                	je     c0013f80 <unblockTask(ThreadControlBlock*)+0x7c>
c0013f1a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013f1d:	48                   	dec    eax
c0013f1e:	74 38                	je     c0013f58 <unblockTask(ThreadControlBlock*)+0x54>
c0013f20:	83 ec 0c             	sub    esp,0xc
c0013f23:	68 a4 3e 02 c0       	push   0xc0023ea4
c0013f28:	e8 ef 88 00 00       	call   c001c81c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f2d:	83 c4 10             	add    esp,0x10
c0013f30:	85 c0                	test   eax,eax
c0013f32:	75 1c                	jne    c0013f50 <unblockTask(ThreadControlBlock*)+0x4c>
c0013f34:	eb 5e                	jmp    c0013f94 <unblockTask(ThreadControlBlock*)+0x90>
c0013f36:	66 90                	xchg   ax,ax
c0013f38:	83 ec 08             	sub    esp,0x8
c0013f3b:	50                   	push   eax
c0013f3c:	68 a4 3e 02 c0       	push   0xc0023ea4
c0013f41:	e8 86 8c 00 00       	call   c001cbcc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013f46:	83 c4 10             	add    esp,0x10
c0013f49:	85 c0                	test   eax,eax
c0013f4b:	74 47                	je     c0013f94 <unblockTask(ThreadControlBlock*)+0x90>
c0013f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0013f50:	39 c3                	cmp    ebx,eax
c0013f52:	75 e4                	jne    c0013f38 <unblockTask(ThreadControlBlock*)+0x34>
c0013f54:	eb 12                	jmp    c0013f68 <unblockTask(ThreadControlBlock*)+0x64>
c0013f56:	66 90                	xchg   ax,ax
c0013f58:	83 ec 0c             	sub    esp,0xc
c0013f5b:	68 5f eb 01 c0       	push   0xc001eb5f
c0013f60:	e8 87 6c ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0013f65:	83 c4 10             	add    esp,0x10
c0013f68:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0013f6d:	48                   	dec    eax
c0013f6e:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0013f73:	75 03                	jne    c0013f78 <unblockTask(ThreadControlBlock*)+0x74>
c0013f75:	fb                   	sti    
c0013f76:	66 90                	xchg   ax,ax
c0013f78:	83 c4 08             	add    esp,0x8
c0013f7b:	5b                   	pop    ebx
c0013f7c:	c3                   	ret    
c0013f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0013f80:	83 ec 0c             	sub    esp,0xc
c0013f83:	68 48 eb 01 c0       	push   0xc001eb48
c0013f88:	e8 5f 6c ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0013f8d:	83 c4 10             	add    esp,0x10
c0013f90:	eb d6                	jmp    c0013f68 <unblockTask(ThreadControlBlock*)+0x64>
c0013f92:	66 90                	xchg   ax,ax
c0013f94:	83 ec 08             	sub    esp,0x8
c0013f97:	53                   	push   ebx
c0013f98:	68 a4 3e 02 c0       	push   0xc0023ea4
c0013f9d:	e8 3a 89 00 00       	call   c001c8dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013fa2:	83 c4 10             	add    esp,0x10
c0013fa5:	eb c1                	jmp    c0013f68 <unblockTask(ThreadControlBlock*)+0x64>
c0013fa7:	90                   	nop

c0013fa8 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013fa8:	55                   	push   ebp
c0013fa9:	57                   	push   edi
c0013faa:	56                   	push   esi
c0013fab:	53                   	push   ebx
c0013fac:	83 ec 1c             	sub    esp,0x1c
c0013faf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013fb3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fb6:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013fbc:	85 ed                	test   ebp,ebp
c0013fbe:	7e 24                	jle    c0013fe4 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013fc0:	31 f6                	xor    esi,esi
c0013fc2:	66 90                	xchg   ax,ax
c0013fc4:	83 ec 0c             	sub    esp,0xc
c0013fc7:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013fce:	46                   	inc    esi
c0013fcf:	57                   	push   edi
c0013fd0:	e8 98 3e ff ff       	call   c0007e6d <free>
c0013fd5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fd8:	83 c4 10             	add    esp,0x10
c0013fdb:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013fe1:	7f e1                	jg     c0013fc4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013fe3:	90                   	nop
c0013fe4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013fee:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013ff3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013ff6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013ff9:	d3 c0                	rol    eax,cl
c0013ffb:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0014002:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014005:	89 f7                	mov    edi,esi
c0014007:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001400f:	0f 85 77 01 00 00    	jne    c001418c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014015:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001401b:	85 ed                	test   ebp,ebp
c001401d:	74 1d                	je     c001403c <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c001401f:	83 ec 0c             	sub    esp,0xc
c0014022:	55                   	push   ebp
c0014023:	e8 68 c4 ff ff       	call   c0010490 <EnvVarContainer::~EnvVarContainer()>
c0014028:	59                   	pop    ecx
c0014029:	5e                   	pop    esi
c001402a:	6a 0c                	push   0xc
c001402c:	55                   	push   ebp
c001402d:	e8 c4 6a ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c0014032:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014035:	83 c4 10             	add    esp,0x10
c0014038:	89 f7                	mov    edi,esi
c001403a:	66 90                	xchg   ax,ax
c001403c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014042:	85 c0                	test   eax,eax
c0014044:	0f 84 b6 00 00 00    	je     c0014100 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c001404a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c001404d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0014051:	31 c9                	xor    ecx,ecx
c0014053:	eb 17                	jmp    c001406c <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0014055:	8d 76 00             	lea    esi,[esi+0x0]
c0014058:	41                   	inc    ecx
c0014059:	83 f9 10             	cmp    ecx,0x10
c001405c:	0f 84 9e 00 00 00    	je     c0014100 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0014062:	66 90                	xchg   ax,ax
c0014064:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001406a:	66 90                	xchg   ax,ax
c001406c:	31 d2                	xor    edx,edx
c001406e:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0014075:	d3 fa                	sar    edx,cl
c0014077:	83 e2 01             	and    edx,0x1
c001407a:	74 dc                	je     c0014058 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001407c:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c001407f:	01 d2                	add    edx,edx
c0014081:	01 ca                	add    edx,ecx
c0014083:	8d 14 92             	lea    edx,[edx+edx*4]
c0014086:	01 d0                	add    eax,edx
c0014088:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001408e:	83 fd 07             	cmp    ebp,0x7
c0014091:	75 c5                	jne    c0014058 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014093:	05 40 02 00 00       	add    eax,0x240
c0014098:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001409b:	83 fd ff             	cmp    ebp,0xffffffff
c001409e:	0f 8c f0 00 00 00    	jl     c0014194 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00140a4:	0f 84 ae 01 00 00    	je     c0014258 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c00140aa:	85 ed                	test   ebp,ebp
c00140ac:	0f 84 92 01 00 00    	je     c0014244 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c00140b2:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00140b4:	75 a2                	jne    c0014058 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00140b6:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00140bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00140c0:	01 d0                	add    eax,edx
c00140c2:	66 90                	xchg   ax,ax
c00140c4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00140c8:	83 ec 0c             	sub    esp,0xc
c00140cb:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00140d1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00140d4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00140da:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00140e1:	50                   	push   eax
c00140e2:	e8 1d fe ff ff       	call   c0013f04 <unblockTask(ThreadControlBlock*)>
c00140e7:	83 c4 10             	add    esp,0x10
c00140ea:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00140ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00140f1:	89 f7                	mov    edi,esi
c00140f3:	41                   	inc    ecx
c00140f4:	83 f9 10             	cmp    ecx,0x10
c00140f7:	0f 85 67 ff ff ff    	jne    c0014064 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00140fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014100:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0014106:	85 c0                	test   eax,eax
c0014108:	74 62                	je     c001416c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c001410a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0014110:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0014116:	74 54                	je     c001416c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0014118:	83 ec 0c             	sub    esp,0xc
c001411b:	68 a4 3e 02 c0       	push   0xc0023ea4
c0014120:	e8 f7 86 00 00       	call   c001c81c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014125:	c7 04 24 a4 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ea4
c001412c:	89 c7                	mov    edi,eax
c001412e:	e8 cd 86 00 00       	call   c001c800 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014133:	83 c4 10             	add    esp,0x10
c0014136:	84 c0                	test   al,al
c0014138:	0f 84 ce 00 00 00    	je     c001420c <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c001413e:	66 90                	xchg   ax,ax
c0014140:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014143:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014149:	85 d2                	test   edx,edx
c001414b:	74 0f                	je     c001415c <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c001414d:	83 ec 0c             	sub    esp,0xc
c0014150:	8b 02                	mov    eax,DWORD PTR [edx]
c0014152:	52                   	push   edx
c0014153:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014156:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014159:	83 c4 10             	add    esp,0x10
c001415c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0014166:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0014169:	8d 76 00             	lea    esi,[esi+0x0]
c001416c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0014172:	85 db                	test   ebx,ebx
c0014174:	74 16                	je     c001418c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014176:	83 ec 0c             	sub    esp,0xc
c0014179:	53                   	push   ebx
c001417a:	e8 4b 5d ff ff       	call   c0009eca <VAS::~VAS()>
c001417f:	58                   	pop    eax
c0014180:	5a                   	pop    edx
c0014181:	6a 14                	push   0x14
c0014183:	53                   	push   ebx
c0014184:	e8 6d 69 ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c0014189:	83 c4 10             	add    esp,0x10
c001418c:	83 c4 1c             	add    esp,0x1c
c001418f:	5b                   	pop    ebx
c0014190:	5e                   	pop    esi
c0014191:	5f                   	pop    edi
c0014192:	5d                   	pop    ebp
c0014193:	c3                   	ret    
c0014194:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014198:	83 ec 0c             	sub    esp,0xc
c001419b:	68 10 ec 01 c0       	push   0xc001ec10
c00141a0:	e8 46 c5 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c00141a5:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00141a8:	83 c4 10             	add    esp,0x10
c00141ab:	89 f7                	mov    edi,esi
c00141ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00141b1:	e9 a2 fe ff ff       	jmp    c0014058 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00141b6:	66 90                	xchg   ax,ax
c00141b8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00141be:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00141c4:	75 1e                	jne    c00141e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00141c6:	83 ec 0c             	sub    esp,0xc
c00141c9:	68 78 ec 01 c0       	push   0xc001ec78
c00141ce:	e8 19 6a ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00141d3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00141da:	e8 5d fa ff ff       	call   c0013c3c <blockTask(TaskState)>
c00141df:	83 c4 10             	add    esp,0x10
c00141e2:	66 90                	xchg   ax,ax
c00141e4:	83 ec 08             	sub    esp,0x8
c00141e7:	56                   	push   esi
c00141e8:	68 a4 3e 02 c0       	push   0xc0023ea4
c00141ed:	e8 ea 86 00 00       	call   c001c8dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00141f2:	c7 04 24 a4 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ea4
c00141f9:	e8 1e 86 00 00       	call   c001c81c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00141fe:	83 c4 10             	add    esp,0x10
c0014201:	39 f8                	cmp    eax,edi
c0014203:	0f 84 37 ff ff ff    	je     c0014140 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0014209:	8d 76 00             	lea    esi,[esi+0x0]
c001420c:	83 ec 0c             	sub    esp,0xc
c001420f:	68 a4 3e 02 c0       	push   0xc0023ea4
c0014214:	e8 03 86 00 00       	call   c001c81c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014219:	c7 04 24 a4 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ea4
c0014220:	89 c6                	mov    esi,eax
c0014222:	e8 fd 85 00 00       	call   c001c824 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014227:	83 c4 10             	add    esp,0x10
c001422a:	39 f3                	cmp    ebx,esi
c001422c:	74 b6                	je     c00141e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001422e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0014231:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014234:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001423a:	75 a8                	jne    c00141e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001423c:	e9 77 ff ff ff       	jmp    c00141b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0014241:	8d 76 00             	lea    esi,[esi+0x0]
c0014244:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014248:	83 ec 0c             	sub    esp,0xc
c001424b:	68 44 ec 01 c0       	push   0xc001ec44
c0014250:	e9 4b ff ff ff       	jmp    c00141a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0014255:	8d 76 00             	lea    esi,[esi+0x0]
c0014258:	8b 36                	mov    esi,DWORD PTR [esi]
c001425a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001425e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0014261:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014264:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001426a:	01 d7                	add    edi,edx
c001426c:	89 f8                	mov    eax,edi
c001426e:	e9 51 fe ff ff       	jmp    c00140c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0014273:	90                   	nop

c0014274 <cleanerTaskFunction(void*)>:
c0014274:	53                   	push   ebx
c0014275:	83 ec 08             	sub    esp,0x8
c0014278:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c001427d:	48                   	dec    eax
c001427e:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0014283:	75 03                	jne    c0014288 <cleanerTaskFunction(void*)+0x14>
c0014285:	fb                   	sti    
c0014286:	66 90                	xchg   ax,ax
c0014288:	fa                   	cli    
c0014289:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c001428e:	80 3d 6c 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e6c,0x0
c0014295:	8d 50 01             	lea    edx,[eax+0x1]
c0014298:	89 15 88 3e 02 c0    	mov    DWORD PTR ds:0xc0023e88,edx
c001429e:	0f 84 ac 00 00 00    	je     c0014350 <cleanerTaskFunction(void*)+0xdc>
c00142a4:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c00142a9:	85 c0                	test   eax,eax
c00142ab:	75 03                	jne    c00142b0 <cleanerTaskFunction(void*)+0x3c>
c00142ad:	fb                   	sti    
c00142ae:	66 90                	xchg   ax,ax
c00142b0:	c6 05 6c 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023e6c,0x0
c00142b7:	fa                   	cli    
c00142b8:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c00142be:	ff 05 84 3e 02 c0    	inc    DWORD PTR ds:0xc0023e84
c00142c4:	fa                   	cli    
c00142c5:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c00142cb:	eb 2b                	jmp    c00142f8 <cleanerTaskFunction(void*)+0x84>
c00142cd:	8d 76 00             	lea    esi,[esi+0x0]
c00142d0:	83 ec 0c             	sub    esp,0xc
c00142d3:	68 8c 3e 02 c0       	push   0xc0023e8c
c00142d8:	e8 3f 85 00 00       	call   c001c81c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00142dd:	c7 04 24 8c 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e8c
c00142e4:	89 c3                	mov    ebx,eax
c00142e6:	e8 39 85 00 00       	call   c001c824 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00142eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00142ee:	e8 b5 fc ff ff       	call   c0013fa8 <cleanupTerminatedTask(ThreadControlBlock*)>
c00142f3:	83 c4 10             	add    esp,0x10
c00142f6:	66 90                	xchg   ax,ax
c00142f8:	83 ec 0c             	sub    esp,0xc
c00142fb:	68 8c 3e 02 c0       	push   0xc0023e8c
c0014300:	e8 fb 84 00 00       	call   c001c800 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014305:	83 c4 10             	add    esp,0x10
c0014308:	84 c0                	test   al,al
c001430a:	74 c4                	je     c00142d0 <cleanerTaskFunction(void*)+0x5c>
c001430c:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0014311:	48                   	dec    eax
c0014312:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0014317:	75 03                	jne    c001431c <cleanerTaskFunction(void*)+0xa8>
c0014319:	fb                   	sti    
c001431a:	66 90                	xchg   ax,ax
c001431c:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c0014321:	48                   	dec    eax
c0014322:	a3 84 3e 02 c0       	mov    ds:0xc0023e84,eax
c0014327:	0f 85 4b ff ff ff    	jne    c0014278 <cleanerTaskFunction(void*)+0x4>
c001432d:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0014332:	85 c0                	test   eax,eax
c0014334:	0f 84 3e ff ff ff    	je     c0014278 <cleanerTaskFunction(void*)+0x4>
c001433a:	c7 05 80 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x0
c0014344:	e8 f7 f6 ff ff       	call   c0013a40 <schedule()>
c0014349:	e9 2a ff ff ff       	jmp    c0014278 <cleanerTaskFunction(void*)+0x4>
c001434e:	66 90                	xchg   ax,ax
c0014350:	83 ec 0c             	sub    esp,0xc
c0014353:	6a 02                	push   0x2
c0014355:	e8 ba f8 ff ff       	call   c0013c14 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001435a:	83 c4 10             	add    esp,0x10
c001435d:	e9 4e ff ff ff       	jmp    c00142b0 <cleanerTaskFunction(void*)+0x3c>
c0014362:	66 90                	xchg   ax,ax

c0014364 <terminateTask(int)>:
c0014364:	83 ec 14             	sub    esp,0x14
c0014367:	fa                   	cli    
c0014368:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c001436e:	ff 05 84 3e 02 c0    	inc    DWORD PTR ds:0xc0023e84
c0014374:	fa                   	cli    
c0014375:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c001437b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001437f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014384:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0014387:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001438c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001438f:	50                   	push   eax
c0014390:	68 8c 3e 02 c0       	push   0xc0023e8c
c0014395:	e8 42 85 00 00       	call   c001c8dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001439a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001439f:	83 c4 10             	add    esp,0x10
c00143a2:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00143a9:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c00143ae:	85 c0                	test   eax,eax
c00143b0:	74 5e                	je     c0014410 <terminateTask(int)+0xac>
c00143b2:	83 ec 0c             	sub    esp,0xc
c00143b5:	c6 05 6c 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023e6c,0x1
c00143bc:	50                   	push   eax
c00143bd:	e8 42 fb ff ff       	call   c0013f04 <unblockTask(ThreadControlBlock*)>
c00143c2:	83 c4 10             	add    esp,0x10
c00143c5:	8d 76 00             	lea    esi,[esi+0x0]
c00143c8:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c00143cd:	48                   	dec    eax
c00143ce:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c00143d3:	75 03                	jne    c00143d8 <terminateTask(int)+0x74>
c00143d5:	fb                   	sti    
c00143d6:	66 90                	xchg   ax,ax
c00143d8:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c00143dd:	48                   	dec    eax
c00143de:	a3 84 3e 02 c0       	mov    ds:0xc0023e84,eax
c00143e3:	75 0b                	jne    c00143f0 <terminateTask(int)+0x8c>
c00143e5:	83 3d 80 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e80,0x0
c00143ec:	75 36                	jne    c0014424 <terminateTask(int)+0xc0>
c00143ee:	66 90                	xchg   ax,ax
c00143f0:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c00143f5:	48                   	dec    eax
c00143f6:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c00143fb:	75 03                	jne    c0014400 <terminateTask(int)+0x9c>
c00143fd:	fb                   	sti    
c00143fe:	66 90                	xchg   ax,ax
c0014400:	fa                   	cli    
c0014401:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0014407:	90                   	nop
c0014408:	e8 33 f6 ff ff       	call   c0013a40 <schedule()>
c001440d:	eb e1                	jmp    c00143f0 <terminateTask(int)+0x8c>
c001440f:	90                   	nop
c0014410:	83 ec 0c             	sub    esp,0xc
c0014413:	68 76 eb 01 c0       	push   0xc001eb76
c0014418:	e8 cf 67 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001441d:	83 c4 10             	add    esp,0x10
c0014420:	eb a6                	jmp    c00143c8 <terminateTask(int)+0x64>
c0014422:	66 90                	xchg   ax,ax
c0014424:	c7 05 80 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x0
c001442e:	eb d8                	jmp    c0014408 <terminateTask(int)+0xa4>

c0014430 <Thr::terminateFromIRQ(int)>:
c0014430:	83 ec 18             	sub    esp,0x18
c0014433:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014437:	50                   	push   eax
c0014438:	e8 27 ff ff ff       	call   c0014364 <terminateTask(int)>
c001443d:	90                   	nop
c001443e:	66 90                	xchg   ax,ax

c0014440 <Semaphore::release()>:
c0014440:	83 ec 0c             	sub    esp,0xc
c0014443:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014447:	fa                   	cli    
c0014448:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c001444d:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0014453:	8d 48 01             	lea    ecx,[eax+0x1]
c0014456:	89 0d 84 3e 02 c0    	mov    DWORD PTR ds:0xc0023e84,ecx
c001445c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001445f:	85 c9                	test   ecx,ecx
c0014461:	74 41                	je     c00144a4 <Semaphore::release()+0x64>
c0014463:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014466:	83 ec 0c             	sub    esp,0xc
c0014469:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001446c:	51                   	push   ecx
c001446d:	e8 92 fa ff ff       	call   c0013f04 <unblockTask(ThreadControlBlock*)>
c0014472:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c0014477:	83 c4 10             	add    esp,0x10
c001447a:	48                   	dec    eax
c001447b:	90                   	nop
c001447c:	a3 84 3e 02 c0       	mov    ds:0xc0023e84,eax
c0014481:	85 c0                	test   eax,eax
c0014483:	75 0b                	jne    c0014490 <Semaphore::release()+0x50>
c0014485:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c001448a:	85 c0                	test   eax,eax
c001448c:	75 1e                	jne    c00144ac <Semaphore::release()+0x6c>
c001448e:	66 90                	xchg   ax,ax
c0014490:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0014495:	48                   	dec    eax
c0014496:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c001449b:	75 03                	jne    c00144a0 <Semaphore::release()+0x60>
c001449d:	fb                   	sti    
c001449e:	66 90                	xchg   ax,ax
c00144a0:	83 c4 0c             	add    esp,0xc
c00144a3:	c3                   	ret    
c00144a4:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00144a7:	eb d3                	jmp    c001447c <Semaphore::release()+0x3c>
c00144a9:	8d 76 00             	lea    esi,[esi+0x0]
c00144ac:	c7 05 80 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x0
c00144b6:	e8 85 f5 ff ff       	call   c0013a40 <schedule()>
c00144bb:	eb d3                	jmp    c0014490 <Semaphore::release()+0x50>
c00144bd:	8d 76 00             	lea    esi,[esi+0x0]

c00144c0 <__static_initialization_and_destruction_0(int, int)>:
c00144c0:	83 ec 0c             	sub    esp,0xc
c00144c3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00144c8:	0f 85 8e 00 00 00    	jne    c001455c <__static_initialization_and_destruction_0(int, int)+0x9c>
c00144ce:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00144d6:	0f 85 80 00 00 00    	jne    c001455c <__static_initialization_and_destruction_0(int, int)+0x9c>
c00144dc:	83 ec 0c             	sub    esp,0xc
c00144df:	68 a4 3e 02 c0       	push   0xc0023ea4
c00144e4:	e8 9f 86 00 00       	call   c001cb88 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00144e9:	83 c4 10             	add    esp,0x10
c00144ec:	83 ec 04             	sub    esp,0x4
c00144ef:	68 38 f7 01 c0       	push   0xc001f738
c00144f4:	68 a4 3e 02 c0       	push   0xc0023ea4
c00144f9:	68 38 cb 01 c0       	push   0xc001cb38
c00144fe:	e8 a3 65 ff ff       	call   c000aaa6 <__cxa_atexit>
c0014503:	83 c4 10             	add    esp,0x10
c0014506:	83 ec 0c             	sub    esp,0xc
c0014509:	68 98 3e 02 c0       	push   0xc0023e98
c001450e:	e8 75 86 00 00       	call   c001cb88 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014513:	83 c4 10             	add    esp,0x10
c0014516:	83 ec 04             	sub    esp,0x4
c0014519:	68 38 f7 01 c0       	push   0xc001f738
c001451e:	68 98 3e 02 c0       	push   0xc0023e98
c0014523:	68 38 cb 01 c0       	push   0xc001cb38
c0014528:	e8 79 65 ff ff       	call   c000aaa6 <__cxa_atexit>
c001452d:	83 c4 10             	add    esp,0x10
c0014530:	83 ec 0c             	sub    esp,0xc
c0014533:	68 8c 3e 02 c0       	push   0xc0023e8c
c0014538:	e8 4b 86 00 00       	call   c001cb88 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001453d:	83 c4 10             	add    esp,0x10
c0014540:	83 ec 04             	sub    esp,0x4
c0014543:	68 38 f7 01 c0       	push   0xc001f738
c0014548:	68 8c 3e 02 c0       	push   0xc0023e8c
c001454d:	68 38 cb 01 c0       	push   0xc001cb38
c0014552:	e8 4f 65 ff ff       	call   c000aaa6 <__cxa_atexit>
c0014557:	83 c4 10             	add    esp,0x10
c001455a:	66 90                	xchg   ax,ax
c001455c:	90                   	nop
c001455d:	83 c4 0c             	add    esp,0xc
c0014560:	c3                   	ret    
c0014561:	8d 76 00             	lea    esi,[esi+0x0]

c0014564 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0014564:	83 ec 0c             	sub    esp,0xc
c0014567:	83 ec 08             	sub    esp,0x8
c001456a:	68 ff ff 00 00       	push   0xffff
c001456f:	6a 01                	push   0x1
c0014571:	e8 4a ff ff ff       	call   c00144c0 <__static_initialization_and_destruction_0(int, int)>
c0014576:	83 c4 10             	add    esp,0x10
c0014579:	83 c4 0c             	add    esp,0xc
c001457c:	c3                   	ret    

c001457d <Vm::inbv(unsigned short)>:
c001457d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014581:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014586:	75 06                	jne    c001458e <Vm::inbv(unsigned short)+0x11>
c0014588:	a0 ec 3e 02 c0       	mov    al,ds:0xc0023eec
c001458d:	c3                   	ret    
c001458e:	ec                   	in     al,dx
c001458f:	c3                   	ret    

c0014590 <Vm::outbv(unsigned short, unsigned char)>:
c0014590:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014594:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014598:	66 81 fa fe fe       	cmp    dx,0xfefe
c001459d:	75 25                	jne    c00145c4 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001459f:	8b 0d ec 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023eec
c00145a5:	8d 51 01             	lea    edx,[ecx+0x1]
c00145a8:	88 81 00 3f 02 c0    	mov    BYTE PTR [ecx-0x3ffdc100],al
c00145ae:	89 15 ec 3e 02 c0    	mov    DWORD PTR ds:0xc0023eec,edx
c00145b4:	83 fa 20             	cmp    edx,0x20
c00145b7:	75 0c                	jne    c00145c5 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00145b9:	c7 05 ec 3e 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0023eec,0x1f
c00145c3:	c3                   	ret    
c00145c4:	ee                   	out    dx,al
c00145c5:	c3                   	ret    

c00145c6 <Vm::realToLinear(unsigned short, unsigned short)>:
c00145c6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00145cb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00145d0:	c1 e0 04             	shl    eax,0x4
c00145d3:	01 d0                	add    eax,edx
c00145d5:	c3                   	ret    

c00145d6 <Vm::getSegment(unsigned int)>:
c00145d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145da:	c1 e8 10             	shr    eax,0x10
c00145dd:	c3                   	ret    

c00145de <Vm::getOffset(unsigned int)>:
c00145de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145e2:	c3                   	ret    

c00145e3 <Vm::mainloop2()>:
c00145e3:	83 ec 18             	sub    esp,0x18
c00145e6:	fa                   	cli    
c00145e7:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c00145ed:	6a 02                	push   0x2
c00145ef:	c6 05 e5 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023ee5,0x1
c00145f6:	e8 19 f6 ff ff       	call   c0013c14 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00145fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014600:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0014604:	52                   	push   edx
c0014605:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0014609:	52                   	push   edx
c001460a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001460e:	52                   	push   edx
c001460f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0014613:	50                   	push   eax
c0014614:	e8 16 bc fe ff       	call   c000022f <goToVM86>
c0014619:	83 c4 2c             	add    esp,0x2c
c001461c:	c3                   	ret    

c001461d <Vm::mainVm8086Loop(void*)>:
c001461d:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0014622:	48                   	dec    eax
c0014623:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0014628:	75 01                	jne    c001462b <Vm::mainVm8086Loop(void*)+0xe>
c001462a:	fb                   	sti    
c001462b:	eb b6                	jmp    c00145e3 <Vm::mainloop2()>

c001462d <Vm::mainloop3(unsigned long)>:
c001462d:	83 ec 18             	sub    esp,0x18
c0014630:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014634:	fa                   	cli    
c0014635:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c001463b:	6a 02                	push   0x2
c001463d:	c6 05 e4 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023ee4,0x1
c0014644:	a3 e0 3e 02 c0       	mov    ds:0xc0023ee0,eax
c0014649:	e8 c6 f5 ff ff       	call   c0013c14 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001464e:	83 c4 1c             	add    esp,0x1c
c0014651:	eb 90                	jmp    c00145e3 <Vm::mainloop2()>

c0014653 <Vm::initialise8086()>:
c0014653:	83 ec 0c             	sub    esp,0xc
c0014656:	68 80 00 00 00       	push   0x80
c001465b:	6a 00                	push   0x0
c001465d:	68 1d 46 01 c0       	push   0xc001461d
c0014662:	ff 35 b0 3e 02 c0    	push   DWORD PTR ds:0xc0023eb0
c0014668:	e8 b3 f1 ff ff       	call   c0013820 <Process::createThread(void (*)(void*), void*, int)>
c001466d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0014674:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0014679:	68 00 01 00 00       	push   0x100
c001467e:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0014683:	6a 00                	push   0x0
c0014685:	6a 00                	push   0x0
c0014687:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001468d:	e8 96 5c ff ff       	call   c000a328 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014692:	83 c4 2c             	add    esp,0x2c
c0014695:	c3                   	ret    

c0014696 <Vm::finish8086()>:
c0014696:	53                   	push   ebx
c0014697:	83 ec 08             	sub    esp,0x8
c001469a:	fa                   	cli    
c001469b:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c00146a1:	80 3d e4 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ee4,0x0
c00146a8:	75 15                	jne    c00146bf <Vm::finish8086()+0x29>
c00146aa:	e8 91 f3 ff ff       	call   c0013a40 <schedule()>
c00146af:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c00146b4:	48                   	dec    eax
c00146b5:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c00146ba:	75 de                	jne    c001469a <Vm::finish8086()+0x4>
c00146bc:	fb                   	sti    
c00146bd:	eb db                	jmp    c001469a <Vm::finish8086()+0x4>
c00146bf:	83 ec 0c             	sub    esp,0xc
c00146c2:	8b 1d e0 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ee0
c00146c8:	ff 35 e8 3e 02 c0    	push   DWORD PTR ds:0xc0023ee8
c00146ce:	c6 05 e4 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023ee4,0x0
c00146d5:	e8 2a f8 ff ff       	call   c0013f04 <unblockTask(ThreadControlBlock*)>
c00146da:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c00146df:	83 c4 10             	add    esp,0x10
c00146e2:	8d 50 ff             	lea    edx,[eax-0x1]
c00146e5:	89 15 88 3e 02 c0    	mov    DWORD PTR ds:0xc0023e88,edx
c00146eb:	85 d2                	test   edx,edx
c00146ed:	75 01                	jne    c00146f0 <Vm::finish8086()+0x5a>
c00146ef:	fb                   	sti    
c00146f0:	89 d8                	mov    eax,ebx
c00146f2:	83 c4 08             	add    esp,0x8
c00146f5:	5b                   	pop    ebx
c00146f6:	c3                   	ret    

c00146f7 <Vm::getOutput8086(unsigned char*)>:
c00146f7:	57                   	push   edi
c00146f8:	8b 0d ec 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023eec
c00146fe:	56                   	push   esi
c00146ff:	be 00 3f 02 c0       	mov    esi,0xc0023f00
c0014704:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014708:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001470a:	a1 ec 3e 02 c0       	mov    eax,ds:0xc0023eec
c001470f:	5e                   	pop    esi
c0014710:	c7 05 ec 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eec,0x0
c001471a:	5f                   	pop    edi
c001471b:	c3                   	ret    

c001471c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001471c:	55                   	push   ebp
c001471d:	57                   	push   edi
c001471e:	56                   	push   esi
c001471f:	53                   	push   ebx
c0014720:	83 ec 0c             	sub    esp,0xc
c0014723:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014727:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001472b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001472f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0014733:	fa                   	cli    
c0014734:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c001473a:	80 3d e5 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ee5,0x0
c0014741:	75 15                	jne    c0014758 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0014743:	e8 f8 f2 ff ff       	call   c0013a40 <schedule()>
c0014748:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c001474d:	48                   	dec    eax
c001474e:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0014753:	75 de                	jne    c0014733 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014755:	fb                   	sti    
c0014756:	eb db                	jmp    c0014733 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014758:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c001475d:	c7 05 ec 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eec,0x0
c0014767:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001476b:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001476f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0014773:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014777:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001477b:	0f b7 ff             	movzx  edi,di
c001477e:	0f b7 f6             	movzx  esi,si
c0014781:	50                   	push   eax
c0014782:	6a 20                	push   0x20
c0014784:	6a 00                	push   0x0
c0014786:	68 00 3f 02 c0       	push   0xc0023f00
c001478b:	e8 60 bd fe ff       	call   c00004f0 <memset>
c0014790:	5a                   	pop    edx
c0014791:	59                   	pop    ecx
c0014792:	57                   	push   edi
c0014793:	56                   	push   esi
c0014794:	e8 2d fe ff ff       	call   c00145c6 <Vm::realToLinear(unsigned short, unsigned short)>
c0014799:	83 c4 10             	add    esp,0x10
c001479c:	89 c7                	mov    edi,eax
c001479e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00147a2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00147a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00147a8:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c00147ad:	c6 05 e5 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023ee5,0x0
c00147b4:	48                   	dec    eax
c00147b5:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c00147ba:	75 01                	jne    c00147bd <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00147bc:	fb                   	sti    
c00147bd:	83 ec 0c             	sub    esp,0xc
c00147c0:	ff 35 e8 3e 02 c0    	push   DWORD PTR ds:0xc0023ee8
c00147c6:	e8 39 f7 ff ff       	call   c0013f04 <unblockTask(ThreadControlBlock*)>
c00147cb:	83 c4 1c             	add    esp,0x1c
c00147ce:	b0 01                	mov    al,0x1
c00147d0:	5b                   	pop    ebx
c00147d1:	5e                   	pop    esi
c00147d2:	5f                   	pop    edi
c00147d3:	5d                   	pop    ebp
c00147d4:	c3                   	ret    

c00147d5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00147d5:	55                   	push   ebp
c00147d6:	57                   	push   edi
c00147d7:	56                   	push   esi
c00147d8:	53                   	push   ebx
c00147d9:	83 ec 2c             	sub    esp,0x2c
c00147dc:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00147e0:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00147e4:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00147e8:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00147ec:	fa                   	cli    
c00147ed:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c00147f3:	0f b6 35 e5 3e 02 c0 	movzx  esi,BYTE PTR ds:0xc0023ee5
c00147fa:	89 f0                	mov    eax,esi
c00147fc:	84 c0                	test   al,al
c00147fe:	75 1d                	jne    c001481d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0014800:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014804:	e8 37 f2 ff ff       	call   c0013a40 <schedule()>
c0014809:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c001480e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014812:	48                   	dec    eax
c0014813:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0014818:	75 d2                	jne    c00147ec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001481a:	fb                   	sti    
c001481b:	eb cf                	jmp    c00147ec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001481d:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0014822:	c7 05 ec 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eec,0x0
c001482c:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0014830:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014834:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0014838:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c001483c:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014840:	50                   	push   eax
c0014841:	6a 20                	push   0x20
c0014843:	6a 00                	push   0x0
c0014845:	68 00 3f 02 c0       	push   0xc0023f00
c001484a:	e8 a1 bc fe ff       	call   c00004f0 <memset>
c001484f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014856:	e8 02 36 ff ff       	call   c0007e5d <malloc>
c001485b:	83 c4 0c             	add    esp,0xc
c001485e:	89 c3                	mov    ebx,eax
c0014860:	ff 35 b0 3e 02 c0    	push   DWORD PTR ds:0xc0023eb0
c0014866:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001486a:	50                   	push   eax
c001486b:	e8 f2 68 ff ff       	call   c000b162 <File::File(char const*, Process*)>
c0014870:	83 c4 10             	add    esp,0x10
c0014873:	85 db                	test   ebx,ebx
c0014875:	75 0a                	jne    c0014881 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0014877:	83 ec 0c             	sub    esp,0xc
c001487a:	68 a0 ec 01 c0       	push   0xc001eca0
c001487f:	eb 3e                	jmp    c00148bf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014881:	50                   	push   eax
c0014882:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014886:	50                   	push   eax
c0014887:	8d 44 24 20          	lea    eax,[esp+0x20]
c001488b:	50                   	push   eax
c001488c:	53                   	push   ebx
c001488d:	e8 3c 6c ff ff       	call   c000b4ce <File::stat(unsigned long long*, bool*)>
c0014892:	83 c4 10             	add    esp,0x10
c0014895:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001489a:	74 0a                	je     c00148a6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001489c:	83 ec 0c             	sub    esp,0xc
c001489f:	68 b4 ec 01 c0       	push   0xc001ecb4
c00148a4:	eb 19                	jmp    c00148bf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00148a6:	51                   	push   ecx
c00148a7:	51                   	push   ecx
c00148a8:	6a 01                	push   0x1
c00148aa:	53                   	push   ebx
c00148ab:	e8 72 69 ff ff       	call   c000b222 <File::open(FileOpenMode)>
c00148b0:	83 c4 10             	add    esp,0x10
c00148b3:	85 c0                	test   eax,eax
c00148b5:	74 24                	je     c00148db <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00148b7:	83 ec 0c             	sub    esp,0xc
c00148ba:	68 cd ec 01 c0       	push   0xc001eccd
c00148bf:	e8 27 be ff ff       	call   c00106eb <Krnl::panic(char const*)>
c00148c4:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c00148c9:	83 c4 10             	add    esp,0x10
c00148cc:	48                   	dec    eax
c00148cd:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c00148d2:	85 c0                	test   eax,eax
c00148d4:	75 01                	jne    c00148d7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00148d6:	fb                   	sti    
c00148d7:	31 f6                	xor    esi,esi
c00148d9:	eb 58                	jmp    c0014933 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00148db:	0f b7 ed             	movzx  ebp,bp
c00148de:	50                   	push   eax
c00148df:	0f b7 ff             	movzx  edi,di
c00148e2:	50                   	push   eax
c00148e3:	55                   	push   ebp
c00148e4:	57                   	push   edi
c00148e5:	e8 dc fc ff ff       	call   c00145c6 <Vm::realToLinear(unsigned short, unsigned short)>
c00148ea:	5a                   	pop    edx
c00148eb:	8b 13                	mov    edx,DWORD PTR [ebx]
c00148ed:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00148f1:	51                   	push   ecx
c00148f2:	50                   	push   eax
c00148f3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00148f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00148fb:	53                   	push   ebx
c00148fc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00148ff:	83 c4 14             	add    esp,0x14
c0014902:	53                   	push   ebx
c0014903:	e8 78 69 ff ff       	call   c000b280 <File::close()>
c0014908:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c001490d:	83 c4 10             	add    esp,0x10
c0014910:	48                   	dec    eax
c0014911:	c6 05 e5 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023ee5,0x0
c0014918:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c001491d:	85 c0                	test   eax,eax
c001491f:	75 01                	jne    c0014922 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0014921:	fb                   	sti    
c0014922:	83 ec 0c             	sub    esp,0xc
c0014925:	ff 35 e8 3e 02 c0    	push   DWORD PTR ds:0xc0023ee8
c001492b:	e8 d4 f5 ff ff       	call   c0013f04 <unblockTask(ThreadControlBlock*)>
c0014930:	83 c4 10             	add    esp,0x10
c0014933:	83 c4 2c             	add    esp,0x2c
c0014936:	89 f0                	mov    eax,esi
c0014938:	5b                   	pop    ebx
c0014939:	5e                   	pop    esi
c001493a:	5f                   	pop    edi
c001493b:	5d                   	pop    ebp
c001493c:	c3                   	ret    

c001493d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001493d:	57                   	push   edi
c001493e:	56                   	push   esi
c001493f:	53                   	push   ebx
c0014940:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014944:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014948:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001494c:	83 e8 06             	sub    eax,0x6
c001494f:	0f b7 c0             	movzx  eax,ax
c0014952:	50                   	push   eax
c0014953:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0014958:	50                   	push   eax
c0014959:	e8 68 fc ff ff       	call   c00145c6 <Vm::realToLinear(unsigned short, unsigned short)>
c001495e:	5a                   	pop    edx
c001495f:	5e                   	pop    esi
c0014960:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0014963:	8d 56 fa             	lea    edx,[esi-0x6]
c0014966:	81 e2 ff ff 00 00    	and    edx,0xffff
c001496c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001496f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0014972:	83 c2 02             	add    edx,0x2
c0014975:	66 89 10             	mov    WORD PTR [eax],dx
c0014978:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001497b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001497f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0014982:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014986:	89 d6                	mov    esi,edx
c0014988:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001498e:	66 81 e6 ff fd       	and    si,0xfdff
c0014993:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0014997:	74 07                	je     c00149a0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0014999:	89 d6                	mov    esi,edx
c001499b:	66 81 ce 00 02       	or     si,0x200
c00149a0:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00149a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149a9:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00149ad:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00149b5:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00149b8:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00149c0:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00149c3:	5b                   	pop    ebx
c00149c4:	5e                   	pop    esi
c00149c5:	5f                   	pop    edi
c00149c6:	c3                   	ret    

c00149c7 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00149c7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00149cc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00149d1:	c1 e0 04             	shl    eax,0x4
c00149d4:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00149d7:	c3                   	ret    

c00149d8 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00149d8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00149dd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00149e2:	c1 e0 04             	shl    eax,0x4
c00149e5:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00149e9:	c3                   	ret    

c00149ea <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00149ea:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00149ef:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00149f4:	c1 e0 04             	shl    eax,0x4
c00149f7:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00149fa:	c3                   	ret    

c00149fb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00149fb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a00:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a05:	c1 e0 04             	shl    eax,0x4
c0014a08:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a0c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0014a0f:	c3                   	ret    

c0014a10 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0014a10:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a15:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a1a:	c1 e0 04             	shl    eax,0x4
c0014a1d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a21:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014a25:	c3                   	ret    

c0014a26 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0014a26:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a2b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a30:	c1 e0 04             	shl    eax,0x4
c0014a33:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a37:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0014a3a:	c3                   	ret    

c0014a3b <Vm::faultHandler(regs*)>:
c0014a3b:	55                   	push   ebp
c0014a3c:	57                   	push   edi
c0014a3d:	56                   	push   esi
c0014a3e:	53                   	push   ebx
c0014a3f:	83 ec 1c             	sub    esp,0x1c
c0014a42:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014a46:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014a49:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014a4d:	0f b7 f8             	movzx  edi,ax
c0014a50:	52                   	push   edx
c0014a51:	0f b7 c0             	movzx  eax,ax
c0014a54:	50                   	push   eax
c0014a55:	e8 6c fb ff ff       	call   c00145c6 <Vm::realToLinear(unsigned short, unsigned short)>
c0014a5a:	5a                   	pop    edx
c0014a5b:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0014a5e:	59                   	pop    ecx
c0014a5f:	89 c1                	mov    ecx,eax
c0014a61:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a64:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014a68:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014a71:	0f b7 c5             	movzx  eax,bp
c0014a74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a78:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014a7c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014a80:	e8 41 fb ff ff       	call   c00145c6 <Vm::realToLinear(unsigned short, unsigned short)>
c0014a85:	5e                   	pop    esi
c0014a86:	be 06 00 00 00       	mov    esi,0x6
c0014a8b:	5a                   	pop    edx
c0014a8c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0014a91:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0014a96:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014a99:	80 fa 9d             	cmp    dl,0x9d
c0014a9c:	0f 84 2c 02 00 00    	je     c0014cce <Vm::faultHandler(regs*)+0x293>
c0014aa2:	0f 87 91 00 00 00    	ja     c0014b39 <Vm::faultHandler(regs*)+0xfe>
c0014aa8:	80 fa 66             	cmp    dl,0x66
c0014aab:	0f 84 98 01 00 00    	je     c0014c49 <Vm::faultHandler(regs*)+0x20e>
c0014ab1:	77 47                	ja     c0014afa <Vm::faultHandler(regs*)+0xbf>
c0014ab3:	80 fa 36             	cmp    dl,0x36
c0014ab6:	0f 84 80 01 00 00    	je     c0014c3c <Vm::faultHandler(regs*)+0x201>
c0014abc:	77 1a                	ja     c0014ad8 <Vm::faultHandler(regs*)+0x9d>
c0014abe:	80 fa 26             	cmp    dl,0x26
c0014ac1:	0f 84 4e 01 00 00    	je     c0014c15 <Vm::faultHandler(regs*)+0x1da>
c0014ac7:	80 fa 2e             	cmp    dl,0x2e
c0014aca:	0f 85 e2 05 00 00    	jne    c00150b2 <Vm::faultHandler(regs*)+0x677>
c0014ad0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014ad3:	31 f6                	xor    esi,esi
c0014ad5:	41                   	inc    ecx
c0014ad6:	eb be                	jmp    c0014a96 <Vm::faultHandler(regs*)+0x5b>
c0014ad8:	80 fa 64             	cmp    dl,0x64
c0014adb:	0f 84 41 01 00 00    	je     c0014c22 <Vm::faultHandler(regs*)+0x1e7>
c0014ae1:	0f 87 48 01 00 00    	ja     c0014c2f <Vm::faultHandler(regs*)+0x1f4>
c0014ae7:	80 fa 3e             	cmp    dl,0x3e
c0014aea:	0f 85 c2 05 00 00    	jne    c00150b2 <Vm::faultHandler(regs*)+0x677>
c0014af0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014af3:	be 01 00 00 00       	mov    esi,0x1
c0014af8:	eb db                	jmp    c0014ad5 <Vm::faultHandler(regs*)+0x9a>
c0014afa:	80 fa 6d             	cmp    dl,0x6d
c0014afd:	0f 84 ec 02 00 00    	je     c0014def <Vm::faultHandler(regs*)+0x3b4>
c0014b03:	77 17                	ja     c0014b1c <Vm::faultHandler(regs*)+0xe1>
c0014b05:	80 fa 67             	cmp    dl,0x67
c0014b08:	0f 84 48 01 00 00    	je     c0014c56 <Vm::faultHandler(regs*)+0x21b>
c0014b0e:	80 fa 6c             	cmp    dl,0x6c
c0014b11:	0f 84 69 02 00 00    	je     c0014d80 <Vm::faultHandler(regs*)+0x345>
c0014b17:	e9 96 05 00 00       	jmp    c00150b2 <Vm::faultHandler(regs*)+0x677>
c0014b1c:	80 fa 6f             	cmp    dl,0x6f
c0014b1f:	0f 84 f4 03 00 00    	je     c0014f19 <Vm::faultHandler(regs*)+0x4de>
c0014b25:	0f 82 59 03 00 00    	jb     c0014e84 <Vm::faultHandler(regs*)+0x449>
c0014b2b:	80 fa 9c             	cmp    dl,0x9c
c0014b2e:	0f 84 2f 01 00 00    	je     c0014c63 <Vm::faultHandler(regs*)+0x228>
c0014b34:	e9 79 05 00 00       	jmp    c00150b2 <Vm::faultHandler(regs*)+0x677>
c0014b39:	80 fa ec             	cmp    dl,0xec
c0014b3c:	0f 84 14 05 00 00    	je     c0015056 <Vm::faultHandler(regs*)+0x61b>
c0014b42:	77 7b                	ja     c0014bbf <Vm::faultHandler(regs*)+0x184>
c0014b44:	80 fa e4             	cmp    dl,0xe4
c0014b47:	0f 84 93 04 00 00    	je     c0014fe0 <Vm::faultHandler(regs*)+0x5a5>
c0014b4d:	77 53                	ja     c0014ba2 <Vm::faultHandler(regs*)+0x167>
c0014b4f:	80 fa cd             	cmp    dl,0xcd
c0014b52:	0f 84 d9 01 00 00    	je     c0014d31 <Vm::faultHandler(regs*)+0x2f6>
c0014b58:	80 fa cf             	cmp    dl,0xcf
c0014b5b:	0f 85 51 05 00 00    	jne    c00150b2 <Vm::faultHandler(regs*)+0x677>
c0014b61:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014b64:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014b67:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0014b6b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0014b6e:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0014b72:	81 ca 00 02 02 00    	or     edx,0x20200
c0014b78:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014b7b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b7f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014b85:	66 c1 e8 09          	shr    ax,0x9
c0014b89:	83 e0 01             	and    eax,0x1
c0014b8c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014b8f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014b92:	83 c0 06             	add    eax,0x6
c0014b95:	25 ff ff 00 00       	and    eax,0xffff
c0014b9a:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014b9d:	e9 0c 05 00 00       	jmp    c00150ae <Vm::faultHandler(regs*)+0x673>
c0014ba2:	80 fa e6             	cmp    dl,0xe6
c0014ba5:	0f 84 7f 04 00 00    	je     c001502a <Vm::faultHandler(regs*)+0x5ef>
c0014bab:	0f 82 4b 04 00 00    	jb     c0014ffc <Vm::faultHandler(regs*)+0x5c1>
c0014bb1:	80 fa e7             	cmp    dl,0xe7
c0014bb4:	0f 84 87 04 00 00    	je     c0015041 <Vm::faultHandler(regs*)+0x606>
c0014bba:	e9 f3 04 00 00       	jmp    c00150b2 <Vm::faultHandler(regs*)+0x677>
c0014bbf:	80 fa ef             	cmp    dl,0xef
c0014bc2:	0f 84 d1 04 00 00    	je     c0015099 <Vm::faultHandler(regs*)+0x65e>
c0014bc8:	77 28                	ja     c0014bf2 <Vm::faultHandler(regs*)+0x1b7>
c0014bca:	80 fa ed             	cmp    dl,0xed
c0014bcd:	0f 84 9f 04 00 00    	je     c0015072 <Vm::faultHandler(regs*)+0x637>
c0014bd3:	80 fa ee             	cmp    dl,0xee
c0014bd6:	0f 85 d6 04 00 00    	jne    c00150b2 <Vm::faultHandler(regs*)+0x677>
c0014bdc:	50                   	push   eax
c0014bdd:	50                   	push   eax
c0014bde:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014be2:	50                   	push   eax
c0014be3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014be7:	50                   	push   eax
c0014be8:	e8 a3 f9 ff ff       	call   c0014590 <Vm::outbv(unsigned short, unsigned char)>
c0014bed:	e9 9f 04 00 00       	jmp    c0015091 <Vm::faultHandler(regs*)+0x656>
c0014bf2:	80 fa fa             	cmp    dl,0xfa
c0014bf5:	0f 84 69 01 00 00    	je     c0014d64 <Vm::faultHandler(regs*)+0x329>
c0014bfb:	80 fa fb             	cmp    dl,0xfb
c0014bfe:	0f 84 6e 01 00 00    	je     c0014d72 <Vm::faultHandler(regs*)+0x337>
c0014c04:	80 fa f3             	cmp    dl,0xf3
c0014c07:	0f 85 a5 04 00 00    	jne    c00150b2 <Vm::faultHandler(regs*)+0x677>
c0014c0d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c10:	e9 c0 fe ff ff       	jmp    c0014ad5 <Vm::faultHandler(regs*)+0x9a>
c0014c15:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c18:	be 02 00 00 00       	mov    esi,0x2
c0014c1d:	e9 b3 fe ff ff       	jmp    c0014ad5 <Vm::faultHandler(regs*)+0x9a>
c0014c22:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c25:	be 03 00 00 00       	mov    esi,0x3
c0014c2a:	e9 a6 fe ff ff       	jmp    c0014ad5 <Vm::faultHandler(regs*)+0x9a>
c0014c2f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c32:	be 04 00 00 00       	mov    esi,0x4
c0014c37:	e9 99 fe ff ff       	jmp    c0014ad5 <Vm::faultHandler(regs*)+0x9a>
c0014c3c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c3f:	be 05 00 00 00       	mov    esi,0x5
c0014c44:	e9 8c fe ff ff       	jmp    c0014ad5 <Vm::faultHandler(regs*)+0x9a>
c0014c49:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c4c:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014c51:	e9 7f fe ff ff       	jmp    c0014ad5 <Vm::faultHandler(regs*)+0x9a>
c0014c56:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c59:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014c5e:	e9 72 fe ff ff       	jmp    c0014ad5 <Vm::faultHandler(regs*)+0x9a>
c0014c63:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014c66:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014c6a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014c6f:	74 30                	je     c0014ca1 <Vm::faultHandler(regs*)+0x266>
c0014c71:	83 e9 04             	sub    ecx,0x4
c0014c74:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014c7a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014c80:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014c83:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014c86:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014c8c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014c90:	0f 84 15 04 00 00    	je     c00150ab <Vm::faultHandler(regs*)+0x670>
c0014c96:	80 ce 02             	or     dh,0x2
c0014c99:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014c9c:	e9 0a 04 00 00       	jmp    c00150ab <Vm::faultHandler(regs*)+0x670>
c0014ca1:	83 e9 02             	sub    ecx,0x2
c0014ca4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014caa:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014cad:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014cb1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014cb7:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014cbb:	74 05                	je     c0014cc2 <Vm::faultHandler(regs*)+0x287>
c0014cbd:	80 ce 02             	or     dh,0x2
c0014cc0:	eb 03                	jmp    c0014cc5 <Vm::faultHandler(regs*)+0x28a>
c0014cc2:	80 e6 fd             	and    dh,0xfd
c0014cc5:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014cc9:	e9 dd 03 00 00       	jmp    c00150ab <Vm::faultHandler(regs*)+0x670>
c0014cce:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014cd3:	74 2a                	je     c0014cff <Vm::faultHandler(regs*)+0x2c4>
c0014cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0014cd7:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014cdd:	81 ca 00 02 02 00    	or     edx,0x20200
c0014ce3:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014ce6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ce8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014cee:	c1 e8 09             	shr    eax,0x9
c0014cf1:	83 e0 01             	and    eax,0x1
c0014cf4:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014cf7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014cfa:	83 c0 04             	add    eax,0x4
c0014cfd:	eb 25                	jmp    c0014d24 <Vm::faultHandler(regs*)+0x2e9>
c0014cff:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014d02:	81 ca 00 02 02 00    	or     edx,0x20200
c0014d08:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014d0b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014d0e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014d14:	66 c1 e8 09          	shr    ax,0x9
c0014d18:	83 e0 01             	and    eax,0x1
c0014d1b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014d1e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014d21:	83 c0 02             	add    eax,0x2
c0014d24:	25 ff ff 00 00       	and    eax,0xffff
c0014d29:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014d2c:	e9 7a 03 00 00       	jmp    c00150ab <Vm::faultHandler(regs*)+0x670>
c0014d31:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d35:	3c ee                	cmp    al,0xee
c0014d37:	75 10                	jne    c0014d49 <Vm::faultHandler(regs*)+0x30e>
c0014d39:	83 ec 0c             	sub    esp,0xc
c0014d3c:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d3f:	e8 e9 f8 ff ff       	call   c001462d <Vm::mainloop3(unsigned long)>
c0014d44:	e9 4b 03 00 00       	jmp    c0015094 <Vm::faultHandler(regs*)+0x659>
c0014d49:	83 ec 0c             	sub    esp,0xc
c0014d4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014d50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d54:	51                   	push   ecx
c0014d55:	50                   	push   eax
c0014d56:	53                   	push   ebx
c0014d57:	e8 e1 fb ff ff       	call   c001493d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014d5c:	83 c4 20             	add    esp,0x20
c0014d5f:	e9 4a 03 00 00       	jmp    c00150ae <Vm::faultHandler(regs*)+0x673>
c0014d64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d69:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014d6d:	e9 39 03 00 00       	jmp    c00150ab <Vm::faultHandler(regs*)+0x670>
c0014d72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d77:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014d7b:	e9 2b 03 00 00       	jmp    c00150ab <Vm::faultHandler(regs*)+0x670>
c0014d80:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014d83:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014d88:	74 2b                	je     c0014db5 <Vm::faultHandler(regs*)+0x37a>
c0014d8a:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014d91:	76 22                	jbe    c0014db5 <Vm::faultHandler(regs*)+0x37a>
c0014d93:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014d97:	50                   	push   eax
c0014d98:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014d9c:	50                   	push   eax
c0014d9d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014da1:	50                   	push   eax
c0014da2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014da6:	50                   	push   eax
c0014da7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014dab:	50                   	push   eax
c0014dac:	6a 6c                	push   0x6c
c0014dae:	6a 6c                	push   0x6c
c0014db0:	e9 b9 01 00 00       	jmp    c0014f6e <Vm::faultHandler(regs*)+0x533>
c0014db5:	83 ec 0c             	sub    esp,0xc
c0014db8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014dbc:	0f b7 f6             	movzx  esi,si
c0014dbf:	50                   	push   eax
c0014dc0:	e8 b8 f7 ff ff       	call   c001457d <Vm::inbv(unsigned short)>
c0014dc5:	83 c4 0c             	add    esp,0xc
c0014dc8:	0f b6 c0             	movzx  eax,al
c0014dcb:	50                   	push   eax
c0014dcc:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014dd0:	50                   	push   eax
c0014dd1:	56                   	push   esi
c0014dd2:	e8 24 fc ff ff       	call   c00149fb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014dd7:	83 c4 10             	add    esp,0x10
c0014dda:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014ddd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014de1:	74 03                	je     c0014de6 <Vm::faultHandler(regs*)+0x3ab>
c0014de3:	48                   	dec    eax
c0014de4:	eb 01                	jmp    c0014de7 <Vm::faultHandler(regs*)+0x3ac>
c0014de6:	40                   	inc    eax
c0014de7:	0f b7 c0             	movzx  eax,ax
c0014dea:	e9 8d 00 00 00       	jmp    c0014e7c <Vm::faultHandler(regs*)+0x441>
c0014def:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014df2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014df5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014dfa:	74 29                	je     c0014e25 <Vm::faultHandler(regs*)+0x3ea>
c0014dfc:	3d ff ff 00 00       	cmp    eax,0xffff
c0014e01:	76 22                	jbe    c0014e25 <Vm::faultHandler(regs*)+0x3ea>
c0014e03:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e07:	50                   	push   eax
c0014e08:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e0c:	50                   	push   eax
c0014e0d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e11:	50                   	push   eax
c0014e12:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e16:	50                   	push   eax
c0014e17:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e1b:	50                   	push   eax
c0014e1c:	6a 6d                	push   0x6d
c0014e1e:	6a 6d                	push   0x6d
c0014e20:	e9 49 01 00 00       	jmp    c0014f6e <Vm::faultHandler(regs*)+0x533>
c0014e25:	0f b7 c8             	movzx  ecx,ax
c0014e28:	0f b7 f6             	movzx  esi,si
c0014e2b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e2e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e33:	74 20                	je     c0014e55 <Vm::faultHandler(regs*)+0x41a>
c0014e35:	ed                   	in     eax,dx
c0014e36:	55                   	push   ebp
c0014e37:	50                   	push   eax
c0014e38:	51                   	push   ecx
c0014e39:	56                   	push   esi
c0014e3a:	e8 e7 fb ff ff       	call   c0014a26 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014e3f:	83 c4 10             	add    esp,0x10
c0014e42:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014e45:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014e49:	74 05                	je     c0014e50 <Vm::faultHandler(regs*)+0x415>
c0014e4b:	83 e8 04             	sub    eax,0x4
c0014e4e:	eb 27                	jmp    c0014e77 <Vm::faultHandler(regs*)+0x43c>
c0014e50:	83 c0 04             	add    eax,0x4
c0014e53:	eb 22                	jmp    c0014e77 <Vm::faultHandler(regs*)+0x43c>
c0014e55:	66 ed                	in     ax,dx
c0014e57:	0f b7 c0             	movzx  eax,ax
c0014e5a:	57                   	push   edi
c0014e5b:	50                   	push   eax
c0014e5c:	51                   	push   ecx
c0014e5d:	56                   	push   esi
c0014e5e:	e8 ad fb ff ff       	call   c0014a10 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014e63:	83 c4 10             	add    esp,0x10
c0014e66:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014e69:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014e6d:	74 05                	je     c0014e74 <Vm::faultHandler(regs*)+0x439>
c0014e6f:	83 e8 02             	sub    eax,0x2
c0014e72:	eb 03                	jmp    c0014e77 <Vm::faultHandler(regs*)+0x43c>
c0014e74:	83 c0 02             	add    eax,0x2
c0014e77:	25 ff ff 00 00       	and    eax,0xffff
c0014e7c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014e7f:	e9 27 02 00 00       	jmp    c00150ab <Vm::faultHandler(regs*)+0x670>
c0014e84:	8d 46 ff             	lea    eax,[esi-0x1]
c0014e87:	3c 05                	cmp    al,0x5
c0014e89:	77 24                	ja     c0014eaf <Vm::faultHandler(regs*)+0x474>
c0014e8b:	0f b6 c0             	movzx  eax,al
c0014e8e:	ff 24 85 40 ed 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe12c0]
c0014e95:	0f b7 fd             	movzx  edi,bp
c0014e98:	eb 15                	jmp    c0014eaf <Vm::faultHandler(regs*)+0x474>
c0014e9a:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014e9e:	eb 0f                	jmp    c0014eaf <Vm::faultHandler(regs*)+0x474>
c0014ea0:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014ea4:	eb 09                	jmp    c0014eaf <Vm::faultHandler(regs*)+0x474>
c0014ea6:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014eaa:	eb 03                	jmp    c0014eaf <Vm::faultHandler(regs*)+0x474>
c0014eac:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014eaf:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014eb2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014eb7:	74 29                	je     c0014ee2 <Vm::faultHandler(regs*)+0x4a7>
c0014eb9:	3d ff ff 00 00       	cmp    eax,0xffff
c0014ebe:	76 22                	jbe    c0014ee2 <Vm::faultHandler(regs*)+0x4a7>
c0014ec0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014ec4:	50                   	push   eax
c0014ec5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014ec9:	50                   	push   eax
c0014eca:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014ece:	50                   	push   eax
c0014ecf:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014ed3:	50                   	push   eax
c0014ed4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014ed8:	50                   	push   eax
c0014ed9:	6a 6e                	push   0x6e
c0014edb:	6a 6e                	push   0x6e
c0014edd:	e9 8c 00 00 00       	jmp    c0014f6e <Vm::faultHandler(regs*)+0x533>
c0014ee2:	0f b7 c0             	movzx  eax,ax
c0014ee5:	52                   	push   edx
c0014ee6:	52                   	push   edx
c0014ee7:	50                   	push   eax
c0014ee8:	57                   	push   edi
c0014ee9:	e8 d9 fa ff ff       	call   c00149c7 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014eee:	59                   	pop    ecx
c0014eef:	0f b6 c0             	movzx  eax,al
c0014ef2:	5e                   	pop    esi
c0014ef3:	50                   	push   eax
c0014ef4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014ef8:	50                   	push   eax
c0014ef9:	e8 92 f6 ff ff       	call   c0014590 <Vm::outbv(unsigned short, unsigned char)>
c0014efe:	83 c4 10             	add    esp,0x10
c0014f01:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014f04:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014f08:	74 03                	je     c0014f0d <Vm::faultHandler(regs*)+0x4d2>
c0014f0a:	48                   	dec    eax
c0014f0b:	eb 01                	jmp    c0014f0e <Vm::faultHandler(regs*)+0x4d3>
c0014f0d:	40                   	inc    eax
c0014f0e:	0f b7 c0             	movzx  eax,ax
c0014f11:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014f14:	e9 92 01 00 00       	jmp    c00150ab <Vm::faultHandler(regs*)+0x670>
c0014f19:	8d 46 ff             	lea    eax,[esi-0x1]
c0014f1c:	3c 05                	cmp    al,0x5
c0014f1e:	77 1f                	ja     c0014f3f <Vm::faultHandler(regs*)+0x504>
c0014f20:	0f b6 c0             	movzx  eax,al
c0014f23:	ff 24 85 58 ed 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe12a8]
c0014f2a:	89 ef                	mov    edi,ebp
c0014f2c:	eb 11                	jmp    c0014f3f <Vm::faultHandler(regs*)+0x504>
c0014f2e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014f31:	eb 0c                	jmp    c0014f3f <Vm::faultHandler(regs*)+0x504>
c0014f33:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014f36:	eb 07                	jmp    c0014f3f <Vm::faultHandler(regs*)+0x504>
c0014f38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014f3b:	eb 02                	jmp    c0014f3f <Vm::faultHandler(regs*)+0x504>
c0014f3d:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014f3f:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014f42:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014f47:	74 37                	je     c0014f80 <Vm::faultHandler(regs*)+0x545>
c0014f49:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014f4f:	76 2f                	jbe    c0014f80 <Vm::faultHandler(regs*)+0x545>
c0014f51:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014f55:	50                   	push   eax
c0014f56:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014f5a:	50                   	push   eax
c0014f5b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014f5f:	50                   	push   eax
c0014f60:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014f64:	50                   	push   eax
c0014f65:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014f69:	50                   	push   eax
c0014f6a:	6a 6f                	push   0x6f
c0014f6c:	6a 6f                	push   0x6f
c0014f6e:	68 e6 ec 01 c0       	push   0xc001ece6
c0014f73:	e8 74 5c ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0014f78:	83 c4 20             	add    esp,0x20
c0014f7b:	e9 86 01 00 00       	jmp    c0015106 <Vm::faultHandler(regs*)+0x6cb>
c0014f80:	0f b7 d7             	movzx  edx,di
c0014f83:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014f86:	0f b7 c6             	movzx  eax,si
c0014f89:	81 e1 00 04 00 00    	and    ecx,0x400
c0014f8f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014f92:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014f97:	74 1d                	je     c0014fb6 <Vm::faultHandler(regs*)+0x57b>
c0014f99:	55                   	push   ebp
c0014f9a:	55                   	push   ebp
c0014f9b:	50                   	push   eax
c0014f9c:	52                   	push   edx
c0014f9d:	e8 48 fa ff ff       	call   c00149ea <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014fa2:	83 c4 10             	add    esp,0x10
c0014fa5:	89 fa                	mov    edx,edi
c0014fa7:	ef                   	out    dx,eax
c0014fa8:	85 c9                	test   ecx,ecx
c0014faa:	74 05                	je     c0014fb1 <Vm::faultHandler(regs*)+0x576>
c0014fac:	83 ee 04             	sub    esi,0x4
c0014faf:	eb 21                	jmp    c0014fd2 <Vm::faultHandler(regs*)+0x597>
c0014fb1:	83 c6 04             	add    esi,0x4
c0014fb4:	eb 1c                	jmp    c0014fd2 <Vm::faultHandler(regs*)+0x597>
c0014fb6:	55                   	push   ebp
c0014fb7:	55                   	push   ebp
c0014fb8:	50                   	push   eax
c0014fb9:	52                   	push   edx
c0014fba:	e8 19 fa ff ff       	call   c00149d8 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014fbf:	83 c4 10             	add    esp,0x10
c0014fc2:	89 fa                	mov    edx,edi
c0014fc4:	66 ef                	out    dx,ax
c0014fc6:	85 c9                	test   ecx,ecx
c0014fc8:	74 05                	je     c0014fcf <Vm::faultHandler(regs*)+0x594>
c0014fca:	83 ee 02             	sub    esi,0x2
c0014fcd:	eb 03                	jmp    c0014fd2 <Vm::faultHandler(regs*)+0x597>
c0014fcf:	83 c6 02             	add    esi,0x2
c0014fd2:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014fd8:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014fdb:	e9 cb 00 00 00       	jmp    c00150ab <Vm::faultHandler(regs*)+0x670>
c0014fe0:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014fe7:	83 ec 0c             	sub    esp,0xc
c0014fea:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014fee:	50                   	push   eax
c0014fef:	e8 89 f5 ff ff       	call   c001457d <Vm::inbv(unsigned short)>
c0014ff4:	0f b6 c0             	movzx  eax,al
c0014ff7:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014ffa:	eb 3f                	jmp    c001503b <Vm::faultHandler(regs*)+0x600>
c0014ffc:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015001:	74 07                	je     c001500a <Vm::faultHandler(regs*)+0x5cf>
c0015003:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015007:	ed                   	in     eax,dx
c0015008:	eb 14                	jmp    c001501e <Vm::faultHandler(regs*)+0x5e3>
c001500a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001500d:	66 31 f6             	xor    si,si
c0015010:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0015013:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015017:	66 ed                	in     ax,dx
c0015019:	0f b7 c0             	movzx  eax,ax
c001501c:	09 f0                	or     eax,esi
c001501e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0015021:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0015025:	e9 84 00 00 00       	jmp    c00150ae <Vm::faultHandler(regs*)+0x673>
c001502a:	52                   	push   edx
c001502b:	52                   	push   edx
c001502c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0015030:	50                   	push   eax
c0015031:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015035:	50                   	push   eax
c0015036:	e8 55 f5 ff ff       	call   c0014590 <Vm::outbv(unsigned short, unsigned char)>
c001503b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001503f:	eb 53                	jmp    c0015094 <Vm::faultHandler(regs*)+0x659>
c0015041:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0015044:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015048:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001504d:	74 03                	je     c0015052 <Vm::faultHandler(regs*)+0x617>
c001504f:	ef                   	out    dx,eax
c0015050:	eb cf                	jmp    c0015021 <Vm::faultHandler(regs*)+0x5e6>
c0015052:	66 ef                	out    dx,ax
c0015054:	eb cb                	jmp    c0015021 <Vm::faultHandler(regs*)+0x5e6>
c0015056:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001505d:	83 ec 0c             	sub    esp,0xc
c0015060:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015064:	50                   	push   eax
c0015065:	e8 13 f5 ff ff       	call   c001457d <Vm::inbv(unsigned short)>
c001506a:	0f b6 c0             	movzx  eax,al
c001506d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0015070:	eb 1f                	jmp    c0015091 <Vm::faultHandler(regs*)+0x656>
c0015072:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0015075:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001507a:	74 03                	je     c001507f <Vm::faultHandler(regs*)+0x644>
c001507c:	ed                   	in     eax,dx
c001507d:	eb 0d                	jmp    c001508c <Vm::faultHandler(regs*)+0x651>
c001507f:	66 ed                	in     ax,dx
c0015081:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0015084:	0f b7 c0             	movzx  eax,ax
c0015087:	66 31 d2             	xor    dx,dx
c001508a:	09 d0                	or     eax,edx
c001508c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001508f:	eb 1a                	jmp    c00150ab <Vm::faultHandler(regs*)+0x670>
c0015091:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015094:	83 c4 10             	add    esp,0x10
c0015097:	eb 15                	jmp    c00150ae <Vm::faultHandler(regs*)+0x673>
c0015099:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001509c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001509f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00150a4:	74 03                	je     c00150a9 <Vm::faultHandler(regs*)+0x66e>
c00150a6:	ef                   	out    dx,eax
c00150a7:	eb 02                	jmp    c00150ab <Vm::faultHandler(regs*)+0x670>
c00150a9:	66 ef                	out    dx,ax
c00150ab:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00150ae:	b0 01                	mov    al,0x1
c00150b0:	eb 56                	jmp    c0015108 <Vm::faultHandler(regs*)+0x6cd>
c00150b2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00150b6:	50                   	push   eax
c00150b7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00150bb:	50                   	push   eax
c00150bc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00150c0:	50                   	push   eax
c00150c1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00150c5:	50                   	push   eax
c00150c6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00150ca:	50                   	push   eax
c00150cb:	52                   	push   edx
c00150cc:	52                   	push   edx
c00150cd:	68 13 ed 01 c0       	push   0xc001ed13
c00150d2:	e8 15 5b ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00150d7:	83 c4 20             	add    esp,0x20
c00150da:	83 ec 0c             	sub    esp,0xc
c00150dd:	6a 60                	push   0x60
c00150df:	e8 99 f4 ff ff       	call   c001457d <Vm::inbv(unsigned short)>
c00150e4:	83 c4 10             	add    esp,0x10
c00150e7:	3c 1c                	cmp    al,0x1c
c00150e9:	74 04                	je     c00150ef <Vm::faultHandler(regs*)+0x6b4>
c00150eb:	3c 5a                	cmp    al,0x5a
c00150ed:	75 eb                	jne    c00150da <Vm::faultHandler(regs*)+0x69f>
c00150ef:	3c 5a                	cmp    al,0x5a
c00150f1:	74 04                	je     c00150f7 <Vm::faultHandler(regs*)+0x6bc>
c00150f3:	3c 1c                	cmp    al,0x1c
c00150f5:	75 0f                	jne    c0015106 <Vm::faultHandler(regs*)+0x6cb>
c00150f7:	83 ec 0c             	sub    esp,0xc
c00150fa:	6a 60                	push   0x60
c00150fc:	e8 7c f4 ff ff       	call   c001457d <Vm::inbv(unsigned short)>
c0015101:	83 c4 10             	add    esp,0x10
c0015104:	eb e9                	jmp    c00150ef <Vm::faultHandler(regs*)+0x6b4>
c0015106:	31 c0                	xor    eax,eax
c0015108:	83 c4 1c             	add    esp,0x1c
c001510b:	5b                   	pop    ebx
c001510c:	5e                   	pop    esi
c001510d:	5f                   	pop    edi
c001510e:	5d                   	pop    ebp
c001510f:	c3                   	ret    

c0015110 <noCopro(unsigned long)>:
c0015110:	c3                   	ret    

c0015111 <nmiHandler(regs*, void*)>:
c0015111:	83 ec 0c             	sub    esp,0xc
c0015114:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0015119:	83 ec 0c             	sub    esp,0xc
c001511c:	50                   	push   eax
c001511d:	e8 5c 25 ff ff       	call   c000767e <Computer::handleNMI()>
c0015122:	83 c4 10             	add    esp,0x10
c0015125:	90                   	nop
c0015126:	83 c4 0c             	add    esp,0xc
c0015129:	c3                   	ret    

c001512a <doubleFault(regs*, void*)>:
c001512a:	55                   	push   ebp
c001512b:	89 e5                	mov    ebp,esp
c001512d:	83 ec 08             	sub    esp,0x8
c0015130:	83 ec 0c             	sub    esp,0xc
c0015133:	68 70 ed 01 c0       	push   0xc001ed70
c0015138:	e8 ae b5 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001513d:	83 c4 10             	add    esp,0x10
c0015140:	90                   	nop
c0015141:	c9                   	leave  
c0015142:	c3                   	ret    

c0015143 <displayDebugInfo(regs*)>:
c0015143:	83 ec 1c             	sub    esp,0x1c
c0015146:	0f 20 c0             	mov    eax,cr0
c0015149:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001514d:	0f 20 d0             	mov    eax,cr2
c0015150:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015154:	0f 20 d8             	mov    eax,cr3
c0015157:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001515b:	0f 20 e0             	mov    eax,cr4
c001515e:	89 04 24             	mov    DWORD PTR [esp],eax
c0015161:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015165:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015168:	83 ec 08             	sub    esp,0x8
c001516b:	50                   	push   eax
c001516c:	68 8c ed 01 c0       	push   0xc001ed8c
c0015171:	e8 76 5a ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0015176:	83 c4 10             	add    esp,0x10
c0015179:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001517d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015180:	83 ec 08             	sub    esp,0x8
c0015183:	50                   	push   eax
c0015184:	68 7d ed 01 c0       	push   0xc001ed7d
c0015189:	e8 5e 5a ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001518e:	83 c4 10             	add    esp,0x10
c0015191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015195:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015198:	83 ec 08             	sub    esp,0x8
c001519b:	50                   	push   eax
c001519c:	68 88 ed 01 c0       	push   0xc001ed88
c00151a1:	e8 46 5a ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00151a6:	83 c4 10             	add    esp,0x10
c00151a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151ad:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151b0:	83 ec 08             	sub    esp,0x8
c00151b3:	50                   	push   eax
c00151b4:	68 97 ed 01 c0       	push   0xc001ed97
c00151b9:	e8 2e 5a ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00151be:	83 c4 10             	add    esp,0x10
c00151c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151c5:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00151c8:	83 ec 08             	sub    esp,0x8
c00151cb:	50                   	push   eax
c00151cc:	68 a2 ed 01 c0       	push   0xc001eda2
c00151d1:	e8 16 5a ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00151d6:	83 c4 10             	add    esp,0x10
c00151d9:	83 ec 08             	sub    esp,0x8
c00151dc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00151e0:	68 ad ed 01 c0       	push   0xc001edad
c00151e5:	e8 02 5a ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00151ea:	83 c4 10             	add    esp,0x10
c00151ed:	83 ec 08             	sub    esp,0x8
c00151f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00151f4:	68 b8 ed 01 c0       	push   0xc001edb8
c00151f9:	e8 ee 59 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00151fe:	83 c4 10             	add    esp,0x10
c0015201:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0015206:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001520c:	83 ec 0c             	sub    esp,0xc
c001520f:	50                   	push   eax
c0015210:	e8 78 39 ff ff       	call   c0008b8d <setActiveTerminal(VgaText*)>
c0015215:	83 c4 10             	add    esp,0x10
c0015218:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c001521d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015223:	83 ec 08             	sub    esp,0x8
c0015226:	68 c3 ed 01 c0       	push   0xc001edc3
c001522b:	50                   	push   eax
c001522c:	e8 9b 3c ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c0015231:	83 c4 10             	add    esp,0x10
c0015234:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0015239:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001523f:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015244:	8b 12                	mov    edx,DWORD PTR [edx]
c0015246:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015249:	83 c2 0c             	add    edx,0xc
c001524c:	83 ec 08             	sub    esp,0x8
c001524f:	52                   	push   edx
c0015250:	50                   	push   eax
c0015251:	e8 76 3c ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c0015256:	83 c4 10             	add    esp,0x10
c0015259:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c001525e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015264:	83 ec 08             	sub    esp,0x8
c0015267:	68 cc ed 01 c0       	push   0xc001edcc
c001526c:	50                   	push   eax
c001526d:	e8 5a 3c ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c0015272:	83 c4 10             	add    esp,0x10
c0015275:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c001527a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015280:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015284:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0015287:	83 ec 08             	sub    esp,0x8
c001528a:	52                   	push   edx
c001528b:	50                   	push   eax
c001528c:	e8 f5 3b ff ff       	call   c0008e86 <VgaText::putx(unsigned int)>
c0015291:	83 c4 10             	add    esp,0x10
c0015294:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0015299:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001529f:	83 ec 08             	sub    esp,0x8
c00152a2:	68 d4 ed 01 c0       	push   0xc001edd4
c00152a7:	50                   	push   eax
c00152a8:	e8 1f 3c ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c00152ad:	83 c4 10             	add    esp,0x10
c00152b0:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c00152b5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152bb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00152bf:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00152c2:	83 ec 08             	sub    esp,0x8
c00152c5:	52                   	push   edx
c00152c6:	50                   	push   eax
c00152c7:	e8 ba 3b ff ff       	call   c0008e86 <VgaText::putx(unsigned int)>
c00152cc:	83 c4 10             	add    esp,0x10
c00152cf:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c00152d4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152da:	83 ec 08             	sub    esp,0x8
c00152dd:	68 dc ed 01 c0       	push   0xc001eddc
c00152e2:	50                   	push   eax
c00152e3:	e8 e4 3b ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c00152e8:	83 c4 10             	add    esp,0x10
c00152eb:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c00152f0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152f6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00152fa:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00152fd:	83 ec 08             	sub    esp,0x8
c0015300:	52                   	push   edx
c0015301:	50                   	push   eax
c0015302:	e8 7f 3b ff ff       	call   c0008e86 <VgaText::putx(unsigned int)>
c0015307:	83 c4 10             	add    esp,0x10
c001530a:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c001530f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015315:	83 ec 08             	sub    esp,0x8
c0015318:	68 e4 ed 01 c0       	push   0xc001ede4
c001531d:	50                   	push   eax
c001531e:	e8 a9 3b ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c0015323:	83 c4 10             	add    esp,0x10
c0015326:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c001532b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015331:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015335:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015338:	83 ec 08             	sub    esp,0x8
c001533b:	52                   	push   edx
c001533c:	50                   	push   eax
c001533d:	e8 44 3b ff ff       	call   c0008e86 <VgaText::putx(unsigned int)>
c0015342:	83 c4 10             	add    esp,0x10
c0015345:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c001534a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015350:	83 ec 08             	sub    esp,0x8
c0015353:	68 ec ed 01 c0       	push   0xc001edec
c0015358:	50                   	push   eax
c0015359:	e8 6e 3b ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c001535e:	83 c4 10             	add    esp,0x10
c0015361:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0015366:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001536c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015370:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0015373:	83 ec 08             	sub    esp,0x8
c0015376:	52                   	push   edx
c0015377:	50                   	push   eax
c0015378:	e8 09 3b ff ff       	call   c0008e86 <VgaText::putx(unsigned int)>
c001537d:	83 c4 10             	add    esp,0x10
c0015380:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0015385:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001538b:	83 ec 08             	sub    esp,0x8
c001538e:	68 f4 ed 01 c0       	push   0xc001edf4
c0015393:	50                   	push   eax
c0015394:	e8 33 3b ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c0015399:	83 c4 10             	add    esp,0x10
c001539c:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c00153a1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153a7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00153ab:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00153ae:	83 ec 08             	sub    esp,0x8
c00153b1:	52                   	push   edx
c00153b2:	50                   	push   eax
c00153b3:	e8 ce 3a ff ff       	call   c0008e86 <VgaText::putx(unsigned int)>
c00153b8:	83 c4 10             	add    esp,0x10
c00153bb:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c00153c0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153c6:	83 ec 08             	sub    esp,0x8
c00153c9:	68 fc ed 01 c0       	push   0xc001edfc
c00153ce:	50                   	push   eax
c00153cf:	e8 f8 3a ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c00153d4:	83 c4 10             	add    esp,0x10
c00153d7:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c00153dc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153e2:	83 ec 08             	sub    esp,0x8
c00153e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00153e9:	50                   	push   eax
c00153ea:	e8 97 3a ff ff       	call   c0008e86 <VgaText::putx(unsigned int)>
c00153ef:	83 c4 10             	add    esp,0x10
c00153f2:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c00153f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153fd:	83 ec 08             	sub    esp,0x8
c0015400:	68 05 ee 01 c0       	push   0xc001ee05
c0015405:	50                   	push   eax
c0015406:	e8 c1 3a ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c001540b:	83 c4 10             	add    esp,0x10
c001540e:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0015413:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015419:	83 ec 08             	sub    esp,0x8
c001541c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015420:	50                   	push   eax
c0015421:	e8 60 3a ff ff       	call   c0008e86 <VgaText::putx(unsigned int)>
c0015426:	83 c4 10             	add    esp,0x10
c0015429:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c001542e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015434:	83 ec 08             	sub    esp,0x8
c0015437:	68 0d ee 01 c0       	push   0xc001ee0d
c001543c:	50                   	push   eax
c001543d:	e8 8a 3a ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c0015442:	83 c4 10             	add    esp,0x10
c0015445:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c001544a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015450:	83 ec 08             	sub    esp,0x8
c0015453:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015457:	50                   	push   eax
c0015458:	e8 29 3a ff ff       	call   c0008e86 <VgaText::putx(unsigned int)>
c001545d:	83 c4 10             	add    esp,0x10
c0015460:	fa                   	cli    
c0015461:	f4                   	hlt    
c0015462:	eb fe                	jmp    c0015462 <displayDebugInfo(regs*)+0x31f>

c0015464 <HalSystemIdle()>:
c0015464:	56                   	push   esi
c0015465:	53                   	push   ebx
c0015466:	83 ec 14             	sub    esp,0x14
c0015469:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c001546e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015474:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c001547a:	83 e0 04             	and    eax,0x4
c001547d:	84 c0                	test   al,al
c001547f:	0f 95 c0             	setne  al
c0015482:	84 c0                	test   al,al
c0015484:	74 4c                	je     c00154d2 <HalSystemIdle()+0x6e>
c0015486:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c001548b:	83 ec 08             	sub    esp,0x8
c001548e:	68 e1 00 00 00       	push   0xe1
c0015493:	50                   	push   eax
c0015494:	e8 fd 1f ff ff       	call   c0007496 <Computer::rdmsr(unsigned int)>
c0015499:	83 c4 10             	add    esp,0x10
c001549c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00154a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00154a4:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c00154a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00154ad:	83 e2 02             	and    edx,0x2
c00154b0:	89 d3                	mov    ebx,edx
c00154b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00154b6:	83 e2 00             	and    edx,0x0
c00154b9:	89 d6                	mov    esi,edx
c00154bb:	56                   	push   esi
c00154bc:	53                   	push   ebx
c00154bd:	68 e1 00 00 00       	push   0xe1
c00154c2:	50                   	push   eax
c00154c3:	e8 fa 1f ff ff       	call   c00074c2 <Computer::wrmsr(unsigned int, unsigned long long)>
c00154c8:	83 c4 10             	add    esp,0x10
c00154cb:	e8 e4 ac fe ff       	call   c00001b4 <doTPAUSE>
c00154d0:	eb 01                	jmp    c00154d3 <HalSystemIdle()+0x6f>
c00154d2:	f4                   	hlt    
c00154d3:	90                   	nop
c00154d4:	83 c4 14             	add    esp,0x14
c00154d7:	5b                   	pop    ebx
c00154d8:	5e                   	pop    esi
c00154d9:	c3                   	ret    

c00154da <displayProgramFault(char const*)>:
c00154da:	83 ec 0c             	sub    esp,0xc
c00154dd:	83 ec 0c             	sub    esp,0xc
c00154e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154e4:	e8 03 57 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00154e9:	83 c4 10             	add    esp,0x10
c00154ec:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00154f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154f6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00154fc:	85 c0                	test   eax,eax
c00154fe:	74 21                	je     c0015521 <displayProgramFault(char const*)+0x47>
c0015500:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015505:	8b 00                	mov    eax,DWORD PTR [eax]
c0015507:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001550a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015510:	6a 04                	push   0x4
c0015512:	6a 0f                	push   0xf
c0015514:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015518:	50                   	push   eax
c0015519:	e8 20 3a ff ff       	call   c0008f3e <VgaText::puts(char const*, VgaColour, VgaColour)>
c001551e:	83 c4 10             	add    esp,0x10
c0015521:	90                   	nop
c0015522:	83 c4 0c             	add    esp,0xc
c0015525:	c3                   	ret    

c0015526 <gpFault(regs*, void*)>:
c0015526:	83 ec 1c             	sub    esp,0x1c
c0015529:	c7 05 30 3f 02 c0 3b 4a 01 c0 	mov    DWORD PTR ds:0xc0023f30,0xc0014a3b
c0015533:	a1 30 3f 02 c0       	mov    eax,ds:0xc0023f30
c0015538:	85 c0                	test   eax,eax
c001553a:	74 1c                	je     c0015558 <gpFault(regs*, void*)+0x32>
c001553c:	a1 30 3f 02 c0       	mov    eax,ds:0xc0023f30
c0015541:	83 ec 0c             	sub    esp,0xc
c0015544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015548:	ff d0                	call   eax
c001554a:	83 c4 10             	add    esp,0x10
c001554d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015551:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015556:	75 2e                	jne    c0015586 <gpFault(regs*, void*)+0x60>
c0015558:	83 ec 0c             	sub    esp,0xc
c001555b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001555f:	e8 df fb ff ff       	call   c0015143 <displayDebugInfo(regs*)>
c0015564:	83 c4 10             	add    esp,0x10
c0015567:	83 ec 0c             	sub    esp,0xc
c001556a:	68 15 ee 01 c0       	push   0xc001ee15
c001556f:	e8 66 ff ff ff       	call   c00154da <displayProgramFault(char const*)>
c0015574:	83 c4 10             	add    esp,0x10
c0015577:	83 ec 0c             	sub    esp,0xc
c001557a:	6a 00                	push   0x0
c001557c:	e8 af ee ff ff       	call   c0014430 <Thr::terminateFromIRQ(int)>
c0015581:	83 c4 10             	add    esp,0x10
c0015584:	eb 01                	jmp    c0015587 <gpFault(regs*, void*)+0x61>
c0015586:	90                   	nop
c0015587:	83 c4 1c             	add    esp,0x1c
c001558a:	c3                   	ret    

c001558b <pgFault(regs*, void*)>:
c001558b:	83 ec 1c             	sub    esp,0x1c
c001558e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015592:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015595:	0f 20 d0             	mov    eax,cr2
c0015598:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001559c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00155a0:	83 ec 04             	sub    esp,0x4
c00155a3:	52                   	push   edx
c00155a4:	50                   	push   eax
c00155a5:	68 80 ee 01 c0       	push   0xc001ee80
c00155aa:	e8 3d 56 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00155af:	83 c4 10             	add    esp,0x10
c00155b2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00155b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00155bc:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00155c2:	0f 20 d2             	mov    edx,cr2
c00155c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00155c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00155cd:	83 ec 08             	sub    esp,0x8
c00155d0:	52                   	push   edx
c00155d1:	50                   	push   eax
c00155d2:	e8 47 52 ff ff       	call   c000a81e <VAS::tryLoadBackOffDisk(unsigned long)>
c00155d7:	83 c4 10             	add    esp,0x10
c00155da:	84 c0                	test   al,al
c00155dc:	75 2e                	jne    c001560c <pgFault(regs*, void*)+0x81>
c00155de:	83 ec 0c             	sub    esp,0xc
c00155e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155e5:	e8 59 fb ff ff       	call   c0015143 <displayDebugInfo(regs*)>
c00155ea:	83 c4 10             	add    esp,0x10
c00155ed:	83 ec 0c             	sub    esp,0xc
c00155f0:	68 2e ee 01 c0       	push   0xc001ee2e
c00155f5:	e8 e0 fe ff ff       	call   c00154da <displayProgramFault(char const*)>
c00155fa:	83 c4 10             	add    esp,0x10
c00155fd:	83 ec 0c             	sub    esp,0xc
c0015600:	6a 00                	push   0x0
c0015602:	e8 29 ee ff ff       	call   c0014430 <Thr::terminateFromIRQ(int)>
c0015607:	83 c4 10             	add    esp,0x10
c001560a:	eb 01                	jmp    c001560d <pgFault(regs*, void*)+0x82>
c001560c:	90                   	nop
c001560d:	83 c4 1c             	add    esp,0x1c
c0015610:	c3                   	ret    

c0015611 <otherISRHandler(regs*, void*)>:
c0015611:	83 ec 0c             	sub    esp,0xc
c0015614:	83 ec 0c             	sub    esp,0xc
c0015617:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001561b:	e8 23 fb ff ff       	call   c0015143 <displayDebugInfo(regs*)>
c0015620:	83 c4 10             	add    esp,0x10
c0015623:	83 ec 0c             	sub    esp,0xc
c0015626:	68 a8 ee 01 c0       	push   0xc001eea8
c001562b:	e8 aa fe ff ff       	call   c00154da <displayProgramFault(char const*)>
c0015630:	83 c4 10             	add    esp,0x10
c0015633:	83 ec 0c             	sub    esp,0xc
c0015636:	6a 00                	push   0x0
c0015638:	e8 f3 ed ff ff       	call   c0014430 <Thr::terminateFromIRQ(int)>
c001563d:	83 c4 10             	add    esp,0x10
c0015640:	90                   	nop
c0015641:	83 c4 0c             	add    esp,0xc
c0015644:	c3                   	ret    

c0015645 <opcodeFault(regs*, void*)>:
c0015645:	55                   	push   ebp
c0015646:	89 e5                	mov    ebp,esp
c0015648:	83 ec 08             	sub    esp,0x8
c001564b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015651:	83 ec 08             	sub    esp,0x8
c0015654:	50                   	push   eax
c0015655:	68 39 ee 01 c0       	push   0xc001ee39
c001565a:	e8 8d 55 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001565f:	83 c4 10             	add    esp,0x10
c0015662:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0015667:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001566d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0015673:	84 c0                	test   al,al
c0015675:	74 21                	je     c0015698 <opcodeFault(regs*, void*)+0x53>
c0015677:	83 ec 0c             	sub    esp,0xc
c001567a:	68 d0 ee 01 c0       	push   0xc001eed0
c001567f:	e8 68 55 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0015684:	83 c4 10             	add    esp,0x10
c0015687:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001568a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001568d:	8d 50 19             	lea    edx,[eax+0x19]
c0015690:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015693:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015696:	eb 2b                	jmp    c00156c3 <opcodeFault(regs*, void*)+0x7e>
c0015698:	83 ec 0c             	sub    esp,0xc
c001569b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001569e:	e8 a0 fa ff ff       	call   c0015143 <displayDebugInfo(regs*)>
c00156a3:	83 c4 10             	add    esp,0x10
c00156a6:	83 ec 0c             	sub    esp,0xc
c00156a9:	68 47 ee 01 c0       	push   0xc001ee47
c00156ae:	e8 27 fe ff ff       	call   c00154da <displayProgramFault(char const*)>
c00156b3:	83 c4 10             	add    esp,0x10
c00156b6:	83 ec 0c             	sub    esp,0xc
c00156b9:	6a 00                	push   0x0
c00156bb:	e8 70 ed ff ff       	call   c0014430 <Thr::terminateFromIRQ(int)>
c00156c0:	83 c4 10             	add    esp,0x10
c00156c3:	c9                   	leave  
c00156c4:	c3                   	ret    

c00156c5 <i386SaveCoprocessor(void*)>:
c00156c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156c9:	83 c0 3f             	add    eax,0x3f
c00156cc:	83 e0 c0             	and    eax,0xffffffc0
c00156cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00156d3:	ff 25 2c 3f 02 c0    	jmp    DWORD PTR ds:0xc0023f2c

c00156d9 <i386LoadCoprocessor(void*)>:
c00156d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156dd:	83 c0 3f             	add    eax,0x3f
c00156e0:	83 e0 c0             	and    eax,0xffffffc0
c00156e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00156e7:	ff 25 28 3f 02 c0    	jmp    DWORD PTR ds:0xc0023f28

c00156ed <x87EmulHandler(regs*, void*)>:
c00156ed:	53                   	push   ebx
c00156ee:	83 ec 08             	sub    esp,0x8
c00156f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156f6:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00156fa:	74 10                	je     c001570c <x87EmulHandler(regs*, void*)+0x1f>
c00156fc:	83 ec 0c             	sub    esp,0xc
c00156ff:	68 54 ee 01 c0       	push   0xc001ee54
c0015704:	e8 e2 af ff ff       	call   c00106eb <Krnl::panic(char const*)>
c0015709:	83 c4 10             	add    esp,0x10
c001570c:	0f 20 c0             	mov    eax,cr0
c001570f:	a8 08                	test   al,0x8
c0015711:	74 59                	je     c001576c <x87EmulHandler(regs*, void*)+0x7f>
c0015713:	0f 06                	clts   
c0015715:	a1 24 3f 02 c0       	mov    eax,ds:0xc0023f24
c001571a:	85 c0                	test   eax,eax
c001571c:	74 0e                	je     c001572c <x87EmulHandler(regs*, void*)+0x3f>
c001571e:	83 ec 0c             	sub    esp,0xc
c0015721:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015724:	e8 9c ff ff ff       	call   c00156c5 <i386SaveCoprocessor(void*)>
c0015729:	83 c4 10             	add    esp,0x10
c001572c:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0015732:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0015736:	75 12                	jne    c001574a <x87EmulHandler(regs*, void*)+0x5d>
c0015738:	83 ec 0c             	sub    esp,0xc
c001573b:	68 40 02 00 00       	push   0x240
c0015740:	e8 18 27 ff ff       	call   c0007e5d <malloc>
c0015745:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0015748:	eb 10                	jmp    c001575a <x87EmulHandler(regs*, void*)+0x6d>
c001574a:	83 ec 0c             	sub    esp,0xc
c001574d:	a1 24 3f 02 c0       	mov    eax,ds:0xc0023f24
c0015752:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015755:	e8 7f ff ff ff       	call   c00156d9 <i386LoadCoprocessor(void*)>
c001575a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001575f:	83 c4 10             	add    esp,0x10
c0015762:	a3 24 3f 02 c0       	mov    ds:0xc0023f24,eax
c0015767:	83 c4 08             	add    esp,0x8
c001576a:	5b                   	pop    ebx
c001576b:	c3                   	ret    
c001576c:	83 ec 0c             	sub    esp,0xc
c001576f:	68 68 ee 01 c0       	push   0xc001ee68
c0015774:	e8 73 54 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0015779:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015781:	83 c4 18             	add    esp,0x18
c0015784:	5b                   	pop    ebx
c0015785:	e9 a6 ec ff ff       	jmp    c0014430 <Thr::terminateFromIRQ(int)>

c001578a <HalInitialiseCoprocessor()>:
c001578a:	83 ec 10             	sub    esp,0x10
c001578d:	c7 05 24 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023f24,0x0
c0015797:	6a 00                	push   0x0
c0015799:	68 ed 56 01 c0       	push   0xc00156ed
c001579e:	6a 07                	push   0x7
c00157a0:	e8 bb 6d ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157a5:	e8 86 64 00 00       	call   c001bc30 <avxDetect>
c00157aa:	83 c4 10             	add    esp,0x10
c00157ad:	85 c0                	test   eax,eax
c00157af:	74 1c                	je     c00157cd <HalInitialiseCoprocessor()+0x43>
c00157b1:	c7 05 2c 3f 02 c0 5a bc 01 c0 	mov    DWORD PTR ds:0xc0023f2c,0xc001bc5a
c00157bb:	c7 05 28 3f 02 c0 6b bc 01 c0 	mov    DWORD PTR ds:0xc0023f28,0xc001bc6b
c00157c5:	83 c4 0c             	add    esp,0xc
c00157c8:	e9 af 64 00 00       	jmp    c001bc7c <avxInit>
c00157cd:	e8 de 66 00 00       	call   c001beb0 <absolutelyNoChanceInHell>
c00157d2:	85 c0                	test   eax,eax
c00157d4:	74 1c                	je     c00157f2 <HalInitialiseCoprocessor()+0x68>
c00157d6:	c7 05 2c 3f 02 c0 c8 be 01 c0 	mov    DWORD PTR ds:0xc0023f2c,0xc001bec8
c00157e0:	c7 05 28 3f 02 c0 d0 be 01 c0 	mov    DWORD PTR ds:0xc0023f28,0xc001bed0
c00157ea:	83 c4 0c             	add    esp,0xc
c00157ed:	e9 e6 66 00 00       	jmp    c001bed8 <sseInit>
c00157f2:	e8 ff 66 00 00       	call   c001bef6 <x87Detect>
c00157f7:	85 c0                	test   eax,eax
c00157f9:	74 1c                	je     c0015817 <HalInitialiseCoprocessor()+0x8d>
c00157fb:	c7 05 2c 3f 02 c0 11 bf 01 c0 	mov    DWORD PTR ds:0xc0023f2c,0xc001bf11
c0015805:	c7 05 28 3f 02 c0 18 bf 01 c0 	mov    DWORD PTR ds:0xc0023f28,0xc001bf18
c001580f:	83 c4 0c             	add    esp,0xc
c0015812:	e9 08 67 00 00       	jmp    c001bf1f <x87Init>
c0015817:	c7 05 2c 3f 02 c0 10 51 01 c0 	mov    DWORD PTR ds:0xc0023f2c,0xc0015110
c0015821:	c7 05 28 3f 02 c0 10 51 01 c0 	mov    DWORD PTR ds:0xc0023f28,0xc0015110
c001582b:	0f 20 c0             	mov    eax,cr0
c001582e:	83 c8 04             	or     eax,0x4
c0015831:	0f 22 c0             	mov    cr0,eax
c0015834:	83 c4 0c             	add    esp,0xc
c0015837:	c3                   	ret    

c0015838 <HalPanic(char const*)>:
c0015838:	e9 ae ae ff ff       	jmp    c00106eb <Krnl::panic(char const*)>

c001583d <HalQueryPerformanceCounter()>:
c001583d:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0015842:	31 d2                	xor    edx,edx
c0015844:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001584a:	31 c0                	xor    eax,eax
c001584c:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0015853:	74 02                	je     c0015857 <HalQueryPerformanceCounter()+0x1a>
c0015855:	0f 31                	rdtsc  
c0015857:	c3                   	ret    

c0015858 <HalInitialise()>:
c0015858:	53                   	push   ebx
c0015859:	83 ec 08             	sub    esp,0x8
c001585c:	e8 32 6f ff ff       	call   c000c793 <setupINTS()>
c0015861:	80 3d 80 32 02 c0 00 	cmp    BYTE PTR ds:0xc0023280,0x0
c0015868:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c001586d:	75 07                	jne    c0015876 <HalInitialise()+0x1e>
c001586f:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0015876:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001587c:	83 e0 01             	and    eax,0x1
c001587f:	a2 20 3f 02 c0       	mov    ds:0xc0023f20,al
c0015884:	e8 a7 02 00 00       	call   c0015b30 <picOpen()>
c0015889:	80 3d 20 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023f20,0x0
c0015890:	74 0a                	je     c001589c <HalInitialise()+0x44>
c0015892:	e8 e1 01 00 00       	call   c0015a78 <picDisable()>
c0015897:	e8 08 5d 00 00       	call   c001b5a4 <apicOpen()>
c001589c:	bb 0f 00 00 00       	mov    ebx,0xf
c00158a1:	50                   	push   eax
c00158a2:	6a 00                	push   0x0
c00158a4:	68 11 56 01 c0       	push   0xc0015611
c00158a9:	6a 00                	push   0x0
c00158ab:	e8 b0 6c ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158b0:	83 c4 0c             	add    esp,0xc
c00158b3:	6a 00                	push   0x0
c00158b5:	68 11 56 01 c0       	push   0xc0015611
c00158ba:	6a 01                	push   0x1
c00158bc:	e8 9f 6c ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158c1:	83 c4 0c             	add    esp,0xc
c00158c4:	6a 00                	push   0x0
c00158c6:	68 11 51 01 c0       	push   0xc0015111
c00158cb:	6a 02                	push   0x2
c00158cd:	e8 8e 6c ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158d2:	83 c4 0c             	add    esp,0xc
c00158d5:	6a 00                	push   0x0
c00158d7:	68 11 56 01 c0       	push   0xc0015611
c00158dc:	6a 03                	push   0x3
c00158de:	e8 7d 6c ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158e3:	83 c4 0c             	add    esp,0xc
c00158e6:	6a 00                	push   0x0
c00158e8:	68 11 56 01 c0       	push   0xc0015611
c00158ed:	6a 04                	push   0x4
c00158ef:	e8 6c 6c ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158f4:	83 c4 0c             	add    esp,0xc
c00158f7:	6a 00                	push   0x0
c00158f9:	68 11 56 01 c0       	push   0xc0015611
c00158fe:	6a 05                	push   0x5
c0015900:	e8 5b 6c ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015905:	83 c4 0c             	add    esp,0xc
c0015908:	6a 00                	push   0x0
c001590a:	68 45 56 01 c0       	push   0xc0015645
c001590f:	6a 06                	push   0x6
c0015911:	e8 4a 6c ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015916:	83 c4 0c             	add    esp,0xc
c0015919:	6a 00                	push   0x0
c001591b:	68 2a 51 01 c0       	push   0xc001512a
c0015920:	6a 08                	push   0x8
c0015922:	e8 39 6c ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015927:	83 c4 0c             	add    esp,0xc
c001592a:	6a 00                	push   0x0
c001592c:	68 11 56 01 c0       	push   0xc0015611
c0015931:	6a 09                	push   0x9
c0015933:	e8 28 6c ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015938:	83 c4 0c             	add    esp,0xc
c001593b:	6a 00                	push   0x0
c001593d:	68 11 56 01 c0       	push   0xc0015611
c0015942:	6a 0a                	push   0xa
c0015944:	e8 17 6c ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015949:	83 c4 0c             	add    esp,0xc
c001594c:	6a 00                	push   0x0
c001594e:	68 11 56 01 c0       	push   0xc0015611
c0015953:	6a 0b                	push   0xb
c0015955:	e8 06 6c ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001595a:	83 c4 0c             	add    esp,0xc
c001595d:	6a 00                	push   0x0
c001595f:	68 26 55 01 c0       	push   0xc0015526
c0015964:	6a 0d                	push   0xd
c0015966:	e8 f5 6b ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001596b:	83 c4 0c             	add    esp,0xc
c001596e:	6a 00                	push   0x0
c0015970:	68 8b 55 01 c0       	push   0xc001558b
c0015975:	6a 0e                	push   0xe
c0015977:	e8 e4 6b ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001597c:	83 c4 10             	add    esp,0x10
c001597f:	50                   	push   eax
c0015980:	6a 00                	push   0x0
c0015982:	68 11 56 01 c0       	push   0xc0015611
c0015987:	53                   	push   ebx
c0015988:	43                   	inc    ebx
c0015989:	e8 d2 6b ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001598e:	83 c4 10             	add    esp,0x10
c0015991:	83 fb 1e             	cmp    ebx,0x1e
c0015994:	75 e9                	jne    c001597f <HalInitialise()+0x127>
c0015996:	50                   	push   eax
c0015997:	6a 00                	push   0x0
c0015999:	68 58 1f 01 c0       	push   0xc0011f58
c001599e:	6a 60                	push   0x60
c00159a0:	e8 bb 6b ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00159a5:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c00159aa:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00159b4:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00159bb:	e8 9d 24 ff ff       	call   c0007e5d <malloc>
c00159c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00159c3:	89 c3                	mov    ebx,eax
c00159c5:	e8 2e 09 00 00       	call   c00162f8 <RTC::RTC()>
c00159ca:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00159d4:	5a                   	pop    edx
c00159d5:	59                   	pop    ecx
c00159d6:	53                   	push   ebx
c00159d7:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c00159dd:	e8 4a 66 ff ff       	call   c000c02c <Device::addChild(Device*)>
c00159e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159e4:	6a 00                	push   0x0
c00159e6:	6a 00                	push   0x0
c00159e8:	6a 00                	push   0x0
c00159ea:	53                   	push   ebx
c00159eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159ee:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c00159f3:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00159f9:	83 c4 28             	add    esp,0x28
c00159fc:	5b                   	pop    ebx
c00159fd:	c3                   	ret    

c00159fe <HalMakeBeep(int)>:
c00159fe:	53                   	push   ebx
c00159ff:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015a03:	85 db                	test   ebx,ebx
c0015a05:	75 07                	jne    c0015a0e <HalMakeBeep(int)+0x10>
c0015a07:	e4 61                	in     al,0x61
c0015a09:	83 e0 fc             	and    eax,0xfffffffc
c0015a0c:	eb 26                	jmp    c0015a34 <HalMakeBeep(int)+0x36>
c0015a0e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0015a13:	99                   	cdq    
c0015a14:	f7 fb                	idiv   ebx
c0015a16:	89 c1                	mov    ecx,eax
c0015a18:	b0 b6                	mov    al,0xb6
c0015a1a:	e6 43                	out    0x43,al
c0015a1c:	88 c8                	mov    al,cl
c0015a1e:	e6 42                	out    0x42,al
c0015a20:	89 c8                	mov    eax,ecx
c0015a22:	c1 e8 08             	shr    eax,0x8
c0015a25:	e6 42                	out    0x42,al
c0015a27:	e4 61                	in     al,0x61
c0015a29:	88 c2                	mov    dl,al
c0015a2b:	83 ca 03             	or     edx,0x3
c0015a2e:	38 c2                	cmp    dl,al
c0015a30:	74 04                	je     c0015a36 <HalMakeBeep(int)+0x38>
c0015a32:	88 d0                	mov    al,dl
c0015a34:	e6 61                	out    0x61,al
c0015a36:	5b                   	pop    ebx
c0015a37:	c3                   	ret    

c0015a38 <HalGetRand()>:
c0015a38:	31 c0                	xor    eax,eax
c0015a3a:	c3                   	ret    

c0015a3b <HalEndOfInterrupt(int)>:
c0015a3b:	80 3d 20 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023f20,0x0
c0015a42:	74 23                	je     c0015a67 <HalEndOfInterrupt(int)+0x2c>
c0015a44:	83 ec 14             	sub    esp,0x14
c0015a47:	6a 1b                	push   0x1b
c0015a49:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015a4f:	e8 42 1a ff ff       	call   c0007496 <Computer::rdmsr(unsigned int)>
c0015a54:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015a59:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0015a63:	83 c4 1c             	add    esp,0x1c
c0015a66:	c3                   	ret    
c0015a67:	e9 54 02 00 00       	jmp    c0015cc0 <picEOI(int)>

c0015a6c <HalRestart()>:
c0015a6c:	c3                   	ret    

c0015a6d <HalShutdown()>:
c0015a6d:	c3                   	ret    

c0015a6e <HalSleep()>:
c0015a6e:	c3                   	ret    
c0015a6f:	90                   	nop

c0015a70 <picIoWait()>:
c0015a70:	eb 00                	jmp    c0015a72 <picIoWait()+0x2>
c0015a72:	eb 00                	jmp    c0015a74 <picIoWait()+0x4>
c0015a74:	90                   	nop
c0015a75:	c3                   	ret    
c0015a76:	66 90                	xchg   ax,ax

c0015a78 <picDisable()>:
c0015a78:	83 ec 10             	sub    esp,0x10
c0015a7b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0015a82:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0015a87:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015a8b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015a90:	ee                   	out    dx,al
c0015a91:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015a98:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015a9d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015aa1:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0015aa6:	ee                   	out    dx,al
c0015aa7:	90                   	nop
c0015aa8:	83 c4 10             	add    esp,0x10
c0015aab:	c3                   	ret    

c0015aac <picGetIRQReg(int)>:
c0015aac:	83 ec 10             	sub    esp,0x10
c0015aaf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ab3:	25 ff 00 00 00       	and    eax,0xff
c0015ab8:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015abf:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015ac3:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015ac7:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015acc:	ee                   	out    dx,al
c0015acd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ad1:	25 ff 00 00 00       	and    eax,0xff
c0015ad6:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015add:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015ae1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015ae5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015aea:	ee                   	out    dx,al
c0015aeb:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015af2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015af7:	89 c2                	mov    edx,eax
c0015af9:	ec                   	in     al,dx
c0015afa:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015afe:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015b02:	25 ff 00 00 00       	and    eax,0xff
c0015b07:	c1 e0 08             	shl    eax,0x8
c0015b0a:	89 c1                	mov    ecx,eax
c0015b0c:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015b13:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015b18:	89 c2                	mov    edx,eax
c0015b1a:	ec                   	in     al,dx
c0015b1b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015b1f:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015b23:	25 ff 00 00 00       	and    eax,0xff
c0015b28:	09 c8                	or     eax,ecx
c0015b2a:	83 c4 10             	add    esp,0x10
c0015b2d:	c3                   	ret    
c0015b2e:	66 90                	xchg   ax,ax

c0015b30 <picOpen()>:
c0015b30:	83 ec 50             	sub    esp,0x50
c0015b33:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015b3a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015b3f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015b43:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b47:	ee                   	out    dx,al
c0015b48:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015b4f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015b54:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015b58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015b5c:	ee                   	out    dx,al
c0015b5d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015b65:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015b6d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015b74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b78:	89 c2                	mov    edx,eax
c0015b7a:	ec                   	in     al,dx
c0015b7b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015b7f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015b83:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015b87:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015b8e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b92:	89 c2                	mov    edx,eax
c0015b94:	ec                   	in     al,dx
c0015b95:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015b99:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015b9d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015ba1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015ba8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015bad:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015bb1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015bb5:	ee                   	out    dx,al
c0015bb6:	e8 b5 fe ff ff       	call   c0015a70 <picIoWait()>
c0015bbb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015bc2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015bc7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015bcb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015bcf:	ee                   	out    dx,al
c0015bd0:	e8 9b fe ff ff       	call   c0015a70 <picIoWait()>
c0015bd5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015bd9:	25 ff 00 00 00       	and    eax,0xff
c0015bde:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015be5:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015be9:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015bed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015bf1:	ee                   	out    dx,al
c0015bf2:	e8 79 fe ff ff       	call   c0015a70 <picIoWait()>
c0015bf7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015bfb:	25 ff 00 00 00       	and    eax,0xff
c0015c00:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015c07:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015c0b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015c0f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015c13:	ee                   	out    dx,al
c0015c14:	e8 57 fe ff ff       	call   c0015a70 <picIoWait()>
c0015c19:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015c20:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015c25:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015c29:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015c2d:	ee                   	out    dx,al
c0015c2e:	e8 3d fe ff ff       	call   c0015a70 <picIoWait()>
c0015c33:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015c3a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015c3f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015c43:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015c47:	ee                   	out    dx,al
c0015c48:	e8 23 fe ff ff       	call   c0015a70 <picIoWait()>
c0015c4d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015c54:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015c59:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015c5d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015c61:	ee                   	out    dx,al
c0015c62:	e8 09 fe ff ff       	call   c0015a70 <picIoWait()>
c0015c67:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015c6e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015c73:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015c77:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015c7b:	ee                   	out    dx,al
c0015c7c:	e8 ef fd ff ff       	call   c0015a70 <picIoWait()>
c0015c81:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015c85:	25 ff 00 00 00       	and    eax,0xff
c0015c8a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015c91:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015c95:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015c99:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015c9d:	ee                   	out    dx,al
c0015c9e:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015ca2:	25 ff 00 00 00       	and    eax,0xff
c0015ca7:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015cae:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015cb2:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015cb6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015cba:	ee                   	out    dx,al
c0015cbb:	90                   	nop
c0015cbc:	83 c4 50             	add    esp,0x50
c0015cbf:	c3                   	ret    

c0015cc0 <picEOI(int)>:
c0015cc0:	83 ec 10             	sub    esp,0x10
c0015cc3:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015cc8:	75 22                	jne    c0015cec <picEOI(int)+0x2c>
c0015cca:	6a 0b                	push   0xb
c0015ccc:	e8 db fd ff ff       	call   c0015aac <picGetIRQReg(int)>
c0015cd1:	83 c4 04             	add    esp,0x4
c0015cd4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015cd9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015cde:	25 ff ff 00 00       	and    eax,0xffff
c0015ce3:	25 80 00 00 00       	and    eax,0x80
c0015ce8:	74 72                	je     c0015d5c <picEOI(int)+0x9c>
c0015cea:	66 90                	xchg   ax,ax
c0015cec:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015cf1:	75 31                	jne    c0015d24 <picEOI(int)+0x64>
c0015cf3:	6a 0b                	push   0xb
c0015cf5:	e8 b2 fd ff ff       	call   c0015aac <picGetIRQReg(int)>
c0015cfa:	83 c4 04             	add    esp,0x4
c0015cfd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015d02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d06:	66 85 c0             	test   ax,ax
c0015d09:	78 19                	js     c0015d24 <picEOI(int)+0x64>
c0015d0b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015d12:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015d17:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015d1b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015d20:	ee                   	out    dx,al
c0015d21:	eb 3d                	jmp    c0015d60 <picEOI(int)+0xa0>
c0015d23:	90                   	nop
c0015d24:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015d29:	7e 19                	jle    c0015d44 <picEOI(int)+0x84>
c0015d2b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015d32:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015d37:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015d3b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015d40:	ee                   	out    dx,al
c0015d41:	8d 76 00             	lea    esi,[esi+0x0]
c0015d44:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015d4b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015d50:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015d54:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015d59:	ee                   	out    dx,al
c0015d5a:	eb 04                	jmp    c0015d60 <picEOI(int)+0xa0>
c0015d5c:	90                   	nop
c0015d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0015d60:	83 c4 10             	add    esp,0x10
c0015d63:	c3                   	ret    

c0015d64 <RTC::open(int, int, void*)>:
c0015d64:	31 c0                	xor    eax,eax
c0015d66:	c3                   	ret    
c0015d67:	90                   	nop

c0015d68 <RTC::close(int, int, void*)>:
c0015d68:	31 c0                	xor    eax,eax
c0015d6a:	c3                   	ret    
c0015d6b:	90                   	nop

c0015d6c <RTC::timeInSecondsUTC()>:
c0015d6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d70:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015d76:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d7c:	c3                   	ret    
c0015d7d:	90                   	nop

c0015d7e <RTC::timeInDatetimeUTC()>:
c0015d7e:	53                   	push   ebx
c0015d7f:	83 ec 14             	sub    esp,0x14
c0015d82:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015d86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d8c:	50                   	push   eax
c0015d8d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015d90:	83 c4 0c             	add    esp,0xc
c0015d93:	52                   	push   edx
c0015d94:	50                   	push   eax
c0015d95:	53                   	push   ebx
c0015d96:	e8 05 60 ff ff       	call   c000bda0 <secondsToDatetime(unsigned long long)>
c0015d9b:	89 d8                	mov    eax,ebx
c0015d9d:	83 c4 14             	add    esp,0x14
c0015da0:	5b                   	pop    ebx
c0015da1:	c2 04 00             	ret    0x4

c0015da4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015da4:	56                   	push   esi
c0015da5:	53                   	push   ebx
c0015da6:	83 ec 14             	sub    esp,0x14
c0015da9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015dad:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015daf:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015db2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015db6:	52                   	push   edx
c0015db7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015dbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015dbf:	50                   	push   eax
c0015dc0:	e8 db 5f ff ff       	call   c000bda0 <secondsToDatetime(unsigned long long)>
c0015dc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015dc9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015dcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015dd1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015dd5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015dd9:	89 f0                	mov    eax,esi
c0015ddb:	83 c4 20             	add    esp,0x20
c0015dde:	5b                   	pop    ebx
c0015ddf:	5e                   	pop    esi
c0015de0:	ff e0                	jmp    eax

c0015de2 <RTC::~RTC()>:
c0015de2:	83 ec 0c             	sub    esp,0xc
c0015de5:	ba 10 ef 01 c0       	mov    edx,0xc001ef10
c0015dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dee:	89 10                	mov    DWORD PTR [eax],edx
c0015df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015df4:	83 ec 0c             	sub    esp,0xc
c0015df7:	50                   	push   eax
c0015df8:	e8 27 5d ff ff       	call   c000bb24 <Clock::~Clock()>
c0015dfd:	83 c4 10             	add    esp,0x10
c0015e00:	90                   	nop
c0015e01:	83 c4 0c             	add    esp,0xc
c0015e04:	c3                   	ret    
c0015e05:	90                   	nop

c0015e06 <RTC::~RTC()>:
c0015e06:	83 ec 0c             	sub    esp,0xc
c0015e09:	83 ec 0c             	sub    esp,0xc
c0015e0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e10:	e8 cd ff ff ff       	call   c0015de2 <RTC::~RTC()>
c0015e15:	83 c4 10             	add    esp,0x10
c0015e18:	83 ec 08             	sub    esp,0x8
c0015e1b:	68 60 01 00 00       	push   0x160
c0015e20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e24:	e8 cd 4c ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c0015e29:	83 c4 10             	add    esp,0x10
c0015e2c:	83 c4 0c             	add    esp,0xc
c0015e2f:	c3                   	ret    

c0015e30 <RTC::get_update_in_progress_flag()>:
c0015e30:	83 ec 14             	sub    esp,0x14
c0015e33:	6a 0a                	push   0xa
c0015e35:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015e3b:	e8 0a 17 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015e40:	83 c4 1c             	add    esp,0x1c
c0015e43:	c0 e8 07             	shr    al,0x7
c0015e46:	c3                   	ret    
c0015e47:	90                   	nop

c0015e48 <RTC::completeRTCRefresh()>:
c0015e48:	55                   	push   ebp
c0015e49:	57                   	push   edi
c0015e4a:	56                   	push   esi
c0015e4b:	53                   	push   ebx
c0015e4c:	83 ec 2c             	sub    esp,0x2c
c0015e4f:	8b 1d 8c 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f8c
c0015e55:	83 ec 0c             	sub    esp,0xc
c0015e58:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015e5c:	e8 cf ff ff ff       	call   c0015e30 <RTC::get_update_in_progress_flag()>
c0015e61:	83 c4 10             	add    esp,0x10
c0015e64:	84 c0                	test   al,al
c0015e66:	74 0e                	je     c0015e76 <RTC::completeRTCRefresh()+0x2e>
c0015e68:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015e6e:	3b 05 8c 2f 02 c0    	cmp    eax,DWORD PTR ds:0xc0022f8c
c0015e74:	73 df                	jae    c0015e55 <RTC::completeRTCRefresh()+0xd>
c0015e76:	55                   	push   ebp
c0015e77:	55                   	push   ebp
c0015e78:	6a 00                	push   0x0
c0015e7a:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015e80:	e8 c5 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015e85:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015e89:	58                   	pop    eax
c0015e8a:	5a                   	pop    edx
c0015e8b:	6a 02                	push   0x2
c0015e8d:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015e93:	e8 b2 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015e98:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015e9c:	59                   	pop    ecx
c0015e9d:	5b                   	pop    ebx
c0015e9e:	6a 04                	push   0x4
c0015ea0:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015ea6:	e8 9f 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015eab:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015eaf:	5e                   	pop    esi
c0015eb0:	5f                   	pop    edi
c0015eb1:	6a 07                	push   0x7
c0015eb3:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015eb9:	e8 8c 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015ebe:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015ec2:	5d                   	pop    ebp
c0015ec3:	58                   	pop    eax
c0015ec4:	6a 08                	push   0x8
c0015ec6:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015ecc:	e8 79 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015ed1:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015ed5:	58                   	pop    eax
c0015ed6:	5a                   	pop    edx
c0015ed7:	6a 09                	push   0x9
c0015ed9:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015edf:	e8 66 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015ee4:	83 c4 10             	add    esp,0x10
c0015ee7:	0f b6 e8             	movzx  ebp,al
c0015eea:	8b 1d 8c 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f8c
c0015ef0:	83 ec 0c             	sub    esp,0xc
c0015ef3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015ef7:	e8 34 ff ff ff       	call   c0015e30 <RTC::get_update_in_progress_flag()>
c0015efc:	83 c4 10             	add    esp,0x10
c0015eff:	84 c0                	test   al,al
c0015f01:	74 0e                	je     c0015f11 <RTC::completeRTCRefresh()+0xc9>
c0015f03:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015f09:	3b 05 8c 2f 02 c0    	cmp    eax,DWORD PTR ds:0xc0022f8c
c0015f0f:	73 df                	jae    c0015ef0 <RTC::completeRTCRefresh()+0xa8>
c0015f11:	50                   	push   eax
c0015f12:	50                   	push   eax
c0015f13:	6a 00                	push   0x0
c0015f15:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015f1b:	e8 2a 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015f20:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015f24:	58                   	pop    eax
c0015f25:	5a                   	pop    edx
c0015f26:	6a 02                	push   0x2
c0015f28:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015f2e:	e8 17 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015f33:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f37:	59                   	pop    ecx
c0015f38:	5b                   	pop    ebx
c0015f39:	6a 04                	push   0x4
c0015f3b:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015f41:	e8 04 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015f46:	5e                   	pop    esi
c0015f47:	88 c3                	mov    bl,al
c0015f49:	5f                   	pop    edi
c0015f4a:	6a 07                	push   0x7
c0015f4c:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015f52:	e8 f3 15 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015f57:	89 c6                	mov    esi,eax
c0015f59:	58                   	pop    eax
c0015f5a:	5a                   	pop    edx
c0015f5b:	6a 08                	push   0x8
c0015f5d:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015f63:	e8 e2 15 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015f68:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015f6c:	59                   	pop    ecx
c0015f6d:	5f                   	pop    edi
c0015f6e:	6a 09                	push   0x9
c0015f70:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015f76:	e8 cf 15 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015f7b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015f7f:	0f b6 f8             	movzx  edi,al
c0015f82:	83 c4 10             	add    esp,0x10
c0015f85:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015f89:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015f8d:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015f91:	89 f1                	mov    ecx,esi
c0015f93:	0f 94 c0             	sete   al
c0015f96:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015f9a:	0f 94 c2             	sete   dl
c0015f9d:	21 d0                	and    eax,edx
c0015f9f:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015fa3:	0f 94 c2             	sete   dl
c0015fa6:	21 c2                	and    edx,eax
c0015fa8:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015fac:	0f 94 c0             	sete   al
c0015faf:	21 d0                	and    eax,edx
c0015fb1:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015fb5:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015fb9:	0f 94 c1             	sete   cl
c0015fbc:	84 c8                	test   al,cl
c0015fbe:	75 29                	jne    c0015fe9 <RTC::completeRTCRefresh()+0x1a1>
c0015fc0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015fc4:	89 fd                	mov    ebp,edi
c0015fc6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015fca:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015fce:	89 f0                	mov    eax,esi
c0015fd0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015fd4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015fd8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015fdc:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015fe0:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015fe4:	e9 01 ff ff ff       	jmp    c0015eea <RTC::completeRTCRefresh()+0xa2>
c0015fe9:	39 fd                	cmp    ebp,edi
c0015feb:	75 d3                	jne    c0015fc0 <RTC::completeRTCRefresh()+0x178>
c0015fed:	55                   	push   ebp
c0015fee:	55                   	push   ebp
c0015fef:	6a 0b                	push   0xb
c0015ff1:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015ff7:	e8 4e 15 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015ffc:	83 c4 10             	add    esp,0x10
c0015fff:	89 c5                	mov    ebp,eax
c0016001:	a8 04                	test   al,0x4
c0016003:	75 78                	jne    c001607d <RTC::completeRTCRefresh()+0x235>
c0016005:	b1 0a                	mov    cl,0xa
c0016007:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c001600b:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001600f:	83 e2 0f             	and    edx,0xf
c0016012:	c0 e8 04             	shr    al,0x4
c0016015:	c1 ef 04             	shr    edi,0x4
c0016018:	f6 e1                	mul    cl
c001601a:	6b ff 0a             	imul   edi,edi,0xa
c001601d:	01 d0                	add    eax,edx
c001601f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0016023:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0016027:	83 e2 0f             	and    edx,0xf
c001602a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001602e:	c0 e8 04             	shr    al,0x4
c0016031:	f6 e1                	mul    cl
c0016033:	01 d0                	add    eax,edx
c0016035:	88 da                	mov    dl,bl
c0016037:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001603b:	83 e2 0f             	and    edx,0xf
c001603e:	88 d8                	mov    al,bl
c0016040:	83 e3 80             	and    ebx,0xffffff80
c0016043:	c0 e8 04             	shr    al,0x4
c0016046:	83 e0 07             	and    eax,0x7
c0016049:	f6 e1                	mul    cl
c001604b:	01 d0                	add    eax,edx
c001604d:	89 f2                	mov    edx,esi
c001604f:	09 c3                	or     ebx,eax
c0016051:	83 e2 0f             	and    edx,0xf
c0016054:	89 f0                	mov    eax,esi
c0016056:	c0 e8 04             	shr    al,0x4
c0016059:	f6 e1                	mul    cl
c001605b:	8d 34 02             	lea    esi,[edx+eax*1]
c001605e:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0016062:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0016066:	83 e2 0f             	and    edx,0xf
c0016069:	c0 e8 04             	shr    al,0x4
c001606c:	f6 e1                	mul    cl
c001606e:	01 d0                	add    eax,edx
c0016070:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016074:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016078:	83 e0 0f             	and    eax,0xf
c001607b:	01 c7                	add    edi,eax
c001607d:	83 e5 02             	and    ebp,0x2
c0016080:	75 14                	jne    c0016096 <RTC::completeRTCRefresh()+0x24e>
c0016082:	84 db                	test   bl,bl
c0016084:	79 10                	jns    c0016096 <RTC::completeRTCRefresh()+0x24e>
c0016086:	83 e3 7f             	and    ebx,0x7f
c0016089:	b9 18 00 00 00       	mov    ecx,0x18
c001608e:	8d 43 0c             	lea    eax,[ebx+0xc]
c0016091:	99                   	cdq    
c0016092:	f7 f9                	idiv   ecx
c0016094:	88 d3                	mov    bl,dl
c0016096:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001609c:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c00160a2:	77 06                	ja     c00160aa <RTC::completeRTCRefresh()+0x262>
c00160a4:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c00160aa:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c00160af:	31 d2                	xor    edx,edx
c00160b1:	c1 e1 10             	shl    ecx,0x10
c00160b4:	89 d7                	mov    edi,edx
c00160b6:	c1 e5 10             	shl    ebp,0x10
c00160b9:	31 c0                	xor    eax,eax
c00160bb:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c00160c1:	09 cf                	or     edi,ecx
c00160c3:	89 fa                	mov    edx,edi
c00160c5:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c00160c9:	88 da                	mov    dl,bl
c00160cb:	89 f3                	mov    ebx,esi
c00160cd:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c00160d1:	88 d8                	mov    al,bl
c00160d3:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c00160d7:	0f b7 c8             	movzx  ecx,ax
c00160da:	09 e9                	or     ecx,ebp
c00160dc:	89 c8                	mov    eax,ecx
c00160de:	51                   	push   ecx
c00160df:	51                   	push   ecx
c00160e0:	52                   	push   edx
c00160e1:	50                   	push   eax
c00160e2:	e8 2c 5b ff ff       	call   c000bc13 <datetimeToSeconds(datetime_t)>
c00160e7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00160eb:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00160f1:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00160f7:	83 c4 3c             	add    esp,0x3c
c00160fa:	5b                   	pop    ebx
c00160fb:	5e                   	pop    esi
c00160fc:	5f                   	pop    edi
c00160fd:	5d                   	pop    ebp
c00160fe:	c3                   	ret    
c00160ff:	90                   	nop

c0016100 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0016100:	55                   	push   ebp
c0016101:	57                   	push   edi
c0016102:	56                   	push   esi
c0016103:	53                   	push   ebx
c0016104:	83 ec 30             	sub    esp,0x30
c0016107:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001610b:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001610f:	6a 00                	push   0x0
c0016111:	6a 00                	push   0x0
c0016113:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0016119:	e8 42 15 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c001611e:	83 c4 0c             	add    esp,0xc
c0016121:	6a 00                	push   0x0
c0016123:	6a 02                	push   0x2
c0016125:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c001612b:	e8 30 15 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016130:	31 d2                	xor    edx,edx
c0016132:	89 f9                	mov    ecx,edi
c0016134:	89 f8                	mov    eax,edi
c0016136:	c1 e9 10             	shr    ecx,0x10
c0016139:	0f b6 c4             	movzx  eax,ah
c001613c:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0016140:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0016144:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016148:	b9 64 00 00 00       	mov    ecx,0x64
c001614d:	89 f0                	mov    eax,esi
c001614f:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0016153:	89 f0                	mov    eax,esi
c0016155:	0f b6 c4             	movzx  eax,ah
c0016158:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001615c:	89 f0                	mov    eax,esi
c001615e:	c1 e8 10             	shr    eax,0x10
c0016161:	66 f7 f1             	div    cx
c0016164:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0016169:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c001616e:	59                   	pop    ecx
c001616f:	5b                   	pop    ebx
c0016170:	89 fb                	mov    ebx,edi
c0016172:	6a 0b                	push   0xb
c0016174:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c001617a:	e8 cb 13 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c001617f:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0016183:	83 c4 10             	add    esp,0x10
c0016186:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c001618b:	75 74                	jne    c0016201 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c001618d:	b2 0a                	mov    dl,0xa
c001618f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016193:	0f b6 c1             	movzx  eax,cl
c0016196:	f6 f2                	div    dl
c0016198:	88 c3                	mov    bl,al
c001619a:	88 e0                	mov    al,ah
c001619c:	c1 e3 04             	shl    ebx,0x4
c001619f:	09 c3                	or     ebx,eax
c00161a1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00161a6:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c00161aa:	f6 f2                	div    dl
c00161ac:	88 c1                	mov    cl,al
c00161ae:	88 e0                	mov    al,ah
c00161b0:	c1 e1 04             	shl    ecx,0x4
c00161b3:	09 c1                	or     ecx,eax
c00161b5:	89 f8                	mov    eax,edi
c00161b7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00161bb:	0f b6 c0             	movzx  eax,al
c00161be:	f6 f2                	div    dl
c00161c0:	88 c3                	mov    bl,al
c00161c2:	88 e0                	mov    al,ah
c00161c4:	c1 e3 04             	shl    ebx,0x4
c00161c7:	09 c3                	or     ebx,eax
c00161c9:	89 f0                	mov    eax,esi
c00161cb:	0f b6 c0             	movzx  eax,al
c00161ce:	f6 f2                	div    dl
c00161d0:	88 c1                	mov    cl,al
c00161d2:	88 e0                	mov    al,ah
c00161d4:	c1 e1 04             	shl    ecx,0x4
c00161d7:	09 c1                	or     ecx,eax
c00161d9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00161de:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c00161e2:	f6 f2                	div    dl
c00161e4:	88 c1                	mov    cl,al
c00161e6:	88 e0                	mov    al,ah
c00161e8:	c1 e1 04             	shl    ecx,0x4
c00161eb:	09 c1                	or     ecx,eax
c00161ed:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c00161f2:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00161f6:	f6 f2                	div    dl
c00161f8:	89 c5                	mov    ebp,eax
c00161fa:	88 e0                	mov    al,ah
c00161fc:	c1 e5 04             	shl    ebp,0x4
c00161ff:	09 c5                	or     ebp,eax
c0016201:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0016206:	75 17                	jne    c001621f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016208:	80 fb 0b             	cmp    bl,0xb
c001620b:	76 0c                	jbe    c0016219 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c001620d:	80 eb 0c             	sub    bl,0xc
c0016210:	75 02                	jne    c0016214 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0016212:	b3 0c                	mov    bl,0xc
c0016214:	83 cb 80             	or     ebx,0xffffff80
c0016217:	eb 06                	jmp    c001621f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016219:	84 db                	test   bl,bl
c001621b:	75 02                	jne    c001621f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c001621d:	b3 0c                	mov    bl,0xc
c001621f:	0f b6 db             	movzx  ebx,bl
c0016222:	50                   	push   eax
c0016223:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0016228:	50                   	push   eax
c0016229:	6a 00                	push   0x0
c001622b:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0016231:	e8 2a 14 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016236:	83 c4 0c             	add    esp,0xc
c0016239:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001623e:	50                   	push   eax
c001623f:	6a 02                	push   0x2
c0016241:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0016247:	e8 14 14 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c001624c:	83 c4 0c             	add    esp,0xc
c001624f:	53                   	push   ebx
c0016250:	6a 04                	push   0x4
c0016252:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0016258:	e8 03 14 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c001625d:	83 c4 0c             	add    esp,0xc
c0016260:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0016265:	50                   	push   eax
c0016266:	6a 07                	push   0x7
c0016268:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c001626e:	e8 ed 13 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016273:	83 c4 0c             	add    esp,0xc
c0016276:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001627b:	50                   	push   eax
c001627c:	6a 08                	push   0x8
c001627e:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0016284:	e8 d7 13 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016289:	83 c4 0c             	add    esp,0xc
c001628c:	89 e8                	mov    eax,ebp
c001628e:	0f b6 e8             	movzx  ebp,al
c0016291:	55                   	push   ebp
c0016292:	6a 09                	push   0x9
c0016294:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c001629a:	e8 c1 13 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c001629f:	5a                   	pop    edx
c00162a0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00162a4:	e8 9f fb ff ff       	call   c0015e48 <RTC::completeRTCRefresh()>
c00162a9:	83 c4 3c             	add    esp,0x3c
c00162ac:	b0 01                	mov    al,0x1
c00162ae:	5b                   	pop    ebx
c00162af:	5e                   	pop    esi
c00162b0:	5f                   	pop    edi
c00162b1:	5d                   	pop    ebp
c00162b2:	c3                   	ret    

c00162b3 <rtcIRQHandler(regs*, void*)>:
c00162b3:	53                   	push   ebx
c00162b4:	83 ec 10             	sub    esp,0x10
c00162b7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00162bb:	6a 0c                	push   0xc
c00162bd:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c00162c3:	e8 82 12 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c00162c8:	83 c4 10             	add    esp,0x10
c00162cb:	84 c0                	test   al,al
c00162cd:	79 24                	jns    c00162f3 <rtcIRQHandler(regs*, void*)+0x40>
c00162cf:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00162d6:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00162dd:	66 ff 05 34 3f 02 c0 	inc    WORD PTR ds:0xc0023f34
c00162e4:	75 0d                	jne    c00162f3 <rtcIRQHandler(regs*, void*)+0x40>
c00162e6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00162ea:	83 c4 08             	add    esp,0x8
c00162ed:	5b                   	pop    ebx
c00162ee:	e9 55 fb ff ff       	jmp    c0015e48 <RTC::completeRTCRefresh()>
c00162f3:	83 c4 08             	add    esp,0x8
c00162f6:	5b                   	pop    ebx
c00162f7:	c3                   	ret    

c00162f8 <RTC::RTC()>:
c00162f8:	83 ec 1c             	sub    esp,0x1c
c00162fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162ff:	83 ec 08             	sub    esp,0x8
c0016302:	68 f3 ee 01 c0       	push   0xc001eef3
c0016307:	50                   	push   eax
c0016308:	e8 e1 57 ff ff       	call   c000baee <Clock::Clock(char const*)>
c001630d:	83 c4 10             	add    esp,0x10
c0016310:	ba 10 ef 01 c0       	mov    edx,0xc001ef10
c0016315:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016319:	89 10                	mov    DWORD PTR [eax],edx
c001631b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001631f:	83 ec 0c             	sub    esp,0xc
c0016322:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016326:	6a 01                	push   0x1
c0016328:	68 b3 62 01 c0       	push   0xc00162b3
c001632d:	6a 08                	push   0x8
c001632f:	50                   	push   eax
c0016330:	e8 a3 5c ff ff       	call   c000bfd8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0016335:	83 c4 20             	add    esp,0x20
c0016338:	89 c2                	mov    edx,eax
c001633a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001633e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0016344:	fa                   	cli    
c0016345:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c001634a:	40                   	inc    eax
c001634b:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0016350:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0016355:	83 ec 08             	sub    esp,0x8
c0016358:	6a 0b                	push   0xb
c001635a:	50                   	push   eax
c001635b:	e8 ea 11 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0016360:	83 c4 10             	add    esp,0x10
c0016363:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016367:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c001636c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0016370:	83 ca 10             	or     edx,0x10
c0016373:	81 e2 ff 00 00 00    	and    edx,0xff
c0016379:	83 ec 04             	sub    esp,0x4
c001637c:	52                   	push   edx
c001637d:	6a 0b                	push   0xb
c001637f:	50                   	push   eax
c0016380:	e8 db 12 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016385:	83 c4 10             	add    esp,0x10
c0016388:	83 ec 0c             	sub    esp,0xc
c001638b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001638f:	e8 b4 fa ff ff       	call   c0015e48 <RTC::completeRTCRefresh()>
c0016394:	83 c4 10             	add    esp,0x10
c0016397:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c001639c:	48                   	dec    eax
c001639d:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c00163a2:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c00163a7:	85 c0                	test   eax,eax
c00163a9:	75 01                	jne    c00163ac <RTC::RTC()+0xb4>
c00163ab:	fb                   	sti    
c00163ac:	90                   	nop
c00163ad:	83 c4 1c             	add    esp,0x1c
c00163b0:	c3                   	ret    
c00163b1:	66 90                	xchg   ax,ax
c00163b3:	90                   	nop

c00163b4 <HalConsoleScroll(int, int)>:
c00163b4:	83 ec 10             	sub    esp,0x10
c00163b7:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00163bf:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00163c7:	90                   	nop
c00163c8:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00163cd:	0f 8f e1 00 00 00    	jg     c00164b4 <HalConsoleScroll(int, int)+0x100>
c00163d3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00163db:	90                   	nop
c00163dc:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00163e4:	0f 8f be 00 00 00    	jg     c00164a8 <HalConsoleScroll(int, int)+0xf4>
c00163ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163ee:	89 d0                	mov    eax,edx
c00163f0:	c1 e0 02             	shl    eax,0x2
c00163f3:	01 d0                	add    eax,edx
c00163f5:	c1 e0 05             	shl    eax,0x5
c00163f8:	89 c2                	mov    edx,eax
c00163fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163fe:	01 d0                	add    eax,edx
c0016400:	89 c2                	mov    edx,eax
c0016402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016406:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0016409:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001640d:	89 d0                	mov    eax,edx
c001640f:	c1 e0 02             	shl    eax,0x2
c0016412:	01 d0                	add    eax,edx
c0016414:	c1 e0 05             	shl    eax,0x5
c0016417:	89 c2                	mov    edx,eax
c0016419:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001641d:	01 d0                	add    eax,edx
c001641f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0016425:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016429:	01 c2                	add    edx,eax
c001642b:	8a 01                	mov    al,BYTE PTR [ecx]
c001642d:	88 02                	mov    BYTE PTR [edx],al
c001642f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016434:	75 66                	jne    c001649c <HalConsoleScroll(int, int)+0xe8>
c0016436:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001643a:	83 e0 01             	and    eax,0x1
c001643d:	74 39                	je     c0016478 <HalConsoleScroll(int, int)+0xc4>
c001643f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016443:	83 e0 0f             	and    eax,0xf
c0016446:	88 c2                	mov    dl,al
c0016448:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001644c:	c1 e0 04             	shl    eax,0x4
c001644f:	88 d1                	mov    cl,dl
c0016451:	09 c1                	or     ecx,eax
c0016453:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016457:	89 d0                	mov    eax,edx
c0016459:	c1 e0 02             	shl    eax,0x2
c001645c:	01 d0                	add    eax,edx
c001645e:	c1 e0 05             	shl    eax,0x5
c0016461:	89 c2                	mov    edx,eax
c0016463:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016467:	01 d0                	add    eax,edx
c0016469:	89 c2                	mov    edx,eax
c001646b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001646f:	01 d0                	add    eax,edx
c0016471:	88 ca                	mov    dl,cl
c0016473:	88 10                	mov    BYTE PTR [eax],dl
c0016475:	eb 25                	jmp    c001649c <HalConsoleScroll(int, int)+0xe8>
c0016477:	90                   	nop
c0016478:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001647c:	89 d0                	mov    eax,edx
c001647e:	c1 e0 02             	shl    eax,0x2
c0016481:	01 d0                	add    eax,edx
c0016483:	c1 e0 05             	shl    eax,0x5
c0016486:	89 c2                	mov    edx,eax
c0016488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001648c:	01 d0                	add    eax,edx
c001648e:	89 c2                	mov    edx,eax
c0016490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016494:	01 d0                	add    eax,edx
c0016496:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0016499:	8d 76 00             	lea    esi,[esi+0x0]
c001649c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00164a0:	e9 37 ff ff ff       	jmp    c00163dc <HalConsoleScroll(int, int)+0x28>
c00164a5:	8d 76 00             	lea    esi,[esi+0x0]
c00164a8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00164ac:	e9 17 ff ff ff       	jmp    c00163c8 <HalConsoleScroll(int, int)+0x14>
c00164b1:	8d 76 00             	lea    esi,[esi+0x0]
c00164b4:	90                   	nop
c00164b5:	83 c4 10             	add    esp,0x10
c00164b8:	c3                   	ret    
c00164b9:	8d 76 00             	lea    esi,[esi+0x0]

c00164bc <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00164bc:	83 ec 14             	sub    esp,0x14
c00164bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00164c3:	88 04 24             	mov    BYTE PTR [esp],al
c00164c6:	8a 04 24             	mov    al,BYTE PTR [esp]
c00164c9:	25 ff 00 00 00       	and    eax,0xff
c00164ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00164d2:	89 d1                	mov    ecx,edx
c00164d4:	83 e1 0f             	and    ecx,0xf
c00164d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00164db:	c1 e2 04             	shl    edx,0x4
c00164de:	81 e2 ff 00 00 00    	and    edx,0xff
c00164e4:	09 ca                	or     edx,ecx
c00164e6:	c1 e2 08             	shl    edx,0x8
c00164e9:	09 d0                	or     eax,edx
c00164eb:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00164f0:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00164f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00164fc:	89 d0                	mov    eax,edx
c00164fe:	c1 e0 02             	shl    eax,0x2
c0016501:	01 d0                	add    eax,edx
c0016503:	c1 e0 04             	shl    eax,0x4
c0016506:	89 c2                	mov    edx,eax
c0016508:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001650c:	01 d0                	add    eax,edx
c001650e:	01 c0                	add    eax,eax
c0016510:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0016514:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016518:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001651d:	66 89 02             	mov    WORD PTR [edx],ax
c0016520:	90                   	nop
c0016521:	83 c4 14             	add    esp,0x14
c0016524:	c3                   	ret    
c0016525:	8d 76 00             	lea    esi,[esi+0x0]

c0016528 <HalConsoleCursorUpdate(int, int)>:
c0016528:	83 ec 20             	sub    esp,0x20
c001652b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001652f:	89 c2                	mov    edx,eax
c0016531:	89 d0                	mov    eax,edx
c0016533:	c1 e0 02             	shl    eax,0x2
c0016536:	01 d0                	add    eax,edx
c0016538:	c1 e0 04             	shl    eax,0x4
c001653b:	89 c2                	mov    edx,eax
c001653d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016541:	01 d0                	add    eax,edx
c0016543:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0016548:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001654f:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0016554:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016558:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001655c:	ee                   	out    dx,al
c001655d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016562:	25 ff 00 00 00       	and    eax,0xff
c0016567:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001656e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016572:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0016576:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001657a:	ee                   	out    dx,al
c001657b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0016582:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0016587:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001658b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001658f:	ee                   	out    dx,al
c0016590:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016595:	66 c1 e8 08          	shr    ax,0x8
c0016599:	25 ff 00 00 00       	and    eax,0xff
c001659e:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00165a5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00165a9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00165ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00165b1:	ee                   	out    dx,al
c00165b2:	90                   	nop
c00165b3:	83 c4 20             	add    esp,0x20
c00165b6:	c3                   	ret    
c00165b7:	90                   	nop

c00165b8 <FAT::getName()>:
c00165b8:	b8 44 ef 01 c0       	mov    eax,0xc001ef44
c00165bd:	c3                   	ret    
c00165be:	66 90                	xchg   ax,ax

c00165c0 <FAT::tell(void*, unsigned long long*)>:
c00165c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00165c5:	75 09                	jne    c00165d0 <FAT::tell(void*, unsigned long long*)+0x10>
c00165c7:	b8 04 00 00 00       	mov    eax,0x4
c00165cc:	c3                   	ret    
c00165cd:	8d 76 00             	lea    esi,[esi+0x0]
c00165d0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165d5:	75 09                	jne    c00165e0 <FAT::tell(void*, unsigned long long*)+0x20>
c00165d7:	b8 04 00 00 00       	mov    eax,0x4
c00165dc:	c3                   	ret    
c00165dd:	8d 76 00             	lea    esi,[esi+0x0]
c00165e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165e4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00165e7:	ba 00 00 00 00       	mov    edx,0x0
c00165ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165f0:	89 01                	mov    DWORD PTR [ecx],eax
c00165f2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00165f5:	b8 00 00 00 00       	mov    eax,0x0
c00165fa:	c3                   	ret    
c00165fb:	90                   	nop

c00165fc <FAT::stat(void*, unsigned long long*)>:
c00165fc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016601:	75 09                	jne    c001660c <FAT::stat(void*, unsigned long long*)+0x10>
c0016603:	b8 04 00 00 00       	mov    eax,0x4
c0016608:	c3                   	ret    
c0016609:	8d 76 00             	lea    esi,[esi+0x0]
c001660c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016611:	75 09                	jne    c001661c <FAT::stat(void*, unsigned long long*)+0x20>
c0016613:	b8 04 00 00 00       	mov    eax,0x4
c0016618:	c3                   	ret    
c0016619:	8d 76 00             	lea    esi,[esi+0x0]
c001661c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016620:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0016623:	ba 00 00 00 00       	mov    edx,0x0
c0016628:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001662c:	89 01                	mov    DWORD PTR [ecx],eax
c001662e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016631:	b8 00 00 00 00       	mov    eax,0x0
c0016636:	c3                   	ret    
c0016637:	90                   	nop

c0016638 <FAT::~FAT()>:
c0016638:	83 ec 0c             	sub    esp,0xc
c001663b:	ba 90 ef 01 c0       	mov    edx,0xc001ef90
c0016640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016644:	89 10                	mov    DWORD PTR [eax],edx
c0016646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001664a:	83 ec 0c             	sub    esp,0xc
c001664d:	50                   	push   eax
c001664e:	e8 df 48 ff ff       	call   c000af32 <Filesystem::~Filesystem()>
c0016653:	83 c4 10             	add    esp,0x10
c0016656:	90                   	nop
c0016657:	83 c4 0c             	add    esp,0xc
c001665a:	c3                   	ret    
c001665b:	90                   	nop

c001665c <FAT::~FAT()>:
c001665c:	83 ec 0c             	sub    esp,0xc
c001665f:	83 ec 0c             	sub    esp,0xc
c0016662:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016666:	e8 cd ff ff ff       	call   c0016638 <FAT::~FAT()>
c001666b:	83 c4 10             	add    esp,0x10
c001666e:	83 ec 08             	sub    esp,0x8
c0016671:	6a 08                	push   0x8
c0016673:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016677:	e8 7a 44 ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001667c:	83 c4 10             	add    esp,0x10
c001667f:	83 c4 0c             	add    esp,0xc
c0016682:	c3                   	ret    
c0016683:	90                   	nop

c0016684 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0016684:	83 ec 1c             	sub    esp,0x1c
c0016687:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001668e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0016693:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016697:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c001669e:	83 f8 ff             	cmp    eax,0xffffffff
c00166a1:	75 35                	jne    c00166d8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00166a3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00166a7:	88 c2                	mov    dl,al
c00166a9:	a1 40 3f 02 c0       	mov    eax,ds:0xc0023f40
c00166ae:	01 d0                	add    eax,edx
c00166b0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00166b4:	8b 15 40 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f40
c00166ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166be:	89 14 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],edx
c00166c5:	a1 40 3f 02 c0       	mov    eax,ds:0xc0023f40
c00166ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00166ce:	89 14 85 e0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc020],edx
c00166d5:	eb 19                	jmp    c00166f0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00166d7:	90                   	nop
c00166d8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00166dc:	88 c2                	mov    dl,al
c00166de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166e2:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c00166e9:	01 d0                	add    eax,edx
c00166eb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00166ef:	90                   	nop
c00166f0:	83 ec 04             	sub    esp,0x4
c00166f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00166f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00166fb:	8d 44 24 15          	lea    eax,[esp+0x15]
c00166ff:	50                   	push   eax
c0016700:	e8 6f e7 fe ff       	call   c0004e74 <f_getlabel>
c0016705:	83 c4 10             	add    esp,0x10
c0016708:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001670c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016711:	75 09                	jne    c001671c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0016713:	b8 00 00 00 00       	mov    eax,0x0
c0016718:	eb 0a                	jmp    c0016724 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001671a:	66 90                	xchg   ax,ax
c001671c:	b8 01 00 00 00       	mov    eax,0x1
c0016721:	8d 76 00             	lea    esi,[esi+0x0]
c0016724:	83 c4 1c             	add    esp,0x1c
c0016727:	c3                   	ret    

c0016728 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016728:	57                   	push   edi
c0016729:	83 ec 58             	sub    esp,0x58
c001672c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0016734:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016738:	b8 00 00 00 00       	mov    eax,0x0
c001673d:	b9 0f 00 00 00       	mov    ecx,0xf
c0016742:	fc                   	cld    
c0016743:	89 d7                	mov    edi,edx
c0016745:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0016747:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001674b:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c0016752:	83 f8 ff             	cmp    eax,0xffffffff
c0016755:	75 35                	jne    c001678c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0016757:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001675b:	88 c2                	mov    dl,al
c001675d:	a1 40 3f 02 c0       	mov    eax,ds:0xc0023f40
c0016762:	01 d0                	add    eax,edx
c0016764:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016768:	8b 15 40 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f40
c001676e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016772:	89 14 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],edx
c0016779:	a1 40 3f 02 c0       	mov    eax,ds:0xc0023f40
c001677e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0016782:	89 14 85 e0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc020],edx
c0016789:	eb 19                	jmp    c00167a4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001678b:	90                   	nop
c001678c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016790:	88 c2                	mov    dl,al
c0016792:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016796:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c001679d:	01 d0                	add    eax,edx
c001679f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00167a3:	90                   	nop
c00167a4:	83 ec 08             	sub    esp,0x8
c00167a7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00167ab:	8d 44 24 18          	lea    eax,[esp+0x18]
c00167af:	50                   	push   eax
c00167b0:	e8 2b a0 fe ff       	call   c00007e0 <strcat>
c00167b5:	83 c4 10             	add    esp,0x10
c00167b8:	83 ec 0c             	sub    esp,0xc
c00167bb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00167bf:	50                   	push   eax
c00167c0:	e8 00 e8 fe ff       	call   c0004fc5 <f_setlabel>
c00167c5:	83 c4 10             	add    esp,0x10
c00167c8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00167cc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00167d1:	75 09                	jne    c00167dc <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00167d3:	b8 00 00 00 00       	mov    eax,0x0
c00167d8:	eb 0a                	jmp    c00167e4 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00167da:	66 90                	xchg   ax,ax
c00167dc:	b8 01 00 00 00       	mov    eax,0x1
c00167e1:	8d 76 00             	lea    esi,[esi+0x0]
c00167e4:	83 c4 58             	add    esp,0x58
c00167e7:	5f                   	pop    edi
c00167e8:	c3                   	ret    
c00167e9:	90                   	nop
c00167ea:	66 90                	xchg   ax,ax

c00167ec <FAT::format(LogicalDisk*, int, char const*, int)>:
c00167ec:	83 ec 2c             	sub    esp,0x2c
c00167ef:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00167f7:	83 ec 08             	sub    esp,0x8
c00167fa:	68 68 ef 01 c0       	push   0xc001ef68
c00167ff:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016803:	e8 f8 9e fe ff       	call   c0000700 <strcmp>
c0016808:	83 c4 10             	add    esp,0x10
c001680b:	85 c0                	test   eax,eax
c001680d:	0f 94 c0             	sete   al
c0016810:	84 c0                	test   al,al
c0016812:	74 10                	je     c0016824 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0016814:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001681c:	e9 b3 00 00 00       	jmp    c00168d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016821:	8d 76 00             	lea    esi,[esi+0x0]
c0016824:	83 ec 08             	sub    esp,0x8
c0016827:	68 5a ef 01 c0       	push   0xc001ef5a
c001682c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016830:	e8 cb 9e fe ff       	call   c0000700 <strcmp>
c0016835:	83 c4 10             	add    esp,0x10
c0016838:	85 c0                	test   eax,eax
c001683a:	0f 94 c0             	sete   al
c001683d:	84 c0                	test   al,al
c001683f:	74 0f                	je     c0016850 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016841:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016849:	e9 86 00 00 00       	jmp    c00168d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001684e:	66 90                	xchg   ax,ax
c0016850:	83 ec 08             	sub    esp,0x8
c0016853:	68 60 ef 01 c0       	push   0xc001ef60
c0016858:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001685c:	e8 9f 9e fe ff       	call   c0000700 <strcmp>
c0016861:	83 c4 10             	add    esp,0x10
c0016864:	85 c0                	test   eax,eax
c0016866:	0f 94 c0             	sete   al
c0016869:	84 c0                	test   al,al
c001686b:	74 0b                	je     c0016878 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001686d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016875:	eb 5d                	jmp    c00168d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016877:	90                   	nop
c0016878:	83 ec 08             	sub    esp,0x8
c001687b:	68 1c d0 01 c0       	push   0xc001d01c
c0016880:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016884:	e8 77 9e fe ff       	call   c0000700 <strcmp>
c0016889:	83 c4 10             	add    esp,0x10
c001688c:	85 c0                	test   eax,eax
c001688e:	0f 94 c0             	sete   al
c0016891:	84 c0                	test   al,al
c0016893:	74 0b                	je     c00168a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0016895:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001689d:	eb 35                	jmp    c00168d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001689f:	90                   	nop
c00168a0:	83 ec 08             	sub    esp,0x8
c00168a3:	68 66 ef 01 c0       	push   0xc001ef66
c00168a8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00168ac:	e8 4f 9e fe ff       	call   c0000700 <strcmp>
c00168b1:	83 c4 10             	add    esp,0x10
c00168b4:	85 c0                	test   eax,eax
c00168b6:	0f 94 c0             	sete   al
c00168b9:	84 c0                	test   al,al
c00168bb:	74 0b                	je     c00168c8 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00168bd:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00168c5:	eb 0d                	jmp    c00168d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00168c7:	90                   	nop
c00168c8:	b8 08 00 00 00       	mov    eax,0x8
c00168cd:	e9 ea 00 00 00       	jmp    c00169bc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00168d2:	66 90                	xchg   ax,ax
c00168d4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00168db:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00168e0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168e4:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c00168eb:	83 f8 ff             	cmp    eax,0xffffffff
c00168ee:	75 34                	jne    c0016924 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00168f0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00168f4:	88 c2                	mov    dl,al
c00168f6:	a1 40 3f 02 c0       	mov    eax,ds:0xc0023f40
c00168fb:	01 d0                	add    eax,edx
c00168fd:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016901:	8b 15 40 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f40
c0016907:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001690b:	89 14 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],edx
c0016912:	a1 40 3f 02 c0       	mov    eax,ds:0xc0023f40
c0016917:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001691b:	89 14 85 e0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc020],edx
c0016922:	eb 18                	jmp    c001693c <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0016924:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016928:	88 c2                	mov    dl,al
c001692a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001692e:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c0016935:	01 d0                	add    eax,edx
c0016937:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001693b:	90                   	nop
c001693c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016940:	88 04 24             	mov    BYTE PTR [esp],al
c0016943:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016947:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001694b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016953:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016958:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016960:	83 ec 0c             	sub    esp,0xc
c0016963:	68 00 20 00 00       	push   0x2000
c0016968:	e8 f0 14 ff ff       	call   c0007e5d <malloc>
c001696d:	83 c4 10             	add    esp,0x10
c0016970:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016974:	68 00 20 00 00       	push   0x2000
c0016979:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001697d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016981:	50                   	push   eax
c0016982:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0016986:	50                   	push   eax
c0016987:	e8 29 e9 fe ff       	call   c00052b5 <f_mkfs>
c001698c:	83 c4 10             	add    esp,0x10
c001698f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016993:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016998:	75 0a                	jne    c00169a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001699a:	b8 00 00 00 00       	mov    eax,0x0
c001699f:	eb 1b                	jmp    c00169bc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00169a1:	8d 76 00             	lea    esi,[esi+0x0]
c00169a4:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00169a9:	75 09                	jne    c00169b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00169ab:	b8 09 00 00 00       	mov    eax,0x9
c00169b0:	eb 0a                	jmp    c00169bc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00169b2:	66 90                	xchg   ax,ax
c00169b4:	b8 01 00 00 00       	mov    eax,0x1
c00169b9:	8d 76 00             	lea    esi,[esi+0x0]
c00169bc:	83 c4 2c             	add    esp,0x2c
c00169bf:	c3                   	ret    

c00169c0 <FAT::tryMount(LogicalDisk*, int)>:
c00169c0:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00169c6:	a1 40 3f 02 c0       	mov    eax,ds:0xc0023f40
c00169cb:	83 f8 14             	cmp    eax,0x14
c00169ce:	75 18                	jne    c00169e8 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00169d0:	83 ec 0c             	sub    esp,0xc
c00169d3:	68 6c ef 01 c0       	push   0xc001ef6c
c00169d8:	e8 0e 9d ff ff       	call   c00106eb <Krnl::panic(char const*)>
c00169dd:	83 c4 10             	add    esp,0x10
c00169e0:	b0 00                	mov    al,0x0
c00169e2:	e9 e9 01 00 00       	jmp    c0016bd0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169e7:	90                   	nop
c00169e8:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00169ef:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00169f5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169fb:	3d 00 02 00 00       	cmp    eax,0x200
c0016a00:	74 0a                	je     c0016a0c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0016a02:	b0 00                	mov    al,0x0
c0016a04:	e9 c7 01 00 00       	jmp    c0016bd0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a09:	8d 76 00             	lea    esi,[esi+0x0]
c0016a0c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0016a14:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016a1b:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c0016a22:	83 f8 ff             	cmp    eax,0xffffffff
c0016a25:	74 09                	je     c0016a30 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0016a27:	b0 01                	mov    al,0x1
c0016a29:	e9 a2 01 00 00       	jmp    c0016bd0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a2e:	66 90                	xchg   ax,ax
c0016a30:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016a3a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0016a42:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016a49:	88 c2                	mov    dl,al
c0016a4b:	a1 40 3f 02 c0       	mov    eax,ds:0xc0023f40
c0016a50:	01 d0                	add    eax,edx
c0016a52:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016a59:	8b 15 40 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f40
c0016a5f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016a66:	89 14 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],edx
c0016a6d:	a1 40 3f 02 c0       	mov    eax,ds:0xc0023f40
c0016a72:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016a79:	89 14 85 e0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc020],edx
c0016a80:	83 ec 0c             	sub    esp,0xc
c0016a83:	68 34 02 00 00       	push   0x234
c0016a88:	e8 d0 13 ff ff       	call   c0007e5d <malloc>
c0016a8d:	83 c4 10             	add    esp,0x10
c0016a90:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0016a97:	83 ec 04             	sub    esp,0x4
c0016a9a:	6a 00                	push   0x0
c0016a9c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016aa3:	50                   	push   eax
c0016aa4:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016aab:	e8 2b d0 fe ff       	call   c0003adb <f_mount>
c0016ab0:	83 c4 10             	add    esp,0x10
c0016ab3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016aba:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016ac2:	74 1c                	je     c0016ae0 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016ac4:	83 ec 0c             	sub    esp,0xc
c0016ac7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016ace:	e8 aa 13 ff ff       	call   c0007e7d <rfree>
c0016ad3:	83 c4 10             	add    esp,0x10
c0016ad6:	b0 00                	mov    al,0x0
c0016ad8:	e9 f3 00 00 00       	jmp    c0016bd0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016add:	8d 76 00             	lea    esi,[esi+0x0]
c0016ae0:	83 ec 04             	sub    esp,0x4
c0016ae3:	68 00 01 00 00       	push   0x100
c0016ae8:	6a 00                	push   0x0
c0016aea:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016af1:	50                   	push   eax
c0016af2:	e8 f9 99 fe ff       	call   c00004f0 <memset>
c0016af7:	83 c4 10             	add    esp,0x10
c0016afa:	83 ec 08             	sub    esp,0x8
c0016afd:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016b04:	50                   	push   eax
c0016b05:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016b0c:	50                   	push   eax
c0016b0d:	e8 ce 9c fe ff       	call   c00007e0 <strcat>
c0016b12:	83 c4 10             	add    esp,0x10
c0016b15:	83 ec 08             	sub    esp,0x8
c0016b18:	68 7a ef 01 c0       	push   0xc001ef7a
c0016b1d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016b24:	50                   	push   eax
c0016b25:	e8 b6 9c fe ff       	call   c00007e0 <strcat>
c0016b2a:	83 c4 10             	add    esp,0x10
c0016b2d:	83 ec 04             	sub    esp,0x4
c0016b30:	6a 01                	push   0x1
c0016b32:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016b39:	50                   	push   eax
c0016b3a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b3e:	50                   	push   eax
c0016b3f:	e8 f9 cf fe ff       	call   c0003b3d <f_open>
c0016b44:	83 c4 10             	add    esp,0x10
c0016b47:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016b4e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016b55:	85 c0                	test   eax,eax
c0016b57:	74 0b                	je     c0016b64 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016b59:	78 31                	js     c0016b8c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016b5b:	83 e8 04             	sub    eax,0x4
c0016b5e:	83 f8 01             	cmp    eax,0x1
c0016b61:	77 29                	ja     c0016b8c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016b63:	90                   	nop
c0016b64:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016b6c:	83 ec 0c             	sub    esp,0xc
c0016b6f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b73:	50                   	push   eax
c0016b74:	e8 77 d7 fe ff       	call   c00042f0 <f_close>
c0016b79:	83 c4 10             	add    esp,0x10
c0016b7c:	90                   	nop
c0016b7d:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016b85:	74 41                	je     c0016bc8 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016b87:	eb 33                	jmp    c0016bbc <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016b89:	8d 76 00             	lea    esi,[esi+0x0]
c0016b8c:	83 ec 0c             	sub    esp,0xc
c0016b8f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016b96:	e8 e2 12 ff ff       	call   c0007e7d <rfree>
c0016b9b:	83 c4 10             	add    esp,0x10
c0016b9e:	83 ec 04             	sub    esp,0x4
c0016ba1:	6a 00                	push   0x0
c0016ba3:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016baa:	50                   	push   eax
c0016bab:	6a 00                	push   0x0
c0016bad:	e8 29 cf fe ff       	call   c0003adb <f_mount>
c0016bb2:	83 c4 10             	add    esp,0x10
c0016bb5:	b0 00                	mov    al,0x0
c0016bb7:	eb 17                	jmp    c0016bd0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016bb9:	8d 76 00             	lea    esi,[esi+0x0]
c0016bbc:	a1 40 3f 02 c0       	mov    eax,ds:0xc0023f40
c0016bc1:	40                   	inc    eax
c0016bc2:	a3 40 3f 02 c0       	mov    ds:0xc0023f40,eax
c0016bc7:	90                   	nop
c0016bc8:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016bcf:	90                   	nop
c0016bd0:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016bd6:	c3                   	ret    
c0016bd7:	90                   	nop

c0016bd8 <FAT::allocateSwapfile(char const*, int)>:
c0016bd8:	55                   	push   ebp
c0016bd9:	57                   	push   edi
c0016bda:	56                   	push   esi
c0016bdb:	53                   	push   ebx
c0016bdc:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016be2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016bed:	83 ec 0c             	sub    esp,0xc
c0016bf0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016bf7:	e8 61 12 ff ff       	call   c0007e5d <malloc>
c0016bfc:	83 c4 10             	add    esp,0x10
c0016bff:	89 c7                	mov    edi,eax
c0016c01:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0016c06:	83 ec 04             	sub    esp,0x4
c0016c09:	50                   	push   eax
c0016c0a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016c11:	57                   	push   edi
c0016c12:	e8 4b 45 ff ff       	call   c000b162 <File::File(char const*, Process*)>
c0016c17:	83 c4 10             	add    esp,0x10
c0016c1a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016c21:	83 ec 04             	sub    esp,0x4
c0016c24:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016c28:	50                   	push   eax
c0016c29:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016c2d:	50                   	push   eax
c0016c2e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c35:	e8 94 48 ff ff       	call   c000b4ce <File::stat(unsigned long long*, bool*)>
c0016c3a:	83 c4 10             	add    esp,0x10
c0016c3d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016c44:	c1 e0 14             	shl    eax,0x14
c0016c47:	89 c7                	mov    edi,eax
c0016c49:	89 c5                	mov    ebp,eax
c0016c4b:	c1 fd 1f             	sar    ebp,0x1f
c0016c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c52:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c56:	89 f9                	mov    ecx,edi
c0016c58:	31 c1                	xor    ecx,eax
c0016c5a:	89 cb                	mov    ebx,ecx
c0016c5c:	89 e9                	mov    ecx,ebp
c0016c5e:	31 d1                	xor    ecx,edx
c0016c60:	89 ce                	mov    esi,ecx
c0016c62:	89 f0                	mov    eax,esi
c0016c64:	09 d8                	or     eax,ebx
c0016c66:	0f 84 9c 00 00 00    	je     c0016d08 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016c6c:	83 ec 0c             	sub    esp,0xc
c0016c6f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c76:	e8 1f 47 ff ff       	call   c000b39a <File::unlink()>
c0016c7b:	83 c4 10             	add    esp,0x10
c0016c7e:	83 ec 08             	sub    esp,0x8
c0016c81:	6a 12                	push   0x12
c0016c83:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c8a:	e8 93 45 ff ff       	call   c000b222 <File::open(FileOpenMode)>
c0016c8f:	83 c4 10             	add    esp,0x10
c0016c92:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c99:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016c9f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016ca6:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016cad:	c1 e0 14             	shl    eax,0x14
c0016cb0:	83 ec 04             	sub    esp,0x4
c0016cb3:	6a 01                	push   0x1
c0016cb5:	50                   	push   eax
c0016cb6:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016cbd:	e8 93 e4 fe ff       	call   c0005155 <f_expand>
c0016cc2:	83 c4 10             	add    esp,0x10
c0016cc5:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016ccc:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cce:	83 c0 10             	add    eax,0x10
c0016cd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cd3:	83 ec 0c             	sub    esp,0xc
c0016cd6:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016cda:	52                   	push   edx
c0016cdb:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016cdf:	52                   	push   edx
c0016ce0:	6a 00                	push   0x0
c0016ce2:	68 00 04 00 00       	push   0x400
c0016ce7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016cee:	ff d0                	call   eax
c0016cf0:	83 c4 20             	add    esp,0x20
c0016cf3:	83 ec 0c             	sub    esp,0xc
c0016cf6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016cfd:	e8 7e 45 ff ff       	call   c000b280 <File::close()>
c0016d02:	83 c4 10             	add    esp,0x10
c0016d05:	8d 76 00             	lea    esi,[esi+0x0]
c0016d08:	83 ec 08             	sub    esp,0x8
c0016d0b:	6a 01                	push   0x1
c0016d0d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016d14:	e8 09 45 ff ff       	call   c000b222 <File::open(FileOpenMode)>
c0016d19:	83 c4 10             	add    esp,0x10
c0016d1c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016d23:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d25:	83 c0 0c             	add    eax,0xc
c0016d28:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d2a:	83 ec 0c             	sub    esp,0xc
c0016d2d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016d31:	52                   	push   edx
c0016d32:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016d36:	52                   	push   edx
c0016d37:	6a 00                	push   0x0
c0016d39:	6a 04                	push   0x4
c0016d3b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016d42:	ff d0                	call   eax
c0016d44:	83 c4 20             	add    esp,0x20
c0016d47:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016d4e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016d54:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016d5b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016d62:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016d65:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016d6c:	83 ec 0c             	sub    esp,0xc
c0016d6f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016d76:	e8 05 45 ff ff       	call   c000b280 <File::close()>
c0016d7b:	83 c4 10             	add    esp,0x10
c0016d7e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016d85:	ba 00 00 00 00       	mov    edx,0x0
c0016d8a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016d90:	5b                   	pop    ebx
c0016d91:	5e                   	pop    esi
c0016d92:	5f                   	pop    edi
c0016d93:	5d                   	pop    ebp
c0016d94:	c3                   	ret    
c0016d95:	90                   	nop
c0016d96:	66 90                	xchg   ax,ax

c0016d98 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016d98:	57                   	push   edi
c0016d99:	56                   	push   esi
c0016d9a:	53                   	push   ebx
c0016d9b:	81 ec 50 02 00 00    	sub    esp,0x250
c0016da1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016da9:	74 0d                	je     c0016db8 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016dab:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016db3:	75 0f                	jne    c0016dc4 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016db5:	8d 76 00             	lea    esi,[esi+0x0]
c0016db8:	b8 04 00 00 00       	mov    eax,0x4
c0016dbd:	e9 36 01 00 00       	jmp    c0016ef8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016dc2:	66 90                	xchg   ax,ax
c0016dc4:	83 ec 08             	sub    esp,0x8
c0016dc7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016dce:	50                   	push   eax
c0016dcf:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016dd6:	e8 d8 d7 fe ff       	call   c00045b3 <f_readdir>
c0016ddb:	83 c4 10             	add    esp,0x10
c0016dde:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016de5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016dec:	83 ec 0c             	sub    esp,0xc
c0016def:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016df6:	83 c0 16             	add    eax,0x16
c0016df9:	50                   	push   eax
c0016dfa:	e8 61 97 fe ff       	call   c0000560 <strlen>
c0016dff:	83 c4 10             	add    esp,0x10
c0016e02:	ba 00 00 00 00       	mov    edx,0x0
c0016e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e0b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016e0f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016e16:	25 ff 00 00 00       	and    eax,0xff
c0016e1b:	83 e0 10             	and    eax,0x10
c0016e1e:	74 08                	je     c0016e28 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016e20:	b8 02 00 00 00       	mov    eax,0x2
c0016e25:	eb 09                	jmp    c0016e30 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016e27:	90                   	nop
c0016e28:	b8 01 00 00 00       	mov    eax,0x1
c0016e2d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e30:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e34:	83 ec 08             	sub    esp,0x8
c0016e37:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016e3e:	83 c0 16             	add    eax,0x16
c0016e41:	50                   	push   eax
c0016e42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016e46:	83 c0 10             	add    eax,0x10
c0016e49:	50                   	push   eax
c0016e4a:	e8 d1 97 fe ff       	call   c0000620 <strcpy>
c0016e4f:	83 c4 10             	add    esp,0x10
c0016e52:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016e59:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016e60:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e64:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016e6b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016e72:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016e79:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016e80:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016e87:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016e8e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016e95:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016e9c:	89 c6                	mov    esi,eax
c0016e9e:	89 d7                	mov    edi,edx
c0016ea0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ea2:	89 c8                	mov    eax,ecx
c0016ea4:	89 fa                	mov    edx,edi
c0016ea6:	89 f3                	mov    ebx,esi
c0016ea8:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016eaf:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016eb6:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016ebd:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016ec4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016eca:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016ed1:	84 c0                	test   al,al
c0016ed3:	75 07                	jne    c0016edc <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016ed5:	b8 07 00 00 00       	mov    eax,0x7
c0016eda:	eb 1c                	jmp    c0016ef8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016edc:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016ee3:	85 c0                	test   eax,eax
c0016ee5:	75 09                	jne    c0016ef0 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016ee7:	b8 00 00 00 00       	mov    eax,0x0
c0016eec:	eb 0a                	jmp    c0016ef8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016eee:	66 90                	xchg   ax,ax
c0016ef0:	b8 01 00 00 00       	mov    eax,0x1
c0016ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ef8:	81 c4 50 02 00 00    	add    esp,0x250
c0016efe:	5b                   	pop    ebx
c0016eff:	5e                   	pop    esi
c0016f00:	5f                   	pop    edi
c0016f01:	c3                   	ret    
c0016f02:	66 90                	xchg   ax,ax

c0016f04 <FAT::read(void*, unsigned long, void*, int*)>:
c0016f04:	83 ec 1c             	sub    esp,0x1c
c0016f07:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f0c:	74 0a                	je     c0016f18 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016f0e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016f13:	75 0b                	jne    c0016f20 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016f15:	8d 76 00             	lea    esi,[esi+0x0]
c0016f18:	b8 04 00 00 00       	mov    eax,0x4
c0016f1d:	eb 41                	jmp    c0016f60 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016f1f:	90                   	nop
c0016f20:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f24:	50                   	push   eax
c0016f25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016f2d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f31:	e8 d2 ce fe ff       	call   c0003e08 <f_read>
c0016f36:	83 c4 10             	add    esp,0x10
c0016f39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f41:	89 c2                	mov    edx,eax
c0016f43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f47:	89 10                	mov    DWORD PTR [eax],edx
c0016f49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f4d:	85 c0                	test   eax,eax
c0016f4f:	75 07                	jne    c0016f58 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016f51:	b8 00 00 00 00       	mov    eax,0x0
c0016f56:	eb 08                	jmp    c0016f60 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016f58:	b8 01 00 00 00       	mov    eax,0x1
c0016f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f60:	83 c4 1c             	add    esp,0x1c
c0016f63:	c3                   	ret    

c0016f64 <FAT::write(void*, unsigned long, void*, int*)>:
c0016f64:	83 ec 1c             	sub    esp,0x1c
c0016f67:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f6c:	74 0a                	je     c0016f78 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016f6e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016f73:	75 0b                	jne    c0016f80 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016f75:	8d 76 00             	lea    esi,[esi+0x0]
c0016f78:	b8 04 00 00 00       	mov    eax,0x4
c0016f7d:	eb 41                	jmp    c0016fc0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f7f:	90                   	nop
c0016f80:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f84:	50                   	push   eax
c0016f85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016f8d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f91:	e8 71 d0 fe ff       	call   c0004007 <f_write>
c0016f96:	83 c4 10             	add    esp,0x10
c0016f99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016fa1:	89 c2                	mov    edx,eax
c0016fa3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016fa7:	89 10                	mov    DWORD PTR [eax],edx
c0016fa9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fad:	85 c0                	test   eax,eax
c0016faf:	75 07                	jne    c0016fb8 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016fb1:	b8 00 00 00 00       	mov    eax,0x0
c0016fb6:	eb 08                	jmp    c0016fc0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016fb8:	b8 01 00 00 00       	mov    eax,0x1
c0016fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0016fc0:	83 c4 1c             	add    esp,0x1c
c0016fc3:	c3                   	ret    

c0016fc4 <FAT::close(void*)>:
c0016fc4:	83 ec 1c             	sub    esp,0x1c
c0016fc7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016fcc:	75 0a                	jne    c0016fd8 <FAT::close(void*)+0x14>
c0016fce:	b8 04 00 00 00       	mov    eax,0x4
c0016fd3:	eb 3f                	jmp    c0017014 <FAT::close(void*)+0x50>
c0016fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0016fd8:	83 ec 0c             	sub    esp,0xc
c0016fdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fdf:	e8 0c d3 fe ff       	call   c00042f0 <f_close>
c0016fe4:	83 c4 10             	add    esp,0x10
c0016fe7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016feb:	83 ec 0c             	sub    esp,0xc
c0016fee:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ff2:	e8 76 0e ff ff       	call   c0007e6d <free>
c0016ff7:	83 c4 10             	add    esp,0x10
c0016ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ffe:	85 c0                	test   eax,eax
c0017000:	75 0a                	jne    c001700c <FAT::close(void*)+0x48>
c0017002:	b8 00 00 00 00       	mov    eax,0x0
c0017007:	eb 0b                	jmp    c0017014 <FAT::close(void*)+0x50>
c0017009:	8d 76 00             	lea    esi,[esi+0x0]
c001700c:	b8 01 00 00 00       	mov    eax,0x1
c0017011:	8d 76 00             	lea    esi,[esi+0x0]
c0017014:	83 c4 1c             	add    esp,0x1c
c0017017:	c3                   	ret    

c0017018 <FAT::closeDir(void*)>:
c0017018:	83 ec 1c             	sub    esp,0x1c
c001701b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017020:	75 0a                	jne    c001702c <FAT::closeDir(void*)+0x14>
c0017022:	b8 04 00 00 00       	mov    eax,0x4
c0017027:	eb 3f                	jmp    c0017068 <FAT::closeDir(void*)+0x50>
c0017029:	8d 76 00             	lea    esi,[esi+0x0]
c001702c:	83 ec 0c             	sub    esp,0xc
c001702f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017033:	e8 59 d5 fe ff       	call   c0004591 <f_closedir>
c0017038:	83 c4 10             	add    esp,0x10
c001703b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001703f:	83 ec 0c             	sub    esp,0xc
c0017042:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017046:	e8 22 0e ff ff       	call   c0007e6d <free>
c001704b:	83 c4 10             	add    esp,0x10
c001704e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017052:	85 c0                	test   eax,eax
c0017054:	75 0a                	jne    c0017060 <FAT::closeDir(void*)+0x48>
c0017056:	b8 00 00 00 00       	mov    eax,0x0
c001705b:	eb 0b                	jmp    c0017068 <FAT::closeDir(void*)+0x50>
c001705d:	8d 76 00             	lea    esi,[esi+0x0]
c0017060:	b8 01 00 00 00       	mov    eax,0x1
c0017065:	8d 76 00             	lea    esi,[esi+0x0]
c0017068:	83 c4 1c             	add    esp,0x1c
c001706b:	c3                   	ret    

c001706c <FAT::seek(void*, unsigned long long)>:
c001706c:	83 ec 2c             	sub    esp,0x2c
c001706f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017073:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017077:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001707b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001707f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0017084:	75 0a                	jne    c0017090 <FAT::seek(void*, unsigned long long)+0x24>
c0017086:	b8 04 00 00 00       	mov    eax,0x4
c001708b:	eb 33                	jmp    c00170c0 <FAT::seek(void*, unsigned long long)+0x54>
c001708d:	8d 76 00             	lea    esi,[esi+0x0]
c0017090:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017094:	83 ec 08             	sub    esp,0x8
c0017097:	50                   	push   eax
c0017098:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001709c:	e8 7e d2 fe ff       	call   c000431f <f_lseek>
c00170a1:	83 c4 10             	add    esp,0x10
c00170a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00170a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00170ac:	85 c0                	test   eax,eax
c00170ae:	75 08                	jne    c00170b8 <FAT::seek(void*, unsigned long long)+0x4c>
c00170b0:	b8 00 00 00 00       	mov    eax,0x0
c00170b5:	eb 09                	jmp    c00170c0 <FAT::seek(void*, unsigned long long)+0x54>
c00170b7:	90                   	nop
c00170b8:	b8 01 00 00 00       	mov    eax,0x1
c00170bd:	8d 76 00             	lea    esi,[esi+0x0]
c00170c0:	83 c4 2c             	add    esp,0x2c
c00170c3:	c3                   	ret    

c00170c4 <fatWrapperReadDisk>:
c00170c4:	53                   	push   ebx
c00170c5:	83 ec 18             	sub    esp,0x18
c00170c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170cc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00170d0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170d4:	25 ff 00 00 00       	and    eax,0xff
c00170d9:	8b 0c 85 20 2f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd0e0]
c00170e0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00170e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170e8:	ba 00 00 00 00       	mov    edx,0x0
c00170ed:	83 ec 0c             	sub    esp,0xc
c00170f0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170f4:	53                   	push   ebx
c00170f5:	52                   	push   edx
c00170f6:	50                   	push   eax
c00170f7:	51                   	push   ecx
c00170f8:	e8 d7 61 ff ff       	call   c000d2d4 <LogicalDisk::read(unsigned long long, int, void*)>
c00170fd:	83 c4 20             	add    esp,0x20
c0017100:	83 c4 18             	add    esp,0x18
c0017103:	5b                   	pop    ebx
c0017104:	c3                   	ret    
c0017105:	8d 76 00             	lea    esi,[esi+0x0]

c0017108 <fatWrapperWriteDisk>:
c0017108:	53                   	push   ebx
c0017109:	83 ec 18             	sub    esp,0x18
c001710c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017110:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017114:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017118:	25 ff 00 00 00       	and    eax,0xff
c001711d:	8b 0c 85 20 2f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd0e0]
c0017124:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017128:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001712c:	ba 00 00 00 00       	mov    edx,0x0
c0017131:	83 ec 0c             	sub    esp,0xc
c0017134:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017138:	53                   	push   ebx
c0017139:	52                   	push   edx
c001713a:	50                   	push   eax
c001713b:	51                   	push   ecx
c001713c:	e8 ff 61 ff ff       	call   c000d340 <LogicalDisk::write(unsigned long long, int, void*)>
c0017141:	83 c4 20             	add    esp,0x20
c0017144:	83 c4 18             	add    esp,0x18
c0017147:	5b                   	pop    ebx
c0017148:	c3                   	ret    
c0017149:	8d 76 00             	lea    esi,[esi+0x0]

c001714c <fatWrapperIoctl>:
c001714c:	53                   	push   ebx
c001714d:	83 ec 28             	sub    esp,0x28
c0017150:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017154:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017158:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001715c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017160:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0017165:	75 35                	jne    c001719c <fatWrapperIoctl+0x50>
c0017167:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001716b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001716f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017173:	25 ff 00 00 00       	and    eax,0xff
c0017178:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c001717f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017185:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001718b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001718f:	66 89 02             	mov    WORD PTR [edx],ax
c0017192:	b8 00 00 00 00       	mov    eax,0x0
c0017197:	e9 c4 00 00 00       	jmp    c0017260 <fatWrapperIoctl+0x114>
c001719c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00171a1:	75 75                	jne    c0017218 <fatWrapperIoctl+0xcc>
c00171a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00171a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00171ab:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00171af:	25 ff 00 00 00       	and    eax,0xff
c00171b4:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c00171bb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00171c1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00171c7:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00171cd:	89 c8                	mov    eax,ecx
c00171cf:	89 da                	mov    edx,ebx
c00171d1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00171d5:	c1 e0 0a             	shl    eax,0xa
c00171d8:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00171dc:	81 e1 ff 00 00 00    	and    ecx,0xff
c00171e2:	8b 0c 8d 20 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0e0]
c00171e9:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00171ef:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00171f5:	89 cb                	mov    ebx,ecx
c00171f7:	c1 fb 1f             	sar    ebx,0x1f
c00171fa:	53                   	push   ebx
c00171fb:	51                   	push   ecx
c00171fc:	52                   	push   edx
c00171fd:	50                   	push   eax
c00171fe:	e8 2d 50 00 00       	call   c001c230 <__udivdi3>
c0017203:	83 c4 10             	add    esp,0x10
c0017206:	89 c2                	mov    edx,eax
c0017208:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001720c:	89 10                	mov    DWORD PTR [eax],edx
c001720e:	b8 00 00 00 00       	mov    eax,0x0
c0017213:	eb 4b                	jmp    c0017260 <fatWrapperIoctl+0x114>
c0017215:	8d 76 00             	lea    esi,[esi+0x0]
c0017218:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001721d:	75 09                	jne    c0017228 <fatWrapperIoctl+0xdc>
c001721f:	b8 00 00 00 00       	mov    eax,0x0
c0017224:	eb 3a                	jmp    c0017260 <fatWrapperIoctl+0x114>
c0017226:	66 90                	xchg   ax,ax
c0017228:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001722d:	75 19                	jne    c0017248 <fatWrapperIoctl+0xfc>
c001722f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017233:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017237:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001723b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0017241:	b8 00 00 00 00       	mov    eax,0x0
c0017246:	eb 18                	jmp    c0017260 <fatWrapperIoctl+0x114>
c0017248:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001724d:	75 09                	jne    c0017258 <fatWrapperIoctl+0x10c>
c001724f:	b8 00 00 00 00       	mov    eax,0x0
c0017254:	eb 0a                	jmp    c0017260 <fatWrapperIoctl+0x114>
c0017256:	66 90                	xchg   ax,ax
c0017258:	b8 04 00 00 00       	mov    eax,0x4
c001725d:	8d 76 00             	lea    esi,[esi+0x0]
c0017260:	83 c4 28             	add    esp,0x28
c0017263:	5b                   	pop    ebx
c0017264:	c3                   	ret    
c0017265:	90                   	nop
c0017266:	66 90                	xchg   ax,ax

c0017268 <FAT::FAT()>:
c0017268:	83 ec 1c             	sub    esp,0x1c
c001726b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001726f:	83 ec 0c             	sub    esp,0xc
c0017272:	50                   	push   eax
c0017273:	e8 96 3c ff ff       	call   c000af0e <Filesystem::Filesystem()>
c0017278:	83 c4 10             	add    esp,0x10
c001727b:	ba 90 ef 01 c0       	mov    edx,0xc001ef90
c0017280:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017284:	89 10                	mov    DWORD PTR [eax],edx
c0017286:	c7 05 40 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023f40,0x0
c0017290:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017298:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001729d:	7f 15                	jg     c00172b4 <FAT::FAT()+0x4c>
c001729f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00172a3:	c7 04 85 60 3f 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc0a0],0xffffffff
c00172ae:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00172b2:	eb e4                	jmp    c0017298 <FAT::FAT()+0x30>
c00172b4:	90                   	nop
c00172b5:	83 c4 1c             	add    esp,0x1c
c00172b8:	c3                   	ret    
c00172b9:	90                   	nop
c00172ba:	66 90                	xchg   ax,ax

c00172bc <FAT::fixFilepath(char*)>:
c00172bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172c0:	8a 00                	mov    al,BYTE PTR [eax]
c00172c2:	3c 40                	cmp    al,0x40
c00172c4:	7e 2e                	jle    c00172f4 <FAT::fixFilepath(char*)+0x38>
c00172c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172ca:	8a 00                	mov    al,BYTE PTR [eax]
c00172cc:	83 e8 41             	sub    eax,0x41
c00172cf:	88 c2                	mov    dl,al
c00172d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172d5:	88 10                	mov    BYTE PTR [eax],dl
c00172d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172db:	8a 00                	mov    al,BYTE PTR [eax]
c00172dd:	0f be c0             	movsx  eax,al
c00172e0:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c00172e7:	83 c0 30             	add    eax,0x30
c00172ea:	88 c2                	mov    dl,al
c00172ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172f0:	88 10                	mov    BYTE PTR [eax],dl
c00172f2:	66 90                	xchg   ax,ax
c00172f4:	90                   	nop
c00172f5:	c3                   	ret    
c00172f6:	66 90                	xchg   ax,ax

c00172f8 <FAT::open(char const*, void**, FileOpenMode)>:
c00172f8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00172fe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017306:	74 0c                	je     c0017314 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0017308:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017310:	75 0e                	jne    c0017320 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0017312:	66 90                	xchg   ax,ax
c0017314:	b8 04 00 00 00       	mov    eax,0x4
c0017319:	e9 0a 01 00 00       	jmp    c0017428 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c001731e:	66 90                	xchg   ax,ax
c0017320:	83 ec 08             	sub    esp,0x8
c0017323:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001732a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001732e:	50                   	push   eax
c001732f:	e8 ec 92 fe ff       	call   c0000620 <strcpy>
c0017334:	83 c4 10             	add    esp,0x10
c0017337:	83 ec 08             	sub    esp,0x8
c001733a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001733e:	50                   	push   eax
c001733f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017346:	e8 71 ff ff ff       	call   c00172bc <FAT::fixFilepath(char*)>
c001734b:	83 c4 10             	add    esp,0x10
c001734e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0017356:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001735d:	83 e0 01             	and    eax,0x1
c0017360:	74 0a                	je     c001736c <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0017362:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001736a:	66 90                	xchg   ax,ax
c001736c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017373:	83 e0 04             	and    eax,0x4
c0017376:	74 10                	je     c0017388 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0017378:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0017380:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017388:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001738f:	83 e0 02             	and    eax,0x2
c0017392:	74 08                	je     c001739c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0017394:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001739c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00173a3:	83 e0 08             	and    eax,0x8
c00173a6:	74 08                	je     c00173b0 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c00173a8:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00173b0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00173b7:	83 e0 10             	and    eax,0x10
c00173ba:	74 08                	je     c00173c4 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00173bc:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00173c4:	83 ec 0c             	sub    esp,0xc
c00173c7:	68 28 02 00 00       	push   0x228
c00173cc:	e8 8c 0a ff ff       	call   c0007e5d <malloc>
c00173d1:	83 c4 10             	add    esp,0x10
c00173d4:	89 c2                	mov    edx,eax
c00173d6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173dd:	89 10                	mov    DWORD PTR [eax],edx
c00173df:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00173e6:	31 d2                	xor    edx,edx
c00173e8:	88 c2                	mov    dl,al
c00173ea:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00173f3:	83 ec 04             	sub    esp,0x4
c00173f6:	52                   	push   edx
c00173f7:	8d 54 24 10          	lea    edx,[esp+0x10]
c00173fb:	52                   	push   edx
c00173fc:	50                   	push   eax
c00173fd:	e8 3b c7 fe ff       	call   c0003b3d <f_open>
c0017402:	83 c4 10             	add    esp,0x10
c0017405:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001740c:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0017414:	74 0a                	je     c0017420 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0017416:	b8 01 00 00 00       	mov    eax,0x1
c001741b:	eb 0b                	jmp    c0017428 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c001741d:	8d 76 00             	lea    esi,[esi+0x0]
c0017420:	b8 00 00 00 00       	mov    eax,0x0
c0017425:	8d 76 00             	lea    esi,[esi+0x0]
c0017428:	81 c4 1c 01 00 00    	add    esp,0x11c
c001742e:	c3                   	ret    
c001742f:	90                   	nop

c0017430 <FAT::openDir(char const*, void**)>:
c0017430:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017436:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001743e:	74 0c                	je     c001744c <FAT::openDir(char const*, void**)+0x1c>
c0017440:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017448:	75 0e                	jne    c0017458 <FAT::openDir(char const*, void**)+0x28>
c001744a:	66 90                	xchg   ax,ax
c001744c:	b8 04 00 00 00       	mov    eax,0x4
c0017451:	e9 82 00 00 00       	jmp    c00174d8 <FAT::openDir(char const*, void**)+0xa8>
c0017456:	66 90                	xchg   ax,ax
c0017458:	83 ec 08             	sub    esp,0x8
c001745b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017462:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017466:	50                   	push   eax
c0017467:	e8 b4 91 fe ff       	call   c0000620 <strcpy>
c001746c:	83 c4 10             	add    esp,0x10
c001746f:	83 ec 08             	sub    esp,0x8
c0017472:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017476:	50                   	push   eax
c0017477:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001747e:	e8 39 fe ff ff       	call   c00172bc <FAT::fixFilepath(char*)>
c0017483:	83 c4 10             	add    esp,0x10
c0017486:	83 ec 0c             	sub    esp,0xc
c0017489:	6a 30                	push   0x30
c001748b:	e8 cd 09 ff ff       	call   c0007e5d <malloc>
c0017490:	83 c4 10             	add    esp,0x10
c0017493:	89 c2                	mov    edx,eax
c0017495:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001749c:	89 10                	mov    DWORD PTR [eax],edx
c001749e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00174a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00174a7:	83 ec 08             	sub    esp,0x8
c00174aa:	8d 54 24 14          	lea    edx,[esp+0x14]
c00174ae:	52                   	push   edx
c00174af:	50                   	push   eax
c00174b0:	e8 11 d0 fe ff       	call   c00044c6 <f_opendir>
c00174b5:	83 c4 10             	add    esp,0x10
c00174b8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00174bf:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00174c7:	74 07                	je     c00174d0 <FAT::openDir(char const*, void**)+0xa0>
c00174c9:	b8 01 00 00 00       	mov    eax,0x1
c00174ce:	eb 08                	jmp    c00174d8 <FAT::openDir(char const*, void**)+0xa8>
c00174d0:	b8 00 00 00 00       	mov    eax,0x0
c00174d5:	8d 76 00             	lea    esi,[esi+0x0]
c00174d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00174de:	c3                   	ret    
c00174df:	90                   	nop

c00174e0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00174e0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00174e6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00174ee:	75 0c                	jne    c00174fc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00174f0:	b8 04 00 00 00       	mov    eax,0x4
c00174f5:	e9 d6 00 00 00       	jmp    c00175d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174fa:	66 90                	xchg   ax,ax
c00174fc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0017504:	75 0a                	jne    c0017510 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0017506:	b8 04 00 00 00       	mov    eax,0x4
c001750b:	e9 c0 00 00 00       	jmp    c00175d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017510:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0017518:	75 0a                	jne    c0017524 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001751a:	b8 04 00 00 00       	mov    eax,0x4
c001751f:	e9 ac 00 00 00       	jmp    c00175d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017524:	83 ec 08             	sub    esp,0x8
c0017527:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001752e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017535:	50                   	push   eax
c0017536:	e8 e5 90 fe ff       	call   c0000620 <strcpy>
c001753b:	83 c4 10             	add    esp,0x10
c001753e:	83 ec 08             	sub    esp,0x8
c0017541:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017548:	50                   	push   eax
c0017549:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017550:	e8 67 fd ff ff       	call   c00172bc <FAT::fixFilepath(char*)>
c0017555:	83 c4 10             	add    esp,0x10
c0017558:	83 ec 08             	sub    esp,0x8
c001755b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001755f:	50                   	push   eax
c0017560:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017567:	50                   	push   eax
c0017568:	e8 d8 d0 fe ff       	call   c0004645 <f_stat>
c001756d:	83 c4 10             	add    esp,0x10
c0017570:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017577:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001757e:	85 c0                	test   eax,eax
c0017580:	74 0a                	je     c001758c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0017582:	83 f8 04             	cmp    eax,0x4
c0017585:	74 39                	je     c00175c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0017587:	eb 3f                	jmp    c00175c8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0017589:	8d 76 00             	lea    esi,[esi+0x0]
c001758c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017590:	25 ff 00 00 00       	and    eax,0xff
c0017595:	83 e0 10             	and    eax,0x10
c0017598:	0f 95 c2             	setne  dl
c001759b:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00175a2:	88 10                	mov    BYTE PTR [eax],dl
c00175a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175a8:	ba 00 00 00 00       	mov    edx,0x0
c00175ad:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00175b4:	89 01                	mov    DWORD PTR [ecx],eax
c00175b6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00175b9:	b8 00 00 00 00       	mov    eax,0x0
c00175be:	eb 10                	jmp    c00175d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00175c0:	b8 02 00 00 00       	mov    eax,0x2
c00175c5:	eb 09                	jmp    c00175d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00175c7:	90                   	nop
c00175c8:	b8 01 00 00 00       	mov    eax,0x1
c00175cd:	8d 76 00             	lea    esi,[esi+0x0]
c00175d0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00175d6:	c3                   	ret    
c00175d7:	90                   	nop

c00175d8 <FAT::unlink(char const*)>:
c00175d8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00175de:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00175e6:	75 08                	jne    c00175f0 <FAT::unlink(char const*)+0x18>
c00175e8:	b8 04 00 00 00       	mov    eax,0x4
c00175ed:	eb 61                	jmp    c0017650 <FAT::unlink(char const*)+0x78>
c00175ef:	90                   	nop
c00175f0:	83 ec 08             	sub    esp,0x8
c00175f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00175fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175fe:	50                   	push   eax
c00175ff:	e8 1c 90 fe ff       	call   c0000620 <strcpy>
c0017604:	83 c4 10             	add    esp,0x10
c0017607:	83 ec 08             	sub    esp,0x8
c001760a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001760e:	50                   	push   eax
c001760f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017616:	e8 a1 fc ff ff       	call   c00172bc <FAT::fixFilepath(char*)>
c001761b:	83 c4 10             	add    esp,0x10
c001761e:	83 ec 0c             	sub    esp,0xc
c0017621:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017625:	50                   	push   eax
c0017626:	e8 7f d2 fe ff       	call   c00048aa <f_unlink>
c001762b:	83 c4 10             	add    esp,0x10
c001762e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017635:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001763c:	85 c0                	test   eax,eax
c001763e:	75 08                	jne    c0017648 <FAT::unlink(char const*)+0x70>
c0017640:	b8 00 00 00 00       	mov    eax,0x0
c0017645:	eb 09                	jmp    c0017650 <FAT::unlink(char const*)+0x78>
c0017647:	90                   	nop
c0017648:	b8 01 00 00 00       	mov    eax,0x1
c001764d:	8d 76 00             	lea    esi,[esi+0x0]
c0017650:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017656:	c3                   	ret    
c0017657:	90                   	nop

c0017658 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017658:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001765e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0017665:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001766c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017670:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017674:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001767c:	75 0a                	jne    c0017688 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001767e:	b8 04 00 00 00       	mov    eax,0x4
c0017683:	e9 54 01 00 00       	jmp    c00177dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017688:	83 ec 08             	sub    esp,0x8
c001768b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017692:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017696:	50                   	push   eax
c0017697:	e8 84 8f fe ff       	call   c0000620 <strcpy>
c001769c:	83 c4 10             	add    esp,0x10
c001769f:	83 ec 08             	sub    esp,0x8
c00176a2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00176a6:	50                   	push   eax
c00176a7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00176ae:	e8 09 fc ff ff       	call   c00172bc <FAT::fixFilepath(char*)>
c00176b3:	83 c4 10             	add    esp,0x10
c00176b6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00176be:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00176c6:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176ca:	25 ff 00 00 00       	and    eax,0xff
c00176cf:	83 e0 01             	and    eax,0x1
c00176d2:	74 08                	je     c00176dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00176d4:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00176dc:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176e0:	25 ff 00 00 00       	and    eax,0xff
c00176e5:	83 e0 02             	and    eax,0x2
c00176e8:	74 0a                	je     c00176f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c00176ea:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00176f2:	66 90                	xchg   ax,ax
c00176f4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176f8:	25 ff 00 00 00       	and    eax,0xff
c00176fd:	83 e0 04             	and    eax,0x4
c0017700:	74 0a                	je     c001770c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c0017702:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001770a:	66 90                	xchg   ax,ax
c001770c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017710:	25 ff 00 00 00       	and    eax,0xff
c0017715:	83 e0 08             	and    eax,0x8
c0017718:	74 0a                	je     c0017724 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c001771a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0017722:	66 90                	xchg   ax,ax
c0017724:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017728:	25 ff 00 00 00       	and    eax,0xff
c001772d:	83 e0 01             	and    eax,0x1
c0017730:	74 0a                	je     c001773c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0017732:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001773a:	66 90                	xchg   ax,ax
c001773c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017740:	25 ff 00 00 00       	and    eax,0xff
c0017745:	83 e0 02             	and    eax,0x2
c0017748:	74 0a                	je     c0017754 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001774a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0017752:	66 90                	xchg   ax,ax
c0017754:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017758:	25 ff 00 00 00       	and    eax,0xff
c001775d:	83 e0 04             	and    eax,0x4
c0017760:	74 0a                	je     c001776c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c0017762:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001776a:	66 90                	xchg   ax,ax
c001776c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017770:	25 ff 00 00 00       	and    eax,0xff
c0017775:	83 e0 08             	and    eax,0x8
c0017778:	74 0a                	je     c0017784 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c001777a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0017782:	66 90                	xchg   ax,ax
c0017784:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001778b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0017792:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017799:	31 d2                	xor    edx,edx
c001779b:	88 c2                	mov    dl,al
c001779d:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00177a4:	25 ff 00 00 00       	and    eax,0xff
c00177a9:	83 ec 04             	sub    esp,0x4
c00177ac:	52                   	push   edx
c00177ad:	50                   	push   eax
c00177ae:	8d 44 24 24          	lea    eax,[esp+0x24]
c00177b2:	50                   	push   eax
c00177b3:	e8 65 d5 fe ff       	call   c0004d1d <f_chmod>
c00177b8:	83 c4 10             	add    esp,0x10
c00177bb:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00177c2:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00177c9:	85 c0                	test   eax,eax
c00177cb:	75 07                	jne    c00177d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c00177cd:	b8 00 00 00 00       	mov    eax,0x0
c00177d2:	eb 08                	jmp    c00177dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00177d4:	b8 01 00 00 00       	mov    eax,0x1
c00177d9:	8d 76 00             	lea    esi,[esi+0x0]
c00177dc:	81 c4 2c 01 00 00    	add    esp,0x12c
c00177e2:	c3                   	ret    
c00177e3:	90                   	nop

c00177e4 <FAT::rename(char const*, char const*)>:
c00177e4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00177ea:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00177f2:	74 0c                	je     c0017800 <FAT::rename(char const*, char const*)+0x1c>
c00177f4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00177fc:	75 0e                	jne    c001780c <FAT::rename(char const*, char const*)+0x28>
c00177fe:	66 90                	xchg   ax,ax
c0017800:	b8 04 00 00 00       	mov    eax,0x4
c0017805:	e9 9e 00 00 00       	jmp    c00178a8 <FAT::rename(char const*, char const*)+0xc4>
c001780a:	66 90                	xchg   ax,ax
c001780c:	83 ec 08             	sub    esp,0x8
c001780f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017816:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001781d:	50                   	push   eax
c001781e:	e8 fd 8d fe ff       	call   c0000620 <strcpy>
c0017823:	83 c4 10             	add    esp,0x10
c0017826:	83 ec 08             	sub    esp,0x8
c0017829:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017830:	50                   	push   eax
c0017831:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017838:	e8 7f fa ff ff       	call   c00172bc <FAT::fixFilepath(char*)>
c001783d:	83 c4 10             	add    esp,0x10
c0017840:	83 ec 08             	sub    esp,0x8
c0017843:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001784a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001784e:	50                   	push   eax
c001784f:	e8 cc 8d fe ff       	call   c0000620 <strcpy>
c0017854:	83 c4 10             	add    esp,0x10
c0017857:	83 ec 08             	sub    esp,0x8
c001785a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001785e:	50                   	push   eax
c001785f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017866:	e8 51 fa ff ff       	call   c00172bc <FAT::fixFilepath(char*)>
c001786b:	83 c4 10             	add    esp,0x10
c001786e:	83 ec 08             	sub    esp,0x8
c0017871:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017875:	50                   	push   eax
c0017876:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001787d:	50                   	push   eax
c001787e:	e8 e4 d2 fe ff       	call   c0004b67 <f_rename>
c0017883:	83 c4 10             	add    esp,0x10
c0017886:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001788d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0017894:	85 c0                	test   eax,eax
c0017896:	75 08                	jne    c00178a0 <FAT::rename(char const*, char const*)+0xbc>
c0017898:	b8 00 00 00 00       	mov    eax,0x0
c001789d:	eb 09                	jmp    c00178a8 <FAT::rename(char const*, char const*)+0xc4>
c001789f:	90                   	nop
c00178a0:	b8 01 00 00 00       	mov    eax,0x1
c00178a5:	8d 76 00             	lea    esi,[esi+0x0]
c00178a8:	81 c4 1c 02 00 00    	add    esp,0x21c
c00178ae:	c3                   	ret    
c00178af:	90                   	nop

c00178b0 <FAT::mkdir(char const*)>:
c00178b0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00178b6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00178be:	75 08                	jne    c00178c8 <FAT::mkdir(char const*)+0x18>
c00178c0:	b8 04 00 00 00       	mov    eax,0x4
c00178c5:	eb 61                	jmp    c0017928 <FAT::mkdir(char const*)+0x78>
c00178c7:	90                   	nop
c00178c8:	83 ec 08             	sub    esp,0x8
c00178cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00178d2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178d6:	50                   	push   eax
c00178d7:	e8 44 8d fe ff       	call   c0000620 <strcpy>
c00178dc:	83 c4 10             	add    esp,0x10
c00178df:	83 ec 08             	sub    esp,0x8
c00178e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00178e6:	50                   	push   eax
c00178e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00178ee:	e8 c9 f9 ff ff       	call   c00172bc <FAT::fixFilepath(char*)>
c00178f3:	83 c4 10             	add    esp,0x10
c00178f6:	83 ec 0c             	sub    esp,0xc
c00178f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178fd:	50                   	push   eax
c00178fe:	e8 c9 d0 fe ff       	call   c00049cc <f_mkdir>
c0017903:	83 c4 10             	add    esp,0x10
c0017906:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001790d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017914:	85 c0                	test   eax,eax
c0017916:	75 08                	jne    c0017920 <FAT::mkdir(char const*)+0x70>
c0017918:	b8 00 00 00 00       	mov    eax,0x0
c001791d:	eb 09                	jmp    c0017928 <FAT::mkdir(char const*)+0x78>
c001791f:	90                   	nop
c0017920:	b8 01 00 00 00       	mov    eax,0x1
c0017925:	8d 76 00             	lea    esi,[esi+0x0]
c0017928:	81 c4 1c 01 00 00    	add    esp,0x11c
c001792e:	c3                   	ret    
c001792f:	90                   	nop

c0017930 <FAT::exists(char const*)>:
c0017930:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017936:	83 ec 08             	sub    esp,0x8
c0017939:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017940:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017944:	50                   	push   eax
c0017945:	e8 d6 8c fe ff       	call   c0000620 <strcpy>
c001794a:	83 c4 10             	add    esp,0x10
c001794d:	83 ec 08             	sub    esp,0x8
c0017950:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017954:	50                   	push   eax
c0017955:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001795c:	e8 5b f9 ff ff       	call   c00172bc <FAT::fixFilepath(char*)>
c0017961:	83 c4 10             	add    esp,0x10
c0017964:	83 ec 08             	sub    esp,0x8
c0017967:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001796e:	50                   	push   eax
c001796f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017973:	50                   	push   eax
c0017974:	e8 cc cc fe ff       	call   c0004645 <f_stat>
c0017979:	83 c4 10             	add    esp,0x10
c001797c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017983:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001798a:	85 c0                	test   eax,eax
c001798c:	75 06                	jne    c0017994 <FAT::exists(char const*)+0x64>
c001798e:	b0 01                	mov    al,0x1
c0017990:	eb 06                	jmp    c0017998 <FAT::exists(char const*)+0x68>
c0017992:	66 90                	xchg   ax,ax
c0017994:	b0 00                	mov    al,0x0
c0017996:	66 90                	xchg   ax,ax
c0017998:	81 c4 2c 02 00 00    	add    esp,0x22c
c001799e:	c3                   	ret    
c001799f:	90                   	nop

c00179a0 <isoReadDiscSectorHelper>:
c00179a0:	83 ec 2c             	sub    esp,0x2c
c00179a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179a7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00179ab:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00179b0:	83 e8 41             	sub    eax,0x41
c00179b3:	8b 0c 85 20 2f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd0e0]
c00179ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179be:	ba 00 00 00 00       	mov    edx,0x0
c00179c3:	83 ec 0c             	sub    esp,0xc
c00179c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00179ca:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00179ce:	52                   	push   edx
c00179cf:	50                   	push   eax
c00179d0:	51                   	push   ecx
c00179d1:	e8 fe 58 ff ff       	call   c000d2d4 <LogicalDisk::read(unsigned long long, int, void*)>
c00179d6:	83 c4 20             	add    esp,0x20
c00179d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179dd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00179e2:	74 0c                	je     c00179f0 <isoReadDiscSectorHelper+0x50>
c00179e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179e8:	c1 e0 0b             	shl    eax,0xb
c00179eb:	eb 0b                	jmp    c00179f8 <isoReadDiscSectorHelper+0x58>
c00179ed:	8d 76 00             	lea    esi,[esi+0x0]
c00179f0:	b8 00 00 00 00       	mov    eax,0x0
c00179f5:	8d 76 00             	lea    esi,[esi+0x0]
c00179f8:	83 c4 2c             	add    esp,0x2c
c00179fb:	c3                   	ret    

c00179fc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00179fc:	b8 08 00 00 00       	mov    eax,0x8
c0017a01:	c3                   	ret    

c0017a02 <ISO9660::getName()>:
c0017a02:	b8 f0 ef 01 c0       	mov    eax,0xc001eff0
c0017a07:	c3                   	ret    

c0017a08 <ISO9660::closeDir(void*)>:
c0017a08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a0e:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0017a11:	90                   	nop

c0017a12 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0017a12:	b8 01 00 00 00       	mov    eax,0x1
c0017a17:	c3                   	ret    

c0017a18 <ISO9660::unlink(char const*)>:
c0017a18:	b8 01 00 00 00       	mov    eax,0x1
c0017a1d:	c3                   	ret    

c0017a1e <ISO9660::write(void*, unsigned long, void*, int*)>:
c0017a1e:	b8 03 00 00 00       	mov    eax,0x3
c0017a23:	c3                   	ret    

c0017a24 <ISO9660::rename(char const*, char const*)>:
c0017a24:	b8 01 00 00 00       	mov    eax,0x1
c0017a29:	c3                   	ret    

c0017a2a <ISO9660::mkdir(char const*)>:
c0017a2a:	b8 01 00 00 00       	mov    eax,0x1
c0017a2f:	c3                   	ret    

c0017a30 <ISO9660::~ISO9660()>:
c0017a30:	83 ec 0c             	sub    esp,0xc
c0017a33:	ba 70 f0 01 c0       	mov    edx,0xc001f070
c0017a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a3c:	89 10                	mov    DWORD PTR [eax],edx
c0017a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a42:	83 ec 0c             	sub    esp,0xc
c0017a45:	50                   	push   eax
c0017a46:	e8 e7 34 ff ff       	call   c000af32 <Filesystem::~Filesystem()>
c0017a4b:	83 c4 10             	add    esp,0x10
c0017a4e:	90                   	nop
c0017a4f:	83 c4 0c             	add    esp,0xc
c0017a52:	c3                   	ret    
c0017a53:	90                   	nop

c0017a54 <ISO9660::~ISO9660()>:
c0017a54:	83 ec 0c             	sub    esp,0xc
c0017a57:	83 ec 0c             	sub    esp,0xc
c0017a5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a5e:	e8 cd ff ff ff       	call   c0017a30 <ISO9660::~ISO9660()>
c0017a63:	83 c4 10             	add    esp,0x10
c0017a66:	83 ec 08             	sub    esp,0x8
c0017a69:	6a 08                	push   0x8
c0017a6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a6f:	e8 82 30 ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c0017a74:	83 c4 10             	add    esp,0x10
c0017a77:	83 c4 0c             	add    esp,0xc
c0017a7a:	c3                   	ret    
c0017a7b:	90                   	nop

c0017a7c <ISO9660::exists(char const*)>:
c0017a7c:	83 ec 18             	sub    esp,0x18
c0017a7f:	68 0b f0 01 c0       	push   0xc001f00b
c0017a84:	e8 af dd ff ff       	call   c0015838 <HalPanic(char const*)>
c0017a89:	31 c0                	xor    eax,eax
c0017a8b:	83 c4 1c             	add    esp,0x1c
c0017a8e:	c3                   	ret    
c0017a8f:	90                   	nop

c0017a90 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017a90:	56                   	push   esi
c0017a91:	53                   	push   ebx
c0017a92:	53                   	push   ebx
c0017a93:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017a97:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017a9b:	85 db                	test   ebx,ebx
c0017a9d:	74 72                	je     c0017b11 <ISO9660::open(char const*, void**, FileOpenMode)+0x81>
c0017a9f:	85 f6                	test   esi,esi
c0017aa1:	74 6e                	je     c0017b11 <ISO9660::open(char const*, void**, FileOpenMode)+0x81>
c0017aa3:	ba 03 00 00 00       	mov    edx,0x3
c0017aa8:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017aad:	75 67                	jne    c0017b16 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017aaf:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017ab2:	3a 05 40 40 02 c0    	cmp    al,BYTE PTR ds:0xc0024040
c0017ab8:	74 34                	je     c0017aee <ISO9660::open(char const*, void**, FileOpenMode)+0x5e>
c0017aba:	83 ec 0c             	sub    esp,0xc
c0017abd:	50                   	push   eax
c0017abe:	e8 cf f1 fe ff       	call   c0006c92 <init_percd>
c0017ac3:	83 c4 10             	add    esp,0x10
c0017ac6:	ba 0b 00 00 00       	mov    edx,0xb
c0017acb:	40                   	inc    eax
c0017acc:	74 48                	je     c0017b16 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017ace:	80 3d 40 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024040,0x0
c0017ad5:	74 10                	je     c0017ae7 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0017ad7:	83 ec 0c             	sub    esp,0xc
c0017ada:	68 29 f0 01 c0       	push   0xc001f029
c0017adf:	e8 54 dd ff ff       	call   c0015838 <HalPanic(char const*)>
c0017ae4:	83 c4 10             	add    esp,0x10
c0017ae7:	8a 03                	mov    al,BYTE PTR [ebx]
c0017ae9:	a2 40 40 02 c0       	mov    ds:0xc0024040,al
c0017aee:	83 c3 03             	add    ebx,0x3
c0017af1:	51                   	push   ecx
c0017af2:	51                   	push   ecx
c0017af3:	6a 00                	push   0x0
c0017af5:	53                   	push   ebx
c0017af6:	e8 07 ea fe ff       	call   c0006502 <iso_open>
c0017afb:	83 c4 10             	add    esp,0x10
c0017afe:	ba 01 00 00 00       	mov    edx,0x1
c0017b03:	83 f8 ff             	cmp    eax,0xffffffff
c0017b06:	74 0e                	je     c0017b16 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017b08:	83 c0 64             	add    eax,0x64
c0017b0b:	31 d2                	xor    edx,edx
c0017b0d:	89 06                	mov    DWORD PTR [esi],eax
c0017b0f:	eb 05                	jmp    c0017b16 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017b11:	ba 04 00 00 00       	mov    edx,0x4
c0017b16:	89 d0                	mov    eax,edx
c0017b18:	5a                   	pop    edx
c0017b19:	5b                   	pop    ebx
c0017b1a:	5e                   	pop    esi
c0017b1b:	c3                   	ret    

c0017b1c <ISO9660::openDir(char const*, void**)>:
c0017b1c:	56                   	push   esi
c0017b1d:	53                   	push   ebx
c0017b1e:	53                   	push   ebx
c0017b1f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017b23:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017b27:	85 db                	test   ebx,ebx
c0017b29:	74 66                	je     c0017b91 <ISO9660::openDir(char const*, void**)+0x75>
c0017b2b:	85 f6                	test   esi,esi
c0017b2d:	74 62                	je     c0017b91 <ISO9660::openDir(char const*, void**)+0x75>
c0017b2f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017b32:	3a 05 40 40 02 c0    	cmp    al,BYTE PTR ds:0xc0024040
c0017b38:	74 34                	je     c0017b6e <ISO9660::openDir(char const*, void**)+0x52>
c0017b3a:	83 ec 0c             	sub    esp,0xc
c0017b3d:	50                   	push   eax
c0017b3e:	e8 4f f1 fe ff       	call   c0006c92 <init_percd>
c0017b43:	83 c4 10             	add    esp,0x10
c0017b46:	ba 0b 00 00 00       	mov    edx,0xb
c0017b4b:	40                   	inc    eax
c0017b4c:	74 48                	je     c0017b96 <ISO9660::openDir(char const*, void**)+0x7a>
c0017b4e:	80 3d 40 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024040,0x0
c0017b55:	74 10                	je     c0017b67 <ISO9660::openDir(char const*, void**)+0x4b>
c0017b57:	83 ec 0c             	sub    esp,0xc
c0017b5a:	68 29 f0 01 c0       	push   0xc001f029
c0017b5f:	e8 d4 dc ff ff       	call   c0015838 <HalPanic(char const*)>
c0017b64:	83 c4 10             	add    esp,0x10
c0017b67:	8a 03                	mov    al,BYTE PTR [ebx]
c0017b69:	a2 40 40 02 c0       	mov    ds:0xc0024040,al
c0017b6e:	83 c3 03             	add    ebx,0x3
c0017b71:	51                   	push   ecx
c0017b72:	51                   	push   ecx
c0017b73:	6a 01                	push   0x1
c0017b75:	53                   	push   ebx
c0017b76:	e8 87 e9 fe ff       	call   c0006502 <iso_open>
c0017b7b:	83 c4 10             	add    esp,0x10
c0017b7e:	ba 01 00 00 00       	mov    edx,0x1
c0017b83:	83 f8 ff             	cmp    eax,0xffffffff
c0017b86:	74 0e                	je     c0017b96 <ISO9660::openDir(char const*, void**)+0x7a>
c0017b88:	83 c0 64             	add    eax,0x64
c0017b8b:	31 d2                	xor    edx,edx
c0017b8d:	89 06                	mov    DWORD PTR [esi],eax
c0017b8f:	eb 05                	jmp    c0017b96 <ISO9660::openDir(char const*, void**)+0x7a>
c0017b91:	ba 04 00 00 00       	mov    edx,0x4
c0017b96:	89 d0                	mov    eax,edx
c0017b98:	5a                   	pop    edx
c0017b99:	5b                   	pop    ebx
c0017b9a:	5e                   	pop    esi
c0017b9b:	c3                   	ret    

c0017b9c <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017b9c:	53                   	push   ebx
c0017b9d:	83 ec 08             	sub    esp,0x8
c0017ba0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ba4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017ba8:	85 c0                	test   eax,eax
c0017baa:	74 25                	je     c0017bd1 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017bac:	85 db                	test   ebx,ebx
c0017bae:	74 21                	je     c0017bd1 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017bb0:	83 e8 64             	sub    eax,0x64
c0017bb3:	52                   	push   edx
c0017bb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017bb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017bbc:	50                   	push   eax
c0017bbd:	e8 40 ea fe ff       	call   c0006602 <iso_read>
c0017bc2:	83 c4 10             	add    esp,0x10
c0017bc5:	89 03                	mov    DWORD PTR [ebx],eax
c0017bc7:	09 d0                	or     eax,edx
c0017bc9:	0f 94 c0             	sete   al
c0017bcc:	0f b6 c0             	movzx  eax,al
c0017bcf:	eb 05                	jmp    c0017bd6 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017bd1:	b8 04 00 00 00       	mov    eax,0x4
c0017bd6:	83 c4 08             	add    esp,0x8
c0017bd9:	5b                   	pop    ebx
c0017bda:	c3                   	ret    
c0017bdb:	90                   	nop

c0017bdc <ISO9660::seek(void*, unsigned long long)>:
c0017bdc:	57                   	push   edi
c0017bdd:	56                   	push   esi
c0017bde:	b8 04 00 00 00       	mov    eax,0x4
c0017be3:	51                   	push   ecx
c0017be4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017be8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017bec:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017bf0:	85 d2                	test   edx,edx
c0017bf2:	74 1c                	je     c0017c10 <ISO9660::seek(void*, unsigned long long)+0x34>
c0017bf4:	6a 00                	push   0x0
c0017bf6:	83 ea 64             	sub    edx,0x64
c0017bf9:	57                   	push   edi
c0017bfa:	56                   	push   esi
c0017bfb:	52                   	push   edx
c0017bfc:	e8 ff eb fe ff       	call   c0006800 <iso_seek>
c0017c01:	83 c4 10             	add    esp,0x10
c0017c04:	31 f0                	xor    eax,esi
c0017c06:	31 fa                	xor    edx,edi
c0017c08:	09 d0                	or     eax,edx
c0017c0a:	0f 95 c0             	setne  al
c0017c0d:	0f b6 c0             	movzx  eax,al
c0017c10:	5a                   	pop    edx
c0017c11:	5e                   	pop    esi
c0017c12:	5f                   	pop    edi
c0017c13:	c3                   	ret    

c0017c14 <ISO9660::tell(void*, unsigned long long*)>:
c0017c14:	53                   	push   ebx
c0017c15:	83 ec 08             	sub    esp,0x8
c0017c18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c1c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c20:	85 c0                	test   eax,eax
c0017c22:	74 1c                	je     c0017c40 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017c24:	85 db                	test   ebx,ebx
c0017c26:	74 18                	je     c0017c40 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017c28:	83 ec 0c             	sub    esp,0xc
c0017c2b:	83 e8 64             	sub    eax,0x64
c0017c2e:	50                   	push   eax
c0017c2f:	e8 aa ec fe ff       	call   c00068de <iso_tell>
c0017c34:	83 c4 10             	add    esp,0x10
c0017c37:	89 03                	mov    DWORD PTR [ebx],eax
c0017c39:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017c3c:	31 c0                	xor    eax,eax
c0017c3e:	eb 05                	jmp    c0017c45 <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017c40:	b8 04 00 00 00       	mov    eax,0x4
c0017c45:	83 c4 08             	add    esp,0x8
c0017c48:	5b                   	pop    ebx
c0017c49:	c3                   	ret    

c0017c4a <ISO9660::stat(void*, unsigned long long*)>:
c0017c4a:	53                   	push   ebx
c0017c4b:	83 ec 08             	sub    esp,0x8
c0017c4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c52:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c56:	85 c0                	test   eax,eax
c0017c58:	74 20                	je     c0017c7a <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c5a:	85 db                	test   ebx,ebx
c0017c5c:	74 1c                	je     c0017c7a <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c5e:	83 ec 0c             	sub    esp,0xc
c0017c61:	83 e8 64             	sub    eax,0x64
c0017c64:	50                   	push   eax
c0017c65:	e8 d1 ec fe ff       	call   c000693b <iso_total>
c0017c6a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017c71:	89 03                	mov    DWORD PTR [ebx],eax
c0017c73:	83 c4 10             	add    esp,0x10
c0017c76:	31 c0                	xor    eax,eax
c0017c78:	eb 05                	jmp    c0017c7f <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017c7a:	b8 04 00 00 00       	mov    eax,0x4
c0017c7f:	83 c4 08             	add    esp,0x8
c0017c82:	5b                   	pop    ebx
c0017c83:	c3                   	ret    

c0017c84 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017c84:	55                   	push   ebp
c0017c85:	57                   	push   edi
c0017c86:	56                   	push   esi
c0017c87:	53                   	push   ebx
c0017c88:	83 ec 0c             	sub    esp,0xc
c0017c8b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017c8f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017c93:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017c97:	85 ff                	test   edi,edi
c0017c99:	0f 94 c2             	sete   dl
c0017c9c:	85 f6                	test   esi,esi
c0017c9e:	0f 94 c0             	sete   al
c0017ca1:	08 c2                	or     dl,al
c0017ca3:	0f 85 b7 00 00 00    	jne    c0017d60 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xdc>
c0017ca9:	85 db                	test   ebx,ebx
c0017cab:	0f 84 af 00 00 00    	je     c0017d60 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xdc>
c0017cb1:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017cb4:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017cba:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017cc1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017cc4:	3a 05 40 40 02 c0    	cmp    al,BYTE PTR ds:0xc0024040
c0017cca:	74 38                	je     c0017d04 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x80>
c0017ccc:	83 ec 0c             	sub    esp,0xc
c0017ccf:	50                   	push   eax
c0017cd0:	e8 bd ef fe ff       	call   c0006c92 <init_percd>
c0017cd5:	83 c4 10             	add    esp,0x10
c0017cd8:	ba 0b 00 00 00       	mov    edx,0xb
c0017cdd:	40                   	inc    eax
c0017cde:	0f 84 81 00 00 00    	je     c0017d65 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe1>
c0017ce4:	80 3d 40 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024040,0x0
c0017ceb:	74 10                	je     c0017cfd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x79>
c0017ced:	83 ec 0c             	sub    esp,0xc
c0017cf0:	68 29 f0 01 c0       	push   0xc001f029
c0017cf5:	e8 3e db ff ff       	call   c0015838 <HalPanic(char const*)>
c0017cfa:	83 c4 10             	add    esp,0x10
c0017cfd:	8a 03                	mov    al,BYTE PTR [ebx]
c0017cff:	a2 40 40 02 c0       	mov    ds:0xc0024040,al
c0017d04:	83 c3 03             	add    ebx,0x3
c0017d07:	55                   	push   ebp
c0017d08:	55                   	push   ebp
c0017d09:	6a 00                	push   0x0
c0017d0b:	53                   	push   ebx
c0017d0c:	e8 f1 e7 fe ff       	call   c0006502 <iso_open>
c0017d11:	83 c4 10             	add    esp,0x10
c0017d14:	89 c5                	mov    ebp,eax
c0017d16:	83 f8 ff             	cmp    eax,0xffffffff
c0017d19:	75 0f                	jne    c0017d2a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa6>
c0017d1b:	56                   	push   esi
c0017d1c:	56                   	push   esi
c0017d1d:	6a 01                	push   0x1
c0017d1f:	53                   	push   ebx
c0017d20:	e8 dd e7 fe ff       	call   c0006502 <iso_open>
c0017d25:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017d28:	eb 2f                	jmp    c0017d59 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd5>
c0017d2a:	83 ec 0c             	sub    esp,0xc
c0017d2d:	50                   	push   eax
c0017d2e:	e8 08 ec fe ff       	call   c000693b <iso_total>
c0017d33:	5a                   	pop    edx
c0017d34:	59                   	pop    ecx
c0017d35:	50                   	push   eax
c0017d36:	68 39 f0 01 c0       	push   0xc001f039
c0017d3b:	e8 ac 2e ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0017d40:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d43:	e8 f3 eb fe ff       	call   c000693b <iso_total>
c0017d48:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017d4f:	89 06                	mov    DWORD PTR [esi],eax
c0017d51:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d54:	e8 89 e8 fe ff       	call   c00065e2 <iso_close>
c0017d59:	83 c4 10             	add    esp,0x10
c0017d5c:	31 d2                	xor    edx,edx
c0017d5e:	eb 05                	jmp    c0017d65 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe1>
c0017d60:	ba 04 00 00 00       	mov    edx,0x4
c0017d65:	83 c4 0c             	add    esp,0xc
c0017d68:	89 d0                	mov    eax,edx
c0017d6a:	5b                   	pop    ebx
c0017d6b:	5e                   	pop    esi
c0017d6c:	5f                   	pop    edi
c0017d6d:	5d                   	pop    ebp
c0017d6e:	c3                   	ret    
c0017d6f:	90                   	nop

c0017d70 <ISO9660::close(void*)>:
c0017d70:	83 ec 0c             	sub    esp,0xc
c0017d73:	b8 04 00 00 00       	mov    eax,0x4
c0017d78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d7c:	85 d2                	test   edx,edx
c0017d7e:	74 11                	je     c0017d91 <ISO9660::close(void*)+0x21>
c0017d80:	83 ec 0c             	sub    esp,0xc
c0017d83:	83 ea 64             	sub    edx,0x64
c0017d86:	52                   	push   edx
c0017d87:	e8 56 e8 fe ff       	call   c00065e2 <iso_close>
c0017d8c:	83 c4 10             	add    esp,0x10
c0017d8f:	31 c0                	xor    eax,eax
c0017d91:	83 c4 0c             	add    esp,0xc
c0017d94:	c3                   	ret    
c0017d95:	90                   	nop

c0017d96 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017d96:	55                   	push   ebp
c0017d97:	57                   	push   edi
c0017d98:	56                   	push   esi
c0017d99:	53                   	push   ebx
c0017d9a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017da0:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017da7:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017dae:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017db5:	85 c0                	test   eax,eax
c0017db7:	0f 84 96 00 00 00    	je     c0017e53 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017dbd:	85 db                	test   ebx,ebx
c0017dbf:	0f 84 8e 00 00 00    	je     c0017e53 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017dc5:	83 ec 0c             	sub    esp,0xc
c0017dc8:	83 e8 64             	sub    eax,0x64
c0017dcb:	50                   	push   eax
c0017dcc:	e8 e7 eb fe ff       	call   c00069b8 <iso_readdir>
c0017dd1:	83 c4 10             	add    esp,0x10
c0017dd4:	89 c6                	mov    esi,eax
c0017dd6:	85 c0                	test   eax,eax
c0017dd8:	75 18                	jne    c0017df2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017dda:	52                   	push   edx
c0017ddb:	68 10 01 00 00       	push   0x110
c0017de0:	6a 00                	push   0x0
c0017de2:	57                   	push   edi
c0017de3:	e8 08 87 fe ff       	call   c00004f0 <memset>
c0017de8:	83 c4 10             	add    esp,0x10
c0017deb:	b8 01 00 00 00       	mov    eax,0x1
c0017df0:	eb 66                	jmp    c0017e58 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017df2:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017df8:	8d 68 08             	lea    ebp,[eax+0x8]
c0017dfb:	83 ec 0c             	sub    esp,0xc
c0017dfe:	55                   	push   ebp
c0017dff:	e8 5c 87 fe ff       	call   c0000560 <strlen>
c0017e04:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017e0c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017e10:	83 c4 10             	add    esp,0x10
c0017e13:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017e17:	75 0a                	jne    c0017e23 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017e19:	b8 02 00 00 00       	mov    eax,0x2
c0017e1e:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017e21:	74 05                	je     c0017e28 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017e23:	b8 01 00 00 00       	mov    eax,0x1
c0017e28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e2c:	50                   	push   eax
c0017e2d:	50                   	push   eax
c0017e2e:	55                   	push   ebp
c0017e2f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017e33:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017e37:	50                   	push   eax
c0017e38:	e8 e3 87 fe ff       	call   c0000620 <strcpy>
c0017e3d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017e44:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e46:	31 c0                	xor    eax,eax
c0017e48:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017e4e:	83 c4 10             	add    esp,0x10
c0017e51:	eb 05                	jmp    c0017e58 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017e53:	b8 04 00 00 00       	mov    eax,0x4
c0017e58:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017e5e:	5b                   	pop    ebx
c0017e5f:	5e                   	pop    esi
c0017e60:	5f                   	pop    edi
c0017e61:	5d                   	pop    ebp
c0017e62:	c3                   	ret    

c0017e63 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017e63:	57                   	push   edi
c0017e64:	56                   	push   esi
c0017e65:	53                   	push   ebx
c0017e66:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e6a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017e6e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017e72:	39 35 44 40 02 c0    	cmp    DWORD PTR ds:0xc0024044,esi
c0017e78:	75 08                	jne    c0017e82 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017e7a:	38 1d 94 f9 01 c0    	cmp    BYTE PTR ds:0xc001f994,bl
c0017e80:	74 59                	je     c0017edb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017e82:	83 ec 0c             	sub    esp,0xc
c0017e85:	31 d2                	xor    edx,edx
c0017e87:	68 60 40 02 c0       	push   0xc0024060
c0017e8c:	0f be c3             	movsx  eax,bl
c0017e8f:	6a 01                	push   0x1
c0017e91:	52                   	push   edx
c0017e92:	56                   	push   esi
c0017e93:	ff 34 85 1c 2e 02 c0 	push   DWORD PTR [eax*4-0x3ffdd1e4]
c0017e9a:	e8 35 54 ff ff       	call   c000d2d4 <LogicalDisk::read(unsigned long long, int, void*)>
c0017e9f:	83 c4 20             	add    esp,0x20
c0017ea2:	85 c0                	test   eax,eax
c0017ea4:	75 0e                	jne    c0017eb4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017ea6:	89 35 44 40 02 c0    	mov    DWORD PTR ds:0xc0024044,esi
c0017eac:	88 1d 94 f9 01 c0    	mov    BYTE PTR ds:0xc001f994,bl
c0017eb2:	eb 27                	jmp    c0017edb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017eb4:	83 ec 0c             	sub    esp,0xc
c0017eb7:	68 4b f0 01 c0       	push   0xc001f04b
c0017ebc:	e8 2b 2d ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0017ec1:	83 c4 0c             	add    esp,0xc
c0017ec4:	68 00 08 00 00       	push   0x800
c0017ec9:	6a 00                	push   0x0
c0017ecb:	57                   	push   edi
c0017ecc:	e8 1f 86 fe ff       	call   c00004f0 <memset>
c0017ed1:	83 c4 10             	add    esp,0x10
c0017ed4:	b8 01 00 00 00       	mov    eax,0x1
c0017ed9:	eb 0e                	jmp    c0017ee9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x86>
c0017edb:	be 60 40 02 c0       	mov    esi,0xc0024060
c0017ee0:	b9 00 08 00 00       	mov    ecx,0x800
c0017ee5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017ee7:	31 c0                	xor    eax,eax
c0017ee9:	5b                   	pop    ebx
c0017eea:	5e                   	pop    esi
c0017eeb:	5f                   	pop    edi
c0017eec:	c3                   	ret    
c0017eed:	90                   	nop

c0017eee <ISO9660::tryMount(LogicalDisk*, int)>:
c0017eee:	53                   	push   ebx
c0017eef:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017ef5:	c7 05 44 40 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0024044,0xdeadbeef
c0017eff:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017f06:	8d 58 41             	lea    ebx,[eax+0x41]
c0017f09:	0f be db             	movsx  ebx,bl
c0017f0c:	53                   	push   ebx
c0017f0d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017f11:	50                   	push   eax
c0017f12:	6a 10                	push   0x10
c0017f14:	e8 4a ff ff ff       	call   c0017e63 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017f19:	83 c4 10             	add    esp,0x10
c0017f1c:	31 d2                	xor    edx,edx
c0017f1e:	85 c0                	test   eax,eax
c0017f20:	75 33                	jne    c0017f55 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f22:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017f27:	75 2c                	jne    c0017f55 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f29:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017f2e:	75 25                	jne    c0017f55 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f30:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017f35:	75 1e                	jne    c0017f55 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f37:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017f3c:	75 17                	jne    c0017f55 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f3e:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017f43:	75 10                	jne    c0017f55 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f45:	83 ec 0c             	sub    esp,0xc
c0017f48:	53                   	push   ebx
c0017f49:	e8 44 ed fe ff       	call   c0006c92 <init_percd>
c0017f4e:	83 c4 10             	add    esp,0x10
c0017f51:	40                   	inc    eax
c0017f52:	0f 95 c2             	setne  dl
c0017f55:	88 d0                	mov    al,dl
c0017f57:	81 c4 08 08 00 00    	add    esp,0x808
c0017f5d:	5b                   	pop    ebx
c0017f5e:	c3                   	ret    
c0017f5f:	90                   	nop

c0017f60 <ISO9660::ISO9660()>:
c0017f60:	83 ec 0c             	sub    esp,0xc
c0017f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f67:	83 ec 0c             	sub    esp,0xc
c0017f6a:	50                   	push   eax
c0017f6b:	e8 9e 2f ff ff       	call   c000af0e <Filesystem::Filesystem()>
c0017f70:	83 c4 10             	add    esp,0x10
c0017f73:	ba 70 f0 01 c0       	mov    edx,0xc001f070
c0017f78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f7c:	89 10                	mov    DWORD PTR [eax],edx
c0017f7e:	e8 1f ee fe ff       	call   c0006da2 <fs_iso9660_init>
c0017f83:	90                   	nop
c0017f84:	83 c4 0c             	add    esp,0xc
c0017f87:	c3                   	ret    

c0017f88 <SoundCard::beginPlayback()>:
c0017f88:	c7 44 24 04 d0 f0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f0d0
c0017f90:	e9 56 87 ff ff       	jmp    c00106eb <Krnl::panic(char const*)>
c0017f95:	90                   	nop

c0017f96 <SoundCard::stopPlayback()>:
c0017f96:	c7 44 24 04 d0 f0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f0d0
c0017f9e:	e9 48 87 ff ff       	jmp    c00106eb <Krnl::panic(char const*)>
c0017fa3:	90                   	nop

c0017fa4 <SoundCard::SoundCard(char const*)>:
c0017fa4:	83 ec 1c             	sub    esp,0x1c
c0017fa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fab:	83 ec 08             	sub    esp,0x8
c0017fae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017fb2:	50                   	push   eax
c0017fb3:	e8 0c 42 ff ff       	call   c000c1c4 <Device::Device(char const*)>
c0017fb8:	83 c4 10             	add    esp,0x10
c0017fbb:	ba 1c f1 01 c0       	mov    edx,0xc001f11c
c0017fc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fc4:	89 10                	mov    DWORD PTR [eax],edx
c0017fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fca:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017fd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fd5:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017fdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fe3:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017fed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ff1:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017ffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fff:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0018009:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018011:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0018016:	7f 19                	jg     c0018031 <SoundCard::SoundCard(char const*)+0x8d>
c0018018:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001801c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018020:	83 c2 54             	add    edx,0x54
c0018023:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001802b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001802f:	eb e0                	jmp    c0018011 <SoundCard::SoundCard(char const*)+0x6d>
c0018031:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018035:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001803c:	90                   	nop
c001803d:	83 c4 1c             	add    esp,0x1c
c0018040:	c3                   	ret    
c0018041:	90                   	nop

c0018042 <SoundCard::~SoundCard()>:
c0018042:	83 ec 0c             	sub    esp,0xc
c0018045:	ba 1c f1 01 c0       	mov    edx,0xc001f11c
c001804a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001804e:	89 10                	mov    DWORD PTR [eax],edx
c0018050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018054:	83 ec 0c             	sub    esp,0xc
c0018057:	50                   	push   eax
c0018058:	e8 d1 3e ff ff       	call   c000bf2e <Device::~Device()>
c001805d:	83 c4 10             	add    esp,0x10
c0018060:	90                   	nop
c0018061:	83 c4 0c             	add    esp,0xc
c0018064:	c3                   	ret    
c0018065:	90                   	nop

c0018066 <SoundCard::~SoundCard()>:
c0018066:	83 ec 0c             	sub    esp,0xc
c0018069:	83 ec 0c             	sub    esp,0xc
c001806c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018070:	e8 cd ff ff ff       	call   c0018042 <SoundCard::~SoundCard()>
c0018075:	83 c4 10             	add    esp,0x10
c0018078:	83 ec 08             	sub    esp,0x8
c001807b:	68 e8 01 00 00       	push   0x1e8
c0018080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018084:	e8 6d 2a ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c0018089:	83 c4 10             	add    esp,0x10
c001808c:	83 c4 0c             	add    esp,0xc
c001808f:	c3                   	ret    

c0018090 <SoundCard::configureRates(int, int, int)>:
c0018090:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018094:	31 c0                	xor    eax,eax
c0018096:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001809d:	75 20                	jne    c00180bf <SoundCard::configureRates(int, int, int)+0x2f>
c001809f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180a3:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c00180a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180ad:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c00180b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180b7:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c00180bd:	b0 01                	mov    al,0x1
c00180bf:	c3                   	ret    

c00180c0 <SoundCard::getSamples16(int, short*)>:
c00180c0:	55                   	push   ebp
c00180c1:	57                   	push   edi
c00180c2:	31 ff                	xor    edi,edi
c00180c4:	56                   	push   esi
c00180c5:	53                   	push   ebx
c00180c6:	31 db                	xor    ebx,ebx
c00180c8:	83 ec 10             	sub    esp,0x10
c00180cb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00180cf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00180d3:	8d 04 36             	lea    eax,[esi+esi*1]
c00180d6:	50                   	push   eax
c00180d7:	6a 00                	push   0x0
c00180d9:	55                   	push   ebp
c00180da:	e8 11 84 fe ff       	call   c00004f0 <memset>
c00180df:	83 c4 10             	add    esp,0x10
c00180e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180e6:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c00180ed:	85 c0                	test   eax,eax
c00180ef:	74 1b                	je     c001810c <SoundCard::getSamples16(int, short*)+0x4c>
c00180f1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00180f5:	75 15                	jne    c001810c <SoundCard::getSamples16(int, short*)+0x4c>
c00180f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00180fb:	55                   	push   ebp
c00180fc:	56                   	push   esi
c00180fd:	50                   	push   eax
c00180fe:	e8 ed 02 00 00       	call   c00183f0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0018103:	83 c4 10             	add    esp,0x10
c0018106:	39 c7                	cmp    edi,eax
c0018108:	7d 02                	jge    c001810c <SoundCard::getSamples16(int, short*)+0x4c>
c001810a:	89 c7                	mov    edi,eax
c001810c:	43                   	inc    ebx
c001810d:	83 fb 20             	cmp    ebx,0x20
c0018110:	75 d0                	jne    c00180e2 <SoundCard::getSamples16(int, short*)+0x22>
c0018112:	83 c4 0c             	add    esp,0xc
c0018115:	89 f8                	mov    eax,edi
c0018117:	5b                   	pop    ebx
c0018118:	5e                   	pop    esi
c0018119:	5f                   	pop    edi
c001811a:	5d                   	pop    ebp
c001811b:	c3                   	ret    

c001811c <SoundCard::getSamples32(int, int*)>:
c001811c:	55                   	push   ebp
c001811d:	57                   	push   edi
c001811e:	31 ff                	xor    edi,edi
c0018120:	56                   	push   esi
c0018121:	31 f6                	xor    esi,esi
c0018123:	53                   	push   ebx
c0018124:	83 ec 10             	sub    esp,0x10
c0018127:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001812b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001812f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0018133:	c1 e0 02             	shl    eax,0x2
c0018136:	50                   	push   eax
c0018137:	6a 00                	push   0x0
c0018139:	55                   	push   ebp
c001813a:	e8 b1 83 fe ff       	call   c00004f0 <memset>
c001813f:	83 c4 10             	add    esp,0x10
c0018142:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0018149:	85 c0                	test   eax,eax
c001814b:	74 1b                	je     c0018168 <SoundCard::getSamples32(int, int*)+0x4c>
c001814d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018151:	75 15                	jne    c0018168 <SoundCard::getSamples32(int, int*)+0x4c>
c0018153:	53                   	push   ebx
c0018154:	55                   	push   ebp
c0018155:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018159:	50                   	push   eax
c001815a:	e8 55 03 00 00       	call   c00184b4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001815f:	83 c4 10             	add    esp,0x10
c0018162:	39 c6                	cmp    esi,eax
c0018164:	7d 02                	jge    c0018168 <SoundCard::getSamples32(int, int*)+0x4c>
c0018166:	89 c6                	mov    esi,eax
c0018168:	47                   	inc    edi
c0018169:	83 ff 20             	cmp    edi,0x20
c001816c:	75 d4                	jne    c0018142 <SoundCard::getSamples32(int, int*)+0x26>
c001816e:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0018174:	85 f6                	test   esi,esi
c0018176:	75 0f                	jne    c0018187 <SoundCard::getSamples32(int, int*)+0x6b>
c0018178:	84 c0                	test   al,al
c001817a:	74 1b                	je     c0018197 <SoundCard::getSamples32(int, int*)+0x7b>
c001817c:	83 ec 0c             	sub    esp,0xc
c001817f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018181:	53                   	push   ebx
c0018182:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0018185:	eb 0d                	jmp    c0018194 <SoundCard::getSamples32(int, int*)+0x78>
c0018187:	84 c0                	test   al,al
c0018189:	75 0c                	jne    c0018197 <SoundCard::getSamples32(int, int*)+0x7b>
c001818b:	83 ec 0c             	sub    esp,0xc
c001818e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018190:	53                   	push   ebx
c0018191:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0018194:	83 c4 10             	add    esp,0x10
c0018197:	83 c4 0c             	add    esp,0xc
c001819a:	89 f0                	mov    eax,esi
c001819c:	5b                   	pop    ebx
c001819d:	5e                   	pop    esi
c001819e:	5f                   	pop    edi
c001819f:	5d                   	pop    ebp
c00181a0:	c3                   	ret    
c00181a1:	90                   	nop

c00181a2 <SoundCard::addChannel(SoundPort*)>:
c00181a2:	83 ec 0c             	sub    esp,0xc
c00181a5:	31 c0                	xor    eax,eax
c00181a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00181ab:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00181b3:	74 1b                	je     c00181d0 <SoundCard::addChannel(SoundPort*)+0x2e>
c00181b5:	40                   	inc    eax
c00181b6:	83 f8 20             	cmp    eax,0x20
c00181b9:	75 f0                	jne    c00181ab <SoundCard::addChannel(SoundPort*)+0x9>
c00181bb:	83 ec 0c             	sub    esp,0xc
c00181be:	68 f5 f0 01 c0       	push   0xc001f0f5
c00181c3:	e8 23 85 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c00181c8:	83 c4 10             	add    esp,0x10
c00181cb:	83 c8 ff             	or     eax,0xffffffff
c00181ce:	eb 0b                	jmp    c00181db <SoundCard::addChannel(SoundPort*)+0x39>
c00181d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00181d4:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c00181db:	83 c4 0c             	add    esp,0xc
c00181de:	c3                   	ret    
c00181df:	90                   	nop

c00181e0 <SoundCard::removeChannel(int)>:
c00181e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00181e8:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c00181f3:	c3                   	ret    

c00181f4 <SoundPort::SoundPort(int, int, int, int)>:
c00181f4:	83 ec 0c             	sub    esp,0xc
c00181f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181fb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018206:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001820a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001820e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018212:	89 10                	mov    DWORD PTR [eax],edx
c0018214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018218:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001821c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001821f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018223:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018227:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001822a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001822f:	75 13                	jne    c0018244 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0018231:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018235:	8b 00                	mov    eax,DWORD PTR [eax]
c0018237:	05 a0 0f 00 00       	add    eax,0xfa0
c001823c:	01 c0                	add    eax,eax
c001823e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018242:	66 90                	xchg   ax,ax
c0018244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018248:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001824c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001824f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018253:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001825a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001825e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018261:	c1 e0 02             	shl    eax,0x2
c0018264:	83 ec 0c             	sub    esp,0xc
c0018267:	50                   	push   eax
c0018268:	e8 f0 fb fe ff       	call   c0007e5d <malloc>
c001826d:	83 c4 10             	add    esp,0x10
c0018270:	89 c2                	mov    edx,eax
c0018272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018276:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018279:	90                   	nop
c001827a:	83 c4 0c             	add    esp,0xc
c001827d:	c3                   	ret    
c001827e:	66 90                	xchg   ax,ax

c0018280 <SoundPort::~SoundPort()>:
c0018280:	83 ec 0c             	sub    esp,0xc
c0018283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018287:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001828a:	85 c0                	test   eax,eax
c001828c:	74 1e                	je     c00182ac <SoundPort::~SoundPort()+0x2c>
c001828e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018292:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018295:	83 ec 0c             	sub    esp,0xc
c0018298:	50                   	push   eax
c0018299:	e8 cf fb fe ff       	call   c0007e6d <free>
c001829e:	83 c4 10             	add    esp,0x10
c00182a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182a5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00182ac:	90                   	nop
c00182ad:	83 c4 0c             	add    esp,0xc
c00182b0:	c3                   	ret    
c00182b1:	90                   	nop
c00182b2:	66 90                	xchg   ax,ax

c00182b4 <SoundPort::unpause()>:
c00182b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182b8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c00182bc:	c3                   	ret    
c00182bd:	90                   	nop
c00182be:	66 90                	xchg   ax,ax

c00182c0 <SoundPort::pause()>:
c00182c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182c4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00182c8:	c3                   	ret    
c00182c9:	90                   	nop
c00182ca:	66 90                	xchg   ax,ax

c00182cc <SoundPort::getBufferUsed()>:
c00182cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182d0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00182d3:	c3                   	ret    

c00182d4 <SoundPort::getBufferSize()>:
c00182d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182d8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00182db:	c3                   	ret    

c00182dc <SoundPort::buffer16(short*, int)>:
c00182dc:	55                   	push   ebp
c00182dd:	57                   	push   edi
c00182de:	56                   	push   esi
c00182df:	53                   	push   ebx
c00182e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00182e4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00182e8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00182eb:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c00182ee:	74 68                	je     c0018358 <SoundPort::buffer16(short*, int)+0x7c>
c00182f0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00182f4:	85 c9                	test   ecx,ecx
c00182f6:	7e 60                	jle    c0018358 <SoundPort::buffer16(short*, int)+0x7c>
c00182f8:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c00182fc:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00182ff:	c1 e1 0f             	shl    ecx,0xf
c0018302:	8d 70 01             	lea    esi,[eax+0x1]
c0018305:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018308:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001830b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001830e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018311:	74 4d                	je     c0018360 <SoundPort::buffer16(short*, int)+0x84>
c0018313:	31 f6                	xor    esi,esi
c0018315:	eb 21                	jmp    c0018338 <SoundPort::buffer16(short*, int)+0x5c>
c0018317:	90                   	nop
c0018318:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001831d:	8d 79 01             	lea    edi,[ecx+0x1]
c0018320:	c1 e3 0f             	shl    ebx,0xf
c0018323:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0018326:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0018329:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001832c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001832f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018332:	74 1c                	je     c0018350 <SoundPort::buffer16(short*, int)+0x74>
c0018334:	89 c6                	mov    esi,eax
c0018336:	66 90                	xchg   ax,ax
c0018338:	8d 46 01             	lea    eax,[esi+0x1]
c001833b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001833f:	75 d7                	jne    c0018318 <SoundPort::buffer16(short*, int)+0x3c>
c0018341:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018345:	8d 76 00             	lea    esi,[esi+0x0]
c0018348:	5b                   	pop    ebx
c0018349:	5e                   	pop    esi
c001834a:	5f                   	pop    edi
c001834b:	5d                   	pop    ebp
c001834c:	c3                   	ret    
c001834d:	8d 76 00             	lea    esi,[esi+0x0]
c0018350:	5b                   	pop    ebx
c0018351:	8d 46 02             	lea    eax,[esi+0x2]
c0018354:	5e                   	pop    esi
c0018355:	5f                   	pop    edi
c0018356:	5d                   	pop    ebp
c0018357:	c3                   	ret    
c0018358:	5b                   	pop    ebx
c0018359:	31 c0                	xor    eax,eax
c001835b:	5e                   	pop    esi
c001835c:	5f                   	pop    edi
c001835d:	5d                   	pop    ebp
c001835e:	c3                   	ret    
c001835f:	90                   	nop
c0018360:	b8 01 00 00 00       	mov    eax,0x1
c0018365:	eb e1                	jmp    c0018348 <SoundPort::buffer16(short*, int)+0x6c>
c0018367:	90                   	nop

c0018368 <SoundPort::buffer32(int*, int)>:
c0018368:	55                   	push   ebp
c0018369:	57                   	push   edi
c001836a:	56                   	push   esi
c001836b:	53                   	push   ebx
c001836c:	51                   	push   ecx
c001836d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018375:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018378:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001837c:	89 04 24             	mov    DWORD PTR [esp],eax
c001837f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018382:	74 5c                	je     c00183e0 <SoundPort::buffer32(int*, int)+0x78>
c0018384:	85 c0                	test   eax,eax
c0018386:	7e 58                	jle    c00183e0 <SoundPort::buffer32(int*, int)+0x78>
c0018388:	8d 71 01             	lea    esi,[ecx+0x1]
c001838b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001838e:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018391:	8b 37                	mov    esi,DWORD PTR [edi]
c0018393:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0018396:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018399:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001839c:	74 4a                	je     c00183e8 <SoundPort::buffer32(int*, int)+0x80>
c001839e:	31 f6                	xor    esi,esi
c00183a0:	eb 1e                	jmp    c00183c0 <SoundPort::buffer32(int*, int)+0x58>
c00183a2:	66 90                	xchg   ax,ax
c00183a4:	8d 69 01             	lea    ebp,[ecx+0x1]
c00183a7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c00183aa:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00183ad:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00183b0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c00183b4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00183b7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00183ba:	74 18                	je     c00183d4 <SoundPort::buffer32(int*, int)+0x6c>
c00183bc:	89 de                	mov    esi,ebx
c00183be:	66 90                	xchg   ax,ax
c00183c0:	8d 5e 01             	lea    ebx,[esi+0x1]
c00183c3:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c00183c6:	75 dc                	jne    c00183a4 <SoundPort::buffer32(int*, int)+0x3c>
c00183c8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00183cb:	90                   	nop
c00183cc:	5a                   	pop    edx
c00183cd:	5b                   	pop    ebx
c00183ce:	5e                   	pop    esi
c00183cf:	5f                   	pop    edi
c00183d0:	5d                   	pop    ebp
c00183d1:	c3                   	ret    
c00183d2:	66 90                	xchg   ax,ax
c00183d4:	5a                   	pop    edx
c00183d5:	8d 46 02             	lea    eax,[esi+0x2]
c00183d8:	5b                   	pop    ebx
c00183d9:	5e                   	pop    esi
c00183da:	5f                   	pop    edi
c00183db:	5d                   	pop    ebp
c00183dc:	c3                   	ret    
c00183dd:	8d 76 00             	lea    esi,[esi+0x0]
c00183e0:	5a                   	pop    edx
c00183e1:	31 c0                	xor    eax,eax
c00183e3:	5b                   	pop    ebx
c00183e4:	5e                   	pop    esi
c00183e5:	5f                   	pop    edi
c00183e6:	5d                   	pop    ebp
c00183e7:	c3                   	ret    
c00183e8:	b8 01 00 00 00       	mov    eax,0x1
c00183ed:	eb dd                	jmp    c00183cc <SoundPort::buffer32(int*, int)+0x64>
c00183ef:	90                   	nop

c00183f0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c00183f0:	57                   	push   edi
c00183f1:	56                   	push   esi
c00183f2:	53                   	push   ebx
c00183f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00183f7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00183fb:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0018401:	39 03                	cmp    DWORD PTR [ebx],eax
c0018403:	74 13                	je     c0018418 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0018405:	83 ec 0c             	sub    esp,0xc
c0018408:	68 48 f1 01 c0       	push   0xc001f148
c001840d:	e8 d9 82 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c0018412:	83 c4 10             	add    esp,0x10
c0018415:	8d 76 00             	lea    esi,[esi+0x0]
c0018418:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001841e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0018421:	74 11                	je     c0018434 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0018423:	83 ec 0c             	sub    esp,0xc
c0018426:	68 87 f1 01 c0       	push   0xc001f187
c001842b:	e8 bb 82 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c0018430:	83 c4 10             	add    esp,0x10
c0018433:	90                   	nop
c0018434:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001843a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001843d:	74 11                	je     c0018450 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001843f:	83 ec 0c             	sub    esp,0xc
c0018442:	68 87 f1 01 c0       	push   0xc001f187
c0018447:	e8 9f 82 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001844c:	83 c4 10             	add    esp,0x10
c001844f:	90                   	nop
c0018450:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0018453:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0018457:	7e 07                	jle    c0018460 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0018459:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001845d:	8d 76 00             	lea    esi,[esi+0x0]
c0018460:	85 f6                	test   esi,esi
c0018462:	7e 2c                	jle    c0018490 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0018464:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018468:	8d 3c 36             	lea    edi,[esi+esi*1]
c001846b:	31 c9                	xor    ecx,ecx
c001846d:	01 d7                	add    edi,edx
c001846f:	90                   	nop
c0018470:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0018473:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0018476:	85 c0                	test   eax,eax
c0018478:	79 06                	jns    c0018480 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001847a:	05 ff 7f 00 00       	add    eax,0x7fff
c001847f:	90                   	nop
c0018480:	c1 f8 0f             	sar    eax,0xf
c0018483:	83 c1 04             	add    ecx,0x4
c0018486:	66 01 02             	add    WORD PTR [edx],ax
c0018489:	83 c2 02             	add    edx,0x2
c001848c:	39 d7                	cmp    edi,edx
c001848e:	75 e0                	jne    c0018470 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0018490:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0018493:	50                   	push   eax
c0018494:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018497:	29 f0                	sub    eax,esi
c0018499:	c1 e0 02             	shl    eax,0x2
c001849c:	50                   	push   eax
c001849d:	8d 04 b2             	lea    eax,[edx+esi*4]
c00184a0:	50                   	push   eax
c00184a1:	52                   	push   edx
c00184a2:	e8 59 7f fe ff       	call   c0000400 <memmove>
c00184a7:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c00184aa:	83 c4 10             	add    esp,0x10
c00184ad:	89 f0                	mov    eax,esi
c00184af:	5b                   	pop    ebx
c00184b0:	5e                   	pop    esi
c00184b1:	5f                   	pop    edi
c00184b2:	c3                   	ret    
c00184b3:	90                   	nop

c00184b4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c00184b4:	57                   	push   edi
c00184b5:	56                   	push   esi
c00184b6:	53                   	push   ebx
c00184b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00184bb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00184bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00184c3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c00184c9:	39 06                	cmp    DWORD PTR [esi],eax
c00184cb:	74 13                	je     c00184e0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c00184cd:	83 ec 0c             	sub    esp,0xc
c00184d0:	68 68 f1 01 c0       	push   0xc001f168
c00184d5:	e8 11 82 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c00184da:	83 c4 10             	add    esp,0x10
c00184dd:	8d 76 00             	lea    esi,[esi+0x0]
c00184e0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c00184e6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c00184e9:	74 11                	je     c00184fc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c00184eb:	83 ec 0c             	sub    esp,0xc
c00184ee:	68 a3 f1 01 c0       	push   0xc001f1a3
c00184f3:	e8 f3 81 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c00184f8:	83 c4 10             	add    esp,0x10
c00184fb:	90                   	nop
c00184fc:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0018502:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0018505:	74 11                	je     c0018518 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0018507:	83 ec 0c             	sub    esp,0xc
c001850a:	68 a3 f1 01 c0       	push   0xc001f1a3
c001850f:	e8 d7 81 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c0018514:	83 c4 10             	add    esp,0x10
c0018517:	90                   	nop
c0018518:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001851b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001851f:	7e 07                	jle    c0018528 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0018521:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018525:	8d 76 00             	lea    esi,[esi+0x0]
c0018528:	85 ff                	test   edi,edi
c001852a:	7e 1c                	jle    c0018548 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001852c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0018533:	31 c0                	xor    eax,eax
c0018535:	8d 76 00             	lea    esi,[esi+0x0]
c0018538:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001853b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001853e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0018541:	83 c0 04             	add    eax,0x4
c0018544:	39 c1                	cmp    ecx,eax
c0018546:	75 f0                	jne    c0018538 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0018548:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001854b:	50                   	push   eax
c001854c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001854f:	29 f8                	sub    eax,edi
c0018551:	c1 e0 02             	shl    eax,0x2
c0018554:	50                   	push   eax
c0018555:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018558:	50                   	push   eax
c0018559:	52                   	push   edx
c001855a:	e8 a1 7e fe ff       	call   c0000400 <memmove>
c001855f:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0018562:	83 c4 10             	add    esp,0x10
c0018565:	89 f8                	mov    eax,edi
c0018567:	5b                   	pop    ebx
c0018568:	5e                   	pop    esi
c0018569:	5f                   	pop    edi
c001856a:	c3                   	ret    
c001856b:	90                   	nop

c001856c <PCI::open(int, int, void*)>:
c001856c:	83 ec 18             	sub    esp,0x18
c001856f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018573:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018577:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001857d:	8b 10                	mov    edx,DWORD PTR [eax]
c001857f:	50                   	push   eax
c0018580:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0018583:	31 c0                	xor    eax,eax
c0018585:	83 c4 1c             	add    esp,0x1c
c0018588:	c3                   	ret    
c0018589:	90                   	nop

c001858a <PCI::close(int, int, void*)>:
c001858a:	31 c0                	xor    eax,eax
c001858c:	c3                   	ret    
c001858d:	90                   	nop

c001858e <PCI::PCI()>:
c001858e:	83 ec 0c             	sub    esp,0xc
c0018591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018595:	83 ec 08             	sub    esp,0x8
c0018598:	68 bf f1 01 c0       	push   0xc001f1bf
c001859d:	50                   	push   eax
c001859e:	e8 dd 33 ff ff       	call   c000b980 <Bus::Bus(char const*)>
c00185a3:	83 c4 10             	add    esp,0x10
c00185a6:	ba 68 f2 01 c0       	mov    edx,0xc001f268
c00185ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185af:	89 10                	mov    DWORD PTR [eax],edx
c00185b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185b5:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00185bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185c3:	a3 60 48 02 c0       	mov    ds:0xc0024860,eax
c00185c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185cc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00185d2:	31 d2                	xor    edx,edx
c00185d4:	88 c2                	mov    dl,al
c00185d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185da:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00185e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185e5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00185eb:	31 d2                	xor    edx,edx
c00185ed:	88 c2                	mov    dl,al
c00185ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185f3:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00185f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185fc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018602:	8d 50 01             	lea    edx,[eax+0x1]
c0018605:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018609:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001860f:	31 d2                	xor    edx,edx
c0018611:	88 c2                	mov    dl,al
c0018613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018617:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001861b:	83 c9 c0             	or     ecx,0xffffffc0
c001861e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0018622:	90                   	nop
c0018623:	83 c4 0c             	add    esp,0xc
c0018626:	c3                   	ret    
c0018627:	90                   	nop

c0018628 <PCI::readBAR8(unsigned int, int)>:
c0018628:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001862c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018630:	f6 c2 01             	test   dl,0x1
c0018633:	74 07                	je     c001863c <PCI::readBAR8(unsigned int, int)+0x14>
c0018635:	83 e2 fc             	and    edx,0xfffffffc
c0018638:	01 c2                	add    edx,eax
c001863a:	ec                   	in     al,dx
c001863b:	c3                   	ret    
c001863c:	83 e2 f0             	and    edx,0xfffffff0
c001863f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0018642:	c3                   	ret    
c0018643:	90                   	nop

c0018644 <PCI::readBAR16(unsigned int, int)>:
c0018644:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001864c:	f6 c2 01             	test   dl,0x1
c001864f:	74 08                	je     c0018659 <PCI::readBAR16(unsigned int, int)+0x15>
c0018651:	83 e2 fc             	and    edx,0xfffffffc
c0018654:	01 c2                	add    edx,eax
c0018656:	66 ed                	in     ax,dx
c0018658:	c3                   	ret    
c0018659:	83 e2 f0             	and    edx,0xfffffff0
c001865c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0018660:	c3                   	ret    
c0018661:	90                   	nop

c0018662 <PCI::readBAR32(unsigned int, int)>:
c0018662:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018666:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001866a:	f6 c2 01             	test   dl,0x1
c001866d:	74 07                	je     c0018676 <PCI::readBAR32(unsigned int, int)+0x14>
c001866f:	83 e2 fc             	and    edx,0xfffffffc
c0018672:	01 c2                	add    edx,eax
c0018674:	ed                   	in     eax,dx
c0018675:	c3                   	ret    
c0018676:	83 e2 f0             	and    edx,0xfffffff0
c0018679:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001867c:	c3                   	ret    
c001867d:	90                   	nop

c001867e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001867e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018682:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018686:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001868a:	f6 c2 01             	test   dl,0x1
c001868d:	74 07                	je     c0018696 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001868f:	83 e2 fc             	and    edx,0xfffffffc
c0018692:	01 ca                	add    edx,ecx
c0018694:	ee                   	out    dx,al
c0018695:	c3                   	ret    
c0018696:	83 e2 f0             	and    edx,0xfffffff0
c0018699:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001869c:	c3                   	ret    
c001869d:	90                   	nop

c001869e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001869e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00186a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186a6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186aa:	f6 c2 01             	test   dl,0x1
c00186ad:	74 08                	je     c00186b7 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00186af:	83 e2 fc             	and    edx,0xfffffffc
c00186b2:	01 ca                	add    edx,ecx
c00186b4:	66 ef                	out    dx,ax
c00186b6:	c3                   	ret    
c00186b7:	83 e2 f0             	and    edx,0xfffffff0
c00186ba:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00186be:	c3                   	ret    
c00186bf:	90                   	nop

c00186c0 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00186c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00186c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186cc:	f6 c2 01             	test   dl,0x1
c00186cf:	74 07                	je     c00186d8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00186d1:	83 e2 fc             	and    edx,0xfffffffc
c00186d4:	01 ca                	add    edx,ecx
c00186d6:	ef                   	out    dx,eax
c00186d7:	c3                   	ret    
c00186d8:	83 e2 f0             	and    edx,0xfffffff0
c00186db:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00186de:	c3                   	ret    
c00186df:	90                   	nop

c00186e0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00186e0:	55                   	push   ebp
c00186e1:	57                   	push   edi
c00186e2:	56                   	push   esi
c00186e3:	53                   	push   ebx
c00186e4:	83 ec 0c             	sub    esp,0xc
c00186e7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00186eb:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00186ef:	89 f0                	mov    eax,esi
c00186f1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00186f5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00186f9:	3c 07                	cmp    al,0x7
c00186fb:	76 10                	jbe    c001870d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00186fd:	83 ec 0c             	sub    esp,0xc
c0018700:	68 c7 f1 01 c0       	push   0xc001f1c7
c0018705:	e8 e1 7f ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001870a:	83 c4 10             	add    esp,0x10
c001870d:	80 fb 0f             	cmp    bl,0xf
c0018710:	76 10                	jbe    c0018722 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0018712:	83 ec 0c             	sub    esp,0xc
c0018715:	68 f7 f1 01 c0       	push   0xc001f1f7
c001871a:	e8 cc 7f ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001871f:	83 c4 10             	add    esp,0x10
c0018722:	8d 04 36             	lea    eax,[esi+esi*1]
c0018725:	ba f8 0c 00 00       	mov    edx,0xcf8
c001872a:	83 c8 f0             	or     eax,0xfffffff0
c001872d:	ee                   	out    dx,al
c001872e:	ba fa 0c 00 00       	mov    edx,0xcfa
c0018733:	89 e8                	mov    eax,ebp
c0018735:	ee                   	out    dx,al
c0018736:	83 c4 0c             	add    esp,0xc
c0018739:	89 d8                	mov    eax,ebx
c001873b:	66 81 e7 fc 00       	and    di,0xfc
c0018740:	5b                   	pop    ebx
c0018741:	c1 e0 08             	shl    eax,0x8
c0018744:	5e                   	pop    esi
c0018745:	09 f8                	or     eax,edi
c0018747:	5f                   	pop    edi
c0018748:	66 0d 00 c0          	or     ax,0xc000
c001874c:	5d                   	pop    ebp
c001874d:	c3                   	ret    

c001874e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001874e:	57                   	push   edi
c001874f:	56                   	push   esi
c0018750:	53                   	push   ebx
c0018751:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018755:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018759:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001875f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018763:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018767:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001876b:	83 ff 01             	cmp    edi,0x1
c001876e:	75 3e                	jne    c00187ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018770:	89 de                	mov    esi,ebx
c0018772:	0f b6 c0             	movzx  eax,al
c0018775:	81 e6 fc 00 00 00    	and    esi,0xfc
c001877b:	c1 e0 10             	shl    eax,0x10
c001877e:	0f b6 c9             	movzx  ecx,cl
c0018781:	09 f0                	or     eax,esi
c0018783:	c1 e1 08             	shl    ecx,0x8
c0018786:	0f b6 d2             	movzx  edx,dl
c0018789:	09 c8                	or     eax,ecx
c001878b:	c1 e2 0b             	shl    edx,0xb
c001878e:	09 d0                	or     eax,edx
c0018790:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018795:	0d 00 00 00 80       	or     eax,0x80000000
c001879a:	ef                   	out    dx,eax
c001879b:	ba fc 0c 00 00       	mov    edx,0xcfc
c00187a0:	ed                   	in     eax,dx
c00187a1:	83 e3 02             	and    ebx,0x2
c00187a4:	0f b6 cb             	movzx  ecx,bl
c00187a7:	c1 e1 03             	shl    ecx,0x3
c00187aa:	d3 e8                	shr    eax,cl
c00187ac:	eb 43                	jmp    c00187f1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00187ae:	83 ff 02             	cmp    edi,0x2
c00187b1:	75 2c                	jne    c00187df <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00187b3:	83 ec 0c             	sub    esp,0xc
c00187b6:	0f b6 c9             	movzx  ecx,cl
c00187b9:	0f b6 d2             	movzx  edx,dl
c00187bc:	0f b6 fb             	movzx  edi,bl
c00187bf:	0f b6 c0             	movzx  eax,al
c00187c2:	57                   	push   edi
c00187c3:	51                   	push   ecx
c00187c4:	52                   	push   edx
c00187c5:	50                   	push   eax
c00187c6:	56                   	push   esi
c00187c7:	e8 14 ff ff ff       	call   c00186e0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187cc:	89 c2                	mov    edx,eax
c00187ce:	ed                   	in     eax,dx
c00187cf:	83 e3 02             	and    ebx,0x2
c00187d2:	83 c4 20             	add    esp,0x20
c00187d5:	0f b6 cb             	movzx  ecx,bl
c00187d8:	c1 e1 03             	shl    ecx,0x3
c00187db:	d3 e8                	shr    eax,cl
c00187dd:	eb 12                	jmp    c00187f1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00187df:	83 ec 0c             	sub    esp,0xc
c00187e2:	68 27 f2 01 c0       	push   0xc001f227
c00187e7:	e8 ff 7e ff ff       	call   c00106eb <Krnl::panic(char const*)>
c00187ec:	83 c4 10             	add    esp,0x10
c00187ef:	31 c0                	xor    eax,eax
c00187f1:	5b                   	pop    ebx
c00187f2:	5e                   	pop    esi
c00187f3:	5f                   	pop    edi
c00187f4:	c3                   	ret    
c00187f5:	90                   	nop

c00187f6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00187f6:	83 ec 18             	sub    esp,0x18
c00187f9:	6a 00                	push   0x0
c00187fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018800:	50                   	push   eax
c0018801:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018806:	50                   	push   eax
c0018807:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001880c:	50                   	push   eax
c001880d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018811:	e8 38 ff ff ff       	call   c001874e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018816:	83 c4 2c             	add    esp,0x2c
c0018819:	c3                   	ret    

c001881a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001881a:	83 ec 18             	sub    esp,0x18
c001881d:	6a 0e                	push   0xe
c001881f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018824:	50                   	push   eax
c0018825:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001882a:	50                   	push   eax
c001882b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018830:	50                   	push   eax
c0018831:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018835:	e8 14 ff ff ff       	call   c001874e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001883a:	83 c4 2c             	add    esp,0x2c
c001883d:	0f b6 c0             	movzx  eax,al
c0018840:	c3                   	ret    
c0018841:	90                   	nop

c0018842 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0018842:	55                   	push   ebp
c0018843:	57                   	push   edi
c0018844:	56                   	push   esi
c0018845:	53                   	push   ebx
c0018846:	83 ec 18             	sub    esp,0x18
c0018849:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001884e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0018853:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018858:	6a 0a                	push   0xa
c001885a:	56                   	push   esi
c001885b:	55                   	push   ebp
c001885c:	57                   	push   edi
c001885d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018861:	e8 e8 fe ff ff       	call   c001874e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018866:	83 c4 14             	add    esp,0x14
c0018869:	89 c3                	mov    ebx,eax
c001886b:	6a 0a                	push   0xa
c001886d:	0f b6 db             	movzx  ebx,bl
c0018870:	56                   	push   esi
c0018871:	55                   	push   ebp
c0018872:	57                   	push   edi
c0018873:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018877:	e8 d2 fe ff ff       	call   c001874e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001887c:	83 c4 2c             	add    esp,0x2c
c001887f:	25 00 ff 00 00       	and    eax,0xff00
c0018884:	09 d8                	or     eax,ebx
c0018886:	5b                   	pop    ebx
c0018887:	5e                   	pop    esi
c0018888:	5f                   	pop    edi
c0018889:	5d                   	pop    ebp
c001888a:	c3                   	ret    
c001888b:	90                   	nop

c001888c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001888c:	83 ec 18             	sub    esp,0x18
c001888f:	6a 08                	push   0x8
c0018891:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018896:	50                   	push   eax
c0018897:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001889c:	50                   	push   eax
c001889d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188a2:	50                   	push   eax
c00188a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188a7:	e8 a2 fe ff ff       	call   c001874e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188ac:	83 c4 2c             	add    esp,0x2c
c00188af:	0f b6 c4             	movzx  eax,ah
c00188b2:	c3                   	ret    
c00188b3:	90                   	nop

c00188b4 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00188b4:	83 ec 18             	sub    esp,0x18
c00188b7:	6a 08                	push   0x8
c00188b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188be:	50                   	push   eax
c00188bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188c4:	50                   	push   eax
c00188c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188ca:	50                   	push   eax
c00188cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188cf:	e8 7a fe ff ff       	call   c001874e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188d4:	83 c4 2c             	add    esp,0x2c
c00188d7:	c3                   	ret    

c00188d8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00188d8:	83 ec 18             	sub    esp,0x18
c00188db:	6a 3c                	push   0x3c
c00188dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188e2:	50                   	push   eax
c00188e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188e8:	50                   	push   eax
c00188e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188ee:	50                   	push   eax
c00188ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188f3:	e8 56 fe ff ff       	call   c001874e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188f8:	83 c4 2c             	add    esp,0x2c
c00188fb:	c3                   	ret    

c00188fc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00188fc:	83 ec 18             	sub    esp,0x18
c00188ff:	6a 18                	push   0x18
c0018901:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018906:	50                   	push   eax
c0018907:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001890c:	50                   	push   eax
c001890d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018912:	50                   	push   eax
c0018913:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018917:	e8 32 fe ff ff       	call   c001874e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001891c:	83 c4 2c             	add    esp,0x2c
c001891f:	0f b6 c4             	movzx  eax,ah
c0018922:	c3                   	ret    
c0018923:	90                   	nop

c0018924 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018924:	55                   	push   ebp
c0018925:	57                   	push   edi
c0018926:	56                   	push   esi
c0018927:	53                   	push   ebx
c0018928:	83 ec 28             	sub    esp,0x28
c001892b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001892f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018934:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0018939:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001893e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018945:	8d 43 12             	lea    eax,[ebx+0x12]
c0018948:	83 c3 10             	add    ebx,0x10
c001894b:	0f b6 c0             	movzx  eax,al
c001894e:	0f b6 db             	movzx  ebx,bl
c0018951:	50                   	push   eax
c0018952:	51                   	push   ecx
c0018953:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0018957:	57                   	push   edi
c0018958:	55                   	push   ebp
c0018959:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001895d:	e8 ec fd ff ff       	call   c001874e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018962:	83 c4 14             	add    esp,0x14
c0018965:	89 c6                	mov    esi,eax
c0018967:	53                   	push   ebx
c0018968:	c1 e6 10             	shl    esi,0x10
c001896b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001896f:	51                   	push   ecx
c0018970:	57                   	push   edi
c0018971:	55                   	push   ebp
c0018972:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018976:	e8 d3 fd ff ff       	call   c001874e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001897b:	83 c4 3c             	add    esp,0x3c
c001897e:	0f b7 c0             	movzx  eax,ax
c0018981:	5b                   	pop    ebx
c0018982:	09 f0                	or     eax,esi
c0018984:	5e                   	pop    esi
c0018985:	5f                   	pop    edi
c0018986:	5d                   	pop    ebp
c0018987:	c3                   	ret    

c0018988 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018988:	55                   	push   ebp
c0018989:	57                   	push   edi
c001898a:	56                   	push   esi
c001898b:	53                   	push   ebx
c001898c:	83 ec 0c             	sub    esp,0xc
c001898f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018993:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018997:	89 f5                	mov    ebp,esi
c0018999:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001899f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00189a3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00189a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00189ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00189af:	83 f9 01             	cmp    ecx,0x1
c00189b2:	75 5d                	jne    c0018a11 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00189b4:	0f b6 c8             	movzx  ecx,al
c00189b7:	0f b6 d2             	movzx  edx,dl
c00189ba:	c1 e1 10             	shl    ecx,0x10
c00189bd:	c1 e2 0b             	shl    edx,0xb
c00189c0:	89 f0                	mov    eax,esi
c00189c2:	25 fc 00 00 00       	and    eax,0xfc
c00189c7:	09 c1                	or     ecx,eax
c00189c9:	89 e8                	mov    eax,ebp
c00189cb:	0f b6 c0             	movzx  eax,al
c00189ce:	c1 e0 08             	shl    eax,0x8
c00189d1:	09 c1                	or     ecx,eax
c00189d3:	09 d1                	or     ecx,edx
c00189d5:	ba f8 0c 00 00       	mov    edx,0xcf8
c00189da:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00189e0:	89 c8                	mov    eax,ecx
c00189e2:	ef                   	out    dx,eax
c00189e3:	ba fc 0c 00 00       	mov    edx,0xcfc
c00189e8:	ed                   	in     eax,dx
c00189e9:	0f b7 db             	movzx  ebx,bx
c00189ec:	83 e6 02             	and    esi,0x2
c00189ef:	74 0a                	je     c00189fb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00189f1:	0f b7 d0             	movzx  edx,ax
c00189f4:	c1 e3 10             	shl    ebx,0x10
c00189f7:	09 d3                	or     ebx,edx
c00189f9:	eb 05                	jmp    c0018a00 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00189fb:	66 31 c0             	xor    ax,ax
c00189fe:	09 c3                	or     ebx,eax
c0018a00:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018a05:	89 c8                	mov    eax,ecx
c0018a07:	ef                   	out    dx,eax
c0018a08:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018a0d:	89 d8                	mov    eax,ebx
c0018a0f:	eb 41                	jmp    c0018a52 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018a11:	83 f9 02             	cmp    ecx,0x2
c0018a14:	75 45                	jne    c0018a5b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0018a16:	83 ec 0c             	sub    esp,0xc
c0018a19:	0f b6 d2             	movzx  edx,dl
c0018a1c:	89 f1                	mov    ecx,esi
c0018a1e:	0f b6 c0             	movzx  eax,al
c0018a21:	0f b6 f1             	movzx  esi,cl
c0018a24:	89 e9                	mov    ecx,ebp
c0018a26:	56                   	push   esi
c0018a27:	0f b6 c9             	movzx  ecx,cl
c0018a2a:	51                   	push   ecx
c0018a2b:	52                   	push   edx
c0018a2c:	50                   	push   eax
c0018a2d:	57                   	push   edi
c0018a2e:	e8 ad fc ff ff       	call   c00186e0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018a33:	89 c2                	mov    edx,eax
c0018a35:	ed                   	in     eax,dx
c0018a36:	83 c4 20             	add    esp,0x20
c0018a39:	0f b7 db             	movzx  ebx,bx
c0018a3c:	f6 c2 02             	test   dl,0x2
c0018a3f:	74 0c                	je     c0018a4d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018a41:	0f b7 c8             	movzx  ecx,ax
c0018a44:	89 d8                	mov    eax,ebx
c0018a46:	c1 e0 10             	shl    eax,0x10
c0018a49:	09 c8                	or     eax,ecx
c0018a4b:	eb 05                	jmp    c0018a52 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018a4d:	66 31 c0             	xor    ax,ax
c0018a50:	09 d8                	or     eax,ebx
c0018a52:	ef                   	out    dx,eax
c0018a53:	83 c4 0c             	add    esp,0xc
c0018a56:	5b                   	pop    ebx
c0018a57:	5e                   	pop    esi
c0018a58:	5f                   	pop    edi
c0018a59:	5d                   	pop    ebp
c0018a5a:	c3                   	ret    
c0018a5b:	c7 44 24 20 27 f2 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f227
c0018a63:	83 c4 0c             	add    esp,0xc
c0018a66:	5b                   	pop    ebx
c0018a67:	5e                   	pop    esi
c0018a68:	5f                   	pop    edi
c0018a69:	5d                   	pop    ebp
c0018a6a:	e9 7c 7c ff ff       	jmp    c00106eb <Krnl::panic(char const*)>
c0018a6f:	90                   	nop

c0018a70 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018a70:	55                   	push   ebp
c0018a71:	57                   	push   edi
c0018a72:	56                   	push   esi
c0018a73:	53                   	push   ebx
c0018a74:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018a7a:	80 3d 6c 48 02 c0 00 	cmp    BYTE PTR ds:0xc002486c,0x0
c0018a81:	0f 85 84 00 00 00    	jne    c0018b0b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018a87:	83 ec 0c             	sub    esp,0xc
c0018a8a:	68 14 01 00 00       	push   0x114
c0018a8f:	e8 c9 f3 fe ff       	call   c0007e5d <malloc>
c0018a94:	83 c4 0c             	add    esp,0xc
c0018a97:	89 c3                	mov    ebx,eax
c0018a99:	ff 35 b0 3e 02 c0    	push   DWORD PTR ds:0xc0023eb0
c0018a9f:	68 2d f2 01 c0       	push   0xc001f22d
c0018aa4:	50                   	push   eax
c0018aa5:	e8 b8 26 ff ff       	call   c000b162 <File::File(char const*, Process*)>
c0018aaa:	5a                   	pop    edx
c0018aab:	59                   	pop    ecx
c0018aac:	6a 01                	push   0x1
c0018aae:	53                   	push   ebx
c0018aaf:	e8 6e 27 ff ff       	call   c000b222 <File::open(FileOpenMode)>
c0018ab4:	83 c4 0c             	add    esp,0xc
c0018ab7:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018abb:	50                   	push   eax
c0018abc:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ac0:	50                   	push   eax
c0018ac1:	53                   	push   ebx
c0018ac2:	e8 07 2a ff ff       	call   c000b4ce <File::stat(unsigned long long*, bool*)>
c0018ac7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018acb:	40                   	inc    eax
c0018acc:	89 04 24             	mov    DWORD PTR [esp],eax
c0018acf:	e8 89 f3 fe ff       	call   c0007e5d <malloc>
c0018ad4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018ad8:	a3 68 48 02 c0       	mov    ds:0xc0024868,eax
c0018add:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018ae1:	5e                   	pop    esi
c0018ae2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018ae4:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018ae8:	51                   	push   ecx
c0018ae9:	50                   	push   eax
c0018aea:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018aee:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018af2:	53                   	push   ebx
c0018af3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018af6:	83 c4 14             	add    esp,0x14
c0018af9:	53                   	push   ebx
c0018afa:	e8 81 27 ff ff       	call   c000b280 <File::close()>
c0018aff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b03:	83 c4 10             	add    esp,0x10
c0018b06:	a3 64 48 02 c0       	mov    ds:0xc0024864,eax
c0018b0b:	a1 64 48 02 c0       	mov    eax,ds:0xc0024864
c0018b10:	8b 15 68 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024868
c0018b16:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b19:	31 ff                	xor    edi,edi
c0018b1b:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018b23:	31 f6                	xor    esi,esi
c0018b25:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018b2a:	31 db                	xor    ebx,ebx
c0018b2c:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018b34:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018b39:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018b40:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018b44:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018b4b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018b4f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018b52:	0f 8e 6b 01 00 00    	jle    c0018cc3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018b58:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018b5b:	d4 40                	aam    0x40
c0018b5d:	d5 39                	aad    0x39
c0018b5f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b63:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018b67:	d4 40                	aam    0x40
c0018b69:	d5 39                	aad    0x39
c0018b6b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018b6f:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018b73:	d4 40                	aam    0x40
c0018b75:	d5 39                	aad    0x39
c0018b77:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018b7b:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018b7f:	d4 40                	aam    0x40
c0018b81:	d5 39                	aad    0x39
c0018b83:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018b87:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018b8b:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018b8f:	3c 56                	cmp    al,0x56
c0018b91:	74 45                	je     c0018bd8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018b93:	d4 40                	aam    0x40
c0018b95:	d5 39                	aad    0x39
c0018b97:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b9a:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018b9e:	0f b6 c9             	movzx  ecx,cl
c0018ba1:	c1 e1 04             	shl    ecx,0x4
c0018ba4:	d4 40                	aam    0x40
c0018ba6:	d5 39                	aad    0x39
c0018ba8:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018bab:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018baf:	0f b6 db             	movzx  ebx,bl
c0018bb2:	09 cb                	or     ebx,ecx
c0018bb4:	c1 e3 04             	shl    ebx,0x4
c0018bb7:	d4 40                	aam    0x40
c0018bb9:	d5 39                	aad    0x39
c0018bbb:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018bbe:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018bc2:	0f b6 c9             	movzx  ecx,cl
c0018bc5:	09 cb                	or     ebx,ecx
c0018bc7:	c1 e3 04             	shl    ebx,0x4
c0018bca:	89 d9                	mov    ecx,ebx
c0018bcc:	d4 40                	aam    0x40
c0018bce:	d5 39                	aad    0x39
c0018bd0:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018bd3:	0f b6 db             	movzx  ebx,bl
c0018bd6:	09 cb                	or     ebx,ecx
c0018bd8:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018bdc:	80 f9 44             	cmp    cl,0x44
c0018bdf:	74 47                	je     c0018c28 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018be1:	88 c8                	mov    al,cl
c0018be3:	d4 40                	aam    0x40
c0018be5:	d5 39                	aad    0x39
c0018be7:	83 e8 30             	sub    eax,0x30
c0018bea:	0f b6 e8             	movzx  ebp,al
c0018bed:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018bf1:	c1 e5 04             	shl    ebp,0x4
c0018bf4:	d4 40                	aam    0x40
c0018bf6:	d5 39                	aad    0x39
c0018bf8:	83 e8 30             	sub    eax,0x30
c0018bfb:	0f b6 f0             	movzx  esi,al
c0018bfe:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018c02:	09 ee                	or     esi,ebp
c0018c04:	c1 e6 04             	shl    esi,0x4
c0018c07:	d4 40                	aam    0x40
c0018c09:	d5 39                	aad    0x39
c0018c0b:	83 e8 30             	sub    eax,0x30
c0018c0e:	0f b6 e8             	movzx  ebp,al
c0018c11:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018c15:	09 ee                	or     esi,ebp
c0018c17:	c1 e6 04             	shl    esi,0x4
c0018c1a:	89 f5                	mov    ebp,esi
c0018c1c:	d4 40                	aam    0x40
c0018c1e:	d5 39                	aad    0x39
c0018c20:	83 e8 30             	sub    eax,0x30
c0018c23:	0f b6 f0             	movzx  esi,al
c0018c26:	09 ee                	or     esi,ebp
c0018c28:	83 c7 10             	add    edi,0x10
c0018c2b:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018c2f:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018c32:	3c 0a                	cmp    al,0xa
c0018c34:	74 09                	je     c0018c3f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018c36:	45                   	inc    ebp
c0018c37:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018c3a:	75 16                	jne    c0018c52 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018c3c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018c3f:	3c 0a                	cmp    al,0xa
c0018c41:	0f 94 c0             	sete   al
c0018c44:	0f b6 c0             	movzx  eax,al
c0018c47:	01 c7                	add    edi,eax
c0018c49:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018c4e:	75 0c                	jne    c0018c5c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018c50:	eb 15                	jmp    c0018c67 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018c52:	47                   	inc    edi
c0018c53:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018c56:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018c5a:	eb d3                	jmp    c0018c2f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018c5c:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018c61:	0f 85 e8 fe ff ff    	jne    c0018b4f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c67:	80 f9 44             	cmp    cl,0x44
c0018c6a:	74 0b                	je     c0018c77 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018c6c:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018c71:	0f 85 d8 fe ff ff    	jne    c0018b4f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c77:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018c7b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018c7f:	c1 e1 04             	shl    ecx,0x4
c0018c82:	83 e8 30             	sub    eax,0x30
c0018c85:	09 c8                	or     eax,ecx
c0018c87:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018c8b:	0f 85 be fe ff ff    	jne    c0018b4f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c91:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018c95:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c99:	c1 e1 04             	shl    ecx,0x4
c0018c9c:	83 e8 30             	sub    eax,0x30
c0018c9f:	09 c8                	or     eax,ecx
c0018ca1:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018ca5:	0f 85 a4 fe ff ff    	jne    c0018b4f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018cab:	50                   	push   eax
c0018cac:	50                   	push   eax
c0018cad:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018cb1:	50                   	push   eax
c0018cb2:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018cb9:	e8 62 79 fe ff       	call   c0000620 <strcpy>
c0018cbe:	83 c4 10             	add    esp,0x10
c0018cc1:	eb 15                	jmp    c0018cd8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018cc3:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018cca:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018cd5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018cd8:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018cdf:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018ce5:	5b                   	pop    ebx
c0018ce6:	5e                   	pop    esi
c0018ce7:	5f                   	pop    edi
c0018ce8:	5d                   	pop    ebp
c0018ce9:	c3                   	ret    

c0018cea <PCI::checkBus(unsigned char)>:
c0018cea:	56                   	push   esi
c0018ceb:	53                   	push   ebx
c0018cec:	31 f6                	xor    esi,esi
c0018cee:	51                   	push   ecx
c0018cef:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018cf3:	0f b6 c3             	movzx  eax,bl
c0018cf6:	52                   	push   edx
c0018cf7:	56                   	push   esi
c0018cf8:	46                   	inc    esi
c0018cf9:	50                   	push   eax
c0018cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018cfe:	e8 f3 02 00 00       	call   c0018ff6 <PCI::checkDevice(unsigned char, unsigned char)>
c0018d03:	83 c4 10             	add    esp,0x10
c0018d06:	83 fe 20             	cmp    esi,0x20
c0018d09:	75 e8                	jne    c0018cf3 <PCI::checkBus(unsigned char)+0x9>
c0018d0b:	58                   	pop    eax
c0018d0c:	5b                   	pop    ebx
c0018d0d:	5e                   	pop    esi
c0018d0e:	c3                   	ret    
c0018d0f:	90                   	nop

c0018d10 <PCI::foundDevice(PCIDeviceInfo)>:
c0018d10:	55                   	push   ebp
c0018d11:	57                   	push   edi
c0018d12:	56                   	push   esi
c0018d13:	53                   	push   ebx
c0018d14:	83 ec 1c             	sub    esp,0x1c
c0018d17:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018d1b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018d21:	0f 84 52 01 00 00    	je     c0018e79 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018d27:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018d2b:	66 81 f9 06 04       	cmp    cx,0x406
c0018d30:	75 2c                	jne    c0018d5e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018d32:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018d37:	50                   	push   eax
c0018d38:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018d3d:	50                   	push   eax
c0018d3e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018d43:	50                   	push   eax
c0018d44:	56                   	push   esi
c0018d45:	e8 b2 fb ff ff       	call   c00188fc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018d4a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018d4e:	0f b6 c0             	movzx  eax,al
c0018d51:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018d55:	83 c4 2c             	add    esp,0x2c
c0018d58:	5b                   	pop    ebx
c0018d59:	5e                   	pop    esi
c0018d5a:	5f                   	pop    edi
c0018d5b:	5d                   	pop    ebp
c0018d5c:	eb 8c                	jmp    c0018cea <PCI::checkBus(unsigned char)>
c0018d5e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018d62:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018d6c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018d70:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018d74:	88 d3                	mov    bl,dl
c0018d76:	85 c0                	test   eax,eax
c0018d78:	74 33                	je     c0018dad <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018d7a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018d7d:	85 d2                	test   edx,edx
c0018d7f:	74 28                	je     c0018da9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d81:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018d87:	31 ef                	xor    edi,ebp
c0018d89:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018d8f:	75 18                	jne    c0018da9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d91:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018d95:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018d9b:	75 0c                	jne    c0018da9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d9d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018da3:	0f 84 d0 00 00 00    	je     c0018e79 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018da9:	8b 00                	mov    eax,DWORD PTR [eax]
c0018dab:	eb c9                	jmp    c0018d76 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018dad:	66 81 f9 01 06       	cmp    cx,0x601
c0018db2:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018db6:	75 19                	jne    c0018dd1 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018db8:	83 ec 0c             	sub    esp,0xc
c0018dbb:	68 64 01 00 00       	push   0x164
c0018dc0:	e8 98 f0 fe ff       	call   c0007e5d <malloc>
c0018dc5:	89 c5                	mov    ebp,eax
c0018dc7:	89 04 24             	mov    DWORD PTR [esp],eax
c0018dca:	e8 47 0e 00 00       	call   c0019c16 <SATABus::SATABus()>
c0018dcf:	eb 1e                	jmp    c0018def <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018dd1:	66 81 f9 01 01       	cmp    cx,0x101
c0018dd6:	75 60                	jne    c0018e38 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018dd8:	83 ec 0c             	sub    esp,0xc
c0018ddb:	68 70 02 00 00       	push   0x270
c0018de0:	e8 78 f0 fe ff       	call   c0007e5d <malloc>
c0018de5:	89 c5                	mov    ebp,eax
c0018de7:	89 04 24             	mov    DWORD PTR [esp],eax
c0018dea:	e8 cb 02 00 00       	call   c00190ba <IDE::IDE()>
c0018def:	58                   	pop    eax
c0018df0:	5a                   	pop    edx
c0018df1:	55                   	push   ebp
c0018df2:	56                   	push   esi
c0018df3:	e8 34 32 ff ff       	call   c000c02c <Device::addChild(Device*)>
c0018df8:	83 ec 1c             	sub    esp,0x1c
c0018dfb:	b9 09 00 00 00       	mov    ecx,0x9
c0018e00:	fc                   	cld    
c0018e01:	89 e7                	mov    edi,esp
c0018e03:	89 de                	mov    esi,ebx
c0018e05:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e07:	55                   	push   ebp
c0018e08:	e8 65 31 ff ff       	call   c000bf72 <Device::preOpenPCI(PCIDeviceInfo)>
c0018e0d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018e10:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018e14:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018e1c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018e24:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018e2c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018e2f:	83 c4 4c             	add    esp,0x4c
c0018e32:	5b                   	pop    ebx
c0018e33:	5e                   	pop    esi
c0018e34:	5f                   	pop    edi
c0018e35:	5d                   	pop    ebp
c0018e36:	ff e0                	jmp    eax
c0018e38:	83 ec 0c             	sub    esp,0xc
c0018e3b:	68 58 01 00 00       	push   0x158
c0018e40:	e8 18 f0 fe ff       	call   c0007e5d <malloc>
c0018e45:	89 c5                	mov    ebp,eax
c0018e47:	58                   	pop    eax
c0018e48:	5a                   	pop    edx
c0018e49:	68 46 f2 01 c0       	push   0xc001f246
c0018e4e:	55                   	push   ebp
c0018e4f:	e8 76 34 ff ff       	call   c000c2ca <DriverlessDevice::DriverlessDevice(char const*)>
c0018e54:	59                   	pop    ecx
c0018e55:	5f                   	pop    edi
c0018e56:	55                   	push   ebp
c0018e57:	56                   	push   esi
c0018e58:	e8 cf 31 ff ff       	call   c000c02c <Device::addChild(Device*)>
c0018e5d:	b9 09 00 00 00       	mov    ecx,0x9
c0018e62:	fc                   	cld    
c0018e63:	89 df                	mov    edi,ebx
c0018e65:	89 de                	mov    esi,ebx
c0018e67:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e69:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018e6d:	83 c4 2c             	add    esp,0x2c
c0018e70:	5b                   	pop    ebx
c0018e71:	5e                   	pop    esi
c0018e72:	5f                   	pop    edi
c0018e73:	5d                   	pop    ebp
c0018e74:	e9 f9 30 ff ff       	jmp    c000bf72 <Device::preOpenPCI(PCIDeviceInfo)>
c0018e79:	83 c4 1c             	add    esp,0x1c
c0018e7c:	5b                   	pop    ebx
c0018e7d:	5e                   	pop    esi
c0018e7e:	5f                   	pop    edi
c0018e7f:	5d                   	pop    ebp
c0018e80:	c3                   	ret    
c0018e81:	90                   	nop

c0018e82 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018e82:	55                   	push   ebp
c0018e83:	57                   	push   edi
c0018e84:	56                   	push   esi
c0018e85:	53                   	push   ebx
c0018e86:	83 ec 68             	sub    esp,0x68
c0018e89:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018e8d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018e94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018e98:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018e9f:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018ea4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018ea8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018eaf:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018eb4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018eb8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018ebd:	6a 0c                	push   0xc
c0018ebf:	57                   	push   edi
c0018ec0:	53                   	push   ebx
c0018ec1:	56                   	push   esi
c0018ec2:	55                   	push   ebp
c0018ec3:	e8 86 f8 ff ff       	call   c001874e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ec8:	83 c4 20             	add    esp,0x20
c0018ecb:	57                   	push   edi
c0018ecc:	53                   	push   ebx
c0018ecd:	56                   	push   esi
c0018ece:	55                   	push   ebp
c0018ecf:	e8 6e f9 ff ff       	call   c0018842 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018ed4:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018ed9:	57                   	push   edi
c0018eda:	53                   	push   ebx
c0018edb:	56                   	push   esi
c0018edc:	55                   	push   ebp
c0018edd:	e8 f6 f9 ff ff       	call   c00188d8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018ee2:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018ee6:	83 c4 14             	add    esp,0x14
c0018ee9:	6a 3c                	push   0x3c
c0018eeb:	57                   	push   edi
c0018eec:	53                   	push   ebx
c0018eed:	56                   	push   esi
c0018eee:	55                   	push   ebp
c0018eef:	e8 5a f8 ff ff       	call   c001874e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ef4:	0f b6 c4             	movzx  eax,ah
c0018ef7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018efb:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018eff:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018f03:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0018f08:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018f0e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018f14:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018f18:	83 c4 20             	add    esp,0x20
c0018f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f20:	74 30                	je     c0018f52 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018f22:	31 c0                	xor    eax,eax
c0018f24:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018f28:	7e 28                	jle    c0018f52 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018f2a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018f32:	39 cb                	cmp    ebx,ecx
c0018f34:	75 19                	jne    c0018f4f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018f36:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018f3e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018f42:	75 0b                	jne    c0018f4f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018f44:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018f4b:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018f4f:	40                   	inc    eax
c0018f50:	eb d2                	jmp    c0018f24 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018f52:	31 d2                	xor    edx,edx
c0018f54:	83 ec 0c             	sub    esp,0xc
c0018f57:	57                   	push   edi
c0018f58:	53                   	push   ebx
c0018f59:	56                   	push   esi
c0018f5a:	52                   	push   edx
c0018f5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018f5f:	55                   	push   ebp
c0018f60:	e8 bf f9 ff ff       	call   c0018924 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f65:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f69:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018f6d:	42                   	inc    edx
c0018f6e:	83 c4 20             	add    esp,0x20
c0018f71:	83 fa 06             	cmp    edx,0x6
c0018f74:	75 de                	jne    c0018f54 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018f76:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f7b:	83 ec 0c             	sub    esp,0xc
c0018f7e:	86 e0                	xchg   al,ah
c0018f80:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018f85:	6a 02                	push   0x2
c0018f87:	57                   	push   edi
c0018f88:	53                   	push   ebx
c0018f89:	56                   	push   esi
c0018f8a:	55                   	push   ebp
c0018f8b:	e8 be f7 ff ff       	call   c001874e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f90:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018f95:	83 c4 20             	add    esp,0x20
c0018f98:	57                   	push   edi
c0018f99:	53                   	push   ebx
c0018f9a:	56                   	push   esi
c0018f9b:	55                   	push   ebp
c0018f9c:	e8 eb f8 ff ff       	call   c001888c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018fa1:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018fa5:	57                   	push   edi
c0018fa6:	53                   	push   ebx
c0018fa7:	56                   	push   esi
c0018fa8:	55                   	push   ebp
c0018fa9:	e8 48 f8 ff ff       	call   c00187f6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fae:	b9 09 00 00 00       	mov    ecx,0x9
c0018fb3:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018fb8:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018fbc:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018fc0:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018fc4:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018fc8:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018fcc:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018fd0:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018fd4:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018fd8:	83 ec 0c             	sub    esp,0xc
c0018fdb:	fc                   	cld    
c0018fdc:	89 e7                	mov    edi,esp
c0018fde:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018fe2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018fe4:	55                   	push   ebp
c0018fe5:	e8 26 fd ff ff       	call   c0018d10 <PCI::foundDevice(PCIDeviceInfo)>
c0018fea:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018ff0:	5b                   	pop    ebx
c0018ff1:	5e                   	pop    esi
c0018ff2:	5f                   	pop    edi
c0018ff3:	5d                   	pop    ebp
c0018ff4:	c3                   	ret    
c0018ff5:	90                   	nop

c0018ff6 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018ff6:	55                   	push   ebp
c0018ff7:	57                   	push   edi
c0018ff8:	56                   	push   esi
c0018ff9:	53                   	push   ebx
c0018ffa:	83 ec 0c             	sub    esp,0xc
c0018ffd:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0019001:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0019006:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001900b:	6a 00                	push   0x0
c001900d:	56                   	push   esi
c001900e:	57                   	push   edi
c001900f:	55                   	push   ebp
c0019010:	e8 e1 f7 ff ff       	call   c00187f6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019015:	6a 00                	push   0x0
c0019017:	56                   	push   esi
c0019018:	57                   	push   edi
c0019019:	55                   	push   ebp
c001901a:	e8 63 fe ff ff       	call   c0018e82 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001901f:	83 c4 20             	add    esp,0x20
c0019022:	6a 00                	push   0x0
c0019024:	56                   	push   esi
c0019025:	57                   	push   edi
c0019026:	55                   	push   ebp
c0019027:	e8 ee f7 ff ff       	call   c001881a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001902c:	83 c4 10             	add    esp,0x10
c001902f:	84 c0                	test   al,al
c0019031:	79 27                	jns    c001905a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0019033:	bb 01 00 00 00       	mov    ebx,0x1
c0019038:	53                   	push   ebx
c0019039:	56                   	push   esi
c001903a:	57                   	push   edi
c001903b:	55                   	push   ebp
c001903c:	e8 b5 f7 ff ff       	call   c00187f6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019041:	83 c4 10             	add    esp,0x10
c0019044:	66 40                	inc    ax
c0019046:	74 0c                	je     c0019054 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0019048:	53                   	push   ebx
c0019049:	56                   	push   esi
c001904a:	57                   	push   edi
c001904b:	55                   	push   ebp
c001904c:	e8 31 fe ff ff       	call   c0018e82 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0019051:	83 c4 10             	add    esp,0x10
c0019054:	43                   	inc    ebx
c0019055:	83 fb 08             	cmp    ebx,0x8
c0019058:	75 de                	jne    c0019038 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001905a:	83 c4 0c             	add    esp,0xc
c001905d:	5b                   	pop    ebx
c001905e:	5e                   	pop    esi
c001905f:	5f                   	pop    edi
c0019060:	5d                   	pop    ebp
c0019061:	c3                   	ret    

c0019062 <PCI::detect()>:
c0019062:	56                   	push   esi
c0019063:	53                   	push   ebx
c0019064:	53                   	push   ebx
c0019065:	31 db                	xor    ebx,ebx
c0019067:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001906b:	6a 00                	push   0x0
c001906d:	6a 00                	push   0x0
c001906f:	6a 00                	push   0x0
c0019071:	56                   	push   esi
c0019072:	e8 a3 f7 ff ff       	call   c001881a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0019077:	83 c4 10             	add    esp,0x10
c001907a:	a8 80                	test   al,0x80
c001907c:	75 21                	jne    c001909f <PCI::detect()+0x3d>
c001907e:	51                   	push   ecx
c001907f:	51                   	push   ecx
c0019080:	6a 00                	push   0x0
c0019082:	56                   	push   esi
c0019083:	e8 62 fc ff ff       	call   c0018cea <PCI::checkBus(unsigned char)>
c0019088:	83 c4 10             	add    esp,0x10
c001908b:	eb 24                	jmp    c00190b1 <PCI::detect()+0x4f>
c001908d:	52                   	push   edx
c001908e:	52                   	push   edx
c001908f:	53                   	push   ebx
c0019090:	43                   	inc    ebx
c0019091:	56                   	push   esi
c0019092:	e8 53 fc ff ff       	call   c0018cea <PCI::checkBus(unsigned char)>
c0019097:	83 c4 10             	add    esp,0x10
c001909a:	83 fb 08             	cmp    ebx,0x8
c001909d:	74 12                	je     c00190b1 <PCI::detect()+0x4f>
c001909f:	53                   	push   ebx
c00190a0:	6a 00                	push   0x0
c00190a2:	6a 00                	push   0x0
c00190a4:	56                   	push   esi
c00190a5:	e8 4c f7 ff ff       	call   c00187f6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00190aa:	83 c4 10             	add    esp,0x10
c00190ad:	66 40                	inc    ax
c00190af:	74 dc                	je     c001908d <PCI::detect()+0x2b>
c00190b1:	58                   	pop    eax
c00190b2:	5b                   	pop    ebx
c00190b3:	5e                   	pop    esi
c00190b4:	c3                   	ret    
c00190b5:	90                   	nop

c00190b6 <IDE::close(int, int, void*)>:
c00190b6:	83 c8 ff             	or     eax,0xffffffff
c00190b9:	c3                   	ret    

c00190ba <IDE::IDE()>:
c00190ba:	83 ec 0c             	sub    esp,0xc
c00190bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190c1:	83 ec 08             	sub    esp,0x8
c00190c4:	68 8c f2 01 c0       	push   0xc001f28c
c00190c9:	50                   	push   eax
c00190ca:	e8 a1 32 ff ff       	call   c000c370 <HardDiskController::HardDiskController(char const*)>
c00190cf:	83 c4 10             	add    esp,0x10
c00190d2:	ba 1c f3 01 c0       	mov    edx,0xc001f31c
c00190d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190db:	89 10                	mov    DWORD PTR [eax],edx
c00190dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190e1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00190e8:	90                   	nop
c00190e9:	83 c4 0c             	add    esp,0xc
c00190ec:	c3                   	ret    
c00190ed:	90                   	nop

c00190ee <IDE::prepareInterrupt(unsigned char)>:
c00190ee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00190f3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00190f7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00190ff:	c3                   	ret    

c0019100 <selectDrive(unsigned char, unsigned char)>:
c0019100:	c3                   	ret    
c0019101:	90                   	nop

c0019102 <IDE::getBase(unsigned char)>:
c0019102:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0019107:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001910b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0019113:	c3                   	ret    

c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0019114:	55                   	push   ebp
c0019115:	57                   	push   edi
c0019116:	56                   	push   esi
c0019117:	53                   	push   ebx
c0019118:	83 ec 1c             	sub    esp,0x1c
c001911b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001911f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019123:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0019126:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001912a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001912e:	80 f9 03             	cmp    cl,0x3
c0019131:	77 51                	ja     c0019184 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0019133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019137:	0f b6 f2             	movzx  esi,dl
c001913a:	0f b6 db             	movzx  ebx,bl
c001913d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019140:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0019144:	83 ca 80             	or     edx,0xffffff80
c0019147:	0f b6 d2             	movzx  edx,dl
c001914a:	52                   	push   edx
c001914b:	6a 0c                	push   0xc
c001914d:	56                   	push   esi
c001914e:	57                   	push   edi
c001914f:	e8 c0 ff ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019154:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0019159:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001915d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0019161:	ee                   	out    dx,al
c0019162:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0019167:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001916b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001916f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019173:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001917b:	83 c4 2c             	add    esp,0x2c
c001917e:	5b                   	pop    ebx
c001917f:	5e                   	pop    esi
c0019180:	5f                   	pop    edi
c0019181:	5d                   	pop    ebp
c0019182:	eb 90                	jmp    c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019184:	80 fb 07             	cmp    bl,0x7
c0019187:	77 12                	ja     c001919b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0019189:	0f b6 d2             	movzx  edx,dl
c001918c:	0f b6 db             	movzx  ebx,bl
c001918f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0019197:	89 da                	mov    edx,ebx
c0019199:	eb 2f                	jmp    c00191ca <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001919b:	80 fb 0d             	cmp    bl,0xd
c001919e:	77 13                	ja     c00191b3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00191a0:	0f b6 d2             	movzx  edx,dl
c00191a3:	0f b6 db             	movzx  ebx,bl
c00191a6:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00191ad:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00191b1:	eb 17                	jmp    c00191ca <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00191b3:	80 fb 15             	cmp    bl,0x15
c00191b6:	77 13                	ja     c00191cb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00191b8:	0f b6 d2             	movzx  edx,dl
c00191bb:	0f b6 db             	movzx  ebx,bl
c00191be:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00191c6:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00191ca:	ee                   	out    dx,al
c00191cb:	83 c4 1c             	add    esp,0x1c
c00191ce:	5b                   	pop    ebx
c00191cf:	5e                   	pop    esi
c00191d0:	5f                   	pop    edi
c00191d1:	5d                   	pop    ebp
c00191d2:	c3                   	ret    
c00191d3:	90                   	nop

c00191d4 <IDE::read(unsigned char, unsigned char)>:
c00191d4:	55                   	push   ebp
c00191d5:	57                   	push   edi
c00191d6:	56                   	push   esi
c00191d7:	53                   	push   ebx
c00191d8:	83 ec 1c             	sub    esp,0x1c
c00191db:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00191df:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00191e3:	8d 43 f8             	lea    eax,[ebx-0x8]
c00191e6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00191ea:	3c 03                	cmp    al,0x3
c00191ec:	77 43                	ja     c0019231 <IDE::read(unsigned char, unsigned char)+0x5d>
c00191ee:	0f b6 f2             	movzx  esi,dl
c00191f1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00191f4:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00191f8:	83 c8 80             	or     eax,0xffffff80
c00191fb:	0f b6 c0             	movzx  eax,al
c00191fe:	50                   	push   eax
c00191ff:	6a 0c                	push   0xc
c0019201:	56                   	push   esi
c0019202:	57                   	push   edi
c0019203:	e8 0c ff ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019208:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001920d:	0f b6 c3             	movzx  eax,bl
c0019210:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0019214:	ec                   	in     al,dx
c0019215:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019219:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001921e:	52                   	push   edx
c001921f:	6a 0c                	push   0xc
c0019221:	56                   	push   esi
c0019222:	57                   	push   edi
c0019223:	e8 ec fe ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019228:	83 c4 20             	add    esp,0x20
c001922b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001922f:	eb 49                	jmp    c001927a <IDE::read(unsigned char, unsigned char)+0xa6>
c0019231:	80 fb 07             	cmp    bl,0x7
c0019234:	77 12                	ja     c0019248 <IDE::read(unsigned char, unsigned char)+0x74>
c0019236:	0f b6 d2             	movzx  edx,dl
c0019239:	0f b6 c3             	movzx  eax,bl
c001923c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0019244:	89 c2                	mov    edx,eax
c0019246:	eb 31                	jmp    c0019279 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019248:	80 fb 0d             	cmp    bl,0xd
c001924b:	77 13                	ja     c0019260 <IDE::read(unsigned char, unsigned char)+0x8c>
c001924d:	0f b6 d2             	movzx  edx,dl
c0019250:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0019257:	0f b6 d3             	movzx  edx,bl
c001925a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001925e:	eb 19                	jmp    c0019279 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019260:	31 c0                	xor    eax,eax
c0019262:	80 fb 15             	cmp    bl,0x15
c0019265:	77 13                	ja     c001927a <IDE::read(unsigned char, unsigned char)+0xa6>
c0019267:	0f b6 d2             	movzx  edx,dl
c001926a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0019272:	0f b6 d3             	movzx  edx,bl
c0019275:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0019279:	ec                   	in     al,dx
c001927a:	83 c4 1c             	add    esp,0x1c
c001927d:	5b                   	pop    ebx
c001927e:	5e                   	pop    esi
c001927f:	5f                   	pop    edi
c0019280:	5d                   	pop    ebp
c0019281:	c3                   	ret    

c0019282 <IDE::waitInterrupt(unsigned char)>:
c0019282:	57                   	push   edi
c0019283:	56                   	push   esi
c0019284:	31 f6                	xor    esi,esi
c0019286:	53                   	push   ebx
c0019287:	83 ec 10             	sub    esp,0x10
c001928a:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001928e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019292:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019296:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001929b:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c00192a2:	84 db                	test   bl,bl
c00192a4:	75 33                	jne    c00192d9 <IDE::waitInterrupt(unsigned char)+0x57>
c00192a6:	52                   	push   edx
c00192a7:	6a 0c                	push   0xc
c00192a9:	50                   	push   eax
c00192aa:	57                   	push   edi
c00192ab:	e8 24 ff ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c00192b0:	83 c4 10             	add    esp,0x10
c00192b3:	a8 01                	test   al,0x1
c00192b5:	75 2a                	jne    c00192e1 <IDE::waitInterrupt(unsigned char)+0x5f>
c00192b7:	f7 c6 04 00 00 00    	test   esi,0x4
c00192bd:	75 12                	jne    c00192d1 <IDE::waitInterrupt(unsigned char)+0x4f>
c00192bf:	83 fe 32             	cmp    esi,0x32
c00192c2:	7e 0d                	jle    c00192d1 <IDE::waitInterrupt(unsigned char)+0x4f>
c00192c4:	83 ec 0c             	sub    esp,0xc
c00192c7:	6a 64                	push   0x64
c00192c9:	e8 72 aa ff ff       	call   c0013d40 <milliTenthSleep(unsigned int)>
c00192ce:	83 c4 10             	add    esp,0x10
c00192d1:	83 fe 3c             	cmp    esi,0x3c
c00192d4:	74 0b                	je     c00192e1 <IDE::waitInterrupt(unsigned char)+0x5f>
c00192d6:	46                   	inc    esi
c00192d7:	eb bd                	jmp    c0019296 <IDE::waitInterrupt(unsigned char)+0x14>
c00192d9:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c00192e1:	83 c4 10             	add    esp,0x10
c00192e4:	88 d8                	mov    al,bl
c00192e6:	5b                   	pop    ebx
c00192e7:	5e                   	pop    esi
c00192e8:	5f                   	pop    edi
c00192e9:	c3                   	ret    

c00192ea <ideChannel0IRQHandler(regs*, void*)>:
c00192ea:	83 ec 10             	sub    esp,0x10
c00192ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00192f1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00192f8:	6a 07                	push   0x7
c00192fa:	6a 00                	push   0x0
c00192fc:	50                   	push   eax
c00192fd:	e8 d2 fe ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c0019302:	83 c4 1c             	add    esp,0x1c
c0019305:	c3                   	ret    

c0019306 <ideChannel1IRQHandler(regs*, void*)>:
c0019306:	83 ec 10             	sub    esp,0x10
c0019309:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001930d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0019314:	6a 07                	push   0x7
c0019316:	6a 01                	push   0x1
c0019318:	50                   	push   eax
c0019319:	e8 b6 fe ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c001931e:	83 c4 1c             	add    esp,0x1c
c0019321:	c3                   	ret    

c0019322 <IDE::enableIRQs(unsigned char, bool)>:
c0019322:	57                   	push   edi
c0019323:	56                   	push   esi
c0019324:	be 04 00 00 00       	mov    esi,0x4
c0019329:	53                   	push   ebx
c001932a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001932f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019333:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0019338:	0f 94 c0             	sete   al
c001933b:	01 c0                	add    eax,eax
c001933d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0019344:	0f b6 c0             	movzx  eax,al
c0019347:	50                   	push   eax
c0019348:	6a 0c                	push   0xc
c001934a:	57                   	push   edi
c001934b:	53                   	push   ebx
c001934c:	e8 c3 fd ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019351:	83 c4 10             	add    esp,0x10
c0019354:	50                   	push   eax
c0019355:	6a 0c                	push   0xc
c0019357:	57                   	push   edi
c0019358:	53                   	push   ebx
c0019359:	e8 76 fe ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c001935e:	83 c4 10             	add    esp,0x10
c0019361:	4e                   	dec    esi
c0019362:	75 f0                	jne    c0019354 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0019364:	5b                   	pop    ebx
c0019365:	5e                   	pop    esi
c0019366:	5f                   	pop    edi
c0019367:	c3                   	ret    

c0019368 <IDE::open(int, int, void*)>:
c0019368:	55                   	push   ebp
c0019369:	57                   	push   edi
c001936a:	56                   	push   esi
c001936b:	53                   	push   ebx
c001936c:	83 ec 1c             	sub    esp,0x1c
c001936f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019373:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001937c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0019385:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001938c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0019393:	0f 85 b0 02 00 00    	jne    c0019649 <IDE::open(int, int, void*)+0x2e1>
c0019399:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001939f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00193a3:	83 e0 7f             	and    eax,0x7f
c00193a6:	3c 05                	cmp    al,0x5
c00193a8:	74 04                	je     c00193ae <IDE::open(int, int, void*)+0x46>
c00193aa:	3c 0f                	cmp    al,0xf
c00193ac:	75 32                	jne    c00193e0 <IDE::open(int, int, void*)+0x78>
c00193ae:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00193b4:	83 e0 fc             	and    eax,0xfffffffc
c00193b7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00193be:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00193c4:	83 e0 fc             	and    eax,0xfffffffc
c00193c7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00193ce:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00193d4:	83 e0 fc             	and    eax,0xfffffffc
c00193d7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00193de:	eb 14                	jmp    c00193f4 <IDE::open(int, int, void*)+0x8c>
c00193e0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00193ea:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00193f4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00193fb:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0019402:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019406:	89 c6                	mov    esi,eax
c0019408:	bf f8 0c 00 00       	mov    edi,0xcf8
c001940d:	c1 e6 10             	shl    esi,0x10
c0019410:	89 e8                	mov    eax,ebp
c0019412:	89 fa                	mov    edx,edi
c0019414:	c1 e0 0b             	shl    eax,0xb
c0019417:	09 f0                	or     eax,esi
c0019419:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0019420:	c1 e6 08             	shl    esi,0x8
c0019423:	09 c6                	or     esi,eax
c0019425:	89 f0                	mov    eax,esi
c0019427:	0d 08 00 00 80       	or     eax,0x80000008
c001942c:	ef                   	out    dx,eax
c001942d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0019432:	89 ca                	mov    edx,ecx
c0019434:	ed                   	in     eax,dx
c0019435:	c1 e8 10             	shr    eax,0x10
c0019438:	3d ff ff 00 00       	cmp    eax,0xffff
c001943d:	0f 84 f5 00 00 00    	je     c0019538 <IDE::open(int, int, void*)+0x1d0>
c0019443:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0019449:	89 fa                	mov    edx,edi
c001944b:	89 f0                	mov    eax,esi
c001944d:	ef                   	out    dx,eax
c001944e:	b0 fe                	mov    al,0xfe
c0019450:	89 ca                	mov    edx,ecx
c0019452:	ee                   	out    dx,al
c0019453:	89 f0                	mov    eax,esi
c0019455:	89 fa                	mov    edx,edi
c0019457:	ef                   	out    dx,eax
c0019458:	89 ca                	mov    edx,ecx
c001945a:	ed                   	in     eax,dx
c001945b:	3c fe                	cmp    al,0xfe
c001945d:	0f 85 a9 00 00 00    	jne    c001950c <IDE::open(int, int, void*)+0x1a4>
c0019463:	8b 15 b8 09 02 c0    	mov    edx,DWORD PTR ds:0xc00209b8
c0019469:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0019470:	74 33                	je     c00194a5 <IDE::open(int, int, void*)+0x13d>
c0019472:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019478:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001947c:	40                   	inc    eax
c001947d:	83 ec 0c             	sub    esp,0xc
c0019480:	0f b6 c0             	movzx  eax,al
c0019483:	50                   	push   eax
c0019484:	55                   	push   ebp
c0019485:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019489:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001948f:	51                   	push   ecx
c0019490:	e8 d3 58 ff ff       	call   c000ed68 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0019495:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001949a:	83 c4 1c             	add    esp,0x1c
c001949d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00194a3:	eb 0a                	jmp    c00194af <IDE::open(int, int, void*)+0x147>
c00194a5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00194af:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00194b6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00194bd:	c1 e1 10             	shl    ecx,0x10
c00194c0:	c1 e0 08             	shl    eax,0x8
c00194c3:	bf f8 0c 00 00       	mov    edi,0xcf8
c00194c8:	09 c1                	or     ecx,eax
c00194ca:	89 fa                	mov    edx,edi
c00194cc:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00194d3:	c1 e0 0b             	shl    eax,0xb
c00194d6:	09 c1                	or     ecx,eax
c00194d8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00194de:	89 c8                	mov    eax,ecx
c00194e0:	ef                   	out    dx,eax
c00194e1:	be fc 0c 00 00       	mov    esi,0xcfc
c00194e6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00194ec:	89 f2                	mov    edx,esi
c00194ee:	ee                   	out    dx,al
c00194ef:	89 c8                	mov    eax,ecx
c00194f1:	89 fa                	mov    edx,edi
c00194f3:	ef                   	out    dx,eax
c00194f4:	89 f2                	mov    edx,esi
c00194f6:	ed                   	in     eax,dx
c00194f7:	0f b6 c0             	movzx  eax,al
c00194fa:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0019500:	74 46                	je     c0019548 <IDE::open(int, int, void*)+0x1e0>
c0019502:	83 ec 0c             	sub    esp,0xc
c0019505:	68 a4 f2 01 c0       	push   0xc001f2a4
c001950a:	eb 34                	jmp    c0019540 <IDE::open(int, int, void*)+0x1d8>
c001950c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0019515:	75 17                	jne    c001952e <IDE::open(int, int, void*)+0x1c6>
c0019517:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001951c:	74 07                	je     c0019525 <IDE::open(int, int, void*)+0x1bd>
c001951e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0019523:	75 09                	jne    c001952e <IDE::open(int, int, void*)+0x1c6>
c0019525:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001952c:	eb 1a                	jmp    c0019548 <IDE::open(int, int, void*)+0x1e0>
c001952e:	83 ec 0c             	sub    esp,0xc
c0019531:	68 ac f2 01 c0       	push   0xc001f2ac
c0019536:	eb 08                	jmp    c0019540 <IDE::open(int, int, void*)+0x1d8>
c0019538:	83 ec 0c             	sub    esp,0xc
c001953b:	68 dd f2 01 c0       	push   0xc001f2dd
c0019540:	e8 a6 71 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c0019545:	83 c4 10             	add    esp,0x10
c0019548:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001954f:	79 1a                	jns    c001956b <IDE::open(int, int, void*)+0x203>
c0019551:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0019557:	83 e0 fc             	and    eax,0xfffffffc
c001955a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0019561:	83 c0 08             	add    eax,0x8
c0019564:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001956b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019571:	89 c2                	mov    edx,eax
c0019573:	83 e2 0f             	and    edx,0xf
c0019576:	66 83 fa 08          	cmp    dx,0x8
c001957a:	75 0a                	jne    c0019586 <IDE::open(int, int, void*)+0x21e>
c001957c:	83 e8 02             	sub    eax,0x2
c001957f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019586:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001958c:	89 c2                	mov    edx,eax
c001958e:	83 e2 0f             	and    edx,0xf
c0019591:	66 83 fa 08          	cmp    dx,0x8
c0019595:	75 0a                	jne    c00195a1 <IDE::open(int, int, void*)+0x239>
c0019597:	83 e8 02             	sub    eax,0x2
c001959a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00195a1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00195a8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00195af:	89 d0                	mov    eax,edx
c00195b1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195b4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00195b8:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00195bc:	8d 4a 01             	lea    ecx,[edx+0x1]
c00195bf:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195c4:	0f b6 c9             	movzx  ecx,cl
c00195c7:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00195ce:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00195d1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00195d5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00195d9:	8d 50 02             	lea    edx,[eax+0x2]
c00195dc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00195e1:	0f b6 d2             	movzx  edx,dl
c00195e4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00195ea:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195ed:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00195f1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00195f5:	8d 48 03             	lea    ecx,[eax+0x3]
c00195f8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195fd:	0f b6 c9             	movzx  ecx,cl
c0019600:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0019606:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019609:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001960d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0019611:	8d 50 04             	lea    edx,[eax+0x4]
c0019614:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001961a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001961f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0019626:	66 85 f6             	test   si,si
c0019629:	74 5b                	je     c0019686 <IDE::open(int, int, void*)+0x31e>
c001962b:	0f b6 d2             	movzx  edx,dl
c001962e:	83 c0 05             	add    eax,0x5
c0019631:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019634:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019638:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001963c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019642:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019647:	eb 3d                	jmp    c0019686 <IDE::open(int, int, void*)+0x31e>
c0019649:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001964f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019656:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001965d:	66 05 06 02          	add    ax,0x206
c0019661:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019668:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001966f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019676:	66 05 06 02          	add    ax,0x206
c001967a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019681:	e9 e5 fe ff ff       	jmp    c001956b <IDE::open(int, int, void*)+0x203>
c0019686:	50                   	push   eax
c0019687:	50                   	push   eax
c0019688:	6a 00                	push   0x0
c001968a:	53                   	push   ebx
c001968b:	e8 5e fa ff ff       	call   c00190ee <IDE::prepareInterrupt(unsigned char)>
c0019690:	5a                   	pop    edx
c0019691:	59                   	pop    ecx
c0019692:	6a 01                	push   0x1
c0019694:	53                   	push   ebx
c0019695:	e8 54 fa ff ff       	call   c00190ee <IDE::prepareInterrupt(unsigned char)>
c001969a:	83 c4 0c             	add    esp,0xc
c001969d:	6a 00                	push   0x0
c001969f:	6a 00                	push   0x0
c00196a1:	53                   	push   ebx
c00196a2:	e8 7b fc ff ff       	call   c0019322 <IDE::enableIRQs(unsigned char, bool)>
c00196a7:	83 c4 0c             	add    esp,0xc
c00196aa:	6a 00                	push   0x0
c00196ac:	6a 01                	push   0x1
c00196ae:	53                   	push   ebx
c00196af:	e8 6e fc ff ff       	call   c0019322 <IDE::enableIRQs(unsigned char, bool)>
c00196b4:	83 c4 10             	add    esp,0x10
c00196b7:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00196be:	74 34                	je     c00196f4 <IDE::open(int, int, void*)+0x38c>
c00196c0:	83 ec 0c             	sub    esp,0xc
c00196c3:	53                   	push   ebx
c00196c4:	6a 01                	push   0x1
c00196c6:	68 ea 92 01 c0       	push   0xc00192ea
c00196cb:	6a 0e                	push   0xe
c00196cd:	53                   	push   ebx
c00196ce:	e8 05 29 ff ff       	call   c000bfd8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196d3:	83 c4 14             	add    esp,0x14
c00196d6:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00196dc:	53                   	push   ebx
c00196dd:	6a 01                	push   0x1
c00196df:	68 06 93 01 c0       	push   0xc0019306
c00196e4:	6a 0f                	push   0xf
c00196e6:	53                   	push   ebx
c00196e7:	e8 ec 28 ff ff       	call   c000bfd8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196ec:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00196f2:	eb 38                	jmp    c001972c <IDE::open(int, int, void*)+0x3c4>
c00196f4:	83 ec 0c             	sub    esp,0xc
c00196f7:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0019701:	53                   	push   ebx
c0019702:	6a 00                	push   0x0
c0019704:	68 ea 92 01 c0       	push   0xc00192ea
c0019709:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001970f:	53                   	push   ebx
c0019710:	e8 c3 28 ff ff       	call   c000bfd8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019715:	83 c4 14             	add    esp,0x14
c0019718:	53                   	push   ebx
c0019719:	6a 00                	push   0x0
c001971b:	68 06 93 01 c0       	push   0xc0019306
c0019720:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0019726:	53                   	push   ebx
c0019727:	e8 ac 28 ff ff       	call   c000bfd8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001972c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001972e:	83 c4 20             	add    esp,0x20
c0019731:	83 ec 0c             	sub    esp,0xc
c0019734:	53                   	push   ebx
c0019735:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0019738:	83 c4 0c             	add    esp,0xc
c001973b:	6a 07                	push   0x7
c001973d:	6a 00                	push   0x0
c001973f:	53                   	push   ebx
c0019740:	e8 8f fa ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c0019745:	83 c4 0c             	add    esp,0xc
c0019748:	6a 07                	push   0x7
c001974a:	6a 01                	push   0x1
c001974c:	53                   	push   ebx
c001974d:	e8 82 fa ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c0019752:	83 c4 0c             	add    esp,0xc
c0019755:	6a 01                	push   0x1
c0019757:	6a 00                	push   0x0
c0019759:	53                   	push   ebx
c001975a:	e8 c3 fb ff ff       	call   c0019322 <IDE::enableIRQs(unsigned char, bool)>
c001975f:	83 c4 0c             	add    esp,0xc
c0019762:	6a 01                	push   0x1
c0019764:	6a 01                	push   0x1
c0019766:	53                   	push   ebx
c0019767:	e8 b6 fb ff ff       	call   c0019322 <IDE::enableIRQs(unsigned char, bool)>
c001976c:	83 c4 2c             	add    esp,0x2c
c001976f:	31 c0                	xor    eax,eax
c0019771:	5b                   	pop    ebx
c0019772:	5e                   	pop    esi
c0019773:	5f                   	pop    edi
c0019774:	5d                   	pop    ebp
c0019775:	c3                   	ret    

c0019776 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0019776:	55                   	push   ebp
c0019777:	57                   	push   edi
c0019778:	56                   	push   esi
c0019779:	53                   	push   ebx
c001977a:	83 ec 1c             	sub    esp,0x1c
c001977d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019781:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019785:	8d 50 f8             	lea    edx,[eax-0x8]
c0019788:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001978c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019790:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019794:	80 fa 03             	cmp    dl,0x3
c0019797:	77 5d                	ja     c00197f6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019799:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001979d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00197a1:	0f b6 db             	movzx  ebx,bl
c00197a4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00197a7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00197ab:	83 ca 80             	or     edx,0xffffff80
c00197ae:	0f b6 d2             	movzx  edx,dl
c00197b1:	52                   	push   edx
c00197b2:	6a 0c                	push   0xc
c00197b4:	53                   	push   ebx
c00197b5:	56                   	push   esi
c00197b6:	e8 59 f9 ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197bb:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00197c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00197c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00197c8:	0f b6 c0             	movzx  eax,al
c00197cb:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00197cf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00197d1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00197d6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00197da:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00197de:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00197e2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00197ea:	83 c4 2c             	add    esp,0x2c
c00197ed:	5b                   	pop    ebx
c00197ee:	5e                   	pop    esi
c00197ef:	5f                   	pop    edi
c00197f0:	5d                   	pop    ebp
c00197f1:	e9 1e f9 ff ff       	jmp    c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197f6:	3c 07                	cmp    al,0x7
c00197f8:	77 10                	ja     c001980a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00197fa:	0f b6 db             	movzx  ebx,bl
c00197fd:	0f b6 d0             	movzx  edx,al
c0019800:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0019808:	eb 2d                	jmp    c0019837 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001980a:	3c 0d                	cmp    al,0xd
c001980c:	77 13                	ja     c0019821 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001980e:	0f b6 db             	movzx  ebx,bl
c0019811:	0f b6 c0             	movzx  eax,al
c0019814:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001981b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001981f:	eb 16                	jmp    c0019837 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019821:	3c 15                	cmp    al,0x15
c0019823:	77 14                	ja     c0019839 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019825:	0f b6 db             	movzx  ebx,bl
c0019828:	0f b6 c0             	movzx  eax,al
c001982b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0019833:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0019837:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019839:	83 c4 1c             	add    esp,0x1c
c001983c:	5b                   	pop    ebx
c001983d:	5e                   	pop    esi
c001983e:	5f                   	pop    edi
c001983f:	5d                   	pop    ebp
c0019840:	c3                   	ret    
c0019841:	90                   	nop

c0019842 <IDE::detect()>:
c0019842:	55                   	push   ebp
c0019843:	57                   	push   edi
c0019844:	56                   	push   esi
c0019845:	53                   	push   ebx
c0019846:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001984c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0019853:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001985a:	0f 85 97 02 00 00    	jne    c0019af7 <IDE::detect()+0x2b5>
c0019860:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0019867:	31 f6                	xor    esi,esi
c0019869:	31 ed                	xor    ebp,ebp
c001986b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019873:	89 e8                	mov    eax,ebp
c0019875:	c1 e0 06             	shl    eax,0x6
c0019878:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019880:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019884:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019888:	c1 e0 04             	shl    eax,0x4
c001988b:	83 c8 a0             	or     eax,0xffffffa0
c001988e:	0f b6 c0             	movzx  eax,al
c0019891:	50                   	push   eax
c0019892:	6a 06                	push   0x6
c0019894:	56                   	push   esi
c0019895:	53                   	push   ebx
c0019896:	e8 79 f8 ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001989b:	83 c4 0c             	add    esp,0xc
c001989e:	6a 0c                	push   0xc
c00198a0:	56                   	push   esi
c00198a1:	53                   	push   ebx
c00198a2:	e8 2d f9 ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c00198a7:	83 c4 0c             	add    esp,0xc
c00198aa:	6a 0c                	push   0xc
c00198ac:	56                   	push   esi
c00198ad:	53                   	push   ebx
c00198ae:	e8 21 f9 ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c00198b3:	83 c4 0c             	add    esp,0xc
c00198b6:	6a 0c                	push   0xc
c00198b8:	56                   	push   esi
c00198b9:	53                   	push   ebx
c00198ba:	e8 15 f9 ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c00198bf:	83 c4 0c             	add    esp,0xc
c00198c2:	6a 0c                	push   0xc
c00198c4:	56                   	push   esi
c00198c5:	53                   	push   ebx
c00198c6:	e8 09 f9 ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c00198cb:	68 ec 00 00 00       	push   0xec
c00198d0:	6a 07                	push   0x7
c00198d2:	56                   	push   esi
c00198d3:	53                   	push   ebx
c00198d4:	e8 3b f8 ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00198d9:	83 c4 1c             	add    esp,0x1c
c00198dc:	6a 0c                	push   0xc
c00198de:	56                   	push   esi
c00198df:	53                   	push   ebx
c00198e0:	e8 ef f8 ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c00198e5:	83 c4 0c             	add    esp,0xc
c00198e8:	6a 0c                	push   0xc
c00198ea:	56                   	push   esi
c00198eb:	53                   	push   ebx
c00198ec:	e8 e3 f8 ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c00198f1:	83 c4 0c             	add    esp,0xc
c00198f4:	6a 0c                	push   0xc
c00198f6:	56                   	push   esi
c00198f7:	53                   	push   ebx
c00198f8:	e8 d7 f8 ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c00198fd:	83 c4 0c             	add    esp,0xc
c0019900:	6a 0c                	push   0xc
c0019902:	56                   	push   esi
c0019903:	53                   	push   ebx
c0019904:	e8 cb f8 ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c0019909:	83 c4 0c             	add    esp,0xc
c001990c:	6a 0c                	push   0xc
c001990e:	56                   	push   esi
c001990f:	53                   	push   ebx
c0019910:	e8 bf f8 ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c0019915:	83 c4 10             	add    esp,0x10
c0019918:	84 c0                	test   al,al
c001991a:	0f 84 5f 01 00 00    	je     c0019a7f <IDE::detect()+0x23d>
c0019920:	31 ff                	xor    edi,edi
c0019922:	50                   	push   eax
c0019923:	6a 0c                	push   0xc
c0019925:	56                   	push   esi
c0019926:	53                   	push   ebx
c0019927:	e8 a8 f8 ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c001992c:	83 c4 10             	add    esp,0x10
c001992f:	a8 01                	test   al,0x1
c0019931:	0f 85 69 01 00 00    	jne    c0019aa0 <IDE::detect()+0x25e>
c0019937:	84 c0                	test   al,al
c0019939:	78 04                	js     c001993f <IDE::detect()+0xfd>
c001993b:	a8 08                	test   al,0x8
c001993d:	75 23                	jne    c0019962 <IDE::detect()+0x120>
c001993f:	47                   	inc    edi
c0019940:	81 ff 17 01 00 00    	cmp    edi,0x117
c0019946:	7e da                	jle    c0019922 <IDE::detect()+0xe0>
c0019948:	83 ec 0c             	sub    esp,0xc
c001994b:	6a 32                	push   0x32
c001994d:	e8 ee a3 ff ff       	call   c0013d40 <milliTenthSleep(unsigned int)>
c0019952:	83 c4 10             	add    esp,0x10
c0019955:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001995b:	75 c5                	jne    c0019922 <IDE::detect()+0xe0>
c001995d:	e9 3e 01 00 00       	jmp    c0019aa0 <IDE::detect()+0x25e>
c0019962:	31 c9                	xor    ecx,ecx
c0019964:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019968:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001996c:	83 ec 0c             	sub    esp,0xc
c001996f:	68 80 00 00 00       	push   0x80
c0019974:	57                   	push   edi
c0019975:	6a 00                	push   0x0
c0019977:	56                   	push   esi
c0019978:	53                   	push   ebx
c0019979:	e8 f8 fd ff ff       	call   c0019776 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001997e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0019983:	89 e8                	mov    eax,ebp
c0019985:	89 d1                	mov    ecx,edx
c0019987:	c1 e0 06             	shl    eax,0x6
c001998a:	01 d8                	add    eax,ebx
c001998c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0019993:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001999a:	89 f2                	mov    edx,esi
c001999c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00199a2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00199a6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00199ac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00199b0:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00199b7:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00199bf:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00199c6:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00199ce:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00199d4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00199db:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00199e1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00199e5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00199e9:	83 c4 20             	add    esp,0x20
c00199ec:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00199ef:	83 c0 02             	add    eax,0x2
c00199f2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00199f8:	83 c7 02             	add    edi,0x2
c00199fb:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00199fe:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019a04:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019a08:	75 e2                	jne    c00199ec <IDE::detect()+0x1aa>
c0019a0a:	89 e8                	mov    eax,ebp
c0019a0c:	c1 e0 06             	shl    eax,0x6
c0019a0f:	01 d8                	add    eax,ebx
c0019a11:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0019a17:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0019a1e:	66 c1 ea 09          	shr    dx,0x9
c0019a22:	83 e2 01             	and    edx,0x1
c0019a25:	84 c9                	test   cl,cl
c0019a27:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0019a2d:	75 22                	jne    c0019a51 <IDE::detect()+0x20f>
c0019a2f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0019a36:	74 46                	je     c0019a7e <IDE::detect()+0x23c>
c0019a38:	83 ec 0c             	sub    esp,0xc
c0019a3b:	68 7c 01 00 00       	push   0x17c
c0019a40:	e8 18 e4 fe ff       	call   c0007e5d <malloc>
c0019a45:	89 c7                	mov    edi,eax
c0019a47:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a4a:	e8 11 05 00 00       	call   c0019f60 <ATA::ATA()>
c0019a4f:	eb 17                	jmp    c0019a68 <IDE::detect()+0x226>
c0019a51:	83 ec 0c             	sub    esp,0xc
c0019a54:	68 84 01 00 00       	push   0x184
c0019a59:	e8 ff e3 fe ff       	call   c0007e5d <malloc>
c0019a5e:	89 c7                	mov    edi,eax
c0019a60:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a63:	e8 f0 0a 00 00       	call   c001a558 <ATAPI::ATAPI()>
c0019a68:	5a                   	pop    edx
c0019a69:	59                   	pop    ecx
c0019a6a:	57                   	push   edi
c0019a6b:	53                   	push   ebx
c0019a6c:	e8 bb 25 ff ff       	call   c000c02c <Device::addChild(Device*)>
c0019a71:	8b 07                	mov    eax,DWORD PTR [edi]
c0019a73:	53                   	push   ebx
c0019a74:	55                   	push   ebp
c0019a75:	6a 00                	push   0x0
c0019a77:	57                   	push   edi
c0019a78:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a7b:	83 c4 20             	add    esp,0x20
c0019a7e:	45                   	inc    ebp
c0019a7f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019a84:	74 0d                	je     c0019a93 <IDE::detect()+0x251>
c0019a86:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019a8e:	e9 e0 fd ff ff       	jmp    c0019873 <IDE::detect()+0x31>
c0019a93:	4e                   	dec    esi
c0019a94:	74 61                	je     c0019af7 <IDE::detect()+0x2b5>
c0019a96:	be 01 00 00 00       	mov    esi,0x1
c0019a9b:	e9 cb fd ff ff       	jmp    c001986b <IDE::detect()+0x29>
c0019aa0:	50                   	push   eax
c0019aa1:	6a 04                	push   0x4
c0019aa3:	56                   	push   esi
c0019aa4:	53                   	push   ebx
c0019aa5:	e8 2a f7 ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c0019aaa:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019aae:	83 c4 0c             	add    esp,0xc
c0019ab1:	6a 05                	push   0x5
c0019ab3:	56                   	push   esi
c0019ab4:	53                   	push   ebx
c0019ab5:	e8 1a f7 ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c0019aba:	83 c4 10             	add    esp,0x10
c0019abd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019ac1:	80 fa 14             	cmp    dl,0x14
c0019ac4:	75 04                	jne    c0019aca <IDE::detect()+0x288>
c0019ac6:	3c eb                	cmp    al,0xeb
c0019ac8:	eb 07                	jmp    c0019ad1 <IDE::detect()+0x28f>
c0019aca:	3c 96                	cmp    al,0x96
c0019acc:	75 b1                	jne    c0019a7f <IDE::detect()+0x23d>
c0019ace:	80 fa 69             	cmp    dl,0x69
c0019ad1:	75 ac                	jne    c0019a7f <IDE::detect()+0x23d>
c0019ad3:	68 a1 00 00 00       	push   0xa1
c0019ad8:	6a 07                	push   0x7
c0019ada:	56                   	push   esi
c0019adb:	53                   	push   ebx
c0019adc:	e8 33 f6 ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ae1:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019ae8:	e8 53 a2 ff ff       	call   c0013d40 <milliTenthSleep(unsigned int)>
c0019aed:	83 c4 10             	add    esp,0x10
c0019af0:	b1 01                	mov    cl,0x1
c0019af2:	e9 6d fe ff ff       	jmp    c0019964 <IDE::detect()+0x122>
c0019af7:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019afd:	5b                   	pop    ebx
c0019afe:	5e                   	pop    esi
c0019aff:	5f                   	pop    edi
c0019b00:	5d                   	pop    ebp
c0019b01:	c3                   	ret    

c0019b02 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019b02:	55                   	push   ebp
c0019b03:	57                   	push   edi
c0019b04:	56                   	push   esi
c0019b05:	53                   	push   ebx
c0019b06:	83 ec 1c             	sub    esp,0x1c
c0019b09:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019b0d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019b11:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019b15:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019b19:	88 c3                	mov    bl,al
c0019b1b:	84 c0                	test   al,al
c0019b1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b21:	0f 84 81 00 00 00    	je     c0019ba8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b27:	83 ec 0c             	sub    esp,0xc
c0019b2a:	68 07 f3 01 c0       	push   0xc001f307
c0019b2f:	e8 b8 10 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0019b34:	83 c4 10             	add    esp,0x10
c0019b37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b3b:	3c 01                	cmp    al,0x1
c0019b3d:	74 63                	je     c0019ba2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019b3f:	3c 02                	cmp    al,0x2
c0019b41:	75 53                	jne    c0019b96 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019b43:	01 f6                	add    esi,esi
c0019b45:	09 ee                	or     esi,ebp
c0019b47:	50                   	push   eax
c0019b48:	89 f0                	mov    eax,esi
c0019b4a:	6a 01                	push   0x1
c0019b4c:	0f b6 f0             	movzx  esi,al
c0019b4f:	c1 e6 06             	shl    esi,0x6
c0019b52:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019b5a:	50                   	push   eax
c0019b5b:	57                   	push   edi
c0019b5c:	e8 73 f6 ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c0019b61:	83 c4 10             	add    esp,0x10
c0019b64:	a8 01                	test   al,0x1
c0019b66:	74 02                	je     c0019b6a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019b68:	b3 07                	mov    bl,0x7
c0019b6a:	a8 02                	test   al,0x2
c0019b6c:	74 02                	je     c0019b70 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019b6e:	b3 03                	mov    bl,0x3
c0019b70:	a8 04                	test   al,0x4
c0019b72:	74 02                	je     c0019b76 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019b74:	b3 14                	mov    bl,0x14
c0019b76:	a8 08                	test   al,0x8
c0019b78:	74 02                	je     c0019b7c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019b7a:	b3 03                	mov    bl,0x3
c0019b7c:	a8 10                	test   al,0x10
c0019b7e:	74 02                	je     c0019b82 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019b80:	b3 15                	mov    bl,0x15
c0019b82:	a8 20                	test   al,0x20
c0019b84:	74 02                	je     c0019b88 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019b86:	b3 03                	mov    bl,0x3
c0019b88:	a8 40                	test   al,0x40
c0019b8a:	74 02                	je     c0019b8e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019b8c:	b3 16                	mov    bl,0x16
c0019b8e:	84 c0                	test   al,al
c0019b90:	79 16                	jns    c0019ba8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b92:	b3 0d                	mov    bl,0xd
c0019b94:	eb 12                	jmp    c0019ba8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b96:	3c 03                	cmp    al,0x3
c0019b98:	74 0c                	je     c0019ba6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019b9a:	3c 04                	cmp    al,0x4
c0019b9c:	75 0a                	jne    c0019ba8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b9e:	b3 08                	mov    bl,0x8
c0019ba0:	eb 06                	jmp    c0019ba8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019ba2:	b3 13                	mov    bl,0x13
c0019ba4:	eb 02                	jmp    c0019ba8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019ba6:	b3 17                	mov    bl,0x17
c0019ba8:	83 c4 1c             	add    esp,0x1c
c0019bab:	88 d8                	mov    al,bl
c0019bad:	5b                   	pop    ebx
c0019bae:	5e                   	pop    esi
c0019baf:	5f                   	pop    edi
c0019bb0:	5d                   	pop    ebp
c0019bb1:	c3                   	ret    

c0019bb2 <IDE::polling(unsigned char, unsigned int)>:
c0019bb2:	55                   	push   ebp
c0019bb3:	bd 04 00 00 00       	mov    ebp,0x4
c0019bb8:	57                   	push   edi
c0019bb9:	56                   	push   esi
c0019bba:	53                   	push   ebx
c0019bbb:	83 ec 0c             	sub    esp,0xc
c0019bbe:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019bc2:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019bc6:	0f b6 f3             	movzx  esi,bl
c0019bc9:	52                   	push   edx
c0019bca:	6a 0c                	push   0xc
c0019bcc:	56                   	push   esi
c0019bcd:	57                   	push   edi
c0019bce:	e8 01 f6 ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c0019bd3:	83 c4 10             	add    esp,0x10
c0019bd6:	4d                   	dec    ebp
c0019bd7:	75 ed                	jne    c0019bc6 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019bd9:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019bde:	50                   	push   eax
c0019bdf:	6a 0c                	push   0xc
c0019be1:	56                   	push   esi
c0019be2:	57                   	push   edi
c0019be3:	e8 ec f5 ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c0019be8:	83 c4 10             	add    esp,0x10
c0019beb:	a8 01                	test   al,0x1
c0019bed:	75 17                	jne    c0019c06 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019bef:	a8 20                	test   al,0x20
c0019bf1:	75 0f                	jne    c0019c02 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019bf3:	4b                   	dec    ebx
c0019bf4:	74 10                	je     c0019c06 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019bf6:	84 c0                	test   al,al
c0019bf8:	78 e4                	js     c0019bde <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019bfa:	a8 08                	test   al,0x8
c0019bfc:	74 e0                	je     c0019bde <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019bfe:	31 c0                	xor    eax,eax
c0019c00:	eb 06                	jmp    c0019c08 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019c02:	b0 01                	mov    al,0x1
c0019c04:	eb 02                	jmp    c0019c08 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019c06:	b0 02                	mov    al,0x2
c0019c08:	83 c4 0c             	add    esp,0xc
c0019c0b:	5b                   	pop    ebx
c0019c0c:	5e                   	pop    esi
c0019c0d:	5f                   	pop    edi
c0019c0e:	5d                   	pop    ebp
c0019c0f:	c3                   	ret    

c0019c10 <SATABus::close(int, int, void*)>:
c0019c10:	31 c0                	xor    eax,eax
c0019c12:	c3                   	ret    
c0019c13:	90                   	nop

c0019c14 <SATABus::detect()>:
c0019c14:	c3                   	ret    
c0019c15:	90                   	nop

c0019c16 <SATABus::SATABus()>:
c0019c16:	83 ec 0c             	sub    esp,0xc
c0019c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c1d:	83 ec 08             	sub    esp,0x8
c0019c20:	68 40 f3 01 c0       	push   0xc001f340
c0019c25:	50                   	push   eax
c0019c26:	e8 45 27 ff ff       	call   c000c370 <HardDiskController::HardDiskController(char const*)>
c0019c2b:	83 c4 10             	add    esp,0x10
c0019c2e:	ba 6c f3 01 c0       	mov    edx,0xc001f36c
c0019c33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c37:	89 10                	mov    DWORD PTR [eax],edx
c0019c39:	83 ec 0c             	sub    esp,0xc
c0019c3c:	6a 50                	push   0x50
c0019c3e:	e8 a5 e6 fe ff       	call   c00082e8 <Phys::allocateContiguousPages(int)>
c0019c43:	83 c4 10             	add    esp,0x10
c0019c46:	89 c2                	mov    edx,eax
c0019c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c4c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019c52:	83 ec 0c             	sub    esp,0xc
c0019c55:	6a 50                	push   0x50
c0019c57:	e8 3d fd fe ff       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c0019c5c:	83 c4 10             	add    esp,0x10
c0019c5f:	89 c2                	mov    edx,eax
c0019c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c65:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019c6b:	a1 b0 0a 02 c0       	mov    eax,ds:0xc0020ab0
c0019c70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c74:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019c7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c7e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019c84:	83 ec 0c             	sub    esp,0xc
c0019c87:	6a 03                	push   0x3
c0019c89:	6a 50                	push   0x50
c0019c8b:	51                   	push   ecx
c0019c8c:	52                   	push   edx
c0019c8d:	50                   	push   eax
c0019c8e:	e8 95 06 ff ff       	call   c000a328 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019c93:	83 c4 20             	add    esp,0x20
c0019c96:	90                   	nop
c0019c97:	83 c4 0c             	add    esp,0xc
c0019c9a:	c3                   	ret    
c0019c9b:	90                   	nop

c0019c9c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019c9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ca0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019ca3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019ca6:	09 c2                	or     edx,eax
c0019ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019cb2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019cb4:	31 c0                	xor    eax,eax
c0019cb6:	c1 e9 08             	shr    ecx,0x8
c0019cb9:	83 e1 0f             	and    ecx,0xf
c0019cbc:	39 c8                	cmp    eax,ecx
c0019cbe:	74 0a                	je     c0019cca <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019cc0:	f6 c2 01             	test   dl,0x1
c0019cc3:	74 08                	je     c0019ccd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019cc5:	d1 ea                	shr    edx,1
c0019cc7:	40                   	inc    eax
c0019cc8:	eb f2                	jmp    c0019cbc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019cca:	83 c8 ff             	or     eax,0xffffffff
c0019ccd:	c3                   	ret    

c0019cce <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019cce:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019cd2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019cd5:	89 c2                	mov    edx,eax
c0019cd7:	c1 ea 08             	shr    edx,0x8
c0019cda:	83 e2 0f             	and    edx,0xf
c0019cdd:	fe ca                	dec    dl
c0019cdf:	75 31                	jne    c0019d12 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019ce1:	83 e0 0f             	and    eax,0xf
c0019ce4:	3c 03                	cmp    al,0x3
c0019ce6:	75 2a                	jne    c0019d12 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019ce8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019ceb:	b8 02 00 00 00       	mov    eax,0x2
c0019cf0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019cf6:	74 1c                	je     c0019d14 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019cf8:	b8 04 00 00 00       	mov    eax,0x4
c0019cfd:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019d03:	74 0f                	je     c0019d14 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019d05:	31 c0                	xor    eax,eax
c0019d07:	83 fa 03             	cmp    edx,0x3
c0019d0a:	0f 94 c0             	sete   al
c0019d0d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019d11:	c3                   	ret    
c0019d12:	31 c0                	xor    eax,eax
c0019d14:	c3                   	ret    
c0019d15:	90                   	nop

c0019d16 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019d16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d1a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d1d:	0f ba e2 0f          	bt     edx,0xf
c0019d21:	72 f7                	jb     c0019d1a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019d23:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d26:	83 ca 10             	or     edx,0x10
c0019d29:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d2c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d2f:	83 ca 01             	or     edx,0x1
c0019d32:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d35:	c3                   	ret    

c0019d36 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019d36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d3a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d3d:	83 e2 fe             	and    edx,0xfffffffe
c0019d40:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d43:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d46:	83 e2 ef             	and    edx,0xffffffef
c0019d49:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d4c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d4f:	0f ba e2 0e          	bt     edx,0xe
c0019d53:	72 f7                	jb     c0019d4c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d55:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d58:	0f ba e2 0f          	bt     edx,0xf
c0019d5c:	72 ee                	jb     c0019d4c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d5e:	c3                   	ret    
c0019d5f:	90                   	nop

c0019d60 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019d60:	55                   	push   ebp
c0019d61:	57                   	push   edi
c0019d62:	56                   	push   esi
c0019d63:	53                   	push   ebx
c0019d64:	83 ec 1c             	sub    esp,0x1c
c0019d67:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019d6b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019d6f:	53                   	push   ebx
c0019d70:	56                   	push   esi
c0019d71:	e8 c0 ff ff ff       	call   c0019d36 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019d76:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019d7a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d80:	83 ec 0c             	sub    esp,0xc
c0019d83:	c1 e5 0a             	shl    ebp,0xa
c0019d86:	01 e8                	add    eax,ebp
c0019d88:	89 03                	mov    DWORD PTR [ebx],eax
c0019d8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d8c:	68 00 04 00 00       	push   0x400
c0019d91:	6a 00                	push   0x0
c0019d93:	50                   	push   eax
c0019d94:	e8 57 67 fe ff       	call   c00004f0 <memset>
c0019d99:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019d9f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019da3:	01 e8                	add    eax,ebp
c0019da5:	83 c4 1c             	add    esp,0x1c
c0019da8:	89 03                	mov    DWORD PTR [ebx],eax
c0019daa:	c1 e2 08             	shl    edx,0x8
c0019dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019db4:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019dba:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019dc0:	01 f8                	add    eax,edi
c0019dc2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019dc5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019dc8:	68 00 01 00 00       	push   0x100
c0019dcd:	6a 00                	push   0x0
c0019dcf:	50                   	push   eax
c0019dd0:	e8 1b 67 fe ff       	call   c00004f0 <memset>
c0019dd5:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019ddb:	01 fa                	add    edx,edi
c0019ddd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019de1:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019de4:	c1 e7 0d             	shl    edi,0xd
c0019de7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019dee:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019df4:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019dfa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019dfe:	31 ff                	xor    edi,edi
c0019e00:	83 c4 10             	add    esp,0x10
c0019e03:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e0d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019e13:	83 c5 20             	add    ebp,0x20
c0019e16:	01 f8                	add    eax,edi
c0019e18:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019e1b:	52                   	push   edx
c0019e1c:	68 00 01 00 00       	push   0x100
c0019e21:	6a 00                	push   0x0
c0019e23:	50                   	push   eax
c0019e24:	e8 c7 66 fe ff       	call   c00004f0 <memset>
c0019e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e2d:	83 c4 10             	add    esp,0x10
c0019e30:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019e36:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019e3d:	01 f8                	add    eax,edi
c0019e3f:	81 c7 00 01 00 00    	add    edi,0x100
c0019e45:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019e48:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019e4e:	75 b3                	jne    c0019e03 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019e50:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e57:	50                   	push   eax
c0019e58:	50                   	push   eax
c0019e59:	53                   	push   ebx
c0019e5a:	56                   	push   esi
c0019e5b:	e8 b6 fe ff ff       	call   c0019d16 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019e60:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e67:	83 c4 2c             	add    esp,0x2c
c0019e6a:	5b                   	pop    ebx
c0019e6b:	5e                   	pop    esi
c0019e6c:	5f                   	pop    edi
c0019e6d:	5d                   	pop    ebp
c0019e6e:	c3                   	ret    
c0019e6f:	90                   	nop

c0019e70 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019e70:	55                   	push   ebp
c0019e71:	57                   	push   edi
c0019e72:	56                   	push   esi
c0019e73:	53                   	push   ebx
c0019e74:	31 db                	xor    ebx,ebx
c0019e76:	83 ec 0c             	sub    esp,0xc
c0019e79:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019e7d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e81:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019e84:	f7 c7 01 00 00 00    	test   edi,0x1
c0019e8a:	74 7a                	je     c0019f06 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e8c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019e90:	89 d8                	mov    eax,ebx
c0019e92:	c1 e0 07             	shl    eax,0x7
c0019e95:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019e9c:	55                   	push   ebp
c0019e9d:	56                   	push   esi
c0019e9e:	e8 2b fe ff ff       	call   c0019cce <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019ea3:	5a                   	pop    edx
c0019ea4:	83 f8 01             	cmp    eax,0x1
c0019ea7:	59                   	pop    ecx
c0019ea8:	75 21                	jne    c0019ecb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019eaa:	50                   	push   eax
c0019eab:	53                   	push   ebx
c0019eac:	55                   	push   ebp
c0019ead:	56                   	push   esi
c0019eae:	e8 ad fe ff ff       	call   c0019d60 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019eb3:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019eba:	e8 9e df fe ff       	call   c0007e5d <malloc>
c0019ebf:	89 c5                	mov    ebp,eax
c0019ec1:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ec4:	e8 43 0d 00 00       	call   c001ac0c <SATA::SATA()>
c0019ec9:	eb 24                	jmp    c0019eef <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019ecb:	83 f8 04             	cmp    eax,0x4
c0019ece:	75 36                	jne    c0019f06 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019ed0:	51                   	push   ecx
c0019ed1:	53                   	push   ebx
c0019ed2:	55                   	push   ebp
c0019ed3:	56                   	push   esi
c0019ed4:	e8 87 fe ff ff       	call   c0019d60 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019ed9:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019ee0:	e8 78 df fe ff       	call   c0007e5d <malloc>
c0019ee5:	89 c5                	mov    ebp,eax
c0019ee7:	89 04 24             	mov    DWORD PTR [esp],eax
c0019eea:	e8 79 10 00 00       	call   c001af68 <SATAPI::SATAPI()>
c0019eef:	58                   	pop    eax
c0019ef0:	5a                   	pop    edx
c0019ef1:	55                   	push   ebp
c0019ef2:	56                   	push   esi
c0019ef3:	e8 34 21 ff ff       	call   c000c02c <Device::addChild(Device*)>
c0019ef8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019efb:	56                   	push   esi
c0019efc:	6a 00                	push   0x0
c0019efe:	53                   	push   ebx
c0019eff:	55                   	push   ebp
c0019f00:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019f03:	83 c4 20             	add    esp,0x20
c0019f06:	d1 ef                	shr    edi,1
c0019f08:	43                   	inc    ebx
c0019f09:	83 fb 20             	cmp    ebx,0x20
c0019f0c:	0f 85 72 ff ff ff    	jne    c0019e84 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019f12:	83 c4 0c             	add    esp,0xc
c0019f15:	5b                   	pop    ebx
c0019f16:	5e                   	pop    esi
c0019f17:	5f                   	pop    edi
c0019f18:	5d                   	pop    ebp
c0019f19:	c3                   	ret    

c0019f1a <SATABus::open(int, int, void*)>:
c0019f1a:	83 ec 14             	sub    esp,0x14
c0019f1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f21:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019f27:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019f2d:	52                   	push   edx
c0019f2e:	50                   	push   eax
c0019f2f:	e8 3c ff ff ff       	call   c0019e70 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019f34:	31 c0                	xor    eax,eax
c0019f36:	83 c4 1c             	add    esp,0x1c
c0019f39:	c3                   	ret    

c0019f3a <ATA::close(int, int, void*)>:
c0019f3a:	83 ec 0c             	sub    esp,0xc
c0019f3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f41:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019f47:	85 c0                	test   eax,eax
c0019f49:	74 0c                	je     c0019f57 <ATA::close(int, int, void*)+0x1d>
c0019f4b:	83 ec 0c             	sub    esp,0xc
c0019f4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0019f50:	50                   	push   eax
c0019f51:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019f54:	83 c4 10             	add    esp,0x10
c0019f57:	31 c0                	xor    eax,eax
c0019f59:	83 c4 0c             	add    esp,0xc
c0019f5c:	c3                   	ret    
c0019f5d:	90                   	nop

c0019f5e <ATA::powerSaving(PowerSavingLevel)>:
c0019f5e:	c3                   	ret    
c0019f5f:	90                   	nop

c0019f60 <ATA::ATA()>:
c0019f60:	83 ec 0c             	sub    esp,0xc
c0019f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f67:	83 ec 04             	sub    esp,0x4
c0019f6a:	68 00 02 00 00       	push   0x200
c0019f6f:	68 39 f4 01 c0       	push   0xc001f439
c0019f74:	50                   	push   eax
c0019f75:	e8 80 24 ff ff       	call   c000c3fa <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019f7a:	83 c4 10             	add    esp,0x10
c0019f7d:	ba ac f3 01 c0       	mov    edx,0xc001f3ac
c0019f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f86:	89 10                	mov    DWORD PTR [eax],edx
c0019f88:	90                   	nop
c0019f89:	83 c4 0c             	add    esp,0xc
c0019f8c:	c3                   	ret    
c0019f8d:	90                   	nop

c0019f8e <ATA::flush(bool)>:
c0019f8e:	53                   	push   ebx
c0019f8f:	83 ec 08             	sub    esp,0x8
c0019f92:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019f97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f9b:	19 c0                	sbb    eax,eax
c0019f9d:	83 e0 fd             	and    eax,0xfffffffd
c0019fa0:	05 ea 00 00 00       	add    eax,0xea
c0019fa5:	50                   	push   eax
c0019fa6:	6a 07                	push   0x7
c0019fa8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019faf:	50                   	push   eax
c0019fb0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019fb6:	e8 59 f1 ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019fbb:	83 c4 0c             	add    esp,0xc
c0019fbe:	6a 00                	push   0x0
c0019fc0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fc7:	50                   	push   eax
c0019fc8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019fce:	e8 df fb ff ff       	call   c0019bb2 <IDE::polling(unsigned char, unsigned int)>
c0019fd3:	83 c4 18             	add    esp,0x18
c0019fd6:	5b                   	pop    ebx
c0019fd7:	c3                   	ret    

c0019fd8 <ATA::readyForCommand()>:
c0019fd8:	56                   	push   esi
c0019fd9:	53                   	push   ebx
c0019fda:	53                   	push   ebx
c0019fdb:	31 db                	xor    ebx,ebx
c0019fdd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019fe1:	51                   	push   ecx
c0019fe2:	6a 0c                	push   0xc
c0019fe4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019feb:	50                   	push   eax
c0019fec:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019ff2:	e8 dd f1 ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c0019ff7:	83 c4 10             	add    esp,0x10
c0019ffa:	a8 88                	test   al,0x88
c0019ffc:	74 1f                	je     c001a01d <ATA::readyForCommand()+0x45>
c0019ffe:	43                   	inc    ebx
c0019fff:	83 fb 63             	cmp    ebx,0x63
c001a002:	7e dd                	jle    c0019fe1 <ATA::readyForCommand()+0x9>
c001a004:	83 ec 0c             	sub    esp,0xc
c001a007:	6a 0a                	push   0xa
c001a009:	e8 32 9d ff ff       	call   c0013d40 <milliTenthSleep(unsigned int)>
c001a00e:	83 c4 10             	add    esp,0x10
c001a011:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001a017:	75 c8                	jne    c0019fe1 <ATA::readyForCommand()+0x9>
c001a019:	31 c0                	xor    eax,eax
c001a01b:	eb 02                	jmp    c001a01f <ATA::readyForCommand()+0x47>
c001a01d:	b0 01                	mov    al,0x1
c001a01f:	5a                   	pop    edx
c001a020:	5b                   	pop    ebx
c001a021:	5e                   	pop    esi
c001a022:	c3                   	ret    
c001a023:	90                   	nop

c001a024 <ATA::access(unsigned long long, int, void*, bool)>:
c001a024:	55                   	push   ebp
c001a025:	57                   	push   edi
c001a026:	56                   	push   esi
c001a027:	53                   	push   ebx
c001a028:	83 ec 2c             	sub    esp,0x2c
c001a02b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a02f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a033:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a037:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a03b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001a03f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a043:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a047:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001a04d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a051:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a057:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a05b:	c1 e0 06             	shl    eax,0x6
c001a05e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001a066:	74 5d                	je     c001a0c5 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001a068:	89 fa                	mov    edx,edi
c001a06a:	89 f0                	mov    eax,esi
c001a06c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001a070:	c1 ea 1c             	shr    edx,0x1c
c001a073:	89 d1                	mov    ecx,edx
c001a075:	09 c1                	or     ecx,eax
c001a077:	74 25                	je     c001a09e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001a079:	31 ed                	xor    ebp,ebp
c001a07b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001a082:	89 fa                	mov    edx,edi
c001a084:	89 f0                	mov    eax,esi
c001a086:	0f ad d0             	shrd   eax,edx,cl
c001a089:	d3 ea                	shr    edx,cl
c001a08b:	f6 c1 20             	test   cl,0x20
c001a08e:	74 02                	je     c001a092 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001a090:	89 d0                	mov    eax,edx
c001a092:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001a096:	45                   	inc    ebp
c001a097:	83 fd 06             	cmp    ebp,0x6
c001a09a:	75 df                	jne    c001a07b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001a09c:	eb 76                	jmp    c001a114 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001a09e:	89 f0                	mov    eax,esi
c001a0a0:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001a0a5:	89 fa                	mov    edx,edi
c001a0a7:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a0ae:	0f ac d0 10          	shrd   eax,edx,0x10
c001a0b2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a0b7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a0bb:	c1 ee 18             	shr    esi,0x18
c001a0be:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a0c3:	eb 56                	jmp    c001a11b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a0c5:	6a 00                	push   0x0
c001a0c7:	6a 3f                	push   0x3f
c001a0c9:	57                   	push   edi
c001a0ca:	56                   	push   esi
c001a0cb:	e8 60 22 00 00       	call   c001c330 <__umoddi3>
c001a0d0:	83 c4 10             	add    esp,0x10
c001a0d3:	40                   	inc    eax
c001a0d4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a0d8:	6a 00                	push   0x0
c001a0da:	68 f0 03 00 00       	push   0x3f0
c001a0df:	57                   	push   edi
c001a0e0:	56                   	push   esi
c001a0e1:	e8 4a 21 00 00       	call   c001c230 <__udivdi3>
c001a0e6:	83 c4 10             	add    esp,0x10
c001a0e9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a0ee:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a0f5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a0fa:	6a 00                	push   0x0
c001a0fc:	6a 3f                	push   0x3f
c001a0fe:	57                   	push   edi
c001a0ff:	56                   	push   esi
c001a100:	e8 2b 21 00 00       	call   c001c230 <__udivdi3>
c001a105:	83 c4 10             	add    esp,0x10
c001a108:	89 c6                	mov    esi,eax
c001a10a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a10f:	83 e6 0f             	and    esi,0xf
c001a112:	eb 07                	jmp    c001a11b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a114:	31 f6                	xor    esi,esi
c001a116:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a11b:	bf 01 00 00 00       	mov    edi,0x1
c001a120:	50                   	push   eax
c001a121:	6a 00                	push   0x0
c001a123:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a12a:	50                   	push   eax
c001a12b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a12f:	e8 ee f1 ff ff       	call   c0019322 <IDE::enableIRQs(unsigned char, bool)>
c001a134:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a137:	e8 9c fe ff ff       	call   c0019fd8 <ATA::readyForCommand()>
c001a13c:	83 c4 10             	add    esp,0x10
c001a13f:	84 c0                	test   al,al
c001a141:	0f 84 4e 02 00 00    	je     c001a395 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a147:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a14d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a153:	c1 e0 04             	shl    eax,0x4
c001a156:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a15d:	09 c6                	or     esi,eax
c001a15f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a164:	75 05                	jne    c001a16b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a166:	83 ce a0             	or     esi,0xffffffa0
c001a169:	eb 03                	jmp    c001a16e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a16b:	83 ce e0             	or     esi,0xffffffe0
c001a16e:	89 f0                	mov    eax,esi
c001a170:	0f b6 f0             	movzx  esi,al
c001a173:	56                   	push   esi
c001a174:	6a 06                	push   0x6
c001a176:	51                   	push   ecx
c001a177:	52                   	push   edx
c001a178:	e8 97 ef ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a17d:	83 c4 10             	add    esp,0x10
c001a180:	6a 00                	push   0x0
c001a182:	6a 01                	push   0x1
c001a184:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a18b:	50                   	push   eax
c001a18c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a192:	e8 7d ef ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a197:	83 c4 10             	add    esp,0x10
c001a19a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a19f:	75 6e                	jne    c001a20f <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a1a1:	6a 00                	push   0x0
c001a1a3:	6a 08                	push   0x8
c001a1a5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1ac:	50                   	push   eax
c001a1ad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1b3:	e8 5c ef ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1b8:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a1bd:	50                   	push   eax
c001a1be:	6a 09                	push   0x9
c001a1c0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1c7:	50                   	push   eax
c001a1c8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1ce:	e8 41 ef ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1d3:	83 c4 20             	add    esp,0x20
c001a1d6:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a1db:	50                   	push   eax
c001a1dc:	6a 0a                	push   0xa
c001a1de:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1e5:	50                   	push   eax
c001a1e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1ec:	e8 23 ef ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1f1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a1f6:	50                   	push   eax
c001a1f7:	6a 0b                	push   0xb
c001a1f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a200:	50                   	push   eax
c001a201:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a207:	e8 08 ef ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a20c:	83 c4 20             	add    esp,0x20
c001a20f:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a214:	50                   	push   eax
c001a215:	6a 02                	push   0x2
c001a217:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a21e:	50                   	push   eax
c001a21f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a225:	e8 ea ee ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a22a:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a22f:	50                   	push   eax
c001a230:	6a 03                	push   0x3
c001a232:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a239:	50                   	push   eax
c001a23a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a240:	e8 cf ee ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a245:	83 c4 20             	add    esp,0x20
c001a248:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a24d:	50                   	push   eax
c001a24e:	6a 04                	push   0x4
c001a250:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a257:	50                   	push   eax
c001a258:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a25e:	e8 b1 ee ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a263:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a268:	50                   	push   eax
c001a269:	6a 05                	push   0x5
c001a26b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a272:	50                   	push   eax
c001a273:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a279:	e8 96 ee ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a27e:	83 c4 20             	add    esp,0x20
c001a281:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a286:	0f 94 c0             	sete   al
c001a289:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a28e:	74 09                	je     c001a299 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a290:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a297:	eb 07                	jmp    c001a2a0 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a299:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a2a0:	0f b6 c0             	movzx  eax,al
c001a2a3:	50                   	push   eax
c001a2a4:	6a 07                	push   0x7
c001a2a6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2ad:	50                   	push   eax
c001a2ae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2b4:	e8 5b ee ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a2b9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a2bd:	83 c4 10             	add    esp,0x10
c001a2c0:	85 f6                	test   esi,esi
c001a2c2:	0f 84 ae 00 00 00    	je     c001a376 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a2c8:	50                   	push   eax
c001a2c9:	6a 01                	push   0x1
c001a2cb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2d2:	50                   	push   eax
c001a2d3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2d9:	e8 d4 f8 ff ff       	call   c0019bb2 <IDE::polling(unsigned char, unsigned int)>
c001a2de:	83 c4 10             	add    esp,0x10
c001a2e1:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a2e7:	84 c0                	test   al,al
c001a2e9:	74 20                	je     c001a30b <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a2eb:	0f b6 f8             	movzx  edi,al
c001a2ee:	0f b6 d2             	movzx  edx,dl
c001a2f1:	57                   	push   edi
c001a2f2:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a2f9:	50                   	push   eax
c001a2fa:	52                   	push   edx
c001a2fb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a301:	e8 fc f7 ff ff       	call   c0019b02 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a306:	e9 87 00 00 00       	jmp    c001a392 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a30b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a310:	74 33                	je     c001a345 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a312:	31 ed                	xor    ebp,ebp
c001a314:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a318:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a31c:	50                   	push   eax
c001a31d:	50                   	push   eax
c001a31e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a325:	50                   	push   eax
c001a326:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a32c:	e8 d1 ed ff ff       	call   c0019102 <IDE::getBase(unsigned char)>
c001a331:	89 c2                	mov    edx,eax
c001a333:	89 f8                	mov    eax,edi
c001a335:	66 ef                	out    dx,ax
c001a337:	45                   	inc    ebp
c001a338:	83 c4 10             	add    esp,0x10
c001a33b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a341:	75 d1                	jne    c001a314 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a343:	eb 23                	jmp    c001a368 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a345:	0f b6 d2             	movzx  edx,dl
c001a348:	51                   	push   ecx
c001a349:	51                   	push   ecx
c001a34a:	52                   	push   edx
c001a34b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a351:	e8 ac ed ff ff       	call   c0019102 <IDE::getBase(unsigned char)>
c001a356:	b9 00 01 00 00       	mov    ecx,0x100
c001a35b:	89 c2                	mov    edx,eax
c001a35d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a361:	fc                   	cld    
c001a362:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a365:	83 c4 10             	add    esp,0x10
c001a368:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a370:	4e                   	dec    esi
c001a371:	e9 4a ff ff ff       	jmp    c001a2c0 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a376:	31 ff                	xor    edi,edi
c001a378:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a37d:	74 16                	je     c001a395 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a37f:	50                   	push   eax
c001a380:	50                   	push   eax
c001a381:	31 c0                	xor    eax,eax
c001a383:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a388:	0f 94 c0             	sete   al
c001a38b:	50                   	push   eax
c001a38c:	53                   	push   ebx
c001a38d:	e8 fc fb ff ff       	call   c0019f8e <ATA::flush(bool)>
c001a392:	83 c4 10             	add    esp,0x10
c001a395:	83 c4 2c             	add    esp,0x2c
c001a398:	89 f8                	mov    eax,edi
c001a39a:	5b                   	pop    ebx
c001a39b:	5e                   	pop    esi
c001a39c:	5f                   	pop    edi
c001a39d:	5d                   	pop    ebp
c001a39e:	c3                   	ret    
c001a39f:	90                   	nop

c001a3a0 <ATA::read(unsigned long long, int, void*)>:
c001a3a0:	57                   	push   edi
c001a3a1:	b8 04 00 00 00       	mov    eax,0x4
c001a3a6:	56                   	push   esi
c001a3a7:	53                   	push   ebx
c001a3a8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3ac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a3b0:	8d 7a ff             	lea    edi,[edx-0x1]
c001a3b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a3b7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a3bb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a3c1:	77 25                	ja     c001a3e8 <ATA::read(unsigned long long, int, void*)+0x48>
c001a3c3:	b8 06 00 00 00       	mov    eax,0x6
c001a3c8:	85 f6                	test   esi,esi
c001a3ca:	74 1c                	je     c001a3e8 <ATA::read(unsigned long long, int, void*)+0x48>
c001a3cc:	50                   	push   eax
c001a3cd:	50                   	push   eax
c001a3ce:	6a 00                	push   0x0
c001a3d0:	56                   	push   esi
c001a3d1:	52                   	push   edx
c001a3d2:	53                   	push   ebx
c001a3d3:	51                   	push   ecx
c001a3d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3d8:	e8 47 fc ff ff       	call   c001a024 <ATA::access(unsigned long long, int, void*, bool)>
c001a3dd:	83 c4 20             	add    esp,0x20
c001a3e0:	85 c0                	test   eax,eax
c001a3e2:	0f 95 c0             	setne  al
c001a3e5:	0f b6 c0             	movzx  eax,al
c001a3e8:	5b                   	pop    ebx
c001a3e9:	5e                   	pop    esi
c001a3ea:	5f                   	pop    edi
c001a3eb:	c3                   	ret    

c001a3ec <ATA::write(unsigned long long, int, void*)>:
c001a3ec:	57                   	push   edi
c001a3ed:	b8 04 00 00 00       	mov    eax,0x4
c001a3f2:	56                   	push   esi
c001a3f3:	53                   	push   ebx
c001a3f4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a3fc:	8d 7a ff             	lea    edi,[edx-0x1]
c001a3ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a403:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a407:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a40d:	77 25                	ja     c001a434 <ATA::write(unsigned long long, int, void*)+0x48>
c001a40f:	b8 06 00 00 00       	mov    eax,0x6
c001a414:	85 f6                	test   esi,esi
c001a416:	74 1c                	je     c001a434 <ATA::write(unsigned long long, int, void*)+0x48>
c001a418:	50                   	push   eax
c001a419:	50                   	push   eax
c001a41a:	6a 01                	push   0x1
c001a41c:	56                   	push   esi
c001a41d:	52                   	push   edx
c001a41e:	53                   	push   ebx
c001a41f:	51                   	push   ecx
c001a420:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a424:	e8 fb fb ff ff       	call   c001a024 <ATA::access(unsigned long long, int, void*, bool)>
c001a429:	83 c4 20             	add    esp,0x20
c001a42c:	85 c0                	test   eax,eax
c001a42e:	0f 95 c0             	setne  al
c001a431:	0f b6 c0             	movzx  eax,al
c001a434:	5b                   	pop    ebx
c001a435:	5e                   	pop    esi
c001a436:	5f                   	pop    edi
c001a437:	c3                   	ret    

c001a438 <ATA::detectCHS()>:
c001a438:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a43c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a442:	c1 e0 06             	shl    eax,0x6
c001a445:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a44b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a455:	c7 44 24 04 90 f3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f390
c001a45d:	e9 89 62 ff ff       	jmp    c00106eb <Krnl::panic(char const*)>

c001a462 <ATA::open(int, int, void*)>:
c001a462:	53                   	push   ebx
c001a463:	83 ec 08             	sub    esp,0x8
c001a466:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a46a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a46e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a472:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a478:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a47e:	c1 e0 06             	shl    eax,0x6
c001a481:	01 d0                	add    eax,edx
c001a483:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a48a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a490:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a497:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a4a1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a4a7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a4ae:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a4b5:	75 0c                	jne    c001a4c3 <ATA::open(int, int, void*)+0x61>
c001a4b7:	83 ec 0c             	sub    esp,0xc
c001a4ba:	53                   	push   ebx
c001a4bb:	e8 78 ff ff ff       	call   c001a438 <ATA::detectCHS()>
c001a4c0:	83 c4 10             	add    esp,0x10
c001a4c3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a4c9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a4cf:	c1 e0 06             	shl    eax,0x6
c001a4d2:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a4d9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a4e3:	d1 e8                	shr    eax,1
c001a4e5:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a4eb:	6a 04                	push   0x4
c001a4ed:	6a 0c                	push   0xc
c001a4ef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a4f6:	50                   	push   eax
c001a4f7:	52                   	push   edx
c001a4f8:	e8 17 ec ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4fd:	90                   	nop
c001a4fe:	90                   	nop
c001a4ff:	6a 00                	push   0x0
c001a501:	6a 0c                	push   0xc
c001a503:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a50a:	50                   	push   eax
c001a50b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a511:	e8 fe eb ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a516:	83 c4 14             	add    esp,0x14
c001a519:	53                   	push   ebx
c001a51a:	e8 43 1f ff ff       	call   c000c462 <PhysicalDisk::startCache()>
c001a51f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a522:	e8 b3 2f ff ff       	call   c000d4da <createPartitionsForDisk(PhysicalDisk*)>
c001a527:	31 c0                	xor    eax,eax
c001a529:	83 c4 18             	add    esp,0x18
c001a52c:	5b                   	pop    ebx
c001a52d:	c3                   	ret    

c001a52e <ATAPI::write(unsigned long long, int, void*)>:
c001a52e:	b8 03 00 00 00       	mov    eax,0x3
c001a533:	c3                   	ret    

c001a534 <ATAPI::close(int, int, void*)>:
c001a534:	83 ec 0c             	sub    esp,0xc
c001a537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a53b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a541:	85 c0                	test   eax,eax
c001a543:	74 0c                	je     c001a551 <ATAPI::close(int, int, void*)+0x1d>
c001a545:	83 ec 0c             	sub    esp,0xc
c001a548:	8b 10                	mov    edx,DWORD PTR [eax]
c001a54a:	50                   	push   eax
c001a54b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a54e:	83 c4 10             	add    esp,0x10
c001a551:	31 c0                	xor    eax,eax
c001a553:	83 c4 0c             	add    esp,0xc
c001a556:	c3                   	ret    
c001a557:	90                   	nop

c001a558 <ATAPI::ATAPI()>:
c001a558:	83 ec 0c             	sub    esp,0xc
c001a55b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a55f:	83 ec 04             	sub    esp,0x4
c001a562:	68 00 08 00 00       	push   0x800
c001a567:	68 d9 f4 01 c0       	push   0xc001f4d9
c001a56c:	50                   	push   eax
c001a56d:	e8 88 1e ff ff       	call   c000c3fa <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a572:	83 c4 10             	add    esp,0x10
c001a575:	ba f4 f3 01 c0       	mov    edx,0xc001f3f4
c001a57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a57e:	89 10                	mov    DWORD PTR [eax],edx
c001a580:	90                   	nop
c001a581:	83 c4 0c             	add    esp,0xc
c001a584:	c3                   	ret    
c001a585:	90                   	nop

c001a586 <ATAPI::readyForCommand()>:
c001a586:	56                   	push   esi
c001a587:	53                   	push   ebx
c001a588:	53                   	push   ebx
c001a589:	31 db                	xor    ebx,ebx
c001a58b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a58f:	51                   	push   ecx
c001a590:	6a 0c                	push   0xc
c001a592:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a599:	50                   	push   eax
c001a59a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a5a0:	e8 2f ec ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c001a5a5:	83 c4 10             	add    esp,0x10
c001a5a8:	a8 88                	test   al,0x88
c001a5aa:	74 25                	je     c001a5d1 <ATAPI::readyForCommand()+0x4b>
c001a5ac:	43                   	inc    ebx
c001a5ad:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a5b3:	7e da                	jle    c001a58f <ATAPI::readyForCommand()+0x9>
c001a5b5:	83 ec 0c             	sub    esp,0xc
c001a5b8:	68 5e 01 00 00       	push   0x15e
c001a5bd:	e8 7e 97 ff ff       	call   c0013d40 <milliTenthSleep(unsigned int)>
c001a5c2:	83 c4 10             	add    esp,0x10
c001a5c5:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a5cb:	75 c2                	jne    c001a58f <ATAPI::readyForCommand()+0x9>
c001a5cd:	31 c0                	xor    eax,eax
c001a5cf:	eb 02                	jmp    c001a5d3 <ATAPI::readyForCommand()+0x4d>
c001a5d1:	b0 01                	mov    al,0x1
c001a5d3:	5a                   	pop    edx
c001a5d4:	5b                   	pop    ebx
c001a5d5:	5e                   	pop    esi
c001a5d6:	c3                   	ret    
c001a5d7:	90                   	nop

c001a5d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a5d8:	55                   	push   ebp
c001a5d9:	57                   	push   edi
c001a5da:	56                   	push   esi
c001a5db:	53                   	push   ebx
c001a5dc:	83 ec 20             	sub    esp,0x20
c001a5df:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a5e3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a5e7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a5eb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a5ef:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a5f3:	6a 01                	push   0x1
c001a5f5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5fc:	50                   	push   eax
c001a5fd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a603:	e8 1a ed ff ff       	call   c0019322 <IDE::enableIRQs(unsigned char, bool)>
c001a608:	5e                   	pop    esi
c001a609:	58                   	pop    eax
c001a60a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a611:	50                   	push   eax
c001a612:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a618:	e8 d1 ea ff ff       	call   c00190ee <IDE::prepareInterrupt(unsigned char)>
c001a61d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a620:	e8 61 ff ff ff       	call   c001a586 <ATAPI::readyForCommand()>
c001a625:	83 c4 10             	add    esp,0x10
c001a628:	84 c0                	test   al,al
c001a62a:	75 0a                	jne    c001a636 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a62c:	bb 01 00 00 00       	mov    ebx,0x1
c001a631:	e9 57 02 00 00       	jmp    c001a88d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a636:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a63c:	c1 e0 04             	shl    eax,0x4
c001a63f:	0f b6 c0             	movzx  eax,al
c001a642:	50                   	push   eax
c001a643:	6a 06                	push   0x6
c001a645:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a64c:	50                   	push   eax
c001a64d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a653:	e8 bc ea ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a658:	6a 00                	push   0x0
c001a65a:	6a 01                	push   0x1
c001a65c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a663:	50                   	push   eax
c001a664:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a66a:	e8 a5 ea ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a66f:	83 c4 20             	add    esp,0x20
c001a672:	0f b6 c3             	movzx  eax,bl
c001a675:	0f b6 df             	movzx  ebx,bh
c001a678:	50                   	push   eax
c001a679:	6a 04                	push   0x4
c001a67b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a682:	50                   	push   eax
c001a683:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a689:	e8 86 ea ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a68e:	53                   	push   ebx
c001a68f:	6a 05                	push   0x5
c001a691:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a698:	50                   	push   eax
c001a699:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a69f:	e8 70 ea ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6a4:	83 c4 20             	add    esp,0x20
c001a6a7:	68 a0 00 00 00       	push   0xa0
c001a6ac:	6a 07                	push   0x7
c001a6ae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6b5:	50                   	push   eax
c001a6b6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6bc:	e8 53 ea ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6c1:	83 c4 0c             	add    esp,0xc
c001a6c4:	6a 01                	push   0x1
c001a6c6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6cd:	50                   	push   eax
c001a6ce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6d4:	e8 d9 f4 ff ff       	call   c0019bb2 <IDE::polling(unsigned char, unsigned int)>
c001a6d9:	83 c4 10             	add    esp,0x10
c001a6dc:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a6e2:	84 c0                	test   al,al
c001a6e4:	74 23                	je     c001a709 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a6e6:	0f b6 d8             	movzx  ebx,al
c001a6e9:	0f b6 d2             	movzx  edx,dl
c001a6ec:	53                   	push   ebx
c001a6ed:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a6f4:	50                   	push   eax
c001a6f5:	52                   	push   edx
c001a6f6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6fc:	e8 01 f4 ff ff       	call   c0019b02 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a701:	83 c4 10             	add    esp,0x10
c001a704:	e9 84 01 00 00       	jmp    c001a88d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a709:	0f b6 d2             	movzx  edx,dl
c001a70c:	53                   	push   ebx
c001a70d:	53                   	push   ebx
c001a70e:	52                   	push   edx
c001a70f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a715:	e8 e8 e9 ff ff       	call   c0019102 <IDE::getBase(unsigned char)>
c001a71a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a71e:	b9 06 00 00 00       	mov    ecx,0x6
c001a723:	89 c2                	mov    edx,eax
c001a725:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a728:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a72c:	83 c4 10             	add    esp,0x10
c001a72f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a735:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a73c:	85 db                	test   ebx,ebx
c001a73e:	0f 84 ec 00 00 00    	je     c001a830 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a744:	51                   	push   ecx
c001a745:	51                   	push   ecx
c001a746:	52                   	push   edx
c001a747:	50                   	push   eax
c001a748:	e8 35 eb ff ff       	call   c0019282 <IDE::waitInterrupt(unsigned char)>
c001a74d:	83 c4 10             	add    esp,0x10
c001a750:	84 c0                	test   al,al
c001a752:	0f 84 d4 fe ff ff    	je     c001a62c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a758:	56                   	push   esi
c001a759:	56                   	push   esi
c001a75a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a761:	50                   	push   eax
c001a762:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a768:	e8 81 e9 ff ff       	call   c00190ee <IDE::prepareInterrupt(unsigned char)>
c001a76d:	83 c4 0c             	add    esp,0xc
c001a770:	6a 04                	push   0x4
c001a772:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a779:	50                   	push   eax
c001a77a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a780:	e8 4f ea ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c001a785:	83 c4 0c             	add    esp,0xc
c001a788:	89 c6                	mov    esi,eax
c001a78a:	6a 05                	push   0x5
c001a78c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a793:	50                   	push   eax
c001a794:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a79a:	e8 35 ea ff ff       	call   c00191d4 <IDE::read(unsigned char, unsigned char)>
c001a79f:	89 f1                	mov    ecx,esi
c001a7a1:	0f b6 c0             	movzx  eax,al
c001a7a4:	0f b6 f1             	movzx  esi,cl
c001a7a7:	c1 e0 08             	shl    eax,0x8
c001a7aa:	09 c6                	or     esi,eax
c001a7ac:	d1 fe                	sar    esi,1
c001a7ae:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a7b2:	83 c4 10             	add    esp,0x10
c001a7b5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a7ba:	74 41                	je     c001a7fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a7bc:	31 c9                	xor    ecx,ecx
c001a7be:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a7c4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a7cb:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a7cf:	75 0a                	jne    c001a7db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a7d1:	01 c9                	add    ecx,ecx
c001a7d3:	01 cd                	add    ebp,ecx
c001a7d5:	4b                   	dec    ebx
c001a7d6:	e9 54 ff ff ff       	jmp    c001a72f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a7db:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a7e0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a7e4:	51                   	push   ecx
c001a7e5:	51                   	push   ecx
c001a7e6:	52                   	push   edx
c001a7e7:	50                   	push   eax
c001a7e8:	e8 15 e9 ff ff       	call   c0019102 <IDE::getBase(unsigned char)>
c001a7ed:	89 c2                	mov    edx,eax
c001a7ef:	89 f0                	mov    eax,esi
c001a7f1:	66 ef                	out    dx,ax
c001a7f3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a7f7:	83 c4 10             	add    esp,0x10
c001a7fa:	41                   	inc    ecx
c001a7fb:	eb c1                	jmp    c001a7be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a7fd:	31 f6                	xor    esi,esi
c001a7ff:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a805:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a80c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a810:	75 06                	jne    c001a818 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a812:	01 f6                	add    esi,esi
c001a814:	01 f5                	add    ebp,esi
c001a816:	eb bd                	jmp    c001a7d5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a818:	51                   	push   ecx
c001a819:	51                   	push   ecx
c001a81a:	52                   	push   edx
c001a81b:	50                   	push   eax
c001a81c:	e8 e1 e8 ff ff       	call   c0019102 <IDE::getBase(unsigned char)>
c001a821:	89 c2                	mov    edx,eax
c001a823:	66 ed                	in     ax,dx
c001a825:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a82a:	83 c4 10             	add    esp,0x10
c001a82d:	46                   	inc    esi
c001a82e:	eb cf                	jmp    c001a7ff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a830:	51                   	push   ecx
c001a831:	51                   	push   ecx
c001a832:	52                   	push   edx
c001a833:	50                   	push   eax
c001a834:	e8 49 ea ff ff       	call   c0019282 <IDE::waitInterrupt(unsigned char)>
c001a839:	83 c4 10             	add    esp,0x10
c001a83c:	84 c0                	test   al,al
c001a83e:	0f 84 e8 fd ff ff    	je     c001a62c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a844:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a849:	52                   	push   edx
c001a84a:	52                   	push   edx
c001a84b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a852:	50                   	push   eax
c001a853:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a859:	e8 90 e8 ff ff       	call   c00190ee <IDE::prepareInterrupt(unsigned char)>
c001a85e:	83 c4 10             	add    esp,0x10
c001a861:	50                   	push   eax
c001a862:	50                   	push   eax
c001a863:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a86a:	50                   	push   eax
c001a86b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a871:	e8 8c e8 ff ff       	call   c0019102 <IDE::getBase(unsigned char)>
c001a876:	8d 50 07             	lea    edx,[eax+0x7]
c001a879:	ec                   	in     al,dx
c001a87a:	83 c4 10             	add    esp,0x10
c001a87d:	a8 88                	test   al,0x88
c001a87f:	74 0a                	je     c001a88b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a881:	4b                   	dec    ebx
c001a882:	75 dd                	jne    c001a861 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a884:	bb 02 00 00 00       	mov    ebx,0x2
c001a889:	eb 02                	jmp    c001a88d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a88b:	31 db                	xor    ebx,ebx
c001a88d:	83 c4 1c             	add    esp,0x1c
c001a890:	89 d8                	mov    eax,ebx
c001a892:	5b                   	pop    ebx
c001a893:	5e                   	pop    esi
c001a894:	5f                   	pop    edi
c001a895:	5d                   	pop    ebp
c001a896:	c3                   	ret    
c001a897:	90                   	nop

c001a898 <ATAPI::diskRemoved()>:
c001a898:	53                   	push   ebx
c001a899:	83 ec 14             	sub    esp,0x14
c001a89c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a8a0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a8a7:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a8ad:	e8 a8 29 ff ff       	call   c000d25a <LogicalDisk::unmount()>
c001a8b2:	58                   	pop    eax
c001a8b3:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a8b9:	e8 e2 32 ff ff       	call   c000dba0 <VCache::writeWriteBuffer()>
c001a8be:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a8c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a8c8:	83 c4 18             	add    esp,0x18
c001a8cb:	5b                   	pop    ebx
c001a8cc:	e9 bf 32 ff ff       	jmp    c000db90 <VCache::invalidateReadBuffer()>
c001a8d1:	90                   	nop

c001a8d2 <ATAPI::eject()>:
c001a8d2:	57                   	push   edi
c001a8d3:	b9 03 00 00 00       	mov    ecx,0x3
c001a8d8:	53                   	push   ebx
c001a8d9:	83 ec 14             	sub    esp,0x14
c001a8dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a8e0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a8e4:	fc                   	cld    
c001a8e5:	31 c0                	xor    eax,eax
c001a8e7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a8e9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a8ee:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a8f3:	50                   	push   eax
c001a8f4:	50                   	push   eax
c001a8f5:	6a 00                	push   0x0
c001a8f7:	6a 00                	push   0x0
c001a8f9:	6a 00                	push   0x0
c001a8fb:	6a 02                	push   0x2
c001a8fd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a901:	50                   	push   eax
c001a902:	53                   	push   ebx
c001a903:	e8 d0 fc ff ff       	call   c001a5d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a908:	83 c4 14             	add    esp,0x14
c001a90b:	53                   	push   ebx
c001a90c:	e8 87 ff ff ff       	call   c001a898 <ATAPI::diskRemoved()>
c001a911:	83 c4 24             	add    esp,0x24
c001a914:	31 c0                	xor    eax,eax
c001a916:	5b                   	pop    ebx
c001a917:	5f                   	pop    edi
c001a918:	c3                   	ret    
c001a919:	90                   	nop

c001a91a <ATAPI::diskInserted()>:
c001a91a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a91e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a925:	c3                   	ret    

c001a926 <ATAPI::detectMedia()>:
c001a926:	56                   	push   esi
c001a927:	53                   	push   ebx
c001a928:	83 ec 28             	sub    esp,0x28
c001a92b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a92f:	6a 0c                	push   0xc
c001a931:	6a 00                	push   0x0
c001a933:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a937:	56                   	push   esi
c001a938:	e8 b3 5b fe ff       	call   c00004f0 <memset>
c001a93d:	58                   	pop    eax
c001a93e:	5a                   	pop    edx
c001a93f:	6a 00                	push   0x0
c001a941:	6a 00                	push   0x0
c001a943:	6a 00                	push   0x0
c001a945:	6a 00                	push   0x0
c001a947:	56                   	push   esi
c001a948:	53                   	push   ebx
c001a949:	e8 8a fc ff ff       	call   c001a5d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a94e:	83 c4 1c             	add    esp,0x1c
c001a951:	6a 0c                	push   0xc
c001a953:	6a 00                	push   0x0
c001a955:	56                   	push   esi
c001a956:	e8 95 5b fe ff       	call   c00004f0 <memset>
c001a95b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a960:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a965:	59                   	pop    ecx
c001a966:	58                   	pop    eax
c001a967:	6a 01                	push   0x1
c001a969:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a96d:	50                   	push   eax
c001a96e:	6a 00                	push   0x0
c001a970:	6a 12                	push   0x12
c001a972:	56                   	push   esi
c001a973:	53                   	push   ebx
c001a974:	e8 5f fc ff ff       	call   c001a5d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a979:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a97d:	83 c4 20             	add    esp,0x20
c001a980:	83 e0 7f             	and    eax,0x7f
c001a983:	3c 70                	cmp    al,0x70
c001a985:	74 15                	je     c001a99c <ATAPI::detectMedia()+0x76>
c001a987:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a98e:	75 0c                	jne    c001a99c <ATAPI::detectMedia()+0x76>
c001a990:	83 ec 0c             	sub    esp,0xc
c001a993:	53                   	push   ebx
c001a994:	e8 81 ff ff ff       	call   c001a91a <ATAPI::diskInserted()>
c001a999:	83 c4 10             	add    esp,0x10
c001a99c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a9a0:	83 e0 0f             	and    eax,0xf
c001a9a3:	3c 02                	cmp    al,0x2
c001a9a5:	75 1b                	jne    c001a9c2 <ATAPI::detectMedia()+0x9c>
c001a9a7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a9ac:	75 2d                	jne    c001a9db <ATAPI::detectMedia()+0xb5>
c001a9ae:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9b5:	74 24                	je     c001a9db <ATAPI::detectMedia()+0xb5>
c001a9b7:	83 ec 0c             	sub    esp,0xc
c001a9ba:	53                   	push   ebx
c001a9bb:	e8 d8 fe ff ff       	call   c001a898 <ATAPI::diskRemoved()>
c001a9c0:	eb 16                	jmp    c001a9d8 <ATAPI::detectMedia()+0xb2>
c001a9c2:	84 c0                	test   al,al
c001a9c4:	75 15                	jne    c001a9db <ATAPI::detectMedia()+0xb5>
c001a9c6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9cd:	75 0c                	jne    c001a9db <ATAPI::detectMedia()+0xb5>
c001a9cf:	83 ec 0c             	sub    esp,0xc
c001a9d2:	53                   	push   ebx
c001a9d3:	e8 42 ff ff ff       	call   c001a91a <ATAPI::diskInserted()>
c001a9d8:	83 c4 10             	add    esp,0x10
c001a9db:	83 c4 24             	add    esp,0x24
c001a9de:	5b                   	pop    ebx
c001a9df:	5e                   	pop    esi
c001a9e0:	c3                   	ret    
c001a9e1:	90                   	nop

c001a9e2 <ATAPI::open(int, int, void*)>:
c001a9e2:	56                   	push   esi
c001a9e3:	53                   	push   ebx
c001a9e4:	50                   	push   eax
c001a9e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a9ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a9f1:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a9f7:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a9fd:	c1 e0 06             	shl    eax,0x6
c001aa00:	01 d0                	add    eax,edx
c001aa02:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001aa09:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001aa0f:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001aa16:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001aa20:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001aa26:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001aa2d:	6a 04                	push   0x4
c001aa2f:	6a 0c                	push   0xc
c001aa31:	51                   	push   ecx
c001aa32:	52                   	push   edx
c001aa33:	e8 dc e6 ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa38:	90                   	nop
c001aa39:	90                   	nop
c001aa3a:	6a 00                	push   0x0
c001aa3c:	6a 0c                	push   0xc
c001aa3e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001aa45:	50                   	push   eax
c001aa46:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001aa4c:	e8 c3 e6 ff ff       	call   c0019114 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa51:	83 c4 14             	add    esp,0x14
c001aa54:	68 74 01 00 00       	push   0x174
c001aa59:	e8 ff d3 fe ff       	call   c0007e5d <malloc>
c001aa5e:	83 c4 0c             	add    esp,0xc
c001aa61:	89 c6                	mov    esi,eax
c001aa63:	6a 00                	push   0x0
c001aa65:	68 ff ff ff 7f       	push   0x7fffffff
c001aa6a:	6a 00                	push   0x0
c001aa6c:	6a 00                	push   0x0
c001aa6e:	53                   	push   ebx
c001aa6f:	68 c4 f5 01 c0       	push   0xc001f5c4
c001aa74:	50                   	push   eax
c001aa75:	e8 2c 26 ff ff       	call   c000d0a6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001aa7a:	83 c4 14             	add    esp,0x14
c001aa7d:	56                   	push   esi
c001aa7e:	e8 d9 26 ff ff       	call   c000d15c <LogicalDisk::assignDriveLetter()>
c001aa83:	5a                   	pop    edx
c001aa84:	0f be c0             	movsx  eax,al
c001aa87:	59                   	pop    ecx
c001aa88:	50                   	push   eax
c001aa89:	68 dc f3 01 c0       	push   0xc001f3dc
c001aa8e:	e8 59 01 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001aa93:	58                   	pop    eax
c001aa94:	5a                   	pop    edx
c001aa95:	56                   	push   esi
c001aa96:	53                   	push   ebx
c001aa97:	e8 90 15 ff ff       	call   c000c02c <Device::addChild(Device*)>
c001aa9c:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001aaa2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aaa5:	e8 b8 19 ff ff       	call   c000c462 <PhysicalDisk::startCache()>
c001aaaa:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001aab1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aab4:	e8 6d fe ff ff       	call   c001a926 <ATAPI::detectMedia()>
c001aab9:	83 c4 14             	add    esp,0x14
c001aabc:	31 c0                	xor    eax,eax
c001aabe:	5b                   	pop    ebx
c001aabf:	5e                   	pop    esi
c001aac0:	c3                   	ret    
c001aac1:	90                   	nop

c001aac2 <ATAPI::read(unsigned long long, int, void*)>:
c001aac2:	55                   	push   ebp
c001aac3:	57                   	push   edi
c001aac4:	56                   	push   esi
c001aac5:	53                   	push   ebx
c001aac6:	83 ec 1c             	sub    esp,0x1c
c001aac9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aacd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001aad1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001aad5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aadc:	74 3c                	je     c001ab1a <ATAPI::read(unsigned long long, int, void*)+0x58>
c001aade:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001aae2:	b9 03 00 00 00       	mov    ecx,0x3
c001aae7:	fc                   	cld    
c001aae8:	31 c0                	xor    eax,eax
c001aaea:	0f ce                	bswap  esi
c001aaec:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aaee:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001aaf3:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001aaf7:	89 e8                	mov    eax,ebp
c001aaf9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001aafd:	50                   	push   eax
c001aafe:	50                   	push   eax
c001aaff:	55                   	push   ebp
c001ab00:	c1 e5 0b             	shl    ebp,0xb
c001ab03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ab07:	6a 00                	push   0x0
c001ab09:	55                   	push   ebp
c001ab0a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ab0e:	50                   	push   eax
c001ab0f:	53                   	push   ebx
c001ab10:	e8 c3 fa ff ff       	call   c001a5d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ab15:	83 c4 20             	add    esp,0x20
c001ab18:	eb 1a                	jmp    c001ab34 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001ab1a:	83 ec 0c             	sub    esp,0xc
c001ab1d:	53                   	push   ebx
c001ab1e:	e8 03 fe ff ff       	call   c001a926 <ATAPI::detectMedia()>
c001ab23:	83 c4 10             	add    esp,0x10
c001ab26:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ab2d:	75 af                	jne    c001aade <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ab2f:	b8 02 00 00 00       	mov    eax,0x2
c001ab34:	83 c4 1c             	add    esp,0x1c
c001ab37:	5b                   	pop    ebx
c001ab38:	5e                   	pop    esi
c001ab39:	5f                   	pop    edi
c001ab3a:	5d                   	pop    ebp
c001ab3b:	c3                   	ret    

c001ab3c <SATA::close(int, int, void*)>:
c001ab3c:	83 ec 0c             	sub    esp,0xc
c001ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab43:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ab49:	85 c0                	test   eax,eax
c001ab4b:	74 0c                	je     c001ab59 <SATA::close(int, int, void*)+0x1d>
c001ab4d:	83 ec 0c             	sub    esp,0xc
c001ab50:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab52:	50                   	push   eax
c001ab53:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ab56:	83 c4 10             	add    esp,0x10
c001ab59:	31 c0                	xor    eax,eax
c001ab5b:	83 c4 0c             	add    esp,0xc
c001ab5e:	c3                   	ret    
c001ab5f:	90                   	nop

c001ab60 <SATA::powerSaving(PowerSavingLevel)>:
c001ab60:	c3                   	ret    
c001ab61:	90                   	nop

c001ab62 <SATA::open(int, int, void*)>:
c001ab62:	56                   	push   esi
c001ab63:	53                   	push   ebx
c001ab64:	50                   	push   eax
c001ab65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab6d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ab77:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ab7d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ab87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab8b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ab95:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ab9b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001aba2:	e8 83 d6 fe ff       	call   c000822a <Phys::allocatePage()>
c001aba7:	89 c6                	mov    esi,eax
c001aba9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001abaf:	81 c6 00 10 00 00    	add    esi,0x1000
c001abb5:	e8 70 d6 fe ff       	call   c000822a <Phys::allocatePage()>
c001abba:	39 c6                	cmp    esi,eax
c001abbc:	74 10                	je     c001abce <SATA::open(int, int, void*)+0x6c>
c001abbe:	83 ec 0c             	sub    esp,0xc
c001abc1:	68 24 f4 01 c0       	push   0xc001f424
c001abc6:	e8 20 5b ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001abcb:	83 c4 10             	add    esp,0x10
c001abce:	83 ec 0c             	sub    esp,0xc
c001abd1:	6a 02                	push   0x2
c001abd3:	e8 c1 ed fe ff       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c001abd8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001abde:	6a 03                	push   0x3
c001abe0:	50                   	push   eax
c001abe1:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001abe7:	ff 35 b0 0a 02 c0    	push   DWORD PTR ds:0xc0020ab0
c001abed:	e8 3c f4 fe ff       	call   c000a02e <VAS::mapPage(unsigned long, unsigned long, int)>
c001abf2:	83 c4 14             	add    esp,0x14
c001abf5:	53                   	push   ebx
c001abf6:	e8 67 18 ff ff       	call   c000c462 <PhysicalDisk::startCache()>
c001abfb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001abfe:	e8 d7 28 ff ff       	call   c000d4da <createPartitionsForDisk(PhysicalDisk*)>
c001ac03:	83 c4 14             	add    esp,0x14
c001ac06:	31 c0                	xor    eax,eax
c001ac08:	5b                   	pop    ebx
c001ac09:	5e                   	pop    esi
c001ac0a:	c3                   	ret    
c001ac0b:	90                   	nop

c001ac0c <SATA::SATA()>:
c001ac0c:	83 ec 0c             	sub    esp,0xc
c001ac0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac13:	83 ec 04             	sub    esp,0x4
c001ac16:	68 00 02 00 00       	push   0x200
c001ac1b:	68 38 f4 01 c0       	push   0xc001f438
c001ac20:	50                   	push   eax
c001ac21:	e8 d4 17 ff ff       	call   c000c3fa <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ac26:	83 c4 10             	add    esp,0x10
c001ac29:	ba a8 f4 01 c0       	mov    edx,0xc001f4a8
c001ac2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac32:	89 10                	mov    DWORD PTR [eax],edx
c001ac34:	90                   	nop
c001ac35:	83 c4 0c             	add    esp,0xc
c001ac38:	c3                   	ret    
c001ac39:	90                   	nop

c001ac3a <SATA::access(unsigned long long, int, void*, bool)>:
c001ac3a:	55                   	push   ebp
c001ac3b:	57                   	push   edi
c001ac3c:	56                   	push   esi
c001ac3d:	53                   	push   ebx
c001ac3e:	83 ec 2c             	sub    esp,0x2c
c001ac41:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ac45:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ac49:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ac4d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ac51:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ac55:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ac5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac5e:	7e 10                	jle    c001ac70 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001ac60:	83 ec 0c             	sub    esp,0xc
c001ac63:	68 48 f4 01 c0       	push   0xc001f448
c001ac68:	e8 7e 5a ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001ac6d:	83 c4 10             	add    esp,0x10
c001ac70:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ac76:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ac7c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ac82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac86:	89 d0                	mov    eax,edx
c001ac88:	c1 e0 07             	shl    eax,0x7
c001ac8b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ac8f:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ac99:	51                   	push   ecx
c001ac9a:	8d 42 02             	lea    eax,[edx+0x2]
c001ac9d:	51                   	push   ecx
c001ac9e:	c1 e0 07             	shl    eax,0x7
c001aca1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001aca5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001aca9:	50                   	push   eax
c001acaa:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001acb0:	e8 e7 ef ff ff       	call   c0019c9c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001acb5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001acb9:	83 c4 10             	add    esp,0x10
c001acbc:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001acc1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001acc5:	0f 84 4f 01 00 00    	je     c001ae1a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001accb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001accf:	c1 e0 09             	shl    eax,0x9
c001acd2:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001acd7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001acdb:	74 0e                	je     c001aceb <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001acdd:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ace3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ace7:	89 c1                	mov    ecx,eax
c001ace9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aceb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001acef:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001acf5:	8d 42 02             	lea    eax,[edx+0x2]
c001acf8:	c1 e0 07             	shl    eax,0x7
c001acfb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001acff:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad01:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ad07:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ad0d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad11:	c1 e1 05             	shl    ecx,0x5
c001ad14:	01 c8                	add    eax,ecx
c001ad16:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ad1a:	83 e1 01             	and    ecx,0x1
c001ad1d:	89 ce                	mov    esi,ecx
c001ad1f:	8a 08                	mov    cl,BYTE PTR [eax]
c001ad21:	c1 e6 06             	shl    esi,0x6
c001ad24:	83 e1 bf             	and    ecx,0xffffffbf
c001ad27:	09 f1                	or     ecx,esi
c001ad29:	88 08                	mov    BYTE PTR [eax],cl
c001ad2b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ad2d:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001ad33:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ad39:	89 08                	mov    DWORD PTR [eax],ecx
c001ad3b:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ad41:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ad47:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ad4d:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ad50:	50                   	push   eax
c001ad51:	68 90 00 00 00       	push   0x90
c001ad56:	6a 00                	push   0x0
c001ad58:	56                   	push   esi
c001ad59:	e8 92 57 fe ff       	call   c00004f0 <memset>
c001ad5e:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ad64:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ad68:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ad6e:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ad72:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ad76:	83 c4 10             	add    esp,0x10
c001ad79:	48                   	dec    eax
c001ad7a:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ad7f:	89 c1                	mov    ecx,eax
c001ad81:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ad87:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ad8c:	09 c8                	or     eax,ecx
c001ad8e:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ad94:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ad97:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001ad9e:	66 25 00 7f          	and    ax,0x7f00
c001ada2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ada6:	66 0d 27 80          	or     ax,0x8027
c001adaa:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001adaf:	66 89 06             	mov    WORD PTR [esi],ax
c001adb2:	19 c0                	sbb    eax,eax
c001adb4:	83 e0 f0             	and    eax,0xfffffff0
c001adb7:	83 c0 35             	add    eax,0x35
c001adba:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001adbd:	89 e8                	mov    eax,ebp
c001adbf:	c1 e8 10             	shr    eax,0x10
c001adc2:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001adc5:	89 e8                	mov    eax,ebp
c001adc7:	c1 e8 18             	shr    eax,0x18
c001adca:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001adcd:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001add1:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001add4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001add8:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001addb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001addf:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ade3:	89 d6                	mov    esi,edx
c001ade5:	31 c0                	xor    eax,eax
c001ade7:	c1 e6 07             	shl    esi,0x7
c001adea:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001adee:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001adf4:	80 e1 88             	and    cl,0x88
c001adf7:	74 0a                	je     c001ae03 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001adf9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001adfe:	74 0a                	je     c001ae0a <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001ae00:	40                   	inc    eax
c001ae01:	eb eb                	jmp    c001adee <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001ae03:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ae08:	75 17                	jne    c001ae21 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001ae0a:	83 ec 0c             	sub    esp,0xc
c001ae0d:	68 81 f4 01 c0       	push   0xc001f481
c001ae12:	e8 d5 fd fe ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001ae17:	83 c4 10             	add    esp,0x10
c001ae1a:	b8 01 00 00 00       	mov    eax,0x1
c001ae1f:	eb 5d                	jmp    c001ae7e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ae21:	b8 01 00 00 00       	mov    eax,0x1
c001ae26:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ae2a:	c1 e2 07             	shl    edx,0x7
c001ae2d:	d3 e0                	shl    eax,cl
c001ae2f:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001ae33:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ae39:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ae3f:	85 c8                	test   eax,ecx
c001ae41:	74 16                	je     c001ae59 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001ae43:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ae49:	0f ba e1 1e          	bt     ecx,0x1e
c001ae4d:	73 ea                	jae    c001ae39 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001ae4f:	83 ec 0c             	sub    esp,0xc
c001ae52:	68 8f f4 01 c0       	push   0xc001f48f
c001ae57:	eb b9                	jmp    c001ae12 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ae59:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ae5f:	0f ba e0 1e          	bt     eax,0x1e
c001ae63:	72 b5                	jb     c001ae1a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ae65:	31 c0                	xor    eax,eax
c001ae67:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ae6c:	75 10                	jne    c001ae7e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ae6e:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ae74:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ae78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae7c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae7e:	83 c4 2c             	add    esp,0x2c
c001ae81:	5b                   	pop    ebx
c001ae82:	5e                   	pop    esi
c001ae83:	5f                   	pop    edi
c001ae84:	5d                   	pop    ebp
c001ae85:	c3                   	ret    

c001ae86 <SATA::read(unsigned long long, int, void*)>:
c001ae86:	57                   	push   edi
c001ae87:	b8 04 00 00 00       	mov    eax,0x4
c001ae8c:	56                   	push   esi
c001ae8d:	53                   	push   ebx
c001ae8e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae96:	8d 7a ff             	lea    edi,[edx-0x1]
c001ae99:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ae9d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001aea1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001aea7:	77 25                	ja     c001aece <SATA::read(unsigned long long, int, void*)+0x48>
c001aea9:	b8 06 00 00 00       	mov    eax,0x6
c001aeae:	85 f6                	test   esi,esi
c001aeb0:	74 1c                	je     c001aece <SATA::read(unsigned long long, int, void*)+0x48>
c001aeb2:	50                   	push   eax
c001aeb3:	50                   	push   eax
c001aeb4:	6a 00                	push   0x0
c001aeb6:	56                   	push   esi
c001aeb7:	52                   	push   edx
c001aeb8:	53                   	push   ebx
c001aeb9:	51                   	push   ecx
c001aeba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aebe:	e8 77 fd ff ff       	call   c001ac3a <SATA::access(unsigned long long, int, void*, bool)>
c001aec3:	83 c4 20             	add    esp,0x20
c001aec6:	85 c0                	test   eax,eax
c001aec8:	0f 95 c0             	setne  al
c001aecb:	0f b6 c0             	movzx  eax,al
c001aece:	5b                   	pop    ebx
c001aecf:	5e                   	pop    esi
c001aed0:	5f                   	pop    edi
c001aed1:	c3                   	ret    

c001aed2 <SATA::write(unsigned long long, int, void*)>:
c001aed2:	55                   	push   ebp
c001aed3:	b8 04 00 00 00       	mov    eax,0x4
c001aed8:	57                   	push   edi
c001aed9:	56                   	push   esi
c001aeda:	53                   	push   ebx
c001aedb:	83 ec 0c             	sub    esp,0xc
c001aede:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001aee2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aee6:	8d 73 ff             	lea    esi,[ebx-0x1]
c001aee9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001aeed:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001aef1:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001aef7:	77 3d                	ja     c001af36 <SATA::write(unsigned long long, int, void*)+0x64>
c001aef9:	b8 06 00 00 00       	mov    eax,0x6
c001aefe:	85 ed                	test   ebp,ebp
c001af00:	74 34                	je     c001af36 <SATA::write(unsigned long long, int, void*)+0x64>
c001af02:	c1 e3 09             	shl    ebx,0x9
c001af05:	01 eb                	add    ebx,ebp
c001af07:	89 d6                	mov    esi,edx
c001af09:	89 cf                	mov    edi,ecx
c001af0b:	83 c6 01             	add    esi,0x1
c001af0e:	83 d7 00             	adc    edi,0x0
c001af11:	50                   	push   eax
c001af12:	50                   	push   eax
c001af13:	6a 01                	push   0x1
c001af15:	55                   	push   ebp
c001af16:	81 c5 00 02 00 00    	add    ebp,0x200
c001af1c:	6a 01                	push   0x1
c001af1e:	51                   	push   ecx
c001af1f:	52                   	push   edx
c001af20:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001af24:	e8 11 fd ff ff       	call   c001ac3a <SATA::access(unsigned long long, int, void*, bool)>
c001af29:	83 c4 20             	add    esp,0x20
c001af2c:	89 f2                	mov    edx,esi
c001af2e:	89 f9                	mov    ecx,edi
c001af30:	39 dd                	cmp    ebp,ebx
c001af32:	75 d3                	jne    c001af07 <SATA::write(unsigned long long, int, void*)+0x35>
c001af34:	31 c0                	xor    eax,eax
c001af36:	83 c4 0c             	add    esp,0xc
c001af39:	5b                   	pop    ebx
c001af3a:	5e                   	pop    esi
c001af3b:	5f                   	pop    edi
c001af3c:	5d                   	pop    ebp
c001af3d:	c3                   	ret    

c001af3e <SATAPI::write(unsigned long long, int, void*)>:
c001af3e:	b8 03 00 00 00       	mov    eax,0x3
c001af43:	c3                   	ret    

c001af44 <SATAPI::close(int, int, void*)>:
c001af44:	83 ec 0c             	sub    esp,0xc
c001af47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af4b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001af51:	85 c0                	test   eax,eax
c001af53:	74 0c                	je     c001af61 <SATAPI::close(int, int, void*)+0x1d>
c001af55:	83 ec 0c             	sub    esp,0xc
c001af58:	8b 10                	mov    edx,DWORD PTR [eax]
c001af5a:	50                   	push   eax
c001af5b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001af5e:	83 c4 10             	add    esp,0x10
c001af61:	31 c0                	xor    eax,eax
c001af63:	83 c4 0c             	add    esp,0xc
c001af66:	c3                   	ret    
c001af67:	90                   	nop

c001af68 <SATAPI::SATAPI()>:
c001af68:	83 ec 0c             	sub    esp,0xc
c001af6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af6f:	83 ec 04             	sub    esp,0x4
c001af72:	68 00 08 00 00       	push   0x800
c001af77:	68 d8 f4 01 c0       	push   0xc001f4d8
c001af7c:	50                   	push   eax
c001af7d:	e8 78 14 ff ff       	call   c000c3fa <PhysicalDisk::PhysicalDisk(char const*, int)>
c001af82:	83 c4 10             	add    esp,0x10
c001af85:	ba 38 f6 01 c0       	mov    edx,0xc001f638
c001af8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af8e:	89 10                	mov    DWORD PTR [eax],edx
c001af90:	90                   	nop
c001af91:	83 c4 0c             	add    esp,0xc
c001af94:	c3                   	ret    
c001af95:	90                   	nop

c001af96 <SATAPI::diskRemoved()>:
c001af96:	c3                   	ret    
c001af97:	90                   	nop

c001af98 <SATAPI::diskInserted()>:
c001af98:	83 ec 18             	sub    esp,0x18
c001af9b:	68 e4 f4 01 c0       	push   0xc001f4e4
c001afa0:	e8 47 fc fe ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001afa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afa9:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001afb0:	83 c4 1c             	add    esp,0x1c
c001afb3:	c3                   	ret    

c001afb4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001afb4:	55                   	push   ebp
c001afb5:	57                   	push   edi
c001afb6:	56                   	push   esi
c001afb7:	53                   	push   ebx
c001afb8:	83 ec 38             	sub    esp,0x38
c001afbb:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001afbf:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001afc3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001afc7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001afcb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001afcf:	68 fc f4 01 c0       	push   0xc001f4fc
c001afd4:	e8 13 fc fe ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001afd9:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001afdf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001afe5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001afe9:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001afef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aff3:	c1 e0 07             	shl    eax,0x7
c001aff6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001affa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001affe:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001b008:	58                   	pop    eax
c001b009:	5a                   	pop    edx
c001b00a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b00e:	8d 58 02             	lea    ebx,[eax+0x2]
c001b011:	c1 e3 07             	shl    ebx,0x7
c001b014:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001b018:	53                   	push   ebx
c001b019:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b01f:	e8 78 ec ff ff       	call   c0019c9c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001b024:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b028:	83 c4 10             	add    esp,0x10
c001b02b:	b8 01 00 00 00       	mov    eax,0x1
c001b030:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001b035:	0f 84 4c 02 00 00    	je     c001b287 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001b03b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b041:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b043:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001b049:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b04f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b053:	c1 e1 05             	shl    ecx,0x5
c001b056:	01 c8                	add    eax,ecx
c001b058:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b05a:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001b060:	81 c9 25 00 01 00    	or     ecx,0x10025
c001b066:	89 08                	mov    DWORD PTR [eax],ecx
c001b068:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b06e:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001b074:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b07a:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b07d:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b080:	50                   	push   eax
c001b081:	68 90 00 00 00       	push   0x90
c001b086:	6a 00                	push   0x0
c001b088:	53                   	push   ebx
c001b089:	e8 62 54 fe ff       	call   c00004f0 <memset>
c001b08e:	b9 0c 00 00 00       	mov    ecx,0xc
c001b093:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b097:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b099:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b09f:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b0a3:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b0a9:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b0ad:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b0b1:	48                   	dec    eax
c001b0b2:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b0b7:	89 c1                	mov    ecx,eax
c001b0b9:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b0bf:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b0c4:	09 c8                	or     eax,ecx
c001b0c6:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b0cc:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b0cf:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b0d6:	66 25 00 7f          	and    ax,0x7f00
c001b0da:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b0de:	66 0d 27 80          	or     ax,0x8027
c001b0e2:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b0e6:	66 89 03             	mov    WORD PTR [ebx],ax
c001b0e9:	89 d0                	mov    eax,edx
c001b0eb:	c1 ea 18             	shr    edx,0x18
c001b0ee:	c1 e8 10             	shr    eax,0x10
c001b0f1:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b0f4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b0f7:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b0fb:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b0fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b102:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b105:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b109:	83 c4 10             	add    esp,0x10
c001b10c:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b110:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b114:	31 c0                	xor    eax,eax
c001b116:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b11c:	80 e1 88             	and    cl,0x88
c001b11f:	74 0a                	je     c001b12b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001b121:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b126:	74 0a                	je     c001b132 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001b128:	40                   	inc    eax
c001b129:	eb eb                	jmp    c001b116 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001b12b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b130:	75 16                	jne    c001b148 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x194>
c001b132:	83 ec 0c             	sub    esp,0xc
c001b135:	68 16 f5 01 c0       	push   0xc001f516
c001b13a:	e8 ad fa fe ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001b13f:	5f                   	pop    edi
c001b140:	5d                   	pop    ebp
c001b141:	68 2b f5 01 c0       	push   0xc001f52b
c001b146:	eb 4f                	jmp    c001b197 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b148:	be 01 00 00 00       	mov    esi,0x1
c001b14d:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b151:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b155:	d3 e6                	shl    esi,cl
c001b157:	c1 e7 07             	shl    edi,0x7
c001b15a:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b160:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b165:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b169:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b16f:	85 c6                	test   esi,eax
c001b171:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b177:	0f 84 cb 00 00 00    	je     c001b248 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c001b17d:	0f ba e0 1e          	bt     eax,0x1e
c001b181:	73 2c                	jae    c001b1af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c001b183:	83 ec 0c             	sub    esp,0xc
c001b186:	68 3d f5 01 c0       	push   0xc001f53d
c001b18b:	e8 5c fa fe ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001b190:	5b                   	pop    ebx
c001b191:	5e                   	pop    esi
c001b192:	68 50 f5 01 c0       	push   0xc001f550
c001b197:	ff 35 04 0a 02 c0    	push   DWORD PTR ds:0xc0020a04
c001b19d:	e8 2a dd fe ff       	call   c0008ecc <VgaText::puts(char const*)>
c001b1a2:	83 c4 10             	add    esp,0x10
c001b1a5:	b8 01 00 00 00       	mov    eax,0x1
c001b1aa:	e9 d8 00 00 00       	jmp    c001b287 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001b1af:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b1b5:	83 f8 0d             	cmp    eax,0xd
c001b1b8:	77 0a                	ja     c001b1c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001b1ba:	83 ec 0c             	sub    esp,0xc
c001b1bd:	68 c8 00 00 00       	push   0xc8
c001b1c2:	eb 28                	jmp    c001b1ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b1c4:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b1ca:	83 f8 0d             	cmp    eax,0xd
c001b1cd:	77 0a                	ja     c001b1d9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x225>
c001b1cf:	83 ec 0c             	sub    esp,0xc
c001b1d2:	68 58 02 00 00       	push   0x258
c001b1d7:	eb 13                	jmp    c001b1ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b1d9:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b1df:	83 f8 06             	cmp    eax,0x6
c001b1e2:	77 10                	ja     c001b1f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x240>
c001b1e4:	83 ec 0c             	sub    esp,0xc
c001b1e7:	68 dc 05 00 00       	push   0x5dc
c001b1ec:	e8 4f 8b ff ff       	call   c0013d40 <milliTenthSleep(unsigned int)>
c001b1f1:	83 c4 10             	add    esp,0x10
c001b1f4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b1f8:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b1fb:	75 06                	jne    c001b203 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24f>
c001b1fd:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b201:	74 15                	je     c001b218 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b203:	83 fb 06             	cmp    ebx,0x6
c001b206:	77 10                	ja     c001b218 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b208:	83 ec 0c             	sub    esp,0xc
c001b20b:	68 c4 09 00 00       	push   0x9c4
c001b210:	e8 2b 8b ff ff       	call   c0013d40 <milliTenthSleep(unsigned int)>
c001b215:	83 c4 10             	add    esp,0x10
c001b218:	43                   	inc    ebx
c001b219:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b21f:	0f 85 44 ff ff ff    	jne    c001b169 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b5>
c001b225:	51                   	push   ecx
c001b226:	51                   	push   ecx
c001b227:	68 61 f5 01 c0       	push   0xc001f561
c001b22c:	ff 35 04 0a 02 c0    	push   DWORD PTR ds:0xc0020a04
c001b232:	e8 95 dc fe ff       	call   c0008ecc <VgaText::puts(char const*)>
c001b237:	c7 04 24 71 f5 01 c0 	mov    DWORD PTR [esp],0xc001f571
c001b23e:	e8 a9 f9 fe ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001b243:	e9 5a ff ff ff       	jmp    c001b1a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ee>
c001b248:	0f ba e0 1e          	bt     eax,0x1e
c001b24c:	73 19                	jae    c001b267 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001b24e:	83 ec 0c             	sub    esp,0xc
c001b251:	68 85 f5 01 c0       	push   0xc001f585
c001b256:	e8 91 f9 fe ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001b25b:	58                   	pop    eax
c001b25c:	5a                   	pop    edx
c001b25d:	68 9a f5 01 c0       	push   0xc001f59a
c001b262:	e9 30 ff ff ff       	jmp    c001b197 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b267:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b26c:	74 17                	je     c001b285 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b26e:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b273:	74 10                	je     c001b285 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b275:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b27b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b27f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b283:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b285:	31 c0                	xor    eax,eax
c001b287:	83 c4 2c             	add    esp,0x2c
c001b28a:	5b                   	pop    ebx
c001b28b:	5e                   	pop    esi
c001b28c:	5f                   	pop    edi
c001b28d:	5d                   	pop    ebp
c001b28e:	c3                   	ret    
c001b28f:	90                   	nop

c001b290 <SATAPI::eject()>:
c001b290:	57                   	push   edi
c001b291:	b9 03 00 00 00       	mov    ecx,0x3
c001b296:	83 ec 18             	sub    esp,0x18
c001b299:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b29d:	fc                   	cld    
c001b29e:	31 c0                	xor    eax,eax
c001b2a0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b2a2:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b2a7:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b2ac:	50                   	push   eax
c001b2ad:	6a 00                	push   0x0
c001b2af:	6a 00                	push   0x0
c001b2b1:	6a 00                	push   0x0
c001b2b3:	6a 00                	push   0x0
c001b2b5:	6a 02                	push   0x2
c001b2b7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b2bb:	50                   	push   eax
c001b2bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b2c0:	e8 ef fc ff ff       	call   c001afb4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b2c5:	31 c0                	xor    eax,eax
c001b2c7:	83 c4 38             	add    esp,0x38
c001b2ca:	5f                   	pop    edi
c001b2cb:	c3                   	ret    

c001b2cc <SATAPI::detectMedia()>:
c001b2cc:	53                   	push   ebx
c001b2cd:	83 ec 14             	sub    esp,0x14
c001b2d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b2d4:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b2da:	e8 c1 28 ff ff       	call   c000dba0 <VCache::writeWriteBuffer()>
c001b2df:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b2e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b2e9:	83 c4 18             	add    esp,0x18
c001b2ec:	5b                   	pop    ebx
c001b2ed:	e9 9e 28 ff ff       	jmp    c000db90 <VCache::invalidateReadBuffer()>

c001b2f2 <SATAPI::open(int, int, void*)>:
c001b2f2:	56                   	push   esi
c001b2f3:	53                   	push   ebx
c001b2f4:	51                   	push   ecx
c001b2f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b2f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b2fd:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b307:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b30d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b317:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b31b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b325:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b32b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b332:	e8 f3 ce fe ff       	call   c000822a <Phys::allocatePage()>
c001b337:	89 c6                	mov    esi,eax
c001b339:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b33f:	81 c6 00 10 00 00    	add    esi,0x1000
c001b345:	e8 e0 ce fe ff       	call   c000822a <Phys::allocatePage()>
c001b34a:	39 c6                	cmp    esi,eax
c001b34c:	74 10                	je     c001b35e <SATAPI::open(int, int, void*)+0x6c>
c001b34e:	83 ec 0c             	sub    esp,0xc
c001b351:	68 ad f5 01 c0       	push   0xc001f5ad
c001b356:	e8 90 53 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001b35b:	83 c4 10             	add    esp,0x10
c001b35e:	83 ec 0c             	sub    esp,0xc
c001b361:	6a 02                	push   0x2
c001b363:	e8 31 e6 fe ff       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c001b368:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b36e:	6a 03                	push   0x3
c001b370:	50                   	push   eax
c001b371:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b377:	ff 35 b0 0a 02 c0    	push   DWORD PTR ds:0xc0020ab0
c001b37d:	e8 ac ec fe ff       	call   c000a02e <VAS::mapPage(unsigned long, unsigned long, int)>
c001b382:	83 c4 14             	add    esp,0x14
c001b385:	68 74 01 00 00       	push   0x174
c001b38a:	e8 ce ca fe ff       	call   c0007e5d <malloc>
c001b38f:	83 c4 0c             	add    esp,0xc
c001b392:	89 c6                	mov    esi,eax
c001b394:	6a 00                	push   0x0
c001b396:	68 ff ff ff 7f       	push   0x7fffffff
c001b39b:	6a 00                	push   0x0
c001b39d:	6a 00                	push   0x0
c001b39f:	53                   	push   ebx
c001b3a0:	68 c3 f5 01 c0       	push   0xc001f5c3
c001b3a5:	50                   	push   eax
c001b3a6:	e8 fb 1c ff ff       	call   c000d0a6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b3ab:	83 c4 14             	add    esp,0x14
c001b3ae:	56                   	push   esi
c001b3af:	e8 a8 1d ff ff       	call   c000d15c <LogicalDisk::assignDriveLetter()>
c001b3b4:	5a                   	pop    edx
c001b3b5:	0f be c0             	movsx  eax,al
c001b3b8:	59                   	pop    ecx
c001b3b9:	50                   	push   eax
c001b3ba:	68 dc f3 01 c0       	push   0xc001f3dc
c001b3bf:	e8 28 f8 fe ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001b3c4:	58                   	pop    eax
c001b3c5:	5a                   	pop    edx
c001b3c6:	56                   	push   esi
c001b3c7:	53                   	push   ebx
c001b3c8:	e8 5f 0c ff ff       	call   c000c02c <Device::addChild(Device*)>
c001b3cd:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b3d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3d6:	e8 87 10 ff ff       	call   c000c462 <PhysicalDisk::startCache()>
c001b3db:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b3e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3e5:	e8 e2 fe ff ff       	call   c001b2cc <SATAPI::detectMedia()>
c001b3ea:	83 c4 14             	add    esp,0x14
c001b3ed:	31 c0                	xor    eax,eax
c001b3ef:	5b                   	pop    ebx
c001b3f0:	5e                   	pop    esi
c001b3f1:	c3                   	ret    

c001b3f2 <SATAPI::read(unsigned long long, int, void*)>:
c001b3f2:	57                   	push   edi
c001b3f3:	56                   	push   esi
c001b3f4:	53                   	push   ebx
c001b3f5:	83 ec 3c             	sub    esp,0x3c
c001b3f8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b3fc:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b400:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b404:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b408:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b40c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b410:	68 d1 f5 01 c0       	push   0xc001f5d1
c001b415:	e8 d2 f7 fe ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001b41a:	83 c4 10             	add    esp,0x10
c001b41d:	83 fe 04             	cmp    esi,0x4
c001b420:	7e 10                	jle    c001b432 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b422:	83 ec 0c             	sub    esp,0xc
c001b425:	68 e2 f5 01 c0       	push   0xc001f5e2
c001b42a:	e8 bc 52 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001b42f:	83 c4 10             	add    esp,0x10
c001b432:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b438:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b43e:	51                   	push   ecx
c001b43f:	50                   	push   eax
c001b440:	83 c0 02             	add    eax,0x2
c001b443:	c1 e0 07             	shl    eax,0x7
c001b446:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b44c:	50                   	push   eax
c001b44d:	52                   	push   edx
c001b44e:	e8 0d e9 ff ff       	call   c0019d60 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b453:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b457:	b9 03 00 00 00       	mov    ecx,0x3
c001b45c:	fc                   	cld    
c001b45d:	31 c0                	xor    eax,eax
c001b45f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b461:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b466:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b46b:	83 c4 0c             	add    esp,0xc
c001b46e:	6a 00                	push   0x0
c001b470:	6a 00                	push   0x0
c001b472:	6a 00                	push   0x0
c001b474:	6a 00                	push   0x0
c001b476:	6a 02                	push   0x2
c001b478:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b47c:	50                   	push   eax
c001b47d:	53                   	push   ebx
c001b47e:	e8 31 fb ff ff       	call   c001afb4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b483:	83 c4 20             	add    esp,0x20
c001b486:	85 c0                	test   eax,eax
c001b488:	74 27                	je     c001b4b1 <SATAPI::read(unsigned long long, int, void*)+0xbf>
c001b48a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b48e:	50                   	push   eax
c001b48f:	50                   	push   eax
c001b490:	68 0c f6 01 c0       	push   0xc001f60c
c001b495:	ff 35 04 0a 02 c0    	push   DWORD PTR ds:0xc0020a04
c001b49b:	e8 2c da fe ff       	call   c0008ecc <VgaText::puts(char const*)>
c001b4a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b4a3:	e8 24 fe ff ff       	call   c001b2cc <SATAPI::detectMedia()>
c001b4a8:	58                   	pop    eax
c001b4a9:	5a                   	pop    edx
c001b4aa:	68 14 f6 01 c0       	push   0xc001f614
c001b4af:	eb 69                	jmp    c001b51a <SATAPI::read(unsigned long long, int, void*)+0x128>
c001b4b1:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b4b5:	b9 03 00 00 00       	mov    ecx,0x3
c001b4ba:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b4bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4c0:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b4c5:	0f c8                	bswap  eax
c001b4c7:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b4cb:	89 f0                	mov    eax,esi
c001b4cd:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b4d1:	57                   	push   edi
c001b4d2:	56                   	push   esi
c001b4d3:	c1 e6 0b             	shl    esi,0xb
c001b4d6:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b4da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4e2:	56                   	push   esi
c001b4e3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b4e7:	50                   	push   eax
c001b4e8:	53                   	push   ebx
c001b4e9:	e8 c6 fa ff ff       	call   c001afb4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b4ee:	83 c4 20             	add    esp,0x20
c001b4f1:	85 c0                	test   eax,eax
c001b4f3:	74 37                	je     c001b52c <SATAPI::read(unsigned long long, int, void*)+0x13a>
c001b4f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b4f9:	50                   	push   eax
c001b4fa:	50                   	push   eax
c001b4fb:	68 1e f6 01 c0       	push   0xc001f61e
c001b500:	ff 35 04 0a 02 c0    	push   DWORD PTR ds:0xc0020a04
c001b506:	e8 c1 d9 fe ff       	call   c0008ecc <VgaText::puts(char const*)>
c001b50b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b50e:	e8 b9 fd ff ff       	call   c001b2cc <SATAPI::detectMedia()>
c001b513:	5a                   	pop    edx
c001b514:	59                   	pop    ecx
c001b515:	68 26 f6 01 c0       	push   0xc001f626
c001b51a:	ff 35 04 0a 02 c0    	push   DWORD PTR ds:0xc0020a04
c001b520:	e8 a7 d9 fe ff       	call   c0008ecc <VgaText::puts(char const*)>
c001b525:	83 c4 10             	add    esp,0x10
c001b528:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b52c:	83 c4 30             	add    esp,0x30
c001b52f:	5b                   	pop    ebx
c001b530:	5e                   	pop    esi
c001b531:	5f                   	pop    edi
c001b532:	c3                   	ret    
c001b533:	90                   	nop

c001b534 <IOAPIC::close(int, int, void*)>:
c001b534:	b8 00 00 00 00       	mov    eax,0x0
c001b539:	c3                   	ret    

c001b53a <apicGetBase()>:
c001b53a:	55                   	push   ebp
c001b53b:	89 e5                	mov    ebp,esp
c001b53d:	83 ec 18             	sub    esp,0x18
c001b540:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c001b545:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b54b:	83 e0 08             	and    eax,0x8
c001b54e:	84 c0                	test   al,al
c001b550:	75 07                	jne    c001b559 <apicGetBase()+0x1f>
c001b552:	b8 00 00 00 00       	mov    eax,0x0
c001b557:	eb 21                	jmp    c001b57a <apicGetBase()+0x40>
c001b559:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c001b55e:	83 ec 08             	sub    esp,0x8
c001b561:	6a 1b                	push   0x1b
c001b563:	50                   	push   eax
c001b564:	e8 2d bf fe ff       	call   c0007496 <Computer::rdmsr(unsigned int)>
c001b569:	83 c4 10             	add    esp,0x10
c001b56c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b56f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b572:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b575:	25 00 00 ff ff       	and    eax,0xffff0000
c001b57a:	c9                   	leave  
c001b57b:	c3                   	ret    

c001b57c <IOAPIC::IOAPIC()>:
c001b57c:	83 ec 0c             	sub    esp,0xc
c001b57f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b583:	83 ec 08             	sub    esp,0x8
c001b586:	68 68 f6 01 c0       	push   0xc001f668
c001b58b:	50                   	push   eax
c001b58c:	e8 33 0c ff ff       	call   c000c1c4 <Device::Device(char const*)>
c001b591:	83 c4 10             	add    esp,0x10
c001b594:	ba 78 f6 01 c0       	mov    edx,0xc001f678
c001b599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b59d:	89 10                	mov    DWORD PTR [eax],edx
c001b59f:	90                   	nop
c001b5a0:	83 c4 0c             	add    esp,0xc
c001b5a3:	c3                   	ret    

c001b5a4 <apicOpen()>:
c001b5a4:	55                   	push   ebp
c001b5a5:	89 e5                	mov    ebp,esp
c001b5a7:	53                   	push   ebx
c001b5a8:	83 ec 34             	sub    esp,0x34
c001b5ab:	a0 c0 48 02 c0       	mov    al,ds:0xc00248c0
c001b5b0:	83 f0 01             	xor    eax,0x1
c001b5b3:	84 c0                	test   al,al
c001b5b5:	0f 84 9d 00 00 00    	je     c001b658 <apicOpen()+0xb4>
c001b5bb:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b5bf:	a0 80 32 02 c0       	mov    al,ds:0xc0023280
c001b5c4:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b5c7:	0f 83 84 00 00 00    	jae    c001b651 <apicOpen()+0xad>
c001b5cd:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b5d4:	83 ec 0c             	sub    esp,0xc
c001b5d7:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b5da:	e8 7e c8 fe ff       	call   c0007e5d <malloc>
c001b5df:	83 c4 10             	add    esp,0x10
c001b5e2:	89 c3                	mov    ebx,eax
c001b5e4:	83 ec 0c             	sub    esp,0xc
c001b5e7:	53                   	push   ebx
c001b5e8:	e8 8f ff ff ff       	call   c001b57c <IOAPIC::IOAPIC()>
c001b5ed:	83 c4 10             	add    esp,0x10
c001b5f0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b5f3:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b5f6:	25 ff 00 00 00       	and    eax,0xff
c001b5fb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b5fe:	89 14 85 a0 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb760],edx
c001b605:	a1 80 48 02 c0       	mov    eax,ds:0xc0024880
c001b60a:	40                   	inc    eax
c001b60b:	a3 80 48 02 c0       	mov    ds:0xc0024880,eax
c001b610:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c001b615:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b61b:	83 ec 08             	sub    esp,0x8
c001b61e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b621:	50                   	push   eax
c001b622:	e8 05 0a ff ff       	call   c000c02c <Device::addChild(Device*)>
c001b627:	83 c4 10             	add    esp,0x10
c001b62a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b62d:	8b 00                	mov    eax,DWORD PTR [eax]
c001b62f:	83 c0 08             	add    eax,0x8
c001b632:	8b 10                	mov    edx,DWORD PTR [eax]
c001b634:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b637:	25 ff 00 00 00       	and    eax,0xff
c001b63c:	6a 00                	push   0x0
c001b63e:	6a 00                	push   0x0
c001b640:	50                   	push   eax
c001b641:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b644:	ff d2                	call   edx
c001b646:	83 c4 10             	add    esp,0x10
c001b649:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b64c:	e9 6e ff ff ff       	jmp    c001b5bf <apicOpen()+0x1b>
c001b651:	c6 05 c0 48 02 c0 01 	mov    BYTE PTR ds:0xc00248c0,0x1
c001b658:	e8 dd fe ff ff       	call   c001b53a <apicGetBase()>
c001b65d:	05 f0 00 00 00       	add    eax,0xf0
c001b662:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b665:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b668:	8b 00                	mov    eax,DWORD PTR [eax]
c001b66a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b66d:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b674:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b67b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b67e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b681:	89 10                	mov    DWORD PTR [eax],edx
c001b683:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b68a:	a1 d0 31 02 c0       	mov    eax,ds:0xc00231d0
c001b68f:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b692:	7d 70                	jge    c001b704 <apicOpen()+0x160>
c001b694:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b697:	8b 04 85 e0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce20]
c001b69e:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b6a1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b6a4:	8b 04 85 e0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce20]
c001b6ab:	c1 e8 08             	shr    eax,0x8
c001b6ae:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b6b2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b6b5:	8b 04 85 e0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce20]
c001b6bc:	c1 e8 18             	shr    eax,0x18
c001b6bf:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b6c2:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b6c6:	75 37                	jne    c001b6ff <apicOpen()+0x15b>
c001b6c8:	e8 6d fe ff ff       	call   c001b53a <apicGetBase()>
c001b6cd:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b6d1:	75 07                	jne    c001b6da <apicOpen()+0x136>
c001b6d3:	ba 60 03 00 00       	mov    edx,0x360
c001b6d8:	eb 05                	jmp    c001b6df <apicOpen()+0x13b>
c001b6da:	ba 50 03 00 00       	mov    edx,0x350
c001b6df:	01 d0                	add    eax,edx
c001b6e1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b6e4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b6e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001b6e9:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b6ec:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b6f3:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b6f7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b6fa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b6fd:	89 10                	mov    DWORD PTR [eax],edx
c001b6ff:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b702:	eb 86                	jmp    c001b68a <apicOpen()+0xe6>
c001b704:	90                   	nop
c001b705:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b708:	c9                   	leave  
c001b709:	c3                   	ret    

c001b70a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b70a:	55                   	push   ebp
c001b70b:	89 e5                	mov    ebp,esp
c001b70d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b710:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b716:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b719:	72 1d                	jb     c001b738 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b71b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b71e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b727:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b72d:	01 d0                	add    eax,edx
c001b72f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b732:	73 04                	jae    c001b738 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b734:	b0 01                	mov    al,0x1
c001b736:	eb 02                	jmp    c001b73a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b738:	b0 00                	mov    al,0x0
c001b73a:	5d                   	pop    ebp
c001b73b:	c3                   	ret    

c001b73c <IOAPIC::read(int)>:
c001b73c:	55                   	push   ebp
c001b73d:	89 e5                	mov    ebp,esp
c001b73f:	83 ec 10             	sub    esp,0x10
c001b742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b745:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b74b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b74e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b751:	31 d2                	xor    edx,edx
c001b753:	88 c2                	mov    dl,al
c001b755:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b758:	89 10                	mov    DWORD PTR [eax],edx
c001b75a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b75d:	83 c0 10             	add    eax,0x10
c001b760:	8b 00                	mov    eax,DWORD PTR [eax]
c001b762:	c9                   	leave  
c001b763:	c3                   	ret    

c001b764 <IOAPIC::open(int, int, void*)>:
c001b764:	55                   	push   ebp
c001b765:	89 e5                	mov    ebp,esp
c001b767:	57                   	push   edi
c001b768:	56                   	push   esi
c001b769:	53                   	push   ebx
c001b76a:	83 ec 04             	sub    esp,0x4
c001b76d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b770:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b773:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b779:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b77c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b782:	8b 14 85 c0 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcd40]
c001b789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b78c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b792:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b795:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b79b:	8b 14 85 40 33 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdccc0]
c001b7a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7a5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b7ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7ae:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b7b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7b7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b7bd:	89 c6                	mov    esi,eax
c001b7bf:	81 e6 ff 00 00 00    	and    esi,0xff
c001b7c5:	89 d0                	mov    eax,edx
c001b7c7:	ba 00 00 00 00       	mov    edx,0x0
c001b7cc:	89 c7                	mov    edi,eax
c001b7ce:	83 e7 ff             	and    edi,0xffffffff
c001b7d1:	89 f9                	mov    ecx,edi
c001b7d3:	89 d0                	mov    eax,edx
c001b7d5:	25 ff 00 00 00       	and    eax,0xff
c001b7da:	89 c3                	mov    ebx,eax
c001b7dc:	89 c8                	mov    eax,ecx
c001b7de:	89 da                	mov    edx,ebx
c001b7e0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b7e3:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b7e6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b7ea:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b7ee:	83 e0 00             	and    eax,0x0
c001b7f1:	09 d0                	or     eax,edx
c001b7f3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b7f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7fa:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b800:	8d 50 01             	lea    edx,[eax+0x1]
c001b803:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b806:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b80c:	31 d2                	xor    edx,edx
c001b80e:	88 c2                	mov    dl,al
c001b810:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b813:	83 c2 08             	add    edx,0x8
c001b816:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b81a:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b820:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b826:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b82a:	6a 01                	push   0x1
c001b82c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b82f:	e8 08 ff ff ff       	call   c001b73c <IOAPIC::read(int)>
c001b834:	83 c4 08             	add    esp,0x8
c001b837:	c1 f8 10             	sar    eax,0x10
c001b83a:	25 ff 00 00 00       	and    eax,0xff
c001b83f:	8d 50 01             	lea    edx,[eax+0x1]
c001b842:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b845:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b84b:	b8 00 00 00 00       	mov    eax,0x0
c001b850:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b853:	5b                   	pop    ebx
c001b854:	5e                   	pop    esi
c001b855:	5f                   	pop    edi
c001b856:	5d                   	pop    ebp
c001b857:	c3                   	ret    

c001b858 <IOAPIC::write(int, int)>:
c001b858:	55                   	push   ebp
c001b859:	89 e5                	mov    ebp,esp
c001b85b:	83 ec 10             	sub    esp,0x10
c001b85e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b861:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b867:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b86a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b86d:	31 d2                	xor    edx,edx
c001b86f:	88 c2                	mov    dl,al
c001b871:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b874:	89 10                	mov    DWORD PTR [eax],edx
c001b876:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b879:	8d 50 10             	lea    edx,[eax+0x10]
c001b87c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b87f:	89 02                	mov    DWORD PTR [edx],eax
c001b881:	90                   	nop
c001b882:	c9                   	leave  
c001b883:	c3                   	ret    

c001b884 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b884:	55                   	push   ebp
c001b885:	89 e5                	mov    ebp,esp
c001b887:	53                   	push   ebx
c001b888:	83 ec 2c             	sub    esp,0x2c
c001b88b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b88e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b891:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b894:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b897:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b89a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b89d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b8a0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b8a3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b8a6:	88 d8                	mov    al,bl
c001b8a8:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b8ab:	88 c8                	mov    al,cl
c001b8ad:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b8b0:	88 d0                	mov    al,dl
c001b8b2:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b8b5:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b8b8:	25 ff 00 00 00       	and    eax,0xff
c001b8bd:	83 c0 08             	add    eax,0x8
c001b8c0:	01 c0                	add    eax,eax
c001b8c2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b8c5:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b8c8:	25 ff 00 00 00       	and    eax,0xff
c001b8cd:	83 c0 08             	add    eax,0x8
c001b8d0:	01 c0                	add    eax,eax
c001b8d2:	40                   	inc    eax
c001b8d3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b8d6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b8d9:	50                   	push   eax
c001b8da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8dd:	e8 5a fe ff ff       	call   c001b73c <IOAPIC::read(int)>
c001b8e2:	83 c4 08             	add    esp,0x8
c001b8e5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b8e8:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b8ef:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b8f2:	c1 e0 18             	shl    eax,0x18
c001b8f5:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b8f8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b8fb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b8fe:	52                   	push   edx
c001b8ff:	50                   	push   eax
c001b900:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b903:	e8 50 ff ff ff       	call   c001b858 <IOAPIC::write(int, int)>
c001b908:	83 c4 0c             	add    esp,0xc
c001b90b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b90e:	50                   	push   eax
c001b90f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b912:	e8 25 fe ff ff       	call   c001b73c <IOAPIC::read(int)>
c001b917:	83 c4 08             	add    esp,0x8
c001b91a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b91d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b924:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b92b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b932:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b936:	74 09                	je     c001b941 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b938:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b93f:	eb 07                	jmp    c001b948 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b941:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b948:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b94c:	74 09                	je     c001b957 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b94e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b955:	eb 07                	jmp    c001b95e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b957:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b95e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b965:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b968:	25 ff 00 00 00       	and    eax,0xff
c001b96d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b970:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b973:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b976:	52                   	push   edx
c001b977:	50                   	push   eax
c001b978:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b97b:	e8 d8 fe ff ff       	call   c001b858 <IOAPIC::write(int, int)>
c001b980:	83 c4 0c             	add    esp,0xc
c001b983:	90                   	nop
c001b984:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b987:	c9                   	leave  
c001b988:	c3                   	ret    
c001b989:	66 90                	xchg   ax,ax
c001b98b:	90                   	nop

c001b98c <APICTimer::close(int, int, void*)>:
c001b98c:	b8 00 00 00 00       	mov    eax,0x0
c001b991:	c3                   	ret    
c001b992:	66 90                	xchg   ax,ax

c001b994 <apicTimerHandler(regs*, void*)>:
c001b994:	83 ec 0c             	sub    esp,0xc
c001b997:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b99b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b99d:	b8 10 27 00 00       	mov    eax,0x2710
c001b9a2:	ba 00 00 00 00       	mov    edx,0x0
c001b9a7:	f7 f1                	div    ecx
c001b9a9:	83 ec 0c             	sub    esp,0xc
c001b9ac:	50                   	push   eax
c001b9ad:	e8 0e 1f ff ff       	call   c000d8c0 <timerHandler(unsigned int)>
c001b9b2:	83 c4 10             	add    esp,0x10
c001b9b5:	90                   	nop
c001b9b6:	83 c4 0c             	add    esp,0xc
c001b9b9:	c3                   	ret    
c001b9ba:	66 90                	xchg   ax,ax

c001b9bc <APICTimer::open(int, int, void*)>:
c001b9bc:	83 ec 0c             	sub    esp,0xc
c001b9bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9c3:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9c5:	83 c0 24             	add    eax,0x24
c001b9c8:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9ca:	83 ec 08             	sub    esp,0x8
c001b9cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9d5:	ff d0                	call   eax
c001b9d7:	83 c4 10             	add    esp,0x10
c001b9da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b9e2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b9e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9f0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b9f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9fa:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ba00:	83 ec 0c             	sub    esp,0xc
c001ba03:	51                   	push   ecx
c001ba04:	6a 01                	push   0x1
c001ba06:	68 94 b9 01 c0       	push   0xc001b994
c001ba0b:	52                   	push   edx
c001ba0c:	50                   	push   eax
c001ba0d:	e8 c6 05 ff ff       	call   c000bfd8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ba12:	83 c4 20             	add    esp,0x20
c001ba15:	89 c2                	mov    edx,eax
c001ba17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba1b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ba21:	b8 00 00 00 00       	mov    eax,0x0
c001ba26:	83 c4 0c             	add    esp,0xc
c001ba29:	c3                   	ret    
c001ba2a:	66 90                	xchg   ax,ax

c001ba2c <APICTimer::write(int)>:
c001ba2c:	83 ec 0c             	sub    esp,0xc
c001ba2f:	83 ec 0c             	sub    esp,0xc
c001ba32:	68 9c f6 01 c0       	push   0xc001f69c
c001ba37:	e8 af 4c ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001ba3c:	83 c4 10             	add    esp,0x10
c001ba3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ba47:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ba4d:	90                   	nop
c001ba4e:	83 c4 0c             	add    esp,0xc
c001ba51:	c3                   	ret    
c001ba52:	66 90                	xchg   ax,ax

c001ba54 <APICTimer::APICTimer()>:
c001ba54:	83 ec 0c             	sub    esp,0xc
c001ba57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba5b:	83 ec 08             	sub    esp,0x8
c001ba5e:	68 ac f6 01 c0       	push   0xc001f6ac
c001ba63:	50                   	push   eax
c001ba64:	e8 8b 1d ff ff       	call   c000d7f4 <Timer::Timer(char const*)>
c001ba69:	83 c4 10             	add    esp,0x10
c001ba6c:	ba c0 f6 01 c0       	mov    edx,0xc001f6c0
c001ba71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba75:	89 10                	mov    DWORD PTR [eax],edx
c001ba77:	90                   	nop
c001ba78:	83 c4 0c             	add    esp,0xc
c001ba7b:	c3                   	ret    

c001ba7c <PIT::write(int)>:
c001ba7c:	83 ec 10             	sub    esp,0x10
c001ba7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba83:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ba87:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ba8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba91:	a3 c4 48 02 c0       	mov    ds:0xc00248c4,eax
c001ba96:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ba9b:	99                   	cdq    
c001ba9c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001baa0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001baa4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001baab:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001bab0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001bab4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001bab9:	ee                   	out    dx,al
c001baba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001babe:	25 ff 00 00 00       	and    eax,0xff
c001bac3:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001baca:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001bace:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001bad2:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001bad7:	ee                   	out    dx,al
c001bad8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001badc:	c1 f8 08             	sar    eax,0x8
c001badf:	25 ff 00 00 00       	and    eax,0xff
c001bae4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001baeb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001baef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001baf3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001baf8:	ee                   	out    dx,al
c001baf9:	90                   	nop
c001bafa:	83 c4 10             	add    esp,0x10
c001bafd:	c3                   	ret    
c001bafe:	66 90                	xchg   ax,ax

c001bb00 <pitHandler(regs*, void*)>:
c001bb00:	83 ec 0c             	sub    esp,0xc
c001bb03:	8b 0d c4 48 02 c0    	mov    ecx,DWORD PTR ds:0xc00248c4
c001bb09:	b8 10 27 00 00       	mov    eax,0x2710
c001bb0e:	99                   	cdq    
c001bb0f:	f7 f9                	idiv   ecx
c001bb11:	83 ec 0c             	sub    esp,0xc
c001bb14:	50                   	push   eax
c001bb15:	e8 a6 1d ff ff       	call   c000d8c0 <timerHandler(unsigned int)>
c001bb1a:	83 c4 10             	add    esp,0x10
c001bb1d:	90                   	nop
c001bb1e:	83 c4 0c             	add    esp,0xc
c001bb21:	c3                   	ret    
c001bb22:	66 90                	xchg   ax,ax

c001bb24 <PIT::open(int, int, void*)>:
c001bb24:	83 ec 0c             	sub    esp,0xc
c001bb27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb2b:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb2d:	83 c0 24             	add    eax,0x24
c001bb30:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb32:	83 ec 08             	sub    esp,0x8
c001bb35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb3d:	ff d0                	call   eax
c001bb3f:	83 c4 10             	add    esp,0x10
c001bb42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb46:	83 ec 0c             	sub    esp,0xc
c001bb49:	6a 00                	push   0x0
c001bb4b:	6a 01                	push   0x1
c001bb4d:	68 00 bb 01 c0       	push   0xc001bb00
c001bb52:	6a 00                	push   0x0
c001bb54:	50                   	push   eax
c001bb55:	e8 7e 04 ff ff       	call   c000bfd8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bb5a:	83 c4 20             	add    esp,0x20
c001bb5d:	89 c2                	mov    edx,eax
c001bb5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb63:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bb69:	b8 00 00 00 00       	mov    eax,0x0
c001bb6e:	83 c4 0c             	add    esp,0xc
c001bb71:	c3                   	ret    
c001bb72:	66 90                	xchg   ax,ax

c001bb74 <PIT::close(int, int, void*)>:
c001bb74:	83 ec 0c             	sub    esp,0xc
c001bb77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb7b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001bb85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb89:	6a 01                	push   0x1
c001bb8b:	68 00 bb 01 c0       	push   0xc001bb00
c001bb90:	6a 00                	push   0x0
c001bb92:	50                   	push   eax
c001bb93:	e8 76 04 ff ff       	call   c000c00e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001bb98:	83 c4 10             	add    esp,0x10
c001bb9b:	b8 00 00 00 00       	mov    eax,0x0
c001bba0:	83 c4 0c             	add    esp,0xc
c001bba3:	c3                   	ret    

c001bba4 <PIT::PIT()>:
c001bba4:	83 ec 0c             	sub    esp,0xc
c001bba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbab:	83 ec 08             	sub    esp,0x8
c001bbae:	68 e8 f6 01 c0       	push   0xc001f6e8
c001bbb3:	50                   	push   eax
c001bbb4:	e8 3b 1c ff ff       	call   c000d7f4 <Timer::Timer(char const*)>
c001bbb9:	83 c4 10             	add    esp,0x10
c001bbbc:	ba 10 f7 01 c0       	mov    edx,0xc001f710
c001bbc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbc5:	89 10                	mov    DWORD PTR [eax],edx
c001bbc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbcb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bbd1:	31 d2                	xor    edx,edx
c001bbd3:	88 c2                	mov    dl,al
c001bbd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbd9:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001bbe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbe4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bbea:	31 d2                	xor    edx,edx
c001bbec:	88 c2                	mov    dl,al
c001bbee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbf2:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001bbf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbfb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bc01:	8d 50 01             	lea    edx,[eax+0x1]
c001bc04:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bc08:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bc0e:	31 d2                	xor    edx,edx
c001bc10:	88 c2                	mov    dl,al
c001bc12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc16:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bc1a:	83 e1 3f             	and    ecx,0x3f
c001bc1d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bc21:	90                   	nop
c001bc22:	83 c4 0c             	add    esp,0xc
c001bc25:	c3                   	ret    
c001bc26:	66 90                	xchg   ax,ax
c001bc28:	66 90                	xchg   ax,ax
c001bc2a:	66 90                	xchg   ax,ax
c001bc2c:	66 90                	xchg   ax,ax
c001bc2e:	66 90                	xchg   ax,ax

c001bc30 <avxDetect>:
c001bc30:	b8 01 00 00 00       	mov    eax,0x1
c001bc35:	0f a2                	cpuid  
c001bc37:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001bc3d:	74 15                	je     c001bc54 <avxDetect.noAVX>
c001bc3f:	b8 01 00 00 00       	mov    eax,0x1
c001bc44:	0f a2                	cpuid  
c001bc46:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001bc4c:	74 06                	je     c001bc54 <avxDetect.noAVX>
c001bc4e:	b8 01 00 00 00       	mov    eax,0x1
c001bc53:	c3                   	ret    

c001bc54 <avxDetect.noAVX>:
c001bc54:	b8 00 00 00 00       	mov    eax,0x0
c001bc59:	c3                   	ret    

c001bc5a <avxSave>:
c001bc5a:	53                   	push   ebx
c001bc5b:	52                   	push   edx
c001bc5c:	31 c0                	xor    eax,eax
c001bc5e:	48                   	dec    eax
c001bc5f:	89 c2                	mov    edx,eax
c001bc61:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bc65:	0f ae 23             	xsave  [ebx]
c001bc68:	5a                   	pop    edx
c001bc69:	5b                   	pop    ebx
c001bc6a:	c3                   	ret    

c001bc6b <avxLoad>:
c001bc6b:	53                   	push   ebx
c001bc6c:	52                   	push   edx
c001bc6d:	31 c0                	xor    eax,eax
c001bc6f:	48                   	dec    eax
c001bc70:	89 c2                	mov    edx,eax
c001bc72:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bc76:	0f ae 2b             	xrstor [ebx]
c001bc79:	5a                   	pop    edx
c001bc7a:	5b                   	pop    ebx
c001bc7b:	c3                   	ret    

c001bc7c <avxInit>:
c001bc7c:	e8 57 02 00 00       	call   c001bed8 <sseInit>
c001bc81:	50                   	push   eax
c001bc82:	51                   	push   ecx
c001bc83:	0f 20 e0             	mov    eax,cr4
c001bc86:	0d 00 00 04 00       	or     eax,0x40000
c001bc8b:	0f 22 e0             	mov    cr4,eax
c001bc8e:	31 c9                	xor    ecx,ecx
c001bc90:	0f 01 d0             	xgetbv 
c001bc93:	0d 07 00 00 00       	or     eax,0x7
c001bc98:	0f 01 d1             	xsetbv 
c001bc9b:	59                   	pop    ecx
c001bc9c:	58                   	pop    eax
c001bc9d:	c3                   	ret    

c001bc9e <avxClose>:
c001bc9e:	c3                   	ret    

c001bc9f <wouldSheSayYes>:
c001bc9f:	c3                   	ret    
c001bca0:	49                   	dec    ecx
c001bca1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bca5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bca9:	75 20                	jne    c001bccb <isr0+0xb>
c001bcab:	4e                   	dec    esi
c001bcac:	79 61                	jns    c001bd0f <isr7+0x3>
c001bcae:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bcb3:	66 90                	xchg   ax,ax
c001bcb5:	66 90                	xchg   ax,ax
c001bcb7:	66 90                	xchg   ax,ax
c001bcb9:	66 90                	xchg   ax,ax
c001bcbb:	66 90                	xchg   ax,ax
c001bcbd:	66 90                	xchg   ax,ax
c001bcbf:	90                   	nop

c001bcc0 <isr0>:
c001bcc0:	fa                   	cli    
c001bcc1:	68 00 00 00 00       	push   0x0
c001bcc6:	68 00 00 00 00       	push   0x0
c001bccb:	e9 44 01 00 00       	jmp    c001be14 <int_common_stub>

c001bcd0 <isr1>:
c001bcd0:	fa                   	cli    
c001bcd1:	6a 00                	push   0x0
c001bcd3:	6a 01                	push   0x1
c001bcd5:	e9 3a 01 00 00       	jmp    c001be14 <int_common_stub>

c001bcda <isr2>:
c001bcda:	fa                   	cli    
c001bcdb:	6a 00                	push   0x0
c001bcdd:	6a 02                	push   0x2
c001bcdf:	e9 30 01 00 00       	jmp    c001be14 <int_common_stub>

c001bce4 <isr3>:
c001bce4:	fa                   	cli    
c001bce5:	6a 00                	push   0x0
c001bce7:	6a 03                	push   0x3
c001bce9:	e9 26 01 00 00       	jmp    c001be14 <int_common_stub>

c001bcee <isr4>:
c001bcee:	fa                   	cli    
c001bcef:	6a 00                	push   0x0
c001bcf1:	6a 04                	push   0x4
c001bcf3:	e9 1c 01 00 00       	jmp    c001be14 <int_common_stub>

c001bcf8 <isr5>:
c001bcf8:	fa                   	cli    
c001bcf9:	6a 00                	push   0x0
c001bcfb:	6a 05                	push   0x5
c001bcfd:	e9 12 01 00 00       	jmp    c001be14 <int_common_stub>

c001bd02 <isr6>:
c001bd02:	fa                   	cli    
c001bd03:	6a 00                	push   0x0
c001bd05:	6a 06                	push   0x6
c001bd07:	e9 08 01 00 00       	jmp    c001be14 <int_common_stub>

c001bd0c <isr7>:
c001bd0c:	fa                   	cli    
c001bd0d:	6a 00                	push   0x0
c001bd0f:	6a 07                	push   0x7
c001bd11:	e9 fe 00 00 00       	jmp    c001be14 <int_common_stub>

c001bd16 <isr8>:
c001bd16:	fa                   	cli    
c001bd17:	6a 08                	push   0x8
c001bd19:	e9 f6 00 00 00       	jmp    c001be14 <int_common_stub>

c001bd1e <isr9>:
c001bd1e:	fa                   	cli    
c001bd1f:	6a 00                	push   0x0
c001bd21:	6a 09                	push   0x9
c001bd23:	e9 ec 00 00 00       	jmp    c001be14 <int_common_stub>

c001bd28 <isr10>:
c001bd28:	fa                   	cli    
c001bd29:	6a 0a                	push   0xa
c001bd2b:	e9 e4 00 00 00       	jmp    c001be14 <int_common_stub>

c001bd30 <isr11>:
c001bd30:	fa                   	cli    
c001bd31:	6a 0b                	push   0xb
c001bd33:	e9 dc 00 00 00       	jmp    c001be14 <int_common_stub>

c001bd38 <isr12>:
c001bd38:	fa                   	cli    
c001bd39:	6a 0c                	push   0xc
c001bd3b:	e9 d4 00 00 00       	jmp    c001be14 <int_common_stub>

c001bd40 <isr13>:
c001bd40:	fa                   	cli    
c001bd41:	6a 0d                	push   0xd
c001bd43:	e9 cc 00 00 00       	jmp    c001be14 <int_common_stub>

c001bd48 <isr14>:
c001bd48:	fa                   	cli    
c001bd49:	6a 0e                	push   0xe
c001bd4b:	e9 c4 00 00 00       	jmp    c001be14 <int_common_stub>

c001bd50 <isr15>:
c001bd50:	fa                   	cli    
c001bd51:	6a 00                	push   0x0
c001bd53:	6a 0f                	push   0xf
c001bd55:	e9 ba 00 00 00       	jmp    c001be14 <int_common_stub>

c001bd5a <isr16>:
c001bd5a:	fa                   	cli    
c001bd5b:	6a 00                	push   0x0
c001bd5d:	6a 10                	push   0x10
c001bd5f:	e9 b0 00 00 00       	jmp    c001be14 <int_common_stub>

c001bd64 <isr17>:
c001bd64:	fa                   	cli    
c001bd65:	6a 00                	push   0x0
c001bd67:	6a 11                	push   0x11
c001bd69:	e9 a6 00 00 00       	jmp    c001be14 <int_common_stub>

c001bd6e <isr18>:
c001bd6e:	fa                   	cli    
c001bd6f:	6a 00                	push   0x0
c001bd71:	6a 12                	push   0x12
c001bd73:	e9 9c 00 00 00       	jmp    c001be14 <int_common_stub>

c001bd78 <irq3>:
c001bd78:	fa                   	cli    
c001bd79:	6a 00                	push   0x0
c001bd7b:	6a 23                	push   0x23
c001bd7d:	e9 92 00 00 00       	jmp    c001be14 <int_common_stub>

c001bd82 <irq4>:
c001bd82:	fa                   	cli    
c001bd83:	6a 00                	push   0x0
c001bd85:	6a 24                	push   0x24
c001bd87:	e9 88 00 00 00       	jmp    c001be14 <int_common_stub>

c001bd8c <irq5>:
c001bd8c:	fa                   	cli    
c001bd8d:	6a 00                	push   0x0
c001bd8f:	6a 25                	push   0x25
c001bd91:	e9 7e 00 00 00       	jmp    c001be14 <int_common_stub>

c001bd96 <irq6>:
c001bd96:	fa                   	cli    
c001bd97:	6a 00                	push   0x0
c001bd99:	6a 26                	push   0x26
c001bd9b:	e9 74 00 00 00       	jmp    c001be14 <int_common_stub>

c001bda0 <irq7>:
c001bda0:	fa                   	cli    
c001bda1:	6a 00                	push   0x0
c001bda3:	6a 27                	push   0x27
c001bda5:	e9 6a 00 00 00       	jmp    c001be14 <int_common_stub>

c001bdaa <irq8>:
c001bdaa:	fa                   	cli    
c001bdab:	6a 00                	push   0x0
c001bdad:	6a 28                	push   0x28
c001bdaf:	e9 60 00 00 00       	jmp    c001be14 <int_common_stub>

c001bdb4 <irq9>:
c001bdb4:	fa                   	cli    
c001bdb5:	6a 00                	push   0x0
c001bdb7:	6a 29                	push   0x29
c001bdb9:	e9 56 00 00 00       	jmp    c001be14 <int_common_stub>

c001bdbe <irq10>:
c001bdbe:	fa                   	cli    
c001bdbf:	6a 00                	push   0x0
c001bdc1:	6a 2a                	push   0x2a
c001bdc3:	e9 4c 00 00 00       	jmp    c001be14 <int_common_stub>

c001bdc8 <irq11>:
c001bdc8:	fa                   	cli    
c001bdc9:	6a 00                	push   0x0
c001bdcb:	6a 2b                	push   0x2b
c001bdcd:	e9 42 00 00 00       	jmp    c001be14 <int_common_stub>

c001bdd2 <irq12>:
c001bdd2:	fa                   	cli    
c001bdd3:	6a 00                	push   0x0
c001bdd5:	6a 2c                	push   0x2c
c001bdd7:	e9 38 00 00 00       	jmp    c001be14 <int_common_stub>

c001bddc <irq13>:
c001bddc:	fa                   	cli    
c001bddd:	6a 00                	push   0x0
c001bddf:	6a 2d                	push   0x2d
c001bde1:	e9 2e 00 00 00       	jmp    c001be14 <int_common_stub>

c001bde6 <irq14>:
c001bde6:	fa                   	cli    
c001bde7:	6a 00                	push   0x0
c001bde9:	6a 2e                	push   0x2e
c001bdeb:	e9 24 00 00 00       	jmp    c001be14 <int_common_stub>

c001bdf0 <irq15>:
c001bdf0:	fa                   	cli    
c001bdf1:	6a 00                	push   0x0
c001bdf3:	6a 2f                	push   0x2f
c001bdf5:	e9 1a 00 00 00       	jmp    c001be14 <int_common_stub>

c001bdfa <irq1>:
c001bdfa:	fa                   	cli    
c001bdfb:	6a 00                	push   0x0
c001bdfd:	6a 21                	push   0x21
c001bdff:	eb 13                	jmp    c001be14 <int_common_stub>

c001be01 <irq2>:
c001be01:	fa                   	cli    
c001be02:	6a 00                	push   0x0
c001be04:	6a 22                	push   0x22
c001be06:	eb 0c                	jmp    c001be14 <int_common_stub>

c001be08 <isr96>:
c001be08:	6a 00                	push   0x0
c001be0a:	6a 60                	push   0x60
c001be0c:	fb                   	sti    
c001be0d:	eb 05                	jmp    c001be14 <int_common_stub>

c001be0f <irq0>:
c001be0f:	fa                   	cli    
c001be10:	6a 00                	push   0x0
c001be12:	6a 20                	push   0x20

c001be14 <int_common_stub>:
c001be14:	60                   	pusha  
c001be15:	1e                   	push   ds
c001be16:	06                   	push   es
c001be17:	0f a0                	push   fs
c001be19:	0f a8                	push   gs
c001be1b:	66 b8 10 00          	mov    ax,0x10
c001be1f:	66 8e d8             	mov    ds,ax
c001be22:	66 8e c0             	mov    es,ax
c001be25:	66 8e e0             	mov    fs,ax
c001be28:	66 8e e8             	mov    gs,ax
c001be2b:	54                   	push   esp
c001be2c:	fc                   	cld    
c001be2d:	e8 a6 06 ff ff       	call   c000c4d8 <int_handler>
c001be32:	81 c4 04 00 00 00    	add    esp,0x4
c001be38:	0f a9                	pop    gs
c001be3a:	0f a1                	pop    fs
c001be3c:	07                   	pop    es
c001be3d:	1f                   	pop    ds
c001be3e:	61                   	popa   
c001be3f:	81 c4 08 00 00 00    	add    esp,0x8
c001be45:	cf                   	iret   

c001be46 <irq16>:
c001be46:	fa                   	cli    
c001be47:	6a 00                	push   0x0
c001be49:	6a 30                	push   0x30
c001be4b:	e9 c4 ff ff ff       	jmp    c001be14 <int_common_stub>

c001be50 <irq17>:
c001be50:	fa                   	cli    
c001be51:	6a 00                	push   0x0
c001be53:	6a 31                	push   0x31
c001be55:	e9 ba ff ff ff       	jmp    c001be14 <int_common_stub>

c001be5a <irq18>:
c001be5a:	fa                   	cli    
c001be5b:	6a 00                	push   0x0
c001be5d:	6a 32                	push   0x32
c001be5f:	e9 b0 ff ff ff       	jmp    c001be14 <int_common_stub>

c001be64 <irq19>:
c001be64:	fa                   	cli    
c001be65:	6a 00                	push   0x0
c001be67:	6a 33                	push   0x33
c001be69:	e9 a6 ff ff ff       	jmp    c001be14 <int_common_stub>

c001be6e <irq20>:
c001be6e:	fa                   	cli    
c001be6f:	6a 00                	push   0x0
c001be71:	6a 34                	push   0x34
c001be73:	e9 9c ff ff ff       	jmp    c001be14 <int_common_stub>

c001be78 <irq21>:
c001be78:	fa                   	cli    
c001be79:	6a 00                	push   0x0
c001be7b:	6a 35                	push   0x35
c001be7d:	e9 92 ff ff ff       	jmp    c001be14 <int_common_stub>

c001be82 <irq22>:
c001be82:	fa                   	cli    
c001be83:	6a 00                	push   0x0
c001be85:	6a 36                	push   0x36
c001be87:	e9 88 ff ff ff       	jmp    c001be14 <int_common_stub>

c001be8c <irq23>:
c001be8c:	fa                   	cli    
c001be8d:	6a 00                	push   0x0
c001be8f:	6a 37                	push   0x37
c001be91:	e9 7e ff ff ff       	jmp    c001be14 <int_common_stub>
c001be96:	66 90                	xchg   ax,ax
c001be98:	66 90                	xchg   ax,ax
c001be9a:	66 90                	xchg   ax,ax
c001be9c:	66 90                	xchg   ax,ax
c001be9e:	66 90                	xchg   ax,ax

c001bea0 <i386GetRDRAND>:
c001bea0:	b9 64 00 00 00       	mov    ecx,0x64

c001bea5 <retry>:
c001bea5:	0f c7 f0             	rdrand eax
c001bea8:	72 05                	jb     c001beaf <retry.done>
c001beaa:	e2 f9                	loop   c001bea5 <retry>

c001beac <retry.fail>:
c001beac:	31 c0                	xor    eax,eax
c001beae:	c3                   	ret    

c001beaf <retry.done>:
c001beaf:	c3                   	ret    

c001beb0 <absolutelyNoChanceInHell>:
c001beb0:	b8 01 00 00 00       	mov    eax,0x1
c001beb5:	0f a2                	cpuid  
c001beb7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001bebd:	74 06                	je     c001bec5 <sseDetect.noSSE>
c001bebf:	b8 01 00 00 00       	mov    eax,0x1
c001bec4:	c3                   	ret    

c001bec5 <sseDetect.noSSE>:
c001bec5:	31 c0                	xor    eax,eax
c001bec7:	c3                   	ret    

c001bec8 <sseSave>:
c001bec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001becc:	0f ae 00             	fxsave [eax]
c001becf:	c3                   	ret    

c001bed0 <sseLoad>:
c001bed0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bed4:	0f ae 08             	fxrstor [eax]
c001bed7:	c3                   	ret    

c001bed8 <sseInit>:
c001bed8:	e8 42 00 00 00       	call   c001bf1f <x87Init>
c001bedd:	0f 20 e0             	mov    eax,cr4
c001bee0:	66 0d 00 06          	or     ax,0x600
c001bee4:	0f 22 e0             	mov    cr4,eax
c001bee7:	c3                   	ret    

c001bee8 <sseClose>:
c001bee8:	c3                   	ret    
c001bee9:	66 90                	xchg   ax,ax
c001beeb:	66 90                	xchg   ax,ax
c001beed:	66 90                	xchg   ax,ax
c001beef:	90                   	nop

c001bef0 <value_37F>:
c001bef0:	7f 03                	jg     c001bef5 <value_37A+0x1>

c001bef2 <value_37E>:
c001bef2:	7e 03                	jle    c001bef7 <x87Detect+0x1>

c001bef4 <value_37A>:
c001bef4:	7a 03                	jp     c001bef9 <x87Detect+0x3>

c001bef6 <x87Detect>:
c001bef6:	b8 01 00 00 00       	mov    eax,0x1
c001befb:	0f a2                	cpuid  
c001befd:	f7 c2 01 00 00 00    	test   edx,0x1
c001bf03:	74 06                	je     c001bf0b <x87Detect.nox87>
c001bf05:	b8 01 00 00 00       	mov    eax,0x1
c001bf0a:	c3                   	ret    

c001bf0b <x87Detect.nox87>:
c001bf0b:	b8 00 00 00 00       	mov    eax,0x0
c001bf10:	c3                   	ret    

c001bf11 <x87Save>:
c001bf11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf15:	dd 30                	fnsave [eax]
c001bf17:	c3                   	ret    

c001bf18 <x87Load>:
c001bf18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf1c:	dd 20                	frstor [eax]
c001bf1e:	c3                   	ret    

c001bf1f <x87Init>:
c001bf1f:	0f 20 c0             	mov    eax,cr0
c001bf22:	66 25 fb ff          	and    ax,0xfffb
c001bf26:	66 0d 22 00          	or     ax,0x22
c001bf2a:	0f 22 c0             	mov    cr0,eax
c001bf2d:	db e3                	fninit 
c001bf2f:	0f 06                	clts   
c001bf31:	d9 2d f4 be 01 c0    	fldcw  WORD PTR ds:0xc001bef4
c001bf37:	c3                   	ret    

c001bf38 <x87Close>:
c001bf38:	c3                   	ret    
c001bf39:	66 90                	xchg   ax,ax
c001bf3b:	90                   	nop

c001bf3c <__do_global_ctors_aux>:
c001bf3c:	a1 ec ce 01 c0       	mov    eax,ds:0xc001ceec
c001bf41:	83 f8 ff             	cmp    eax,0xffffffff
c001bf44:	74 1a                	je     c001bf60 <__do_global_ctors_aux+0x24>
c001bf46:	55                   	push   ebp
c001bf47:	89 e5                	mov    ebp,esp
c001bf49:	53                   	push   ebx
c001bf4a:	52                   	push   edx
c001bf4b:	bb ec ce 01 c0       	mov    ebx,0xc001ceec
c001bf50:	ff d0                	call   eax
c001bf52:	83 eb 04             	sub    ebx,0x4
c001bf55:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf57:	83 f8 ff             	cmp    eax,0xffffffff
c001bf5a:	75 f4                	jne    c001bf50 <__do_global_ctors_aux+0x14>
c001bf5c:	58                   	pop    eax
c001bf5d:	5b                   	pop    ebx
c001bf5e:	5d                   	pop    ebp
c001bf5f:	c3                   	ret    
c001bf60:	c3                   	ret    
c001bf61:	66 90                	xchg   ax,ax
c001bf63:	90                   	nop

c001bf64 <__divdi3>:
c001bf64:	55                   	push   ebp
c001bf65:	57                   	push   edi
c001bf66:	56                   	push   esi
c001bf67:	53                   	push   ebx
c001bf68:	83 ec 1c             	sub    esp,0x1c
c001bf6b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bf6f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bf73:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bf76:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bf7a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf7e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bf82:	85 db                	test   ebx,ebx
c001bf84:	0f 88 8e 00 00 00    	js     c001c018 <__divdi3+0xb4>
c001bf8a:	89 dd                	mov    ebp,ebx
c001bf8c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bf94:	89 d3                	mov    ebx,edx
c001bf96:	85 d2                	test   edx,edx
c001bf98:	79 0d                	jns    c001bfa7 <__divdi3+0x43>
c001bf9a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001bf9e:	f7 d8                	neg    eax
c001bfa0:	83 d2 00             	adc    edx,0x0
c001bfa3:	f7 da                	neg    edx
c001bfa5:	89 d3                	mov    ebx,edx
c001bfa7:	89 c7                	mov    edi,eax
c001bfa9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bfac:	85 db                	test   ebx,ebx
c001bfae:	75 48                	jne    c001bff8 <__divdi3+0x94>
c001bfb0:	39 ef                	cmp    edi,ebp
c001bfb2:	76 24                	jbe    c001bfd8 <__divdi3+0x74>
c001bfb4:	89 ea                	mov    edx,ebp
c001bfb6:	f7 f7                	div    edi
c001bfb8:	89 c1                	mov    ecx,eax
c001bfba:	31 f6                	xor    esi,esi
c001bfbc:	89 c8                	mov    eax,ecx
c001bfbe:	89 f2                	mov    edx,esi
c001bfc0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bfc4:	85 c9                	test   ecx,ecx
c001bfc6:	74 07                	je     c001bfcf <__divdi3+0x6b>
c001bfc8:	f7 d8                	neg    eax
c001bfca:	83 d2 00             	adc    edx,0x0
c001bfcd:	f7 da                	neg    edx
c001bfcf:	83 c4 1c             	add    esp,0x1c
c001bfd2:	5b                   	pop    ebx
c001bfd3:	5e                   	pop    esi
c001bfd4:	5f                   	pop    edi
c001bfd5:	5d                   	pop    ebp
c001bfd6:	c3                   	ret    
c001bfd7:	90                   	nop
c001bfd8:	85 ff                	test   edi,edi
c001bfda:	75 0b                	jne    c001bfe7 <__divdi3+0x83>
c001bfdc:	b8 01 00 00 00       	mov    eax,0x1
c001bfe1:	31 d2                	xor    edx,edx
c001bfe3:	f7 f3                	div    ebx
c001bfe5:	89 c7                	mov    edi,eax
c001bfe7:	31 d2                	xor    edx,edx
c001bfe9:	89 e8                	mov    eax,ebp
c001bfeb:	f7 f7                	div    edi
c001bfed:	89 c6                	mov    esi,eax
c001bfef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bff2:	f7 f7                	div    edi
c001bff4:	89 c1                	mov    ecx,eax
c001bff6:	eb c4                	jmp    c001bfbc <__divdi3+0x58>
c001bff8:	39 eb                	cmp    ebx,ebp
c001bffa:	77 3c                	ja     c001c038 <__divdi3+0xd4>
c001bffc:	0f bd f3             	bsr    esi,ebx
c001bfff:	83 f6 1f             	xor    esi,0x1f
c001c002:	75 40                	jne    c001c044 <__divdi3+0xe0>
c001c004:	39 eb                	cmp    ebx,ebp
c001c006:	72 09                	jb     c001c011 <__divdi3+0xad>
c001c008:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001c00b:	0f 87 97 00 00 00    	ja     c001c0a8 <__divdi3+0x144>
c001c011:	b9 01 00 00 00       	mov    ecx,0x1
c001c016:	eb a4                	jmp    c001bfbc <__divdi3+0x58>
c001c018:	f7 d9                	neg    ecx
c001c01a:	83 d3 00             	adc    ebx,0x0
c001c01d:	f7 db                	neg    ebx
c001c01f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c022:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c026:	89 dd                	mov    ebp,ebx
c001c028:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001c030:	e9 5f ff ff ff       	jmp    c001bf94 <__divdi3+0x30>
c001c035:	8d 76 00             	lea    esi,[esi+0x0]
c001c038:	31 f6                	xor    esi,esi
c001c03a:	31 c9                	xor    ecx,ecx
c001c03c:	e9 7b ff ff ff       	jmp    c001bfbc <__divdi3+0x58>
c001c041:	8d 76 00             	lea    esi,[esi+0x0]
c001c044:	b8 20 00 00 00       	mov    eax,0x20
c001c049:	29 f0                	sub    eax,esi
c001c04b:	89 f1                	mov    ecx,esi
c001c04d:	d3 e3                	shl    ebx,cl
c001c04f:	89 fa                	mov    edx,edi
c001c051:	88 c1                	mov    cl,al
c001c053:	d3 ea                	shr    edx,cl
c001c055:	09 da                	or     edx,ebx
c001c057:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c05b:	89 f1                	mov    ecx,esi
c001c05d:	d3 e7                	shl    edi,cl
c001c05f:	89 eb                	mov    ebx,ebp
c001c061:	88 c1                	mov    cl,al
c001c063:	d3 eb                	shr    ebx,cl
c001c065:	89 f1                	mov    ecx,esi
c001c067:	d3 e5                	shl    ebp,cl
c001c069:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001c06c:	88 c1                	mov    cl,al
c001c06e:	d3 ea                	shr    edx,cl
c001c070:	09 d5                	or     ebp,edx
c001c072:	89 e8                	mov    eax,ebp
c001c074:	89 da                	mov    edx,ebx
c001c076:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001c07a:	89 d3                	mov    ebx,edx
c001c07c:	89 c5                	mov    ebp,eax
c001c07e:	f7 e7                	mul    edi
c001c080:	39 d3                	cmp    ebx,edx
c001c082:	72 18                	jb     c001c09c <__divdi3+0x138>
c001c084:	74 0a                	je     c001c090 <__divdi3+0x12c>
c001c086:	89 e9                	mov    ecx,ebp
c001c088:	31 f6                	xor    esi,esi
c001c08a:	e9 2d ff ff ff       	jmp    c001bfbc <__divdi3+0x58>
c001c08f:	90                   	nop
c001c090:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c093:	89 f1                	mov    ecx,esi
c001c095:	d3 e7                	shl    edi,cl
c001c097:	39 c7                	cmp    edi,eax
c001c099:	73 eb                	jae    c001c086 <__divdi3+0x122>
c001c09b:	90                   	nop
c001c09c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001c09f:	31 f6                	xor    esi,esi
c001c0a1:	e9 16 ff ff ff       	jmp    c001bfbc <__divdi3+0x58>
c001c0a6:	66 90                	xchg   ax,ax
c001c0a8:	31 c9                	xor    ecx,ecx
c001c0aa:	e9 0d ff ff ff       	jmp    c001bfbc <__divdi3+0x58>
c001c0af:	90                   	nop

c001c0b0 <__moddi3>:
c001c0b0:	55                   	push   ebp
c001c0b1:	57                   	push   edi
c001c0b2:	56                   	push   esi
c001c0b3:	53                   	push   ebx
c001c0b4:	83 ec 2c             	sub    esp,0x2c
c001c0b7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c0bb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001c0bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c0c3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c0c7:	85 db                	test   ebx,ebx
c001c0c9:	0f 88 85 00 00 00    	js     c001c154 <__moddi3+0xa4>
c001c0cf:	89 de                	mov    esi,ebx
c001c0d1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c0d9:	89 d7                	mov    edi,edx
c001c0db:	85 d2                	test   edx,edx
c001c0dd:	79 09                	jns    c001c0e8 <__moddi3+0x38>
c001c0df:	f7 d8                	neg    eax
c001c0e1:	83 d2 00             	adc    edx,0x0
c001c0e4:	f7 da                	neg    edx
c001c0e6:	89 d7                	mov    edi,edx
c001c0e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0ec:	89 cd                	mov    ebp,ecx
c001c0ee:	85 ff                	test   edi,edi
c001c0f0:	75 52                	jne    c001c144 <__moddi3+0x94>
c001c0f2:	89 c3                	mov    ebx,eax
c001c0f4:	39 f0                	cmp    eax,esi
c001c0f6:	76 24                	jbe    c001c11c <__moddi3+0x6c>
c001c0f8:	89 c8                	mov    eax,ecx
c001c0fa:	89 f2                	mov    edx,esi
c001c0fc:	f7 f3                	div    ebx
c001c0fe:	89 d6                	mov    esi,edx
c001c100:	89 f0                	mov    eax,esi
c001c102:	31 d2                	xor    edx,edx
c001c104:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c108:	85 c9                	test   ecx,ecx
c001c10a:	74 07                	je     c001c113 <__moddi3+0x63>
c001c10c:	f7 d8                	neg    eax
c001c10e:	83 d2 00             	adc    edx,0x0
c001c111:	f7 da                	neg    edx
c001c113:	83 c4 2c             	add    esp,0x2c
c001c116:	5b                   	pop    ebx
c001c117:	5e                   	pop    esi
c001c118:	5f                   	pop    edi
c001c119:	5d                   	pop    ebp
c001c11a:	c3                   	ret    
c001c11b:	90                   	nop
c001c11c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c120:	85 db                	test   ebx,ebx
c001c122:	75 0d                	jne    c001c131 <__moddi3+0x81>
c001c124:	b8 01 00 00 00       	mov    eax,0x1
c001c129:	31 d2                	xor    edx,edx
c001c12b:	f7 f7                	div    edi
c001c12d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c131:	89 f0                	mov    eax,esi
c001c133:	31 d2                	xor    edx,edx
c001c135:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c139:	f7 f7                	div    edi
c001c13b:	89 e8                	mov    eax,ebp
c001c13d:	f7 f7                	div    edi
c001c13f:	89 d6                	mov    esi,edx
c001c141:	eb bd                	jmp    c001c100 <__moddi3+0x50>
c001c143:	90                   	nop
c001c144:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c148:	39 f7                	cmp    edi,esi
c001c14a:	76 20                	jbe    c001c16c <__moddi3+0xbc>
c001c14c:	89 c8                	mov    eax,ecx
c001c14e:	89 f2                	mov    edx,esi
c001c150:	eb b2                	jmp    c001c104 <__moddi3+0x54>
c001c152:	66 90                	xchg   ax,ax
c001c154:	f7 d9                	neg    ecx
c001c156:	83 d3 00             	adc    ebx,0x0
c001c159:	f7 db                	neg    ebx
c001c15b:	89 de                	mov    esi,ebx
c001c15d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c165:	e9 6f ff ff ff       	jmp    c001c0d9 <__moddi3+0x29>
c001c16a:	66 90                	xchg   ax,ax
c001c16c:	0f bd c7             	bsr    eax,edi
c001c16f:	83 f0 1f             	xor    eax,0x1f
c001c172:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c176:	75 24                	jne    c001c19c <__moddi3+0xec>
c001c178:	39 f7                	cmp    edi,esi
c001c17a:	72 06                	jb     c001c182 <__moddi3+0xd2>
c001c17c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c180:	77 0c                	ja     c001c18e <__moddi3+0xde>
c001c182:	89 e9                	mov    ecx,ebp
c001c184:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c188:	19 fe                	sbb    esi,edi
c001c18a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c18e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c192:	89 f2                	mov    edx,esi
c001c194:	e9 6b ff ff ff       	jmp    c001c104 <__moddi3+0x54>
c001c199:	8d 76 00             	lea    esi,[esi+0x0]
c001c19c:	b8 20 00 00 00       	mov    eax,0x20
c001c1a1:	89 c2                	mov    edx,eax
c001c1a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c1a7:	29 da                	sub    edx,ebx
c001c1a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c1ad:	88 d9                	mov    cl,bl
c001c1af:	d3 e7                	shl    edi,cl
c001c1b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1b5:	88 d1                	mov    cl,dl
c001c1b7:	d3 e8                	shr    eax,cl
c001c1b9:	09 c7                	or     edi,eax
c001c1bb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c1bf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c1c3:	89 d8                	mov    eax,ebx
c001c1c5:	88 d9                	mov    cl,bl
c001c1c7:	d3 e7                	shl    edi,cl
c001c1c9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c1cd:	89 f3                	mov    ebx,esi
c001c1cf:	88 d1                	mov    cl,dl
c001c1d1:	d3 eb                	shr    ebx,cl
c001c1d3:	89 c7                	mov    edi,eax
c001c1d5:	88 c1                	mov    cl,al
c001c1d7:	d3 e6                	shl    esi,cl
c001c1d9:	89 e8                	mov    eax,ebp
c001c1db:	88 d1                	mov    cl,dl
c001c1dd:	d3 e8                	shr    eax,cl
c001c1df:	09 f0                	or     eax,esi
c001c1e1:	89 f9                	mov    ecx,edi
c001c1e3:	d3 e5                	shl    ebp,cl
c001c1e5:	89 da                	mov    edx,ebx
c001c1e7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c1eb:	89 d3                	mov    ebx,edx
c001c1ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c1f1:	89 c6                	mov    esi,eax
c001c1f3:	89 d1                	mov    ecx,edx
c001c1f5:	39 d3                	cmp    ebx,edx
c001c1f7:	72 27                	jb     c001c220 <__moddi3+0x170>
c001c1f9:	74 21                	je     c001c21c <__moddi3+0x16c>
c001c1fb:	29 f5                	sub    ebp,esi
c001c1fd:	19 cb                	sbb    ebx,ecx
c001c1ff:	89 de                	mov    esi,ebx
c001c201:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c205:	d3 e6                	shl    esi,cl
c001c207:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c20b:	89 f9                	mov    ecx,edi
c001c20d:	d3 ed                	shr    ebp,cl
c001c20f:	09 ee                	or     esi,ebp
c001c211:	89 f0                	mov    eax,esi
c001c213:	d3 eb                	shr    ebx,cl
c001c215:	89 da                	mov    edx,ebx
c001c217:	e9 e8 fe ff ff       	jmp    c001c104 <__moddi3+0x54>
c001c21c:	39 c5                	cmp    ebp,eax
c001c21e:	73 db                	jae    c001c1fb <__moddi3+0x14b>
c001c220:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c224:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c228:	89 d1                	mov    ecx,edx
c001c22a:	89 c6                	mov    esi,eax
c001c22c:	eb cd                	jmp    c001c1fb <__moddi3+0x14b>
c001c22e:	66 90                	xchg   ax,ax

c001c230 <__udivdi3>:
c001c230:	55                   	push   ebp
c001c231:	57                   	push   edi
c001c232:	56                   	push   esi
c001c233:	53                   	push   ebx
c001c234:	83 ec 1c             	sub    esp,0x1c
c001c237:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c23b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c23f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c243:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c247:	85 d2                	test   edx,edx
c001c249:	75 41                	jne    c001c28c <__udivdi3+0x5c>
c001c24b:	39 f7                	cmp    edi,esi
c001c24d:	76 15                	jbe    c001c264 <__udivdi3+0x34>
c001c24f:	89 e8                	mov    eax,ebp
c001c251:	89 f2                	mov    edx,esi
c001c253:	f7 f7                	div    edi
c001c255:	31 db                	xor    ebx,ebx
c001c257:	89 da                	mov    edx,ebx
c001c259:	83 c4 1c             	add    esp,0x1c
c001c25c:	5b                   	pop    ebx
c001c25d:	5e                   	pop    esi
c001c25e:	5f                   	pop    edi
c001c25f:	5d                   	pop    ebp
c001c260:	c3                   	ret    
c001c261:	8d 76 00             	lea    esi,[esi+0x0]
c001c264:	89 f9                	mov    ecx,edi
c001c266:	85 ff                	test   edi,edi
c001c268:	75 0b                	jne    c001c275 <__udivdi3+0x45>
c001c26a:	b8 01 00 00 00       	mov    eax,0x1
c001c26f:	31 d2                	xor    edx,edx
c001c271:	f7 f7                	div    edi
c001c273:	89 c1                	mov    ecx,eax
c001c275:	31 d2                	xor    edx,edx
c001c277:	89 f0                	mov    eax,esi
c001c279:	f7 f1                	div    ecx
c001c27b:	89 c3                	mov    ebx,eax
c001c27d:	89 e8                	mov    eax,ebp
c001c27f:	f7 f1                	div    ecx
c001c281:	89 da                	mov    edx,ebx
c001c283:	83 c4 1c             	add    esp,0x1c
c001c286:	5b                   	pop    ebx
c001c287:	5e                   	pop    esi
c001c288:	5f                   	pop    edi
c001c289:	5d                   	pop    ebp
c001c28a:	c3                   	ret    
c001c28b:	90                   	nop
c001c28c:	39 f2                	cmp    edx,esi
c001c28e:	77 1c                	ja     c001c2ac <__udivdi3+0x7c>
c001c290:	0f bd da             	bsr    ebx,edx
c001c293:	83 f3 1f             	xor    ebx,0x1f
c001c296:	75 24                	jne    c001c2bc <__udivdi3+0x8c>
c001c298:	39 f2                	cmp    edx,esi
c001c29a:	72 08                	jb     c001c2a4 <__udivdi3+0x74>
c001c29c:	39 ef                	cmp    edi,ebp
c001c29e:	0f 87 84 00 00 00    	ja     c001c328 <__udivdi3+0xf8>
c001c2a4:	b8 01 00 00 00       	mov    eax,0x1
c001c2a9:	eb ac                	jmp    c001c257 <__udivdi3+0x27>
c001c2ab:	90                   	nop
c001c2ac:	31 db                	xor    ebx,ebx
c001c2ae:	31 c0                	xor    eax,eax
c001c2b0:	89 da                	mov    edx,ebx
c001c2b2:	83 c4 1c             	add    esp,0x1c
c001c2b5:	5b                   	pop    ebx
c001c2b6:	5e                   	pop    esi
c001c2b7:	5f                   	pop    edi
c001c2b8:	5d                   	pop    ebp
c001c2b9:	c3                   	ret    
c001c2ba:	66 90                	xchg   ax,ax
c001c2bc:	b8 20 00 00 00       	mov    eax,0x20
c001c2c1:	29 d8                	sub    eax,ebx
c001c2c3:	88 d9                	mov    cl,bl
c001c2c5:	d3 e2                	shl    edx,cl
c001c2c7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c2cb:	89 fa                	mov    edx,edi
c001c2cd:	88 c1                	mov    cl,al
c001c2cf:	d3 ea                	shr    edx,cl
c001c2d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c2d5:	09 d1                	or     ecx,edx
c001c2d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c2db:	88 d9                	mov    cl,bl
c001c2dd:	d3 e7                	shl    edi,cl
c001c2df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c2e3:	89 f7                	mov    edi,esi
c001c2e5:	88 c1                	mov    cl,al
c001c2e7:	d3 ef                	shr    edi,cl
c001c2e9:	88 d9                	mov    cl,bl
c001c2eb:	d3 e6                	shl    esi,cl
c001c2ed:	89 ea                	mov    edx,ebp
c001c2ef:	88 c1                	mov    cl,al
c001c2f1:	d3 ea                	shr    edx,cl
c001c2f3:	09 d6                	or     esi,edx
c001c2f5:	89 f0                	mov    eax,esi
c001c2f7:	89 fa                	mov    edx,edi
c001c2f9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c2fd:	89 d7                	mov    edi,edx
c001c2ff:	89 c6                	mov    esi,eax
c001c301:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c305:	39 d7                	cmp    edi,edx
c001c307:	72 13                	jb     c001c31c <__udivdi3+0xec>
c001c309:	74 09                	je     c001c314 <__udivdi3+0xe4>
c001c30b:	89 f0                	mov    eax,esi
c001c30d:	31 db                	xor    ebx,ebx
c001c30f:	e9 43 ff ff ff       	jmp    c001c257 <__udivdi3+0x27>
c001c314:	88 d9                	mov    cl,bl
c001c316:	d3 e5                	shl    ebp,cl
c001c318:	39 c5                	cmp    ebp,eax
c001c31a:	73 ef                	jae    c001c30b <__udivdi3+0xdb>
c001c31c:	8d 46 ff             	lea    eax,[esi-0x1]
c001c31f:	31 db                	xor    ebx,ebx
c001c321:	e9 31 ff ff ff       	jmp    c001c257 <__udivdi3+0x27>
c001c326:	66 90                	xchg   ax,ax
c001c328:	31 c0                	xor    eax,eax
c001c32a:	e9 28 ff ff ff       	jmp    c001c257 <__udivdi3+0x27>
c001c32f:	90                   	nop

c001c330 <__umoddi3>:
c001c330:	55                   	push   ebp
c001c331:	57                   	push   edi
c001c332:	56                   	push   esi
c001c333:	53                   	push   ebx
c001c334:	83 ec 1c             	sub    esp,0x1c
c001c337:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c33b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c33f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c343:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c347:	89 da                	mov    edx,ebx
c001c349:	85 c0                	test   eax,eax
c001c34b:	75 37                	jne    c001c384 <__umoddi3+0x54>
c001c34d:	39 df                	cmp    edi,ebx
c001c34f:	76 13                	jbe    c001c364 <__umoddi3+0x34>
c001c351:	89 f0                	mov    eax,esi
c001c353:	f7 f7                	div    edi
c001c355:	89 d0                	mov    eax,edx
c001c357:	31 d2                	xor    edx,edx
c001c359:	83 c4 1c             	add    esp,0x1c
c001c35c:	5b                   	pop    ebx
c001c35d:	5e                   	pop    esi
c001c35e:	5f                   	pop    edi
c001c35f:	5d                   	pop    ebp
c001c360:	c3                   	ret    
c001c361:	8d 76 00             	lea    esi,[esi+0x0]
c001c364:	89 fd                	mov    ebp,edi
c001c366:	85 ff                	test   edi,edi
c001c368:	75 0b                	jne    c001c375 <__umoddi3+0x45>
c001c36a:	b8 01 00 00 00       	mov    eax,0x1
c001c36f:	31 d2                	xor    edx,edx
c001c371:	f7 f7                	div    edi
c001c373:	89 c5                	mov    ebp,eax
c001c375:	89 d8                	mov    eax,ebx
c001c377:	31 d2                	xor    edx,edx
c001c379:	f7 f5                	div    ebp
c001c37b:	89 f0                	mov    eax,esi
c001c37d:	f7 f5                	div    ebp
c001c37f:	89 d0                	mov    eax,edx
c001c381:	eb d4                	jmp    c001c357 <__umoddi3+0x27>
c001c383:	90                   	nop
c001c384:	89 f1                	mov    ecx,esi
c001c386:	39 d8                	cmp    eax,ebx
c001c388:	76 0a                	jbe    c001c394 <__umoddi3+0x64>
c001c38a:	89 f0                	mov    eax,esi
c001c38c:	83 c4 1c             	add    esp,0x1c
c001c38f:	5b                   	pop    ebx
c001c390:	5e                   	pop    esi
c001c391:	5f                   	pop    edi
c001c392:	5d                   	pop    ebp
c001c393:	c3                   	ret    
c001c394:	0f bd e8             	bsr    ebp,eax
c001c397:	83 f5 1f             	xor    ebp,0x1f
c001c39a:	75 1c                	jne    c001c3b8 <__umoddi3+0x88>
c001c39c:	39 d8                	cmp    eax,ebx
c001c39e:	72 04                	jb     c001c3a4 <__umoddi3+0x74>
c001c3a0:	39 f7                	cmp    edi,esi
c001c3a2:	77 08                	ja     c001c3ac <__umoddi3+0x7c>
c001c3a4:	89 da                	mov    edx,ebx
c001c3a6:	29 fe                	sub    esi,edi
c001c3a8:	19 c2                	sbb    edx,eax
c001c3aa:	89 f1                	mov    ecx,esi
c001c3ac:	89 c8                	mov    eax,ecx
c001c3ae:	83 c4 1c             	add    esp,0x1c
c001c3b1:	5b                   	pop    ebx
c001c3b2:	5e                   	pop    esi
c001c3b3:	5f                   	pop    edi
c001c3b4:	5d                   	pop    ebp
c001c3b5:	c3                   	ret    
c001c3b6:	66 90                	xchg   ax,ax
c001c3b8:	ba 20 00 00 00       	mov    edx,0x20
c001c3bd:	29 ea                	sub    edx,ebp
c001c3bf:	89 e9                	mov    ecx,ebp
c001c3c1:	d3 e0                	shl    eax,cl
c001c3c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c3c7:	89 f8                	mov    eax,edi
c001c3c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c3cd:	88 d1                	mov    cl,dl
c001c3cf:	d3 e8                	shr    eax,cl
c001c3d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c3d5:	09 c1                	or     ecx,eax
c001c3d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c3db:	89 e9                	mov    ecx,ebp
c001c3dd:	d3 e7                	shl    edi,cl
c001c3df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c3e3:	89 d8                	mov    eax,ebx
c001c3e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c3e9:	88 d1                	mov    cl,dl
c001c3eb:	d3 e8                	shr    eax,cl
c001c3ed:	89 c7                	mov    edi,eax
c001c3ef:	89 e9                	mov    ecx,ebp
c001c3f1:	d3 e3                	shl    ebx,cl
c001c3f3:	89 f0                	mov    eax,esi
c001c3f5:	88 d1                	mov    cl,dl
c001c3f7:	d3 e8                	shr    eax,cl
c001c3f9:	09 d8                	or     eax,ebx
c001c3fb:	89 e9                	mov    ecx,ebp
c001c3fd:	d3 e6                	shl    esi,cl
c001c3ff:	89 f3                	mov    ebx,esi
c001c401:	89 fa                	mov    edx,edi
c001c403:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c407:	89 d1                	mov    ecx,edx
c001c409:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c40d:	89 c6                	mov    esi,eax
c001c40f:	89 d7                	mov    edi,edx
c001c411:	39 d1                	cmp    ecx,edx
c001c413:	72 27                	jb     c001c43c <__umoddi3+0x10c>
c001c415:	74 21                	je     c001c438 <__umoddi3+0x108>
c001c417:	89 ca                	mov    edx,ecx
c001c419:	29 f3                	sub    ebx,esi
c001c41b:	19 fa                	sbb    edx,edi
c001c41d:	89 d0                	mov    eax,edx
c001c41f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c423:	d3 e0                	shl    eax,cl
c001c425:	89 e9                	mov    ecx,ebp
c001c427:	d3 eb                	shr    ebx,cl
c001c429:	09 d8                	or     eax,ebx
c001c42b:	d3 ea                	shr    edx,cl
c001c42d:	83 c4 1c             	add    esp,0x1c
c001c430:	5b                   	pop    ebx
c001c431:	5e                   	pop    esi
c001c432:	5f                   	pop    edi
c001c433:	5d                   	pop    ebp
c001c434:	c3                   	ret    
c001c435:	8d 76 00             	lea    esi,[esi+0x0]
c001c438:	39 c3                	cmp    ebx,eax
c001c43a:	73 db                	jae    c001c417 <__umoddi3+0xe7>
c001c43c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c440:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c444:	89 d7                	mov    edi,edx
c001c446:	89 c6                	mov    esi,eax
c001c448:	eb cd                	jmp    c001c417 <__umoddi3+0xe7>

Disassembly of section .init:

c001c44a <_init>:
c001c44a:	55                   	push   ebp
c001c44b:	89 e5                	mov    ebp,esp
c001c44d:	e8 c6 3c fe ff       	call   c0000118 <frame_dummy>
c001c452:	e8 e5 fa ff ff       	call   c001bf3c <__do_global_ctors_aux>
c001c457:	5d                   	pop    ebp
c001c458:	c3                   	ret    

Disassembly of section .fini:

c001c459 <_fini>:
c001c459:	55                   	push   ebp
c001c45a:	89 e5                	mov    ebp,esp
c001c45c:	e8 47 3c fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001c461:	5d                   	pop    ebp
c001c462:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c464 <Computer::~Computer()>:
c001c464:	83 ec 0c             	sub    esp,0xc
c001c467:	ba 60 d7 01 c0       	mov    edx,0xc001d760
c001c46c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c470:	89 10                	mov    DWORD PTR [eax],edx
c001c472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c476:	83 ec 0c             	sub    esp,0xc
c001c479:	50                   	push   eax
c001c47a:	e8 af fa fe ff       	call   c000bf2e <Device::~Device()>
c001c47f:	83 c4 10             	add    esp,0x10
c001c482:	90                   	nop
c001c483:	83 c4 0c             	add    esp,0xc
c001c486:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c488 <Computer::~Computer()>:
c001c488:	83 ec 0c             	sub    esp,0xc
c001c48b:	83 ec 0c             	sub    esp,0xc
c001c48e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c492:	e8 cd ff ff ff       	call   c001c464 <Computer::~Computer()>
c001c497:	83 c4 10             	add    esp,0x10
c001c49a:	83 ec 08             	sub    esp,0x8
c001c49d:	68 70 01 00 00       	push   0x170
c001c4a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4a6:	e8 4b e6 fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001c4ab:	83 c4 10             	add    esp,0x10
c001c4ae:	83 c4 0c             	add    esp,0xc
c001c4b1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c4b2 <idleCommon()>:
c001c4b2:	83 ec 0c             	sub    esp,0xc
c001c4b5:	fa                   	cli    
c001c4b6:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c001c4bc:	e8 7f 75 ff ff       	call   c0013a40 <schedule()>
c001c4c1:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c001c4c6:	48                   	dec    eax
c001c4c7:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c001c4cc:	75 01                	jne    c001c4cf <idleCommon()+0x1d>
c001c4ce:	fb                   	sti    
c001c4cf:	83 c4 0c             	add    esp,0xc
c001c4d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c4d4 <LinkedList<UnixFile>::~LinkedList()>:
c001c4d4:	90                   	nop
c001c4d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c4d6 <LinkedList<UnixFile>::LinkedList()>:
c001c4d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c4f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c500:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c504:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c50b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c50f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c516:	90                   	nop
c001c517:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c518 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c518:	83 ec 0c             	sub    esp,0xc
c001c51b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c520:	75 10                	jne    c001c532 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c522:	83 ec 0c             	sub    esp,0xc
c001c525:	68 b4 d9 01 c0       	push   0xc001d9b4
c001c52a:	e8 bc 41 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001c52f:	83 c4 10             	add    esp,0x10
c001c532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c536:	8b 00                	mov    eax,DWORD PTR [eax]
c001c538:	85 c0                	test   eax,eax
c001c53a:	74 34                	je     c001c570 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c53c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c540:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c543:	85 c0                	test   eax,eax
c001c545:	74 29                	je     c001c570 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c54b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c54e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c552:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c559:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c55d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c564:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c567:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c56e:	eb 65                	jmp    c001c5d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c574:	8b 00                	mov    eax,DWORD PTR [eax]
c001c576:	85 c0                	test   eax,eax
c001c578:	75 4b                	jne    c001c5c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c57e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c581:	85 c0                	test   eax,eax
c001c583:	75 40                	jne    c001c5c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c589:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c58d:	89 10                	mov    DWORD PTR [eax],edx
c001c58f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c593:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c597:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c59e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5a1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c5a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5af:	85 c0                	test   eax,eax
c001c5b1:	74 22                	je     c001c5d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c5b3:	83 ec 0c             	sub    esp,0xc
c001c5b6:	68 d6 d9 01 c0       	push   0xc001d9d6
c001c5bb:	e8 2b 41 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001c5c0:	83 c4 10             	add    esp,0x10
c001c5c3:	eb 10                	jmp    c001c5d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c5c5:	83 ec 0c             	sub    esp,0xc
c001c5c8:	68 e0 d9 01 c0       	push   0xc001d9e0
c001c5cd:	e8 19 41 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001c5d2:	83 c4 10             	add    esp,0x10
c001c5d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5d9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5dc:	8d 50 01             	lea    edx,[eax+0x1]
c001c5df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c5e6:	90                   	nop
c001c5e7:	83 c4 0c             	add    esp,0xc
c001c5ea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c5ec <LinkedList<UnixFile>::getFirstElement()>:
c001c5ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c5f4 <LinkedList<UnixFile>::removeFirst()>:
c001c5f4:	83 ec 0c             	sub    esp,0xc
c001c5f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5fd:	85 c0                	test   eax,eax
c001c5ff:	75 12                	jne    c001c613 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c601:	83 ec 0c             	sub    esp,0xc
c001c604:	68 ec d9 01 c0       	push   0xc001d9ec
c001c609:	e8 dd 40 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001c60e:	83 c4 10             	add    esp,0x10
c001c611:	eb 7e                	jmp    c001c691 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c617:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c61a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c61d:	85 c0                	test   eax,eax
c001c61f:	74 10                	je     c001c631 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c621:	83 ec 0c             	sub    esp,0xc
c001c624:	68 37 da 01 c0       	push   0xc001da37
c001c629:	e8 bd 40 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001c62e:	83 c4 10             	add    esp,0x10
c001c631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c635:	8b 00                	mov    eax,DWORD PTR [eax]
c001c637:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c63a:	85 c0                	test   eax,eax
c001c63c:	75 33                	jne    c001c671 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c63e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c642:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c64c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c657:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c65a:	83 f8 01             	cmp    eax,0x1
c001c65d:	74 21                	je     c001c680 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c65f:	83 ec 0c             	sub    esp,0xc
c001c662:	68 10 da 01 c0       	push   0xc001da10
c001c667:	e8 7f 40 ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001c66c:	83 c4 10             	add    esp,0x10
c001c66f:	eb 0f                	jmp    c001c680 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c675:	8b 00                	mov    eax,DWORD PTR [eax]
c001c677:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c67a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c67e:	89 10                	mov    DWORD PTR [eax],edx
c001c680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c684:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c687:	8d 50 ff             	lea    edx,[eax-0x1]
c001c68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c68e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c691:	83 c4 0c             	add    esp,0xc
c001c694:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c696 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c696:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c69a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c69d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c69e <DriverlessDevice::~DriverlessDevice()>:
c001c69e:	ba 7c e0 01 c0       	mov    edx,0xc001e07c
c001c6a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6a7:	89 10                	mov    DWORD PTR [eax],edx
c001c6a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6ad:	50                   	push   eax
c001c6ae:	e8 7b f8 fe ff       	call   c000bf2e <Device::~Device()>
c001c6b3:	83 c4 04             	add    esp,0x4
c001c6b6:	90                   	nop
c001c6b7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c6b8 <DriverlessDevice::~DriverlessDevice()>:
c001c6b8:	83 ec 0c             	sub    esp,0xc
c001c6bb:	83 ec 0c             	sub    esp,0xc
c001c6be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6c2:	e8 d7 ff ff ff       	call   c001c69e <DriverlessDevice::~DriverlessDevice()>
c001c6c7:	83 c4 10             	add    esp,0x10
c001c6ca:	83 ec 08             	sub    esp,0x8
c001c6cd:	68 58 01 00 00       	push   0x158
c001c6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6d6:	e8 1b e4 fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001c6db:	83 c4 10             	add    esp,0x10
c001c6de:	83 c4 0c             	add    esp,0xc
c001c6e1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c6e2 <LinkedList<Device>::addElement(Device*)>:
c001c6e2:	83 ec 0c             	sub    esp,0xc
c001c6e5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c6ea:	75 10                	jne    c001c6fc <LinkedList<Device>::addElement(Device*)+0x1a>
c001c6ec:	83 ec 0c             	sub    esp,0xc
c001c6ef:	68 b4 d9 01 c0       	push   0xc001d9b4
c001c6f4:	e8 f2 3f ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001c6f9:	83 c4 10             	add    esp,0x10
c001c6fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c700:	8b 00                	mov    eax,DWORD PTR [eax]
c001c702:	85 c0                	test   eax,eax
c001c704:	74 3a                	je     c001c740 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c70a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c70d:	85 c0                	test   eax,eax
c001c70f:	74 2f                	je     c001c740 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c715:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c718:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c71c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c726:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c72a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c72d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c731:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c734:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c73e:	eb 68                	jmp    c001c7a8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c744:	8b 00                	mov    eax,DWORD PTR [eax]
c001c746:	85 c0                	test   eax,eax
c001c748:	75 4e                	jne    c001c798 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c74a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c74e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c751:	85 c0                	test   eax,eax
c001c753:	75 43                	jne    c001c798 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c759:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c75d:	89 10                	mov    DWORD PTR [eax],edx
c001c75f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c763:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c767:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c76a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c76e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c771:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c77b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c77f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c782:	85 c0                	test   eax,eax
c001c784:	74 22                	je     c001c7a8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c786:	83 ec 0c             	sub    esp,0xc
c001c789:	68 d6 d9 01 c0       	push   0xc001d9d6
c001c78e:	e8 58 3f ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001c793:	83 c4 10             	add    esp,0x10
c001c796:	eb 10                	jmp    c001c7a8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c798:	83 ec 0c             	sub    esp,0xc
c001c79b:	68 e0 d9 01 c0       	push   0xc001d9e0
c001c7a0:	e8 46 3f ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001c7a5:	83 c4 10             	add    esp,0x10
c001c7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c7af:	8d 50 01             	lea    edx,[eax+0x1]
c001c7b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c7b9:	90                   	nop
c001c7ba:	83 c4 0c             	add    esp,0xc
c001c7bd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c7be <LinkedList<Device>::LinkedList()>:
c001c7be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c7de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c7fe:	90                   	nop
c001c7ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c800 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c800:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c804:	8b 00                	mov    eax,DWORD PTR [eax]
c001c806:	85 c0                	test   eax,eax
c001c808:	75 0e                	jne    c001c818 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c80a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c80e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c811:	85 c0                	test   eax,eax
c001c813:	75 03                	jne    c001c818 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c815:	b0 01                	mov    al,0x1
c001c817:	c3                   	ret    
c001c818:	b0 00                	mov    al,0x0
c001c81a:	90                   	nop
c001c81b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c81c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c81c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c820:	8b 00                	mov    eax,DWORD PTR [eax]
c001c822:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c824 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c824:	83 ec 0c             	sub    esp,0xc
c001c827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c82b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c82d:	85 c0                	test   eax,eax
c001c82f:	75 17                	jne    c001c848 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c831:	83 ec 0c             	sub    esp,0xc
c001c834:	68 ec d9 01 c0       	push   0xc001d9ec
c001c839:	e8 ad 3e ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001c83e:	83 c4 10             	add    esp,0x10
c001c841:	e9 92 00 00 00       	jmp    c001c8d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c846:	66 90                	xchg   ax,ax
c001c848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c84c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c84f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c852:	85 c0                	test   eax,eax
c001c854:	0f 95 c0             	setne  al
c001c857:	84 c0                	test   al,al
c001c859:	74 11                	je     c001c86c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c85b:	83 ec 0c             	sub    esp,0xc
c001c85e:	68 37 da 01 c0       	push   0xc001da37
c001c863:	e8 83 3e ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001c868:	83 c4 10             	add    esp,0x10
c001c86b:	90                   	nop
c001c86c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c870:	8b 00                	mov    eax,DWORD PTR [eax]
c001c872:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c875:	85 c0                	test   eax,eax
c001c877:	0f 94 c0             	sete   al
c001c87a:	84 c0                	test   al,al
c001c87c:	74 36                	je     c001c8b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c87e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c882:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c88c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c897:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c89a:	83 f8 01             	cmp    eax,0x1
c001c89d:	74 25                	je     c001c8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c89f:	83 ec 0c             	sub    esp,0xc
c001c8a2:	68 10 da 01 c0       	push   0xc001da10
c001c8a7:	e8 3f 3e ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001c8ac:	83 c4 10             	add    esp,0x10
c001c8af:	eb 13                	jmp    c001c8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c8b1:	8d 76 00             	lea    esi,[esi+0x0]
c001c8b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8b8:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8ba:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c8bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c1:	89 10                	mov    DWORD PTR [eax],edx
c001c8c3:	90                   	nop
c001c8c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8cb:	8d 50 ff             	lea    edx,[eax-0x1]
c001c8ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c8d5:	8d 76 00             	lea    esi,[esi+0x0]
c001c8d8:	83 c4 0c             	add    esp,0xc
c001c8db:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c8dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c8dc:	83 ec 0c             	sub    esp,0xc
c001c8df:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c8e4:	75 12                	jne    c001c8f8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c8e6:	83 ec 0c             	sub    esp,0xc
c001c8e9:	68 b4 d9 01 c0       	push   0xc001d9b4
c001c8ee:	e8 f8 3d ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001c8f3:	83 c4 10             	add    esp,0x10
c001c8f6:	66 90                	xchg   ax,ax
c001c8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8fe:	85 c0                	test   eax,eax
c001c900:	74 36                	je     c001c938 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c906:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c909:	85 c0                	test   eax,eax
c001c90b:	74 2b                	je     c001c938 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c90d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c911:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c914:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c918:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c91b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c91f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c923:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c92a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c92d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c934:	eb 6a                	jmp    c001c9a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c936:	66 90                	xchg   ax,ax
c001c938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c93c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c93e:	85 c0                	test   eax,eax
c001c940:	75 4e                	jne    c001c990 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c946:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c949:	85 c0                	test   eax,eax
c001c94b:	75 43                	jne    c001c990 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c94d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c951:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c955:	89 10                	mov    DWORD PTR [eax],edx
c001c957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c95b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c95f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c966:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c969:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c974:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c977:	85 c0                	test   eax,eax
c001c979:	74 25                	je     c001c9a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c97b:	83 ec 0c             	sub    esp,0xc
c001c97e:	68 d6 d9 01 c0       	push   0xc001d9d6
c001c983:	e8 63 3d ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001c988:	83 c4 10             	add    esp,0x10
c001c98b:	eb 13                	jmp    c001c9a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c98d:	8d 76 00             	lea    esi,[esi+0x0]
c001c990:	83 ec 0c             	sub    esp,0xc
c001c993:	68 e0 d9 01 c0       	push   0xc001d9e0
c001c998:	e8 4e 3d ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001c99d:	83 c4 10             	add    esp,0x10
c001c9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c9a7:	8d 50 01             	lea    edx,[eax+0x1]
c001c9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c9b1:	90                   	nop
c001c9b2:	83 c4 0c             	add    esp,0xc
c001c9b5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c9b8 <ACPI::~ACPI()>:
c001c9b8:	83 ec 0c             	sub    esp,0xc
c001c9bb:	ba e4 e5 01 c0       	mov    edx,0xc001e5e4
c001c9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9c4:	89 10                	mov    DWORD PTR [eax],edx
c001c9c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ca:	83 ec 0c             	sub    esp,0xc
c001c9cd:	50                   	push   eax
c001c9ce:	e8 5b f5 fe ff       	call   c000bf2e <Device::~Device()>
c001c9d3:	83 c4 10             	add    esp,0x10
c001c9d6:	90                   	nop
c001c9d7:	83 c4 0c             	add    esp,0xc
c001c9da:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c9dc <ACPI::~ACPI()>:
c001c9dc:	83 ec 0c             	sub    esp,0xc
c001c9df:	83 ec 0c             	sub    esp,0xc
c001c9e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9e6:	e8 cd ff ff ff       	call   c001c9b8 <ACPI::~ACPI()>
c001c9eb:	83 c4 10             	add    esp,0x10
c001c9ee:	83 ec 08             	sub    esp,0x8
c001c9f1:	68 64 12 00 00       	push   0x1264
c001c9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9fa:	e8 f7 e0 fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001c9ff:	83 c4 10             	add    esp,0x10
c001ca02:	83 c4 0c             	add    esp,0xc
c001ca05:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ca08 <LinkedList<Device>::~LinkedList()>:
c001ca08:	90                   	nop
c001ca09:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ca0c <LinkedList<Device>::isEmpty()>:
c001ca0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca10:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca12:	85 c0                	test   eax,eax
c001ca14:	75 0e                	jne    c001ca24 <LinkedList<Device>::isEmpty()+0x18>
c001ca16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ca1d:	85 c0                	test   eax,eax
c001ca1f:	75 03                	jne    c001ca24 <LinkedList<Device>::isEmpty()+0x18>
c001ca21:	b0 01                	mov    al,0x1
c001ca23:	c3                   	ret    
c001ca24:	b0 00                	mov    al,0x0
c001ca26:	90                   	nop
c001ca27:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ca28 <LinkedList<Device>::getFirstElement()>:
c001ca28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca2c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca2e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ca30 <LinkedList<Device>::removeFirst()>:
c001ca30:	83 ec 0c             	sub    esp,0xc
c001ca33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca37:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca39:	85 c0                	test   eax,eax
c001ca3b:	75 17                	jne    c001ca54 <LinkedList<Device>::removeFirst()+0x24>
c001ca3d:	83 ec 0c             	sub    esp,0xc
c001ca40:	68 ec d9 01 c0       	push   0xc001d9ec
c001ca45:	e8 a1 3c ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001ca4a:	83 c4 10             	add    esp,0x10
c001ca4d:	e9 92 00 00 00       	jmp    c001cae4 <LinkedList<Device>::removeFirst()+0xb4>
c001ca52:	66 90                	xchg   ax,ax
c001ca54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ca5b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca61:	85 c0                	test   eax,eax
c001ca63:	74 13                	je     c001ca78 <LinkedList<Device>::removeFirst()+0x48>
c001ca65:	83 ec 0c             	sub    esp,0xc
c001ca68:	68 37 da 01 c0       	push   0xc001da37
c001ca6d:	e8 79 3c ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001ca72:	83 c4 10             	add    esp,0x10
c001ca75:	8d 76 00             	lea    esi,[esi+0x0]
c001ca78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca7c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca7e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca84:	85 c0                	test   eax,eax
c001ca86:	75 34                	jne    c001cabc <LinkedList<Device>::removeFirst()+0x8c>
c001ca88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca8c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca96:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caa1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001caa4:	83 f8 01             	cmp    eax,0x1
c001caa7:	74 27                	je     c001cad0 <LinkedList<Device>::removeFirst()+0xa0>
c001caa9:	83 ec 0c             	sub    esp,0xc
c001caac:	68 10 da 01 c0       	push   0xc001da10
c001cab1:	e8 35 3c ff ff       	call   c00106eb <Krnl::panic(char const*)>
c001cab6:	83 c4 10             	add    esp,0x10
c001cab9:	eb 15                	jmp    c001cad0 <LinkedList<Device>::removeFirst()+0xa0>
c001cabb:	90                   	nop
c001cabc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cac0:	8b 00                	mov    eax,DWORD PTR [eax]
c001cac2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001cac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cacc:	89 10                	mov    DWORD PTR [eax],edx
c001cace:	66 90                	xchg   ax,ax
c001cad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cad4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cad7:	8d 50 ff             	lea    edx,[eax-0x1]
c001cada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cade:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cae1:	8d 76 00             	lea    esi,[esi+0x0]
c001cae4:	83 c4 0c             	add    esp,0xc
c001cae7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001cae8 <CPU::~CPU()>:
c001cae8:	83 ec 0c             	sub    esp,0xc
c001caeb:	ba 80 e7 01 c0       	mov    edx,0xc001e780
c001caf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caf4:	89 10                	mov    DWORD PTR [eax],edx
c001caf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cafa:	83 ec 0c             	sub    esp,0xc
c001cafd:	50                   	push   eax
c001cafe:	e8 2b f4 fe ff       	call   c000bf2e <Device::~Device()>
c001cb03:	83 c4 10             	add    esp,0x10
c001cb06:	90                   	nop
c001cb07:	83 c4 0c             	add    esp,0xc
c001cb0a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001cb0c <CPU::~CPU()>:
c001cb0c:	83 ec 0c             	sub    esp,0xc
c001cb0f:	83 ec 0c             	sub    esp,0xc
c001cb12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb16:	e8 cd ff ff ff       	call   c001cae8 <CPU::~CPU()>
c001cb1b:	83 c4 10             	add    esp,0x10
c001cb1e:	83 ec 08             	sub    esp,0x8
c001cb21:	68 94 11 00 00       	push   0x1194
c001cb26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb2a:	e8 c7 df fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001cb2f:	83 c4 10             	add    esp,0x10
c001cb32:	83 c4 0c             	add    esp,0xc
c001cb35:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001cb38 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001cb38:	90                   	nop
c001cb39:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001cb3c <ThreadControlBlock::ThreadControlBlock()>:
c001cb3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb40:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cb47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb4b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001cb52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb56:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001cb5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb61:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001cb68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb6c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001cb73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb77:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001cb7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb7f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001cb83:	90                   	nop
c001cb84:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001cb88 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001cb88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb8c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb96:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cba1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cba8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cbb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbb6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cbbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbc1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cbc8:	90                   	nop
c001cbc9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001cbcc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001cbcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cbd0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cbd3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001cbd4 <PCI::~PCI()>:
c001cbd4:	83 ec 0c             	sub    esp,0xc
c001cbd7:	ba 68 f2 01 c0       	mov    edx,0xc001f268
c001cbdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbe0:	89 10                	mov    DWORD PTR [eax],edx
c001cbe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbe6:	83 ec 0c             	sub    esp,0xc
c001cbe9:	50                   	push   eax
c001cbea:	e8 c9 ed fe ff       	call   c000b9b8 <Bus::~Bus()>
c001cbef:	83 c4 10             	add    esp,0x10
c001cbf2:	90                   	nop
c001cbf3:	83 c4 0c             	add    esp,0xc
c001cbf6:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cbf8 <PCI::~PCI()>:
c001cbf8:	83 ec 0c             	sub    esp,0xc
c001cbfb:	83 ec 0c             	sub    esp,0xc
c001cbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc02:	e8 cd ff ff ff       	call   c001cbd4 <PCI::~PCI()>
c001cc07:	83 c4 10             	add    esp,0x10
c001cc0a:	83 ec 08             	sub    esp,0x8
c001cc0d:	68 5c 01 00 00       	push   0x15c
c001cc12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc16:	e8 db de fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001cc1b:	83 c4 10             	add    esp,0x10
c001cc1e:	83 c4 0c             	add    esp,0xc
c001cc21:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cc22 <IDE::~IDE()>:
c001cc22:	83 ec 0c             	sub    esp,0xc
c001cc25:	ba 1c f3 01 c0       	mov    edx,0xc001f31c
c001cc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc2e:	89 10                	mov    DWORD PTR [eax],edx
c001cc30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc34:	83 ec 0c             	sub    esp,0xc
c001cc37:	50                   	push   eax
c001cc38:	e8 6b f7 fe ff       	call   c000c3a8 <HardDiskController::~HardDiskController()>
c001cc3d:	83 c4 10             	add    esp,0x10
c001cc40:	90                   	nop
c001cc41:	83 c4 0c             	add    esp,0xc
c001cc44:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cc46 <IDE::~IDE()>:
c001cc46:	83 ec 0c             	sub    esp,0xc
c001cc49:	83 ec 0c             	sub    esp,0xc
c001cc4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc50:	e8 cd ff ff ff       	call   c001cc22 <IDE::~IDE()>
c001cc55:	83 c4 10             	add    esp,0x10
c001cc58:	83 ec 08             	sub    esp,0x8
c001cc5b:	68 70 02 00 00       	push   0x270
c001cc60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc64:	e8 8d de fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001cc69:	83 c4 10             	add    esp,0x10
c001cc6c:	83 c4 0c             	add    esp,0xc
c001cc6f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cc70 <SATABus::~SATABus()>:
c001cc70:	83 ec 0c             	sub    esp,0xc
c001cc73:	ba 6c f3 01 c0       	mov    edx,0xc001f36c
c001cc78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc7c:	89 10                	mov    DWORD PTR [eax],edx
c001cc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc82:	83 ec 0c             	sub    esp,0xc
c001cc85:	50                   	push   eax
c001cc86:	e8 1d f7 fe ff       	call   c000c3a8 <HardDiskController::~HardDiskController()>
c001cc8b:	83 c4 10             	add    esp,0x10
c001cc8e:	90                   	nop
c001cc8f:	83 c4 0c             	add    esp,0xc
c001cc92:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cc94 <SATABus::~SATABus()>:
c001cc94:	83 ec 0c             	sub    esp,0xc
c001cc97:	83 ec 0c             	sub    esp,0xc
c001cc9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc9e:	e8 cd ff ff ff       	call   c001cc70 <SATABus::~SATABus()>
c001cca3:	83 c4 10             	add    esp,0x10
c001cca6:	83 ec 08             	sub    esp,0x8
c001cca9:	68 64 01 00 00       	push   0x164
c001ccae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccb2:	e8 3f de fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001ccb7:	83 c4 10             	add    esp,0x10
c001ccba:	83 c4 0c             	add    esp,0xc
c001ccbd:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ccbe <ATA::~ATA()>:
c001ccbe:	83 ec 0c             	sub    esp,0xc
c001ccc1:	ba ac f3 01 c0       	mov    edx,0xc001f3ac
c001ccc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccca:	89 10                	mov    DWORD PTR [eax],edx
c001cccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccd0:	83 ec 0c             	sub    esp,0xc
c001ccd3:	50                   	push   eax
c001ccd4:	e8 b1 f7 fe ff       	call   c000c48a <PhysicalDisk::~PhysicalDisk()>
c001ccd9:	83 c4 10             	add    esp,0x10
c001ccdc:	90                   	nop
c001ccdd:	83 c4 0c             	add    esp,0xc
c001cce0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001cce2 <ATA::~ATA()>:
c001cce2:	83 ec 0c             	sub    esp,0xc
c001cce5:	83 ec 0c             	sub    esp,0xc
c001cce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccec:	e8 cd ff ff ff       	call   c001ccbe <ATA::~ATA()>
c001ccf1:	83 c4 10             	add    esp,0x10
c001ccf4:	83 ec 08             	sub    esp,0x8
c001ccf7:	68 7c 01 00 00       	push   0x17c
c001ccfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd00:	e8 f1 dd fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001cd05:	83 c4 10             	add    esp,0x10
c001cd08:	83 c4 0c             	add    esp,0xc
c001cd0b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001cd0c <ATAPI::~ATAPI()>:
c001cd0c:	83 ec 0c             	sub    esp,0xc
c001cd0f:	ba f4 f3 01 c0       	mov    edx,0xc001f3f4
c001cd14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd18:	89 10                	mov    DWORD PTR [eax],edx
c001cd1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd1e:	83 ec 0c             	sub    esp,0xc
c001cd21:	50                   	push   eax
c001cd22:	e8 63 f7 fe ff       	call   c000c48a <PhysicalDisk::~PhysicalDisk()>
c001cd27:	83 c4 10             	add    esp,0x10
c001cd2a:	90                   	nop
c001cd2b:	83 c4 0c             	add    esp,0xc
c001cd2e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cd30 <ATAPI::~ATAPI()>:
c001cd30:	83 ec 0c             	sub    esp,0xc
c001cd33:	83 ec 0c             	sub    esp,0xc
c001cd36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd3a:	e8 cd ff ff ff       	call   c001cd0c <ATAPI::~ATAPI()>
c001cd3f:	83 c4 10             	add    esp,0x10
c001cd42:	83 ec 08             	sub    esp,0x8
c001cd45:	68 84 01 00 00       	push   0x184
c001cd4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd4e:	e8 a3 dd fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001cd53:	83 c4 10             	add    esp,0x10
c001cd56:	83 c4 0c             	add    esp,0xc
c001cd59:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cd5a <SATA::~SATA()>:
c001cd5a:	83 ec 0c             	sub    esp,0xc
c001cd5d:	ba a8 f4 01 c0       	mov    edx,0xc001f4a8
c001cd62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd66:	89 10                	mov    DWORD PTR [eax],edx
c001cd68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd6c:	83 ec 0c             	sub    esp,0xc
c001cd6f:	50                   	push   eax
c001cd70:	e8 15 f7 fe ff       	call   c000c48a <PhysicalDisk::~PhysicalDisk()>
c001cd75:	83 c4 10             	add    esp,0x10
c001cd78:	90                   	nop
c001cd79:	83 c4 0c             	add    esp,0xc
c001cd7c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cd7e <SATA::~SATA()>:
c001cd7e:	83 ec 0c             	sub    esp,0xc
c001cd81:	83 ec 0c             	sub    esp,0xc
c001cd84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd88:	e8 cd ff ff ff       	call   c001cd5a <SATA::~SATA()>
c001cd8d:	83 c4 10             	add    esp,0x10
c001cd90:	83 ec 08             	sub    esp,0x8
c001cd93:	68 7c 01 00 00       	push   0x17c
c001cd98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd9c:	e8 55 dd fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001cda1:	83 c4 10             	add    esp,0x10
c001cda4:	83 c4 0c             	add    esp,0xc
c001cda7:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cda8 <SATAPI::~SATAPI()>:
c001cda8:	83 ec 0c             	sub    esp,0xc
c001cdab:	ba 38 f6 01 c0       	mov    edx,0xc001f638
c001cdb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdb4:	89 10                	mov    DWORD PTR [eax],edx
c001cdb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdba:	83 ec 0c             	sub    esp,0xc
c001cdbd:	50                   	push   eax
c001cdbe:	e8 c7 f6 fe ff       	call   c000c48a <PhysicalDisk::~PhysicalDisk()>
c001cdc3:	83 c4 10             	add    esp,0x10
c001cdc6:	90                   	nop
c001cdc7:	83 c4 0c             	add    esp,0xc
c001cdca:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cdcc <SATAPI::~SATAPI()>:
c001cdcc:	83 ec 0c             	sub    esp,0xc
c001cdcf:	83 ec 0c             	sub    esp,0xc
c001cdd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdd6:	e8 cd ff ff ff       	call   c001cda8 <SATAPI::~SATAPI()>
c001cddb:	83 c4 10             	add    esp,0x10
c001cdde:	83 ec 08             	sub    esp,0x8
c001cde1:	68 84 01 00 00       	push   0x184
c001cde6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdea:	e8 07 dd fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001cdef:	83 c4 10             	add    esp,0x10
c001cdf2:	83 c4 0c             	add    esp,0xc
c001cdf5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001cdf6 <IOAPIC::~IOAPIC()>:
c001cdf6:	83 ec 0c             	sub    esp,0xc
c001cdf9:	ba 78 f6 01 c0       	mov    edx,0xc001f678
c001cdfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce02:	89 10                	mov    DWORD PTR [eax],edx
c001ce04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce08:	83 ec 0c             	sub    esp,0xc
c001ce0b:	50                   	push   eax
c001ce0c:	e8 1d f1 fe ff       	call   c000bf2e <Device::~Device()>
c001ce11:	83 c4 10             	add    esp,0x10
c001ce14:	90                   	nop
c001ce15:	83 c4 0c             	add    esp,0xc
c001ce18:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ce1a <IOAPIC::~IOAPIC()>:
c001ce1a:	83 ec 0c             	sub    esp,0xc
c001ce1d:	83 ec 0c             	sub    esp,0xc
c001ce20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce24:	e8 cd ff ff ff       	call   c001cdf6 <IOAPIC::~IOAPIC()>
c001ce29:	83 c4 10             	add    esp,0x10
c001ce2c:	83 ec 08             	sub    esp,0x8
c001ce2f:	68 68 01 00 00       	push   0x168
c001ce34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce38:	e8 b9 dc fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001ce3d:	83 c4 10             	add    esp,0x10
c001ce40:	83 c4 0c             	add    esp,0xc
c001ce43:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ce44 <APICTimer::~APICTimer()>:
c001ce44:	83 ec 0c             	sub    esp,0xc
c001ce47:	ba c0 f6 01 c0       	mov    edx,0xc001f6c0
c001ce4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce50:	89 10                	mov    DWORD PTR [eax],edx
c001ce52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce56:	83 ec 0c             	sub    esp,0xc
c001ce59:	50                   	push   eax
c001ce5a:	e8 cd 09 ff ff       	call   c000d82c <Timer::~Timer()>
c001ce5f:	83 c4 10             	add    esp,0x10
c001ce62:	90                   	nop
c001ce63:	83 c4 0c             	add    esp,0xc
c001ce66:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ce68 <APICTimer::~APICTimer()>:
c001ce68:	83 ec 0c             	sub    esp,0xc
c001ce6b:	83 ec 0c             	sub    esp,0xc
c001ce6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce72:	e8 cd ff ff ff       	call   c001ce44 <APICTimer::~APICTimer()>
c001ce77:	83 c4 10             	add    esp,0x10
c001ce7a:	83 ec 08             	sub    esp,0x8
c001ce7d:	68 60 01 00 00       	push   0x160
c001ce82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce86:	e8 6b dc fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001ce8b:	83 c4 10             	add    esp,0x10
c001ce8e:	83 c4 0c             	add    esp,0xc
c001ce91:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ce94 <PIT::~PIT()>:
c001ce94:	83 ec 0c             	sub    esp,0xc
c001ce97:	ba 10 f7 01 c0       	mov    edx,0xc001f710
c001ce9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cea0:	89 10                	mov    DWORD PTR [eax],edx
c001cea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cea6:	83 ec 0c             	sub    esp,0xc
c001cea9:	50                   	push   eax
c001ceaa:	e8 7d 09 ff ff       	call   c000d82c <Timer::~Timer()>
c001ceaf:	83 c4 10             	add    esp,0x10
c001ceb2:	90                   	nop
c001ceb3:	83 c4 0c             	add    esp,0xc
c001ceb6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ceb8 <PIT::~PIT()>:
c001ceb8:	83 ec 0c             	sub    esp,0xc
c001cebb:	83 ec 0c             	sub    esp,0xc
c001cebe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cec2:	e8 cd ff ff ff       	call   c001ce94 <PIT::~PIT()>
c001cec7:	83 c4 10             	add    esp,0x10
c001ceca:	83 ec 08             	sub    esp,0x8
c001cecd:	68 5c 01 00 00       	push   0x15c
c001ced2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ced6:	e8 1b dc fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001cedb:	83 c4 10             	add    esp,0x10
c001cede:	83 c4 0c             	add    esp,0xc
c001cee1:	c3                   	ret    
